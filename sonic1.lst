00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ===========================================================================
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b   (v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 23FC 4000 0010 00C0 0004           move.l	#$40000010,(vdp_control_port).l
00000AD2 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000ADA 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000ADE 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AE4 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AEA 0240 003E                  		andi.w	#$3E,d0
00000AEE 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AF2 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000AF6                            
00000AF6                            VBla_Music:
00000AF6 46FC 2300                  		enable_ints		; enable interrupts (we can accept horizontal interrupts from now on)
00000AFA 08F8 0000 F64F                     bset    #0,(f_wtr_state+$1).w    ; set "SMPS running flag"
00000B00 6600                       		bne.s   VBla_Exit       ; if it was set already, don't call another instance of SMPS
00000B02 4EB9 0000 0000                     jsr UpdateMusic     ; run SMPS
00000B08 4238 F64F                          clr.b   (f_wtr_state+$1).w       ; reset "SMPS running flag"
00000B0C                            
00000B0C                            VBla_Exit:
00000B0C 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B10 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B14 4E73                       		rte
00000B16                            ; ===========================================================================
00000B16 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B1A 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B1E 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B22 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B26 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B2A 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B2E 0000                       		dc.w VBla_0C-VBla_Index
00000B30                            ; ===========================================================================
00000B30                            
00000B30                            VBla_00:
00000B30 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B36 6700                       		beq.s	@islevel
00000B38 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B3E 66B6                       		bne.s	VBla_Music	; if not, branch
00000B40                            
00000B40                            	@islevel:
00000B40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B46 66AE                       		bne.s	VBla_Music	; if not, branch
00000B48                            
00000B48 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4E 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B54 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B58 6600                       		bne.s	@waterabove 	; if yes, branch
00000B5A                            
00000B5A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B7E 6000                       		bra.s	@waterbelow
00000B80                            
00000B80                            @waterabove:
00000B80 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BA4                            
00000BA4                            	@waterbelow:
00000BA4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BA8 6000 FF4C                  		bra.w	VBla_Music
00000BAC                            ; ===========================================================================
00000BAC                            
00000BAC                            VBla_10:
00000BAC 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000BB2 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000BB6                            
00000BB6                            VBla_08:
00000BB6 6100 0000                  		bsr.w   VBla_06
00000BBA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BBE 4EBA 0000                  		jsr     ProcessDMAQueue(pc)
00000BC2                            
00000BC2                            	@nochg:		
00000BC2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000BC8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000BCE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000BD4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000BDA                            ; ---------------------------------------------------------------------------
00000BDA                            ; Subroutine to	run a demo for an amount of time
00000BDA                            ; ---------------------------------------------------------------------------
00000BDA                            
00000BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000BDA                            
00000BDA                            
00000BDA                            Demo_Time:
00000BDA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000BDE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000BE4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000BEA 6100 0000                  		bsr.w	ProcessDPLC2
00000BEE                            
00000BEE                            VBla_14:
00000BEE 4A78 F614                  		tst.w	(v_demolength).w
00000BF2 6700                       		beq.s	@end
00000BF4 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF8                            
00000BF8                            	@end:
00000BF8 4E75                       		rts
00000BFA                            ; ===========================================================================
00000BFA                            
00000BFA                            VBla_04:
00000BFA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFE 6100 0000                  		bsr.w	sub_1642
00000C02                            ; ===========================================================================
00000C02                            
00000C02                            VBla_02:
00000C02 6100                       		bsr.s	VBla_06
00000C04 60E8                       		bra.s	VBla_14
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_0C:
00000C06 61AE                       		bsr.s   VBla_08
00000C08 6000 0000                  		bra.w	sub_1642
00000C0C                            ; ===========================================================================
00000C0C                            
00000C0C                            VBla_0E:
00000C0C 6100                       		bsr.s	VBla_06
00000C0E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000C12 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000C18 4E75                       		rts
00000C1A                            ; ===========================================================================
00000C1A                            
00000C1A                            VBla_12:
00000C1A 6100                       		bsr.s	VBla_06
00000C1C 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C20 6000 0000                  		bra.w	sub_1642
00000C24                            ; ===========================================================================
00000C24                            
00000C24                            VBla_0A:
00000C24 6100 0000                  		bsr.w	PalCycle_SS
00000C28                            
00000C28                            VBla_16:
00000C28 6100                       		bsr.s   CRAMWriteDry
00000C2A 4EBA 0000                  		jsr     ProcessDMAQueue(pc)
00000C2E                            		
00000C2E                            	@nochg:			
00000C2E 61BE                       		bsr.s	VBla_14
00000C30                            
00000C30                            ; ---------------------------------------------------------------------------
00000C30                            ; Subroutine to	read joypad input, and send it to the RAM
00000C30                            ; ---------------------------------------------------------------------------
00000C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C30                            
00000C30                            
00000C30                            ReadJoypads:
00000C30 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
00000C34 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000C3A 6100                       		bsr.s	@read		; do the first joypad
00000C3C 5449                       		addq.w	#2,a1		; do the second	joypad
00000C3E                            
00000C3E                            	@read:
00000C3E 12BC 0000                  		move.b	#0,(a1)
00000C42 1011                       		move.b	(a1),d0
00000C44 E508                       		lsl.b	#2,d0
00000C46 0200 00C0                  		andi.b	#$C0,d0
00000C4A 12BC 0040                  		move.b	#$40,(a1)
00000C4E 1211                       		move.b	(a1),d1
00000C50 0201 003F                  		andi.b	#$3F,d1
00000C54 8001                       		or.b	d1,d0
00000C56 4600                       		not.b	d0
00000C58 1210                       		move.b	(a0),d1
00000C5A B101                       		eor.b	d0,d1
00000C5C 10C0                       		move.b	d0,(a0)+
00000C5E C200                       		and.b	d0,d1
00000C60 10C1                       		move.b	d1,(a0)+
00000C62 4E75                       		rts
00000C64                            ; End of function ReadJoypads
00000C64                            
00000C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000C64                            
00000C64                            
00000C64                            VBla_06:
00000C64 61CA                       		bsr.s	ReadJoypads
00000C66 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000C6A 6600                       		bne.s	AboveWater1	; if yes, branch
00000C6C                            	CRAMWriteDry:
00000C6C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C90 6000                       		bra.s	BelowWater
00000C92                            
00000C92                            	AboveWater1:
00000C92 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000CB6                            
00000CB6                            	BelowWater:
00000CB6 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CDA 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CFE 4E75                       		rts
00000D00                            ; End of function VBla_06
00000D00                            
00000D00                            
00000D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D00                            
00000D00                            
00000D00                            sub_106E:
00000D00 33FC 0100 00A1 1100        		stopZ80
00000D08 0839 0000 00A1 1100 66F6   		waitZ80
00000D12 6100 FF1C                  		bsr.w	ReadJoypads
00000D16 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000D1A 6600                       		bne.s	@waterabove	; if yes, branch
00000D1C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D40 6000                       		bra.s	@waterbelow
00000D42                            
00000D42                            	@waterabove:
00000D42 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000D66                            
00000D66                            	@waterbelow:
00000D66 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DAE 33FC 0000 00A1 1100        		startZ80
00000DB6 4E75                       		rts	
00000DB8                            ; End of function sub_106E
00000DB8                            
00000DB8                            ; ---------------------------------------------------------------------------
00000DB8                            ; Horizontal interrupt
00000DB8                            ; ---------------------------------------------------------------------------
00000DB8                            
00000DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000DB8                            
00000DB8                            
00000DB8                            HBlank:
00000DB8 46FC 2700                  		disable_ints
00000DBC 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000DC0 6700                       		beq.s	@nochg		; if not, branch
00000DC2 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000DC8 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000DCC 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000DD2 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00000DD6 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00000DDE 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
00000DE0 2298                       		move.l	(a0)+,(a1)
00000DE2 2298                       		move.l	(a0)+,(a1)
00000DE4 2298                       		move.l	(a0)+,(a1)
00000DE6 2298                       		move.l	(a0)+,(a1)
00000DE8 2298                       		move.l	(a0)+,(a1)
00000DEA 2298                       		move.l	(a0)+,(a1)
00000DEC 2298                       		move.l	(a0)+,(a1)
00000DEE 2298                       		move.l	(a0)+,(a1)
00000DF0 2298                       		move.l	(a0)+,(a1)
00000DF2 2298                       		move.l	(a0)+,(a1)
00000DF4 2298                       		move.l	(a0)+,(a1)
00000DF6 2298                       		move.l	(a0)+,(a1)
00000DF8 2298                       		move.l	(a0)+,(a1)
00000DFA 2298                       		move.l	(a0)+,(a1)
00000DFC 2298                       		move.l	(a0)+,(a1)
00000DFE 2298                       		move.l	(a0)+,(a1)
00000E00 2298                       		move.l	(a0)+,(a1)
00000E02 2298                       		move.l	(a0)+,(a1)
00000E04 2298                       		move.l	(a0)+,(a1)
00000E06 2298                       		move.l	(a0)+,(a1)
00000E08 2298                       		move.l	(a0)+,(a1)
00000E0A 2298                       		move.l	(a0)+,(a1)
00000E0C 2298                       		move.l	(a0)+,(a1)
00000E0E 2298                       		move.l	(a0)+,(a1)
00000E10 2298                       		move.l	(a0)+,(a1)
00000E12 2298                       		move.l	(a0)+,(a1)
00000E14 2298                       		move.l	(a0)+,(a1)
00000E16 2298                       		move.l	(a0)+,(a1)
00000E18 2298                       		move.l	(a0)+,(a1)
00000E1A 2298                       		move.l	(a0)+,(a1)
00000E1C 2298                       		move.l	(a0)+,(a1)
00000E1E 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
00000E24 4CDF 0300                  		movem.l	(sp)+,a0-a1
00000E28                            
00000E28                            	@nochg:
00000E28 4E73                       		rte	
00000E2A                            ; ===========================================================================
00000E2A                            ; End of function HBlank
00000E2A                            
00000E2A                            ; ---------------------------------------------------------------------------
00000E2A                            ; Subroutine to	initialise joypads
00000E2A                            ; ---------------------------------------------------------------------------
00000E2A                            
00000E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E2A                            
00000E2A                            
00000E2A                            JoypadInit:
00000E2A 33FC 0100 00A1 1100        		stopZ80
00000E32 0839 0000 00A1 1100 66F6   		waitZ80
00000E3C 7040                       		moveq	#$40,d0
00000E3E 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000E44 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000E4A 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00000E50 33FC 0000 00A1 1100        		startZ80
00000E58 4E75                       		rts	
00000E5A                            ; End of function JoypadInit
00000E5A                            
00000E5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E5A                            
00000E5A                            
00000E5A                            VDPSetupGame:
00000E5A 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00000E60 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000E66 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00000E6C 7E12                       		moveq	#$12,d7
00000E6E                            
00000E6E                            	@setreg:
00000E6E 309A                       		move.w	(a2)+,(a0)
00000E70 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00000E74                            
00000E74 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00000E7A 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00000E7E 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00000E84 7000                       		moveq	#0,d0
00000E86 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00000E90 3E3C 003F                  		move.w	#$3F,d7
00000E94                            
00000E94                            	@clrCRAM:
00000E94 3280                       		move.w	d0,(a1)
00000E96 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
00000E9A                            
00000E9A 42B8 F616                  		clr.l	(v_scrposy_dup).w
00000E9E 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00000EA2 2F01                       		move.l	d1,-(sp)
00000EA4 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
00000EC6                            
00000EC6                            	@waitforDMA:
00000EC6 3215                       		move.w	(a5),d1
00000EC8 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00000ECC 66F8                       		bne.s	@waitforDMA	; if yes, branch
00000ECE                            
00000ECE 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00000ED2 221F                       		move.l	(sp)+,d1
00000ED4 4E75                       		rts	
00000ED6                            ; End of function VDPSetupGame
00000ED6                            
00000ED6                            ; ===========================================================================
00000ED6 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00000ED8 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00000EDA 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00000EDC 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00000EDE 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00000EE0 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00000EE2 8600                       		dc.w $8600		; unused
00000EE4 8700                       		dc.w $8700		; set background colour (palette entry 0)
00000EE6 8800                       		dc.w $8800		; unused
00000EE8 8900                       		dc.w $8900		; unused
00000EEA 8A00                       		dc.w $8A00		; default H.interrupt register
00000EEC 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00000EEE 8C81                       		dc.w $8C81		; 40-cell display mode
00000EF0 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00000EF2 8E00                       		dc.w $8E00		; unused
00000EF4 8F02                       		dc.w $8F02		; set VDP increment size
00000EF6 9001                       		dc.w $9001		; 64-cell hscroll size
00000EF8 9100                       		dc.w $9100		; window horizontal position
00000EFA 9200                       		dc.w $9200		; window vertical position
00000EFC                            
00000EFC                            ; ---------------------------------------------------------------------------
00000EFC                            ; Subroutine to	clear the screen
00000EFC                            ; ---------------------------------------------------------------------------
00000EFC                            
00000EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000EFC                            
00000EFC                            
00000EFC                            ClearScreen:
00000EFC 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
00000F1E                            
00000F1E                            	@wait1:
00000F1E 3215                       		move.w	(a5),d1
00000F20 0801 0001                  		btst	#1,d1
00000F24 66F8                       		bne.s	@wait1
00000F26                            
00000F26 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F2A 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00000F4C                            
00000F4C                            	@wait2:
00000F4C 3215                       		move.w	(a5),d1
00000F4E 0801 0001                  		btst	#1,d1
00000F52 66F8                       		bne.s	@wait2
00000F54                            
00000F54 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F58 42B8 F616                  		clr.l	(v_scrposy_dup).w
00000F5C 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00000F60                            
00000F60 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00000F64 7000                       		moveq	#0,d0
00000F66 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
00000F6A                            
00000F6A                            	@clearsprites:
00000F6A 22C0                       		move.l	d0,(a1)+
00000F6C 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00000F70                            
00000F70 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00000F74 7000                       		moveq	#0,d0
00000F76 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
00000F7A                            
00000F7A                            	@clearhscroll:
00000F7A 22C0                       		move.l	d0,(a1)+
00000F7C 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00000F80 4E75                       		rts	
00000F82                            ; End of function ClearScreen
00000F82                            
00000F82                            ; ---------------------------------------------------------------------------
00000F82                            ; Subroutine to	load the sound driver
00000F82                            ; ---------------------------------------------------------------------------
00000F82                            
00000F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F82                            
00000F82                            
00000F82                            SoundDriverLoad:
00000F82 4E71                       		nop	
00000F84 33FC 0100 00A1 1100        		stopZ80
00000F8C 33FC 0100 00A1 1200        		resetZ80
00000F94 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00000F9A 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00000FA0 6100 0000                  		bsr.w	KosDec		; decompress
00000FA4 33FC 0000 00A1 1200        		resetZ80a
00000FAC 4E71                       		nop	
00000FAE 4E71                       		nop	
00000FB0 4E71                       		nop	
00000FB2 4E71                       		nop	
00000FB4 33FC 0100 00A1 1200        		resetZ80
00000FBC 33FC 0000 00A1 1100        		startZ80
00000FC4 4E75                       		rts	
00000FC6                            ; End of function SoundDriverLoad
00000FC6                            
00000FC6                            		include	"_incObj\sub PlaySound.asm"
00000FC6                            ; ---------------------------------------------------------------------------
00000FC6                            ; Subroutine to	play a music track
00000FC6                            
00000FC6                            ; input:
00000FC6                            ;	d0 = track to play
00000FC6                            ; ---------------------------------------------------------------------------
00000FC6                            
00000FC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FC6                            
00000FC6                            
00000FC6                            PlaySound:
00000FC6 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
00000FCA 4E75                       		rts	
00000FCC                            ; End of function PlaySound
00000FCC                            
00000FCC                            ; ---------------------------------------------------------------------------
00000FCC                            ; Subroutine to	play a sound effect
00000FCC                            ; ---------------------------------------------------------------------------
00000FCC                            
00000FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FCC                            
00000FCC                            
00000FCC                            PlaySound_Special:
00000FCC 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00000FD0 4E75                       		rts	
00000FD2                            ; End of function PlaySound_Special
00000FD2                            
00000FD2                            ; ===========================================================================
00000FD2                            ; ---------------------------------------------------------------------------
00000FD2                            ; Unused sound/music subroutine
00000FD2                            ; ---------------------------------------------------------------------------
00000FD2                            
00000FD2                            PlaySound_Unused:
00000FD2 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
00000FD6 4E75                       		rts	
00000FD6 4E75                       		rts	
00000FD8                            		include	"_inc\PauseGame.asm"
00000FD8                            ; ---------------------------------------------------------------------------
00000FD8                            ; Subroutine to	pause the game
00000FD8                            ; ---------------------------------------------------------------------------
00000FD8                            
00000FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FD8                            
00000FD8                            
00000FD8                            PauseGame:
00000FD8 4E71                       		nop	
00000FDA 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00000FDE 6700                       		beq.s	Unpause		; if not, branch
00000FE0 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00000FE4 6600                       		bne.s	Pause_StopGame	; if yes, branch
00000FE6 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00000FEC 6700                       		beq.s	Pause_DoNothing	; if not, branch
00000FEE                            
00000FEE                            Pause_StopGame:
00000FEE 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00000FF4 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
00000FFA                            
00000FFA                            Pause_Loop:
00000FFA 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001000 6100 0000                  		bsr.w	WaitForVBla
00001004 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
00001008 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000100A 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001010 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001012 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
00001018 4E71                       		nop	
0000101A 6000                       		bra.s	Pause_EndMusic
0000101C                            ; ===========================================================================
0000101C                            
0000101C                            Pause_ChkBC:
0000101C 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
00001022 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001024 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0000102A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000102C                            
0000102C                            Pause_ChkStart:
0000102C 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001032 67C6                       		beq.s	Pause_Loop	; if not, branch
00001034                            
00001034                            Pause_EndMusic:
00001034 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000103A                            
0000103A                            Unpause:
0000103A 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001040                            
00001040                            Pause_DoNothing:
00001040 4E75                       		rts	
00001042                            ; ===========================================================================
00001042                            
00001042                            Pause_SlowMo:
00001042 31FC 0001 F63A             		move.w	#1,(f_pause).w
00001048 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
0000104E 4E75                       		rts	
00001050                            ; End of function PauseGame
00001050                            ; End of function PauseGame
00001050                            
00001050                            ; ---------------------------------------------------------------------------
00001050                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001050                            
00001050                            ; input:
00001050                            ;	a1 = tile map address
00001050                            ;	d0 = VRAM address
00001050                            ;	d1 = width (cells)
00001050                            ;	d2 = height (cells)
00001050                            ; ---------------------------------------------------------------------------
00001050                            
00001050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001050                            
00001050                            
00001050                            TilemapToVRAM:
00001050 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00001056 283C 0080 0000             		move.l	#$800000,d4
0000105C                            
0000105C                            	Tilemap_Line:
0000105C 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001060 3601                       		move.w	d1,d3
00001062                            
00001062                            	Tilemap_Cell:
00001062 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001064 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
00001068 D084                       		add.l	d4,d0		; goto next line
0000106A 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
0000106E 4E75                       		rts	
00001070                            ; End of function TilemapToVRAM
00001070                            
00001070                            		include	"_inc\Nemesis Decompression.asm"
00001070                            ; ==============================================================================
00001070                            ; ------------------------------------------------------------------------------
00001070                            ; Nemesis decompression routine
00001070                            ; ------------------------------------------------------------------------------
00001070                            ; Optimized by vladikcomper
00001070                            ; ------------------------------------------------------------------------------
00001070                             
00001070                            NemDec_RAM:
00001070 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001074 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001078 6000                           bra.s   NemDec_Main
0000107A                             
0000107A                            ; ------------------------------------------------------------------------------
0000107A                            NemDec:
0000107A 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
0000107E 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001084 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
00001088                             
00001088                            NemDec_Main:
00001088 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
0000108C 3418                           move.w  (a0)+,d2        ; get number of patterns
0000108E 6A00                           bpl.s   @0          ; are we in Mode 0?
00001090 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001094 E74A                       @0  lsl.w   #3,d2
00001096 3A42                           movea.w d2,a5
00001098 7607                           moveq   #7,d3
0000109A 7400                           moveq   #0,d2
0000109C 7800                           moveq   #0,d4
0000109E 6100 0000                      bsr.w   NemDec_BuildCodeTable
000010A2 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
000010A4 E145                           asl.w   #8,d5           ; shift up by a byte
000010A6 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
000010A8 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
000010AC 6100                           bsr.s   NemDec2
000010AE 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
000010B2 4E75                           rts
000010B4                             
000010B4                            ; ---------------------------------------------------------------------------
000010B4                            ; Part of the Nemesis decompressor, processes the actual compressed data
000010B4                            ; ---------------------------------------------------------------------------
000010B4                             
000010B4                            NemDec2:
000010B4 3E06                           move.w  d6,d7
000010B6 5147                           subq.w  #8,d7           ; get shift value
000010B8 3205                           move.w  d5,d1
000010BA EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
000010BC 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
000010C0 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
000010C2 0241 00FF                      andi.w  #$FF,d1
000010C6 D241                           add.w   d1,d1
000010C8 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000010CC 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000010D0 6400                           bcc.s   @0          ; if not, branch
000010D2 5046                           addq.w  #8,d6
000010D4 E145                           asl.w   #8,d5
000010D6 1A18                           move.b  (a0)+,d5        ; read next byte
000010D8 1231 1001                  @0  move.b  1(a1,d1.w),d1
000010DC 3001                           move.w  d1,d0
000010DE 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000010E2 0240 00F0                      andi.w  #$F0,d0
000010E6                             
000010E6                            NemDec_GetRepeatCount:
000010E6 E848                           lsr.w   #4,d0           ; get repeat count
000010E8                             
000010E8                            NemDec_WritePixel:
000010E8 E98C                           lsl.l   #4,d4           ; shift up by a nybble
000010EA 8801                           or.b    d1,d4           ; write pixel
000010EC 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000010F0 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000010F2                            ; ---------------------------------------------------------------------------
000010F2                             
000010F2                            NemPCD_NewRow:
000010F2 7800                           moveq   #0,d4           ; reset row
000010F4 7607                           moveq   #7,d3           ; reset nybble counter
000010F6                             
000010F6                            NemDec_WritePixelLoop:
000010F6 51C8 FFF0                      dbf d0,NemDec_WritePixel
000010FA 60B8                           bra.s   NemDec2
000010FC                            ; ---------------------------------------------------------------------------
000010FC                             
000010FC                            NemDec_InlineData:
000010FC 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000010FE 0C46 0009                      cmpi.w  #9,d6
00001102 6400                           bcc.s   @0
00001104 5046                           addq.w  #8,d6
00001106 E145                           asl.w   #8,d5
00001108 1A18                           move.b  (a0)+,d5
0000110A 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
0000110C 3205                           move.w  d5,d1
0000110E EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001110 3001                           move.w  d1,d0
00001112 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001116 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000111A 0C46 0009                      cmpi.w  #9,d6
0000111E 64C6                           bcc.s   NemDec_GetRepeatCount
00001120 5046                           addq.w  #8,d6
00001122 E145                           asl.w   #8,d5
00001124 1A18                           move.b  (a0)+,d5
00001126 60BE                           bra.s   NemDec_GetRepeatCount
00001128                             
00001128                            ; ---------------------------------------------------------------------------
00001128                            ; Subroutines to output decompressed entry
00001128                            ; Selected depending on current decompression mode
00001128                            ; ---------------------------------------------------------------------------
00001128                             
00001128                            NemPCD_WriteRowToVDP:
00001128                            loc_1502:
00001128 2884                           move.l  d4,(a4)         ; write 8-pixel row
0000112A 534D                           subq.w  #1,a5
0000112C 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
0000112E 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001130 4E75                           rts
00001132                            ; ---------------------------------------------------------------------------
00001132                             
00001132                            NemPCD_WriteRowToVDP_XOR:
00001132 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001134 2882                           move.l  d2,(a4)         ; and write the result
00001136 534D                           subq.w  #1,a5
00001138 380D                           move.w  a5,d4
0000113A 66B6                           bne.s   NemPCD_NewRow
0000113C 4E75                           rts
0000113E                            ; ---------------------------------------------------------------------------
0000113E                             
0000113E                            NemDec_WriteRowToRAM:
0000113E 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001140 534D                           subq.w  #1,a5
00001142 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001144 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
00001146 4E75                           rts
00001148                            ; ---------------------------------------------------------------------------
00001148                             
00001148                            NemDec_WriteRowToRAM_XOR:
00001148 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000114A 28C2                           move.l  d2,(a4)+        ; and write the result
0000114C 534D                           subq.w  #1,a5
0000114E 380D                           move.w  a5,d4
00001150 66A0                           bne.s   NemPCD_NewRow
00001152 4E75                           rts
00001154                             
00001154                            ; ---------------------------------------------------------------------------
00001154                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001154                            ; ---------------------------------------------------------------------------
00001154                             
00001154                            NemDec_BuildCodeTable:
00001154 1018                           move.b  (a0)+,d0        ; read first byte
00001156                             
00001156                            @ChkEnd:
00001156 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000115A 6600                           bne.s   @NewPalIndex        ; if not, branch
0000115C 4E75                           rts
0000115E                            ; ---------------------------------------------------------------------------
0000115E                             
0000115E                            @NewPalIndex:
0000115E 3E00                           move.w  d0,d7
00001160                             
00001160                            @ItemLoop:
00001160 1018                           move.b  (a0)+,d0        ; read next byte
00001162 6BF2                           bmi.s   @ChkEnd         ; ~~
00001164 1200                           move.b  d0,d1
00001166 0247 000F                      andi.w  #$F,d7          ; get palette index
0000116A 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
0000116E 8E41                           or.w    d1,d7           ; combine the two
00001170 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001174 1200                           move.b  d0,d1
00001176 E149                           lsl.w   #8,d1
00001178 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000117A 7208                           moveq   #8,d1
0000117C 9240                           sub.w   d0,d1           ; is the code 8 bits long?
0000117E 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001180 1018                           move.b  (a0)+,d0        ; get code
00001182 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001184 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001188 60D6                           bra.s   @ItemLoop       ; repeat
0000118A                            ; ---------------------------------------------------------------------------
0000118A                             
0000118A                            @ItemShortCode:
0000118A 1018                           move.b  (a0)+,d0        ; get code
0000118C E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
0000118E D040                           add.w   d0,d0           ; get index into code table
00001190 7A01                           moveq   #1,d5
00001192 E36D                           lsl.w   d1,d5
00001194 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
00001196 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000119A                             
0000119A                            @ItemShortCodeLoop:
0000119A 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
0000119C 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
000011A0 60BE                           bra.s   @ItemLoop
000011A0 60BE                           bra.s   @ItemLoop
000011A2                            
000011A2                              
000011A2                                pusho	; buffer local label symbol config
000011A2                                opt ws+  ; change local label symbol to '.'
000011A2                            
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; MACRO ResetDMAQueue
000011A2                            ; Clears the DMA queue, discarding all previously-queued DMAs.
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
000011A2                            ; Performs all queued DMA transfers and clears the DMA queue.
000011A2                            ;
000011A2                            ; Output:
000011A2                            ; 	a1,a5	trashed
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE InitDMAQueue
000011A2                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
000011A2                            ; Must be called before the queue is used, and the queue expects that only it
000011A2                            ; write to this region of RAM.
000011A2                            ;
000011A2                            ; Output:
000011A2                            ; 	a0,d0,d1	trashed
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
000011A2                            ; Queues a DMA with parameters given in registers.
000011A2                            ;
000011A2                            ; Options:
000011A2                            ; 	AssumeSourceAddressInBytes (default 1)
000011A2                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
000011A2                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
000011A2                            ; 	Use128kbSafeDMA (default 0)
000011A2                            ; 	UseVIntSafeDMA (default 0)
000011A2                            ; Input:
000011A2                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
000011A2                            ; 		set to 0)
000011A2                            ; 	d2	Destination address
000011A2                            ; 	d3	Transfer length (in words)
000011A2                            ; Output:
000011A2                            ; 	d0,d1,d2,d3,a1	trashed
000011A2                            ;
000011A2                            ; With the default settings, runs in:
000011A2                            ; * 48(11/0) cycles if queue is full (DMA discarded)
000011A2                            ; * 184(29/9) cycles otherwise (DMA queued)
000011A2                            ;
000011A2                            ; With Use128kbSafeDMA = 1, runs in:
000011A2                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
000011A2                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
000011A2                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
000011A2                            ;   fills the queue (second piece is discarded)
000011A2                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
000011A2                            ;   space for both pieces (both pieces queued)
000011A2                            ;
000011A2                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
000011A2                            ;
000011A2                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
000011A2                            ; but only if the DMA is not entirely discarded. However, all callers must be
000011A2                            ; edited to make sure the adresss given is correct.
000011A2                            ;
000011A2                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
000011A2                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
000011A2                            ; discarded. However, all callers must be edited to make sure the adresss given
000011A2                            ; in the correct form. You can use the dmaSource function for that.
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ; MACRO QueueStaticDMA
000011A2                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
000011A2                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
000011A2                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
000011A2                            ;
000011A2                            ; Options:
000011A2                            ; 	UseVIntSafeDMA (default 0)
000011A2                            ; Input:
000011A2                            ; 	Source address (in bytes), transfer length (in bytes), destination address
000011A2                            ; Output:
000011A2                            ; 	d0,a1	trashed
000011A2                            ;
000011A2                            ; With the default settings, runs in:
000011A2                            ; * 32(7/0) cycles if queue is full (DMA discarded)
000011A2                            ; * 122(21/8) cycles otherwise (DMA queued)
000011A2                            ;
000011A2                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
000011A2                            ; ===========================================================================
000011A2                            ; option: AssumeSourceAddressInBytes
000011A2                            ;
000011A2                            ; This option makes the function work as a drop-in replacement of the original
000011A2                            ; functions. If you modify all callers to supply a position in words instead of
000011A2                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
000011A2 =00000001                  AssumeSourceAddressInBytes = 1
000011A2                            ; ===========================================================================
000011A2                            ; option: AssumeSourceAddressIsRAMSafe
000011A2                            ;
000011A2                            ; This option (which is disabled by default) makes the DMA queue assume that the
000011A2                            ; source address is given to the function in a way that makes them safe to use
000011A2                            ; with RAM sources. You need to edit all callers to ensure this.
000011A2                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
000011A2 =00000000                  AssumeSourceAddressIsRAMSafe = 0
000011A2                            ; ===========================================================================
000011A2                            ; option: UseRAMSourceSafeDMA
000011A2                            ;
000011A2                            ; This option (which is enabled by default) makes source addresses in RAM safe
000011A2                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
000011A2                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
000011A2 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
000011A2                            ; ===========================================================================
000011A2                            ; option: Use128kbSafeDMA
000011A2                            ;
000011A2                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
000011A2                            ; disabled by default because you can simply align the art in ROM and avoid the
000011A2                            ; issue altogether. It is here so that you have a high-performance routine to do
000011A2                            ; the job in situations where you can't align it in ROM.
000011A2 =00000001                  Use128kbSafeDMA = 1
000011A2                            ; ===========================================================================
000011A2                            ; option UseVIntSafeDMA
000011A2                            ;
000011A2                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
000011A2                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
000011A2                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
000011A2                            ; KosM decoder) prevent these by masking off interrupts before calling and then
000011A2                            ; restore interrupts after.
000011A2 =00000000                  UseVIntSafeDMA = 0
000011A2                            ; ===========================================================================
000011A2                            
000011A2                            
000011A2                            ; Convenience macros, for increased maintainability of the code.
000011A2 =00000027                  DMA = %100111
000011A2 =00000021                  VRAM = %100001
000011A2                            ; Like vdpComm, but starting from an address contained in a register
000011A2 =00000001                  vdpCommReg_defined = 1
000011A2                            vdpCommReg macro reg,type,rwd,clr
000011A2                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
000011A2                            	if ((\type&\rwd)&3)<>0
000011A2                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
000011A2                            	endif
000011A2                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
000011A2                            	swap	\reg								; Put all bits in proper places
000011A2                            	if \clr <> 0
000011A2                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
000011A2                            	endif
000011A2                            	if ((\type&\rwd)&$FC)=$20
000011A2                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
000011A2                            	elseif ((\type&\rwd)&$FC)<>0
000011A2                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
000011A2                            	endif
000011A2                            	endm
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000001                  intMacros_defined = 1
000011A2                            enableInts macro
000011A2                            	move	#$2300,sr
000011A2                            	endm
000011A2                            
000011A2                            disableInts macro
000011A2                            	move	#$2700,sr
000011A2                            	endm
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000001                  DMAEntry_defined = 1
000011A2                                    rsreset
000011A2 =00000000                  DMAEntry.Reg94:		rs.b	1
000011A2                            			  
000011A2 =00000001                  DMAEntry.Size:      rs.b    0
000011A2 =00000001                  DMAEntry.SizeH:		rs.b	1
000011A2 =00000002                  DMAEntry.Reg93:		rs.b	1
000011A2 =00000003                  DMAEntry.Source:    rs.b    0
000011A2 =00000003                  DMAEntry.SizeL:		rs.b	1
000011A2 =00000004                  DMAEntry.Reg97:		rs.b	1
000011A2 =00000005                  DMAEntry.SrcH:		rs.b	1
000011A2 =00000006                  DMAEntry.Reg96:		rs.b	1
000011A2 =00000007                  DMAEntry.SrcM:		rs.b	1
000011A2 =00000008                  DMAEntry.Reg95:		rs.b	1
000011A2 =00000009                  DMAEntry.SrcL:		rs.b	1
000011A2 =0000000A                  DMAEntry.Command:	rs.l	1
000011A2 =0000000E                  DMAEntry.len:   rs.w    0
000011A2                            ; ---------------------------------------------------------------------------
000011A2 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            						
000011A2                            										   
000011A2                            									   
000011A2                            	  
000011A2                            																			 
000011A2                            							  
000011A2 =00000001                  QueueStaticDMA_defined = 1
000011A2                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
000011A2                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
000011A2                            ; crosses a 128kB boundary, or has size 0.
000011A2                            QueueStaticDMA macro src,length,dest
000011A2                                local   len
000011A2                            		if ((\src)&1)<>0
000011A2                            			inform 3,"DMA queued from odd source \1!"
000011A2                            		endif
000011A2                            		if ((\length)&1)<>0
000011A2                            			inform 3,"DMA an odd number of bytes \2!"
000011A2                            		endif
000011A2                            		if (\length)=0
000011A2                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
000011A2                            		endif
000011A2                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
000011A2                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
000011A2                            		endif
000011A2                            	  
000011A2                            	if UseVIntSafeDMA=1
000011A2                            		move.w	sr,-(sp)										; Save current interrupt mask
000011A2                            		disableInts												; Mask off interrupts
000011A2                            	endif ; UseVIntSafeDMA=1
000011A2                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
000011A2                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
000011A2                            	beq.s	.done												; Return if there's no more room in the buffer
000011A2                            	len: = ((length>>1)&$7FFF)
000011A2                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
000011A2                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
000011A2                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
000011A2                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
000011A2                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
000011A2                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
000011A2                            .done:
000011A2                            	if UseVIntSafeDMA=1
000011A2                            		move.w	(sp)+,sr										; Restore interrupts to previous state
000011A2                            	endif ;UseVIntSafeDMA=1
000011A2                            	endm
000011A2                            
000011A2                                
000011A2                            
000011A2                            ; ---------------------------------------------------------------------------
000011A2                            ResetDMAQueue: macro
000011A2                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
000011A2                            	endm
000011A2                            ; ===========================================================================
000011A2                            
000011A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000011A2                            
000011A2                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
000011A2                            Add_To_DMA_Queue:
000011A2                            QueueDMATransfer:
000011A2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000011A6 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
000011AA 6700                       	beq.s	.done											; Return if there's no more room in the buffer
000011AC                            
000011AC E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
000011AE 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
000011B2 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
000011B6 7000                       	moveq	#0,d0											; We need a zero on d0
000011B8                            
000011B8                            		; Detect if transfer crosses 128KB boundary
000011B8                            		; Using sub+sub instead of move+add handles the following edge cases:
000011B8                            		; (1) d3.w = 0 => 128kB transfer
000011B8                            		;   (a) d1.w = 0 => no carry, don't split the DMA
000011B8                            		;   (b) d1.w != 0 => carry, need to split the DMA
000011B8                            		; (2) d3.w != 0
000011B8                            		;   (a) if there is carry on d1.w + d3.w
000011B8                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
000011B8                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
000011B8                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
000011B8                            		; The reason this works is that carry on d1.w + d3.w means that
000011B8                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
000011B8                            		; d1.w + d3.w > $10000.
000011B8 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
000011BA 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
000011BC 6500                       		bcs.s	.doubletransfer								; Branch if yes
000011BE                            	; It does not cross a 128kB boundary. So just finish writing it.
000011BE 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
000011C2                            
000011C2                            .finishxfer:
000011C2                            	; Command to specify destination address and begin DMA
000011C2 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000011CE 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000011D2 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000011D4 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000011D8                            
000011D8                            .done:
000011D8 4E75                       	rts
000011DA                            ; ---------------------------------------------------------------------------
000011DA                            .doubletransfer:
000011DA                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000011DA D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000011DC 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000011E0                            
000011E0 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000011E4 67DC                       		beq.s	.finishxfer									; Branch if not
000011E6                            
000011E6                            		; Get second transfer's source, destination, and length
000011E6 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000011E8 D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000011EA D040                       		add.w	d0,d0										; Convert to number of bytes
000011EC D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000011EE                            
000011EE                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000011EE                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000011FC 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001200                            
00001200                            		; Do second transfer
00001200 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001204 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
00001208                            
00001208                            		; Command to specify destination address and begin DMA
00001212 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
00001216 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
00001218                            
00001218 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
0000121C 4E75                       		rts
0000121E                            ; End of function QueueDMATransfer
0000121E                            ; ===========================================================================
0000121E                            
0000121E                            ; ---------------------------------------------------------------------------
0000121E                            ; Subroutine for issuing all VDP commands that were queued
0000121E                            ; (by earlier calls to QueueDMATransfer)
0000121E                            ; Resets the queue when it's done
0000121E                            ; ---------------------------------------------------------------------------
0000121E                            
0000121E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000121E                            
0000121E                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
0000121E                            Process_DMA_Queue:
0000121E                            ProcessDMAQueue:
0000121E 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001222 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
00001226                            ; ---------------------------------------------------------------------------
00001226                            .jump_table:
00001226 4E75                       	rts
00001228                            	rept 6
00001228                            		trap	#0											; Just in case
00001228 4E40 4E40 4E40 4E40 4E40+  	endr
00001234                            ; ---------------------------------------------------------------------------
00001234 =00000001                      c: = 1
00001234                            	rept QueueSlotCount
00001234                            		lea	(vdp_control_port).l,a5
00001234                            		lea	(VDP_Command_Buffer).w,a1
00001234                            		if c<>QueueSlotCount
00001234                            			bra.w	.jump0 - c*8
00001234                            		endif
00001234                                c: = c + 1
0000132C                            ; ---------------------------------------------------------------------------
0000132C                            	rept QueueSlotCount
0000132C                            		move.l	(a1)+,(a5)									; Transfer length
0000132C                            		move.l	(a1)+,(a5)									; Source address high
0000132C                            		move.l	(a1)+,(a5)									; Source address low + destination high
0000132C                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
0000132C 2A99 2A99 2A99 3A99 2A99+  	endr
000013BC                            
000013BC                            .jump0:
000013BC 31FC C800 C8FC             	ResetDMAQueue
000013C2 4E75                       	rts
000013C4                            ; End of function ProcessDMAQueue
000013C4                            ; ===========================================================================
000013C4                            
000013C4                            ; ---------------------------------------------------------------------------
000013C4                            ; Subroutine for initializing the DMA queue.
000013C4                            ; ---------------------------------------------------------------------------
000013C4                            
000013C4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000013C4                            
000013C4                            InitDMAQueue:
000013C4 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
000013C8 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
000013CA 223C 9397 9695             	move.l	#$93979695,d1
000013D0 =00000000                      c: = 0
000013D0                            	rept QueueSlotCount
000013D0                            		move.b	d0,c + DMAEntry.Reg94(a0)
000013D0                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000013D0                                c: = c + DMAEntry.len
000013D0 1080 03C8 0002 1140 000E+  	endr
0000145E                            
0000145E 31FC C800 C8FC             	ResetDMAQueue
00001464 4E75                       	rts
00001466                            ; End of function ProcessDMAQueue
00001466                            ; ===========================================================================
00001466                            
00001466                            
00001466                                popo	; buffer local label symbol config
00001466                            
00001466                            
00001466                            ; ---------------------------------------------------------------------------
00001466                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
00001466                            ; ---------------------------------------------------------------------------
00001466                            
00001466                            ; ARGUMENTS
00001466                            ; d0 = index of PLC list
00001466                            ; ---------------------------------------------------------------------------
00001466                            
00001466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001466                            
00001466                            ; LoadPLC:
00001466                            AddPLC:
00001466 48E7 0060                  		movem.l	a1-a2,-(sp)
0000146A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001470 D040                       		add.w	d0,d0
00001472 3031 0000                  		move.w	(a1,d0.w),d0
00001476 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000147A 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
0000147E                            
0000147E                            	@findspace:
0000147E 4A92                       		tst.l	(a2)		; is space available in RAM?
00001480 6700                       		beq.s	@copytoRAM	; if yes, branch
00001482 5C4A                       		addq.w	#6,a2		; if not, try next space
00001484 60F8                       		bra.s	@findspace
00001486                            ; ===========================================================================
00001486                            
00001486                            @copytoRAM:
00001486 3019                       		move.w	(a1)+,d0	; get length of PLC
00001488 6B00                       		bmi.s	@skip
0000148A                            
0000148A                            	@loop:
0000148A 24D9                       		move.l	(a1)+,(a2)+
0000148C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000148E 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001492                            
00001492                            	@skip:
00001492 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
00001496 4E75                       		rts	
00001498                            ; End of function AddPLC
00001498                            
00001498                            
00001498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001498                            ; Queue pattern load requests, but clear the PLQ first
00001498                            
00001498                            ; ARGUMENTS
00001498                            ; d0 = index of PLC list (see ArtLoadCues)
00001498                            
00001498                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
00001498                            ;	  (or hacker) is responsible for making sure that no more than
00001498                            ;	  16 load requests are copied into the buffer.
00001498                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
00001498                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
00001498                            
00001498                            ; LoadPLC2:
00001498                            NewPLC:
00001498 48E7 0060                  		movem.l	a1-a2,-(sp)
0000149C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000014A2 D040                       		add.w	d0,d0
000014A4 3031 0000                  		move.w	(a1,d0.w),d0
000014A8 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
000014AC 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
000014AE 45F8 F680                  		lea	(v_plc_buffer).w,a2
000014B2 3019                       		move.w	(a1)+,d0	; get length of PLC
000014B4 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
000014B6                            
000014B6                            	@loop:
000014B6 24D9                       		move.l	(a1)+,(a2)+
000014B8 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000014BA 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
000014BE                            
000014BE                            	@skip:
000014BE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000014C2 4E75                       		rts	
000014C4                            ; End of function NewPLC
000014C4                            
000014C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014C4                            
000014C4                            ; ---------------------------------------------------------------------------
000014C4                            ; Subroutine to	clear the pattern load cues
000014C4                            ; ---------------------------------------------------------------------------
000014C4                            
000014C4                            ; Clear the pattern load queue ($FFF680 - $FFF700)
000014C4                            
000014C4                            
000014C4                            ClearPLC:
000014C4 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
000014C8 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
000014CA                            
000014CA                            	@loop:
000014CA 429A                       		clr.l	(a2)+
000014CC 51C8 FFFC                  		dbf	d0,@loop
000014D0 4E75                       		rts	
000014D2                            ; End of function ClearPLC
000014D2                            
000014D2                            ; ---------------------------------------------------------------------------
000014D2                            ; Subroutine to	use graphics listed in a pattern load cue
000014D2                            ; ---------------------------------------------------------------------------
000014D2                            
000014D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014D2                            
000014D2                            
000014D2                            RunPLC:
000014D2 4AB8 F680                  		tst.l	(v_plc_buffer).w
000014D6 6700                       		beq.s	Rplc_Exit
000014D8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000014DC 6600                       		bne.s	Rplc_Exit
000014DE 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000014E2 47F9 0000 1128             		lea	(NemPCD_WriteRowToVDP).l,a3
000014E8 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000014EC 3418                       		move.w	(a0)+,d2
000014EE 6A00                       		bpl.s	loc_160E
000014F0 D6FC 000A                  		adda.w	#$A,a3
000014F4                            
000014F4                            loc_160E:
000014F4 0242 7FFF                  		andi.w	#$7FFF,d2
000014F8 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000014FC 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001500 1A18                       		move.b	(a0)+,d5
00001502 E145                       		asl.w	#8,d5
00001504 1A18                       		move.b	(a0)+,d5
00001506 7C10                       		moveq	#$10,d6
00001508 7000                       		moveq	#0,d0
0000150A 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000150E 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001512 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001516 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000151A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000151E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001522 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001526                            
00001526                            Rplc_Exit:
00001526 4E75                       		rts	
00001528                            ; End of function RunPLC
00001528                            
00001528                            
00001528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001528                            
00001528                            
00001528                            sub_1642:
00001528 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000152C 6700 0000                  		beq.w	locret_16DA
00001530 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001536 7000                       		moveq	#0,d0
00001538 3038 F684                  		move.w	($FFFFF684).w,d0
0000153C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001542 6000                       		bra.s	loc_1676
00001544                            ; End of function sub_1642
00001544                            
00001544                            
00001544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001544                            
00001544                            
00001544                            ; sub_165E:
00001544                            ProcessDPLC2:
00001544 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001548 6700                       		beq.s	locret_16DA
0000154A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001550 7000                       		moveq	#0,d0
00001552 3038 F684                  		move.w	($FFFFF684).w,d0
00001556 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000155C                            
0000155C                            loc_1676:
0000155C 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001562 E588                       		lsl.l	#2,d0
00001564 E448                       		lsr.w	#2,d0
00001566 0040 4000                  		ori.w	#$4000,d0
0000156A 4840                       		swap	d0
0000156C 2880                       		move.l	d0,(a4)
0000156E 594C                       		subq.w	#4,a4
00001570 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001574 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
00001578 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000157C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001580 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001584 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001588 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000158C 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001590                            
00001590                            loc_16AA:
00001590 3A7C 0008                  		movea.w	#8,a5
00001594 6100 FB5C                  		bsr.w	NemPCD_NewRow
00001598 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
0000159C 6700                       		beq.s	loc_16DC
0000159E 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000015A2 66EC                       		bne.s	loc_16AA
000015A4 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000015A8 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000015AC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015B0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000015B4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000015B8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015BC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015C0                            
000015C0                            locret_16DA:
000015C0 4E75                       		rts	
000015C2                            ; ===========================================================================
000015C2                            
000015C2                            loc_16DC:
000015C2 41F8 F680                  		lea	(v_plc_buffer).w,a0
000015C6 7015                       		moveq	#$15,d0
000015C8                            
000015C8                            loc_16E2:
000015C8 20E8 0006                  		move.l	6(a0),(a0)+
000015CC 51C8 FFFA                  		dbf	d0,loc_16E2
000015D0 4E75                       		rts	
000015D2                            ; End of function ProcessDPLC2
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	execute	the pattern load cue
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            QuickPLC:
000015D2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000015D8 D040                       		add.w	d0,d0
000015DA 3031 0000                  		move.w	(a1,d0.w),d0
000015DE 43F1 0000                  		lea	(a1,d0.w),a1
000015E2 3219                       		move.w	(a1)+,d1	; get length of PLC
000015E4                            
000015E4                            	Qplc_Loop:
000015E4 2059                       		movea.l	(a1)+,a0	; get art pointer
000015E6 7000                       		moveq	#0,d0
000015E8 3019                       		move.w	(a1)+,d0	; get VRAM address
000015EA E588                       		lsl.l	#2,d0
000015EC E448                       		lsr.w	#2,d0
000015EE 0040 4000                  		ori.w	#$4000,d0
000015F2 4840                       		swap	d0
000015F4 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000015FA 6100 FA7E                  		bsr.w	NemDec		; decompress
000015FE 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001602 4E75                       		rts	
00001604                            ; End of function QuickPLC
00001604                            
00001604                            		include	"_inc\Enigma Decompression.asm"
00001604                            ; ---------------------------------------------------------------------------
00001604                            ; Enigma decompression algorithm
00001604                            
00001604                            ; input:
00001604                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001604                            ;	a0 = source address
00001604                            ;	a1 = destination address
00001604                            
00001604                            ; usage:
00001604                            ;	lea	(source).l,a0
00001604                            ;	lea	(destination).l,a1
00001604                            ;	move.w	#arttile,d0
00001604                            ;	bsr.w	EniDec
00001604                            
00001604                            ; See http://www.segaretro.org/Enigma_compression for format description
00001604                            ; ---------------------------------------------------------------------------
00001604                            
00001604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001604                            
00001604                            
00001604                            EniDec:
00001604 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001608 3640                       		movea.w	d0,a3		; store starting art tile
0000160A 1018                       		move.b	(a0)+,d0
0000160C 4880                       		ext.w	d0
0000160E 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001610 1818                       		move.b	(a0)+,d4
00001612 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001614 3458                       		movea.w	(a0)+,a2
00001616 D4CB                       		adda.w	a3,a2		; store incremental copy word
00001618 3858                       		movea.w	(a0)+,a4
0000161A D8CB                       		adda.w	a3,a4		; store literal copy word
0000161C 1A18                       		move.b	(a0)+,d5
0000161E E145                       		asl.w	#8,d5
00001620 1A18                       		move.b	(a0)+,d5	; get first word in format list
00001622 7C10                       		moveq	#16,d6		; initial shift value
00001624                            ; loc_173E:
00001624                            Eni_Loop:
00001624 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
00001626 3E06                       		move.w	d6,d7
00001628 9E40                       		sub.w	d0,d7
0000162A 3205                       		move.w	d5,d1
0000162C EE69                       		lsr.w	d7,d1
0000162E 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001632 3401                       		move.w	d1,d2		; and copy it
00001634 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
00001638 6400                       		bhs.s	@sevenbitentry
0000163A 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
0000163C E24A                       		lsr.w	#1,d2
0000163E                            ; loc_1758:
0000163E                            @sevenbitentry:
0000163E 6100 0000                  		bsr.w	EniDec_FetchByte
00001642 0242 000F                  		andi.w	#$F,d2		; get repeat count
00001646 E849                       		lsr.w	#4,d1
00001648 D241                       		add.w	d1,d1
0000164A 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
0000164E                            ; End of function EniDec
0000164E                            
0000164E                            ; ===========================================================================
0000164E                            ; loc_1768:
0000164E                            EniDec_00:
0000164E 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001650 524A                       		addq.w	#1,a2		; increment it
00001652 51CA FFFA                  		dbf	d2,@loop	; repeat
00001656 60CC                       		bra.s	Eni_Loop
00001658                            ; ===========================================================================
00001658                            ; loc_1772:
00001658                            EniDec_01:
00001658 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000165A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000165E 60C4                       		bra.s	Eni_Loop
00001660                            ; ===========================================================================
00001660                            ; loc_177A:
00001660                            EniDec_100:
00001660 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001664                            ; loc_177E:
00001664 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001666 51CA FFFC                  		dbf	d2,@loop	; repeat
0000166A                            
0000166A 60B8                       		bra.s	Eni_Loop
0000166C                            ; ===========================================================================
0000166C                            ; loc_1786:
0000166C                            EniDec_101:
0000166C 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001670                            ; loc_178A:
00001670 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001672 5241                       		addq.w	#1,d1		; increment
00001674 51CA FFFA                  		dbf	d2,@loop	; repeat
00001678                            
00001678 60AA                       		bra.s	Eni_Loop
0000167A                            ; ===========================================================================
0000167A                            ; loc_1794:
0000167A                            EniDec_110:
0000167A 6100 0000                  		bsr.w	EniDec_FetchInlineValue
0000167E                            ; loc_1798:
0000167E 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001680 5341                       		subq.w	#1,d1		; decrement
00001682 51CA FFFA                  		dbf	d2,@loop	; repeat
00001686                            
00001686 609C                       		bra.s	Eni_Loop
00001688                            ; ===========================================================================
00001688                            ; loc_17A2:
00001688                            EniDec_111:
00001688 0C42 000F                  		cmpi.w	#$F,d2
0000168C 6700                       		beq.s	EniDec_Done
0000168E                            ; loc_17A8:
0000168E 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001692 32C1                       		move.w	d1,(a1)+	; copy it
00001694 51CA FFF8                  		dbf	d2,@loop	; and repeat
00001698                            
00001698 608A                       		bra.s	Eni_Loop
0000169A                            ; ===========================================================================
0000169A                            ; loc_17B4:
0000169A                            EniDec_Index:
0000169A 60B2                       		bra.s	EniDec_00
0000169C 60B0                       		bra.s	EniDec_00
0000169E 60B8                       		bra.s	EniDec_01
000016A0 60B6                       		bra.s	EniDec_01
000016A2 60BC                       		bra.s	EniDec_100
000016A4 60C6                       		bra.s	EniDec_101
000016A6 60D2                       		bra.s	EniDec_110
000016A8 60DE                       		bra.s	EniDec_111
000016AA                            ; ===========================================================================
000016AA                            ; loc_17C4:
000016AA                            EniDec_Done:
000016AA 5348                       		subq.w	#1,a0		; go back by one byte
000016AC 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
000016B0 6600                       		bne.s	@notnewbyte	; if not, branch
000016B2 5348                       		subq.w	#1,a0		; and another one if needed
000016B4                            ; loc_17CE:
000016B4                            @notnewbyte:
000016B4 3008                       		move.w	a0,d0
000016B6 E248                       		lsr.w	#1,d0		; are we on an odd byte?
000016B8 6400                       		bcc.s	@evenbyte	; if not, branch
000016BA 5248                       		addq.w	#1,a0		; ensure we're on an even byte
000016BC                            ; loc_17D6:
000016BC                            @evenbyte:
000016BC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000016C0 4E75                       		rts	
000016C2                            
000016C2                            ; ---------------------------------------------------------------------------
000016C2                            ; Part of the Enigma decompressor
000016C2                            ; Fetches an inline copy value and stores it in d1
000016C2                            ; ---------------------------------------------------------------------------
000016C2                            
000016C2                            ; =============== S U B R O U T I N E =======================================
000016C2                            
000016C2                            ; loc_17DC:
000016C2                            EniDec_FetchInlineValue:
000016C2 360B                       		move.w	a3,d3		; copy starting art tile
000016C4 1204                       		move.b	d4,d1		; copy PCCVH bitfield
000016C6 D201                       		add.b	d1,d1		; is the priority bit set?
000016C8 6400                       		bcc.s	@skippriority	; if not, branch
000016CA 5346                       		subq.w	#1,d6
000016CC 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000016CE 6700                       		beq.s	@skippriority	; if not, branch
000016D0 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000016D4                            ; loc_17EE:
000016D4                            @skippriority:
000016D4 D201                       		add.b	d1,d1		; is the high palette line bit set?
000016D6 6400                       		bcc.s	@skiphighpal	; if not, branch
000016D8 5346                       		subq.w	#1,d6
000016DA 0D05                       		btst	d6,d5
000016DC 6700                       		beq.s	@skiphighpal
000016DE 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000016E2                            ; loc_17FC:
000016E2                            @skiphighpal:
000016E2 D201                       		add.b	d1,d1		; is the low palette line bit set?
000016E4 6400                       		bcc.s	@skiplowpal	; if not, branch
000016E6 5346                       		subq.w	#1,d6
000016E8 0D05                       		btst	d6,d5
000016EA 6700                       		beq.s	@skiplowpal
000016EC 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000016F0                            ; loc_180A:
000016F0                            @skiplowpal:
000016F0 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000016F2 6400                       		bcc.s	@skipyflip	; if not, branch
000016F4 5346                       		subq.w	#1,d6
000016F6 0D05                       		btst	d6,d5
000016F8 6700                       		beq.s	@skipyflip
000016FA 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000016FE                            ; loc_1818:
000016FE                            @skipyflip:
000016FE D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001700 6400                       		bcc.s	@skipxflip	; if not, branch
00001702 5346                       		subq.w	#1,d6
00001704 0D05                       		btst	d6,d5
00001706 6700                       		beq.s	@skipxflip
00001708 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
0000170C                            ; loc_1826:
0000170C                            @skipxflip:
0000170C 3205                       		move.w	d5,d1
0000170E 3E06                       		move.w	d6,d7
00001710 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001712 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001714 3C07                       		move.w	d7,d6
00001716 0646 0010                  		addi.w	#16,d6
0000171A 4447                       		neg.w	d7		; calculate bit deficit
0000171C EF69                       		lsl.w	d7,d1		; and make space for that many bits
0000171E 1A10                       		move.b	(a0),d5		; get next byte
00001720 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
00001722 DE47                       		add.w	d7,d7
00001724 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
00001728 D245                       		add.w	d5,d1		; combine upper bits with lower bits
0000172A                            ; loc_1844:
0000172A                            @maskvalue:
0000172A 300D                       		move.w	a5,d0		; get length in bits of inline copy value
0000172C D040                       		add.w	d0,d0
0000172E C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001732 D243                       		add.w	d3,d1		; add starting art tile
00001734 1A18                       		move.b	(a0)+,d5
00001736 E14D                       		lsl.w	#8,d5
00001738 1A18                       		move.b	(a0)+,d5	; get next word
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            ; loc_1856:
0000173C                            @enoughbits:
0000173C 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
0000173E EE69                       		lsr.w	d7,d1	; get inline copy value
00001740 300D                       		move.w	a5,d0
00001742 D040                       		add.w	d0,d0
00001744 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001748 D243                       		add.w	d3,d1	; add starting art tile
0000174A 300D                       		move.w	a5,d0
0000174C 6000                       		bra.s	EniDec_FetchByte
0000174E                            ; ===========================================================================
0000174E                            ; loc_1868:
0000174E                            @justenough:
0000174E 7C10                       		moveq	#16,d6	; reset shift value
00001750 60D8                       		bra.s	@maskvalue
00001752                            ; ===========================================================================
00001752                            ; word_186C:
00001752                            EniDec_Masks:
00001752 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
0000175A 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001762 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
0000176A 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001772                            
00001772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001772                            
00001772                            ; sub_188C:
00001772                            EniDec_FetchByte:
00001772 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001774 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001778 6400                       		bhs.s	@locret	; if not, branch
0000177A 5046                       		addq.w	#8,d6
0000177C E145                       		asl.w	#8,d5
0000177E 1A18                       		move.b	(a0)+,d5
00001780                            @locret:
00001780 4E75                       		rts	
00001782                            ; End of function EniDec_FetchByte
00001782                            ; End of function EniDec_FetchByte
00001782                            		include	"_inc\Kosinski Decompression.asm"
00001782                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001782                            ; ---------------------------------------------------------------------------
00001782                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001782                            ; (sometimes called KOZINSKI decompression)
00001782                            ;
00001782                            ; ARGUMENTS:
00001782                            ; a0 = source address
00001782                            ; a1 = destination address
00001782                            ;
00001782                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001782                            ; New faster version by written by vladikcomper, with additional improvements by
00001782                            ; MarkeyJester and Flamewing
00001782                            ; Converted to ASM68K by Beta Filter.
00001782                            ; ---------------------------------------------------------------------------
00001782 =00000001                  Kos_UseLUT: equ 1
00001782 =00000003                  Kos_LoopUnroll: equ 3
00001782 =00000001                  Kos_ExtremeUnrolling: equ 1
00001782                            
00001782                            Kos_RunBitStream macro
00001782                                dbra    d2,@skip\@
00001782                                moveq   #7,d2                   ; Set repeat count to 8.
00001782                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001782                                not.w   d3                      ; Have all 16 bits been used up?
00001782                                bne.s   @skip\@                   ; Branch if not.
00001782                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001782                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001782                                if Kos_UseLUT=1
00001782                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001782                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001782                                endif
00001782                            @skip\@
00001782                                endm
00001782                            
00001782                            Kos_ReadBit macro
00001782                                if Kos_UseLUT=1
00001782                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001782                                else
00001782                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001782                                endif
00001782                                endm
00001782                            ; ===========================================================================
00001782                            ; KozDec@193A:
00001782                            KosDec:
00001782 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001784 7000                           moveq   #0,d0
00001786 7200                           moveq   #0,d1
00001788 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
0000178C 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
0000178E 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001790 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001794 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001798 7407                           moveq   #7,d2                   ; Set repeat count to 8.
0000179A 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
0000179C 6000                           bra.s   @FetchNewCode
0000179E                            ; ---------------------------------------------------------------------------
0000179E                            @FetchCodeLoop:
0000179E                                ; Code 1 (Uncompressed byte).
000017B6 12D8                           move.b  (a0)+,(a1)+
000017B8                            
000017B8                            @FetchNewCode:
000017BA 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
000017BC                            
000017BC                                ; Codes 00 and 01.
000017BC 7AFF                           moveq   #-1,d5
000017BE 4BD1                           lea (a1),a5
000017DA 6500 0000                      bcs.w   @Code_01
000017DE                            
000017DE                                ; Code 00 (Dictionary ref. short).
000017F8 6500                           bcs.s   @Copy45
00001814 6500                           bcs.s   @Copy3
0000182E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001830 DAC5                           adda.w  d5,a5
00001832 12DD                           move.b  (a5)+,(a1)+
00001834 12DD                           move.b  (a5)+,(a1)+
00001836 6080                           bra.s   @FetchNewCode
00001838                            ; ---------------------------------------------------------------------------
00001838                            @Copy3:
00001850 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001852 DAC5                           adda.w  d5,a5
00001854 12DD                           move.b  (a5)+,(a1)+
00001856 12DD                           move.b  (a5)+,(a1)+
00001858 12DD                           move.b  (a5)+,(a1)+
0000185A 6000 FF5C                      bra.w   @FetchNewCode
0000185E                            ; ---------------------------------------------------------------------------
0000185E                            @Copy45:
00001878 6500                           bcs.s   @Copy5
00001892 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001894 DAC5                           adda.w  d5,a5
00001896 12DD                           move.b  (a5)+,(a1)+
00001898 12DD                           move.b  (a5)+,(a1)+
0000189A 12DD                           move.b  (a5)+,(a1)+
0000189C 12DD                           move.b  (a5)+,(a1)+
0000189E 6000 FF18                      bra.w   @FetchNewCode
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            @Copy5:
000018BA 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
000018BC DAC5                           adda.w  d5,a5
000018BE 12DD                           move.b  (a5)+,(a1)+
000018C0 12DD                           move.b  (a5)+,(a1)+
000018C2 12DD                           move.b  (a5)+,(a1)+
000018C4 12DD                           move.b  (a5)+,(a1)+
000018C6 12DD                           move.b  (a5)+,(a1)+
000018C8 6000 FEEE                      bra.w   @FetchNewCode
000018CC                            ; ---------------------------------------------------------------------------
000018CC                            ; ---------------------------------------------------------------------------
000018CC                            @Code_01:
000018CC 7800                           moveq   #0,d4                   ; d4 will contain copy count.
000018CE                                ; Code 01 (Dictionary ref. long / special).
000018E6 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
000018E8 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
000018EA 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
000018EC EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
000018EE 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
000018F0 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
000018F2 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
000018F4                            
000018F4                                ; special mode (extended counter)
000018F4 1818                           move.b  (a0)+,d4                ; Read cnt
000018F6 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
000018F8 5304                           subq.b  #1,d4
000018FA 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
000018FE                            
000018FE DAC5                           adda.w  d5,a5
00001900 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001902 3C04                           move.w  d4,d6
00001904 4646                           not.w   d6
00001906 CC47                           and.w   d7,d6
00001908 DC46                           add.w   d6,d6
0000190A E64C                           lsr.w   #Kos_LoopUnroll,d4
0000190C 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001910                            ; ---------------------------------------------------------------------------
00001910                            @largecopy:
00001910                                rept (1<<Kos_LoopUnroll)
00001910                                move.b  (a5)+,(a1)+
00001910 12DD 12DD 12DD 12DD 12DD+      endr
00001920 51CC FFEE                      dbra    d4,@largecopy
00001924 6000 FE92                      bra.w   @FetchNewCode
00001928                            ; ---------------------------------------------------------------------------
00001928                            @StreamCopy:
00001928 DAC5                           adda.w  d5,a5
0000192A 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
0000192C BF44                           eor.w   d7,d4
0000192E D844                           add.w   d4,d4
00001930 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001934                            ; ---------------------------------------------------------------------------
00001934                            @mediumcopy:
00001934                                rept 8
00001934                                move.b  (a5)+,(a1)+
00001934 12DD 12DD 12DD 12DD 12DD+      endr
00001944 6000 FE72                      bra.w   @FetchNewCode
00001948                            ; ---------------------------------------------------------------------------
00001948                            @Quit:
00001948 4E75                           rts                             ; End of function KosDec.
0000194A                            ; ===========================================================================
0000194A                            KosDec_ByteMap:
0000194A 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000195A 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000196A 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000197A 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
0000198A 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
0000199A 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000019AA 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
000019BA 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
000019CA 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
000019DA 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
000019EA 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
000019FA 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001A0A 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001A1A 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001A2A 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001A3A 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001A4A                            ; ===========================================================================
00001A4A                            ; ===========================================================================
00001A4A                            
00001A4A                            		include	"_inc\PaletteCycle.asm"
00001A4A                            ; ---------------------------------------------------------------------------
00001A4A                            ; Palette cycling routine loading subroutine
00001A4A                            ; ---------------------------------------------------------------------------
00001A4A                            
00001A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A4A                            
00001A4A                            
00001A4A                            PaletteCycle:
00001A4A 7400                       		moveq	#0,d2
00001A4C 7000                       		moveq	#0,d0
00001A4E 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001A52 D040                       		add.w	d0,d0
00001A54 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001A58 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001A5C                            ; End of function PaletteCycle
00001A5C                            
00001A5C                            ; ===========================================================================
00001A5C                            ; ---------------------------------------------------------------------------
00001A5C                            ; Palette cycling routines
00001A5C                            ; ---------------------------------------------------------------------------
00001A5C 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001A5E 0000                       		dc.w PCycle_LZ-PCycle_Index
00001A60 0000                       		dc.w PCycle_MZ-PCycle_Index
00001A62 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001A64 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001A66 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001A68 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001A6A                            
00001A6A                            
00001A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A6A                            
00001A6A                            
00001A6A                            PCycle_Title:
00001A6A 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001A70 6000                       		bra.s	PCycGHZ_Go
00001A72                            ; ===========================================================================
00001A72                            
00001A72                            PCycle_GHZ:
00001A72 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001A78                            
00001A78                            PCycGHZ_Go:
00001A78 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001A7C 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001A7E                            
00001A7E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001A84 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001A88 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001A8C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001A90 E748                       		lsl.w	#3,d0
00001A92 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001A96 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A9A 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001A9E                            
00001A9E                            PCycGHZ_Skip:
00001A9E 4E75                       		rts	
00001AA0                            ; End of function PCycle_GHZ
00001AA0                            
00001AA0                            
00001AA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA0                            
00001AA0                            
00001AA0                            PCycle_LZ:
00001AA0                            ; Waterfalls
00001AA0 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001AA4 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001AA6                            
00001AA6 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001AAC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001AB0 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001AB4 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001AB8 E748                       		lsl.w	#3,d0
00001ABA 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001AC0 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001AC6 6600                       		bne.s	PCycLZ_NotSBZ3
00001AC8 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001ACE                            
00001ACE                            	PCycLZ_NotSBZ3:
00001ACE 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001AD2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AD6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001ADA 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001ADE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AE2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AE6                            
00001AE6                            PCycLZ_Skip1:
00001AE6                            ; Conveyor belts
00001AE6                            		;move.w	(v_framecount).w,d0
00001AE6                            		;andi.w	#7,d0
00001AE6                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001AE6                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001AE6                            		;moveq	#1,d1
00001AE6                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001AE6                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001AE6                            		;neg.w	d1
00001AE6                            
00001AE6                            	;PCycLZ_NoRev:
00001AE6                            		;move.w	(v_pal_buffer).w,d0
00001AE6                            		;andi.w	#3,d0
00001AE6                            		;add.w	d1,d0
00001AE6                            		;cmpi.w	#3,d0
00001AE6                            		;bcs.s	loc_1A0A
00001AE6                            		;move.w	d0,d1
00001AE6                            		;moveq	#0,d0
00001AE6                            		;tst.w	d1
00001AE6                            		;bpl.s	loc_1A0A
00001AE6                            		;moveq	#2,d0
00001AE6                            
00001AE6                            ;loc_1A0A:
00001AE6                            		;move.w	d0,(v_pal_buffer).w
00001AE6                            		;add.w	d0,d0
00001AE6                            		;move.w	d0,d1
00001AE6                            		;add.w	d0,d0
00001AE6                            		;add.w	d1,d0
00001AE6                            		;lea	(Pal_LZCyc2).l,a0
00001AE6                            		;lea	(v_pal_dry+$76).w,a1
00001AE6                            		;move.l	(a0,d0.w),(a1)+
00001AE6                            		;move.w	4(a0,d0.w),(a1)
00001AE6                            		;lea	(Pal_LZCyc3).l,a0
00001AE6                            		;lea	(v_pal_water+$76).w,a1
00001AE6                            		;move.l	(a0,d0.w),(a1)+
00001AE6                            		;move.w	4(a0,d0.w),(a1)
00001AE6                            
00001AE6                            ;PCycLZ_Skip2:
00001AE6 4E75                       		rts	
00001AE8                            ; End of function PCycle_LZ
00001AE8                            
00001AE8                            ; ===========================================================================
00001AE8 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001AF0                            ; ===========================================================================
00001AF0                            
00001AF0                            PCycle_MZ:
00001AF0 4E75                       		rts	
00001AF2                            
00001AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AF2                            
00001AF2                            
00001AF2                            PalCycle_SLZ:
00001AF2 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001AF6 6A00                       		bpl.s	locret_1A80
00001AF8 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001AFE 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001B02 5240                       		addq.w	#1,d0
00001B04 0C40 0006                  		cmpi.w	#6,d0
00001B08 6500                       		bcs.s	loc_1A60
00001B0A 7000                       		moveq	#0,d0
00001B0C                            
00001B0C                            loc_1A60:
00001B0C 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001B10 3200                       		move.w	d0,d1
00001B12 D241                       		add.w	d1,d1
00001B14 D041                       		add.w	d1,d0
00001B16 D040                       		add.w	d0,d0
00001B18 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001B1E 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001B22 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001B26 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001B2C                            
00001B2C                            locret_1A80:
00001B2C 4E75                       		rts	
00001B2E                            ; End of function PalCycle_SLZ
00001B2E                            
00001B2E                            
00001B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B2E                            
00001B2E                            
00001B2E                            PalCycle_SYZ:
00001B2E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001B32 6A00                       		bpl.s	locret_1AC6
00001B34 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001B3A 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001B3E 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001B42 0240 0003                  		andi.w	#3,d0
00001B46 E548                       		lsl.w	#2,d0
00001B48 3200                       		move.w	d0,d1
00001B4A D040                       		add.w	d0,d0
00001B4C 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001B52 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001B56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B5E 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001B64 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001B68 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001B6C 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001B72                            
00001B72                            locret_1AC6:
00001B72 4E75                       		rts	
00001B74                            ; End of function PalCycle_SYZ
00001B74                            
00001B74                            
00001B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B74                            
00001B74                            
00001B74                            PalCycle_SBZ:
00001B74 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B7A 4A38 FE11                  		tst.b	(v_act).w
00001B7E 6700                       		beq.s	loc_1ADA
00001B80 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001B86                            
00001B86                            loc_1ADA:
00001B86 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001B8A 321A                       		move.w	(a2)+,d1
00001B8C                            
00001B8C                            loc_1AE0:
00001B8C 5311                       		subq.b	#1,(a1)
00001B8E 6B00                       		bmi.s	loc_1AEA
00001B90 5489                       		addq.l	#2,a1
00001B92 5C8A                       		addq.l	#6,a2
00001B94 6000                       		bra.s	loc_1B06
00001B96                            ; ===========================================================================
00001B96                            
00001B96                            loc_1AEA:
00001B96 12DA                       		move.b	(a2)+,(a1)+
00001B98 1011                       		move.b	(a1),d0
00001B9A 5200                       		addq.b	#1,d0
00001B9C B01A                       		cmp.b	(a2)+,d0
00001B9E 6500                       		bcs.s	loc_1AF6
00001BA0 7000                       		moveq	#0,d0
00001BA2                            
00001BA2                            loc_1AF6:
00001BA2 12C0                       		move.b	d0,(a1)+
00001BA4 0240 000F                  		andi.w	#$F,d0
00001BA8 D040                       		add.w	d0,d0
00001BAA 305A                       		movea.w	(a2)+,a0
00001BAC 365A                       		movea.w	(a2)+,a3
00001BAE 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001BB2                            
00001BB2                            loc_1B06:
00001BB2 51C9 FFD8                  		dbf	d1,loc_1AE0
00001BB6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001BBA 6A00                       		bpl.s	locret_1B64
00001BBC 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001BC2 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001BC8 4A38 FE11                  		tst.b	(v_act).w
00001BCC 6700                       		beq.s	loc_1B2E
00001BCE 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001BD4 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001BDA                            
00001BDA                            loc_1B2E:
00001BDA 72FF                       		moveq	#-1,d1
00001BDC 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001BE0 6700                       		beq.s	loc_1B38
00001BE2 4441                       		neg.w	d1
00001BE4                            
00001BE4                            loc_1B38:
00001BE4 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001BE8 0240 0003                  		andi.w	#3,d0
00001BEC D041                       		add.w	d1,d0
00001BEE 0C40 0003                  		cmpi.w	#3,d0
00001BF2 6500                       		bcs.s	loc_1B52
00001BF4 3200                       		move.w	d0,d1
00001BF6 7000                       		moveq	#0,d0
00001BF8 4A41                       		tst.w	d1
00001BFA 6A00                       		bpl.s	loc_1B52
00001BFC 7002                       		moveq	#2,d0
00001BFE                            
00001BFE                            loc_1B52:
00001BFE 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001C02 D040                       		add.w	d0,d0
00001C04 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001C08 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C10                            
00001C10                            locret_1B64:
00001C10 4E75                       		rts	
00001C12                            ; End of function PalCycle_SBZ
00001C12                            ; End of function PalCycle_SBZ
00001C12                            
00001C12                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001C32                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001C52                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001C72                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001C84                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001C96                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001CFE                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001D22                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001D42                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001D52                            
00001D52                            		include	"_inc\SBZ Palette Scripts.asm"
00001D52                            ; ---------------------------------------------------------------------------
00001D52                            ; Scrap Brain Zone palette cycling script
00001D52                            ; ---------------------------------------------------------------------------
00001D52                            
00001D52                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001D52                            	dc.b duration, colors
00001D52                            	dc.w paladdress, ramaddress
00001D52                            	endm
00001D52                            
00001D52                            ; duration in frames, number of colors, palette address, RAM address
00001D52                            
00001D52                            Pal_SBZCycList1:
00001D52 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001D54 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001D5A 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001D60 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001D66 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001D6C 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001D72 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001D78 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00001D7E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00001D84 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00001D8A                            end_SBZCycList1:
00001D8A                            	even
00001D8A                            
00001D8A                            Pal_SBZCycList2:
00001D8A 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00001D8C 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001D92 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001D98 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00001D9E 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001DA4 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00001DAA 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00001DB0 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00001DB6                            end_SBZCycList2:
00001DB6                            	even
00001DB6                            	even
00001DB6                            
00001DB6                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00001DC6                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00001DD6                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
00001DE6                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00001DF2                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00001E02                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00001E12                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00001E32                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00001E3C                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00001E4C                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            ; Subroutine to	fade in from black
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            
00001E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E58                            
00001E58                            
00001E58                            PaletteFadeIn:
00001E58 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00001E5E                            
00001E5E                            PalFadeIn_Alt:				; start position and size are already set
00001E5E 7000                       		moveq	#0,d0
00001E60 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001E64 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E68 D0C0                       		adda.w	d0,a0
00001E6A 7200                       		moveq	#cBlack,d1
00001E6C 1038 F627                  		move.b	(v_pfade_size).w,d0
00001E70                            
00001E70                            	@fill:
00001E70 30C1                       		move.w	d1,(a0)+
00001E72 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
00001E76                            
00001E76 383C 0015                  		move.w	#$15,d4
00001E7A                            
00001E7A                            	@mainloop:
00001E7A 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001E80 6100 0000                  		bsr.w	WaitForVBla
00001E84 6100                       		bsr.s	FadeIn_FromBlack
00001E86 6100 F64A                  		bsr.w	RunPLC
00001E8A 51CC FFEE                  		dbf	d4,@mainloop
00001E8E 4E75                       		rts	
00001E90                            ; End of function PaletteFadeIn
00001E90                            
00001E90                            
00001E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E90                            
00001E90                            
00001E90                            FadeIn_FromBlack:
00001E90 7000                       		moveq	#0,d0
00001E92 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001E96 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00001E9A 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E9E D0C0                       		adda.w	d0,a0
00001EA0 D2C0                       		adda.w	d0,a1
00001EA2 1038 F627                  		move.b	(v_pfade_size).w,d0
00001EA6                            
00001EA6                            	@addcolour:
00001EA6 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00001EA8 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00001EAC                            
00001EAC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00001EB2 6600                       		bne.s	@exit		; if not, branch
00001EB4                            
00001EB4 7000                       		moveq	#0,d0
00001EB6 41F8 FA80                  		lea	(v_pal_water).w,a0
00001EBA 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00001EBE 1038 F626                  		move.b	(v_pfade_start).w,d0
00001EC2 D0C0                       		adda.w	d0,a0
00001EC4 D2C0                       		adda.w	d0,a1
00001EC6 1038 F627                  		move.b	(v_pfade_size).w,d0
00001ECA                            
00001ECA                            	@addcolour2:
00001ECA 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00001ECC 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00001ED0                            
00001ED0                            @exit:
00001ED0 4E75                       		rts	
00001ED2                            ; End of function FadeIn_FromBlack
00001ED2                            
00001ED2                            
00001ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED2                            
00001ED2                            
00001ED2                            FadeIn_AddColour:
00001ED2                            @addblue:
00001ED2 3419                       		move.w	(a1)+,d2
00001ED4 3610                       		move.w	(a0),d3
00001ED6 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00001ED8 6700                       		beq.s	@next		; if yes, branch
00001EDA 3203                       		move.w	d3,d1
00001EDC 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001EE0 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001EE2 6200                       		bhi.s	@addgreen	; if yes, branch
00001EE4 30C1                       		move.w	d1,(a0)+	; update palette
00001EE6 4E75                       		rts	
00001EE8                            ; ===========================================================================
00001EE8                            
00001EE8                            @addgreen:
00001EE8 3203                       		move.w	d3,d1
00001EEA 0641 0020                  		addi.w	#$20,d1		; increase green value
00001EEE B242                       		cmp.w	d2,d1
00001EF0 6200                       		bhi.s	@addred
00001EF2 30C1                       		move.w	d1,(a0)+	; update palette
00001EF4 4E75                       		rts	
00001EF6                            ; ===========================================================================
00001EF6                            
00001EF6                            @addred:
00001EF6 5458                       		addq.w	#2,(a0)+	; increase red value
00001EF8 4E75                       		rts	
00001EFA                            ; ===========================================================================
00001EFA                            
00001EFA                            @next:
00001EFA 5448                       		addq.w	#2,a0		; next colour
00001EFC 4E75                       		rts	
00001EFE                            ; End of function FadeIn_AddColour
00001EFE                            
00001EFE                            
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Subroutine to fade out to black
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            
00001EFE                            
00001EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EFE                            
00001EFE                            
00001EFE                            PaletteFadeOut:
00001EFE 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001F04 383C 0015                  		move.w	#$15,d4
00001F08                            
00001F08                            	@mainloop:
00001F08 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001F0E 6100 0000                  		bsr.w	WaitForVBla
00001F12 6100                       		bsr.s	FadeOut_ToBlack
00001F14 6100 F5BC                  		bsr.w	RunPLC
00001F18 51CC FFEE                  		dbf	d4,@mainloop
00001F1C 4E75                       		rts	
00001F1E                            ; End of function PaletteFadeOut
00001F1E                            
00001F1E                            
00001F1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F1E                            
00001F1E                            
00001F1E                            FadeOut_ToBlack:
00001F1E 7000                       		moveq	#0,d0
00001F20 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001F24 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F28 D0C0                       		adda.w	d0,a0
00001F2A 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F2E                            
00001F2E                            	@decolour:
00001F2E 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00001F30 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00001F34                            
00001F34 7000                       		moveq	#0,d0
00001F36 41F8 FA80                  		lea	(v_pal_water).w,a0
00001F3A 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F3E D0C0                       		adda.w	d0,a0
00001F40 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F44                            
00001F44                            	@decolour2:
00001F44 6100                       		bsr.s	FadeOut_DecColour
00001F46 51C8 FFFC                  		dbf	d0,@decolour2
00001F4A 4E75                       		rts	
00001F4C                            ; End of function FadeOut_ToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            FadeOut_DecColour:
00001F4C                            @dered:
00001F4C 3410                       		move.w	(a0),d2
00001F4E 6700                       		beq.s	@next
00001F50 3202                       		move.w	d2,d1
00001F52 0241 000E                  		andi.w	#$E,d1
00001F56 6700                       		beq.s	@degreen
00001F58 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F5A 4E75                       		rts	
00001F5C                            ; ===========================================================================
00001F5C                            
00001F5C                            @degreen:
00001F5C 3202                       		move.w	d2,d1
00001F5E 0241 00E0                  		andi.w	#$E0,d1
00001F62 6700                       		beq.s	@deblue
00001F64 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001F68 4E75                       		rts	
00001F6A                            ; ===========================================================================
00001F6A                            
00001F6A                            @deblue:
00001F6A 3202                       		move.w	d2,d1
00001F6C 0241 0E00                  		andi.w	#$E00,d1
00001F70 6700                       		beq.s	@next
00001F72 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            @next:
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function FadeOut_DecColour
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	fade in from white (Special Stage)
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            PaletteWhiteIn:
00001F7C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001F82 7000                       		moveq	#0,d0
00001F84 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001F88 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F8C D0C0                       		adda.w	d0,a0
00001F8E 323C 0EEE                  		move.w	#cWhite,d1
00001F92 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F96                            
00001F96                            	@fill:
00001F96 30C1                       		move.w	d1,(a0)+
00001F98 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00001F9C                            
00001F9C 383C 0015                  		move.w	#$15,d4
00001FA0                            
00001FA0                            	@mainloop:
00001FA0 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001FA6 6100 0000                  		bsr.w	WaitForVBla
00001FAA 6100                       		bsr.s	WhiteIn_FromWhite
00001FAC 6100 F524                  		bsr.w	RunPLC
00001FB0 51CC FFEE                  		dbf	d4,@mainloop
00001FB4 4E75                       		rts	
00001FB6                            ; End of function PaletteWhiteIn
00001FB6                            
00001FB6                            
00001FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FB6                            
00001FB6                            
00001FB6                            WhiteIn_FromWhite:
00001FB6 7000                       		moveq	#0,d0
00001FB8 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001FBC 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00001FC0 1038 F626                  		move.b	(v_pfade_start).w,d0
00001FC4 D0C0                       		adda.w	d0,a0
00001FC6 D2C0                       		adda.w	d0,a1
00001FC8 1038 F627                  		move.b	(v_pfade_size).w,d0
00001FCC                            
00001FCC                            	@decolour:
00001FCC 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00001FCE 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00001FD2                            
00001FD2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00001FD8 6600                       		bne.s	@exit		; if not, branch
00001FDA 7000                       		moveq	#0,d0
00001FDC 41F8 FA80                  		lea	(v_pal_water).w,a0
00001FE0 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00001FE4 1038 F626                  		move.b	(v_pfade_start).w,d0
00001FE8 D0C0                       		adda.w	d0,a0
00001FEA D2C0                       		adda.w	d0,a1
00001FEC 1038 F627                  		move.b	(v_pfade_size).w,d0
00001FF0                            
00001FF0                            	@decolour2:
00001FF0 6100                       		bsr.s	WhiteIn_DecColour
00001FF2 51C8 FFFC                  		dbf	d0,@decolour2
00001FF6                            
00001FF6                            	@exit:
00001FF6 4E75                       		rts	
00001FF8                            ; End of function WhiteIn_FromWhite
00001FF8                            
00001FF8                            
00001FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF8                            
00001FF8                            
00001FF8                            WhiteIn_DecColour:
00001FF8                            @deblue:
00001FF8 3419                       		move.w	(a1)+,d2
00001FFA 3610                       		move.w	(a0),d3
00001FFC B642                       		cmp.w	d2,d3
00001FFE 6700                       		beq.s	@next
00002000 3203                       		move.w	d3,d1
00002002 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002006 6500                       		blo.s	@degreen
00002008 B242                       		cmp.w	d2,d1
0000200A 6500                       		blo.s	@degreen
0000200C 30C1                       		move.w	d1,(a0)+
0000200E 4E75                       		rts	
00002010                            ; ===========================================================================
00002010                            
00002010                            @degreen:
00002010 3203                       		move.w	d3,d1
00002012 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002016 6500                       		blo.s	@dered
00002018 B242                       		cmp.w	d2,d1
0000201A 6500                       		blo.s	@dered
0000201C 30C1                       		move.w	d1,(a0)+
0000201E 4E75                       		rts	
00002020                            ; ===========================================================================
00002020                            
00002020                            @dered:
00002020 5558                       		subq.w	#2,(a0)+	; decrease red value
00002022 4E75                       		rts	
00002024                            ; ===========================================================================
00002024                            
00002024                            @next:
00002024 5448                       		addq.w	#2,a0
00002026 4E75                       		rts	
00002028                            ; End of function WhiteIn_DecColour
00002028                            
00002028                            ; ---------------------------------------------------------------------------
00002028                            ; Subroutine to fade to white (Special Stage)
00002028                            ; ---------------------------------------------------------------------------
00002028                            
00002028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002028                            
00002028                            
00002028                            PaletteWhiteOut:
00002028 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000202E 383C 0015                  		move.w	#$15,d4
00002032                            
00002032                            	@mainloop:
00002032 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002038 6100 0000                  		bsr.w	WaitForVBla
0000203C 6100                       		bsr.s	WhiteOut_ToWhite
0000203E 6100 F492                  		bsr.w	RunPLC
00002042 51CC FFEE                  		dbf	d4,@mainloop
00002046 4E75                       		rts	
00002048                            ; End of function PaletteWhiteOut
00002048                            
00002048                            
00002048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002048                            
00002048                            
00002048                            WhiteOut_ToWhite:
00002048 7000                       		moveq	#0,d0
0000204A 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000204E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002052 D0C0                       		adda.w	d0,a0
00002054 1038 F627                  		move.b	(v_pfade_size).w,d0
00002058                            
00002058                            	@addcolour:
00002058 6100                       		bsr.s	WhiteOut_AddColour
0000205A 51C8 FFFC                  		dbf	d0,@addcolour
0000205E                            
0000205E 7000                       		moveq	#0,d0
00002060 41F8 FA80                  		lea	(v_pal_water).w,a0
00002064 1038 F626                  		move.b	(v_pfade_start).w,d0
00002068 D0C0                       		adda.w	d0,a0
0000206A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000206E                            
0000206E                            	@addcolour2:
0000206E 6100                       		bsr.s	WhiteOut_AddColour
00002070 51C8 FFFC                  		dbf	d0,@addcolour2
00002074 4E75                       		rts	
00002076                            ; End of function WhiteOut_ToWhite
00002076                            
00002076                            
00002076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002076                            
00002076                            
00002076                            WhiteOut_AddColour:
00002076                            @addred:
00002076 3410                       		move.w	(a0),d2
00002078 0C42 0EEE                  		cmpi.w	#cWhite,d2
0000207C 6700                       		beq.s	@next
0000207E 3202                       		move.w	d2,d1
00002080 0241 000E                  		andi.w	#$E,d1
00002084 0C41 000E                  		cmpi.w	#cRed,d1
00002088 6700                       		beq.s	@addgreen
0000208A 5458                       		addq.w	#2,(a0)+	; increase red value
0000208C 4E75                       		rts	
0000208E                            ; ===========================================================================
0000208E                            
0000208E                            @addgreen:
0000208E 3202                       		move.w	d2,d1
00002090 0241 00E0                  		andi.w	#$E0,d1
00002094 0C41 00E0                  		cmpi.w	#cGreen,d1
00002098 6700                       		beq.s	@addblue
0000209A 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000209E 4E75                       		rts	
000020A0                            ; ===========================================================================
000020A0                            
000020A0                            @addblue:
000020A0 3202                       		move.w	d2,d1
000020A2 0241 0E00                  		andi.w	#$E00,d1
000020A6 0C41 0E00                  		cmpi.w	#cBlue,d1
000020AA 6700                       		beq.s	@next
000020AC 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000020B0 4E75                       		rts	
000020B2                            ; ===========================================================================
000020B2                            
000020B2                            @next:
000020B2 5448                       		addq.w	#2,a0
000020B4 4E75                       		rts	
000020B6                            ; End of function WhiteOut_AddColour
000020B6                            
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            ; Palette cycling routine - Sega logo
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            
000020B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020B6                            
000020B6                            
000020B6                            PalCycle_Sega:
000020B6 4A38 F635                  		tst.b	(v_pcyc_time+1).w
000020BA 6600                       		bne.s	loc_206A
000020BC 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000020C0 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000020C6 7205                       		moveq	#5,d1
000020C8 3038 F632                  		move.w	(v_pcyc_num).w,d0
000020CC                            
000020CC                            loc_2020:
000020CC 6A00                       		bpl.s	loc_202A
000020CE 5448                       		addq.w	#2,a0
000020D0 5341                       		subq.w	#1,d1
000020D2 5440                       		addq.w	#2,d0
000020D4 60F6                       		bra.s	loc_2020
000020D6                            ; ===========================================================================
000020D6                            
000020D6                            loc_202A:
000020D6 3400                       		move.w	d0,d2
000020D8 0242 001E                  		andi.w	#$1E,d2
000020DC 6600                       		bne.s	loc_2034
000020DE 5440                       		addq.w	#2,d0
000020E0                            
000020E0                            loc_2034:
000020E0 0C40 0060                  		cmpi.w	#$60,d0
000020E4 6400                       		bhs.s	loc_203E
000020E6 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000020EA                            
000020EA                            loc_203E:
000020EA 5440                       		addq.w	#2,d0
000020EC 51C9 FFE8                  		dbf	d1,loc_202A
000020F0                            
000020F0 3038 F632                  		move.w	(v_pcyc_num).w,d0
000020F4 5440                       		addq.w	#2,d0
000020F6 3400                       		move.w	d0,d2
000020F8 0242 001E                  		andi.w	#$1E,d2
000020FC 6600                       		bne.s	loc_2054
000020FE 5440                       		addq.w	#2,d0
00002100                            
00002100                            loc_2054:
00002100 0C40 0064                  		cmpi.w	#$64,d0
00002104 6D00                       		blt.s	loc_2062
00002106 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
0000210C 70F4                       		moveq	#-$C,d0
0000210E                            
0000210E                            loc_2062:
0000210E 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002112 7001                       		moveq	#1,d0
00002114 4E75                       		rts	
00002116                            ; ===========================================================================
00002116                            
00002116                            loc_206A:
00002116 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000211A 6A00                       		bpl.s	loc_20BC
0000211C 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
00002122 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002126 0640 000C                  		addi.w	#$C,d0
0000212A 0C40 0030                  		cmpi.w	#$30,d0
0000212E 6500                       		blo.s	loc_2088
00002130 7000                       		moveq	#0,d0
00002132 4E75                       		rts	
00002134                            ; ===========================================================================
00002134                            
00002134                            loc_2088:
00002134 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002138 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000213E 41F0 0000                  		lea	(a0,d0.w),a0
00002142 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
00002146 22D8                       		move.l	(a0)+,(a1)+
00002148 22D8                       		move.l	(a0)+,(a1)+
0000214A 3298                       		move.w	(a0)+,(a1)
0000214C 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002150 7000                       		moveq	#0,d0
00002152 722C                       		moveq	#$2C,d1
00002154                            
00002154                            loc_20A8:
00002154 3400                       		move.w	d0,d2
00002156 0242 001E                  		andi.w	#$1E,d2
0000215A 6600                       		bne.s	loc_20B2
0000215C 5440                       		addq.w	#2,d0
0000215E                            
0000215E                            loc_20B2:
0000215E 3390 0000                  		move.w	(a0),(a1,d0.w)
00002162 5440                       		addq.w	#2,d0
00002164 51C9 FFEE                  		dbf	d1,loc_20A8
00002168                            
00002168                            loc_20BC:
00002168 7001                       		moveq	#1,d0
0000216A 4E75                       		rts	
0000216C                            ; End of function PalCycle_Sega
0000216C                            
0000216C                            ; ===========================================================================
0000216C                            
0000216C                            Pal_Sega1:	incbin	"palette\Sega1.bin"
00002178                            Pal_Sega2:	incbin	"palette\Sega2.bin"
000021A8                            
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            ; Subroutines to load palettes
000021A8                            
000021A8                            ; input:
000021A8                            ;	d0 = index number for palette
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            
000021A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A8                            
000021A8                            
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            ; Subroutines to load pallets
000021A8                            ; ---------------------------------------------------------------------------
000021A8                            
000021A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000021A8                            
000021A8                            PalLoad1:
000021A8 1238 FE11                  		move.b ($FFFFFE11),d1
000021AC 43F9 0000 0000             		lea (PalPointers).l,a1
000021B2 0C01 0000                  		cmp.b #0,d1
000021B6 6700 0000                  		beq.w PalLoad1_Continue
000021BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000021C0 0C01 0001                  		cmp.b #1,d1
000021C4 6700 0000                  		beq.w PalLoad1_Continue
000021C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000021CE                            
000021CE                            PalLoad1_Continue:
000021CE E748                       		lsl.w #3,d0
000021D0 D2C0                       		adda.w d0,a1
000021D2 2459                       		movea.l (a1)+,a2
000021D4 3659                       		movea.w (a1)+,a3
000021D6 D6FC 0080                  		adda.w #$80,a3
000021DA 3E19                       		move.w (a1)+,d7
000021DC                            
000021DC                            loc_2110:
000021DC 26DA                       		move.l (a2)+,(a3)+
000021DE 51CF FFFC                  		dbf d7,loc_2110
000021E2 4E75                       		rts
000021E4                             ; End of function PalLoad1
000021E4                            
000021E4                            
000021E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000021E4                            
000021E4                            PalLoad2:
000021E4 1238 FE11                  		move.b ($FFFFFE11),d1
000021E8 43F9 0000 0000             		lea (PalPointers).l,a1
000021EE 0C01 0000                  		cmp.b #0,d1
000021F2 6700 0000                  		beq.w PalLoad2_Continue
000021F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000021FC 0C01 0001                  		cmp.b #1,d1
00002200 6700 0000                  		beq.w PalLoad2_Continue
00002204 43F9 0000 0000             		lea (PalPointers3).l,a1
0000220A                            
0000220A                            
0000220A                            PalLoad2_Continue:
0000220A E748                       		lsl.w #3,d0
0000220C D2C0                       		adda.w d0,a1
0000220E 2459                       		movea.l (a1)+,a2
00002210 3659                       		movea.w (a1)+,a3
00002212 3E19                       		move.w (a1)+,d7
00002214                            
00002214                            loc_2128:
00002214 26DA                       		move.l (a2)+,(a3)+
00002216 51CF FFFC                  		dbf d7,loc_2128
0000221A 4E75                       		rts
0000221C                            ; End of function PalLoad2
0000221C                            
0000221C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000221C                            
0000221C                            
0000221C                            PalLoad_Loop: ;Quick load - TIS
0000221C                                    
0000221C 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
0000221E 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
00002222 4E75                               rts
00002224                            
00002224                            ; ---------------------------------------------------------------------------
00002224                            ; Underwater pallet loading subroutine
00002224                            ; ---------------------------------------------------------------------------
00002224                            
00002224                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002224                            
00002224                            PalLoad3_Water:
00002224 1238 FE11                  		move.b ($FFFFFE11),d1
00002228 43F9 0000 0000             		lea (PalPointers).l,a1
0000222E 0C01 0000                  		cmp.b #0,d1
00002232 6700 0000                  		beq.w PalLoad3_Continue
00002236 43F9 0000 0000             		lea (PalPointers2).l,a1
0000223C 0C01 0001                  		cmp.b #1,d1
00002240 6700 0000                  		beq.w PalLoad3_Continue
00002244 43F9 0000 0000             		lea (PalPointers3).l,a1
0000224A                            
0000224A                            PalLoad3_Continue:
0000224A E748                       		lsl.w #3,d0
0000224C D2C0                       		adda.w d0,a1
0000224E 2459                       		movea.l (a1)+,a2
00002250 3659                       		movea.w (a1)+,a3
00002252 96FC 0080                  		suba.w #$80,a3
00002256 3E19                       		move.w (a1)+,d7
00002258                            
00002258                            loc_2144:
00002258 26DA                       		move.l (a2)+,(a3)+
0000225A 51CF FFFC                  		dbf d7,loc_2144
0000225E 4E75                       		rts
00002260                            ; End of function PalLoad3_Water
00002260                            
00002260                            
00002260                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002260                            
00002260                            
00002260                            PalLoad4_Water:
00002260 1238 FE11                  		move.b ($FFFFFE11),d1
00002264 43F9 0000 0000             		lea (PalPointers).l,a1
0000226A 0C01 0000                  		cmp.b #0,d1
0000226E 6700 0000                  		beq.w PalLoad4_Continue
00002272 43F9 0000 0000             		lea (PalPointers2).l,a1
00002278 0C01 0001                  		cmp.b #1,d1
0000227C 6700 0000                  		beq.w PalLoad4_Continue
00002280 43F9 0000 0000             		lea (PalPointers3).l,a1
00002286                            
00002286                            PalLoad4_Continue:
00002286 E748                       		lsl.w #3,d0
00002288 D2C0                       		adda.w d0,a1
0000228A 2459                       		movea.l (a1)+,a2
0000228C 3659                       		movea.w (a1)+,a3
0000228E 96FC 0100                  		suba.w #$100,a3
00002292 3E19                       		move.w (a1)+,d7
00002294                            loc_2160:
00002294 26DA                       		move.l (a2)+,(a3)+
00002296 51CF FFFC                  		dbf d7,loc_2160
0000229A 4E75                       		rts
0000229C                             ; End of function PalLoad4_Water
0000229C                            
0000229C                            ; ===========================================================================
0000229C                            
0000229C                            		include	"_inc\Palette Pointers.asm"
0000229C                            ; ---------------------------------------------------------------------------
0000229C                            ; Palette pointers
0000229C                            ; ---------------------------------------------------------------------------
0000229C                            
0000229C                            palp:	macro paladdress,ramaddress,colors
0000229C                            	dc.l paladdress
0000229C                            	dc.w ramaddress, (colors>>1)-1
0000229C                            	endm
0000229C                            
0000229C                            PalPointers:
0000229C                            
0000229C                            ; palette address, RAM address, colors
0000229C                            
0000229C 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000022A4 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000022AC 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000022B4 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000022BC                            Pal_Levels:
000022BC 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
000022C4 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
000022CC 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
000022D4 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
000022DC 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
000022E4 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000022EC 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000022F4 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000022FC 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002304 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000230C 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002314 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000231C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002324 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
0000232C 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002334 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
0000233C 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002344 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
0000234C 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002354 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
0000235C 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002364 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
0000236C 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002374 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
0000237C 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002384 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
0000238C 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002394 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
0000239C 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
000023A4 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
000023AC 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
000023B4 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
000023BC 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
000023C4 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
000023CC 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
000023D4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
000023DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
000023E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
000023EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
000023F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
000023FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
00002404 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
0000240C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
00002414 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
0000241C                            			even
0000241C                            
0000241C                            PalPointers2:
0000241C                            
0000241C                            ; palette address, RAM address, colors
0000241C                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
0000241C 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002424 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
0000242C 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002434 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
0000243C                            Pal_Levels_2:
0000243C 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002444 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
0000244C 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
00002454 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
0000245C 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
00002464 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
0000246C 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002474 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
0000247C 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002484 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000248C 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002494 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000249C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000024A4 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000024AC 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000024B4 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
000024BC 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000024C4 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000024CC 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000024D4 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000024DC 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000024E4 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000024EC 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000024F4 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000024FC 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002504 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
0000250C 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002514 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
0000251C 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002524 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
0000252C 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002534 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
0000253C 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002544 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
0000254C 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002554 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
0000255C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002564 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
0000256C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002574 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
0000257C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002584 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
0000258C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002594 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
0000259C                            			even
0000259C                            			
0000259C                            PalPointers3:
0000259C                            			
0000259C                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
0000259C 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000025A4 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000025AC 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000025B4 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000025BC                            Pal_Levels_3:
000025BC 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
000025C4 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
000025CC 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
000025D4 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
000025DC 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
000025E4 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000025EC 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000025F4 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
000025FC 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002604 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
0000260C 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002614 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
0000261C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002624 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
0000262C 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002634 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
0000263C 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002644 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
0000264C 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002654 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
0000265C 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002664 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
0000266C 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002674 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
0000267C 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002684 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
0000268C 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002694 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
0000269C 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000026A4 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000026AC 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000026B4 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000026BC 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000026C4 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000026CC 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000026D4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000026DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000026E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000026EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000026F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
000026FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002704 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
0000270C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002714 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
0000271C                            			even
0000271C                            
0000271C                            
0000271C =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
0000271C =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
0000271C =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
0000271C =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
0000271C =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
0000271C =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
0000271C =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
0000271C =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
0000271C =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
0000271C =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
0000271C =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
0000271C =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
0000271C =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
0000271C =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
0000271C =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
0000271C =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
0000271C =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
0000271C =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
0000271C =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
0000271C =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
0000271C =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
0000271C =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
0000271C =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
0000271C =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
0000271C =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
0000271C =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
0000271C =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
0000271C =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
0000271C =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
0000271C =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
0000271C =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
0000271C =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
0000271C =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000271C =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
0000271C =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
0000271C =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
0000271C =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
0000271C =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
0000271C =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
0000271C =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
0000271C =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
0000271C =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
0000271C =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
0000271C =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
0000271C =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
0000271C =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
0000271C =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
0000271C =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
0000271C =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
0000271C =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
0000271C =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
0000271C =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
0000271C =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
0000271C =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
0000271C =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
0000271C =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
0000271C =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
0000271C =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
0000271C =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
0000271C =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
0000271C =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
0000271C                            		
0000271C                            		;include	"_inc\Palette Pointers2.asm"
0000271C                            		
0000271C                            		;include	"_inc\Palette Pointers3.asm"
0000271C                            		
0000271C                            
0000271C                            ; ---------------------------------------------------------------------------
0000271C                            ; Palette data
0000271C                            ; ---------------------------------------------------------------------------
0000271C                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
0000279C                            Pal_Title:	incbin	"palette\Title Screen.bin"
0000281C                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
0000289C                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
000028BC                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
0000291C                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
0000297C                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
000029DC                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002A3C                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002A9C                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002AFC                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002B7C                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002BFC                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002C7C                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002CDC                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002D3C                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00002D9C                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00002DFC                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00002E5C                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00002EBC                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
00002F1C                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00002F7C                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00002FDC                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
0000303C                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
0000309C                            Pal_Special:	incbin	"palette\Special Stage.bin"
0000311C                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
0000317C                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000031FC                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
0000321C                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
0000323C                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
0000325C                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
000032DC                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
0000331C                            Pal_Ending:	incbin	"palette\Ending.bin"
0000339C                            Pal_Options:	incbin	"palette\Options.bin"
0000341C                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
0000343C                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
0000345C                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
0000347C                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
0000349C                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
000034BC                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
000034DC                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000034FC                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
0000351C                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
0000353C                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
0000355C                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
0000357C                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
0000359C                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
000035BC                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
000035DC                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
000035FC                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
0000361C                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
0000363C                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
0000365C                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
0000367C                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
0000369C                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
000036BC                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
000036DC                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
000036FC                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
0000371C                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
0000373C                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
0000375C                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
0000377C                            ; ---------------------------------------------------------------------------
0000377C                            ; Subroutine to	wait for VBlank routines to complete
0000377C                            ; ---------------------------------------------------------------------------
0000377C                            
0000377C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000377C                            
0000377C                            
0000377C                            WaitForVBla:
0000377C 46FC 2300                  		enable_ints
00003780                            
00003780                            	@wait:
00003780 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003784 66FA                       		bne.s	@wait		; if not, branch
00003786 4E75                       		rts	
00003788                            ; End of function WaitForVBla
00003788                            
00003788                            		include	"_incObj\sub RandomNumber.asm"
00003788                            ; ---------------------------------------------------------------------------
00003788                            ; Subroutine to	generate a pseudo-random number	in d0
00003788                            ; ---------------------------------------------------------------------------
00003788                            
00003788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003788                            
00003788                            
00003788                            RandomNumber:
00003788 2238 F636                  		move.l	(v_random).w,d1
0000378C 6600                       		bne.s	@scramble	; if d1 is not 0, branch
0000378E 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003794                            
00003794                            	@scramble:
00003794 2001                       		move.l	d1,d0
00003796 E581                       		asl.l	#2,d1
00003798 D280                       		add.l	d0,d1
0000379A E781                       		asl.l	#3,d1
0000379C D280                       		add.l	d0,d1
0000379E 3001                       		move.w	d1,d0
000037A0 4841                       		swap	d1
000037A2 D041                       		add.w	d1,d0
000037A4 3200                       		move.w	d0,d1
000037A6 4841                       		swap	d1
000037A8 21C1 F636                  		move.l	d1,(v_random).w
000037AC 4E75                       		rts	
000037AC 4E75                       		rts	
000037AE                            		include	"_incObj\sub CalcSine.asm"
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            ; Subroutine calculate a sine
000037AE                            
000037AE                            ; input:
000037AE                            ;	d0 = angle
000037AE                            
000037AE                            ; output:
000037AE                            ;	d0 = sine
000037AE                            ;	d1 = cosine
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            
000037AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037AE                            
000037AE                            
000037AE                            CalcSine:
000037AE 0240 00FF                          andi.w  #$FF,d0
000037B2 5040                               addq.w  #8,d0
000037B4 D040                               add.w   d0,d0
000037B6 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
000037BA 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
000037BE 4E75                               rts
000037C0                            ; End of function CalcSine
000037C0                            
000037C0                            ; ===========================================================================
000037C0                            
000037C0                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003A40                            
00003A40                            ; ===========================================================================
00003A40                            ; ===========================================================================
00003A40                            		include	"_incObj\sub CalcAngle.asm"
00003A40                            ; ---------------------------------------------------------------------------
00003A40                            ; Subroutine calculate an angle
00003A40                            
00003A40                            ; input:
00003A40                            ;	d1 = x-axis distance
00003A40                            ;	d2 = y-axis distance
00003A40                            
00003A40                            ; output:
00003A40                            ;	d0 = angle
00003A40                            ; ---------------------------------------------------------------------------
00003A40                            
00003A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A40                            
00003A40                            
00003A40                            CalcAngle:
00003A40 48E7 1800                  		movem.l	d3-d4,-(sp)
00003A44 7600                       		moveq	#0,d3
00003A46 7800                       		moveq	#0,d4
00003A48 3601                       		move.w	d1,d3
00003A4A 3802                       		move.w	d2,d4
00003A4C 8843                       		or.w	d3,d4
00003A4E 6700                       		beq.s	loc_2D04
00003A50 3802                       		move.w	d2,d4
00003A52 4A43                       		tst.w	d3
00003A54 6A00 0000                  		bpl.w	loc_2CC2
00003A58 4443                       		neg.w	d3
00003A5A                            
00003A5A                            loc_2CC2:
00003A5A 4A44                       		tst.w	d4
00003A5C 6A00 0000                  		bpl.w	loc_2CCA
00003A60 4444                       		neg.w	d4
00003A62                            
00003A62                            loc_2CCA:
00003A62 B843                       		cmp.w	d3,d4
00003A64 6400 0000                  		bcc.w	loc_2CDC
00003A68 E18C                       		lsl.l	#8,d4
00003A6A 88C3                       		divu.w	d3,d4
00003A6C 7000                       		moveq	#0,d0
00003A6E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003A72 6000                       		bra.s	loc_2CE6
00003A74                            ; ===========================================================================
00003A74                            
00003A74                            loc_2CDC:
00003A74 E18B                       		lsl.l	#8,d3
00003A76 86C4                       		divu.w	d4,d3
00003A78 7040                       		moveq	#$40,d0
00003A7A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003A7E                            
00003A7E                            loc_2CE6:
00003A7E 4A41                       		tst.w	d1
00003A80 6A00 0000                  		bpl.w	loc_2CF2
00003A84 4440                       		neg.w	d0
00003A86 0640 0080                  		addi.w	#$80,d0
00003A8A                            
00003A8A                            loc_2CF2:
00003A8A 4A42                       		tst.w	d2
00003A8C 6A00 0000                  		bpl.w	loc_2CFE
00003A90 4440                       		neg.w	d0
00003A92 0640 0100                  		addi.w	#$100,d0
00003A96                            
00003A96                            loc_2CFE:
00003A96 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003A9A 4E75                       		rts	
00003A9C                            ; ===========================================================================
00003A9C                            
00003A9C                            loc_2D04:
00003A9C 303C 0040                  		move.w	#$40,d0
00003AA0 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003AA4 4E75                       		rts	
00003AA6                            ; End of function CalcAngle
00003AA6                            
00003AA6                            ; ===========================================================================
00003AA6                            
00003AA6                            Angle_Data:	incbin	"misc\angles.bin"
00003BA8                            
00003BA8                            ; ===========================================================================
00003BA8                            ; ===========================================================================
00003BA8                            
00003BA8                            ; ---------------------------------------------------------------------------
00003BA8                            ; Sega screen
00003BA8                            ; ---------------------------------------------------------------------------
00003BA8                            
00003BA8                            GM_Sega:
00003BB0 6100 D912                  		bsr.w	ClearPLC
00003BB4 6100 E348                  		bsr.w	PaletteFadeOut
00003BB8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003BBE 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003BC2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003BC6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003BCA 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003BCE 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003BD2 4238 F64E                  		clr.b	(f_wtr_state).w
00003BD6 46FC 2700                  		disable_ints
00003BDA 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003BDE 0200 00BF                  		andi.b	#$BF,d0
00003BE2 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003BE8 6100 D312                  		bsr.w	ClearScreen
00003BF6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003BFC 6100 D47C                  		bsr.w	NemDec
00003C00 43F9 00FF 0000             		lea	($FF0000).l,a1
00003C06 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003C0C 303C 0000                  		move.w	#0,d0
00003C10 6100 D9F2                  		bsr.w	EniDec
00003C14                            
00003C14 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003C28 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003C3C                            
00003C3C 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003C40 6B00                       			bmi.s   @loadpal
00003C42 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003C56                            
00003C56                            	@loadpal:
00003C56 7000                       		moveq	#palid_SegaBG,d0
00003C58 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003C5C 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003C62 7E3F                               moveq    #$3F,d7
00003C64                             
00003C64                                .loop:
00003C64 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003C68 51CF FFFA                          dbf        d7,.loop
00003C6C 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003C70 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003C76 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003C7C 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003C82 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003C88 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003C8C 0000 0040                  		ori.b	#$40,d0
00003C90 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003C96                            
00003C96                            Sega_WaitPal:
00003C96 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003C9C 6100 FADE                  		bsr.w	WaitForVBla
00003CA0 6100 E414                  		bsr.w	PalCycle_Sega
00003CA4 66F0                       		bne.s	Sega_WaitPal
00003CA6                            
00003CAE 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003CB4 6100 FAC6                  		bsr.w	WaitForVBla
00003CB8 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003CBE                            
00003CBE                            Sega_WaitEnd:
00003CBE 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003CC4 6100 FAB6                  		bsr.w	WaitForVBla
00003CC8 4A78 F614                  		tst.w	(v_demolength).w
00003CCC 6700                       		beq.s	Sega_GotoTitle
00003CCE 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003CD4 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003CD6                            
00003CD6                            Sega_GotoTitle:
00003CD6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003CDC 4E75                       		rts	
00003CDE                            ; ===========================================================================
00003CDE                            
00003CDE                            ; ---------------------------------------------------------------------------
00003CDE                            ; Title	screen
00003CDE                            ; ---------------------------------------------------------------------------
00003CDE                            
00003CDE                            GM_Title:
00003CE6 6100 D7DC                  		bsr.w	ClearPLC
00003CEA 6100 E212                  		bsr.w	PaletteFadeOut
00003CEE 46FC 2700                  		disable_ints
00003CF2 6100 D28E                  		bsr.w	SoundDriverLoad
00003CF6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003CFC 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003D00 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003D04 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003D08 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003D0C 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003D10 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D14 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003D18 4238 F64E                  		clr.b	(f_wtr_state).w
00003D1C 6100 D1DE                  		bsr.w	ClearScreen
00003D20 4EB9 0000 0000             		jsr		SHC2022 
00003D26                            
00003D26 43F8 D000                  		lea	(v_objspace).w,a1
00003D2A 7000                       		moveq	#0,d0
00003D2C 323C 07FF                  		move.w	#$7FF,d1
00003D30                            
00003D30                            	Tit_ClrObj1:
00003D30 22C0                       		move.l	d0,(a1)+
00003D32 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003D36                            
00003D40 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003D46 6100 D332                  		bsr.w	NemDec
00003D54 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003D5A 6100 D31E                  		bsr.w	NemDec
00003D5E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003D64 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003D6A 303C 0000                  		move.w	#0,d0
00003D6E 6100 D894                  		bsr.w	EniDec
00003D72                            
00003D72 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
00003D86                            
00003D86 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00003D8A 7000                       		moveq	#cBlack,d0
00003D8C 323C 001F                  		move.w	#$1F,d1
00003D90                            
00003D90                            	Tit_ClrPal:
00003D90 22C0                       		move.l	d0,(a1)+
00003D92 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
00003D96                            
00003D96 4EB9 0000 0000             		jsr		LoadPlayerPal
00003D9C 6100 E40A                  		bsr.w	PalLoad1
00003DA0 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
00003DA6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003DAC 4EB9 0000 0000             		jsr	(BuildSprites).l
00003DB2 6100 E0A4                  		bsr.w	PaletteFadeIn
00003DB6 46FC 2700                  		disable_ints
00003DC4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003DCA 6100 D2AE                  		bsr.w	NemDec
00003DD8 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003DDE 6100 D29A                  		bsr.w	NemDec
00003DEC 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
00003DF2 6100 D286                  		bsr.w 	NemDec
00003DF6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00003E04 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
00003E0A 323C 028F                  		move.w	#$28F,d1
00003E0E                            
00003E0E                            	Tit_LoadText:
00003E0E 3C9D                       		move.w	(a5)+,(a6)
00003E10 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00003E14                            
00003E14 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
00003E1A 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00003E20 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00003E26 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
00003E2C 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
00003E32 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
00003E38 6100 0000                  		bsr.w	LevelSizeLoad
00003E3C 6100 0000                  		bsr.w	DeformLayers
00003E40 43F8 B000                  		lea	(v_16x16).w,a1
00003E44 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
00003E4A 303C 0000                  		move.w	#0,d0
00003E4E 6100 D7B4                  		bsr.w	EniDec
00003E52 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
00003E58 43F9 00FF 0000             		lea	(v_256x256).l,a1
00003E5E 6100 D922                  		bsr.w	KosDec
00003E62 6100 0000                  		bsr.w	LevelLayoutLoad
00003E66 6100 E096                  		bsr.w	PaletteFadeOut
00003E6A 46FC 2700                  		disable_ints
00003E6E 6100 D08C                  		bsr.w	ClearScreen
00003E72 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00003E78 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00003E7E 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00003E82 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00003E86 343C 6000                  		move.w	#$6000,d2
00003E8A 6100 0000                  		bsr.w	DrawChunks
00003E8E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E94 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003E9A 303C 0000                  		move.w	#0,d0
00003E9E 6100 D764                  		bsr.w	EniDec
00003EA2                            
00003EA2 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00003EB6                            
00003EC0 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00003EC6 6100 D1B2                  		bsr.w	NemDec
00003ECA 7001                       		moveq	#palid_Title,d0	; load title screen palette
00003ECC 6100 E2DA                  		bsr.w	PalLoad1
00003ED8 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00003EDE 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00003EE4 43F8 D080                  		lea	(v_objspace+$80).w,a1
00003EE8 7000                       		moveq	#0,d0
00003EEA 323C 0007                  		move.w	#7,d1
00003EEE                            
00003EEE                            	Tit_ClrObj2:
00003EEE 22C0                       		move.l	d0,(a1)+
00003EF0 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00003EF4                            
00003EF4 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00003EFA 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00003F00 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00003F04                            
00003F04 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003F08 6A00                       			bpl.s   @isjap		; if yes, branch
00003F0A                            
00003F0A 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00003F10 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00003F16                            	@isjap:
00003F16 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
00003F1C 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00003F22 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003F28 6100 0000                  		bsr.w	DeformLayers
00003F2C 4EB9 0000 0000             		jsr	(BuildSprites).l
00003F32 7000                       		moveq	#plcid_Main,d0
00003F34 6100 D562                  		bsr.w	NewPLC
00003F38 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
00003F3E 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
00003F44 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F48 0000 0040                  		ori.b	#$40,d0
00003F4C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F52 6100 DF04                  		bsr.w	PaletteFadeIn
00003F56                            
00003F56                            Tit_MainLoop:
00003F56 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00003F5C 6100 F81E                  		bsr.w	WaitForVBla
00003F60 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003F66 6100 0000                  		bsr.w	DeformLayers
00003F6A 4EB9 0000 0000             		jsr	(BuildSprites).l
00003F70 6100 DAF8                  		bsr.w	PCycle_Title
00003F74 6100 D55C                  		bsr.w	RunPLC
00003F78 3038 D008                  		move.w	(v_objspace+obX).w,d0
00003F7C 5440                       		addq.w	#2,d0
00003F7E 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00003F82 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00003F86 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00003F88                            
00003F88 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00003F8E 4E75                       		rts	
00003F90                            ; ===========================================================================
00003F90                            
00003F90                            Tit_ChkRegion:
00003F90 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00003F94 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00003F96                            
00003F96 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00003F9C 6000                       		bra.s	Tit_EnterCheat
00003F9E                            
00003F9E                            	Tit_RegionJap:
00003F9E 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00003FA4                            
00003FA4                            Tit_EnterCheat:
00003FA4 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00003FA8 D0C0                       		adda.w	d0,a0
00003FAA 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00003FAE 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00003FB2 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003FB4 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00003FB6 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00003FBA 4A00                       		tst.b	d0
00003FBC 6600                       		bne.s	Tit_CountC
00003FBE 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00003FC2 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00003FC6 E249                       		lsr.w	#1,d1
00003FC8 0241 0003                  		andi.w	#3,d1
00003FCC 6700                       		beq.s	Tit_PlayRing
00003FCE 4A38 FFF8                  		tst.b	(v_megadrive).w
00003FD2 6A00                       		bpl.s	Tit_PlayRing
00003FD4 7201                       		moveq	#1,d1
00003FD6 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00003FDA                            
00003FDA                            	Tit_PlayRing:
00003FDA 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003FE8 6000                       		bra.s	Tit_CountC
00003FEA                            ; ===========================================================================
00003FEA                            
00003FEA                            Tit_ResetCheat:
00003FEA 4A00                       		tst.b	d0
00003FEC 6700                       		beq.s	Tit_CountC
00003FEE 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00003FF4 6700                       		beq.s	Tit_CountC
00003FF6 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00003FFC                            
00003FFC                            Tit_CountC:
00003FFC 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004000 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004004                            
00004004                            loc_3230:
00004004 4A78 F614                  		tst.w	(v_demolength).w
00004008 6700 0000                  		beq.w	GotoDemo
0000400C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
00004012 6700 FF42                  		beq.w	Tit_MainLoop	; if not, branch
00004016                            
00004016                            Tit_ChkLevSel:
00004016 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
0000401A 6700 0000                  		beq.w	@cont	; if not, play level
0000401E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
00004024 6700 0000                  		beq.w	@cont	; if not, play level
00004028 6000 0000                  		bra.w	Tit_LevelSelect
0000402C                            
0000402C                            	@cont:		
0000402C 7400                       		moveq   #0,d2
0000402E 1438 FFB0                  		move.b   (Title_screen_option).w,d2   ; load the choice
00004032 D442                       		add.w   d2,d2            ; multiply by 2
00004034 343B 2000                  		move.w   Tit_Menu_Choice(pc,d2.w),d2
00004038 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
0000403C                            
0000403C                            ; ===========================================================================
0000403C                            Tit_Menu_Choice:
0000403C 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
0000403E 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
00004040                            ; ===========================================================================
00004040                            
00004040                            Menu_Options:
00004040 11FC 0020 F600             	move.b	#$20,(v_gamemode).w
00004046 4E75                       	rts
00004048                            
00004048                            Tit_LevelSelect:	
00004048 7002                       		moveq	#palid_LevelSel,d0
0000404A 6100 E198                  		bsr.w	PalLoad2	; load level select palette
0000404E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00004052 7000                       		moveq	#0,d0
00004054 323C 00DF                  		move.w	#$DF,d1
00004058                            
00004058                            	Tit_ClrScroll1:
00004058 22C0                       		move.l	d0,(a1)+
0000405A 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
0000405E                            
0000405E 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
00004062 46FC 2700                  		disable_ints
00004066 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004076 323C 03FF                  		move.w	#$3FF,d1
0000407A                            
0000407A                            	Tit_ClrScroll2:
0000407A 2C80                       		move.l	d0,(a6)
0000407C 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004080                            
00004080 6100 0000                  		bsr.w	LevSelTextLoad
00004084                            
00004084                            ; ---------------------------------------------------------------------------
00004084                            ; Level	Select
00004084                            ; ---------------------------------------------------------------------------
00004084                            
00004084                            LevelSelect:
00004084 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000408A 6100 F6F0                  		bsr.w	WaitForVBla
0000408E 6100 0000                  		bsr.w	LevSelControls
00004092 6100 D43E                  		bsr.w	RunPLC
00004096 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000409A 66E8                       		bne.s	LevelSelect
0000409C 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000040A2 67E0                       		beq.s	LevelSelect	; if not, branch
000040A4 3038 FF82                  		move.w	(v_levselitem).w,d0
000040A8 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000040AC 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000040AE 3038 FF84                  		move.w	(v_levselsound).w,d0
000040B2 0640 0080                  		addi.w	#$80,d0
000040B6 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000040BA 6700                       		beq.s	LevSel_Ending	; if yes, branch
000040BC 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000040C0 6700                       		beq.s	LevSel_Credits	; if yes, branch
000040C2                            
000040C2                            LevSel_PlaySnd:
000040C2 6100 CF08                  		bsr.w	PlaySound_Special
000040C6 60BC                       		bra.s	LevelSelect
000040C8                            ; ===========================================================================
000040C8                            
000040C8                            LevSel_Ending:
000040C8 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000040CE 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000040D4 4E75                       		rts	
000040D6                            ; ===========================================================================
000040D6                            
000040D6                            LevSel_Credits:
000040D6 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000040E4 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000040EA 4E75                       		rts	
000040EC                            ; ===========================================================================
000040EC                            
000040EC                            LevSel_Level_SS:
000040EC D040                       		add.w	d0,d0
000040EE 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
000040F2 6B00 FF90                  		bmi.w	LevelSelect
000040F6 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
000040FA 6600                       		bne.s	LevSel_Level	; if not, branch
000040FC 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004102 4278 FE10                  		clr.w	(v_zone).w	; clear	level
00004106 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000410C 7000                       		moveq	#0,d0
0000410E 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004112 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004116 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000411A 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004122 4E75                       		rts	
00004124                            ; ===========================================================================
00004124                            
00004124                            LevSel_Level:
00004124 0240 3FFF                  		andi.w	#$3FFF,d0
00004128 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000412C                            
0000412C                            PlayLevel:
0000412C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00004132 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004138 7000                       		moveq	#0,d0
0000413A 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000413E 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004142 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004146 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
0000414A 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
0000414E 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
00004152 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
00004156 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
0000415C 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000416C 4E75                       		rts	
0000416E                            ; ===========================================================================
0000416E                            ; ---------------------------------------------------------------------------
0000416E                            ; Level	select - level pointers
0000416E                            ; ---------------------------------------------------------------------------
0000416E                            		; correct level order
0000416E 0000                       		dc.b id_GHZ, 0
00004170 0001                       		dc.b id_GHZ, 1
00004172 0002                       		dc.b id_GHZ, 2
00004174 0200                       		dc.b id_MZ, 0
00004176 0201                       		dc.b id_MZ, 1
00004178 0202                       		dc.b id_MZ, 2
0000417A 0400                       		dc.b id_SYZ, 0
0000417C 0401                       		dc.b id_SYZ, 1
0000417E 0402                       		dc.b id_SYZ, 2
00004180 0100                       		dc.b id_LZ, 0
00004182 0101                       		dc.b id_LZ, 1
00004184 0102                       		dc.b id_LZ, 2
00004186 0300                       		dc.b id_SLZ, 0
00004188 0301                       		dc.b id_SLZ, 1
0000418A 0302                       		dc.b id_SLZ, 2
0000418C 0500                       		dc.b id_SBZ, 0
0000418E 0501                       		dc.b id_SBZ, 1
00004190 0103                       		dc.b id_LZ, 3
00004192 0502                       		dc.b id_SBZ, 2
00004194 0700                       		dc.b id_SS, 0		; Special Stage
00004196 8000                       		dc.w $8000		; Sound Test
00004198                            		even
00004198                            ; ---------------------------------------------------------------------------
00004198                            ; Level	select codes
00004198                            ; ---------------------------------------------------------------------------
00004198 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
000041A0                            		even
000041A0                            
000041A0 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000041A6                            		even
000041A6                            ; ===========================================================================
000041A6                            
000041A6                            ; ---------------------------------------------------------------------------
000041A6                            ; Demo mode
000041A6                            ; ---------------------------------------------------------------------------
000041A6                            
000041A6                            GotoDemo:
000041A6 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000041AC                            
000041AC                            loc_33B6:
000041AC 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041B2 6100 F5C8                  		bsr.w	WaitForVBla
000041B6 6100 0000                  		bsr.w	DeformLayers
000041BA 6100 D88E                  		bsr.w	PaletteCycle
000041BE 6100 D312                  		bsr.w	RunPLC
000041C2 3038 D008                  		move.w	(v_objspace+obX).w,d0
000041C6 5440                       		addq.w	#2,d0
000041C8 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000041CC 0C40 1C00                  		cmpi.w	#$1C00,d0
000041D0 6500                       		blo.s	loc_33E4
000041D2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000041D8 4E75                       		rts	
000041DA                            ; ===========================================================================
000041DA                            
000041DA                            loc_33E4:
000041DA 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000041E0 6600 FE34                  		bne.w	Tit_ChkLevSel	; if yes, branch
000041E4 4A78 F614                  		tst.w	(v_demolength).w
000041E8 6600 FFC2                  		bne.w	loc_33B6
000041F4 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
000041F8 0240 0007                  		andi.w	#7,d0
000041FC D040                       		add.w	d0,d0
000041FE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004202 31C0 FE10                  		move.w	d0,(v_zone).w
00004206 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
0000420A 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004210 6500                       		blo.s	loc_3422	; if yes, branch
00004212 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004218                            
00004218                            loc_3422:
00004218 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
0000421E 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
00004224 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004228 6600                       		bne.s	Demo_Level	; if not, branch
0000422A 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004230 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
00004234 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004238                            
00004238                            Demo_Level:
00004238 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000423E 7000                       		moveq	#0,d0
00004240 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004244 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004248 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000424C 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004254 4E75                       		rts	
00004256                            ; ===========================================================================
00004256                            ; ---------------------------------------------------------------------------
00004256                            ; Levels used in demos
00004256                            ; ---------------------------------------------------------------------------
00004256                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
0000425E                            		even
0000425E                            
0000425E                            ; ---------------------------------------------------------------------------
0000425E                            ; Subroutine to	change what you're selecting in the level select
0000425E                            ; ---------------------------------------------------------------------------
0000425E                            
0000425E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000425E                            
0000425E                            
0000425E                            LevSelControls:
0000425E 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004262 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00004266 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00004268 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
0000426C 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000426E                            
0000426E                            LevSel_UpDown:
0000426E 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004274 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004278 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000427C 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000427E 3038 FF82                  		move.w	(v_levselitem).w,d0
00004282 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004286 6700                       		beq.s	LevSel_Down	; if not, branch
00004288 5340                       		subq.w	#1,d0		; move up 1 selection
0000428A 6400                       		bhs.s	LevSel_Down
0000428C 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000428E                            
0000428E                            LevSel_Down:
0000428E 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004292 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004294 5240                       		addq.w	#1,d0		; move down 1 selection
00004296 0C40 0015                  		cmpi.w	#$15,d0
0000429A 6500                       		blo.s	LevSel_Refresh
0000429C 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
0000429E                            
0000429E                            LevSel_Refresh:
0000429E 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
000042A2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000042A6 4E75                       		rts	
000042A8                            ; ===========================================================================
000042A8                            
000042A8                            LevSel_SndTest:
000042A8 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
000042AE 6600                       		bne.s	LevSel_NoMove	; if not, branch
000042B0 1238 F605                  		move.b	(v_jpadpress1).w,d1
000042B4 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
000042B8 6700                       		beq.s	LevSel_NoMove	; if not, branch
000042BA 3038 FF84                  		move.w	(v_levselsound).w,d0
000042BE 0801 0002                  		btst	#bitL,d1	; is left pressed?
000042C2 6700                       		beq.s	LevSel_Right	; if not, branch
000042C4 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000042C6 6400                       		bhs.s	LevSel_Right
000042C8 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
000042CA                            
000042CA                            LevSel_Right:
000042CA 0801 0003                  		btst	#bitR,d1	; is right pressed?
000042CE 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000042D0 5240                       		addq.w	#1,d0		; add 1	to sound test
000042D2 0C40 0050                  		cmpi.w	#$50,d0
000042D6 6500                       		blo.s	LevSel_Refresh2
000042D8 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000042DA                            
000042DA                            LevSel_Refresh2:
000042DA 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000042DE 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000042E2                            
000042E2                            LevSel_NoMove:
000042E2 4E75                       		rts	
000042E4                            ; End of function LevSelControls
000042E4                            
000042E4                            ; ---------------------------------------------------------------------------
000042E4                            ; Subroutine to load level select text
000042E4                            ; ---------------------------------------------------------------------------
000042E4                            
000042E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042E4                            
000042E4                            
000042E4                            LevSelTextLoad:
000042E4                            
000042E4 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000042E4                            					; $E210 is a VRAM address
000042E4                            
000042E4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000042EA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042F0 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
000042F6 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
000042FA 7214                       		moveq	#$14,d1		; number of lines of text
000042FC                            
000042FC                            	LevSel_DrawAll:
000042FC 2D44 0004                  		move.l	d4,4(a6)
00004300 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00004304 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
0000430A 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
0000430E                            
0000430E 7000                       		moveq	#0,d0
00004310 3038 FF82                  		move.w	(v_levselitem).w,d0
00004314 3200                       		move.w	d0,d1
00004316 283C 6210 0003             		move.l	#textpos,d4
0000431C EF48                       		lsl.w	#7,d0
0000431E 4840                       		swap	d0
00004320 D880                       		add.l	d0,d4
00004322 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004328 E749                       		lsl.w	#3,d1
0000432A 3001                       		move.w	d1,d0
0000432C D241                       		add.w	d1,d1
0000432E D240                       		add.w	d0,d1
00004330 D2C1                       		adda.w	d1,a1
00004332 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
00004336 2D44 0004                  		move.l	d4,4(a6)
0000433A 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
0000433E 363C E680                  		move.w	#$E680,d3
00004342 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
00004348 6600                       		bne.s	LevSel_DrawSnd
0000434A 363C C680                  		move.w	#$C680,d3
0000434E                            
0000434E                            LevSel_DrawSnd:
00004358 3038 FF84                  		move.w	(v_levselsound).w,d0
0000435C 0640 0080                  		addi.w	#$80,d0
00004360 1400                       		move.b	d0,d2
00004362 E808                       		lsr.b	#4,d0
00004364 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00004368 1002                       		move.b	d2,d0
0000436A 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000436E 4E75                       		rts	
00004370                            ; End of function LevSelTextLoad
00004370                            
00004370                            
00004370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004370                            
00004370                            
00004370                            LevSel_ChgSnd:
00004370 0240 000F                  		andi.w	#$F,d0
00004374 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004378 6500                       		blo.s	LevSel_Numb	; if not, branch
0000437A 5E00                       		addi.b	#7,d0		; use alpha characters
0000437C                            
0000437C                            	LevSel_Numb:
0000437C D043                       		add.w	d3,d0
0000437E 3C80                       		move.w	d0,(a6)
00004380 4E75                       		rts	
00004382                            ; End of function LevSel_ChgSnd
00004382                            
00004382                            
00004382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004382                            
00004382                            
00004382                            LevSel_ChgLine:
00004382 7417                       		moveq	#$17,d2		; number of characters per line
00004384                            
00004384                            	LevSel_LineLoop:
00004384 7000                       		moveq	#0,d0
00004386 1019                       		move.b	(a1)+,d0	; get character
00004388 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
0000438A 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000438E 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004392 4E75                       		rts	
00004394                            
00004394                            
00004394                            	LevSel_CharOk:
00004394 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004396 3C80                       		move.w	d0,(a6)		; send to VRAM
00004398 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000439C 4E75                       		rts	
0000439E                            ; End of function LevSel_ChgLine
0000439E                            
0000439E                            ; ===========================================================================
0000439E                            ; ---------------------------------------------------------------------------
0000439E                            ; Level	select menu text
0000439E                            ; ---------------------------------------------------------------------------
0000439E                            		incbin	"misc\Level Select Text (JP1).bin"
00004596                            		even
00004596                            ; ---------------------------------------------------------------------------
00004596                            ; Music	playlist
00004596                            ; ---------------------------------------------------------------------------
00004596                            MusicList:
00004596 00                         			dc.b bgm_GHZ    ; GHZ1
00004597 00                                 	dc.b bgm_LZ    ; GHZ2
00004598 00                                 	dc.b bgm_Seaside   ; GHZ3
00004599 00                                 	dc.b bgm_LZ    ; GHZ4
0000459A 00                                 	dc.b bgm_Stop    ; LZ1
0000459B 00                                 	dc.b bgm_Stop   ; LZ2
0000459C 00                                 	dc.b bgm_Stop    ; LZ3
0000459D 00                                 	dc.b bgm_SBZ3    ; LZ4
0000459E 00                                 	dc.b bgm_MZ    ; MZ1
0000459F 00                                 	dc.b bgm_SBZ    ; MZ2
000045A0 00                                 	dc.b bgm_MZ    ; MZ3
000045A1 00                                 	dc.b bgm_SBZ    ; MZ4
000045A2 00                                 	dc.b bgm_LZ    ; SLZ1
000045A3 00                                 	dc.b bgm_LZ    ; SLZ2
000045A4 00                                 	dc.b bgm_LZ    ; SLZ3
000045A5 00                                 	dc.b bgm_LZ    ; SLZ4
000045A6 00                                 	dc.b bgm_SYZ    ; SYZ1
000045A7 00                                 	dc.b bgm_SLZ    ; SYZ2
000045A8 00                                 	dc.b bgm_SLZ    ; SYZ3
000045A9 00                                 	dc.b bgm_SLZ    ; SYZ4
000045AA 00                                 	dc.b bgm_SBZ    ; SBZ1
000045AB 00                                 	dc.b bgm_SBZ    ; SBZ2
000045AC 00                                 	dc.b bgm_FZ		; SBZ3
000045AD 00                                 	dc.b bgm_SBZ    ; SBZ4
000045AE 00                                 	dc.b bgm_GHZ    ; GHZ1
000045AF 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B0 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B1 00                                 	dc.b bgm_GHZ    ; GHZ1
000045B2                                    	even
000045B2                            ; ===========================================================================
000045B2                            
000045B2                            ; ---------------------------------------------------------------------------
000045B2                            ; Level
000045B2                            ; ---------------------------------------------------------------------------
000045B2                            
000045B2                            GM_Level:
000045B2 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
000045B8 4A78 FFF0                  		tst.w	(f_demo).w
000045BC 6B00                       		bmi.s	Level_NoMusicFade
000045C6                            
000045C6                            	Level_NoMusicFade:
000045C6 6100 CEFC                  		bsr.w	ClearPLC
000045CA 6100 D932                  		bsr.w	PaletteFadeOut
000045CE 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000045D2 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
000045D4 46FC 2700                  		disable_ints
000045E2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000045E8 6100 CA90                  		bsr.w	NemDec
000045EC 46FC 2300                  		enable_ints
000045F0 7000                       		moveq	#0,d0
000045F2 1038 FE10                  		move.b	(v_zone).w,d0
000045F6 E948                       		lsl.w	#4,d0
000045F8 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000045FE 45F2 0000                  		lea	(a2,d0.w),a2
00004602 7000                       		moveq	#0,d0
00004604 1012                       		move.b	(a2),d0
00004606 6700                       		beq.s	loc_37FC
00004608 6100 CE5C                  		bsr.w	AddPLC		; load level patterns
0000460C                            
0000460C                            loc_37FC:
0000460C 7000                       		moveq	#plcid_Main2,d0
0000460E 6100 CE56                  		bsr.w	AddPLC		; load standard	patterns
00004612                            
00004612                            Level_ClrRam:
00004612 43F8 D000                  		lea	(v_objspace).w,a1
00004616 7000                       		moveq	#0,d0
00004618 323C 07FF                  		move.w	#$7FF,d1
0000461C                            
0000461C                            	Level_ClrObjRam:
0000461C 22C0                       		move.l	d0,(a1)+
0000461E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004622                            
00004622 43F8 F628                  		lea	($FFFFF628).w,a1
00004626 7000                       		moveq	#0,d0
00004628 323C 0015                  		move.w	#$15,d1
0000462C                            
0000462C                            	Level_ClrVars1:
0000462C 22C0                       		move.l	d0,(a1)+
0000462E 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004632                            
00004632 43F8 F700                  		lea	(v_screenposx).w,a1
00004636 7000                       		moveq	#0,d0
00004638 323C 003F                  		move.w	#$3F,d1
0000463C                            
0000463C                            	Level_ClrVars2:
0000463C 22C0                       		move.l	d0,(a1)+
0000463E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004642                            
00004642 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004646 7000                       		moveq	#0,d0
00004648 323C 0047                  		move.w	#$47,d1
0000464C                            
0000464C                            	Level_ClrVars3:
0000464C 22C0                       		move.l	d0,(a1)+
0000464E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004652                            
00004652 46FC 2700                  		disable_ints
00004656 6100 C8A4                  		bsr.w	ClearScreen
0000465A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004660 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004664 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004668 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000466C 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004670 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004674 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004678 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
0000467C 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004682 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004686 31FC C800 C8FC             		ResetDMAQueue	
0000468C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004692 6600                       		bne.s	Level_LoadPal	; if not, branch
00004694                            
00004694 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004698 7000                       		moveq	#0,d0
0000469A 1038 FE11                  		move.b	(v_act).w,d0
0000469E D040                       		add.w	d0,d0
000046A0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000046A6 3031 0000                  		move.w	(a1,d0.w),d0
000046AA 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
000046AE 31C0 F648                  		move.w	d0,(v_waterpos2).w
000046B2 31C0 F64A                  		move.w	d0,(v_waterpos3).w
000046B6 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
000046BA 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
000046BE 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
000046C4                            
000046C4                            Level_LoadPal:
000046C4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000046CA 46FC 2300                  		move	#$2300,sr
000046CE 4EB9 0000 0000             		jsr		LoadPlayerPal
000046D4 6100 DB0E                  		bsr.w	PalLoad2	; load Sonic's pallet line
000046D8 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
000046DE 6600                       		bne.s	Level_GetBgm	; if not, branch
000046E0 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
000046E6 6100 DB3C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000046EA 4A38 FE30                  		tst.b	($FFFFFE30).w
000046EE 6700                       		beq.s	Level_GetBgm
000046F0 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000046F6                            
000046F6                            	Level_GetBgm:
000046F6 4A78 FFF0                  		tst.w	(f_demo).w
000046FA 6B00                               	bmi.s	Level_SkipTtlCard
000046FC 7000                               	moveq	#0,d0
000046FE 3038 FE10                  		move.w	(v_zone).w,d0
00004702 E418                       		ror.b	#2,d0
00004704 EC48                       		lsr.w   #6,d0
00004706 43F9 0000 4596                     	lea	(MusicList).l,a1 ; load    music playlist
0000470C 1031 0000                          	move.b	(a1,d0.w),d0
00004710 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004714 6100 C8B0                          	bsr.w	PlaySound    ; play music
00004718 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
0000471E                            
0000471E                            
0000471E                            Level_TtlCardLoop:
0000471E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004724 6100 F056                  		bsr.w	WaitForVBla
00004728 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000472E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004734 6100 CD9C                  		bsr.w	RunPLC
00004738 3038 D108                  		move.w	(v_objspace+$108).w,d0
0000473C B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004740 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004742 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004746 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004748 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
0000474E                            
0000474E                            	Level_SkipTtlCard:
0000474E 4EB9 0000 0000             		jsr		LoadPlayerPal
00004754 6100 DA52                  		bsr.w	PalLoad1	; load Sonic's palette
00004758 6100 0000                  		bsr.w	LevelSizeLoad
0000475C 6100 0000                  		bsr.w	DeformLayers
00004760 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004766 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
0000476A 6100 0000                  		bsr.w	LoadTilesFromStart
0000476E 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004774 6100 0000                  		bsr.w	ColIndexLoad
00004778 6100 0000                  		bsr.w	LZWaterFeatures
0000477C 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004782 4A78 FFF0                  		tst.w	(f_demo).w
00004786 6B00                       		bmi.s	Level_ChkDebug
00004788 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000478E                            
0000478E                            Level_ChkDebug:
0000478E 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004792 6700                       		beq.s	Level_ChkWater	; if not, branch
00004794 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
0000479A 6700                       		beq.s	Level_ChkWater	; if not, branch
0000479C 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000047A2                            
000047A2                            Level_ChkWater:
000047A2 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
000047A8 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
000047AE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000047B4 6600                       		bne.s	Level_LoadObj	; if not, branch
000047B6 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
000047BC 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
000047C2 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
000047C8 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
000047CE                            
000047CE                            Level_LoadObj:
000047CE 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000047D4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000047DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000047E0 7000                       		moveq	#0,d0
000047E2 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
000047E6 6600                       		bne.s	Level_SkipClr	; if yes, branch
000047E8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000047EC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000047F0 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
000047F4                            
000047F4                            	Level_SkipClr:
000047F4 11C0 FE1A                  		move.b	d0,(f_timeover).w
000047F8 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
000047FC 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004800 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004804 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004808 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
0000480C 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004810 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004814 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004818 31C0 FE02                  		move.w	d0,(f_restart).w
0000481C 31C0 FE04                  		move.w	d0,(v_framecount).w
00004820 6100 0000                  		bsr.w	OscillateNumInit
00004824 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
0000482A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004830 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004836 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
0000483C 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004842 7000                       		moveq	#0,d0
00004844 1038 FE10                  		move.b	(v_zone).w,d0
00004848 E548                       		lsl.w	#2,d0
0000484A 2271 0000                  		movea.l	(a1,d0.w),a1
0000484E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004852 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004854 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
0000485A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000485E 5340                       		subq.w	#1,d0
00004860 E548                       		lsl.w	#2,d0
00004862 2271 0000                  		movea.l	(a1,d0.w),a1
00004866                            
00004866                            Level_Demo:
00004866 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
0000486C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004870 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004876 4A78 FFF0                  		tst.w	(f_demo).w
0000487A 6A00                       		bpl.s	Level_ChkWaterPal
0000487C 31FC 021C F614             		move.w	#540,(v_demolength).w
00004882 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004888 6600                       		bne.s	Level_ChkWaterPal
0000488A 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004890                            
00004890                            Level_ChkWaterPal:
00004890 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004896 6600                       		bne.s	Level_Delay	; if not, branch
00004898 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
0000489A 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
000048A0 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
000048A2 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
000048A4                            
000048A4                            	Level_WtrNotSbz:
000048A4 6100 D9BA                  		bsr.w	PalLoad4_Water
000048A8                            
000048A8                            Level_Delay:
000048A8 323C 0003                  		move.w	#3,d1
000048AC                            
000048AC                            	Level_DelayLoop:
000048AC 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
000048B2 6100 EEC8                  		bsr.w	WaitForVBla
000048B6 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000048BA                            
000048BA 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
000048C0 6100 D59C                  		bsr.w	PalFadeIn_Alt
000048C4 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000048C8 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
000048CA 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
000048CE 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
000048D2 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
000048D6 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
000048DA 6000                       		bra.s	Level_StartGame
000048DC                            ; ===========================================================================
000048DC                            
000048DC                            Level_ClrCardArt:
000048DC 7000                       		moveq	#plcid_Explode,d0
000048DE 4EB9 0000 1466             		jsr	(AddPLC).l	; load explosion gfx
000048E4 7000                       		moveq	#0,d0
000048E6 1038 FE10                  		move.b	(v_zone).w,d0
000048EA 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
000048EE 4EB9 0000 1466             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
000048F4                            
000048F4                            Level_StartGame:
000048F4 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
000048FA                            
000048FA                            ; ---------------------------------------------------------------------------
000048FA                            ; Main level loop (when	all title card and loading sequences are finished)
000048FA                            ; ---------------------------------------------------------------------------
000048FA                            
000048FA                            Level_MainLoop:
000048FA 6100 C6DC                  		bsr.w	PauseGame
000048FE 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004904 6100 EE76                  		bsr.w	WaitForVBla
00004908 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
0000490C 6100 0000                  		bsr.w	MoveSonicInDemo
00004910 6100 0000                  		bsr.w	LZWaterFeatures
00004914 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000491A 4A78 FE02                  			tst.w   (f_restart).w
0000491E 6600 FC92                  			bne     GM_Level
00004922 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004926 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004928 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
0000492E 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004930                            
00004930                            	Level_DoScroll:
00004930 6100 0000                  		bsr.w	DeformLayers
00004934                            
00004934                            	Level_SkipScroll:
00004934 4EB9 0000 0000             		jsr	(BuildSprites).l
0000493A 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004940 6100 D108                  		bsr.w	PaletteCycle
00004944 6100 CB8C                  		bsr.w	RunPLC
00004948 6100 0000                  		bsr.w	OscillateNumDo
0000494C 6100 0000                  		bsr.w	SynchroAnimate
00004950 6100 0000                  		bsr.w	SignpostArtLoad
00004954                            
00004954 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000495A 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
0000495C 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004962 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004966 4E75                       		rts	
00004968                            ; ===========================================================================
00004968                            
00004968                            Level_ChkDemo:
00004968 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
0000496C 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000496E 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004972 6700                       		beq.s	Level_EndDemo	; if not, branch
00004974 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000497A 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
0000497E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004984 4E75                       		rts	
00004986                            ; ===========================================================================
00004986                            
00004986                            Level_EndDemo:
00004986 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
0000498C 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
0000498E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004994 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004998 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
0000499A 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
000049A0                            
000049A0                            Level_FadeDemo:
000049A0 31FC 003C F614             		move.w	#$3C,(v_demolength).w
000049A6 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000049AC 4278 F794                  		clr.w	(v_palchgspeed).w
000049B0                            
000049B0                            	Level_FDLoop:
000049B0 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
000049B6 6100 EDC4                  		bsr.w	WaitForVBla
000049BA 6100 0000                  		bsr.w	MoveSonicInDemo
000049BE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000049C4 4EB9 0000 0000             		jsr	(BuildSprites).l
000049CA 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000049D0 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000049D4 6A00                       		bpl.s	loc_3BC8
000049D6 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000049DC 6100 D540                  		bsr.w	FadeOut_ToBlack
000049E0                            
000049E0                            loc_3BC8:
000049E0 4A78 F614                  		tst.w	(v_demolength).w
000049E4 66CA                       		bne.s	Level_FDLoop
000049E6 4E75                       		rts	
000049E8                            ; ===========================================================================
000049E8                            
000049E8                            		include	"_inc\LZWaterFeatures.asm"
000049E8                            ; ---------------------------------------------------------------------------
000049E8                            ; Subroutine to	do special water effects in Labyrinth Zone
000049E8                            ; ---------------------------------------------------------------------------
000049E8                            
000049E8                            LZWaterFeatures:
000049E8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000049EE 6600                       		bne.s	@notlabyrinth	; if not, branch
000049F0 4A38 F744                  			tst.b   (f_nobgscroll).w
000049F4 6600                       			bne.s	@setheight
000049F6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
000049FC 6400                       		bcc.s	@setheight	; if yes, skip other effects
000049FE                            
000049FE 6100 0000                  		bsr.w	LZWindTunnels
00004A02 6100 0000                  		bsr.w	LZWaterSlides
00004A06 6100 0000                  		bsr.w	LZDynamicWater
00004A0A                            
00004A0A                            @setheight:
00004A0A 4238 F64E                  		clr.b	(f_wtr_state).w
00004A0E 7000                       		moveq	#0,d0
00004A10 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004A14 E248                       		lsr.w	#1,d0
00004A16 D078 F648                  		add.w	(v_waterpos2).w,d0
00004A1A 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004A1E 3038 F646                  		move.w	(v_waterpos1).w,d0
00004A22 9078 F704                  		sub.w	(v_screenposy).w,d0
00004A26 6400                       		bcc.s	@isbelow
00004A28 4A40                       		tst.w	d0
00004A2A 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004A2C                            
00004A2C 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004A32 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004A38                            
00004A38                            	@isbelow:
00004A38 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004A3C 6500                       		bcs.s	@isvisible	; if yes, branch
00004A3E 303C 00DF                  		move.w	#223,d0
00004A42                            
00004A42                            	@isvisible:
00004A42 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004A46                            
00004A46                            @notlabyrinth:
00004A46 4E75                       		rts	
00004A48                            ; ===========================================================================
00004A48                            ; ---------------------------------------------------------------------------
00004A48                            ; Initial water heights
00004A48                            ; ---------------------------------------------------------------------------
00004A48 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004A4A 0328                       		dc.w $328	; Labyrinth 2
00004A4C 0900                       		dc.w $900	; Labyrinth 3
00004A4E 0228                       		dc.w $228	; Scrap Brain 3
00004A50                            		even
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            ; Labyrinth dynamic water routines
00004A50                            ; ---------------------------------------------------------------------------
00004A50                            
00004A50                            LZDynamicWater:
00004A50 7000                       		moveq	#0,d0
00004A52 1038 FE11                  		move.b	(v_act).w,d0
00004A56 D040                       		add.w	d0,d0
00004A58 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004A5C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004A60 7200                       		moveq	#0,d1
00004A62 1238 F64C                  		move.b	(f_water).w,d1
00004A66 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004A6A 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004A6E 6700                       		beq.s	@exit		; if water level is correct, branch
00004A70 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004A72 4441                       		neg.w	d1		; set water to move up instead
00004A74                            
00004A74                            	@movewater:
00004A74 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004A78                            
00004A78                            	@exit:
00004A78 4E75                       		rts	
00004A7A                            ; ===========================================================================
00004A7A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004A7C 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004A7E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004A80 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004A82                            ; ===========================================================================
00004A82                            
00004A82                            DynWater_LZ1:
00004A82 4E75                       		rts	
00004A84                            ; ===========================================================================
00004A84                            
00004A84                            DynWater_LZ2:
00004A84 3038 F700                  		move.w	(v_screenposx).w,d0
00004A88 323C 0328                  		move.w	#$328,d1
00004A8C 0C40 0500                  		cmpi.w	#$500,d0
00004A90 6500                       		bcs.s	@setwater
00004A92 323C 03C8                  		move.w	#$3C8,d1
00004A96 0C40 0B00                  		cmpi.w	#$B00,d0
00004A9A 6500                       		bcs.s	@setwater
00004A9C 323C 0428                  		move.w	#$428,d1
00004AA0                            
00004AA0                            	@setwater:
00004AA0 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004AA4 4E75                       		rts	
00004AA6                            ; ===========================================================================
00004AA6                            
00004AA6                            DynWater_LZ3:
00004AA6 3038 F700                  		move.w	(v_screenposx).w,d0
00004AAA 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004AAE 6600                       		bne.s	@routine2
00004AB0                            
00004AB0 323C 0900                  		move.w	#$900,d1
00004AB4 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004AB8 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004ABA 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004AC0 6500                       		bcs.s	@setwaterlz3
00004AC2 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004AC8 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004ACA                            
00004ACA 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004ACE 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004AD4 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004AE2                            
00004AE2                            	@setwaterlz3:
00004AE2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004AE6 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004AEA 4E75                       		rts	
00004AEC                            ; ===========================================================================
00004AEC                            
00004AEC                            @routine2:
00004AEC 5302                       		subq.b	#1,d2
00004AEE 6600                       		bne.s	@routine3
00004AF0 323C 04C8                  		move.w	#$4C8,d1
00004AF4 0C40 0770                  		cmpi.w	#$770,d0
00004AF8 6500                       		bcs.s	@setwater2
00004AFA 323C 0308                  		move.w	#$308,d1
00004AFE 0C40 1400                  		cmpi.w	#$1400,d0
00004B02 6500                       		bcs.s	@setwater2
00004B04 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004B0A 6700                       		beq.s	@sonicislow
00004B0C 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004B12 6400                       		bcc.s	@sonicislow	; if yes, branch
00004B14 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004B1A 6400                       		bcc.s	@setwater2
00004B1C                            
00004B1C                            @sonicislow:
00004B1C 323C 0508                  		move.w	#$508,d1
00004B20 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004B24 0C40 1770                  		cmpi.w	#$1770,d0
00004B28 6500                       		bcs.s	@setwater2
00004B2A 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004B30                            
00004B30                            	@setwater2:
00004B30 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B34 4E75                       		rts	
00004B36                            ; ===========================================================================
00004B36                            
00004B36                            @routine3:
00004B36 5302                       		subq.b	#1,d2
00004B38 6600                       		bne.s	@routine4
00004B3A 323C 0508                  		move.w	#$508,d1
00004B3E 0C40 1860                  		cmpi.w	#$1860,d0
00004B42 6500                       		bcs.s	@setwater3
00004B44 323C 0188                  		move.w	#$188,d1
00004B48 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B4C 6400                       		bcc.s	@loc_3DC6
00004B4E B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004B52 6600                       		bne.s	@setwater3
00004B54                            
00004B54                            	@loc_3DC6:
00004B54 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004B5A                            
00004B5A                            	@setwater3:
00004B5A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B5E 4E75                       		rts	
00004B60                            ; ===========================================================================
00004B60                            
00004B60                            @routine4:
00004B60 5302                       		subq.b	#1,d2
00004B62 6600                       		bne.s	@routine5
00004B64 323C 0188                  		move.w	#$188,d1
00004B68 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B6C 6500                       		bcs.s	@setwater4
00004B6E 323C 0900                  		move.w	#$900,d1
00004B72 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004B76 6500                       		bcs.s	@setwater4
00004B78 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004B7E 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004B84 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004B8A 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004B90 4E75                       		rts	
00004B92                            ; ===========================================================================
00004B92                            
00004B92                            @setwater4:
00004B92 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004B96 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004B9A 4E75                       		rts	
00004B9C                            ; ===========================================================================
00004B9C                            
00004B9C                            @routine5:
00004B9C 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004BA0 6500                       		bcs.s	@dontset	; if not, branch
00004BA2 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004BA8                            
00004BA8                            	@dontset:
00004BA8 4E75                       		rts	
00004BAA                            ; ===========================================================================
00004BAA                            
00004BAA                            DynWater_SBZ3:
00004BAA 323C 0228                  		move.w	#$228,d1
00004BAE 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004BB4 6500                       		bcs.s	@setwater
00004BB6 323C 04C8                  		move.w	#$4C8,d1
00004BBA                            
00004BBA                            	@setwater:
00004BBA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004BBE 4E75                       		rts
00004BC0                            
00004BC0                            ; ---------------------------------------------------------------------------
00004BC0                            ; Labyrinth Zone "wind tunnels"	subroutine
00004BC0                            ; ---------------------------------------------------------------------------
00004BC0                            
00004BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BC0                            
00004BC0                            
00004BC0                            LZWindTunnels:
00004BC0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004BC4 6600 0000                  		bne.w	@quit	; if yes, branch
00004BC8 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004BCE 7000                       		moveq	#0,d0
00004BD0 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004BD4 E748                       		lsl.w	#3,d0		; multiply by 8
00004BD6 D4C0                       		adda.w	d0,a2		; add to address for data
00004BD8 7200                       		moveq	#0,d1
00004BDA 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004BDE 6600                       		bne.s	@notact1	; if not, branch
00004BE0 7201                       		moveq	#1,d1
00004BE2 514A                       		subq.w	#8,a2		; use different data for act 1
00004BE4                            
00004BE4                            	@notact1:
00004BE4 43F8 D000                  		lea	(v_player).w,a1
00004BE8                            
00004BE8                            @chksonic:
00004BE8 3029 0008                  		move.w	obX(a1),d0
00004BEC B052                       		cmp.w	(a2),d0
00004BEE 6500 0000                  		bcs.w	@chknext
00004BF2 B06A 0004                  		cmp.w	4(a2),d0
00004BF6 6400 0000                  		bcc.w	@chknext
00004BFA 3429 000C                  		move.w	obY(a1),d2
00004BFE B46A 0002                  		cmp.w	2(a2),d2
00004C02 6500                       		bcs.s	@chknext
00004C04 B46A 0006                  		cmp.w	6(a2),d2
00004C08 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004C0A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004C0E 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004C12 6600                       		bne.s	@skipsound	; if not, branch
00004C1E                            
00004C1E                            	@skipsound:
00004C1E 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004C22 6600 0000                  		bne.w	@quit	; if yes, branch
00004C26 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004C2C 6400                       		bcc.s	@clrquit	; if yes, branch
00004C2E 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004C34 0440 0080                  		subi.w	#$80,d0
00004C38 B052                       		cmp.w	(a2),d0
00004C3A 6400                       		bcc.s	@movesonic
00004C3C 7002                       		moveq	#2,d0
00004C3E 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004C44 6600                       		bne.s	@notact2	; if not, branch
00004C46 4440                       		neg.w	d0
00004C48                            
00004C48                            	@notact2:
00004C48 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004C4C                            
00004C4C                            @movesonic:
00004C4C 5869 0008                  		addq.w	#4,obX(a1)
00004C50 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004C56 337C 0000 0012             		move.w	#0,obVelY(a1)
00004C5C 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004C62 08E9 0001 0022             		bset	#1,obStatus(a1)
00004C68 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004C6E 6700                       		beq.s	@down		; if not, branch
00004C70 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004C74                            
00004C74                            	@down:
00004C74 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004C7A 6700                       		beq.s	@end		; if not, branch
00004C7C 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004C80                            
00004C80                            	@end:
00004C80 4E75                       		rts	
00004C82                            ; ===========================================================================
00004C82                            
00004C82                            @chknext:
00004C82 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004C84 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004C88 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004C8C 6700                       		beq.s	@quit		; if yes, branch
00004C8E 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004C94                            
00004C94                            @clrquit:
00004C94 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004C98                            
00004C98                            @quit:
00004C98 4E75                       		rts	
00004C9A                            ; End of function LZWindTunnels
00004C9A                            
00004C9A                            ; ===========================================================================
00004C9A                            
00004C9A                            		;    left, top,  right, bottom boundaries
00004C9A 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004CA2 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004CAA 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004CB2 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004CBA 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004CC2                            		even
00004CC2                            
00004CC2                            ; ---------------------------------------------------------------------------
00004CC2                            ; Labyrinth Zone water slide subroutine
00004CC2                            ; ---------------------------------------------------------------------------
00004CC2                            
00004CC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CC2                            
00004CC2                            
00004CC2                            LZWaterSlides:
00004CC2 43F8 D000                  		lea	(v_player).w,a1
00004CC6 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004CCC 6600                       		bne.s	loc_3F6A	; if not, branch
00004CCE 3029 000C                  		move.w	obY(a1),d0
00004CD2 E248                       		lsr.w	#1,d0
00004CD4 0240 0380                  		andi.w	#$380,d0
00004CD8 1229 0008                  		move.b	obX(a1),d1
00004CDC 0241 007F                  		andi.w	#$7F,d1
00004CE0 D041                       		add.w	d1,d0
00004CE2 45F8 A400                  		lea	(v_lvllayout).w,a2
00004CE6 1032 0000                  		move.b	(a2,d0.w),d0
00004CEA 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004CEE 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004CF0                            
00004CF0                            loc_3F62:
00004CF0 B022                       		cmp.b	-(a2),d0
00004CF2 57C9 FFFC                  		dbeq	d1,loc_3F62
00004CF6 6700                       		beq.s	LZSlide_Move
00004CF8                            
00004CF8                            loc_3F6A:
00004CF8 4A38 F7CA                  		tst.b	(f_jumponly).w
00004CFC 6700                       		beq.s	locret_3F7A
00004CFE 337C 0005 003E             		move.w	#5,$3E(a1)
00004D04 4238 F7CA                  		clr.b	(f_jumponly).w
00004D08                            
00004D08                            locret_3F7A:
00004D08 4E75                       		rts	
00004D0A                            ; ===========================================================================
00004D0A                            
00004D0A                            LZSlide_Move:
00004D0A 0C41 0003                  		cmpi.w	#3,d1
00004D0E 6400                       		bcc.s	loc_3F84
00004D10 4E71                       		nop	
00004D12                            
00004D12                            loc_3F84:
00004D12 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004D18 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004D1C 1340 0020                  		move.b	d0,obInertia(a1)
00004D20 6A00                       		bpl.s	loc_3F9A
00004D22 08E9 0000 0022             		bset	#0,obStatus(a1)
00004D28                            
00004D28                            loc_3F9A:
00004D28 4229 0021                  		clr.b	obInertia+1(a1)
00004D2C 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004D32 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004D38 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004D3C 0200 001F                  		andi.b	#$1F,d0
00004D40 6600                       		bne.s	locret_3FBE
00004D4C                            
00004D4C                            locret_3FBE:
00004D4C 4E75                       		rts	
00004D4E                            ; End of function LZWaterSlides
00004D4E                            
00004D4E                            ; ===========================================================================
00004D4E                            ; byte_3FC0:
00004D4E                            Slide_Speeds:
00004D4E 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004D56 00                         		even
00004D56                            
00004D56                            Slide_Chunks:
00004D56 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004D57                            ; byte_3FCF
00004D57                            Slide_Chunks_End
00004D58 00                         		even
00004D58 00                         		even
00004D58                            		include	"_inc\MoveSonicInDemo.asm"
00004D58                            ; ---------------------------------------------------------------------------
00004D58                            ; Subroutine to	move Sonic in demo mode
00004D58                            ; ---------------------------------------------------------------------------
00004D58                            
00004D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D58                            
00004D58                            
00004D58                            MoveSonicInDemo:
00004D58 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004D5C 6600                       		bne.s	MDemo_On	; if yes, branch
00004D5E 4E75                       		rts	
00004D60                            ; ===========================================================================
00004D60                            
00004D60                            ; This is an unused subroutine for recording a demo
00004D60                            
00004D60                            DemoRecorder:
00004D60 43F9 0008 0000             		lea	($80000).l,a1
00004D66 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004D6A D2C0                       		adda.w	d0,a1
00004D6C 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004D70 B011                       		cmp.b	(a1),d0
00004D72 6600                       		bne.s	@next
00004D74 5229 0001                  		addq.b	#1,1(a1)
00004D78 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004D7E 6700                       		beq.s	@next
00004D80 4E75                       		rts	
00004D82                            
00004D82                            	@next:
00004D82 1340 0002                  		move.b	d0,2(a1)
00004D86 137C 0000 0003             		move.b	#0,3(a1)
00004D8C 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004D90 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00004D96 4E75                       		rts	
00004D98                            ; ===========================================================================
00004D98                            
00004D98                            MDemo_On:
00004D98 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00004D9C 6A00                       		bpl.s	@dontquit	; if not, branch
00004D9E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004DA2 6B00                       		bmi.s	@dontquit	; if yes, branch
00004DA4 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004DAA                            
00004DAA                            	@dontquit:
00004DAA 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00004DB0 7000                       		moveq	#0,d0
00004DB2 1038 FE10                  		move.b	(v_zone).w,d0
00004DB6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00004DBC 6600                       		bne.s	@notspecial	; if not, branch
00004DBE 7006                       		moveq	#6,d0		; use demo #6
00004DC0                            
00004DC0                            	@notspecial:
00004DC0 E548                       		lsl.w	#2,d0
00004DC2 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
00004DC6 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004DCA 6A00                       		bpl.s	@notcredits	; if not, branch
00004DCC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00004DD2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004DD6 5340                       		subq.w	#1,d0
00004DD8 E548                       		lsl.w	#2,d0
00004DDA 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00004DDE                            
00004DDE                            	@notcredits:
00004DDE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004DE2 D2C0                       		adda.w	d0,a1
00004DE4 1011                       		move.b	(a1),d0
00004DE6 41F8 F604                  		lea	(v_jpadhold1).w,a0
00004DEA 1200                       		move.b	d0,d1
00004DEC 7400                       			moveq	#0,d2
00004DEE B500                       		eor.b	d2,d0
00004DF0 10C1                       		move.b	d1,(a0)+
00004DF2 C001                       		and.b	d1,d0
00004DF4 10C0                       		move.b	d0,(a0)+
00004DF6 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00004DFA 6400                       		bcc.s	@end
00004DFC 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00004E02 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004E06                            
00004E06                            	@end:
00004E06 4E75                       		rts	
00004E08                            ; End of function MoveSonicInDemo
00004E08                            
00004E08                            ; ===========================================================================
00004E08                            ; ---------------------------------------------------------------------------
00004E08                            ; Demo sequence	pointers
00004E08                            ; ---------------------------------------------------------------------------
00004E08 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00004E0C 0000 0000                  		dc.l Demo_GHZ
00004E10 0000 0000                  		dc.l Demo_MZ
00004E14 0000 0000                  		dc.l Demo_MZ
00004E18 0000 0000                  		dc.l Demo_SYZ
00004E1C 0000 0000                  		dc.l Demo_SYZ
00004E20 0000 0000                  		dc.l Demo_SS
00004E24 0000 0000                  		dc.l Demo_SS
00004E28                            
00004E28 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00004E2C 0000 0000                  		dc.l Demo_EndMZ
00004E30 0000 0000                  		dc.l Demo_EndSYZ
00004E34 0000 0000                  		dc.l Demo_EndLZ
00004E38 0000 0000                  		dc.l Demo_EndSLZ
00004E3C 0000 0000                  		dc.l Demo_EndSBZ1
00004E40 0000 0000                  		dc.l Demo_EndSBZ2
00004E44 0000 0000                  		dc.l Demo_EndGHZ2
00004E48                            
00004E48 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004E58 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004E68 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004E78                            		even
00004E78                            		even
00004E78                            
00004E78                            ; ---------------------------------------------------------------------------
00004E78                            ; Collision index pointer loading subroutine
00004E78                            ; ---------------------------------------------------------------------------
00004E78                            
00004E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E78                            
00004E78                            
00004E78                            ColIndexLoad:
00004E78 7000                       		moveq	#0,d0
00004E7A 1038 FE10                  		move.b	(v_zone).w,d0
00004E7E E548                       		lsl.w	#2,d0
00004E80 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
00004E86 4E75                       		rts	
00004E88                            ; End of function ColIndexLoad
00004E88                            
00004E88                            ; ===========================================================================
00004E88                            ; ---------------------------------------------------------------------------
00004E88                            ; Collision index pointers
00004E88                            ; ---------------------------------------------------------------------------
00004E88 0000 0000                  ColPointers:	dc.l Col_GHZ
00004E8C 0000 0000                  		dc.l Col_LZ
00004E90 0000 0000                  		dc.l Col_MZ
00004E94 0000 0000                  		dc.l Col_SLZ
00004E98 0000 0000                  		dc.l Col_SYZ
00004E9C 0000 0000                  		dc.l Col_SBZ
00004EA0                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00004EA0                            
00004EA0                            		include	"_inc\Oscillatory Routines.asm"
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            ; Oscillating number subroutines
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            
00004EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EA0                            
00004EA0                            ; Initialise the values
00004EA0                            
00004EA0                            OscillateNumInit:
00004EA0 43F8 FE5E                  		lea	(v_oscillate).w,a1
00004EA4 45F9 0000 0000             		lea	(@baselines).l,a2
00004EAA 7220                       		moveq	#$20,d1
00004EAC                            
00004EAC                            	@loop:
00004EAC 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00004EAE 51C9 FFFC                  		dbf	d1,@loop
00004EB2 4E75                       		rts	
00004EB4                            
00004EB4                            
00004EB4                            ; ===========================================================================
00004EB4 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
00004EB6 0080 0000                  		dc.w $80, 0
00004EBA 0080 0000                  		dc.w $80, 0
00004EBE 0080 0000                  		dc.w $80, 0
00004EC2 0080 0000                  		dc.w $80, 0
00004EC6 0080 0000                  		dc.w $80, 0
00004ECA 0080 0000                  		dc.w $80, 0
00004ECE 0080 0000                  		dc.w $80, 0
00004ED2 0080 0000                  		dc.w $80, 0
00004ED6 0080 0000                  		dc.w $80, 0
00004EDA 50F0 011E                  		dc.w $50F0, $11E
00004EDE 2080 00B4                  		dc.w $2080, $B4
00004EE2 3080 010E                  		dc.w $3080, $10E
00004EE6 5080 01C2                  		dc.w $5080, $1C2
00004EEA 7080 0276                  		dc.w $7080, $276
00004EEE 0080 0000                  		dc.w $80, 0
00004EF2 0080 0000                  		dc.w $80, 0
00004EF6                            		even
00004EF6                            
00004EF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EF6                            
00004EF6                            ; Oscillate values
00004EF6                            
00004EF6                            OscillateNumDo:
00004EF6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004EFC 6400                       		bcc.s	@end		; if yes, branch
00004EFE 43F8 FE5E                  		lea	(v_oscillate).w,a1
00004F02 45F9 0000 0000             		lea	(@settings).l,a2
00004F08 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00004F0A 720F                       		moveq	#$F,d1
00004F0C                            
00004F0C                            @loop:
00004F0C 341A                       		move.w	(a2)+,d2	; get frequency
00004F0E 381A                       		move.w	(a2)+,d4	; get amplitude
00004F10 0303                       		btst	d1,d3		; check oscillation direction
00004F12 6600                       		bne.s	@down		; branch if 1
00004F14                            
00004F14                            	@up:
00004F14 3029 0002                  		move.w	2(a1),d0	; get current rate
00004F18 D042                       		add.w	d2,d0		; add frequency
00004F1A 3340 0002                  		move.w	d0,2(a1)
00004F1E D151                       		add.w	d0,0(a1)	; add rate to value
00004F20 B811                       		cmp.b	0(a1),d4
00004F22 6200                       		bhi.s	@next
00004F24 03C3                       		bset	d1,d3
00004F26 6000                       		bra.s	@next
00004F28                            
00004F28                            	@down:
00004F28 3029 0002                  		move.w	2(a1),d0
00004F2C 9042                       		sub.w	d2,d0
00004F2E 3340 0002                  		move.w	d0,2(a1)
00004F32 D151                       		add.w	d0,0(a1)
00004F34 B811                       		cmp.b	0(a1),d4
00004F36 6300                       		bls.s	@next
00004F38 0383                       		bclr	d1,d3
00004F3A                            
00004F3A                            	@next:
00004F3A 5849                       		addq.w	#4,a1
00004F3C 51C9 FFCE                  		dbf	d1,@loop
00004F40 31C3 FE5E                  		move.w	d3,(v_oscillate).w
00004F44                            
00004F44                            @end:
00004F44 4E75                       		rts	
00004F46                            ; End of function OscillateNumDo
00004F46                            
00004F46                            ; ===========================================================================
00004F46 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
00004F4A 0002 0018                  		dc.w 2,	$18
00004F4E 0002 0020                  		dc.w 2,	$20
00004F52 0002 0030                  		dc.w 2,	$30
00004F56 0004 0020                  		dc.w 4,	$20
00004F5A 0008 0008                  		dc.w 8,	8
00004F5E 0008 0040                  		dc.w 8,	$40
00004F62 0004 0040                  		dc.w 4,	$40
00004F66 0002 0050                  		dc.w 2,	$50
00004F6A 0002 0050                  		dc.w 2,	$50
00004F6E 0002 0020                  		dc.w 2,	$20
00004F72 0003 0030                  		dc.w 3,	$30
00004F76 0005 0050                  		dc.w 5,	$50
00004F7A 0007 0070                  		dc.w 7,	$70
00004F7E 0002 0010                  		dc.w 2,	$10
00004F82 0002 0010                  		dc.w 2,	$10
00004F86                            		even
00004F86                            		even
00004F86                            
00004F86                            ; ---------------------------------------------------------------------------
00004F86                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
00004F86                            ; ---------------------------------------------------------------------------
00004F86                            
00004F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F86                            
00004F86                            
00004F86                            SynchroAnimate:
00004F86                            
00004F86                            ; Used for GHZ spiked log
00004F86                            Sync1:
00004F86 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00004F8A 6A00                       		bpl.s	Sync2		; if not, branch
00004F8C 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00004F92 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
00004F96 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00004F9C                            
00004F9C                            ; Used for rings and giant rings
00004F9C                            Sync2:
00004F9C 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00004FA0 6A00                       		bpl.s	Sync3
00004FA2 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00004FA8 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00004FAC 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00004FB2                            
00004FB2                            ; Used for nothing
00004FB2                            Sync3:
00004FB2 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
00004FB6 6A00                       		bpl.s	Sync4
00004FB8 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00004FBE 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00004FC2 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00004FC8 6500                       		blo.s	Sync4
00004FCA 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00004FD0                            
00004FD0                            ; Used for bouncing rings
00004FD0                            Sync4:
00004FD0 4A38 FEC6                  		tst.b	(v_ani3_time).w
00004FD4 6700                       		beq.s	SyncEnd
00004FD6 7000                       		moveq	#0,d0
00004FD8 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00004FDC D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00004FE0 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00004FE4 EF58                       		rol.w	#7,d0
00004FE6 0240 0003                  		andi.w	#3,d0
00004FEA 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00004FEE 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00004FF2                            
00004FF2                            SyncEnd:
00004FF2 4E75                       		rts	
00004FF4                            ; End of function SynchroAnimate
00004FF4                            
00004FF4                            ; ---------------------------------------------------------------------------
00004FF4                            ; End-of-act signpost pattern loading subroutine
00004FF4                            ; ---------------------------------------------------------------------------
00004FF4                            
00004FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FF4                            
00004FF4                            
00004FF4                            SignpostArtLoad:
00004FF4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004FF8 6600 0000                  		bne.w	@exit		; if yes, branch
00004FFC 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005002 6700                       		beq.s	@exit		; if yes, branch
00005004                            
00005004 3038 F700                  		move.w	(v_screenposx).w,d0
00005008 3238 F72A                  		move.w	(v_limitright2).w,d1
0000500C 0441 0100                  		subi.w	#$100,d1
00005010 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005012 6D00                       		blt.s	@exit		; if not, branch
00005014 4A38 FE1E                  		tst.b	(f_timecount).w
00005018 6700                       		beq.s	@exit
0000501A B278 F728                  		cmp.w	(v_limitleft2).w,d1
0000501E 6700                       		beq.s	@exit
00005020 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
00005024 7000                       		moveq	#plcid_Signpost,d0
00005026 6000 C470                  		bra.w	NewPLC		; load signpost	patterns
0000502A                            
0000502A                            	@exit:
0000502A 4E75                       		rts	
0000502C                            ; End of function SignpostArtLoad
0000502C                            
0000502C                            ; ===========================================================================
0000502C                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
000050AC                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
000051DC                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
0000525C                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
0000535C                            ; ===========================================================================
0000535C                            
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            ; Special Stage
0000535C                            ; ---------------------------------------------------------------------------
0000535C                            
0000535C                            GM_Special:
00005364 6100 CCC2                  		bsr.w	PaletteWhiteOut
00005368 46FC 2700                  		disable_ints
0000536C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005372 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005376 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000537A 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005380 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
00005384 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005388 0200 00BF                  		andi.b	#$BF,d0
0000538C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005392 6100 BB68                  		bsr.w	ClearScreen
00005396 46FC 2300                  		enable_ints
0000539A 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
000053BC                            
000053BC                            	SS_WaitForDMA:
000053BC 3215                       		move.w	(a5),d1		; read control port ($C00004)
000053BE 0801 0001                  		btst	#1,d1		; is DMA running?
000053C2 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
000053C4 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
000053C8 6100 0000                  		bsr.w	SS_BGLoad
000053CC 7000                       		moveq	#plcid_SpecialStage,d0
000053CE 6100 C202                  		bsr.w	QuickPLC	; load special stage patterns
000053D2                            
000053D2 43F8 D000                  		lea	(v_objspace).w,a1
000053D6 7000                       		moveq	#0,d0
000053D8 323C 07FF                  		move.w	#$7FF,d1
000053DC                            	SS_ClrObjRam:
000053DC 22C0                       		move.l	d0,(a1)+
000053DE 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000053E2                            
000053E2 43F8 F700                  		lea	(v_screenposx).w,a1
000053E6 7000                       		moveq	#0,d0
000053E8 323C 003F                  		move.w	#$3F,d1
000053EC                            	SS_ClrRam1:
000053EC 22C0                       		move.l	d0,(a1)+
000053EE 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
000053F2                            
000053F2 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000053F6 7000                       		moveq	#0,d0
000053F8 323C 0027                  		move.w	#$27,d1
000053FC                            	SS_ClrRam2:
000053FC 22C0                       		move.l	d0,(a1)+
000053FE 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005402                            
00005402 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00005406 7000                       		moveq	#0,d0
00005408 323C 007F                  		move.w	#$7F,d1
0000540C                            	SS_ClrNemRam:
0000540C 22C0                       		move.l	d0,(a1)+
0000540E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005412                            
00005412 4238 F64E                  		clr.b	(f_wtr_state).w
00005416 4278 FE02                  		clr.w	(f_restart).w
0000541A 700A                       		moveq	#palid_Special,d0
0000541C 6100 CD8A                  		bsr.w	PalLoad1	; load special stage palette
00005420 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
00005426 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
0000542E 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
00005436 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
0000543C 6100 0000                  		bsr.w	PalCycle_SS
00005440 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
00005444 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
00005452 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00005458 43F9 0000 4E08             		lea	(DemoDataPtr).l,a1
0000545E 7006                       		moveq	#6,d0
00005460 E548                       		lsl.w	#2,d0
00005462 2271 0000                  		movea.l	(a1,d0.w),a1
00005466 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
0000546C 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005470 4278 FE20                  		clr.w	(v_rings).w
00005474 4238 FE1B                  		clr.b	(v_lifecount).w
00005478 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
0000547E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005484 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005488 6700                       		beq.s	SS_NoDebug	; if not, branch
0000548A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005490 6700                       		beq.s	SS_NoDebug	; if not, branch
00005492 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005498                            
00005498                            	SS_NoDebug:
00005498 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000549C 0000 0040                  		ori.b	#$40,d0
000054A0 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000054A6 6100 CAD4                  		bsr.w	PaletteWhiteIn
000054AA                            
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            ; Main Special Stage loop
000054AA                            ; ---------------------------------------------------------------------------
000054AA                            
000054AA                            SS_MainLoop:
000054AA 6100 BB2C                  		bsr.w	PauseGame
000054AE 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
000054B4 6100 E2C6                  		bsr.w	WaitForVBla
000054B8 6100 F89E                  		bsr.w	MoveSonicInDemo
000054BC 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000054C2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000054C8 4EB9 0000 0000             		jsr	(BuildSprites).l
000054CE 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000054D4 6100 0000                  		bsr.w	SS_BGAnimate
000054D8 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000054DC 6700                       		beq.s	SS_ChkEnd	; if not, branch
000054DE 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
000054E2 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000054E6                            
000054E6                            	SS_ChkEnd:
000054E6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000054EC 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000054F0                            
000054F0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000054F4 6600 0000                  		bne.w	SS_ToLevel
000054F8 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000054FE 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005504 6500                       		blo.s	SS_Finish	; if not, branch
00005506 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
0000550A                            
0000550A                            SS_Finish:
0000550A 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005510 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00005516 4278 F794                  		clr.w	(v_palchgspeed).w
0000551A                            
0000551A                            	SS_FinLoop:
0000551A 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005520 6100 E25A                  		bsr.w	WaitForVBla
00005524 6100 F832                  		bsr.w	MoveSonicInDemo
00005528 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000552E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005534 4EB9 0000 0000             		jsr	(BuildSprites).l
0000553A 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005540 6100 0000                  		bsr.w	SS_BGAnimate
00005544 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00005548 6A00                       		bpl.s	loc_47D4
0000554A 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00005550 6100 CAF6                  		bsr.w	WhiteOut_ToWhite
00005554                            
00005554                            loc_47D4:
00005554 4A78 F614                  		tst.w	(v_demolength).w
00005558 66C0                       		bne.s	SS_FinLoop
0000555A                            
0000555A 46FC 2700                  		disable_ints
0000555E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005564 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005568 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000556C 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005570 6100 B98A                  		bsr.w	ClearScreen
0000557E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005584 6100 BAF4                  		bsr.w	NemDec
00005588 4EB9 0000 0000             		jsr	(Hud_Base).l
0000558E 31FC C800 C8FC             		ResetDMAQueue	
00005594 46FC 2300                  		enable_ints
00005598 7011                       		moveq	#palid_SSResult,d0
0000559A 6100 CC48                  		bsr.w	PalLoad2	; load results screen palette
0000559E 7000                       		moveq	#plcid_Main,d0
000055A0 6100 BEF6                  		bsr.w	NewPLC
000055A4 7000                       		moveq	#plcid_SSResult,d0
000055A6 6100 BEBE                  		bsr.w	AddPLC		; load results screen patterns
000055AA 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
000055B0 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
000055B6 3038 FE20                  		move.w	(v_rings).w,d0
000055BA C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000055BE 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
000055CC                            
000055CC 43F8 D000                  		lea	(v_objspace).w,a1
000055D0 7000                       		moveq	#0,d0
000055D2 323C 07FF                  		move.w	#$7FF,d1
000055D6                            	SS_EndClrObjRam:
000055D6 22C0                       		move.l	d0,(a1)+
000055D8 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000055DC                            
000055DC 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
000055E2                            
000055E2                            SS_NormalExit:
000055E2 6100 B9F4                  		bsr.w	PauseGame
000055E6 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000055EC 6100 E18E                  		bsr.w	WaitForVBla
000055F0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000055F6 4EB9 0000 0000             		jsr	(BuildSprites).l
000055FC 6100 BED4                  		bsr.w	RunPLC
00005600 4A78 FE02                  		tst.w	(f_restart).w
00005604 67DC                       		beq.s	SS_NormalExit
00005606 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000560A 66D6                       		bne.s	SS_NormalExit
00005614 6100 CA12                  		bsr.w	PaletteWhiteOut
00005618 4E75                       		rts	
0000561A                            ; ===========================================================================
0000561A                            
0000561A                            SS_ToSegaScreen:
0000561A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005620 4E75                       		rts
00005622                            
00005622 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005628 67F0                       		beq.s	SS_ToSegaScreen
0000562A 4E75                       		rts
0000562C                            
0000562C                            ; ---------------------------------------------------------------------------
0000562C                            ; Special stage	background loading subroutine
0000562C                            ; ---------------------------------------------------------------------------
0000562C                            
0000562C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000562C                            
0000562C                            
0000562C                            SS_BGLoad:
0000562C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005632 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005638 303C 4051                  		move.w	#$4051,d0
0000563C 6100 BFC6                  		bsr.w	EniDec
00005640 263C 5000 0001             		move.l	#$50000001,d3
00005646 45F9 00FF 0080             		lea	($FF0080).l,a2
0000564C 7E06                       		moveq	#6,d7
0000564E                            
0000564E                            loc_48BE:
0000564E 2003                       		move.l	d3,d0
00005650 7C03                       		moveq	#3,d6
00005652 7800                       		moveq	#0,d4
00005654 0C47 0003                  		cmpi.w	#3,d7
00005658 6400                       		bhs.s	loc_48CC
0000565A 7801                       		moveq	#1,d4
0000565C                            
0000565C                            loc_48CC:
0000565C 7A07                       		moveq	#7,d5
0000565E                            
0000565E                            loc_48CE:
0000565E 224A                       		movea.l	a2,a1
00005660 0A04 0001                  		eori.b	#1,d4
00005664 6600                       		bne.s	loc_48E2
00005666 0C47 0006                  		cmpi.w	#6,d7
0000566A 6600                       		bne.s	loc_48F2
0000566C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005672                            
00005672                            loc_48E2:
00005672 48E7 F800                  		movem.l	d0-d4,-(sp)
00005676 7207                       		moveq	#7,d1
00005678 7407                       		moveq	#7,d2
0000567A 6100 B9D4                  		bsr.w	TilemapToVRAM
0000567E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005682                            
00005682                            loc_48F2:
00005682 0680 0010 0000             		addi.l	#$100000,d0
00005688 51CD FFD4                  		dbf	d5,loc_48CE
0000568C 0680 0380 0000             		addi.l	#$3800000,d0
00005692 0A04 0001                  		eori.b	#1,d4
00005696 51CE FFC4                  		dbf	d6,loc_48CC
0000569A 0683 1000 0000             		addi.l	#$10000000,d3
000056A0 6A00                       		bpl.s	loc_491C
000056A2 4843                       		swap	d3
000056A4 0683 0000 C000             		addi.l	#$C000,d3
000056AA 4843                       		swap	d3
000056AC                            
000056AC                            loc_491C:
000056AC D4FC 0080                  		adda.w	#$80,a2
000056B0 51CF FF9C                  		dbf	d7,loc_48BE
000056B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000056BA 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000056C0 303C 4000                  		move.w	#$4000,d0
000056C4 6100 BF3E                  		bsr.w	EniDec
000056C8 43F9 00FF 0000             		lea	($FF0000).l,a1
000056CE 203C 4000 0003             		move.l	#$40000003,d0
000056D4 723F                       		moveq	#$3F,d1
000056D6 741F                       		moveq	#$1F,d2
000056D8 6100 B976                  		bsr.w	TilemapToVRAM
000056DC 43F9 00FF 0000             		lea	($FF0000).l,a1
000056E2 203C 5000 0003             		move.l	#$50000003,d0
000056E8 723F                       		moveq	#$3F,d1
000056EA 743F                       		moveq	#$3F,d2
000056EC 6100 B962                  		bsr.w	TilemapToVRAM
000056F0 4E75                       		rts	
000056F2                            ; End of function SS_BGLoad
000056F2                            
000056F2                            ; ---------------------------------------------------------------------------
000056F2                            ; Palette cycling routine - special stage
000056F2                            ; ---------------------------------------------------------------------------
000056F2                            
000056F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056F2                            
000056F2                            
000056F2                            PalCycle_SS:
000056F2 4A78 F63A                  		tst.w	(f_pause).w
000056F6 6600                       		bne.s	locret_49E6
000056F8 5378 F79C                  		subq.w	#1,(v_palss_time).w
000056FC 6A00                       		bpl.s	locret_49E6
000056FE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005704 3038 F79A                  		move.w	(v_palss_num).w,d0
00005708 5278 F79A                  		addq.w	#1,(v_palss_num).w
0000570C 0240 001F                  		andi.w	#$1F,d0
00005710 E548                       		lsl.w	#2,d0
00005712 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005718 D0C0                       		adda.w	d0,a0
0000571A 1018                       		move.b	(a0)+,d0
0000571C 6A00                       		bpl.s	loc_4992
0000571E 303C 01FF                  		move.w	#$1FF,d0
00005722                            
00005722                            loc_4992:
00005722 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005726 7000                       		moveq	#0,d0
00005728 1018                       		move.b	(a0)+,d0
0000572A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000572E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005734 43F1 0000                  		lea	(a1,d0.w),a1
00005738 303C 8200                  		move.w	#-$7E00,d0
0000573C 1019                       		move.b	(a1)+,d0
0000573E 3C80                       		move.w	d0,(a6)
00005740 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005744 303C 8400                  		move.w	#-$7C00,d0
00005748 1018                       		move.b	(a0)+,d0
0000574A 3C80                       		move.w	d0,(a6)
0000574C 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005756 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
0000575E 7000                       		moveq	#0,d0
00005760 1018                       		move.b	(a0)+,d0
00005762 6B00                       		bmi.s	loc_49E8
00005764 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000576A D2C0                       		adda.w	d0,a1
0000576C 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005770 24D9                       		move.l	(a1)+,(a2)+
00005772 24D9                       		move.l	(a1)+,(a2)+
00005774 24D9                       		move.l	(a1)+,(a2)+
00005776                            
00005776                            locret_49E6:
00005776 4E75                       		rts	
00005778                            ; ===========================================================================
00005778                            
00005778                            loc_49E8:
00005778 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000577C 0C40 008A                  		cmpi.w	#$8A,d0
00005780 6500                       		blo.s	loc_49F4
00005782 5241                       		addq.w	#1,d1
00005784                            
00005784                            loc_49F4:
00005784 C2FC 002A                  		mulu.w	#$2A,d1
00005788 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000578E D2C1                       		adda.w	d1,a1
00005790 0240 007F                  		andi.w	#$7F,d0
00005794 0880 0000                  		bclr	#0,d0
00005798 6700                       		beq.s	loc_4A18
0000579A 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
0000579E 24D1                       		move.l	(a1),(a2)+
000057A0 24E9 0004                  		move.l	4(a1),(a2)+
000057A4 24E9 0008                  		move.l	8(a1),(a2)+
000057A8                            
000057A8                            loc_4A18:
000057A8 D2FC 000C                  		adda.w	#$C,a1
000057AC 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
000057B0 0C40 000A                  		cmpi.w	#$A,d0
000057B4 6500                       		blo.s	loc_4A2E
000057B6 0440 000A                  		subi.w	#$A,d0
000057BA 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
000057BE                            
000057BE                            loc_4A2E:
000057BE 3200                       		move.w	d0,d1
000057C0 D040                       		add.w	d0,d0
000057C2 D041                       		add.w	d1,d0
000057C4 D2C0                       		adda.w	d0,a1
000057C6 24D9                       		move.l	(a1)+,(a2)+
000057C8 34D9                       		move.w	(a1)+,(a2)+
000057CA 4E75                       		rts	
000057CC                            ; End of function PalCycle_SS
000057CC                            
000057CC                            ; ===========================================================================
000057CC 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000057DC                            
000057DC 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000057EC 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000057FC FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000580C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000581C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000582C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000583C FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000584C                            		even
0000584C 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000585A                            		even
0000585A                            
0000585A                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
000058A2                            		even
000058A2                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005974                            		even
00005974                            
00005974                            ; ---------------------------------------------------------------------------
00005974                            ; Subroutine to	make the special stage background animated
00005974                            ; ---------------------------------------------------------------------------
00005974                            
00005974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005974                            
00005974                            
00005974                            SS_BGAnimate:
00005974 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005978 6600                       		bne.s	loc_4BF6
0000597A 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005980 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005986                            
00005986                            loc_4BF6:
00005986 0C40 0008                  		cmpi.w	#8,d0
0000598A 6400                       		bhs.s	loc_4C4E
0000598C 0C40 0006                  		cmpi.w	#6,d0
00005990 6600                       		bne.s	loc_4C10
00005992 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005996 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
0000599A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000059A0                            
000059A0                            loc_4C10:
000059A0 7000                       		moveq	#0,d0
000059A2 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000059A6 4440                       		neg.w	d0
000059A8 4840                       		swap	d0
000059AA 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000059B0 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
000059B4 7609                       		moveq	#9,d3
000059B6                            
000059B6                            loc_4C26:
000059B6 302B 0002                  		move.w	2(a3),d0
000059BA 6100 DDF2                  		bsr.w	CalcSine
000059BE 7400                       		moveq	#0,d2
000059C0 1419                       		move.b	(a1)+,d2
000059C2 C1C2                       		muls.w	d2,d0
000059C4 E080                       		asr.l	#8,d0
000059C6 36C0                       		move.w	d0,(a3)+
000059C8 1419                       		move.b	(a1)+,d2
000059CA 4882                       		ext.w	d2
000059CC D55B                       		add.w	d2,(a3)+
000059CE 51CB FFE6                  		dbf	d3,loc_4C26
000059D2 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
000059D6 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000059DC 6000                       		bra.s	loc_4C7E
000059DE                            ; ===========================================================================
000059DE                            
000059DE                            loc_4C4E:
000059DE 0C40 000C                  		cmpi.w	#$C,d0
000059E2 6600                       		bne.s	loc_4C74
000059E4 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
000059E8 47F8 AB00                  		lea	($FFFFAB00).w,a3
000059EC 243C 0001 8000             		move.l	#$18000,d2
000059F2 7206                       		moveq	#6,d1
000059F4                            
000059F4                            loc_4C64:
000059F4 2013                       		move.l	(a3),d0
000059F6 9082                       		sub.l	d2,d0
000059F8 26C0                       		move.l	d0,(a3)+
000059FA 0482 0000 2000             		subi.l	#$2000,d2
00005A00 51C9 FFF2                  		dbf	d1,loc_4C64
00005A04                            
00005A04                            loc_4C74:
00005A04 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005A08 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005A0E                            
00005A0E                            loc_4C7E:
00005A0E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005A12 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005A16 4440                       		neg.w	d0
00005A18 4840                       		swap	d0
00005A1A 7600                       		moveq	#0,d3
00005A1C 161A                       		move.b	(a2)+,d3
00005A1E 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005A22 4442                       		neg.w	d2
00005A24 0242 00FF                  		andi.w	#$FF,d2
00005A28 E54A                       		lsl.w	#2,d2
00005A2A                            
00005A2A                            loc_4C9A:
00005A2A 301B                       		move.w	(a3)+,d0
00005A2C 544B                       		addq.w	#2,a3
00005A2E 7200                       		moveq	#0,d1
00005A30 121A                       		move.b	(a2)+,d1
00005A32 5341                       		subq.w	#1,d1
00005A34                            
00005A34                            loc_4CA4:
00005A34 2380 2000                  		move.l	d0,(a1,d2.w)
00005A38 5842                       		addq.w	#4,d2
00005A3A 0242 03FC                  		andi.w	#$3FC,d2
00005A3E 51C9 FFF4                  		dbf	d1,loc_4CA4
00005A42 51CB FFE6                  		dbf	d3,loc_4C9A
00005A46 4E75                       		rts	
00005A48                            ; End of function SS_BGAnimate
00005A48                            
00005A48                            ; ===========================================================================
00005A48 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005A54                            		even
00005A54 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005A5C                            		even
00005A5C 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005A70                            		even
00005A70                            
00005A70                            ; ===========================================================================
00005A70                            
00005A70                            ; ---------------------------------------------------------------------------
00005A70                            ; Continue screen
00005A70                            ; ---------------------------------------------------------------------------
00005A70                            
00005A70                            GM_Continue:
00005A70 6100 C48C                  		bsr.w	PaletteFadeOut
00005A74 46FC 2700                  		disable_ints
00005A78 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005A7C 0200 00BF                  		andi.b	#$BF,d0
00005A80 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005A86 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005A8C 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005A90 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005A94 6100 B466                  		bsr.w	ClearScreen
00005A98 31FC C800 C8FC             		ResetDMAQueue
00005A9E 43F8 D000                  		lea	(v_objspace).w,a1
00005AA2 7000                       		moveq	#0,d0
00005AA4 323C 07FF                  		move.w	#$7FF,d1
00005AA8                            	Cont_ClrObjRam:
00005AA8 22C0                       		move.l	d0,(a1)+
00005AAA 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005AAE                            
00005AB8 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005ABE 6100 B5BA                  		bsr.w	NemDec
00005ACC 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005AD2 6100 B5A6                  		bsr.w	NemDec
00005AE0 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005AE6 6100 B592                  		bsr.w	NemDec
00005AEA 720A                       		moveq	#10,d1
00005AEC 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005AF2 7012                       		moveq	#palid_Continue,d0
00005AF4 6100 C6B2                  		bsr.w	PalLoad1	; load continue	screen palette
00005B00 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005B06 42B8 F700                  		clr.l	(v_screenposx).w
00005B0A 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005B12 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005B18 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005B1E 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005B24 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005B2A 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005B30 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005B36 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005B3C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005B42 4EB9 0000 0000             		jsr	(BuildSprites).l
00005B48 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005B4C 0000 0040                  		ori.b	#$40,d0
00005B50 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005B56 6100 C300                  		bsr.w	PaletteFadeIn
00005B5A                            
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            ; Continue screen main loop
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            
00005B5A                            Cont_MainLoop:
00005B5A 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005B60 6100 DC1A                  		bsr.w	WaitForVBla
00005B64 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005B6A 6400                       		bhs.s	loc_4DF2
00005B6C 46FC 2700                  		disable_ints
00005B70 3238 F614                  		move.w	(v_demolength).w,d1
00005B74 82FC 003C                  		divu.w	#$3C,d1
00005B78 0281 0000 000F             		andi.l	#$F,d1
00005B7E 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005B84 46FC 2300                  		enable_ints
00005B88                            
00005B88                            loc_4DF2:
00005B88 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005B8E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005B94 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005B9A 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005B9C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005BA2 64B6                       		bhs.s	Cont_MainLoop
00005BA4 4A78 F614                  		tst.w	(v_demolength).w
00005BA8 6600 FFB0                  		bne.w	Cont_MainLoop
00005BAC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005BB2 4E75                       		rts	
00005BB4                            ; ===========================================================================
00005BB4                            
00005BB4                            Cont_GotoLevel:
00005BB4 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005BBA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005BC0 7000                       		moveq	#0,d0
00005BC2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005BC6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005BCA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005BCE 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005BD2 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005BD6 4E75                       		rts	
00005BD8                            ; ===========================================================================
00005BD8                            
00005BD8                            		include	"_incObj\80 Continue Screen Elements.asm"
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            ; Object 80 - Continue screen elements
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            
00005BD8                            ContScrItem:
00005BD8 7000                       		moveq	#0,d0
00005BDA 1028 0024                  		move.b	$24(a0),d0
00005BDE 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005BE2 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005BE6                            ; ===========================================================================
00005BE6 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005BE8 0000                       		dc.w CSI_Display-CSI_Index
00005BEA 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005BEC 0000                       		dc.w CSI_ChkDel-CSI_Index
00005BEE                            ; ===========================================================================
00005BEE                            
00005BEE                            CSI_Main:	; Routine 0
00005BEE 5428 0024                  		addq.b	#2,obRoutine(a0)
00005BF2 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005BFA 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005C00 117C 0000 0001             		move.b	#0,obRender(a0)
00005C06 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005C0C 317C 0120 0008             		move.w	#$120,obX(a0)
00005C12 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005C18 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005C1E                            
00005C1E                            CSI_Display:	; Routine 2
00005C1E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005C24                            ; ===========================================================================
00005C24                            
00005C24                            	CSI_MiniSonicPos:
00005C24 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005C36 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005C42                            
00005C42                            CSI_MakeMiniSonic:
00005C42                            		; Routine 4
00005C42 2248                       		movea.l	a0,a1
00005C44 45F9 0000 5C24             		lea	(CSI_MiniSonicPos).l,a2
00005C4A 7200                       		moveq	#0,d1
00005C4C 1238 FE18                  		move.b	(v_continues).w,d1
00005C50 5501                       		subq.b	#2,d1
00005C52 6400                       		bcc.s	CSI_MoreThan1
00005C54 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005C5A                            
00005C5A                            	CSI_MoreThan1:
00005C5A 7601                       		moveq	#1,d3
00005C5C 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005C60 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005C62                            
00005C62 7600                       		moveq	#0,d3
00005C64 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005C66                            
00005C66                            	CSI_FewerThan16:
00005C66 1401                       		move.b	d1,d2
00005C68 0202 0001                  		andi.b	#1,d2
00005C6C                            
00005C6C                            CSI_MiniSonicLoop:
00005C6C 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005C70 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005C74 4A02                       		tst.b	d2		; do you have an even number of continues?
00005C76 6700                       		beq.s	CSI_Even	; if yes, branch
00005C78 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005C7E                            
00005C7E                            	CSI_Even:
00005C7E 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005C84 137C 0006 001A             		move.b	#6,obFrame(a1)
00005C8A 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005C90 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005C98 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005C9E 137C 0000 0001             		move.b	#0,obRender(a1)
00005CA4 43E9 0040                  		lea	$40(a1),a1
00005CA8 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005CAC                            
00005CAC 43E9 FFC0                  		lea	-$40(a1),a1
00005CB0 1343 0028                  		move.b	d3,obSubtype(a1)
00005CB4                            
00005CB4                            CSI_ChkDel:	; Routine 6
00005CB4 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005CB8 6700                       		beq.s	CSI_Animate	; if yes, branch
00005CBA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005CC0 6500                       		bcs.s	CSI_Animate	; if not, branch
00005CC2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005CC6 0200 0001                  		andi.b	#1,d0
00005CCA 6600                       		bne.s	CSI_Animate
00005CCC 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005CD0 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005CD2 4E75                       		rts	
00005CD4                            
00005CD4                            CSI_Animate:
00005CD4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005CD8 0200 000F                  		andi.b	#$F,d0
00005CDC 6600                       		bne.s	CSI_Display2
00005CDE 0868 0000 001A             		bchg	#0,obFrame(a0)
00005CE4                            
00005CE4                            	CSI_Display2:
00005CE4 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005CEA                            ; ===========================================================================
00005CEA                            
00005CEA                            CSI_Delete:
00005CEA 4EF9 0000 0000             		jmp	(DeleteObject).l
00005CEA 4EF9 0000 0000             		jmp	(DeleteObject).l
00005CF0                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; Object 81 - Sonic on the continue screen
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            
00005CF0                            ContSonic:
00005CF0 7000                       		moveq	#0,d0
00005CF2 1028 0024                  		move.b	obRoutine(a0),d0
00005CF6 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005CFA 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005CFE 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005D04                            ; ===========================================================================
00005D04 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005D06 0000                       		dc.w CSon_ChkLand-CSon_Index
00005D08 0000                       		dc.w CSon_Animate-CSon_Index
00005D0A 0000                       		dc.w CSon_Run-CSon_Index
00005D0C                            ; ===========================================================================
00005D0C                            
00005D0C                            CSon_Main:	; Routine 0
00005D0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D10 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005D16 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005D1C 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005D24 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005D2A 117C 0004 0001             		move.b	#4,obRender(a0)
00005D30 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005D36 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005D3C 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005D42                            
00005D42                            CSon_ChkLand:	; Routine 2
00005D42 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005D48 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005D4A                            
00005D4A 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D4E 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005D52 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005D5A 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005D60 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005D66 6000                       		bra.s	CSon_Animate
00005D68                            
00005D68                            CSon_ShowFall:
00005D68 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005D6E 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005D74 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005D7A                            ; ===========================================================================
00005D7A                            
00005D7A                            CSon_Animate:	; Routine 4
00005D7A 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005D7E 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005D80 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00005D86 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005D8C                            
00005D8C                            CSon_GetUp:
00005D8C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005D90 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005D98 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005D9E 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00005DA4 4268 0020                  		clr.w	obInertia(a0)
00005DA8 5168 000C                  		subq.w	#8,obY(a0)
00005DB4                            
00005DB4                            CSon_Run:	; Routine 6
00005DB4 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00005DBA 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00005DBC 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00005DC2 6000                       		bra.s	CSon_ShowRun
00005DC4                            
00005DC4                            CSon_AddInertia:
00005DC4 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00005DCA                            
00005DCA                            CSon_ShowRun:
00005DCA 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005DD0 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005DD6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005DD6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005DDC                            		include	"_anim\Continue Screen Sonic.asm"
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC                            ; Animation script - Sonic on the continue screen
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00005DDE 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
00005DEA 00                         		even
00005DEA 00                         		even
00005DEA                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00005DEA                            ; ---------------------------------------------------------------------------
00005DEA                            ; Sprite mappings - Continue screen
00005DEA                            ; ---------------------------------------------------------------------------
00005DEA                            Map_ContScr_internal:
00005DEA 0000                       		dc.w M_Cont_text-Map_ContScr_internal
00005DEC 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
00005DEE 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
00005DF0 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
00005DF2 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
00005DF4 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00005DF6 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00005DF8 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
00005DFA 0B                         M_Cont_text:	dc.b $B
00005DFB F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005E00 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005E05 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005E0A F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005E0F F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005E14 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005E19 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005E1E F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005E23 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005E28 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005E2D 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005E32 03                         M_Cont_Sonic1:	dc.b 3
00005E33 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005E38 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E3D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E42 03                         M_Cont_Sonic2:	dc.b 3
00005E43 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005E48 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E4D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E52 03                         M_Cont_Sonic3:	dc.b 3
00005E53 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005E58 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E5D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E62 02                         M_Cont_oval:	dc.b 2
00005E63 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005E68 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005E6D 01                         M_Cont_Mini1:	dc.b 1
00005E6E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005E73 01                         M_Cont_Mini2:	dc.b 1
00005E74 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005E7A 00                         		even
00005E7A 00                         		even
00005E7A                            
00005E7A                            ; ===========================================================================
00005E7A                            ; ---------------------------------------------------------------------------
00005E7A                            ; Ending sequence in Green Hill	Zone
00005E7A                            ; ---------------------------------------------------------------------------
00005E7A                            
00005E7A                            GM_Ending:
00005E82 6100 C07A                  		bsr.w	PaletteFadeOut
00005E86                            
00005E86 43F8 D000                  		lea	(v_objspace).w,a1
00005E8A 7000                       		moveq	#0,d0
00005E8C 323C 07FF                  		move.w	#$7FF,d1
00005E90                            	End_ClrObjRam:
00005E90 22C0                       		move.l	d0,(a1)+
00005E92 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005E96                            
00005E96 43F8 F628                  		lea	($FFFFF628).w,a1
00005E9A 7000                       		moveq	#0,d0
00005E9C 323C 0015                  		move.w	#$15,d1
00005EA0                            	End_ClrRam1:
00005EA0 22C0                       		move.l	d0,(a1)+
00005EA2 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00005EA6                            
00005EA6 43F8 F700                  		lea	(v_screenposx).w,a1
00005EAA 7000                       		moveq	#0,d0
00005EAC 323C 003F                  		move.w	#$3F,d1
00005EB0                            	End_ClrRam2:
00005EB0 22C0                       		move.l	d0,(a1)+
00005EB2 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005EB6                            
00005EB6 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00005EBA 7000                       		moveq	#0,d0
00005EBC 323C 0047                  		move.w	#$47,d1
00005EC0                            	End_ClrRam3:
00005EC0 22C0                       		move.l	d0,(a1)+
00005EC2 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005EC6                            
00005EC6 46FC 2700                  		disable_ints
00005ECA 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005ECE 0200 00BF                  		andi.b	#$BF,d0
00005ED2 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005ED8 6100 B022                  		bsr.w	ClearScreen
00005EDC 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005EE2 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00005EE6 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005EEA 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005EEE 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00005EF2 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005EF6 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00005EFA 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00005EFE 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00005F04 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00005F08 31FC 001E FE14             		move.w	#30,(v_air).w
00005F0E 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00005F14 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
00005F1A 6700                       		beq.s	End_LoadData	; if yes, branch
00005F1C 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00005F22                            
00005F22                            End_LoadData:
00005F22 7000                       		moveq	#plcid_Ending,d0
00005F24 6100 B6AC                  		bsr.w	QuickPLC	; load ending sequence patterns
00005F28 4EB9 0000 0000             		jsr	(Hud_Base).l
00005F2E 6100 0000                  		bsr.w	LevelSizeLoad
00005F32 6100 0000                  		bsr.w	DeformLayers
00005F36 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00005F3C 6100 0000                  		bsr.w	LevelDataLoad
00005F40 6100 0000                  		bsr.w	LoadTilesFromStart
00005F44 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
00005F4C 46FC 2300                  		enable_ints
00005F50 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005F56 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005F5A 6100 B826                  		bsr.w	KosDec
00005F5E 4EB9 0000 0000             		jsr		LoadPlayerPal
00005F64 6100 C242                  		bsr.w	PalLoad1	; load Sonic's palette
00005F70 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00005F76 6700                       		beq.s	End_LoadSonic	; if not, branch
00005F78 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005F7E                            
00005F7E                            End_LoadSonic:
00005F7E 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00005F84 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00005F8A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00005F90 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00005F96 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
00005F9C 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00005FA2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00005FA8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005FAE 4EB9 0000 0000             		jsr	(BuildSprites).l
00005FB4 7000                       		moveq	#0,d0
00005FB6 31C0 FE20                  		move.w	d0,(v_rings).w
00005FBA 21C0 FE22                  		move.l	d0,(v_time).w
00005FBE 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00005FC2 11C0 FE2C                  		move.b	d0,(v_shield).w
00005FC6 11C0 FE2D                  		move.b	d0,(v_invinc).w
00005FCA 11C0 FE2E                  		move.b	d0,(v_shoes).w
00005FCE 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005FD2 31C0 FE08                  		move.w	d0,(v_debuguse).w
00005FD6 31C0 FE02                  		move.w	d0,(f_restart).w
00005FDA 31C0 FE04                  		move.w	d0,(v_framecount).w
00005FDE 6100 EEC0                  		bsr.w	OscillateNumInit
00005FE2 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00005FE8 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00005FEE 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00005FF4 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005FFA 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006000 6100 D77A                  		bsr.w	WaitForVBla
00006004 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006008 0000 0040                  		ori.b	#$40,d0
0000600C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006012 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006018 6100 BE3E                  		bsr.w	PaletteFadeIn
0000601C                            
0000601C                            ; ---------------------------------------------------------------------------
0000601C                            ; Main ending sequence loop
0000601C                            ; ---------------------------------------------------------------------------
0000601C                            
0000601C                            End_MainLoop:
0000601C 6100 AFBA                  		bsr.w	PauseGame
00006020 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006026 6100 D754                  		bsr.w	WaitForVBla
0000602A 5278 FE04                  		addq.w	#1,(v_framecount).w
0000602E 6100 0000                  		bsr.w	End_MoveSonic
00006032 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006038 6100 0000                  		bsr.w	DeformLayers
0000603C 4EB9 0000 0000             		jsr	(BuildSprites).l
00006042 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006048 6100 BA00                  		bsr.w	PaletteCycle
0000604C 6100 EEA8                  		bsr.w	OscillateNumDo
00006050 6100 EF34                  		bsr.w	SynchroAnimate
00006054 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
0000605A 6700                       		beq.s	End_ChkEmerald	; if yes, branch
0000605C                            
0000605C 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
0000606A 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006070 4E75                       		rts	
00006072                            ; ===========================================================================
00006072                            
00006072                            End_ChkEmerald:
00006072 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006076 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000607A                            
0000607A 4278 FE02                  		clr.w	(f_restart).w
0000607E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006084 4278 F794                  		clr.w	(v_palchgspeed).w
00006088                            
00006088                            	End_AllEmlds:
00006088 6100 AF4E                  		bsr.w	PauseGame
0000608C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006092 6100 D6E8                  		bsr.w	WaitForVBla
00006096 5278 FE04                  		addq.w	#1,(v_framecount).w
0000609A 6100 0000                  		bsr.w	End_MoveSonic
0000609E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000060A4 6100 0000                  		bsr.w	DeformLayers
000060A8 4EB9 0000 0000             		jsr	(BuildSprites).l
000060AE 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000060B4 6100 EE40                  		bsr.w	OscillateNumDo
000060B8 6100 EECC                  		bsr.w	SynchroAnimate
000060BC 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000060C0 6A00                       		bpl.s	End_SlowFade
000060C2 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000060C8 6100 BF7E                  		bsr.w	WhiteOut_ToWhite
000060CC                            
000060CC                            	End_SlowFade:
000060CC 4A78 FE02                  		tst.w	(f_restart).w
000060D0 6700 FFB6                  		beq.w	End_AllEmlds
000060D4 4278 FE02                  		clr.w	(f_restart).w
000060D8 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
000060DE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000060E4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000060EA 47F8 F700                  		lea	(v_screenposx).w,a3
000060EE 49F8 A400                  		lea	(v_lvllayout).w,a4
000060F2 343C 4000                  		move.w	#$4000,d2
000060F6 6100 0000                  		bsr.w	DrawChunks
000060FA 7013                       		moveq	#palid_Ending,d0
000060FC 6100 C0AA                  		bsr.w	PalLoad1	; load ending palette
00006100 6100 BE7A                  		bsr.w	PaletteWhiteIn
00006104 6000 FF16                  		bra.w	End_MainLoop
00006108                            
00006108                            ; ---------------------------------------------------------------------------
00006108                            ; Subroutine controlling Sonic on the ending sequence
00006108                            ; ---------------------------------------------------------------------------
00006108                            
00006108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006108                            
00006108                            
00006108                            End_MoveSonic:
00006108 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000610C 6600                       		bne.s	End_MoveSon2
0000610E 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006114 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006116                            
00006116 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000611A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006120 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
00006126 4E75                       		rts	
00006128                            ; ===========================================================================
00006128                            
00006128                            End_MoveSon2:
00006128 5500                       		subq.b	#2,d0
0000612A 6600                       		bne.s	End_MoveSon3
0000612C 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006132 6500                       		blo.s	End_MoveSonExit	; if not, branch
00006134                            
00006134 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006138 7000                       		moveq	#0,d0
0000613A 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
0000613E 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006142 31C0 D020                  		move.w	d0,(v_player+obInertia).w
00006146 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
0000614C 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
00006152 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
00006158 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
0000615E 4E75                       		rts	
00006160                            ; ===========================================================================
00006160                            
00006160                            End_MoveSon3:
00006160 5500                       		subq.b	#2,d0
00006162 6600                       		bne.s	End_MoveSonExit
00006164 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006168 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
0000616E 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006174 4278 D024                  		clr.w	(v_player+obRoutine).w
00006178                            
00006178                            End_MoveSonExit:
00006178 4E75                       		rts	
0000617A                            ; End of function End_MoveSonic
0000617A                            
0000617A                            ; ===========================================================================
0000617A                            
0000617A                            		include	"_incObj\87 Ending Sequence Sonic.asm"
0000617A                            ; ---------------------------------------------------------------------------
0000617A                            ; Object 87 - Sonic on ending sequence
0000617A                            ; ---------------------------------------------------------------------------
0000617A                            
0000617A                            EndSonic:
0000617A 7000                       		moveq	#0,d0
0000617C 1028 0025                  		move.b	ob2ndRout(a0),d0
00006180 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006184 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
00006188 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000618E                            ; ===========================================================================
0000618E 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006192 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006196 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000619A 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
0000619E 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
000061A2                            
000061A2 =00000030                  eson_time:	equ $30	; time to wait between events
000061A2                            ; ===========================================================================
000061A2                            
000061A2                            ESon_Main:	; Routine 0
000061A2 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000061A8 6700                       		beq.s	ESon_Main2	; if yes, branch
000061AA 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
000061B0 317C 00D8 0030             		move.w	#216,eson_time(a0)
000061B6 4E75                       		rts	
000061B8                            ; ===========================================================================
000061B8                            
000061B8                            ESon_Main2:
000061B8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000061BC 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000061C4 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000061CA 117C 0004 0001             		move.b	#4,obRender(a0)
000061D0 4228 0022                  		clr.b	obStatus(a0)
000061D4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000061DA 117C 0000 001A             		move.b	#0,obFrame(a0)
000061E0 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
000061E6                            
000061E6                            ESon_MakeEmeralds:
000061E6                            		; Routine 2
000061E6 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
000061EA 6600                       		bne.s	ESon_Wait
000061EC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000061F0 317C 0001 001C             		move.w	#1,obAnim(a0)
000061F6 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
000061FC                            
000061FC                            	ESon_Wait:
000061FC 4E75                       		rts	
000061FE                            ; ===========================================================================
000061FE                            
000061FE                            Obj87_LookUp:	; Routine 6
000061FE 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006206 6600                       		bne.s	locret_5480
00006208 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
0000620E 317C 005A 0030             		move.w	#90,eson_time(a0)
00006214 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006218                            
00006218                            locret_5480:
00006218 4E75                       		rts	
0000621A                            ; ===========================================================================
0000621A                            
0000621A                            Obj87_ClrObjRam:
0000621A                            		; Routine 8
0000621A 5368 0030                  		subq.w	#1,eson_time(a0)
0000621E 6600                       		bne.s	ESon_Wait2
00006220 43F8 D400                  		lea	(v_objspace+$400).w,a1
00006224 323C 00FF                  		move.w	#$FF,d1
00006228                            
00006228                            Obj87_ClrLoop:
00006228 4299                       		clr.l	(a1)+
0000622A 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000622E 31FC 0001 FE02             		move.w	#1,(f_restart).w
00006234 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006238 117C 0001 001C             		move.b	#1,obAnim(a0)
0000623E 317C 003C 0030             		move.w	#60,eson_time(a0)
00006244                            
00006244                            ESon_Wait2:
00006244 4E75                       		rts	
00006246                            ; ===========================================================================
00006246                            
00006246                            Obj87_MakeLogo:	; Routine $C
00006246 5368 0030                  		subq.w	#1,eson_time(a0)
0000624A 6600                       		bne.s	ESon_Wait3
0000624C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006250 317C 00B4 0030             		move.w	#180,eson_time(a0)
00006256 117C 0002 001C             		move.b	#2,obAnim(a0)
0000625C 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006262                            
00006262                            ESon_Wait3:
00006262 4E75                       		rts	
00006264                            ; ===========================================================================
00006264                            
00006264                            Obj87_Animate:	; Rountine 4, $A, $E, $12
00006264 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
0000626A 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006270                            ; ===========================================================================
00006270                            
00006270                            Obj87_Leap:	; Routine $10
00006270 5368 0030                  		subq.w	#1,eson_time(a0)
00006274 6600                       		bne.s	ESon_Wait4
00006276 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000627A 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006282 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006288 117C 0004 0001             		move.b	#4,obRender(a0)
0000628E 4228 0022                  		clr.b	obStatus(a0)
00006292 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006298 117C 0005 001A             		move.b	#5,obFrame(a0)
0000629E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
000062A4 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000062AA 60B8                       		bra.s	Obj87_Animate
000062AC                            ; ===========================================================================
000062AC                            
000062AC                            ESon_Wait4:
000062AC 4E75                       		rts	
000062AC 4E75                       		rts	
000062AE                            		include "_anim\Ending Sequence Sonic.asm"
000062AE                            ; ---------------------------------------------------------------------------
000062AE                            ; Animation script - Sonic on the ending sequence
000062AE                            ; ---------------------------------------------------------------------------
000062AE 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
000062B0 0000                       		dc.w byte_552A-AniScript_ESon
000062B2 0000                       		dc.w byte_5534-AniScript_ESon
000062B4 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000062C2 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000062CC 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000062D4                            		even
000062D4                            		even
000062D4                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
000062D4                            ; ---------------------------------------------------------------------------
000062D4                            ; Object 88 - chaos emeralds on	the ending sequence
000062D4                            ; ---------------------------------------------------------------------------
000062D4                            
000062D4                            EndChaos:
000062D4 7000                       		moveq	#0,d0
000062D6 1028 0024                  		move.b	obRoutine(a0),d0
000062DA 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
000062DE 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
000062E2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000062E8                            ; ===========================================================================
000062E8 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
000062EA 0000                       		dc.w ECha_Move-ECha_Index
000062EC                            
000062EC =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
000062EC =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
000062EC =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
000062EC =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
000062EC                            ; ===========================================================================
000062EC                            
000062EC                            ECha_Main:	; Routine 0
000062EC 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
000062F2 6700                       		beq.s	ECha_CreateEms
000062F4 588F                       		addq.l	#4,sp
000062F6 4E75                       		rts	
000062F8                            ; ===========================================================================
000062F8                            
000062F8                            ECha_CreateEms:
000062F8 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
000062FE 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006304 2248                       		movea.l	a0,a1
00006306 7600                       		moveq	#0,d3
00006308 7401                       		moveq	#1,d2
0000630A 7205                       		moveq	#5,d1
0000630C                            
0000630C                            	ECha_LoadLoop:
0000630C 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006310 5429 0024                  		addq.b	#2,obRoutine(a1)
00006314 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000631C 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006322 137C 0004 0001             		move.b	#4,obRender(a1)
00006328 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000632E 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
00006334 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
0000633A 1342 001C                  		move.b	d2,obAnim(a1)
0000633E 1342 001A                  		move.b	d2,obFrame(a1)
00006342 5202                       		addq.b	#1,d2
00006344 1343 0026                  		move.b	d3,obAngle(a1)
00006348 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
0000634C 43E9 0040                  		lea	$40(a1),a1
00006350 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
00006354                            
00006354                            ECha_Move:	; Routine 2
00006354 3028 003E                  		move.w	echa_angle(a0),d0
00006358 D168 0026                  		add.w	d0,obAngle(a0)
0000635C 1028 0026                  		move.b	obAngle(a0),d0
00006360 4EB9 0000 37AE             		jsr	(CalcSine).l
00006366 7800                       		moveq	#0,d4
00006368 1828 003C                  		move.b	echa_radius(a0),d4
0000636C C3C4                       		muls.w	d4,d1
0000636E E081                       		asr.l	#8,d1
00006370 C1C4                       		muls.w	d4,d0
00006372 E080                       		asr.l	#8,d0
00006374 D268 0038                  		add.w	echa_origX(a0),d1
00006378 D068 003A                  		add.w	echa_origY(a0),d0
0000637C 3141 0008                  		move.w	d1,obX(a0)
00006380 3140 000C                  		move.w	d0,obY(a0)
00006384                            
00006384                            	ECha_Expand:
00006384 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000638A 6700                       		beq.s	ECha_Rotate
0000638C 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006392                            
00006392                            	ECha_Rotate:
00006392 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006398 6700                       		beq.s	ECha_Rise
0000639A 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
000063A0                            
000063A0                            	ECha_Rise:
000063A0 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
000063A6 6700                       		beq.s	ECha_End
000063A8 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000063AC                            
000063AC                            ECha_End:
000063AC 4E75                       		rts	
000063AC 4E75                       		rts	
000063AE                            		include	"_incObj\89 Ending Sequence STH.asm"
000063AE                            ; ---------------------------------------------------------------------------
000063AE                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000063AE                            ; ---------------------------------------------------------------------------
000063AE                            
000063AE                            EndSTH:
000063AE 7000                       		moveq	#0,d0
000063B0 1028 0024                  		move.b	$24(a0),d0
000063B4 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
000063B8 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
000063BC 4EF9 0000 0000             		jmp	(DisplaySprite).l
000063C2                            ; ===========================================================================
000063C2 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
000063C4 0000                       		dc.w ESth_Move-ESth_Index
000063C6 0000                       		dc.w ESth_GotoCredits-ESth_Index
000063C8                            
000063C8 =00000030                  esth_time:	equ $30		; time until exit
000063C8                            ; ===========================================================================
000063C8                            
000063C8                            ESth_Main:	; Routine 0
000063C8 5428 0024                  		addq.b	#2,obRoutine(a0)
000063CC 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
000063D2 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
000063D8 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
000063E0 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
000063E6 117C 0000 0001             		move.b	#0,obRender(a0)
000063EC 317C 0000 0018             		move.w	#0,obPriority(a0)
000063F2                            
000063F2                            ESth_Move:	; Routine 2
000063F2 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
000063F8 6700                       		beq.s	ESth_Delay	; if yes, branch
000063FA 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006400 4E75                       		rts
00006402                            
00006402                            ESth_Delay:
00006402 5428 0024                  		addq.b	#2,obRoutine(a0)
00006406 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000640C                            
0000640C                            ESth_GotoCredits:
0000640C                            		; Routine 4
0000640C 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006410 6A00                       		bpl.s	ESth_Wait
00006412 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
00006418                            
00006418                            	ESth_Wait:
00006418 4E75                       		rts
0000641A                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000641A                            ; ---------------------------------------------------------------------------
0000641A                            ; Sprite mappings - Sonic on the ending	sequence
0000641A                            ; ---------------------------------------------------------------------------
0000641A                            Map_ESon_internal:
0000641A 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000641C 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
0000641E 0000                       		dc.w M_ESon_Up-Map_ESon_internal
00006420 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
00006422 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
00006424 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
00006426 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
00006428 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
0000642A 02                         M_ESon_Hold1:	dc.b 2
0000642B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006430 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006435 03                         M_ESon_Hold2:	dc.b 3
00006436 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000643B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006440 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006445 02                         M_ESon_Up:	dc.b 2
00006446 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000644B FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006450 02                         M_ESon_Conf1:	dc.b 2
00006451 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00006456 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000645B 02                         M_ESon_Conf2:	dc.b 2
0000645C EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006461 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00006466 03                         M_ESon_Leap1:	dc.b 3
00006467 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
0000646C EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006471 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006476 07                         M_ESon_Leap2:	dc.b 7
00006477 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000647C BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006481 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006486 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000648B DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006490 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006495 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000649A 18                         M_ESon_Leap3:	dc.b $18
0000649B 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000064A0 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000064A5 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000064AA 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000064AF A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000064B4 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000064B9 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000064BE A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000064C3 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000064C8 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000064CD A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000064D2 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000064D7 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000064DC B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000064E1 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000064E6 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000064EB D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000064F0 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000064F5 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000064FA E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000064FF D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006504 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00006509 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000650E F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006514 00                         		even
00006514 00                         		even
00006514                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006514                            ; --------------------------------------------------------------------------------
00006514                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006514                            ; --------------------------------------------------------------------------------
00006514                            
00006514                            SME_0ZTmS:	
00006514 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006518 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000651C 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006520 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006522 01                         SME_0ZTmS_E:	dc.b 1	
00006523 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00006528 01                         SME_0ZTmS_14:	dc.b 1	
00006529 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000652E 01                         SME_0ZTmS_1A:	dc.b 1	
0000652F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006534 01                         SME_0ZTmS_20:	dc.b 1	
00006535 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
0000653A 01                         SME_0ZTmS_26:	dc.b 1	
0000653B F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006540 01                         SME_0ZTmS_2C:	dc.b 1	
00006541 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006546 01                         SME_0ZTmS_32:	dc.b 1	
00006547 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0000654C                            		even
0000654C                            		even
0000654C                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
0000654C                            ; ---------------------------------------------------------------------------
0000654C                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000654C                            ; ---------------------------------------------------------------------------
0000654C                            Map_ESth_internal:
0000654C 0000                       		dc.w M_ESth_1-Map_ESth_internal
0000654E 03                         M_ESth_1:	dc.b 3
0000654F F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006554 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006559 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
0000655E                            		even
0000655E                            		even
0000655E                            
0000655E                            ; ===========================================================================
0000655E                            ; ---------------------------------------------------------------------------
0000655E                            ; Credits ending sequence
0000655E                            ; ---------------------------------------------------------------------------
0000655E                            
0000655E                            GM_Credits:
0000655E                            		
0000655E 6100 AF64                  		bsr.w	ClearPLC
00006562 6100 B99A                  		bsr.w	PaletteFadeOut
00006566 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000656C 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006570 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006574 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006578 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
0000657C 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006580 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006584 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006588 4238 F64E                  		clr.b	(f_wtr_state).w
0000658C 6100 A96E                  		bsr.w	ClearScreen
00006590                            
00006590 43F8 D000                  		lea	(v_objspace).w,a1
00006594 7000                       		moveq	#0,d0
00006596 323C 07FF                  		move.w	#$7FF,d1
0000659A                            	TryAg_ClrObjRam:
0000659A 22C0                       		move.l	d0,(a1)+
0000659C 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000065A0                            
000065A0 7000                       		moveq	#plcid_TryAgain,d0
000065A2 6100 B02E                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
000065A6                            
000065A6 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000065AA 7000                       		moveq	#0,d0
000065AC 323C 001F                  		move.w	#$1F,d1
000065B0                            	TryAg_ClrPal:
000065B0 22C0                       		move.l	d0,(a1)+
000065B2 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
000065B6                            
000065B6 7013                       		moveq	#palid_Ending,d0
000065B8 6100 BBEE                  		bsr.w	PalLoad1	; load ending palette
000065BC 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
000065C0 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
000065C6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000065CC 4EB9 0000 0000             		jsr	(BuildSprites).l
000065D2 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
000065D8 6100 B87E                  		bsr.w	PaletteFadeIn
000065DC                            
000065DC                            ; ---------------------------------------------------------------------------
000065DC                            ; "TRY AGAIN" and "END"	screen main loop
000065DC                            ; ---------------------------------------------------------------------------
000065DC                            TryAg_MainLoop:
000065DC 6100 A9FA                  		bsr.w	PauseGame
000065E0 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000065E6 6100 D194                  		bsr.w	WaitForVBla
000065EA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000065F0 4EB9 0000 0000             		jsr	(BuildSprites).l
000065F6 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000065FC 6600                       		bne.s	TryAg_Exit	; if yes, branch
000065FE 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006602 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006604 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000660A 67D0                       		beq.s	TryAg_MainLoop
0000660C                            
0000660C                            TryAg_Exit:
0000660C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006612 4E75                       		rts	
00006614                            
00006614                            ; ===========================================================================
00006614                            
00006614                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006614                            ; ---------------------------------------------------------------------------
00006614                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006614                            ; ---------------------------------------------------------------------------
00006614                            
00006614                            EndEggman:
00006614 7000                       		moveq	#0,d0
00006616 1028 0024                  		move.b	obRoutine(a0),d0
0000661A 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
0000661E 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006622 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006628                            ; ===========================================================================
00006628 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
0000662A 0000                       		dc.w EEgg_Animate-EEgg_Index
0000662C 0000                       		dc.w EEgg_Juggle-EEgg_Index
0000662E 0000                       		dc.w EEgg_Wait-EEgg_Index
00006630                            
00006630 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006630                            ; ===========================================================================
00006630                            
00006630                            EEgg_Main:	; Routine 0
00006630 5428 0024                  		addq.b	#2,obRoutine(a0)
00006634 317C 0120 0008             		move.w	#$120,obX(a0)
0000663A 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006640 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006648 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000664E 117C 0000 0001             		move.b	#0,obRender(a0)
00006654 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000665A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006660 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006666 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006668                            
00006668 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
0000666E 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006674 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
0000667A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006680                            
00006680                            EEgg_Animate:	; Routine 2
00006680 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006686 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000668C                            ; ===========================================================================
0000668C                            
0000668C                            EEgg_Juggle:	; Routine 4
0000668C 5428 0024                  		addq.b	#2,obRoutine(a0)
00006690 7002                       		moveq	#2,d0
00006692 0828 0000 001C             		btst	#0,obAnim(a0)
00006698 6700                       		beq.s	@noflip
0000669A 4440                       		neg.w	d0
0000669C                            
0000669C                            	@noflip:
0000669C 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
000066A0 7205                       		moveq	#5,d1
000066A2                            
000066A2                            @emeraldloop:
000066A2 1340 003E                  		move.b	d0,$3E(a1)
000066A6 3400                       		move.w	d0,d2
000066A8 E742                       		asl.w	#3,d2
000066AA D529 0026                  		add.b	d2,obAngle(a1)
000066AE 43E9 0040                  		lea	$40(a1),a1
000066B2 51C9 FFEE                  		dbf	d1,@emeraldloop
000066B6 5228 001A                  		addq.b	#1,obFrame(a0)
000066BA 317C 0070 0030             		move.w	#112,eegg_time(a0)
000066C0                            
000066C0                            EEgg_Wait:	; Routine 6
000066C0 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
000066C4 6A00                       		bpl.s	@nochg		; branch if time remains
000066C6 0868 0000 001C             		bchg	#0,obAnim(a0)
000066CC 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
000066D2                            
000066D2                            	@nochg:
000066D2 4E75                       		rts	
000066D2 4E75                       		rts	
000066D4                            		include "_anim\Try Again & End Eggman.asm"
000066D4                            ; ---------------------------------------------------------------------------
000066D4                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000066D4                            ; ---------------------------------------------------------------------------
000066D4 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
000066D6 0000                       		dc.w @tryagain2-Ani_EEgg
000066D8 0000                       		dc.w @end-Ani_EEgg
000066DA 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
000066DE 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
000066E2 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
000066F4                            		even
000066F4                            		even
000066F4                            		include	"_incObj\8C Try Again Emeralds.asm"
000066F4                            ; ---------------------------------------------------------------------------
000066F4                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000066F4                            ; ---------------------------------------------------------------------------
000066F4                            
000066F4                            TryChaos:
000066F4 7000                       		moveq	#0,d0
000066F6 1028 0024                  		move.b	obRoutine(a0),d0
000066FA 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
000066FE 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006702 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006708                            ; ===========================================================================
00006708 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
0000670A 0000                       		dc.w TCha_Move-TCha_Index
0000670C                            ; ===========================================================================
0000670C                            
0000670C                            TCha_Main:	; Routine 0
0000670C 2248                       		movea.l	a0,a1
0000670E 7400                       		moveq	#0,d2
00006710 7600                       		moveq	#0,d3
00006712 7205                       		moveq	#5,d1
00006714 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006718                            
00006718                            @makeemerald:
00006718 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
0000671C 5429 0024                  		addq.b	#2,obRoutine(a1)
00006720 237C 0000 6514 0004        		move.l	#Map_ECha,obMap(a1)
00006728 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
0000672E 137C 0000 0001             		move.b	#0,obRender(a1)
00006734 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000673A 337C 0104 0008             		move.w	#$104,obX(a1)
00006740 337C 0120 0038             		move.w	#$120,$38(a1)
00006746 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
0000674C 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006752 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006758 47F8 FE58                  		lea	(v_emldlist).w,a3
0000675C                            
0000675C                            	@chkemerald:
0000675C 7000                       		moveq	#0,d0
0000675E 1038 FE57                  		move.b	(v_emeralds).w,d0
00006762 5340                       		subq.w	#1,d0
00006764 6500                       		bcs.s	@loc_5B42
00006766                            
00006766                            	@chkloop:
00006766 B433 0000                  		cmp.b	(a3,d0.w),d2
0000676A 6600                       		bne.s	@notgot
0000676C 5202                       		addq.b	#1,d2
0000676E 60EC                       		bra.s	@chkemerald
00006770                            ; ===========================================================================
00006770                            
00006770                            	@notgot:
00006770 51C8 FFF4                  		dbf	d0,@chkloop
00006774                            
00006774                            @loc_5B42:
00006774 1342 001A                  		move.b	d2,obFrame(a1)
00006778 5229 001A                  		addq.b	#1,obFrame(a1)
0000677C 5202                       		addq.b	#1,d2
0000677E 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006784 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006788 1343 001F                  		move.b	d3,obDelayAni(a1)
0000678C 0643 000A                  		addi.w	#10,d3
00006790 43E9 0040                  		lea	$40(a1),a1
00006794 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006798                            
00006798                            TCha_Move:	; Routine 2
00006798 4A68 003E                  		tst.w	$3E(a0)
0000679C 6700                       		beq.s	locret_5BBA
0000679E 4A28 001E                  		tst.b	obTimeFrame(a0)
000067A2 6700                       		beq.s	loc_5B78
000067A4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000067A8 6600                       		bne.s	loc_5B80
000067AA                            
000067AA                            loc_5B78:
000067AA 3028 003E                  		move.w	$3E(a0),d0
000067AE D168 0026                  		add.w	d0,obAngle(a0)
000067B2                            
000067B2                            loc_5B80:
000067B2 1028 0026                  		move.b	obAngle(a0),d0
000067B6 6700                       		beq.s	loc_5B8C
000067B8 0C00 0080                  		cmpi.b	#$80,d0
000067BC 6600                       		bne.s	loc_5B96
000067BE                            
000067BE                            loc_5B8C:
000067BE 4268 003E                  		clr.w	$3E(a0)
000067C2 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000067C8                            
000067C8                            loc_5B96:
000067C8 4EB9 0000 37AE             		jsr	(CalcSine).l
000067CE 7800                       		moveq	#0,d4
000067D0 1828 003C                  		move.b	$3C(a0),d4
000067D4 C3C4                       		muls.w	d4,d1
000067D6 E081                       		asr.l	#8,d1
000067D8 C1C4                       		muls.w	d4,d0
000067DA E080                       		asr.l	#8,d0
000067DC D268 0038                  		add.w	$38(a0),d1
000067E0 D068 003A                  		add.w	$3A(a0),d0
000067E4 3141 0008                  		move.w	d1,obX(a0)
000067E8 3140 000A                  		move.w	d0,obScreenY(a0)
000067EC                            
000067EC                            locret_5BBA:
000067EC 4E75                       		rts	
000067EC 4E75                       		rts	
000067EE                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000067EE                            ; ---------------------------------------------------------------------------
000067EE                            Map_EEgg_internal:
000067EE 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
000067F0 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
000067F2 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
000067F4 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
000067F6 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
000067F8 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
000067FA 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
000067FC 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
000067FE 08                         M_EEgg_Try1:	dc.b 8
000067FF E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006804 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006809 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000680E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006813 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006818 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000681D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006822 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006827 08                         M_EEgg_Try2:	dc.b 8
00006828 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000682D F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006832 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006837 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000683C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006841 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006846 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000684B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006850 08                         M_EEgg_Try3:	dc.b 8
00006851 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006856 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000685B E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006860 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006865 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000686A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000686F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006874 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006879 08                         M_EEgg_Try4:	dc.b 8
0000687A E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000687F F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006884 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006889 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000688E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006893 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006898 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000689D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000068A2 0C                         M_EEgg_End1:	dc.b $C
000068A3 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000068A8 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000068AD 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000068B2 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000068B7 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000068BC F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000068C1 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000068C6 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000068CB 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000068D0 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000068D5 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000068DA 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000068DF 0A                         M_EEgg_End2:	dc.b $A
000068E0 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000068E5 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000068EA F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000068EF D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000068F4 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000068F9 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000068FE 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006903 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006908 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000690D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006912 0A                         M_EEgg_End3:	dc.b $A
00006913 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006918 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000691D EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006922 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006927 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000692C EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006931 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006936 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000693B 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006940 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006945 0C                         M_EEgg_End4:	dc.b $C
00006946 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000694B FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006950 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006955 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000695A F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000695F FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006964 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006969 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000696E 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006973 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006978 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000697D 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006982                            		even
00006982                            		even
00006982                            
00006982                            ; ---------------------------------------------------------------------------
00006982                            ; Ending sequence demos
00006982                            ; ---------------------------------------------------------------------------
00006982                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
000069B0                            		even
000069B0                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
000069F0                            		even
000069F0                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006A20                            		even
00006A20                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006A50                            		even
00006A50                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006A70                            		even
00006A70                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006A90                            		even
00006A90                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006AC0                            		even
00006AC0                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006AF0                            		even
00006AF0                            
00006AF0                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006AF0                            ; ---------------------------------------------------------------------------
00006AF0                            ; Subroutine to	load level boundaries and start	locations
00006AF0                            ; ---------------------------------------------------------------------------
00006AF0                            
00006AF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AF0                            
00006AF0                            
00006AF0                            LevelSizeLoad:
00006AF0 7000                       		moveq	#0,d0
00006AF2 11C0 F740                  		move.b	d0,($FFFFF740).w
00006AF6 11C0 F741                  		move.b	d0,($FFFFF741).w
00006AFA 11C0 F746                  		move.b	d0,($FFFFF746).w
00006AFE 11C0 F748                  		move.b	d0,($FFFFF748).w
00006B02 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006B06 3038 FE10                  		move.w	(v_zone).w,d0
00006B0A ED08                       		lsl.b	#6,d0
00006B0C E848                       		lsr.w	#4,d0
00006B0E 3200                       		move.w	d0,d1
00006B10 D040                       		add.w	d0,d0
00006B12 D041                       		add.w	d1,d0
00006B14 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006B18 3018                       		move.w	(a0)+,d0
00006B1A 31C0 F730                  		move.w	d0,($FFFFF730).w
00006B1E 2018                       		move.l	(a0)+,d0
00006B20 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006B24 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006B28 2018                       		move.l	(a0)+,d0
00006B2A 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006B2E 21C0 F724                  		move.l	d0,(v_limittop1).w
00006B32 3038 F728                  		move.w	(v_limitleft2).w,d0
00006B36 0640 0240                  		addi.w	#$240,d0
00006B3A 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006B3E 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006B44 3018                       		move.w	(a0)+,d0
00006B46 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006B4A 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006B50 6000 0000                  		bra.w	LevSz_ChkLamp
00006B54                            
00006B54                            ; ===========================================================================
00006B54                            ; ---------------------------------------------------------------------------
00006B54                            ; Level size array
00006B54                            ; ---------------------------------------------------------------------------
00006B54                            LevelSizeArray:
00006B54                            		; GHZ
00006B54 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006B60 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006B6C 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006B78 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006B84                            		; LZ
00006B84 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006B90 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006B9C 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006BA8 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006BB4                            		; MZ
00006BB4 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006BC0 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006BCC 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006BD8 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006BE4                            		; SLZ
00006BE4 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006BF0 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006BFC 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006C08 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006C14                            		; SYZ
00006C14 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006C20 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006C2C 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006C38 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006C44                            		; SBZ
00006C44 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006C50 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006C5C 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006C68 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006C74                            		; Ending
00006C74 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006C80 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006C8C 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006C98 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006CA4                            
00006CA4                            ; ---------------------------------------------------------------------------
00006CA4                            ; Ending start location array
00006CA4                            ; ---------------------------------------------------------------------------
00006CA4                            EndingStLocArray:
00006CA4                            		include	"_inc\Start Location Array - Ending.asm"
00006CA4                            ; ---------------------------------------------------------------------------
00006CA4                            ; Ending start location array
00006CA4                            ; ---------------------------------------------------------------------------
00006CA4                            
00006CA4                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006CA8                            		incbin	"startpos\mz2 (Credits demo).bin"
00006CAC                            		incbin	"startpos\syz3 (Credits demo).bin"
00006CB0                            		incbin	"startpos\lz3 (Credits demo).bin"
00006CB4                            		incbin	"startpos\slz3 (Credits demo).bin"
00006CB8                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006CBC                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006CC0                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006CC4                            		even
00006CC4                            		even
00006CC4                            
00006CC4                            ; ===========================================================================
00006CC4                            
00006CC4                            LevSz_ChkLamp:
00006CC4 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006CC8 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006CCA                            
00006CCA 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006CD0 3238 D008                  		move.w	(v_player+obX).w,d1
00006CD4 3038 D00C                  		move.w	(v_player+obY).w,d0
00006CD8 6000                       		bra.s	LevSz_SkipStartPos
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            LevSz_StartLoc:
00006CDA 3038 FE10                  		move.w	(v_zone).w,d0
00006CDE ED08                       		lsl.b	#6,d0
00006CE0 E848                       		lsr.w	#4,d0
00006CE2 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006CE6 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006CEA 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006CEC                            
00006CEC 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006CF0 5340                       		subq.w	#1,d0
00006CF2 E548                       		lsl.w	#2,d0
00006CF4 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006CF8                            
00006CF8                            LevSz_SonicPos:
00006CF8 7200                       		moveq	#0,d1
00006CFA 3219                       		move.w	(a1)+,d1
00006CFC 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006D00 7000                       		moveq	#0,d0
00006D02 3011                       		move.w	(a1),d0
00006D04 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006D08                            
00006D08                            SetScreen:
00006D08                            	LevSz_SkipStartPos:
00006D08 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006D0C 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006D10 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006D12                            @looppoint: 
00006D12 34C1                       		move.w d1,(a2)+ ; fill in X 
00006D14 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006D16 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006D1A 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006D1E 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006D20 7200                       		moveq	#0,d1
00006D22                            
00006D22                            	SetScr_WithinLeft:
00006D22 3438 F72A                  		move.w	(v_limitright2).w,d2
00006D26 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006D28 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006D2A 3202                       		move.w	d2,d1
00006D2C                            
00006D2C                            	SetScr_WithinRight:
00006D2C 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006D30                            
00006D30 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006D34 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006D36 7000                       		moveq	#0,d0
00006D38                            
00006D38                            	SetScr_WithinTop:
00006D38 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006D3C 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006D3E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006D42                            
00006D42                            	SetScr_WithinBottom:
00006D42 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006D46 6100 0000                  		bsr.w	BgScrollSpeed
00006D4A 7000                       		moveq	#0,d0
00006D4C 1038 FE10                  		move.b	(v_zone).w,d0
00006D50 E508                       		lsl.b	#2,d0
00006D52 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006D58 4E75                       		rts
00006D5A                            ; ===========================================================================
00006D5A                            ; ---------------------------------------------------------------------------
00006D5A                            ; Sonic start location array
00006D5A                            ; ---------------------------------------------------------------------------
00006D5A                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006D5A                            ; ---------------------------------------------------------------------------
00006D5A                            ; Sonic start location array
00006D5A                            ; ---------------------------------------------------------------------------
00006D5A                            
00006D5A                            		incbin	"startpos\ghz1.bin"
00006D5E                            		incbin	"startpos\ghz2.bin"
00006D62                            		incbin	"startpos\ghz3.bin"
00006D66 0080 00A8                  		dc.w	$80,$A8
00006D6A                            
00006D6A                            		incbin	"startpos\lz1.bin"
00006D6E                            		incbin	"startpos\lz2.bin"
00006D72                            		incbin	"startpos\lz3.bin"
00006D76                            		incbin	"startpos\sbz3.bin"
00006D7A                            
00006D7A                            		incbin	"startpos\mz1.bin"
00006D7E                            		incbin	"startpos\mz2.bin"
00006D82                            		incbin	"startpos\mz3.bin"
00006D86 0080 00A8                  		dc.w	$80,$A8
00006D8A                            
00006D8A                            		incbin	"startpos\slz1.bin"
00006D8E                            		incbin	"startpos\slz2.bin"
00006D92                            		incbin	"startpos\slz3.bin"
00006D96 0080 00A8                  		dc.w	$80,$A8
00006D9A                            
00006D9A                            		incbin	"startpos\syz1.bin"
00006D9E                            		incbin	"startpos\syz2.bin"
00006DA2                            		incbin	"startpos\syz3.bin"
00006DA6 0080 00A8                  		dc.w	$80,$A8
00006DAA                            
00006DAA                            		incbin	"startpos\sbz1.bin"
00006DAE                            		incbin	"startpos\sbz2.bin"
00006DB2                            		incbin	"startpos\fz.bin"
00006DB6 0080 00A8                  		dc.w	$80,$A8
00006DBA                            
00006DBA                            
00006DBA                            		incbin	"startpos\end1.bin"
00006DBE                            		incbin	"startpos\end2.bin"
00006DC2 0080 00A8                  		dc.w	$80,$A8
00006DC6 0080 00A8                  		dc.w	$80,$A8
00006DCA                            
00006DCA                            		even
00006DCA                            		even
00006DCA                            
00006DCA                            ; ---------------------------------------------------------------------------
00006DCA                            ; Which	256x256	tiles contain loops or roll-tunnels
00006DCA                            ; ---------------------------------------------------------------------------
00006DCA                            
00006DCA                            LoopTileNums:
00006DCA                            
00006DCA                            ; 		loop	loop	tunnel	tunnel
00006DCA                            
00006DCA B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00006DCE 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00006DD2 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00006DD6 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00006DDA 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00006DDE 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00006DE2 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00006DE6                            
00006DE6                            		even
00006DE6                            
00006DE6                            ; ---------------------------------------------------------------------------
00006DE6                            ; Subroutine to	set scroll speed of some backgrounds
00006DE6                            ; ---------------------------------------------------------------------------
00006DE6                            
00006DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DE6                            
00006DE6                            
00006DE6                            BgScrollSpeed:
00006DE6 4A38 FE30                  		tst.b	(v_lastlamp).w
00006DEA 6600                       		bne.s	loc_6206
00006DEC 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006DF0 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00006DF4 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00006DF8 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
00006DFC 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00006E00                            
00006E00                            loc_6206:
00006E00 7400                       		moveq	#0,d2
00006E02 1438 FE10                  		move.b	(v_zone).w,d2
00006E06 D442                       		add.w	d2,d2
00006E08 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006E0C 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006E10                            ; End of function BgScrollSpeed
00006E10                            
00006E10                            ; ===========================================================================
00006E10 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006E14 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006E18 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006E1C 0000                       		dc.w BgScroll_End-BgScroll_Index
00006E1E                            ; ===========================================================================
00006E1E                            
00006E1E                            BgScroll_GHZ:
00006E1E 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E22 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00006E26 42B8 F714                  		clr.l	(v_bg2screenposy).w
00006E2A 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00006E2E 45F8 A800                  		lea	($FFFFA800).w,a2
00006E32 429A                       		clr.l	(a2)+
00006E34 429A                       		clr.l	(a2)+
00006E36 429A                       		clr.l	(a2)+
00006E38 4E75                       		rts
00006E3A                            ; ===========================================================================
00006E3A                            
00006E3A                            BgScroll_LZ:
00006E3A E280                       		asr.l	#1,d0
00006E3C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E40 4E75                       		rts	
00006E42                            ; ===========================================================================
00006E42                            
00006E42                            BgScroll_MZ:
00006E42 4E75                       		rts	
00006E44                            ; ===========================================================================
00006E44                            
00006E44                            BgScroll_SLZ:
00006E44 E280                       		asr.l	#1,d0
00006E46 0640 00C0                  		addi.w	#$C0,d0
00006E4A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E4E 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E52 4E75                       		rts	
00006E54                            ; ===========================================================================
00006E54                            
00006E54                            BgScroll_SYZ:
00006E54 E980                       		asl.l	#4,d0
00006E56 2400                       		move.l	d0,d2
00006E58 E380                       		asl.l	#1,d0
00006E5A D082                       		add.l	d2,d0
00006E5C E080                       		asr.l	#8,d0
00006E5E 5240                       		addq.w	#1,d0
00006E60 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E64 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006E68 4E75                       		rts	
00006E6A                            ; ===========================================================================
00006E6A                            
00006E6A                            BgScroll_SBZ:
00006E6A 0240 07F8                  		andi.w	#$7F8,d0
00006E6E E640                       		asr.w	#3,d0
00006E70 5240                       		addq.w	#1,d0
00006E72 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006E76 4E75                       		rts	
00006E78                            ; ===========================================================================
00006E78                            
00006E78                            BgScroll_End:
00006E78 3038 F700                  		move.w	(v_screenposx).w,d0
00006E7C E240                       		asr.w	#1,d0
00006E7E 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00006E82 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00006E86 E440                       		asr.w	#2,d0
00006E88 3200                       		move.w	d0,d1
00006E8A D040                       		add.w	d0,d0
00006E8C D041                       		add.w	d1,d0
00006E8E 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00006E92 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00006E96 42B8 F714                  		clr.l	(v_bg2screenposy).w
00006E9A 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00006E9E 45F8 A800                  		lea	($FFFFA800).w,a2
00006EA2 429A                       		clr.l	(a2)+
00006EA4 429A                       		clr.l	(a2)+
00006EA6 429A                       		clr.l	(a2)+
00006EA8 4E75                       		rts
00006EA8 4E75                       		rts
00006EAA                            		include	"_inc\DeformLayers (JP1).asm"
00006EAA                            ; ---------------------------------------------------------------------------
00006EAA                            ; Background layer deformation subroutines
00006EAA                            ; ---------------------------------------------------------------------------
00006EAA                            
00006EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EAA                            
00006EAA                            
00006EAA                            DeformLayers:
00006EAA 4A38 F744                  		tst.b	(f_nobgscroll).w
00006EAE 6700                       		beq.s	@bgscroll
00006EB0 4E75                       		rts	
00006EB2                            ; ===========================================================================
00006EB2                            
00006EB2                            	@bgscroll:
00006EB2 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00006EB6 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00006EBA 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00006EBE 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00006EC2 6100 0000                  		bsr.w	ScrollHoriz
00006EC6 6100 0000                  		bsr.w	ScrollVertical
00006ECA 6100 0000                  		bsr.w	DynamicLevelEvents
00006ECE 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00006ED4 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00006EDA 7000                       		moveq	#0,d0
00006EDC 1038 FE10                  		move.b	(v_zone).w,d0
00006EE0 D040                       		add.w	d0,d0
00006EE2 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006EE6 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006EEA                            ; End of function DeformLayers
00006EEA                            
00006EEA                            ; ===========================================================================
00006EEA                            ; ---------------------------------------------------------------------------
00006EEA                            ; Offset index for background layer deformation	code
00006EEA                            ; ---------------------------------------------------------------------------
00006EEA 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006EEE 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006EF2 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006EF6 0000                       		dc.w Deform_GHZ-Deform_Index
00006EF8                            ; ---------------------------------------------------------------------------
00006EF8                            ; Green	Hill Zone background layer deformation code
00006EF8                            ; ---------------------------------------------------------------------------
00006EF8                            
00006EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EF8                            
00006EF8                            
00006EF8                            Deform_GHZ:
00006EF8                            	;cmpi.b    #id_Title,(v_gamemode).w
00006EF8                            	;beq.w    Deform_Title
00006EF8                            
00006EF8                            ;Deform_GHZ_Stage:
00006EF8                            	; block 3 - distant mountains
00006EF8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006EFC 48C4                       		ext.l	d4
00006EFE EB84                       		asl.l	#5,d4
00006F00 2204                       		move.l	d4,d1
00006F02 E384                       		asl.l	#1,d4
00006F04 D881                       		add.l	d1,d4
00006F06 7C00                       		moveq	#0,d6
00006F08 6100 0000                  		bsr.w	BGScroll_Block3
00006F0C                            	; block 2 - hills & waterfalls
00006F0C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006F10 48C4                       		ext.l	d4
00006F12 EF84                       		asl.l	#7,d4
00006F14 7C00                       		moveq	#0,d6
00006F16 6100 0000                  		bsr.w	BGScroll_Block2
00006F1A                            	; calculate Y position
00006F1A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00006F1E 3038 F704                  		move.w	(v_screenposy).w,d0
00006F22 0240 07FF                  		andi.w	#$7FF,d0
00006F26 EA48                       		lsr.w	#5,d0
00006F28 4440                       		neg.w	d0
00006F2A 0640 0020                  		addi.w	#$20,d0
00006F2E 6A00                       		bpl.s	@limitY
00006F30 7000                       		moveq	#0,d0
00006F32                            	@limitY:
00006F32 3800                       		move.w	d0,d4
00006F34 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00006F38 3038 F700                  		move.w	(v_screenposx).w,d0
00006F3C 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00006F42 6600                       		bne.s	@notTitle
00006F44 7000                       		moveq	#0,d0	; reset foreground position in title screen
00006F46                            	@notTitle:
00006F46 4440                       		neg.w	d0
00006F48 4840                       		swap	d0
00006F4A                            	; auto-scroll clouds
00006F4A 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00006F4E 069A 0001 0000             		addi.l	#$10000,(a2)+
00006F54 069A 0000 C000             		addi.l	#$C000,(a2)+
00006F5A 069A 0000 8000             		addi.l	#$8000,(a2)+
00006F60                            	; calculate background scroll	
00006F60 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
00006F64 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F68 4440                       		neg.w	d0
00006F6A 323C 001F                  		move.w	#$1F,d1
00006F6E 9244                       		sub.w	d4,d1
00006F70 6500                       		bcs.s	@gotoCloud2
00006F72                            	@cloudLoop1:		; upper cloud (32px)
00006F72 22C0                       		move.l	d0,(a1)+
00006F74 51C9 FFFC                  		dbf	d1,@cloudLoop1
00006F78                            
00006F78                            	@gotoCloud2:
00006F78 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00006F7C D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F80 4440                       		neg.w	d0
00006F82 323C 000F                  		move.w	#$F,d1
00006F86                            	@cloudLoop2:		; middle cloud (16px)
00006F86 22C0                       		move.l	d0,(a1)+
00006F88 51C9 FFFC                  		dbf	d1,@cloudLoop2
00006F8C                            
00006F8C 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00006F90 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006F94 4440                       		neg.w	d0
00006F96 323C 000F                  		move.w	#$F,d1
00006F9A                            	@cloudLoop3:		; lower cloud (16px)
00006F9A 22C0                       		move.l	d0,(a1)+
00006F9C 51C9 FFFC                  		dbf	d1,@cloudLoop3
00006FA0                            
00006FA0 323C 002F                  		move.w	#$2F,d1
00006FA4 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00006FA8 4440                       		neg.w	d0
00006FAA                            	@mountainLoop:		; distant mountains (48px)
00006FAA 22C0                       		move.l	d0,(a1)+
00006FAC 51C9 FFFC                  		dbf	d1,@mountainLoop
00006FB0                            
00006FB0 323C 0027                  		move.w	#$27,d1
00006FB4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00006FB8 4440                       		neg.w	d0
00006FBA                            	@hillLoop:			; hills & waterfalls (40px)
00006FBA 22C0                       		move.l	d0,(a1)+
00006FBC 51C9 FFFC                  		dbf	d1,@hillLoop
00006FC0                            
00006FC0 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00006FC4 3438 F700                  		move.w	(v_screenposx).w,d2
00006FC8 9440                       		sub.w	d0,d2
00006FCA 48C2                       		ext.l	d2
00006FCC E182                       		asl.l	#8,d2
00006FCE 85FC 0068                  		divs.w	#$68,d2
00006FD2 48C2                       		ext.l	d2
00006FD4 E182                       		asl.l	#8,d2
00006FD6 7600                       		moveq	#0,d3
00006FD8 3600                       		move.w	d0,d3
00006FDA 323C 0047                  		move.w	#$47,d1
00006FDE D244                       		add.w	d4,d1
00006FE0                            	@waterLoop:			; water deformation
00006FE0 3003                       		move.w	d3,d0
00006FE2 4440                       		neg.w	d0
00006FE4 22C0                       		move.l	d0,(a1)+
00006FE6 4843                       		swap	d3
00006FE8 D682                       		add.l	d2,d3
00006FEA 4843                       		swap	d3
00006FEC 51C9 FFF2                  		dbf	d1,@waterLoop
00006FF0 4E75                       		rts
00006FF2                            ; End of function Deform_GHZ
00006FF2                            
00006FF2                            Deform_Title:
00006FF2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00006FF6 48C4                       		ext.l	d4
00006FF8 EB84                       		asl.l	#5,d4
00006FFA 2204                       		move.l	d4,d1
00006FFC E384                       		asl.l	#1,d4
00006FFE D881                       		add.l	d1,d4
00007000 7A00                       		moveq	#0,d5
00007002 6100 0000                  		bsr.w	BGScroll_Block1
00007006 6100 0000                  		bsr.w	BGScroll_Block3
0000700A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000700E 3038 F704                  		move.w	(v_screenposy).w,d0
00007012 0240 07FF                  		andi.w	#$7FF,d0
00007016 EA48                       		lsr.w	#5,d0
00007018 4440                       		neg.w	d0
0000701A 0640 0026                  		addi.w	#$26,d0
0000701E 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007022 3800                       		move.w	d0,d4
00007024 6100 0000                  		bsr.w	BGScroll_Block3
00007028 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000702E 323C 006F                  		move.w	#$6F,d1
00007032 9244                       		sub.w	d4,d1
00007034 3038 F700                  		move.w	(v_screenposx).w,d0
00007038 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000703E 6600                       		bne.s	loc_633C
00007040 7000                       		moveq	#0,d0
00007042                            
00007042                            loc_633C:
00007042 4440                       		neg.w	d0
00007044 4840                       		swap	d0
00007046 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000704A 4440                       		neg.w	d0
0000704C                            
0000704C                            loc_6346:
0000704C 22C0                       		move.l	d0,(a1)+
0000704E 51C9 FFFC                  		dbf	d1,loc_6346
00007052 323C 0027                  		move.w	#$27,d1
00007056 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000705A 4440                       		neg.w	d0
0000705C                            
0000705C                            loc_6356:
0000705C 22C0                       		move.l	d0,(a1)+
0000705E 51C9 FFFC                  		dbf	d1,loc_6356
00007062 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007066 0640 0000                  		addi.w	#0,d0
0000706A 3438 F700                  		move.w	(v_screenposx).w,d2
0000706E 0642 FE00                  		addi.w	#-$200,d2
00007072 9440                       		sub.w	d0,d2
00007074 48C2                       		ext.l	d2
00007076 E182                       		asl.l	#8,d2
00007078 85FC 0068                  		divs.w	#$68,d2
0000707C 48C2                       		ext.l	d2
0000707E E182                       		asl.l	#8,d2
00007080 7600                       		moveq	#0,d3
00007082 3600                       		move.w	d0,d3
00007084 323C 0047                  		move.w	#$47,d1
00007088 D244                       		add.w	d4,d1
0000708A                            
0000708A                            loc_6384:
0000708A 3003                       		move.w	d3,d0
0000708C 4440                       		neg.w	d0
0000708E 22C0                       		move.l	d0,(a1)+
00007090 4843                       		swap	d3
00007092 D682                       		add.l	d2,d3
00007094 4843                       		swap	d3
00007096 51C9 FFF2                  		dbf	d1,loc_6384
0000709A 4E75                       		rts	
0000709C                            
0000709C                            ; ===========================================================================
0000709C                            ; ---------------------------------------------------------------------------
0000709C                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
0000709C                            ; ---------------------------------------------------------------------------
0000709C                             
0000709C                            Deform_LZ:
0000709C 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
0000709E 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
000070A2 48C4                       		ext.l	d4					; extend to long-word signed
000070A4 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
000070A6 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
000070AA 48C5                       		ext.l	d5					; extend to long-word signed
000070AC E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
000070AE 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
000070B2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
000070B8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
000070BC 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
000070C0 4440                       		neg.w	d0					; reverse
000070C2 4840                       		swap	d0					; send to upper word
000070C4 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
000070C8 4440                       		neg.w	d0					; reverse
000070CA 7600                       		moveq	#$00,d3					; clear d3
000070CC 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
000070D0 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
000070D6 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
000070DA 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
000070DE 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
000070E2 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
000070E4 B242                       		cmp.w	d2,d1					; is the water line below the screen?
000070E6 6F00                       		ble.s	DLZ_NoWater				; if not, branch
000070E8 3202                       		move.w	d2,d1					; set at maximum
000070EA                             
000070EA                            DLZ_NoWater:
000070EA 9441                       		sub.w	d1,d2					; subtract from water-line count
000070EC D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
000070EE 5301                       		subq.b	#$01,d1					; decrease above water count
000070F0 6500                       		bcs.s	DLZ_Water				; if finished, branch
000070F2                             
000070F2                            DLZ_Above:
000070F2 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
000070F4 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
000070F8                             
000070F8                            DLZ_Water:
000070F8 5302                       		subq.b	#$01,d2					; decrease below water count
000070FA 6500                       		bcs.s	DLZ_Finish				; if finished, branch
000070FC 3200                       		move.w	d0,d1					; copy BG position back to d1
000070FE 4840                       		swap	d0					; move FG position back to lower word in d0
00007100 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007102 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007106 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
0000710A D643                       		add.w	d3,d3					; multiply by word size (2)
0000710C D844                       		add.w	d4,d4					; ''
0000710E 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007114 D6C4                       		adda.w	d4,a3					; advance to correct starting point
00007116 1813                       		move.b	(a3),d4					; get current position byte
00007118 E404                       		asr.b	#$02,d4					; get only the position bits
0000711A 4884                       		ext.w	d4					; extend to word
0000711C D244                       		add.w	d4,d1					; adjust BG's current position
0000711E 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
00007122 1812                       		move.b	(a2),d4					; get current position byte
00007124 E404                       		asr.b	#$02,d4					; get only the position bits
00007126 4884                       		ext.w	d4					; extend to word
00007128 D044                       		add.w	d4,d0					; adjust FG's current position
0000712A                             
0000712A                            DLZ_Below:
0000712A D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
0000712C 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
0000712E D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
00007130 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
00007132 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00007136                             
00007136                            DLZ_Finish:
00007136 4E75                       		rts						; return
00007138                             
00007138                            ; ---------------------------------------------------------------------------
00007138                            ; Scroll data for the FG
00007138                            ; ---------------------------------------------------------------------------
00007138                             
00007138                            DLZ_WaveFG:
00007138                            		rept	$02
00007138                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007138 0001 0400 0401 0800 0801+  		endr
00007538                             
00007538                            ; ---------------------------------------------------------------------------
00007538                            ; Scroll data for the BG
00007538                            ; ---------------------------------------------------------------------------
00007538                             
00007538                            DLZ_WaveBG:	rept	$04
00007538                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00007538                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00007538                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00007538                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00007538                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00007538                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00007538                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00007538                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00007538 FC01 0000 0000 0000 0000+  		endr
00007938                             
00007938                            ; ===========================================================================
00007938                            ; End of function Deform_LZ
00007938                            
00007938                            ; ---------------------------------------------------------------------------
00007938                            ; Marble Zone background layer deformation code
00007938                            ; ---------------------------------------------------------------------------
00007938                            
00007938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007938                            
00007938                            
00007938                            Deform_MZ:
00007938                            	; block 1 - dungeon interior
00007938 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000793C 48C4                       		ext.l	d4
0000793E ED84                       		asl.l	#6,d4
00007940 2204                       		move.l	d4,d1
00007942 E384                       		asl.l	#1,d4
00007944 D881                       		add.l	d1,d4
00007946 7C02                       		moveq	#2,d6
00007948 6100 0000                  		bsr.w	BGScroll_Block1
0000794C                            	; block 3 - mountains
0000794C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007950 48C4                       		ext.l	d4
00007952 ED84                       		asl.l	#6,d4
00007954 7C06                       		moveq	#6,d6
00007956 6100 0000                  		bsr.w	BGScroll_Block3
0000795A                            	; block 2 - bushes & antique buildings
0000795A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000795E 48C4                       		ext.l	d4
00007960 EF84                       		asl.l	#7,d4
00007962 7C04                       		moveq	#4,d6
00007964 6100 0000                  		bsr.w	BGScroll_Block2
00007968                            	; calculate y-position of background
00007968 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
0000796C 3238 F704                  		move.w	(v_screenposy).w,d1
00007970 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007974 6500                       		bcs.s	@noYscroll
00007976 3401                       		move.w	d1,d2
00007978 D241                       		add.w	d1,d1
0000797A D242                       		add.w	d2,d1
0000797C E441                       		asr.w	#2,d1
0000797E D041                       		add.w	d1,d0
00007980                            	@noYscroll:
00007980 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007984 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007988 6100 0000                  		bsr.w	BGScroll_YAbsolute
0000798C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007992                            	; do something with redraw flags
00007992 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007996 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
0000799A 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
0000799E 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
000079A2 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
000079A6                            	; calculate background scroll buffer
000079A6 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000079AA 3438 F700                  		move.w	(v_screenposx).w,d2
000079AE 4442                       		neg.w	d2
000079B0 3002                       		move.w	d2,d0
000079B2 E440                       		asr.w	#2,d0
000079B4 9042                       		sub.w	d2,d0
000079B6 48C0                       		ext.l	d0
000079B8 E780                       		asl.l	#3,d0
000079BA 81FC 0005                  		divs.w	#5,d0
000079BE 48C0                       		ext.l	d0
000079C0 E980                       		asl.l	#4,d0
000079C2 E180                       		asl.l	#8,d0
000079C4 7600                       		moveq	#0,d3
000079C6 3602                       		move.w	d2,d3
000079C8 E243                       		asr.w	#1,d3
000079CA 323C 0004                  		move.w	#4,d1
000079CE                            	@cloudLoop:		
000079CE 32C3                       		move.w	d3,(a1)+
000079D0 4843                       		swap	d3
000079D2 D680                       		add.l	d0,d3
000079D4 4843                       		swap	d3
000079D6 51C9 FFF6                  		dbf	d1,@cloudLoop
000079DA                            
000079DA 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000079DE 4440                       		neg.w	d0
000079E0 323C 0001                  		move.w	#1,d1
000079E4                            	@mountainLoop:		
000079E4 32C0                       		move.w	d0,(a1)+
000079E6 51C9 FFFC                  		dbf	d1,@mountainLoop
000079EA                            
000079EA 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000079EE 4440                       		neg.w	d0
000079F0 323C 0008                  		move.w	#8,d1
000079F4                            	@bushLoop:		
000079F4 32C0                       		move.w	d0,(a1)+
000079F6 51C9 FFFC                  		dbf	d1,@bushLoop
000079FA                            
000079FA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000079FE 4440                       		neg.w	d0
00007A00 323C 000F                  		move.w	#$F,d1
00007A04                            	@interiorLoop:		
00007A04 32C0                       		move.w	d0,(a1)+
00007A06 51C9 FFFC                  		dbf	d1,@interiorLoop
00007A0A                            
00007A0A 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007A0E 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007A12 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007A16 3400                       		move.w	d0,d2
00007A18 0C40 0100                  		cmpi.w	#$100,d0
00007A1C 6500                       		bcs.s	@limitY
00007A1E 303C 0100                  		move.w	#$100,d0
00007A22                            	@limitY:
00007A22 0240 01F0                  		andi.w	#$1F0,d0
00007A26 E648                       		lsr.w	#3,d0
00007A28 45F2 0000                  		lea	(a2,d0),a2
00007A2C 6000 0000                  		bra.w	Bg_Scroll_X
00007A30                            ; End of function Deform_MZ
00007A30                            
00007A30                            ; ---------------------------------------------------------------------------
00007A30                            ; Star Light Zone background layer deformation code
00007A30                            ; ---------------------------------------------------------------------------
00007A30                            
00007A30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A30                            
00007A30                            
00007A30                            Deform_SLZ:
00007A30                            	; vertical scrolling
00007A30 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007A34 48C5                       		ext.l	d5
00007A36 EF85                       		asl.l	#7,d5
00007A38 6100 0000                  		bsr.w	Bg_Scroll_Y
00007A3C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007A42                            	; calculate background scroll buffer
00007A42 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007A46 3438 F700                  		move.w	(v_screenposx).w,d2
00007A4A 4442                       		neg.w	d2
00007A4C 3002                       		move.w	d2,d0
00007A4E E640                       		asr.w	#3,d0
00007A50 9042                       		sub.w	d2,d0
00007A52 48C0                       		ext.l	d0
00007A54 E980                       		asl.l	#4,d0
00007A56 81FC 001C                  		divs.w	#$1C,d0
00007A5A 48C0                       		ext.l	d0
00007A5C E980                       		asl.l	#4,d0
00007A5E E180                       		asl.l	#8,d0
00007A60 7600                       		moveq	#0,d3
00007A62 3602                       		move.w	d2,d3
00007A64 323C 001B                  		move.w	#$1B,d1
00007A68                            	@starLoop:		
00007A68 32C3                       		move.w	d3,(a1)+
00007A6A 4843                       		swap	d3
00007A6C D680                       		add.l	d0,d3
00007A6E 4843                       		swap	d3
00007A70 51C9 FFF6                  		dbf	d1,@starLoop
00007A74                            
00007A74 3002                       		move.w	d2,d0
00007A76 E640                       		asr.w	#3,d0
00007A78 3200                       		move.w	d0,d1
00007A7A E241                       		asr.w	#1,d1
00007A7C D041                       		add.w	d1,d0
00007A7E 323C 0004                  		move.w	#4,d1
00007A82                            	@buildingLoop1:		; distant black buildings
00007A82 32C0                       		move.w	d0,(a1)+
00007A84 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007A88                            
00007A88 3002                       		move.w	d2,d0
00007A8A E440                       		asr.w	#2,d0
00007A8C 323C 0004                  		move.w	#4,d1
00007A90                            	@buildingLoop2:		; closer buildings
00007A90 32C0                       		move.w	d0,(a1)+
00007A92 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007A96                            
00007A96 3002                       		move.w	d2,d0
00007A98 E240                       		asr.w	#1,d0
00007A9A 323C 001D                  		move.w	#$1D,d1
00007A9E                            	@bottomLoop:		; bottom part of background
00007A9E 32C0                       		move.w	d0,(a1)+
00007AA0 51C9 FFFC                  		dbf	d1,@bottomLoop
00007AA4                            
00007AA4 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007AA8 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007AAC 3400                       		move.w	d0,d2
00007AAE 0440 00C0                  		subi.w	#$C0,d0
00007AB2 0240 03F0                  		andi.w	#$3F0,d0
00007AB6 E648                       		lsr.w	#3,d0
00007AB8 45F2 0000                  		lea	(a2,d0),a2
00007ABC                            ;-------------------------------------------------------------------------------
00007ABC                            ;-------------------------------------------------------------------------------
00007ABC                            Bg_Scroll_X:
00007ABC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007AC0 323C 000E                  		move.w	#$E,d1
00007AC4 3038 F700                  		move.w	(v_screenposx).w,d0
00007AC8 4440                       		neg.w	d0
00007ACA 4840                       		swap	d0
00007ACC 0242 000F                  		andi.w	#$F,d2
00007AD0 D442                       		add.w	d2,d2
00007AD2 301A                       		move.w	(a2)+,d0
00007AD4 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007AD8                            	@blockLoop:
00007AD8 301A                       		move.w	(a2)+,d0
00007ADA                            	@pixelJump:		
00007ADA 22C0                       		move.l	d0,(a1)+
00007ADC 22C0                       		move.l	d0,(a1)+
00007ADE 22C0                       		move.l	d0,(a1)+
00007AE0 22C0                       		move.l	d0,(a1)+
00007AE2 22C0                       		move.l	d0,(a1)+
00007AE4 22C0                       		move.l	d0,(a1)+
00007AE6 22C0                       		move.l	d0,(a1)+
00007AE8 22C0                       		move.l	d0,(a1)+
00007AEA 22C0                       		move.l	d0,(a1)+
00007AEC 22C0                       		move.l	d0,(a1)+
00007AEE 22C0                       		move.l	d0,(a1)+
00007AF0 22C0                       		move.l	d0,(a1)+
00007AF2 22C0                       		move.l	d0,(a1)+
00007AF4 22C0                       		move.l	d0,(a1)+
00007AF6 22C0                       		move.l	d0,(a1)+
00007AF8 22C0                       		move.l	d0,(a1)+
00007AFA 51C9 FFDC                  		dbf	d1,@blockLoop
00007AFE 4E75                       		rts
00007B00                            
00007B00                            ; ---------------------------------------------------------------------------
00007B00                            ; Spring Yard Zone background layer deformation	code
00007B00                            ; ---------------------------------------------------------------------------
00007B00                            
00007B00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B00                            
00007B00                            
00007B00                            Deform_SYZ:
00007B00                            	; vertical scrolling
00007B00 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007B04 48C5                       		ext.l	d5
00007B06 E985                       		asl.l	#4,d5
00007B08 2205                       		move.l	d5,d1
00007B0A E385                       		asl.l	#1,d5
00007B0C DA81                       		add.l	d1,d5
00007B0E 6100 0000                  		bsr.w	Bg_Scroll_Y
00007B12 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007B18                            	; calculate background scroll buffer
00007B18 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007B1C 3438 F700                  		move.w	(v_screenposx).w,d2
00007B20 4442                       		neg.w	d2
00007B22 3002                       		move.w	d2,d0
00007B24 E640                       		asr.w	#3,d0
00007B26 9042                       		sub.w	d2,d0
00007B28 48C0                       		ext.l	d0
00007B2A E780                       		asl.l	#3,d0
00007B2C 81FC 0008                  		divs.w	#8,d0
00007B30 48C0                       		ext.l	d0
00007B32 E980                       		asl.l	#4,d0
00007B34 E180                       		asl.l	#8,d0
00007B36 7600                       		moveq	#0,d3
00007B38 3602                       		move.w	d2,d3
00007B3A E243                       		asr.w	#1,d3
00007B3C 323C 0007                  		move.w	#7,d1
00007B40                            	@cloudLoop:		
00007B40 32C3                       		move.w	d3,(a1)+
00007B42 4843                       		swap	d3
00007B44 D680                       		add.l	d0,d3
00007B46 4843                       		swap	d3
00007B48 51C9 FFF6                  		dbf	d1,@cloudLoop
00007B4C                            
00007B4C 3002                       		move.w	d2,d0
00007B4E E640                       		asr.w	#3,d0
00007B50 323C 0004                  		move.w	#4,d1
00007B54                            	@mountainLoop:		
00007B54 32C0                       		move.w	d0,(a1)+
00007B56 51C9 FFFC                  		dbf	d1,@mountainLoop
00007B5A                            
00007B5A 3002                       		move.w	d2,d0
00007B5C E440                       		asr.w	#2,d0
00007B5E 323C 0005                  		move.w	#5,d1
00007B62                            	@buildingLoop:		
00007B62 32C0                       		move.w	d0,(a1)+
00007B64 51C9 FFFC                  		dbf	d1,@buildingLoop
00007B68                            
00007B68 3002                       		move.w	d2,d0
00007B6A 3202                       		move.w	d2,d1
00007B6C E241                       		asr.w	#1,d1
00007B6E 9041                       		sub.w	d1,d0
00007B70 48C0                       		ext.l	d0
00007B72 E980                       		asl.l	#4,d0
00007B74 81FC 000E                  		divs.w	#$E,d0
00007B78 48C0                       		ext.l	d0
00007B7A E980                       		asl.l	#4,d0
00007B7C E180                       		asl.l	#8,d0
00007B7E 7600                       		moveq	#0,d3
00007B80 3602                       		move.w	d2,d3
00007B82 E243                       		asr.w	#1,d3
00007B84 323C 000D                  		move.w	#$D,d1
00007B88                            	@bushLoop:		
00007B88 32C3                       		move.w	d3,(a1)+
00007B8A 4843                       		swap	d3
00007B8C D680                       		add.l	d0,d3
00007B8E 4843                       		swap	d3
00007B90 51C9 FFF6                  		dbf	d1,@bushLoop
00007B94                            
00007B94 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007B98 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007B9C 3400                       		move.w	d0,d2
00007B9E 0240 01F0                  		andi.w	#$1F0,d0
00007BA2 E648                       		lsr.w	#3,d0
00007BA4 45F2 0000                  		lea	(a2,d0),a2
00007BA8 6000 FF12                  		bra.w	Bg_Scroll_X
00007BAC                            ; End of function Deform_SYZ
00007BAC                            
00007BAC                            ; ---------------------------------------------------------------------------
00007BAC                            ; Scrap	Brain Zone background layer deformation	code
00007BAC                            ; ---------------------------------------------------------------------------
00007BAC                            
00007BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BAC                            
00007BAC                            
00007BAC                            Deform_SBZ:
00007BAC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BB0 48C4                       		ext.l	d4
00007BB2 ED84                       		asl.l	#6,d4
00007BB4 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007BB8 48C5                       		ext.l	d5
00007BBA E985                       		asl.l	#4,d5
00007BBC E385                       		asl.l	#1,d5
00007BBE 6100 0000                  		bsr.w	BGScroll_XY
00007BC2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007BC8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007BCC 323C 00DF                  		move.w	#223,d1
00007BD0 3038 F700                  		move.w	(v_screenposx).w,d0
00007BD4 4440                       		neg.w	d0
00007BD6 4840                       		swap	d0
00007BD8 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007BDC 4440                       		neg.w	d0
00007BDE                            
00007BDE                            loc_6576:
00007BDE 22C0                       		move.l	d0,(a1)+
00007BE0 51C9 FFFC                  		dbf	d1,loc_6576
00007BE4 4E75                       		rts	
00007BE6                            ;-------------------------------------------------------------------------------
00007BE6                            Deform_SBZ2:;loc_68A2:
00007BE6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BEA 48C4                       		ext.l	d4
00007BEC ED84                       		asl.l	#6,d4
00007BEE 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007BF2 48C5                       		ext.l	d5
00007BF4 E985                       		asl.l	#4,d5
00007BF6 E385                       		asl.l	#1,d5
00007BF8 6100 0000                  		bsr.w	BGScroll_XY
00007BFC 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C02 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007C06 323C 00DF                  		move.w	#223,d1
00007C0A 3038 F700                  		move.w	(v_screenposx).w,d0
00007C0E 4440                       		neg.w	d0
00007C10 4840                       		swap	d0
00007C12 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C16 4440                       		neg.w	d0
00007C18                            
00007C18                            loc_6577:
00007C18 22C0                       		move.l	d0,(a1)+
00007C1A 51C9 FFFC                  		dbf	d1,loc_6577
00007C1E 4E75                       		rts	
00007C20                            
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            
00007C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C20                            
00007C20                            
00007C20                            ScrollHoriz:
00007C20 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007C24 6100                       		bsr.s	MoveScreenHoriz
00007C26 3038 F700                  		move.w	(v_screenposx).w,d0
00007C2A 0240 0010                  		andi.w	#$10,d0
00007C2E 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007C32 B300                       		eor.b	d1,d0
00007C34 6600                       		bne.s	@return
00007C36 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007C3C 3038 F700                  		move.w	(v_screenposx).w,d0
00007C40 9044                       		sub.w	d4,d0		; compare new with old screen position
00007C42 6A00                       		bpl.s	@scrollRight
00007C44                            
00007C44 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007C4A 4E75                       		rts	
00007C4C                            
00007C4C                            	@scrollRight:
00007C4C 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007C52                            
00007C52                            	@return:
00007C52 4E75                       		rts	
00007C54                            ; End of function ScrollHoriz
00007C54                            
00007C54                            
00007C54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C54                            
00007C54                            MoveScreenHoriz:
00007C54 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007C58 6700 0000                  		beq.w	@cont		
00007C5C 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007C62                            		
00007C62                            	@cont:		
00007C62 3238 C904                  		move.w	($FFFFC904).w,d1
00007C66 6700                       		beq.s	@cont1
00007C68 0441 0100                  		sub.w	#$100,d1
00007C6C 31C1 C904                  		move.w	d1,($FFFFC904).w
00007C70 7200                       		moveq	#0,d1
00007C72 1238 C904                  		move.b	($FFFFC904).w,d1
00007C76 E509                       		lsl.b	#2,d1
00007C78 5801                       		addq.b	#4,d1
00007C7A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007C7E 9001                       		sub.b	d1,d0
00007C80 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007C84 3031 0000                  		move.w	(a1,d0.w),d0
00007C88 0240 3FFF                  		and.w	#$3FFF,d0
00007C8C 6000                       		bra.s	@cont2
00007C8E                            		
00007C8E                            @cont1:
00007C8E 3038 D008                  		move.w	($FFFFD008).w,d0
00007C92                            		
00007C92                            @cont2:
00007C92 9078 F700                  		sub.w	($FFFFF700).w,d0
00007C96 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007C9A 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007C9C 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007CA0 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007CA2 4278 F73A                          clr.w    (v_scrshiftx).w
00007CA6 4E75                               rts 
00007CA8                            ; ===========================================================================
00007CA8                            
00007CA8                            SH_AheadOfMid:
00007CA8 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007CAC 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007CAE 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007CB2                            
00007CB2                                SH_Ahead16:
00007CB2 D078 F700                          add.w    (v_screenposx).w,d0
00007CB6 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007CBA 6D00                               blt.s    SH_SetScreen
00007CBC 3038 F72A                          move.w    (v_limitright2).w,d0
00007CC0                            
00007CC0                            SH_SetScreen:
00007CC0 3200                               move.w    d0,d1
00007CC2 9278 F700                          sub.w    (v_screenposx).w,d1
00007CC6 E141                               asl.w    #8,d1
00007CC8 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007CCC 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007CD0 4E75                               rts 
00007CD2                            ; ===========================================================================
00007CD2                            
00007CD2                            SH_BehindMid:
00007CD2 0C40 FFF0                  		cmpi.w	#-$10,d0
00007CD6 6400                       		bcc.s	@cont
00007CD8 303C FFF0                  		move.w	#-$10,d0	
00007CDC                            
00007CDC                            @cont:
00007CDC D078 F700                  		add.w	(v_screenposx).w,d0
00007CE0 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007CE4 6EDA                       		bgt.s	SH_SetScreen
00007CE6 3038 F728                  		move.w	(v_limitleft2).w,d0
00007CEA 60D4                       		bra.s	SH_SetScreen
00007CEC                            ; End of function MoveScreenHoriz
00007CEC                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007CEC                            
00007CEC                            MoveScreenHorizEXT:
00007CEC 3238 C904                  		move.w	($FFFFC904).w,d1
00007CF0 6700                       		beq.s	@cont1
00007CF2 0441 0100                  		sub.w	#$100,d1
00007CF6 31C1 C904                  		move.w	d1,($FFFFC904).w
00007CFA 7200                       		moveq	#0,d1
00007CFC 1238 C904                  		move.b	($FFFFC904).w,d1
00007D00 E509                       		lsl.b	#2,d1
00007D02 5801                       		addq.b	#4,d1
00007D04 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007D08 9001                       		sub.b	d1,d0
00007D0A 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007D0E 3031 0000                  		move.w	(a1,d0.w),d0
00007D12 0240 3FFF                  		and.w	#$3FFF,d0
00007D16 6000                       		bra.s	@cont2
00007D18                            		
00007D18                            @cont1:
00007D18 3038 D008                  		move.w	($FFFFD008).w,d0
00007D1C                            		
00007D1C                            @cont2:
00007D1C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007D20 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007D24 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007D26 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007D28 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007D2A                            ; ===========================================================================
00007D2A                            
00007D2A                            SHEXT_ProperlyFramed:
00007D2A 4278 F73A                          clr.w    (v_scrshiftx).w
00007D2E 4E75                               rts 
00007D30                            ; ===========================================================================
00007D30                            
00007D30                            SHEXT_AheadOfMid:
00007D30 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007D34 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007D36 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007D3A                            
00007D3A                            SHEXT_Ahead16:
00007D3A D078 F700                          add.w    (v_screenposx).w,d0
00007D3E B078 F72A                          cmp.w    (v_limitright2).w,d0
00007D42 6D00                               blt.s    SHEXT_SetScreen
00007D44 3038 F72A                          move.w    (v_limitright2).w,d0
00007D48                            
00007D48                            SHEXT_SetScreen:
00007D48 3200                               move.w    d0,d1
00007D4A 9278 F700                          sub.w    (v_screenposx).w,d1
00007D4E E141                               asl.w    #8,d1
00007D50 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007D54 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007D58 4E75                               rts
00007D5A                            
00007D5A                            ; ===========================================================================
00007D5A                            
00007D5A                            SHEXT_BehindMid:
00007D5A 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007D5E 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007D60 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007D64                            
00007D64                            SHEXT_Behind16:
00007D64 D078 F700                          add.w    (v_screenposx).w,d0
00007D68 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007D6C 6EDA                               bgt.s    SHEXT_SetScreen
00007D6E 3038 F728                          move.w    (v_limitleft2).w,d0
00007D72 60D4                               bra.s    SHEXT_SetScreen
00007D74                                  
00007D74                            ; End of function MoveScreenHoriz
00007D74                            
00007D74                            
00007D74                            ; ---------------------------------------------------------------------------
00007D74                            ; Subroutine to	scroll the level vertically as Sonic moves
00007D74                            ; ---------------------------------------------------------------------------
00007D74                            
00007D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D74                            
00007D74                            
00007D74                            ScrollVertical:
00007D74 7200                       		moveq	#0,d1
00007D76 3038 D00C                  		move.w	(v_player+obY).w,d0
00007D7A 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007D7E 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007D84 6700                       		beq.s	SV_NotRolling	; if not, branch
00007D86 5B40                       		subq.w	#5,d0
00007D88                            
00007D88                            	SV_NotRolling:
00007D88 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007D8E 6700                       		beq.s	loc_664A	; if not, branch
00007D90                            
00007D90 0640 0020                  		addi.w	#32,d0
00007D94 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007D98 6500                       		bcs.s	loc_6696
00007D9A 0440 0040                  		subi.w	#64,d0
00007D9E 6400                       		bcc.s	loc_6696
00007DA0 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007DA4 6600                       		bne.s	loc_66A8
00007DA6 6000                       		bra.s	loc_6656
00007DA8                            ; ===========================================================================
00007DA8                            
00007DA8                            loc_664A:
00007DA8 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007DAC 6600                       		bne.s	loc_665C
00007DAE 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007DB2 6600                       		bne.s	loc_66A8
00007DB4                            
00007DB4                            loc_6656:
00007DB4 4278 F73C                  		clr.w	(v_scrshifty).w
00007DB8 4E75                       		rts	
00007DBA                            ; ===========================================================================
00007DBA                            
00007DBA                            loc_665C:
00007DBA 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007DC0 6600                       		bne.s	loc_6684
00007DC2 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007DC6 6A00                       		bpl.s	loc_666C
00007DC8 4441                       		neg.w	d1
00007DCA                            
00007DCA                            loc_666C:
00007DCA 0C41 0800                  		cmpi.w	#$800,d1
00007DCE 6400                       		bcc.s	loc_6696
00007DD0 323C 0600                  		move.w	#$600,d1
00007DD4 0C40 0006                  		cmpi.w	#6,d0
00007DD8 6E00                       		bgt.s	loc_66F6
00007DDA 0C40 FFFA                  		cmpi.w	#-6,d0
00007DDE 6D00                       		blt.s	loc_66C0
00007DE0 6000                       		bra.s	loc_66AE
00007DE2                            ; ===========================================================================
00007DE2                            
00007DE2                            loc_6684:
00007DE2 323C 0200                  		move.w	#$200,d1
00007DE6 0C40 0002                  		cmpi.w	#2,d0
00007DEA 6E00                       		bgt.s	loc_66F6
00007DEC 0C40 FFFE                  		cmpi.w	#-2,d0
00007DF0 6D00                       		blt.s	loc_66C0
00007DF2 6000                       		bra.s	loc_66AE
00007DF4                            ; ===========================================================================
00007DF4                            
00007DF4                            loc_6696:
00007DF4 323C 1000                  		move.w	#$1000,d1
00007DF8 0C40 0010                  		cmpi.w	#$10,d0
00007DFC 6E00                       		bgt.s	loc_66F6
00007DFE 0C40 FFF0                  		cmpi.w	#-$10,d0
00007E02 6D00                       		blt.s	loc_66C0
00007E04 6000                       		bra.s	loc_66AE
00007E06                            ; ===========================================================================
00007E06                            
00007E06                            loc_66A8:
00007E06 7000                       		moveq	#0,d0
00007E08 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007E0C                            
00007E0C                            loc_66AE:
00007E0C 7200                       		moveq	#0,d1
00007E0E 3200                       		move.w	d0,d1
00007E10 D278 F704                  		add.w	(v_screenposy).w,d1
00007E14 4A40                       		tst.w	d0
00007E16 6A00 0000                  		bpl.w	loc_6700
00007E1A 6000 0000                  		bra.w	loc_66CC
00007E1E                            ; ===========================================================================
00007E1E                            
00007E1E                            loc_66C0:
00007E1E 4441                       		neg.w	d1
00007E20 48C1                       		ext.l	d1
00007E22 E181                       		asl.l	#8,d1
00007E24 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007E28 4841                       		swap	d1
00007E2A                            
00007E2A                            loc_66CC:
00007E2A B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007E2E 6E00                       		bgt.s	loc_6724
00007E30 0C41 FF00                  		cmpi.w	#-$100,d1
00007E34 6E00                       		bgt.s	loc_66F0
00007E36 0241 07FF                  		andi.w	#$7FF,d1
00007E3A 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007E40 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007E46 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007E4C 6000                       		bra.s	loc_6724
00007E4E                            ; ===========================================================================
00007E4E                            
00007E4E                            loc_66F0:
00007E4E 3238 F72C                  		move.w	(v_limittop2).w,d1
00007E52 6000                       		bra.s	loc_6724
00007E54                            ; ===========================================================================
00007E54                            
00007E54                            loc_66F6:
00007E54 48C1                       		ext.l	d1
00007E56 E181                       		asl.l	#8,d1
00007E58 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007E5C 4841                       		swap	d1
00007E5E                            
00007E5E                            loc_6700:
00007E5E B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007E62 6D00                       		blt.s	loc_6724
00007E64 0441 0800                  		subi.w	#$800,d1
00007E68 6500                       		bcs.s	loc_6720
00007E6A 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007E70 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007E76 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007E7C 6000                       		bra.s	loc_6724
00007E7E                            ; ===========================================================================
00007E7E                            
00007E7E                            loc_6720:
00007E7E 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007E82                            
00007E82                            loc_6724:
00007E82 3838 F704                  		move.w	(v_screenposy).w,d4
00007E86 4841                       		swap	d1
00007E88 2601                       		move.l	d1,d3
00007E8A 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007E8E E09B                       		ror.l	#8,d3
00007E90 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007E94 21C1 F704                  		move.l	d1,(v_screenposy).w
00007E98 3038 F704                  		move.w	(v_screenposy).w,d0
00007E9C 0240 0010                  		andi.w	#$10,d0
00007EA0 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007EA4 B300                       		eor.b	d1,d0
00007EA6 6600                       		bne.s	@return
00007EA8 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007EAE 3038 F704                  		move.w	(v_screenposy).w,d0
00007EB2 9044                       		sub.w	d4,d0
00007EB4 6A00                       		bpl.s	@scrollBottom
00007EB6 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007EBC 4E75                       		rts	
00007EBE                            ; ===========================================================================
00007EBE                            
00007EBE                            	@scrollBottom:
00007EBE 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007EC4                            
00007EC4                            	@return:
00007EC4 4E75                       		rts	
00007EC6                            ; End of function ScrollVertical
00007EC6                            
00007EC6                            
00007EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EC6                            ; Scrolls background and sets redraw flags.
00007EC6                            ; d4 - background x offset * $10000
00007EC6                            ; d5 - background y offset * $10000
00007EC6                            
00007EC6                            BGScroll_XY:
00007EC6 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007ECA 2002                       		move.l	d2,d0
00007ECC D084                       		add.l	d4,d0
00007ECE 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007ED2 2200                       		move.l	d0,d1
00007ED4 4841                       		swap	d1
00007ED6 0241 0010                  		andi.w	#$10,d1
00007EDA 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007EDE B701                       		eor.b	d3,d1
00007EE0 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007EE2 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007EE8 9082                       		sub.l	d2,d0	; new - old
00007EEA 6A00                       		bpl.s	@scrollRight
00007EEC 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007EF2 6000                       		bra.s	BGScroll_YRelative
00007EF4                            	@scrollRight:
00007EF4 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007EFA                            BGScroll_YRelative:
00007EFA 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007EFE 2003                       		move.l	d3,d0
00007F00 D085                       		add.l	d5,d0
00007F02 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007F06 2200                       		move.l	d0,d1
00007F08 4841                       		swap	d1
00007F0A 0241 0010                  		andi.w	#$10,d1
00007F0E 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F12 B501                       		eor.b	d2,d1
00007F14 6600                       		bne.s	@return
00007F16 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F1C 9083                       		sub.l	d3,d0
00007F1E 6A00                       		bpl.s	@scrollBottom
00007F20 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007F26 4E75                       		rts
00007F28                            	@scrollBottom:
00007F28 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007F2E                            	@return:
00007F2E 4E75                       		rts
00007F30                            ; End of function BGScroll_XY
00007F30                            
00007F30                            Bg_Scroll_Y:
00007F30 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007F34 2003                       		move.l	d3,d0
00007F36 D085                       		add.l	d5,d0
00007F38 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007F3C 2200                       		move.l	d0,d1
00007F3E 4841                       		swap	d1
00007F40 0241 0010                  		andi.w	#$10,d1
00007F44 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F48 B501                       		eor.b	d2,d1
00007F4A 6600                       		bne.s	@return
00007F4C 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F52 9083                       		sub.l	d3,d0
00007F54 6A00                       		bpl.s	@scrollBottom
00007F56 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007F5C 4E75                       		rts
00007F5E                            	@scrollBottom:
00007F5E 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007F64                            	@return:
00007F64 4E75                       		rts
00007F66                            
00007F66                            
00007F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F66                            
00007F66                            
00007F66                            BGScroll_YAbsolute:
00007F66 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007F6A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007F6E 3200                       		move.w	d0,d1
00007F70 0241 0010                  		andi.w	#$10,d1
00007F74 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007F78 B501                       		eor.b	d2,d1
00007F7A 6600                       		bne.s	@return
00007F7C 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007F82 9043                       		sub.w	d3,d0
00007F84 6A00                       		bpl.s	@scrollBottom
00007F86 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007F8C 4E75                       		rts
00007F8E                            	@scrollBottom:
00007F8E 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007F94                            	@return:
00007F94 4E75                       		rts
00007F96                            ; End of function BGScroll_YAbsolute
00007F96                            
00007F96                            
00007F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F96                            ; d6 - bit to set for redraw
00007F96                            
00007F96                            BGScroll_Block1:
00007F96 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007F9A 2002                       		move.l	d2,d0
00007F9C D084                       		add.l	d4,d0
00007F9E 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007FA2 2200                       		move.l	d0,d1
00007FA4 4841                       		swap	d1
00007FA6 0241 0010                  		andi.w	#$10,d1
00007FAA 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007FAE B701                       		eor.b	d3,d1
00007FB0 6600                       		bne.s	@return
00007FB2 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007FB8 9082                       		sub.l	d2,d0
00007FBA 6A00                       		bpl.s	@scrollRight
00007FBC 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007FC0 6000                       		bra.s	@return
00007FC2                            	@scrollRight:
00007FC2 5206                       		addq.b	#1,d6
00007FC4 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007FC8                            	@return:
00007FC8 4E75                       		rts
00007FCA                            ; End of function BGScroll_Block1
00007FCA                            
00007FCA                            
00007FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FCA                            
00007FCA                            
00007FCA                            BGScroll_Block2:
00007FCA 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007FCE 2002                       		move.l	d2,d0
00007FD0 D084                       		add.l	d4,d0
00007FD2 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007FD6 2200                       		move.l	d0,d1
00007FD8 4841                       		swap	d1
00007FDA 0241 0010                  		andi.w	#$10,d1
00007FDE 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007FE2 B701                       		eor.b	d3,d1
00007FE4 6600                       		bne.s	@return
00007FE6 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007FEC 9082                       		sub.l	d2,d0
00007FEE 6A00                       		bpl.s	@scrollRight
00007FF0 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007FF4 6000                       		bra.s	@return
00007FF6                            	@scrollRight:
00007FF6 5206                       		addq.b	#1,d6
00007FF8 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007FFC                            	@return:
00007FFC 4E75                       		rts
00007FFE                            ;-------------------------------------------------------------------------------
00007FFE                            BGScroll_Block3:
00007FFE 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00008002 2002                       		move.l	d2,d0
00008004 D084                       		add.l	d4,d0
00008006 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
0000800A 2200                       		move.l	d0,d1
0000800C 4841                       		swap	d1
0000800E 0241 0010                  		andi.w	#$10,d1
00008012 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00008016 B701                       		eor.b	d3,d1
00008018 6600                       		bne.s	@return
0000801A 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00008020 9082                       		sub.l	d2,d0
00008022 6A00                       		bpl.s	@scrollRight
00008024 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008028 6000                       		bra.s	@return
0000802A                            	@scrollRight:
0000802A 5206                       		addq.b	#1,d6
0000802C 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008030                            	@return:
00008030 4E75                       		rts
00008030 4E75                       		rts
00008032                            
00008032                            
00008032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008032                            
00008032                            ; sub_6886:
00008032                            LoadTilesAsYouMove_BGOnly:
00008032 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008038 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000803E 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00008042 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008046 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000804A 343C 6000                  		move.w	#$6000,d2
0000804E 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008052 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00008056 47F8 F710                  		lea	(v_bg2screenposx).w,a3
0000805A 6000 0000                  		bra.w	DrawBGScrollBlock2
0000805E                            ; End of function sub_6886
0000805E                            
0000805E                            ; ---------------------------------------------------------------------------
0000805E                            ; Subroutine to	display	correct	tiles as you move
0000805E                            ; ---------------------------------------------------------------------------
0000805E                            
0000805E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000805E                            
0000805E                            
0000805E                            LoadTilesAsYouMove:
0000805E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008064 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000806A                            		; First, update the background
0000806A 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
0000806E 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00008072 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008076 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
0000807A 6100 0000                  		bsr.w	DrawBGScrollBlock1
0000807E 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00008082 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00008086 6100 0000                  		bsr.w	DrawBGScrollBlock2
0000808A                            		; REV01 added a third scroll block, though, technically,
0000808A                            		; the RAM for it was already there in REV00
0000808A 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
0000808E 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00008092 6100 0000                  		bsr.w	DrawBGScrollBlock3
00008096                            		; Then, update the foreground
00008096 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
0000809A 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
0000809E 49F8 A400                  		lea	(v_lvllayout).w,a4
000080A2 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
000080A6                            		; The FG's update function is inlined here
000080A6 4A12                       		tst.b	(a2)
000080A8 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
000080AA 0892 0000                  		bclr	#0,(a2)
000080AE 6700                       		beq.s	loc_6908
000080B0                            		; Draw new tiles at the top
000080B0 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
000080B2 7AF0                       		moveq	#-16,d5 ; X coordinate
000080B4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080B8 78F0                       		moveq	#-16,d4 ; Y coordinate
000080BA 7AF0                       		moveq	#-16,d5 ; X coordinate
000080BC 6100 0000                  		bsr.w	DrawBlocks_LR
000080C0                            
000080C0                            loc_6908:
000080C0 0892 0001                  		bclr	#1,(a2)
000080C4 6700                       		beq.s	loc_6922
000080C6                            		; Draw new tiles at the bottom
000080C6 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
000080CA 7AF0                       		moveq	#-16,d5
000080CC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080D0 383C 00E0                  		move.w	#224,d4
000080D4 7AF0                       		moveq	#-16,d5
000080D6 6100 0000                  		bsr.w	DrawBlocks_LR
000080DA                            
000080DA                            loc_6922:
000080DA 0892 0002                  		bclr	#2,(a2)
000080DE 6700                       		beq.s	loc_6938
000080E0                            		; Draw new tiles on the left
000080E0 78F0                       		moveq	#-16,d4
000080E2 7AF0                       		moveq	#-16,d5
000080E4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000080E8 78F0                       		moveq	#-16,d4
000080EA 7AF0                       		moveq	#-16,d5
000080EC 6100 0000                  		bsr.w	DrawBlocks_TB
000080F0                            
000080F0                            loc_6938:
000080F0 0892 0003                  		bclr	#3,(a2)
000080F4 6700                       		beq.s	locret_6952
000080F6                            		; Draw new tiles on the right
000080F6 78F0                       		moveq	#-16,d4
000080F8 3A3C 0140                  		move.w	#320,d5
000080FC 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008100 78F0                       		moveq	#-16,d4
00008102 3A3C 0140                  		move.w	#320,d5
00008106 6100 0000                  		bsr.w	DrawBlocks_TB
0000810A                            
0000810A                            locret_6952:
0000810A 4E75                       		rts	
0000810C                            ; End of function LoadTilesAsYouMove
0000810C                            
0000810C                            
0000810C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000810C                            
0000810C                            ; sub_6954:
0000810C                            DrawBGScrollBlock1:
0000810C 4A12                       		tst.b	(a2)
0000810E 6700 0000                  		beq.w	locret_69F2
00008112 0892 0000                  		bclr	#0,(a2)
00008116 6700                       		beq.s	loc_6972
00008118                            		; Draw new tiles at the top
00008118 78F0                       		moveq	#-16,d4
0000811A 7AF0                       		moveq	#-16,d5
0000811C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008120 78F0                       		moveq	#-16,d4
00008122 7AF0                       		moveq	#-16,d5
00008124 6100 0000                  			bsr.w	DrawBlocks_LR
00008128                            
00008128                            loc_6972:
00008128 0892 0001                  		bclr	#1,(a2)
0000812C 6700                       		beq.s	loc_698E
0000812E                            		; Draw new tiles at the top
0000812E 383C 00E0                  		move.w	#224,d4
00008132 7AF0                       		moveq	#-16,d5
00008134 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008138 383C 00E0                  		move.w	#224,d4
0000813C 7AF0                       		moveq	#-16,d5
0000813E 6100 0000                  			bsr.w	DrawBlocks_LR
00008142                            
00008142                            loc_698E:
00008142 0892 0002                  		bclr	#2,(a2)
00008146                            
00008146                            
00008146 6700                       			beq.s	locj_6D56
00008148                            			; Draw new tiles on the left
00008148 78F0                       			moveq	#-16,d4
0000814A 7AF0                       			moveq	#-16,d5
0000814C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008150 78F0                       			moveq	#-16,d4
00008152 7AF0                       			moveq	#-16,d5
00008154 6100 0000                  			bsr.w	DrawBlocks_TB
00008158                            	locj_6D56:
00008158                            
00008158 0892 0003                  			bclr	#3,(a2)
0000815C 6700                       			beq.s	locj_6D70
0000815E                            			; Draw new tiles on the right
0000815E 78F0                       			moveq	#-16,d4
00008160 3A3C 0140                  			move.w	#320,d5
00008164 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008168 78F0                       			moveq	#-16,d4
0000816A 3A3C 0140                  			move.w	#320,d5
0000816E 6100 0000                  			bsr.w	DrawBlocks_TB
00008172                            	locj_6D70:
00008172                            
00008172 0892 0004                  			bclr	#4,(a2)
00008176 6700                       			beq.s	locj_6D88
00008178                            			; Draw entire row at the top
00008178 78F0                       			moveq	#-16,d4
0000817A 7A00                       			moveq	#0,d5
0000817C 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008180 78F0                       			moveq	#-16,d4
00008182 7A00                       			moveq	#0,d5
00008184 7C1F                       			moveq	#(512/16)-1,d6
00008186 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000818A                            	locj_6D88:
0000818A                            
0000818A 0892 0005                  			bclr	#5,(a2)
0000818E 6700                       			beq.s	locret_69F2
00008190                            			; Draw entire row at the bottom
00008190 383C 00E0                  			move.w	#224,d4
00008194 7A00                       			moveq	#0,d5
00008196 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000819A 383C 00E0                  			move.w	#224,d4
0000819E 7A00                       			moveq	#0,d5
000081A0 7C1F                       			moveq	#(512/16)-1,d6
000081A2 6100 0000                  			bsr.w	DrawBlocks_LR_3
000081A6                            
000081A6                            locret_69F2:
000081A6 4E75                       		rts	
000081A8                            ; End of function DrawBGScrollBlock1
000081A8                            
000081A8                            
000081A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A8                            
000081A8                            ; Essentially, this draws everything that isn't scroll block 1
000081A8                            ; sub_69F4:
000081A8                            DrawBGScrollBlock2:
000081A8                            
000081A8 4A12                       			tst.b	(a2)
000081AA 6700 0000                  			beq.w	locj_6DF2
000081AE 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
000081B4 6700 0000                  			beq.w	Draw_SBz
000081B8 0892 0000                  			bclr	#0,(a2)
000081BC 6700                       			beq.s	locj_6DD2
000081BE                            			; Draw new tiles on the left
000081BE 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
000081C2 7AF0                       			moveq	#-16,d5
000081C4 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081C8 383C 0070                  			move.w	#224/2,d4
000081CC 7AF0                       			moveq	#-16,d5
000081CE 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
000081D0 6100 0000                  			bsr.w	DrawBlocks_TB_2
000081D4                            	locj_6DD2:
000081D4 0892 0001                  			bclr	#1,(a2)
000081D8 6700                       			beq.s	locj_6DF2
000081DA                            			; Draw new tiles on the right
000081DA 383C 0070                  			move.w	#224/2,d4
000081DE 3A3C 0140                  			move.w	#320,d5
000081E2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000081E6 383C 0070                  			move.w	#224/2,d4
000081EA 3A3C 0140                  			move.w	#320,d5
000081EE 7C02                       			moveq	#3-1,d6
000081F0 6100 0000                  			bsr.w	DrawBlocks_TB_2
000081F4                            	locj_6DF2:
000081F4 4E75                       			rts
000081F6                            ;===============================================================================
000081F6                            	locj_6DF4:
000081F6 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00008206 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008216 0200                       			dc.b $02,$00						
00008218                            ;===============================================================================
00008218                            	Draw_SBz:
00008218 78F0                       			moveq	#-16,d4
0000821A 0892 0000                  			bclr	#0,(a2)
0000821E 6600                       			bne.s	locj_6E28
00008220 0892 0001                  			bclr	#1,(a2)
00008224 6700                       			beq.s	locj_6E72
00008226 383C 00E0                  			move.w	#224,d4
0000822A                            	locj_6E28:
0000822A 41F9 0000 81F7             			lea	(locj_6DF4+1).l,a0
00008230 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008234 D044                       			add.w	d4,d0
00008236 0240 01F0                  			andi.w	#$1F0,d0
0000823A E848                       			lsr.w	#4,d0
0000823C 1030 0000                  			move.b	(a0,d0.w),d0
00008240 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00008246 3673 0000                  			movea.w	(a3,d0.w),a3
0000824A 6700                       			beq.s	locj_6E5E
0000824C 7AF0                       			moveq	#-16,d5
0000824E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008252 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008256 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000825A 6100 0000                  			bsr.w	DrawBlocks_LR
0000825E 6000                       			bra.s	locj_6E72
00008260                            ;===============================================================================
00008260                            	locj_6E5E:
00008260 7A00                       			moveq	#0,d5
00008262 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008266 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000826A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000826E 7C1F                       			moveq	#(512/16)-1,d6
00008270 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008274                            	locj_6E72:
00008274 4A12                       			tst.b	(a2)
00008276 6600                       			bne.s	locj_6E78
00008278 4E75                       			rts
0000827A                            ;===============================================================================			
0000827A                            	locj_6E78:
0000827A 78F0                       			moveq	#-16,d4
0000827C 7AF0                       			moveq	#-16,d5
0000827E 1012                       			move.b	(a2),d0
00008280 0200 00A8                  			andi.b	#$A8,d0
00008284 6700                       			beq.s	locj_6E8C
00008286 E208                       			lsr.b	#1,d0
00008288 1480                       			move.b	d0,(a2)
0000828A 3A3C 0140                  			move.w	#320,d5
0000828E                            	locj_6E8C:
0000828E 41F9 0000 81F6             			lea	(locj_6DF4).l,a0
00008294 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008298 0240 01F0                  			andi.w	#$1F0,d0
0000829C E848                       			lsr.w	#4,d0
0000829E 41F0 0000                  			lea	(a0,d0.w),a0
000082A2 6000 0000                  			bra.w	locj_6FEC						
000082A6                            ;===============================================================================
000082A6                            
000082A6                            
000082A6                            	; locj_6EA4:
000082A6                            	DrawBGScrollBlock3:
000082A6 4A12                       			tst.b	(a2)
000082A8 6700 0000                  			beq.w	locj_6EF0
000082AC 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000082B2 6700 0000                  			beq.w	Draw_Mz
000082B6 0892 0000                  			bclr	#0,(a2)
000082BA 6700                       			beq.s	locj_6ED0
000082BC                            			; Draw new tiles on the left
000082BC 383C 0040                  			move.w	#$40,d4
000082C0 7AF0                       			moveq	#-16,d5
000082C2 6100 0000                  			bsr.w	Calc_VRAM_Pos
000082C6 383C 0040                  			move.w	#$40,d4
000082CA 7AF0                       			moveq	#-16,d5
000082CC 7C02                       			moveq	#3-1,d6
000082CE 6100 0000                  			bsr.w	DrawBlocks_TB_2
000082D2                            	locj_6ED0:
000082D2 0892 0001                  			bclr	#1,(a2)
000082D6 6700                       			beq.s	locj_6EF0
000082D8                            			; Draw new tiles on the right
000082D8 383C 0040                  			move.w	#$40,d4
000082DC 3A3C 0140                  			move.w	#320,d5
000082E0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000082E4 383C 0040                  			move.w	#$40,d4
000082E8 3A3C 0140                  			move.w	#320,d5
000082EC 7C02                       			moveq	#3-1,d6
000082EE 6100 0000                  			bsr.w	DrawBlocks_TB_2
000082F2                            	locj_6EF0:
000082F2 4E75                       			rts
000082F4                            	locj_6EF2:
000082F4 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008304 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008314 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008324 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008334 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008344 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008354 0200                       			dc.b $02,$00
00008356                            ;===============================================================================
00008356                            	Draw_Mz:
00008356 78F0                       			moveq	#-16,d4
00008358 0892 0000                  			bclr	#0,(a2)
0000835C 6600                       			bne.s	locj_6F66
0000835E 0892 0001                  			bclr	#1,(a2)
00008362 6700                       			beq.s	locj_6FAE
00008364 383C 00E0                  			move.w	#224,d4
00008368                            	locj_6F66:
00008368 41F9 0000 82F5             			lea	(locj_6EF2+1).l,a0
0000836E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008372 0440 0200                  			subi.w	#$200,d0
00008376 D044                       			add.w	d4,d0
00008378 0240 07F0                  			andi.w	#$7F0,d0
0000837C E848                       			lsr.w	#4,d0
0000837E 1030 0000                  			move.b	(a0,d0.w),d0
00008382 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008386 6700                       			beq.s	locj_6F9A
00008388 7AF0                       			moveq	#-16,d5
0000838A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000838E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008392 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008396 6100 0000                  			bsr.w	DrawBlocks_LR
0000839A 6000                       			bra.s	locj_6FAE
0000839C                            ;===============================================================================
0000839C                            	locj_6F9A:
0000839C 7A00                       			moveq	#0,d5
0000839E 48E7 0C00                  			movem.l	d4/d5,-(sp)
000083A2 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000083A6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000083AA 7C1F                       			moveq	#(512/16)-1,d6
000083AC 6100 0000                  			bsr.w	DrawBlocks_LR_3
000083B0                            	locj_6FAE:
000083B0 4A12                       			tst.b	(a2)
000083B2 6600                       			bne.s	locj_6FB4
000083B4 4E75                       			rts
000083B6                            ;===============================================================================			
000083B6                            	locj_6FB4:
000083B6 78F0                       			moveq	#-16,d4
000083B8 7AF0                       			moveq	#-16,d5
000083BA 1012                       			move.b	(a2),d0
000083BC 0200 00A8                  			andi.b	#$A8,d0
000083C0 6700                       			beq.s	locj_6FC8
000083C2 E208                       			lsr.b	#1,d0
000083C4 1480                       			move.b	d0,(a2)
000083C6 3A3C 0140                  			move.w	#320,d5
000083CA                            	locj_6FC8:
000083CA 41F9 0000 82F4             			lea	(locj_6EF2).l,a0
000083D0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000083D4 0440 0200                  			subi.w	#$200,d0
000083D8 0240 07F0                  			andi.w	#$7F0,d0
000083DC E848                       			lsr.w	#4,d0
000083DE 41F0 0000                  			lea	(a0,d0.w),a0
000083E2 6000 0000                  			bra.w	locj_6FEC
000083E6                            ;===============================================================================			
000083E6                            	locj_6FE4:
000083E6 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000083EE                            	locj_6FEC:
000083EE 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000083F0 2E3C 0080 0000             			move.l	#$800000,d7
000083F6                            	locj_6FF4:			
000083F6 7000                       			moveq	#0,d0
000083F8 1018                       			move.b	(a0)+,d0
000083FA 0112                       			btst	d0,(a2)
000083FC 6700                       			beq.s	locj_701C
000083FE 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008402 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008406 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000840A 6100 0000                  			bsr.w	GetBlockData
0000840E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008412 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008416 6100 0000                  			bsr.w	DrawBlock
0000841A 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
0000841E                            	locj_701C:
0000841E 0644 0010                  			addi.w	#16,d4
00008422 51CE FFD2                  			dbf	d6,locj_6FF4
00008426 4212                       			clr.b	(a2)
00008428 4E75                       			rts			
0000842A                            
0000842A                            
0000842A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000842A                            
0000842A                            ; Don't be fooled by the name: this function's for drawing from left to right
0000842A                            ; when the camera's moving up or down
0000842A                            ; DrawTiles_LR:
0000842A                            DrawBlocks_LR:
0000842A 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
0000842C                            ; DrawTiles_LR_2:
0000842C                            DrawBlocks_LR_2:
0000842C 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008432 2200                       		move.l	d0,d1
00008434                            
00008434                            	@loop:
00008434 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008438 6100 0000                  		bsr.w	GetBlockData
0000843C 2001                       		move.l	d1,d0
0000843E 6100 0000                  		bsr.w	DrawBlock
00008442 5801                       		addq.b	#4,d1		; Two tiles ahead
00008444 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
00008448 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000844C 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
00008450 51CE FFE2                  		dbf	d6,@loop
00008454 4E75                       		rts
00008456                            ; End of function DrawBlocks_LR
00008456                            
00008456                            ; DrawTiles_LR_3:
00008456                            DrawBlocks_LR_3:
00008456 2E3C 0080 0000             		move.l	#$800000,d7
0000845C 2200                       		move.l	d0,d1
0000845E                            
0000845E                            	@loop:
0000845E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008462 6100 0000                  		bsr.w	GetBlockData_2
00008466 2001                       		move.l	d1,d0
00008468 6100 0000                  		bsr.w	DrawBlock
0000846C 5801                       		addq.b	#4,d1
0000846E 0201 007F                  		andi.b	#$7F,d1
00008472 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008476 0645 0010                  		addi.w	#16,d5
0000847A 51CE FFE2                  		dbf	d6,@loop
0000847E 4E75                       		rts	
00008480                            ; End of function DrawBlocks_LR_3
00008480                            
00008480                            
00008480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008480                            
00008480                            ; Don't be fooled by the name: this function's for drawing from top to bottom
00008480                            ; when the camera's moving left or right
00008480                            ; DrawTiles_TB:
00008480                            DrawBlocks_TB:
00008480 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008482                            ; DrawTiles_TB_2:
00008482                            DrawBlocks_TB_2:
00008482 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008488 2200                       		move.l	d0,d1
0000848A                            
0000848A                            	@loop:
0000848A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000848E 6100 0000                  		bsr.w	GetBlockData
00008492 2001                       		move.l	d1,d0
00008494 6100 0000                  		bsr.w	DrawBlock
00008498 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
0000849C 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
000084A0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000084A4 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
000084A8 51CE FFE0                  		dbf	d6,@loop
000084AC 4E75                       		rts	
000084AE                            ; End of function DrawBlocks_TB_2
000084AE                            
000084AE                            
000084AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084AE                            
000084AE                            ; Draws a block's worth of tiles
000084AE                            ; Parameters:
000084AE                            ; a0 = Pointer to block metadata (block index and X/Y flip)
000084AE                            ; a1 = Pointer to block
000084AE                            ; a5 = Pointer to VDP command port
000084AE                            ; a6 = Pointer to VDP data port
000084AE                            ; d0 = VRAM command to access plane
000084AE                            ; d2 = VRAM plane A/B specifier
000084AE                            ; d7 = Plane row delta
000084AE                            ; DrawTiles:
000084AE                            DrawBlock:
000084AE 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
000084B0 4840                       		swap	d0
000084B2 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
000084B6 6600                       		bne.s	DrawFlipY
000084B8 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
000084BC 6600                       		bne.s	DrawFlipX
000084BE 2A80                       		move.l	d0,(a5)
000084C0 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000084C2 D087                       		add.l	d7,d0		; Next row
000084C4 2A80                       		move.l	d0,(a5)
000084C6 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000084C8 4E75                       		rts	
000084CA                            ; ===========================================================================
000084CA                            
000084CA                            DrawFlipX:
000084CA 2A80                       		move.l	d0,(a5)
000084CC 2819                       		move.l	(a1)+,d4
000084CE 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000084D4 4844                       		swap	d4		; Swap the tiles around
000084D6 2C84                       		move.l	d4,(a6)		; Write top two tiles
000084D8 D087                       		add.l	d7,d0		; Next row
000084DA 2A80                       		move.l	d0,(a5)
000084DC 2819                       		move.l	(a1)+,d4
000084DE 0A84 0800 0800             		eori.l	#$8000800,d4
000084E4 4844                       		swap	d4
000084E6 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000084E8 4E75                       		rts	
000084EA                            ; ===========================================================================
000084EA                            
000084EA                            DrawFlipY:
000084EA 0810 0003                  		btst	#3,(a0)
000084EE 6600                       		bne.s	DrawFlipXY
000084F0 2A80                       		move.l	d0,(a5)
000084F2 2A19                       		move.l	(a1)+,d5
000084F4 2819                       		move.l	(a1)+,d4
000084F6 0A84 1000 1000             		eori.l	#$10001000,d4
000084FC 2C84                       		move.l	d4,(a6)
000084FE D087                       		add.l	d7,d0
00008500 2A80                       		move.l	d0,(a5)
00008502 0A85 1000 1000             		eori.l	#$10001000,d5
00008508 2C85                       		move.l	d5,(a6)
0000850A 4E75                       		rts	
0000850C                            ; ===========================================================================
0000850C                            
0000850C                            DrawFlipXY:
0000850C 2A80                       		move.l	d0,(a5)
0000850E 2A19                       		move.l	(a1)+,d5
00008510 2819                       		move.l	(a1)+,d4
00008512 0A84 1800 1800             		eori.l	#$18001800,d4
00008518 4844                       		swap	d4
0000851A 2C84                       		move.l	d4,(a6)
0000851C D087                       		add.l	d7,d0
0000851E 2A80                       		move.l	d0,(a5)
00008520 0A85 1800 1800             		eori.l	#$18001800,d5
00008526 4845                       		swap	d5
00008528 2C85                       		move.l	d5,(a6)
0000852A 4E75                       		rts	
0000852C                            ; End of function DrawBlocks
0000852C                            
0000852C                            ; ===========================================================================
0000852C                            ; unused garbage
0000852C                            
0000852C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000852C                            
0000852C                            ; Gets address of block at a certain coordinate
0000852C                            ; Parameters:
0000852C                            ; a4 = Pointer to level layout
0000852C                            ; d4 = Relative Y coordinate
0000852C                            ; d5 = Relative X coordinate
0000852C                            ; Returns:
0000852C                            ; a0 = Address of block metadata
0000852C                            ; a1 = Address of block
0000852C                            ; DrawBlocks:
0000852C                            GetBlockData:
0000852C DA53                       			add.w	(a3),d5
0000852E                            	GetBlockData_2:
0000852E D86B 0004                  			add.w	4(a3),d4
00008532 43F8 B000                  			lea	(v_16x16).w,a1
00008536                            		; Turn Y coordinate into index into level layout
00008536 3604                       		move.w	d4,d3
00008538 E24B                       		lsr.w	#1,d3
0000853A 0243 0380                  		andi.w	#$380,d3
0000853E                            		; Turn X coordinate into index into level layout
0000853E E64D                       		lsr.w	#3,d5
00008540 3005                       		move.w	d5,d0
00008542 EA48                       		lsr.w	#5,d0
00008544 0240 007F                  		andi.w	#$7F,d0
00008548                            		; Get chunk from level layout
00008548 D043                       		add.w	d3,d0
0000854A 76FF                       		moveq	#-1,d3
0000854C 1634 0000                  		move.b	(a4,d0.w),d3
00008550 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
00008552                            		; Turn chunk ID into index into chunk table
00008552 5303                       		subq.b	#1,d3
00008554 0243 007F                  		andi.w	#$7F,d3
00008558 EE5B                       		ror.w	#7,d3
0000855A                            		; Turn Y coordinate into index into chunk
0000855A D844                       		add.w	d4,d4
0000855C 0244 01E0                  		andi.w	#$1E0,d4
00008560                            		; Turn X coordinate into index into chunk
00008560 0245 001E                  		andi.w	#$1E,d5
00008564                            		; Get block metadata from chunk
00008564 D644                       		add.w	d4,d3
00008566 D645                       		add.w	d5,d3
00008568 2043                       		movea.l	d3,a0
0000856A 3610                       		move.w	(a0),d3
0000856C                            		; Turn block ID into address
0000856C 0243 03FF                  		andi.w	#$3FF,d3
00008570 E74B                       		lsl.w	#3,d3
00008572 D2C3                       		adda.w	d3,a1
00008574                            
00008574                            locret_6C1E:
00008574 4E75                       		rts	
00008576                            ; End of function GetBlockData
00008576                            
00008576                            
00008576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008576                            
00008576                            ; Produces a VRAM plane access command from coordinates
00008576                            ; Parameters:
00008576                            ; d4 = Relative Y coordinate
00008576                            ; d5 = Relative X coordinate
00008576                            ; Returns VDP command in d0
00008576                            Calc_VRAM_Pos:
00008576 DA53                       			add.w	(a3),d5
00008578                            	Calc_VRAM_Pos_2:
00008578 D86B 0004                  			add.w	4(a3),d4
0000857C                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
0000857C                            		; Also note that this wraps the value to the size of the plane:
0000857C                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
0000857C 0244 00F0                  		andi.w	#$F0,d4
00008580 0245 01F0                  		andi.w	#$1F0,d5
00008584                            		; Transform the adjusted coordinates into a VDP command
00008584 E94C                       		lsl.w	#4,d4
00008586 E44D                       		lsr.w	#2,d5
00008588 D845                       		add.w	d5,d4
0000858A 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
0000858C 4840                       		swap	d0
0000858E 3004                       		move.w	d4,d0
00008590 4E75                       		rts	
00008592                            ; End of function Calc_VRAM_Pos
00008592                            
00008592                            
00008592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008592                            ; not used
00008592                            
00008592                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008592                            ; VRAM layout: the only difference is the high bits of the
00008592                            ; plane's VRAM address, which are 10 instead of 11.
00008592                            ; Both the foreground and background are at $C000 and $E000
00008592                            ; respectively, so this one starting at $8000 makes no sense.
00008592                            ; sub_6C3C:
00008592                            Calc_VRAM_Pos_Unknown:
00008592 D86B 0004                  		add.w	4(a3),d4
00008596 DA53                       		add.w	(a3),d5
00008598 0244 00F0                  		andi.w	#$F0,d4
0000859C 0245 01F0                  		andi.w	#$1F0,d5
000085A0 E94C                       		lsl.w	#4,d4
000085A2 E44D                       		lsr.w	#2,d5
000085A4 D845                       		add.w	d5,d4
000085A6 7002                       		moveq	#2,d0
000085A8 4840                       		swap	d0
000085AA 3004                       		move.w	d4,d0
000085AC 4E75                       		rts	
000085AE                            ; End of function Calc_VRAM_Pos_Unknown
000085AE                            
000085AE                            ; ---------------------------------------------------------------------------
000085AE                            ; Subroutine to	load tiles as soon as the level	appears
000085AE                            ; ---------------------------------------------------------------------------
000085AE                            
000085AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085AE                            
000085AE                            
000085AE                            LoadTilesFromStart:
000085AE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000085B4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000085BA 47F8 F700                  		lea	(v_screenposx).w,a3
000085BE 49F8 A400                  		lea	(v_lvllayout).w,a4
000085C2 343C 4000                  		move.w	#$4000,d2
000085C6 6100                       		bsr.s	DrawChunks
000085C8 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000085CC 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000085D0 343C 6000                  		move.w	#$6000,d2
000085D4 4A38 FE10                  			tst.b	(v_zone).w
000085D8 6700 0000                  			beq.w	Draw_GHz_Bg
000085DC 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000085E2 6700 0000                  			beq.w	Draw_Mz_Bg
000085E6 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000085EC 6700 0000                  			beq.w	Draw_SBz_Bg
000085F0 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000085F6 6700 0000                  			beq.w	Draw_GHz_Bg
000085FA                            ; End of function LoadTilesFromStart
000085FA                            
000085FA                            
000085FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085FA                            
000085FA                            
000085FA                            DrawChunks:
000085FA 78F0                       		moveq	#-16,d4
000085FC 7C0F                       		moveq	#((224+16+16)/16)-1,d6
000085FE                            
000085FE                            	@loop:
000085FE 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008602 7A00                       		moveq	#0,d5
00008604 3204                       		move.w	d4,d1
00008606 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000860A 3801                       		move.w	d1,d4
0000860C 7A00                       		moveq	#0,d5
0000860E 7C1F                       		moveq	#(512/16)-1,d6
00008610 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008614 4CDF 0070                  		movem.l	(sp)+,d4-d6
00008618 0644 0010                  		addi.w	#16,d4
0000861C 51CE FFE0                  		dbf	d6,@loop
00008620 4E75                       		rts	
00008622                            ; End of function DrawChunks
00008622                            
00008622                            	Draw_GHz_Bg:
00008622 7800                       			moveq	#0,d4
00008624 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008626                            	locj_7224:			
00008626 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000862A 41F9 0000 0000             			lea	(locj_724a),a0
00008630 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008634 D044                       			add.w	d4,d0
00008636 0240 00F0                  			andi.w	#$F0,d0
0000863A 6100 0000                  			bsr.w	locj_72Ba
0000863E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008642 0644 0010                  			addi.w	#16,d4
00008646 51CE FFDE                  			dbf	d6,locj_7224
0000864A 4E75                       			rts
0000864C                            	locj_724a:
0000864C 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
0000865C                            ;-------------------------------------------------------------------------------
0000865C                            	Draw_Mz_Bg:;locj_725a:
0000865C 78F0                       			moveq	#-16,d4
0000865E 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008660                            	locj_725E:			
00008660 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008664 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008668 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000866C 0440 0200                  			subi.w	#$200,d0
00008670 D044                       			add.w	d4,d0
00008672 0240 07F0                  			andi.w	#$7F0,d0
00008676 6100 0000                  			bsr.w	locj_72Ba
0000867A 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000867E 0644 0010                  			addi.w	#16,d4
00008682 51CE FFDC                  			dbf	d6,locj_725E
00008686 4E75                       			rts
00008688                            ;-------------------------------------------------------------------------------
00008688                            	Draw_SBz_Bg:;locj_7288:
00008688 78F0                       			moveq	#-16,d4
0000868A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000868C                            	locj_728C:			
0000868C 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008690 41FA FB65                  			lea	(locj_6DF4+1),a0
00008694 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008698 D044                       			add.w	d4,d0
0000869A 0240 01F0                  			andi.w	#$1F0,d0
0000869E 6100 0000                  			bsr.w	locj_72Ba
000086A2 4CDF 0070                  			movem.l	(sp)+,d4-d6
000086A6 0644 0010                  			addi.w	#16,d4
000086AA 51CE FFE0                  			dbf	d6,locj_728C
000086AE 4E75                       			rts
000086B0                            ;-------------------------------------------------------------------------------
000086B0                            	locj_72B2:
000086B0 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
000086B8                            	locj_72Ba:
000086B8 E848                       			lsr.w	#4,d0
000086BA 1030 0000                  			move.b	(a0,d0.w),d0
000086BE 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000086C2 6700                       			beq.s	locj_72da
000086C4 7AF0                       			moveq	#-16,d5
000086C6 48E7 0C00                  			movem.l	d4/d5,-(sp)
000086CA 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000086CE 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086D2 6100 FD56                  			bsr.w	DrawBlocks_LR
000086D6 6000                       			bra.s	locj_72EE
000086D8                            	locj_72da:
000086D8 7A00                       			moveq	#0,d5
000086DA 48E7 0C00                  			movem.l	d4/d5,-(sp)
000086DE 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000086E2 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086E6 7C1F                       			moveq	#(512/16)-1,d6
000086E8 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000086EC                            	locj_72EE:
000086EC 4E75                       			rts
000086EE                            
000086EE                            ; ---------------------------------------------------------------------------
000086EE                            ; Subroutine to load basic level data
000086EE                            ; ---------------------------------------------------------------------------
000086EE                            
000086EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086EE                            
000086EE                            
000086EE                            LevelDataLoad:
000086EE 7000                       		moveq	#0,d0
000086F0 1038 FE10                  		move.b	(v_zone).w,d0
000086F4 E948                       		lsl.w	#4,d0
000086F6 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000086FC 45F2 0000                  		lea	(a2,d0.w),a2
00008700 2F0A                       		move.l	a2,-(sp)
00008702 588A                       		addq.l	#4,a2
00008704 205A                       		movea.l	(a2)+,a0
00008706 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000870A 303C 0000                  		move.w	#0,d0
0000870E 6100 8EF4                  		bsr.w	EniDec
00008712 205A                       		movea.l	(a2)+,a0
00008714 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000871A 6100 9066                  		bsr.w	KosDec
0000871E 6100 0000                  		bsr.w	LevelLayoutLoad
00008722 301A                       		move.w	(a2)+,d0
00008724 3012                       		move.w	(a2),d0
00008726 0240 00FF                  		andi.w	#$FF,d0
0000872A 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008730 6600                       		bne.s	@notSBZ3	; if not, branch
00008732 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008734                            
00008734                            	@notSBZ3:
00008734 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000873A 6700                       		beq.s	@isSBZorFZ	; if yes, branch
0000873C 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008742 6600                       		bne.s	@normalpal	; if not, branch
00008744                            
00008744                            	@isSBZorFZ:
00008744 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008746                            
00008746                            	@normalpal:
00008746 6100 9A60                  		bsr.w	PalLoad1	; load palette (based on d0)
0000874A 245F                       		movea.l	(sp)+,a2
0000874C 584A                       		addq.w	#4,a2		; read number for 2nd PLC
0000874E 7000                       		moveq	#0,d0
00008750 1012                       		move.b	(a2),d0
00008752 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008754 6100 8D10                  		bsr.w	AddPLC		; load pattern load cues
00008758                            
00008758                            	@skipPLC:
00008758 4E75                       		rts	
0000875A                            ; End of function LevelDataLoad
0000875A                            
0000875A                            ; ---------------------------------------------------------------------------
0000875A                            ; Level	layout loading subroutine
0000875A                            ; ---------------------------------------------------------------------------
0000875A                            
0000875A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000875A                            
0000875A                            
0000875A                            LevelLayoutLoad:
0000875A 47F8 A400                  		lea	(v_lvllayout).w,a3
0000875E 323C 01FF                  		move.w	#$1FF,d1
00008762 7000                       		moveq	#0,d0
00008764                            
00008764                            LevLoad_ClrRam:
00008764 26C0                       		move.l	d0,(a3)+
00008766 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
0000876A                            
0000876A 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000876E 7200                       		moveq	#0,d1
00008770 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008774 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008778 7202                       		moveq	#2,d1
0000877A                            ; End of function LevelLayoutLoad
0000877A                            
0000877A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000877A                            
0000877A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000877A                            
0000877A                            
0000877A                            LevelLayoutLoad2:
0000877A 3038 FE10                  		move.w	(v_zone).w,d0
0000877E ED08                       		lsl.b	#6,d0
00008780 EA48                       		lsr.w	#5,d0
00008782 3400                       		move.w	d0,d2
00008784 D040                       		add.w	d0,d0
00008786 D042                       		add.w	d2,d0
00008788 D041                       		add.w	d1,d0
0000878A 43F9 0000 0000             		lea	(Level_Index).l,a1
00008790 3031 0000                  		move.w	(a1,d0.w),d0
00008794 43F1 0000                  		lea	(a1,d0.w),a1
00008798 7200                       		moveq	#0,d1
0000879A 3401                       		move.w	d1,d2
0000879C 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000879E 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000087A0                            
000087A0                            LevLoad_NumRows:
000087A0 3001                       		move.w	d1,d0
000087A2 204B                       		movea.l	a3,a0
000087A4                            
000087A4                            LevLoad_Row:
000087A4 10D9                       		move.b	(a1)+,(a0)+
000087A6 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000087AA 47EB 0080                  		lea	$80(a3),a3	; do next row
000087AE 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000087B2 4E75                       		rts	
000087B4                            ; End of function LevelLayoutLoad2
000087B4                            
000087B4                            		include	"_inc\DynamicLevelEvents.asm"
000087B4                            ; ---------------------------------------------------------------------------
000087B4                            ; Dynamic level events
000087B4                            ; ---------------------------------------------------------------------------
000087B4                            
000087B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087B4                            
000087B4                            
000087B4                            DynamicLevelEvents:
000087B4 7000                       		moveq	#0,d0
000087B6 1038 FE10                  		move.b	(v_zone).w,d0
000087BA D040                       		add.w	d0,d0
000087BC 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
000087C0 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
000087C4 7202                       		moveq	#2,d1
000087C6 3038 F726                  		move.w	(v_limitbtm1).w,d0
000087CA 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000087CE 6700                       		beq.s	DLE_NoChg	; if not, branch
000087D0 6400                       		bcc.s	loc_6DAC
000087D2                            
000087D2 4441                       		neg.w	d1
000087D4 3038 F704                  		move.w	(v_screenposy).w,d0
000087D8 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
000087DC 6300                       		bls.s	loc_6DA0
000087DE 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
000087E2 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
000087E8                            
000087E8                            loc_6DA0:
000087E8 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000087EC 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000087F2                            
000087F2                            DLE_NoChg:
000087F2 4E75                       		rts	
000087F4                            ; ===========================================================================
000087F4                            
000087F4                            loc_6DAC:
000087F4 3038 F704                  		move.w	(v_screenposy).w,d0
000087F8 5040                       		addq.w	#8,d0
000087FA B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
000087FE 6500                       		bcs.s	loc_6DC4
00008800 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008806 6700                       		beq.s	loc_6DC4
00008808 D241                       		add.w	d1,d1
0000880A D241                       		add.w	d1,d1
0000880C                            
0000880C                            loc_6DC4:
0000880C D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008810 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008816 4E75                       		rts	
00008818                            ; End of function DynamicLevelEvents
00008818                            
00008818                            ; ===========================================================================
00008818                            ; ---------------------------------------------------------------------------
00008818                            ; Offset index for dynamic level events
00008818                            ; ---------------------------------------------------------------------------
00008818 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
0000881C 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008820 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008824 0000                       		dc.w DLE_Ending-DLE_Index
00008826                            ; ===========================================================================
00008826                            ; ---------------------------------------------------------------------------
00008826                            ; Green	Hill Zone dynamic level events
00008826                            ; ---------------------------------------------------------------------------
00008826                            
00008826                            DLE_GHZ:
00008826 7000                       		moveq	#0,d0
00008828 1038 FE11                  		move.b	(v_act).w,d0
0000882C D040                       		add.w	d0,d0
0000882E 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008832 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008836                            ; ===========================================================================
00008836 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008838 0000                       		dc.w DLE_GHZ2-DLE_GHZx
0000883A 0000                       		dc.w DLE_GHZ3-DLE_GHZx
0000883C                            ; ===========================================================================
0000883C                            
0000883C                            DLE_GHZ1:
0000883C 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008842 6600                       		bne.s	gohere
00008844 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
0000884A 4E75                       		rts
0000884C                            gohere:
0000884C 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008852 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008858 6500                       		bcs.s	locret_6E08	; if not, branch
0000885A 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008860                            
00008860                            locret_6E08:
00008860 4E75                       		rts	
00008862                            ; ===========================================================================
00008862                            
00008862                            DLE_GHZ2:
00008862 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008868 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000886E 6500                       		bcs.s	locret_6E3A
00008870 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008876 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
0000887C 6500                       		bcs.s	locret_6E3A
0000887E 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008884 6500                       		bcs.s	loc_6E9A
00008886 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
0000888C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008892 6400                       		bcc.s	loc_6E8F
00008894 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000889A 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000088A0                            
000088A0                            loc_6E8F:
000088A0 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
000088A6 6400                       		bcc.s	loc_6E9A
000088A8                            
000088A8                            locret_6E3A:
000088A8 4E75                       		rts	
000088AA                            ; ===========================================================================
000088AA                            
000088AA                            loc_6E9A:
000088AA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088B0 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088B4 4E75                       		rts		
000088B6                            ; ===========================================================================
000088B6                            
000088B6                            DLE_GHZ3:
000088B6 7000                       		moveq	#0,d0
000088B8 1038 F742                  		move.b	(v_dle_routine).w,d0
000088BC 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000088C0 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000088C4                            ; ===========================================================================
000088C4 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
000088C6 0000                       		dc.w DLE_GHZ3boss-off_6E4A
000088C8 0000                       		dc.w DLE_GHZ3end-off_6E4A
000088CA                            ; ===========================================================================
000088CA                            
000088CA                            DLE_GHZ3main:
000088CA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088D0 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
000088D6 6500                       		bcs.s	locret_6E96
000088D8 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088DE 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000088E4 6500                       		bcs.s	locret_6E96
000088E6 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000088EC 6500                       		bcs.s	loc_6E98
000088EE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000088F4 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
000088FA 6400                       		bcc.s	loc_6E8E
000088FC 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008902 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008908                            
00008908                            loc_6E8E:
00008908 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
0000890E 6400                       		bcc.s	loc_6E98
00008910                            
00008910                            locret_6E96:
00008910 4E75                       		rts	
00008912                            ; ===========================================================================
00008912                            
00008912                            loc_6E98:
00008912 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008918 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000891C 4E75                       		rts	
0000891E                            ; ===========================================================================
0000891E                            
0000891E                            DLE_GHZ3boss:
0000891E 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008924 6400                       		bcc.s	loc_6EB0
00008926 5538 F742                  		subq.b	#2,(v_dle_routine).w
0000892A                            
0000892A                            loc_6EB0:
0000892A 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008930 6500                       		bcs.s	locret_6EE8
00008932 6100 0000                  		bsr.w	FindFreeObj
00008936 6600                       		bne.s	loc_6ED0
00008938 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
0000893C 337C 1460 0008             		move.w	#$1460,obX(a1)
00008942 337C 0280 000C             		move.w	#$280,obY(a1)
00008948                            
00008948                            loc_6ED0:
00008950 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008956 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000895A 7000                       		moveq	#plcid_Egg,d0
0000895C 6000 8B08                  		bra.w	AddPLC		; load boss patterns
00008960                            		
00008960                            ; ===========================================================================
00008960                            
00008960                            locret_6EE8:
00008960 4E75                       		rts	
00008962                            ; ===========================================================================
00008962                            
00008962                            DLE_GHZ3end:
00008962 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008968 337C 0280 000C             		move.w	#$280,obY(a1)
0000896E 4E75                       		rts	
00008970                            ; ===========================================================================
00008970                            ; ---------------------------------------------------------------------------
00008970                            ; Labyrinth Zone dynamic level events
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            DLE_LZ:
00008970 7000                       		moveq	#0,d0
00008972 1038 FE11                  		move.b	(v_act).w,d0
00008976 D040                       		add.w	d0,d0
00008978 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
0000897C 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008980                            ; ===========================================================================
00008980 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008982 0000                       		dc.w DLE_LZ12-DLE_LZx
00008984 0000                       		dc.w DLE_LZ3-DLE_LZx
00008986 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008988                            ; ===========================================================================
00008988                            
00008988                            DLE_LZ12:
00008988 4E75                       		rts	
0000898A                            ; ===========================================================================
0000898A                            
0000898A                            DLE_LZ3:
0000898A 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
0000898E 6700                       		beq.s	loc_6F28	; if not, branch
00008990 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008994 0C11 0007                  		cmpi.b	#7,(a1)
00008998 6700                       		beq.s	loc_6F28
0000899A 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000089A6                            
000089A6                            loc_6F28:
000089A6 4A38 F742                  		tst.b	(v_dle_routine).w
000089AA 6600                       		bne.s	locret_6F64
000089AC 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
000089B2 6500                       		bcs.s	locret_6F62
000089B4 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
000089BA 6400                       		bcc.s	locret_6F62
000089BC 6100 0000                  		bsr.w	FindFreeObj
000089C0 6600                       		bne.s	loc_6F4A
000089C2 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
000089C6                            
000089C6                            loc_6F4A:
000089CE 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089D4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089D8 7000                       		moveq	#plcid_Boss,d0
000089DA 6000 8A8A                  		bra.w	AddPLC		; load boss patterns
000089DE                            ; ===========================================================================
000089DE                            
000089DE                            locret_6F62:
000089DE 4E75                       		rts	
000089E0                            ; ===========================================================================
000089E0                            
000089E0                            locret_6F64:
000089E0 4E75                       		rts	
000089E2                            ; ===========================================================================
000089E2                            
000089E2                            DLE_SBZ3:
000089E2 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
000089E8 6500                       		bcs.s	locret_6F8C
000089EA 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000089F0 6400                       		bcc.s	locret_6F8C	; if not, branch
000089F2 4238 FE30                  		clr.b	(v_lastlamp).w
000089F6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
000089FC 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008A02 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008A08                            
00008A08                            locret_6F8C:
00008A08 4E75                       		rts	
00008A0A                            ; ===========================================================================
00008A0A                            ; ---------------------------------------------------------------------------
00008A0A                            ; Marble Zone dynamic level events
00008A0A                            ; ---------------------------------------------------------------------------
00008A0A                            
00008A0A                            DLE_MZ:
00008A0A 7000                       		moveq	#0,d0
00008A0C 1038 FE11                  		move.b	(v_act).w,d0
00008A10 D040                       		add.w	d0,d0
00008A12 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008A16 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008A1A                            ; ===========================================================================
00008A1A 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008A1C 0000                       		dc.w DLE_MZ2-DLE_MZx
00008A1E 0000                       		dc.w DLE_MZ3-DLE_MZx
00008A20                            ; ===========================================================================
00008A20                            
00008A20                            DLE_MZ1:
00008A20 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008A26 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008A2C 6500                       		bcs.s	locret_6FE8
00008A2E 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008A34                            
00008A34                            locret_6FE8:
00008A34 4E75                       		rts	
00008A36                            
00008A36                            ; ===========================================================================
00008A36                            
00008A36                            DLE_MZ2:
00008A36 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008A3C 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008A42 6500                       		bcs.s	locret_6FE9
00008A44 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008A4A                            		
00008A4A                            locret_6FE9:
00008A4A 4E75                       		rts	
00008A4C                            ; ===========================================================================
00008A4C                            
00008A4C                            DLE_MZ3:
00008A4C 7000                       		moveq	#0,d0
00008A4E 1038 F742                  		move.b	(v_dle_routine).w,d0
00008A52 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008A56 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008A5A                            ; ===========================================================================
00008A5A 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008A5C 0000                       		dc.w DLE_MZ3end-off_7098
00008A5E                            ; ===========================================================================
00008A5E                            
00008A5E                            DLE_MZ3boss:
00008A5E 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008A64 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008A6A 6500                       		bcs.s	locret_70E8
00008A6C 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008A72 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008A78 6500                       		bcs.s	locret_70E8
00008A7A 6100 0000                  		bsr.w	FindFreeObj
00008A7E 6600                       		bne.s	loc_70D0
00008A80 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008A84 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008A8A 337C 022C 000C             		move.w	#$22C,obY(a1)
00008A90                            
00008A90                            loc_70D0:
00008A98 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008A9E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AA2 7000                       		moveq	#plcid_Boss,d0
00008AA4 6000 89C0                  		bra.w	AddPLC		; load boss patterns
00008AA8                            ; ===========================================================================
00008AA8                            
00008AA8                            locret_70E8:
00008AA8 4E75                       		rts	
00008AAA                            ; ===========================================================================
00008AAA                            
00008AAA                            DLE_MZ3end:
00008AAA 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008AB0 4E75                       		rts	
00008AB2                            		
00008AB2                            ; ===========================================================================
00008AB2                            ; ---------------------------------------------------------------------------
00008AB2                            ; Star Light Zone dynamic level events
00008AB2                            ; ---------------------------------------------------------------------------
00008AB2                            
00008AB2                            DLE_SLZ:
00008AB2 7000                       		moveq	#0,d0
00008AB4 1038 FE11                  		move.b	(v_act).w,d0
00008AB8 D040                       		add.w	d0,d0
00008ABA 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008ABE 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008AC2                            ; ===========================================================================
00008AC2 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008AC4 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008AC6 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008AC8                            ; ===========================================================================
00008AC8                            
00008AC8                            DLE_SLZ12:
00008AC8 4E75                       		rts	
00008ACA                            ; ===========================================================================
00008ACA                            
00008ACA                            DLE_SLZ3:
00008ACA 7000                       		moveq	#0,d0
00008ACC 1038 F742                  		move.b	(v_dle_routine).w,d0
00008AD0 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008AD4 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008AD8                            ; ===========================================================================
00008AD8 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008ADA 0000                       		dc.w DLE_SLZ3boss-off_7118
00008ADC 0000                       		dc.w DLE_SLZ3end-off_7118
00008ADE                            ; ===========================================================================
00008ADE                            
00008ADE                            DLE_SLZ3main:
00008ADE 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008AE4 6500                       		bcs.s	locret_7130
00008AE6 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008AEC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008AF0                            
00008AF0                            locret_7130:
00008AF0 4E75                       		rts	
00008AF2                            ; ===========================================================================
00008AF2                            
00008AF2                            DLE_SLZ3boss:
00008AF2 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008AF8 6500                       		bcs.s	locret_715C
00008AFA 6100 0000                  		bsr.w	FindFreeObj
00008AFE 6600                       		bne.s	loc_7144
00008B00 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008B04                            
00008B04                            loc_7144:
00008B0C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008B12 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B16 7000                       		moveq	#plcid_Boss,d0
00008B18 6000 894C                  		bra.w	AddPLC		; load boss patterns
00008B1C                            ; ===========================================================================
00008B1C                            
00008B1C                            locret_715C:
00008B1C 4E75                       		rts	
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            DLE_SLZ3end:
00008B1E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008B24 4E75                       		rts
00008B26 4E75                       		rts
00008B28                            ; ===========================================================================
00008B28                            ; ---------------------------------------------------------------------------
00008B28                            ; Spring Yard Zone dynamic level events
00008B28                            ; ---------------------------------------------------------------------------
00008B28                            
00008B28                            DLE_SYZ:
00008B28 7000                       		moveq	#0,d0
00008B2A 1038 FE11                  		move.b	(v_act).w,d0
00008B2E D040                       		add.w	d0,d0
00008B30 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008B34 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008B38                            ; ===========================================================================
00008B38 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008B3A 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008B3C 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008B3E                            ; ===========================================================================
00008B3E                            
00008B3E                            DLE_SYZ1:
00008B3E 4E75                       		rts	
00008B40                            ; ===========================================================================
00008B40                            
00008B40                            DLE_SYZ2:
00008B40 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008B46 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008B4C 6500                       		bcs.s	locret_71A2
00008B4E 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008B54 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008B5A 6500                       		bcs.s	locret_71A2
00008B5C 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008B62                            
00008B62                            locret_71A2:
00008B62 4E75                       		rts	
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            DLE_SYZ3:
00008B64 7000                       		moveq	#0,d0
00008B66 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B6A 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008B6E 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008B72                            ; ===========================================================================
00008B72 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008B74 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008B76 0000                       		dc.w DLE_SYZ3end-off_71B2
00008B78                            ; ===========================================================================
00008B78                            
00008B78                            DLE_SYZ3main:
00008B78 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008B7E 6500                       		bcs.s	locret_71CE
00008B80 6100 0000                  		bsr.w	FindFreeObj
00008B84 6600                       		bne.s	locret_71CE
00008B86 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008B8A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B8E                            
00008B8E                            locret_71CE:
00008B8E 4E75                       		rts	
00008B90                            ; ===========================================================================
00008B90                            
00008B90                            DLE_SYZ3boss:
00008B90 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008B96 6500                       		bcs.s	locret_7200
00008B98 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008B9E 6100 0000                  		bsr.w	FindFreeObj
00008BA2 6600                       		bne.s	loc_71EC
00008BA4 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008BA8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BAC                            
00008BAC                            loc_71EC:
00008BB4 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BBA 7000                       		moveq	#plcid_Boss,d0
00008BBC 6000 88A8                  		bra.w	AddPLC		; load boss patterns
00008BC0                            ; ===========================================================================
00008BC0                            
00008BC0                            locret_7200:
00008BC0 4E75                       		rts	
00008BC2                            ; ===========================================================================
00008BC2                            
00008BC2                            DLE_SYZ3end:
00008BC2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008BC8 4E75                       		rts	
00008BCA                            ; ===========================================================================
00008BCA                            ; ---------------------------------------------------------------------------
00008BCA                            ; Scrap	Brain Zone dynamic level events
00008BCA                            ; ---------------------------------------------------------------------------
00008BCA                            
00008BCA                            DLE_SBZ:
00008BCA 7000                       		moveq	#0,d0
00008BCC 1038 FE11                  		move.b	(v_act).w,d0
00008BD0 D040                       		add.w	d0,d0
00008BD2 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008BD6 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008BDA                            ; ===========================================================================
00008BDA 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008BDC 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008BDE 0000                       		dc.w DLE_FZ-DLE_SBZx
00008BE0                            ; ===========================================================================
00008BE0                            
00008BE0                            DLE_SBZ1:
00008BE0 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008BE6 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008BEC 6500                       		bcs.s	locret_7242
00008BEE 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008BF4 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008BFA 6500                       		bcs.s	locret_7242
00008BFC 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008C02                            
00008C02                            locret_7242:
00008C02 4E75                       		rts	
00008C04                            ; ===========================================================================
00008C04                            
00008C04                            DLE_SBZ2:
00008C04 7000                       		moveq	#0,d0
00008C06 1038 F742                  		move.b	(v_dle_routine).w,d0
00008C0A 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008C0E 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008C12                            ; ===========================================================================
00008C12 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008C14 0000                       		dc.w DLE_SBZ2boss-off_7252
00008C16 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008C18 0000                       		dc.w DLE_SBZ2end-off_7252
00008C1A                            ; ===========================================================================
00008C1A                            
00008C1A                            DLE_SBZ2main:
00008C1A 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008C20 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008C26 6500                       		bcs.s	locret_727A
00008C28 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008C2E 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008C34 6500                       		bcs.s	locret_727A
00008C36 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C3A                            
00008C3A                            locret_727A:
00008C3A 4E75                       		rts	
00008C3C                            ; ===========================================================================
00008C3C                            
00008C3C                            DLE_SBZ2boss:
00008C3C 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008C42 6500                       		bcs.s	locret_7298
00008C44 6100 0000                  		bsr.w	FindFreeObj
00008C48 6600                       		bne.s	locret_7298
00008C4A 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008C4E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C52 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008C54 6000 8810                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008C58                            ; ===========================================================================
00008C58                            
00008C58                            locret_7298:
00008C58 4E75                       		rts	
00008C5A                            ; ===========================================================================
00008C5A                            
00008C5A                            DLE_SBZ2boss2:
00008C5A 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008C60 6500                       		bcs.s	loc_72B6
00008C62 6100 0000                  		bsr.w	FindFreeObj
00008C66 6600                       		bne.s	loc_72B0
00008C68 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008C6C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C70                            
00008C70                            loc_72B0:
00008C70 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C76                            
00008C76                            loc_72B6:
00008C76 6000                       		bra.s	loc_72C2
00008C78                            ; ===========================================================================
00008C78                            
00008C78                            DLE_SBZ2end:
00008C78 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008C7E 6500                       		bcs.s	loc_72C2
00008C80 4E75                       		rts	
00008C82                            ; ===========================================================================
00008C82                            
00008C82                            loc_72C2:
00008C82 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008C88 4E75                       		rts	
00008C8A                            ; ===========================================================================
00008C8A                            
00008C8A                            DLE_FZ:
00008C8A 7000                       		moveq	#0,d0
00008C8C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008C90 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008C94 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008C98                            ; ===========================================================================
00008C98 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008C9C 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008CA0 0000                       		dc.w DLE_FZend2-off_72D8
00008CA2                            ; ===========================================================================
00008CA2                            
00008CA2                            DLE_FZmain:
00008CA2 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008CA8 6500                       		bcs.s	loc_72F4
00008CAA 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CAE 7000                       		moveq	#plcid_FZBoss,d0
00008CB0 6100 87B4                  		bsr.w	AddPLC		; load FZ boss patterns
00008CB4                            
00008CB4                            loc_72F4:
00008CB4 60CC                       		bra.s	loc_72C2
00008CB6                            ; ===========================================================================
00008CB6                            
00008CB6                            DLE_FZboss:
00008CB6 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008CBC 6500                       		bcs.s	loc_7312
00008CBE 6100 0000                  		bsr.w	FindFreeObj
00008CC2 6600                       		bne.s	loc_7312
00008CC4 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008CC8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CCC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CD2                            
00008CD2                            loc_7312:
00008CD2 60AE                       		bra.s	loc_72C2
00008CD4                            ; ===========================================================================
00008CD4                            
00008CD4                            DLE_FZend:
00008CD4 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008CDA 6500                       		bcs.s	loc_7320
00008CDC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CE0                            
00008CE0                            loc_7320:
00008CE0 60A0                       		bra.s	loc_72C2
00008CE2                            ; ===========================================================================
00008CE2                            
00008CE2                            locret_7322:
00008CE2 4E75                       		rts	
00008CE4                            ; ===========================================================================
00008CE4                            
00008CE4                            DLE_FZend2:
00008CE4 609C                       		bra.s	loc_72C2
00008CE6                            ; ===========================================================================
00008CE6                            ; ---------------------------------------------------------------------------
00008CE6                            ; Ending sequence dynamic level events (empty)
00008CE6                            ; ---------------------------------------------------------------------------
00008CE6                            
00008CE6                            DLE_Ending:
00008CE6 4E75                       		rts	
00008CE6 4E75                       		rts	
00008CE8                            
00008CE8                            		include	"_incObj\11 Bridge (part 1).asm"
00008CE8                            ; ---------------------------------------------------------------------------
00008CE8                            ; Object 11 - GHZ bridge
00008CE8                            ; ---------------------------------------------------------------------------
00008CE8                            
00008CE8                            Bridge:
00008CE8 7000                       		moveq	#0,d0
00008CEA 1028 0024                  		move.b	obRoutine(a0),d0
00008CEE 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008CF2 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008CF6                            ; ===========================================================================
00008CF6 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008CFA 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008CFE 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008D02                            ; ===========================================================================
00008D02                            
00008D02                            Bri_Main:	; Routine 0
00008D02 5428 0024                  		addq.b	#2,obRoutine(a0)
00008D06 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008D0E 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008D14 117C 0004 0001             		move.b	#4,obRender(a0)
00008D1A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008D20 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008D26 3428 000C                  		move.w	obY(a0),d2
00008D2A 3628 0008                  		move.w	obX(a0),d3
00008D2E 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008D30 45E8 0028                  		lea	obSubtype(a0),a2
00008D34 7200                       		moveq	#0,d1
00008D36 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008D38 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008D3C 3001                       		move.w	d1,d0
00008D3E E248                       		lsr.w	#1,d0
00008D40 E948                       		lsl.w	#4,d0
00008D42 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008D44 5501                       		subq.b	#2,d1
00008D46 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008D48                            
00008D48                            @buildloop:
00008D48 6100 0000                  		bsr.w	FindFreeObj
00008D4C 6600                       		bne.s	Bri_Action
00008D4E 5228 0028                  		addq.b	#1,obSubtype(a0)
00008D52 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008D56 6600                       		bne.s	@notleftmost	; if not, branch
00008D58                            
00008D58 0643 0010                  		addi.w	#$10,d3
00008D5C 3142 000C                  		move.w	d2,obY(a0)
00008D60 3142 003C                  		move.w	d2,$3C(a0)
00008D64 3A08                       		move.w	a0,d5
00008D66 0445 D000                  		subi.w	#$D000,d5
00008D6A EC4D                       		lsr.w	#6,d5
00008D6C 0245 007F                  		andi.w	#$7F,d5
00008D70 14C5                       		move.b	d5,(a2)+
00008D72 5228 0028                  		addq.b	#1,obSubtype(a0)
00008D76                            
00008D76                            	@notleftmost:
00008D76 3A09                       		move.w	a1,d5
00008D78 0445 D000                  		subi.w	#$D000,d5
00008D7C EC4D                       		lsr.w	#6,d5
00008D7E 0245 007F                  		andi.w	#$7F,d5
00008D82 14C5                       		move.b	d5,(a2)+
00008D84 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008D8A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008D8C 3342 000C                  		move.w	d2,obY(a1)
00008D90 3342 003C                  		move.w	d2,$3C(a1)
00008D94 3343 0008                  		move.w	d3,obX(a1)
00008D98 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008DA0 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008DA6 137C 0004 0001             		move.b	#4,obRender(a1)
00008DAC 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008DB2 137C 0008 0014             		move.b	#8,obActWid(a1)
00008DB8 0643 0010                  		addi.w	#$10,d3
00008DBC 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008DC0                            
00008DC0                            Bri_Action:	; Routine 2
00008DC0 6100                       		bsr.s	Bri_Solid
00008DC2 4A28 003E                  		tst.b	$3E(a0)
00008DC6 6700                       		beq.s	@display
00008DC8 5928 003E                  		subq.b	#4,$3E(a0)
00008DCC 6100 0000                  		bsr.w	Bri_Bend
00008DD0                            
00008DD0                            	@display:
00008DD0 6100 0000                  		bsr.w	DisplaySprite
00008DD4 6000 0000                  		bra.w	Bri_ChkDel
00008DD8                            
00008DD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DD8                            
00008DD8                            
00008DD8                            Bri_Solid:
00008DD8 7200                       		moveq	#0,d1
00008DDA 1228 0028                  		move.b	obSubtype(a0),d1
00008DDE E749                       		lsl.w	#3,d1
00008DE0 3401                       		move.w	d1,d2
00008DE2 5041                       		addq.w	#8,d1
00008DE4 D442                       		add.w	d2,d2
00008DE6 43F8 D000                  		lea	(v_player).w,a1
00008DEA 4A69 0012                  		tst.w	obVelY(a1)
00008DEE 6B00 0000                  		bmi.w	Plat_Exit
00008DF2 3029 0008                  		move.w	obX(a1),d0
00008DF6 9068 0008                  		sub.w	obX(a0),d0
00008DFA D041                       		add.w	d1,d0
00008DFC 6B00 0000                  		bmi.w	Plat_Exit
00008E00 B042                       		cmp.w	d2,d0
00008E02 6400 0000                  		bcc.w	Plat_Exit
00008E06 6000                       		bra.s	Plat_NoXCheck
00008E08                            ; End of function Bri_Solid
00008E08                            ; End of function Bri_Solid
00008E08                            
00008E08                            ; ---------------------------------------------------------------------------
00008E08                            ; Platform subroutine
00008E08                            ; ---------------------------------------------------------------------------
00008E08                            
00008E08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E08                            
00008E08                            PlatformObject:
00008E08 43F8 D000                  		lea	(v_player).w,a1
00008E0C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008E10 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008E14                            
00008E14                            ;		perform x-axis range check
00008E14 3029 0008                  		move.w	obX(a1),d0
00008E18 9068 0008                  		sub.w	obX(a0),d0
00008E1C D041                       		add.w	d1,d0
00008E1E 6B00 0000                  		bmi.w	Plat_Exit
00008E22 D241                       		add.w	d1,d1
00008E24 B041                       		cmp.w	d1,d0
00008E26 6400 0000                  		bhs.w	Plat_Exit
00008E2A                            
00008E2A                            	Plat_NoXCheck:
00008E2A 3028 000C                  		move.w	obY(a0),d0
00008E2E 5140                       		subq.w	#8,d0
00008E30                            
00008E30                            Platform3:
00008E30                            ;		perform y-axis range check
00008E30 3429 000C                  		move.w	obY(a1),d2
00008E34 1229 0016                  		move.b	obHeight(a1),d1
00008E38 4881                       		ext.w	d1
00008E3A D242                       		add.w	d2,d1
00008E3C 5841                       		addq.w	#4,d1
00008E3E 9041                       		sub.w	d1,d0
00008E40 6200 0000                  		bhi.w	Plat_Exit
00008E44 0C40 FFF0                  		cmpi.w	#-$10,d0
00008E48 6500 0000                  		blo.w	Plat_Exit
00008E4C                            
00008E4C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008E50 6B00 0000                  		bmi.w	Plat_Exit
00008E54 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008E5A 6400 0000                  		bhs.w	Plat_Exit
00008E5E D440                       		add.w	d0,d2
00008E60 5642                       		addq.w	#3,d2
00008E62 3342 000C                  		move.w	d2,obY(a1)
00008E66 5428 0024                  		addq.b	#2,obRoutine(a0)
00008E6A                            
00008E6A                            loc_74AE:
00008E6A 0829 0003 0022             		btst	#3,obStatus(a1)
00008E70 6700                       		beq.s	loc_74DC
00008E72 7000                       		moveq	#0,d0
00008E74 1029 003D                  		move.b	$3D(a1),d0
00008E78 ED48                       		lsl.w	#6,d0
00008E7A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008E80 2440                       		movea.l	d0,a2
00008E82 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008E88 422A 0025                  		clr.b	ob2ndRout(a2)
00008E8C 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008E92 6600                       		bne.s	loc_74DC
00008E94 552A 0024                  		subq.b	#2,obRoutine(a2)
00008E98                            
00008E98                            loc_74DC:
00008E98 3008                       		move.w	a0,d0
00008E9A 0440 D000                  		subi.w	#-$3000,d0
00008E9E EC48                       		lsr.w	#6,d0
00008EA0 0240 007F                  		andi.w	#$7F,d0
00008EA4 1340 003D                  		move.b	d0,$3D(a1)
00008EA8 137C 0000 0026             		move.b	#0,obAngle(a1)
00008EAE 337C 0000 0012             		move.w	#0,obVelY(a1)
00008EB4 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008EBA 0829 0001 0022             		btst	#1,obStatus(a1)
00008EC0 6700                       		beq.s	loc_7512
00008EC2 2F08                       		move.l	a0,-(sp)
00008EC4 2049                       		movea.l	a1,a0
00008EC6 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008ECC 205F                       		movea.l	(sp)+,a0
00008ECE                            
00008ECE                            loc_7512:
00008ECE 08E9 0003 0022             		bset	#3,obStatus(a1)
00008ED4 08E8 0003 0022             		bset	#3,obStatus(a0)
00008EDA                            
00008EDA                            Plat_Exit:
00008EDA 4E75                       		rts	
00008EDC                            ; End of function PlatformObject
00008EDC                            
00008EDC                            ; ---------------------------------------------------------------------------
00008EDC                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008EDC                            ; ---------------------------------------------------------------------------
00008EDC                            
00008EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EDC                            
00008EDC                            
00008EDC                            SlopeObject:
00008EDC 43F8 D000                  		lea	(v_player).w,a1
00008EE0 4A69 0012                  		tst.w	obVelY(a1)
00008EE4 6B00 FFF4                  		bmi.w	Plat_Exit
00008EE8 3029 0008                  		move.w	obX(a1),d0
00008EEC 9068 0008                  		sub.w	obX(a0),d0
00008EF0 D041                       		add.w	d1,d0
00008EF2 6BE6                       		bmi.s	Plat_Exit
00008EF4 D241                       		add.w	d1,d1
00008EF6 B041                       		cmp.w	d1,d0
00008EF8 64E0                       		bhs.s	Plat_Exit
00008EFA 0828 0000 0001             		btst	#0,obRender(a0)
00008F00 6700                       		beq.s	loc_754A
00008F02 4640                       		not.w	d0
00008F04 D041                       		add.w	d1,d0
00008F06                            
00008F06                            loc_754A:
00008F06 E248                       		lsr.w	#1,d0
00008F08 7600                       		moveq	#0,d3
00008F0A 1632 0000                  		move.b	(a2,d0.w),d3
00008F0E 3028 000C                  		move.w	obY(a0),d0
00008F12 9043                       		sub.w	d3,d0
00008F14 6000 FF1A                  		bra.w	Platform3
00008F18                            ; End of function SlopeObject
00008F18                            
00008F18                            
00008F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F18                            
00008F18                            
00008F18                            Swing_Solid:
00008F18 43F8 D000                  		lea	(v_player).w,a1
00008F1C 4A69 0012                  		tst.w	obVelY(a1)
00008F20 6B00 FFB8                  		bmi.w	Plat_Exit
00008F24 3029 0008                  		move.w	obX(a1),d0
00008F28 9068 0008                  		sub.w	obX(a0),d0
00008F2C D041                       		add.w	d1,d0
00008F2E 6B00 FFAA                  		bmi.w	Plat_Exit
00008F32 D241                       		add.w	d1,d1
00008F34 B041                       		cmp.w	d1,d0
00008F36 6400 FFA2                  		bhs.w	Plat_Exit
00008F3A 3028 000C                  		move.w	obY(a0),d0
00008F3E 9043                       		sub.w	d3,d0
00008F40 6000 FEEE                  		bra.w	Platform3
00008F44                            ; End of function Obj15_Solid
00008F44                            
00008F44                            ; ===========================================================================
00008F44                            
00008F44                            		include	"_incObj\11 Bridge (part 2).asm"
00008F44                            
00008F44                            Bri_Platform:	; Routine 4
00008F44 6100                       		bsr.s	Bri_WalkOff
00008F46 6100 0000                  		bsr.w	DisplaySprite
00008F4A 6000 0000                  		bra.w	Bri_ChkDel
00008F4E                            
00008F4E                            ; ---------------------------------------------------------------------------
00008F4E                            ; Subroutine allowing Sonic to walk off a bridge
00008F4E                            ; ---------------------------------------------------------------------------
00008F4E                            
00008F4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F4E                            
00008F4E                            
00008F4E                            Bri_WalkOff:
00008F4E 7200                       		moveq	#0,d1
00008F50 1228 0028                  		move.b	obSubtype(a0),d1
00008F54 E749                       		lsl.w	#3,d1
00008F56 3401                       		move.w	d1,d2
00008F58 5041                       		addq.w	#8,d1
00008F5A 6100                       		bsr.s	ExitPlatform2
00008F5C 6400                       		bcc.s	locret_75BE
00008F5E E848                       		lsr.w	#4,d0
00008F60 1140 003F                  		move.b	d0,$3F(a0)
00008F64 1028 003E                  		move.b	$3E(a0),d0
00008F68 0C00 0040                  		cmpi.b	#$40,d0
00008F6C 6700                       		beq.s	loc_75B6
00008F6E 5828 003E                  		addq.b	#4,$3E(a0)
00008F72                            
00008F72                            loc_75B6:
00008F72 6100 0000                  		bsr.w	Bri_Bend
00008F76 6100 0000                  		bsr.w	Bri_MoveSonic
00008F7A                            
00008F7A                            locret_75BE:
00008F7A 4E75                       		rts	
00008F7C                            ; End of function Bri_WalkOff
00008F7C                            ; End of function Bri_WalkOff
00008F7C                            
00008F7C                            ; ---------------------------------------------------------------------------
00008F7C                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008F7C                            ; ---------------------------------------------------------------------------
00008F7C                            
00008F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F7C                            
00008F7C                            
00008F7C                            ExitPlatform:
00008F7C 3401                       		move.w	d1,d2
00008F7E                            
00008F7E                            ExitPlatform2:
00008F7E D442                       		add.w	d2,d2
00008F80 43F8 D000                  		lea	(v_player).w,a1
00008F84 0829 0001 0022             		btst	#1,obStatus(a1)
00008F8A 6600                       		bne.s	loc_75E0
00008F8C 3029 0008                  		move.w	obX(a1),d0
00008F90 9068 0008                  		sub.w	obX(a0),d0
00008F94 D041                       		add.w	d1,d0
00008F96 6B00                       		bmi.s	loc_75E0
00008F98 B042                       		cmp.w	d2,d0
00008F9A 6500                       		blo.s	locret_75F2
00008F9C                            
00008F9C                            loc_75E0:
00008F9C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008FA2 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008FA8 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008FAE                            
00008FAE                            locret_75F2:
00008FAE 4E75                       		rts	
00008FB0                            ; End of function ExitPlatform
00008FB0                            
00008FB0                            		include	"_incObj\11 Bridge (part 3).asm"
00008FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FB0                            
00008FB0                            
00008FB0                            Bri_MoveSonic:
00008FB0 7000                       		moveq	#0,d0
00008FB2 1028 003F                  		move.b	$3F(a0),d0
00008FB6 1030 0029                  		move.b	$29(a0,d0.w),d0
00008FBA ED48                       		lsl.w	#6,d0
00008FBC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008FC2 2440                       		movea.l	d0,a2
00008FC4 43F8 D000                  		lea	(v_player).w,a1
00008FC8 302A 000C                  		move.w	obY(a2),d0
00008FCC 5140                       		subq.w	#8,d0
00008FCE 7200                       		moveq	#0,d1
00008FD0 1229 0016                  		move.b	obHeight(a1),d1
00008FD4 9041                       		sub.w	d1,d0
00008FD6 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008FDA 4E75                       		rts	
00008FDC                            ; End of function Bri_MoveSonic
00008FDC                            
00008FDC                            
00008FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FDC                            
00008FDC                            
00008FDC                            Bri_Bend:
00008FDC 1028 003E                  		move.b	$3E(a0),d0
00008FE0 6100 A7CC                  		bsr.w	CalcSine
00008FE4 3800                       		move.w	d0,d4
00008FE6 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008FEC 7000                       		moveq	#0,d0
00008FEE 1028 0028                  		move.b	obSubtype(a0),d0
00008FF2 E948                       		lsl.w	#4,d0
00008FF4 7600                       		moveq	#0,d3
00008FF6 1628 003F                  		move.b	$3F(a0),d3
00008FFA 3403                       		move.w	d3,d2
00008FFC D640                       		add.w	d0,d3
00008FFE 7A00                       		moveq	#0,d5
00009000 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009006 1A35 3000                  		move.b	(a5,d3.w),d5
0000900A 0243 000F                  		andi.w	#$F,d3
0000900E E94B                       		lsl.w	#4,d3
00009010 47F4 3000                  		lea	(a4,d3.w),a3
00009014 45E8 0029                  		lea	$29(a0),a2
00009018                            
00009018                            loc_765C:
00009018 7000                       		moveq	#0,d0
0000901A 101A                       		move.b	(a2)+,d0
0000901C ED48                       		lsl.w	#6,d0
0000901E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009024 2240                       		movea.l	d0,a1
00009026 7000                       		moveq	#0,d0
00009028 101B                       		move.b	(a3)+,d0
0000902A 5240                       		addq.w	#1,d0
0000902C C0C5                       		mulu.w	d5,d0
0000902E C0C4                       		mulu.w	d4,d0
00009030 4840                       		swap	d0
00009032 D069 003C                  		add.w	$3C(a1),d0
00009036 3340 000C                  		move.w	d0,obY(a1)
0000903A 51CA FFDC                  		dbf	d2,loc_765C
0000903E 7000                       		moveq	#0,d0
00009040 1028 0028                  		move.b	obSubtype(a0),d0
00009044 7600                       		moveq	#0,d3
00009046 1628 003F                  		move.b	$3F(a0),d3
0000904A 5203                       		addq.b	#1,d3
0000904C 9600                       		sub.b	d0,d3
0000904E 4403                       		neg.b	d3
00009050 6B00                       		bmi.s	locret_76CA
00009052 3403                       		move.w	d3,d2
00009054 E94B                       		lsl.w	#4,d3
00009056 47F4 3000                  		lea	(a4,d3.w),a3
0000905A D6C2                       		adda.w	d2,a3
0000905C 5342                       		subq.w	#1,d2
0000905E 6500                       		bcs.s	locret_76CA
00009060                            
00009060                            loc_76A4:
00009060 7000                       		moveq	#0,d0
00009062 101A                       		move.b	(a2)+,d0
00009064 ED48                       		lsl.w	#6,d0
00009066 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000906C 2240                       		movea.l	d0,a1
0000906E 7000                       		moveq	#0,d0
00009070 1023                       		move.b	-(a3),d0
00009072 5240                       		addq.w	#1,d0
00009074 C0C5                       		mulu.w	d5,d0
00009076 C0C4                       		mulu.w	d4,d0
00009078 4840                       		swap	d0
0000907A D069 003C                  		add.w	$3C(a1),d0
0000907E 3340 000C                  		move.w	d0,obY(a1)
00009082 51CA FFDC                  		dbf	d2,loc_76A4
00009086                            
00009086                            locret_76CA:
00009086 4E75                       		rts	
00009088                            ; End of function Bri_Bend
00009088                            
00009088                            ; ===========================================================================
00009088                            ; ---------------------------------------------------------------------------
00009088                            ; GHZ bridge-bending data
00009088                            ; (Defines how the bridge bends	when Sonic walks across	it)
00009088                            ; ---------------------------------------------------------------------------
00009088                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00009198                            		even
00009198                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00009298                            		even
00009298                            
00009298                            ; ===========================================================================
00009298                            
00009298                            Bri_ChkDel:
000092B6 4E75                       		rts	
000092B8                            ; ===========================================================================
000092B8                            
000092B8                            @deletebridge:
000092B8 7400                       		moveq	#0,d2
000092BA 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
000092BE 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000092C0 5302                       		subq.b	#1,d2		; subtract 1
000092C2 6500                       		bcs.s	@delparent
000092C4                            
000092C4                            	@loop:
000092C4 7000                       		moveq	#0,d0
000092C6 101A                       		move.b	(a2)+,d0
000092C8 ED48                       		lsl.w	#6,d0
000092CA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092D0 2240                       		movea.l	d0,a1
000092D2 B048                       		cmp.w	a0,d0
000092D4 6700                       		beq.s	@skipdel
000092D6 6100 0000                  		bsr.w	DeleteChild
000092DA                            
000092DA                            	@skipdel:
000092DA 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
000092DE                            
000092DE                            @delparent:
000092DE 6100 0000                  		bsr.w	DeleteObject
000092E2 4E75                       		rts	
000092E4                            ; ===========================================================================
000092E4                            
000092E4                            Bri_Delete:	; Routine 6, 8
000092E4 6100 0000                  		bsr.w	DeleteObject
000092E8 4E75                       		rts	
000092EA                            ; ===========================================================================
000092EA                            
000092EA                            Bri_Display:	; Routine $A
000092EA 6100 0000                  		bsr.w	DisplaySprite
000092EE 4E75                       		rts	
000092EE 4E75                       		rts	
000092F0                            Map_Bri:	include	"_maps\Bridge.asm"
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - GHZ	bridge
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            Map_Bri_internal:
000092F0 0000                       		dc.w M_Bri_Log-Map_Bri_internal
000092F2 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
000092F4 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
000092F6 01                         M_Bri_Log:	dc.b 1
000092F7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
000092FC 02                         M_Bri_Stump:	dc.b 2
000092FD F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009302 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009307 01                         M_Bri_Rope:	dc.b 1
00009308 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000930E 00                         		even
0000930E 00                         		even
0000930E                            
0000930E                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000930E                            ; ---------------------------------------------------------------------------
0000930E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000930E                            ;	    - spiked ball on a chain (SBZ)
0000930E                            ; ---------------------------------------------------------------------------
0000930E                            
0000930E                            SwingingPlatform:
0000930E 7000                       		moveq	#0,d0
00009310 1028 0024                  		move.b	obRoutine(a0),d0
00009314 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009318 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000931C                            ; ===========================================================================
0000931C 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00009320 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009324 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009328 0000                       		dc.w Swing_Action-Swing_Index
0000932A                            
0000932A =0000003A                  swing_origX:	equ $3A		; original x-axis position
0000932A =00000038                  swing_origY:	equ $38		; original y-axis position
0000932A                            ; ===========================================================================
0000932A                            
0000932A                            Swing_Main:	; Routine 0
0000932A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000932E 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009336 317C 4380 0002             		move.w	#$4380,obGfx(a0)
0000933C 117C 0004 0001             		move.b	#4,obRender(a0)
00009342 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009348 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000934E 117C 0008 0016             		move.b	#8,obHeight(a0)
00009354 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
0000935A 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
00009360 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009366 6600                       		bne.s	@notSLZ
00009368                            
00009368 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
00009370 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009376 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000937C 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009382 117C 0099 0020             		move.b	#$99,obColType(a0)
00009388                            
00009388                            	@notSLZ:
00009388 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000938E 6600                       		bne.s	@length
00009390                            
00009390 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009398 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000939E 117C 0018 0014             		move.b	#$18,obActWid(a0)
000093A4 117C 0018 0016             		move.b	#$18,obHeight(a0)
000093AA 117C 0086 0020             		move.b	#$86,obColType(a0)
000093B0 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000093B6                            
000093B6                            @length:
000093B6 1810                       		move.b	0(a0),d4
000093B8 7200                       		moveq	#0,d1
000093BA 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000093BE 1212                       		move.b	(a2),d1		; move a2 to d1
000093C0 3F01                       		move.w	d1,-(sp)
000093C2 0241 000F                  		andi.w	#$F,d1
000093C6 14FC 0000                  		move.b	#0,(a2)+
000093CA 3601                       		move.w	d1,d3
000093CC E94B                       		lsl.w	#4,d3
000093CE 5003                       		addq.b	#8,d3
000093D0 1143 003C                  		move.b	d3,$3C(a0)
000093D4 5103                       		subq.b	#8,d3
000093D6 4A28 001A                  		tst.b	obFrame(a0)
000093DA 6700                       		beq.s	@makechain
000093DC 5003                       		addq.b	#8,d3
000093DE 5341                       		subq.w	#1,d1
000093E0                            
000093E0                            @makechain:
000093E0 6100 0000                  		bsr.w	FindFreeObj
000093E4 6600                       		bne.s	@fail
000093E6 5228 0028                  		addq.b	#1,obSubtype(a0)
000093EA 3A09                       		move.w	a1,d5
000093EC 0445 D000                  		subi.w	#$D000,d5
000093F0 EC4D                       		lsr.w	#6,d5
000093F2 0245 007F                  		andi.w	#$7F,d5
000093F6 14C5                       		move.b	d5,(a2)+
000093F8 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
000093FE 1284                       		move.b	d4,0(a1)	; load swinging	object
00009400 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009406 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000940C 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009412 137C 0004 0001             		move.b	#4,obRender(a1)
00009418 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000941E 137C 0008 0014             		move.b	#8,obActWid(a1)
00009424 137C 0001 001A             		move.b	#1,obFrame(a1)
0000942A 1343 003C                  		move.b	d3,$3C(a1)
0000942E 0403 0010                  		subi.b	#$10,d3
00009432 6400                       		bcc.s	@notanchor
00009434 137C 0002 001A             		move.b	#2,obFrame(a1)
0000943A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009440 08E9 0006 0002             		bset	#6,obGfx(a1)
00009446                            
00009446                            	@notanchor:
00009446 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000944A                            
0000944A                            	@fail:
0000944A 3A08                       		move.w	a0,d5
0000944C 0445 D000                  		subi.w	#$D000,d5
00009450 EC4D                       		lsr.w	#6,d5
00009452 0245 007F                  		andi.w	#$7F,d5
00009456 14C5                       		move.b	d5,(a2)+
00009458 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000945E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009464 321F                       		move.w	(sp)+,d1
00009466 0801 0004                  		btst	#4,d1		; is object type $1X ?
0000946A 6700                       		beq.s	@not1X	; if not, branch
0000946C 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009474 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
0000947A 117C 0001 001A             		move.b	#1,obFrame(a0)
00009480 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009486 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
0000948C                            
0000948C                            	@not1X:
0000948C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009492 6700                       		beq.s	Swing_Action	; if yes, branch
00009494                            
00009494                            Swing_SetSolid:	; Routine 2
00009494 7200                       		moveq	#0,d1
00009496 1228 0014                  		move.b	obActWid(a0),d1
0000949A 7600                       		moveq	#0,d3
0000949C 1628 0016                  		move.b	obHeight(a0),d3
000094A0 6100 FA76                  		bsr.w	Swing_Solid
000094A4                            
000094A4                            Swing_Action:	; Routine $C
000094A4 6100 0000                  		bsr.w	Swing_Move
000094A8 6100 0000                  		bsr.w	DisplaySprite
000094AC 6000 0000                  		bra.w	Swing_ChkDel
000094B0                            ; ===========================================================================
000094B0                            
000094B0                            Swing_Action2:	; Routine 4
000094B0 7200                       		moveq	#0,d1
000094B2 1228 0014                  		move.b	obActWid(a0),d1
000094B6 6100 FAC4                  		bsr.w	ExitPlatform
000094BA 3F28 0008                  		move.w	obX(a0),-(sp)
000094BE 6100 0000                  		bsr.w	Swing_Move
000094C2 341F                       		move.w	(sp)+,d2
000094C4 7600                       		moveq	#0,d3
000094C6 1628 0016                  		move.b	obHeight(a0),d3
000094CA 5203                       		addq.b	#1,d3
000094CC 6100 0000                  		bsr.w	MvSonicOnPtfm
000094D0 6100 0000                  		bsr.w	DisplaySprite
000094D4 6000 0000                  		bra.w	Swing_ChkDel
000094D8                            
000094D8 4E75                       		rts
000094D8 4E75                       		rts
000094DA                            
000094DA                            ; ---------------------------------------------------------------------------
000094DA                            ; Subroutine to	change Sonic's position with a platform
000094DA                            ; ---------------------------------------------------------------------------
000094DA                            
000094DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094DA                            
000094DA                            
000094DA                            MvSonicOnPtfm:
000094DA 43F8 D000                  		lea	(v_player).w,a1
000094DE 3028 000C                  		move.w	obY(a0),d0
000094E2 9043                       		sub.w	d3,d0
000094E4 6000                       		bra.s	MvSonic2
000094E6                            ; End of function MvSonicOnPtfm
000094E6                            
000094E6                            ; ---------------------------------------------------------------------------
000094E6                            ; Subroutine to	change Sonic's position with a platform
000094E6                            ; ---------------------------------------------------------------------------
000094E6                            
000094E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094E6                            
000094E6                            
000094E6                            MvSonicOnPtfm2:
000094E6 43F8 D000                  		lea	(v_player).w,a1
000094EA 3028 000C                  		move.w	obY(a0),d0
000094EE 0440 0009                  		subi.w	#9,d0
000094F2                            
000094F2                            MvSonic2:
000094F2 4A38 F7C8                  		tst.b	(f_lockmulti).w
000094F6 6B00                       		bmi.s	locret_7B62
000094F8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000094FE 6400                       		bhs.s	locret_7B62
00009500 4A78 FE08                  		tst.w	(v_debuguse).w
00009504 6600                       		bne.s	locret_7B62
00009506 7200                       		moveq	#0,d1
00009508 1229 0016                  		move.b	obHeight(a1),d1
0000950C 9041                       		sub.w	d1,d0
0000950E 3340 000C                  		move.w	d0,obY(a1)
00009512 9468 0008                  		sub.w	obX(a0),d2
00009516 9569 0008                  		sub.w	d2,obX(a1)
0000951A                            
0000951A                            locret_7B62:
0000951A 4E75                       		rts	
0000951C                            ; End of function MvSonicOnPtfm2
0000951C                            
0000951C                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000951C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000951C                            
0000951C                            
0000951C                            Swing_Move:
0000951C 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
00009520 323C 0080                  		move.w	#$80,d1
00009524 0828 0000 0022             		btst	#0,obStatus(a0)
0000952A 6700                       		beq.s	loc_7B78
0000952C 4440                       		neg.w	d0
0000952E D041                       		add.w	d1,d0
00009530                            
00009530                            loc_7B78:
00009530 6000                       		bra.s	Swing_Move2
00009532                            ; End of function Swing_Move
00009532                            
00009532                            
00009532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009532                            
00009532                            
00009532                            Obj48_Move:
00009532 4A28 003D                  		tst.b	$3D(a0)
00009536 6600                       		bne.s	loc_7B9C
00009538 3028 003E                  		move.w	$3E(a0),d0
0000953C 5040                       		addq.w	#8,d0
0000953E 3140 003E                  		move.w	d0,$3E(a0)
00009542 D168 0026                  		add.w	d0,obAngle(a0)
00009546 0C40 0200                  		cmpi.w	#$200,d0
0000954A 6600                       		bne.s	loc_7BB6
0000954C 117C 0001 003D             		move.b	#1,$3D(a0)
00009552 6000                       		bra.s	loc_7BB6
00009554                            ; ===========================================================================
00009554                            
00009554                            loc_7B9C:
00009554 3028 003E                  		move.w	$3E(a0),d0
00009558 5140                       		subq.w	#8,d0
0000955A 3140 003E                  		move.w	d0,$3E(a0)
0000955E D168 0026                  		add.w	d0,obAngle(a0)
00009562 0C40 FE00                  		cmpi.w	#-$200,d0
00009566 6600                       		bne.s	loc_7BB6
00009568 117C 0000 003D             		move.b	#0,$3D(a0)
0000956E                            
0000956E                            loc_7BB6:
0000956E 1028 0026                  		move.b	obAngle(a0),d0
00009572                            ; End of function Obj48_Move
00009572                            
00009572                            
00009572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009572                            
00009572                            
00009572                            Swing_Move2:
00009572 6100 A23A                  		bsr.w	CalcSine
00009576 3428 0038                  		move.w	$38(a0),d2
0000957A 3628 003A                  		move.w	$3A(a0),d3
0000957E 45E8 0028                  		lea	obSubtype(a0),a2
00009582 7C00                       		moveq	#0,d6
00009584 1C1A                       		move.b	(a2)+,d6
00009586                            
00009586                            loc_7BCE:
00009586 7800                       		moveq	#0,d4
00009588 181A                       		move.b	(a2)+,d4
0000958A ED4C                       		lsl.w	#6,d4
0000958C 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009592 2244                       		movea.l	d4,a1
00009594 7800                       		moveq	#0,d4
00009596 1829 003C                  		move.b	$3C(a1),d4
0000959A 2A04                       		move.l	d4,d5
0000959C C9C0                       		muls.w	d0,d4
0000959E E084                       		asr.l	#8,d4
000095A0 CBC1                       		muls.w	d1,d5
000095A2 E085                       		asr.l	#8,d5
000095A4 D842                       		add.w	d2,d4
000095A6 DA43                       		add.w	d3,d5
000095A8 3344 000C                  		move.w	d4,obY(a1)
000095AC 3345 0008                  		move.w	d5,obX(a1)
000095B0 51CE FFD4                  		dbf	d6,loc_7BCE
000095B4 4E75                       		rts	
000095B6                            ; End of function Swing_Move2
000095B6                            
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            Swing_ChkDel:
000095D4 4E75                       		rts	
000095D6                            ; ===========================================================================
000095D6                            
000095D6                            Swing_DelAll:
000095D6 7400                       		moveq	#0,d2
000095D8 45E8 0028                  		lea	obSubtype(a0),a2
000095DC 141A                       		move.b	(a2)+,d2
000095DE                            
000095DE                            Swing_DelLoop:
000095DE 7000                       		moveq	#0,d0
000095E0 101A                       		move.b	(a2)+,d0
000095E2 ED48                       		lsl.w	#6,d0
000095E4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000095EA 2240                       		movea.l	d0,a1
000095EC 6100 0000                  		bsr.w	DeleteChild
000095F0 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
000095F4 4E75                       		rts	
000095F6                            ; ===========================================================================
000095F6                            
000095F6                            Swing_Delete:	; Routine 6, 8
000095F6 6100 0000                  		bsr.w	DeleteObject
000095FA 4E75                       		rts	
000095FC                            ; ===========================================================================
000095FC                            
000095FC                            Swing_Display:	; Routine $A
000095FC 6000 0000                  		bra.w	DisplaySprite
000095FC 6000 0000                  		bra.w	DisplaySprite
00009600                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
00009600                            ; ---------------------------------------------------------------------------
00009600                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009600                            ; ---------------------------------------------------------------------------
00009600                            Map_Swing_GHZ_internal:
00009600 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009602 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009604 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009606 02                         @block:		dc.b 2
00009607 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000960C F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009611 01                         @chain:		dc.b 1
00009612 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009617 01                         @anchor:	dc.b 1
00009618 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000961E 00                         		even
0000961E 00                         		even
0000961E                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000961E                            ; ---------------------------------------------------------------------------
0000961E                            ; Sprite mappings - SLZ	swinging platforms
0000961E                            ; ---------------------------------------------------------------------------
0000961E                            Map_Swing_SLZ_internal:
0000961E 0000                       		dc.w @block-Map_Swing_SLZ_internal
00009620 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009622 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009624 08                         @block:		dc.b 8
00009625 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000962A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000962F F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009634 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009639 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000963E 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009643 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009648 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000964D 01                         @chain:		dc.b 1
0000964E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00009653 01                         @anchor:	dc.b 1
00009654 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000965A 00                         		even
0000965A 00                         		even
0000965A                            		include	"_incObj\17 Spiked Pole Helix.asm"
0000965A                            ; ---------------------------------------------------------------------------
0000965A                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000965A                            ; ---------------------------------------------------------------------------
0000965A                            
0000965A                            Helix:
0000965A 7000                       		moveq	#0,d0
0000965C 1028 0024                  		move.b	obRoutine(a0),d0
00009660 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009664 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009668                            ; ===========================================================================
00009668 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
0000966A 0000                       		dc.w Hel_Action-Hel_Index
0000966C 0000                       		dc.w Hel_Action-Hel_Index
0000966E 0000                       		dc.w Hel_Delete-Hel_Index
00009670 0000                       		dc.w Hel_Display-Hel_Index
00009672                            
00009672 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
00009672                            
00009672                            ;		$29-38 are used for child object addresses
00009672                            ; ===========================================================================
00009672                            
00009672                            Hel_Main:	; Routine 0
00009672 5428 0024                  		addq.b	#2,obRoutine(a0)
00009676 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000967E 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009684 117C 0007 0022             		move.b	#7,obStatus(a0)
0000968A 117C 0004 0001             		move.b	#4,obRender(a0)
00009690 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009696 117C 0008 0014             		move.b	#8,obActWid(a0)
0000969C 3428 000C                  		move.w	obY(a0),d2
000096A0 3628 0008                  		move.w	obX(a0),d3
000096A4 1810                       		move.b	0(a0),d4
000096A6 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000096AA 7200                       		moveq	#0,d1
000096AC 1212                       		move.b	(a2),d1		; move helix length to d1
000096AE 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000096B2 3001                       		move.w	d1,d0
000096B4 E248                       		lsr.w	#1,d0
000096B6 E948                       		lsl.w	#4,d0
000096B8 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000096BA 5501                       		subq.b	#2,d1
000096BC 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000096BE 7C00                       		moveq	#0,d6
000096C0                            
000096C0                            Hel_Build:
000096C0 6100 0000                  		bsr.w	FindFreeObj
000096C4 6600                       		bne.s	Hel_Action
000096C6 5228 0028                  		addq.b	#1,obSubtype(a0)
000096CA 3A09                       		move.w	a1,d5
000096CC 0445 D000                  		subi.w	#$D000,d5
000096D0 EC4D                       		lsr.w	#6,d5
000096D2 0245 007F                  		andi.w	#$7F,d5
000096D6 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000096D8 137C 0008 0024             		move.b	#8,obRoutine(a1)
000096DE 1284                       		move.b	d4,0(a1)
000096E0 3342 000C                  		move.w	d2,ObY(a1)
000096E4 3343 0008                  		move.w	d3,obX(a1)
000096E8 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000096EE 337C 4398 0002             		move.w	#$4398,obGfx(a1)
000096F4 137C 0004 0001             		move.b	#4,obRender(a1)
000096FA 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009700 137C 0008 0014             		move.b	#8,obActWid(a1)
00009706 1346 003E                  		move.b	d6,hel_frame(a1)
0000970A 5206                       		addq.b	#1,d6
0000970C 0206 0007                  		andi.b	#7,d6
00009710 0643 0010                  		addi.w	#$10,d3
00009714 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009718 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000971A                            
0000971A 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000971E 5206                       		addq.b	#1,d6
00009720 0206 0007                  		andi.b	#7,d6
00009724 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009728 5228 0028                  		addq.b	#1,obSubtype(a0)
0000972C                            
0000972C                            	Hel_NotCentre:
0000972C 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00009730                            
00009730                            Hel_Action:	; Routine 2, 4
00009730 6100 0000                  		bsr.w	Hel_RotateSpikes
00009734 6100 0000                  		bsr.w	DisplaySprite
00009738 6000 0000                  		bra.w	Hel_ChkDel
0000973C                            
0000973C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000973C                            
0000973C                            
0000973C                            Hel_RotateSpikes:
0000973C 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00009740 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009746 D028 003E                  		add.b	hel_frame(a0),d0
0000974A 0200 0007                  		andi.b	#7,d0
0000974E 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
00009752 6600                       		bne.s	locret_7DA6
00009754 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
0000975A                            
0000975A                            locret_7DA6:
0000975A 4E75                       		rts	
0000975C                            ; End of function Hel_RotateSpikes
0000975C                            
0000975C                            ; ===========================================================================
0000975C                            
0000975C                            Hel_ChkDel:
0000977A 4E75                       		rts	
0000977C                            ; ===========================================================================
0000977C                            
0000977C                            Hel_DelAll:
0000977C 7400                       		moveq	#0,d2
0000977E 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009782 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009784 5502                       		subq.b	#2,d2
00009786 6500                       		bcs.s	Hel_Delete
00009788                            
00009788                            	Hel_DelLoop:
00009788 7000                       		moveq	#0,d0
0000978A 101A                       		move.b	(a2)+,d0
0000978C ED48                       		lsl.w	#6,d0
0000978E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009794 2240                       		movea.l	d0,a1		; get child address
00009796 6100 0000                  		bsr.w	DeleteChild	; delete object
0000979A 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
0000979E                            
0000979E                            Hel_Delete:	; Routine 6
0000979E 6100 0000                  		bsr.w	DeleteObject
000097A2 4E75                       		rts	
000097A4                            ; ===========================================================================
000097A4                            
000097A4                            Hel_Display:	; Routine 8
000097A4 6100 FF96                  		bsr.w	Hel_RotateSpikes
000097A8 6000 0000                  		bra.w	DisplaySprite
000097A8 6000 0000                  		bra.w	DisplaySprite
000097AC                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000097AC                            ; ---------------------------------------------------------------------------
000097AC                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000097AC                            ; ---------------------------------------------------------------------------
000097AC                            Map_Hel_internal:
000097AC 0000                       		dc.w byte_7E08-Map_Hel_internal
000097AE 0000                       		dc.w byte_7E0E-Map_Hel_internal
000097B0 0000                       		dc.w byte_7E14-Map_Hel_internal
000097B2 0000                       		dc.w byte_7E1A-Map_Hel_internal
000097B4 0000                       		dc.w byte_7E20-Map_Hel_internal
000097B6 0000                       		dc.w byte_7E26-Map_Hel_internal
000097B8 0000                       		dc.w byte_7E2E-Map_Hel_internal
000097BA 0000                       		dc.w byte_7E2C-Map_Hel_internal
000097BC 01                         byte_7E08:	dc.b 1
000097BD F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000097C2 01                         byte_7E0E:	dc.b 1
000097C3 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000097C8 01                         byte_7E14:	dc.b 1
000097C9 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000097CE 01                         byte_7E1A:	dc.b 1
000097CF FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000097D4 01                         byte_7E20:	dc.b 1
000097D5 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000097DA 01                         byte_7E26:	dc.b 1
000097DB 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000097E0 01                         byte_7E2C:	dc.b 1
000097E1 F4                         		dc.b $F4
000097E2                            byte_7E2E:	; reads the 0 below	; not visible
000097E2 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
000097E6                            		even
000097E6                            		even
000097E6                            		include	"_incObj\18 Platforms.asm"
000097E6                            ; ---------------------------------------------------------------------------
000097E6                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000097E6                            ; ---------------------------------------------------------------------------
000097E6                            
000097E6                            BasicPlatform:
000097E6 7000                       		moveq	#0,d0
000097E8 1028 0024                  		move.b	obRoutine(a0),d0
000097EC 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
000097F0 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
000097F4                            ; ===========================================================================
000097F4 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
000097F6 0000                       		dc.w Plat_Solid-Plat_Index
000097F8 0000                       		dc.w Plat_Action2-Plat_Index
000097FA 0000                       		dc.w Plat_Delete-Plat_Index
000097FC 0000                       		dc.w Plat_Action-Plat_Index
000097FE                            ; ===========================================================================
000097FE                            
000097FE                            Plat_Main:	; Routine 0
000097FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00009802 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009808 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009810 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009816 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
0000981C 6600                       		bne.s	@notSYZ
0000981E                            
0000981E 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009826 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000982C                            
0000982C                            	@notSYZ:
0000982C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009832 6600                       		bne.s	@notSLZ
00009834 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
0000983C 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009842 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009848 117C 0003 0028             		move.b	#3,obSubtype(a0)
0000984E                            
0000984E                            	@notSLZ:
0000984E 117C 0004 0001             		move.b	#4,obRender(a0)
00009854 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000985A 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009860 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009866 3168 0008 0032             		move.w	obX(a0),$32(a0)
0000986C 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009872 7200                       		moveq	#0,d1
00009874 1028 0028                  		move.b	obSubtype(a0),d0
00009878 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000987C 6600                       		bne.s	@setframe	; if not, branch
0000987E 5201                       		addq.b	#1,d1		; use frame #1
00009880 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009886                            
00009886                            	@setframe:
00009886 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
0000988A                            
0000988A                            Plat_Solid:	; Routine 2
0000988A 4A28 0038                  		tst.b	$38(a0)
0000988E 6700                       		beq.s	loc_7EE0
00009890 5928 0038                  		subq.b	#4,$38(a0)
00009894                            
00009894                            	loc_7EE0:
00009894 7200                       		moveq	#0,d1
00009896 1228 0014                  		move.b	obActWid(a0),d1
0000989A 6100 F56C                  		bsr.w	PlatformObject
0000989E                            
0000989E                            Plat_Action:	; Routine 8
0000989E 6100 0000                  		bsr.w	Plat_Move
000098A2 6100 0000                  		bsr.w	Plat_Nudge
000098A6 6100 0000                  		bsr.w	DisplaySprite
000098AA 6000 0000                  		bra.w	Plat_ChkDel
000098AE                            ; ===========================================================================
000098AE                            
000098AE                            Plat_Action2:	; Routine 4
000098AE 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000098B4 6700                       		beq.s	loc_7F06
000098B6 5828 0038                  		addq.b	#4,$38(a0)
000098BA                            
000098BA                            	loc_7F06:
000098BA 7200                       		moveq	#0,d1
000098BC 1228 0014                  		move.b	obActWid(a0),d1
000098C0 6100 F6BA                  		bsr.w	ExitPlatform
000098C4 3F28 0008                  		move.w	obX(a0),-(sp)
000098C8 6100 0000                  		bsr.w	Plat_Move
000098CC 6100 0000                  		bsr.w	Plat_Nudge
000098D0 341F                       		move.w	(sp)+,d2
000098D2 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000098D6 6100 0000                  		bsr.w	DisplaySprite
000098DA 6000 0000                  		bra.w	Plat_ChkDel
000098DE                            
000098DE 4E75                       		rts
000098E0                            
000098E0                            ; ---------------------------------------------------------------------------
000098E0                            ; Subroutine to	move platform slightly when you	stand on it
000098E0                            ; ---------------------------------------------------------------------------
000098E0                            
000098E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000098E0                            
000098E0                            
000098E0                            Plat_Nudge:
000098E0 1028 0038                  		move.b	$38(a0),d0
000098E4 6100 9EC8                  		bsr.w	CalcSine
000098E8 323C 0400                  		move.w	#$400,d1
000098EC C1C1                       		muls.w	d1,d0
000098EE 4840                       		swap	d0
000098F0 D068 002C                  		add.w	$2C(a0),d0
000098F4 3140 000C                  		move.w	d0,obY(a0)
000098F8 4E75                       		rts	
000098FA                            ; End of function Plat_Nudge
000098FA                            
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            ; Subroutine to	move platforms
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            
000098FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000098FA                            
000098FA                            
000098FA                            Plat_Move:
000098FA 7000                       		moveq	#0,d0
000098FC 1028 0028                  		move.b	obSubtype(a0),d0
00009900 0240 000F                  		andi.w	#$F,d0
00009904 D040                       		add.w	d0,d0
00009906 323B 0000                  		move.w	@index(pc,d0.w),d1
0000990A 4EFB 1000                  		jmp	@index(pc,d1.w)
0000990E                            ; End of function Plat_Move
0000990E                            
0000990E                            ; ===========================================================================
0000990E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009912 0000 0000                  		dc.w @type02-@index, @type03-@index
00009916 0000 0000                  		dc.w @type04-@index, @type05-@index
0000991A 0000 0000                  		dc.w @type06-@index, @type07-@index
0000991E 0000 0000                  		dc.w @type08-@index, @type00-@index
00009922 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009926 0000                       		dc.w @type0C-@index
00009928                            ; ===========================================================================
00009928                            
00009928                            @type00:
00009928 4E75                       		rts			; platform 00 doesn't move
0000992A                            ; ===========================================================================
0000992A                            
0000992A                            @type05:
0000992A 3028 0032                  		move.w	$32(a0),d0
0000992E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009932 4401                       		neg.b	d1		; reverse platform-motion
00009934 0601 0040                  		addi.b	#$40,d1
00009938 6000                       		bra.s	@type01_move
0000993A                            ; ===========================================================================
0000993A                            
0000993A                            @type01:
0000993A 3028 0032                  		move.w	$32(a0),d0
0000993E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009942 0401 0040                  		subi.b	#$40,d1
00009946                            
00009946                            	@type01_move:
00009946 4881                       		ext.w	d1
00009948 D041                       		add.w	d1,d0
0000994A 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
0000994E 6000 0000                  		bra.w	@chgmotion
00009952                            ; ===========================================================================
00009952                            
00009952                            @type0C:
00009952 3028 0034                  		move.w	$34(a0),d0
00009956 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000995A 4401                       		neg.b	d1		; reverse platform-motion
0000995C 0601 0030                  		addi.b	#$30,d1
00009960 6000                       		bra.s	@type02_move
00009962                            ; ===========================================================================
00009962                            
00009962                            @type0B:
00009962 3028 0034                  		move.w	$34(a0),d0
00009966 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000996A 0401 0030                  		subi.b	#$30,d1
0000996E 6000                       		bra.s	@type02_move
00009970                            ; ===========================================================================
00009970                            
00009970                            @type06:
00009970 3028 0034                  		move.w	$34(a0),d0
00009974 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009978 4401                       		neg.b	d1		; reverse platform-motion
0000997A 0601 0040                  		addi.b	#$40,d1
0000997E 6000                       		bra.s	@type02_move
00009980                            ; ===========================================================================
00009980                            
00009980                            @type02:
00009980 3028 0034                  		move.w	$34(a0),d0
00009984 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009988 0401 0040                  		subi.b	#$40,d1
0000998C                            
0000998C                            	@type02_move:
0000998C 4881                       		ext.w	d1
0000998E D041                       		add.w	d1,d0
00009990 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009994 6000 0000                  		bra.w	@chgmotion
00009998                            ; ===========================================================================
00009998                            
00009998                            @type03:
00009998 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000999C 6600                       		bne.s	@type03_wait	; if yes, branch
0000999E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
000099A4 6700                       		beq.s	@type03_nomove	; if not, branch
000099A6 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000099AC                            
000099AC                            	@type03_nomove:
000099AC 4E75                       		rts	
000099AE                            
000099AE                            	@type03_wait:
000099AE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000099B2 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000099B4 317C 0020 003A             		move.w	#32,$3A(a0)
000099BA 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
000099BE 4E75                       		rts	
000099C0                            ; ===========================================================================
000099C0                            
000099C0                            @type04:
000099C0 4A68 003A                  		tst.w	$3A(a0)
000099C4 6700                       		beq.s	@loc_8048
000099C6 5368 003A                  		subq.w	#1,$3A(a0)
000099CA 6600                       		bne.s	@loc_8048
000099CC 0828 0003 0022             		btst	#3,obStatus(a0)
000099D2 6700                       		beq.s	@loc_8042
000099D4 08E9 0001 0022             		bset	#1,obStatus(a1)
000099DA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000099E0 137C 0002 0024             		move.b	#2,obRoutine(a1)
000099E6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000099EC 4228 0025                  		clr.b	$25(a0)
000099F0 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
000099F6                            
000099F6                            	@loc_8042:
000099F6 117C 0008 0024             		move.b	#8,obRoutine(a0)
000099FC                            
000099FC                            	@loc_8048:
000099FC 2628 002C                  		move.l	$2C(a0),d3
00009A00 3028 0012                  		move.w	obVelY(a0),d0
00009A04 48C0                       		ext.l	d0
00009A06 E180                       		asl.l	#8,d0
00009A08 D680                       		add.l	d0,d3
00009A0A 2143 002C                  		move.l	d3,$2C(a0)
00009A0E 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009A14 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009A18 0640 00E0                  		addi.w	#$E0,d0
00009A1C B068 002C                  		cmp.w	$2C(a0),d0
00009A20 6400                       		bcc.s	@locret_8074
00009A22 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009A28                            
00009A28                            	@locret_8074:
00009A28 4E75                       		rts	
00009A2A                            ; ===========================================================================
00009A2A                            
00009A2A                            @type07:
00009A2A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009A2E 6600                       		bne.s	@type07_wait	; if yes, branch
00009A30 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009A34 7000                       		moveq	#0,d0
00009A36 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009A3A E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009A3C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009A40 6700                       		beq.s	@type07_nomove	; if not, branch
00009A42 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009A48                            
00009A48                            	@type07_nomove:
00009A48 4E75                       		rts	
00009A4A                            
00009A4A                            	@type07_wait:
00009A4A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009A4E 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009A50 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009A54 4E75                       		rts	
00009A56                            ; ===========================================================================
00009A56                            
00009A56                            @type08:
00009A56 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009A5A 3028 0034                  		move.w	$34(a0),d0
00009A5E 0440 0200                  		subi.w	#$200,d0
00009A62 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009A66 6600                       		bne.s	@type08_nostop	; if not, branch
00009A68 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009A6C                            
00009A6C                            	@type08_nostop:
00009A6C 4E75                       		rts	
00009A6E                            ; ===========================================================================
00009A6E                            
00009A6E                            @type0A:
00009A6E 3028 0034                  		move.w	$34(a0),d0
00009A72 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009A76 0401 0040                  		subi.b	#$40,d1
00009A7A 4881                       		ext.w	d1
00009A7C E241                       		asr.w	#1,d1
00009A7E D041                       		add.w	d1,d0
00009A80 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009A84                            
00009A84                            @chgmotion:
00009A84 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009A8A 4E75                       		rts	
00009A8C                            ; ===========================================================================
00009A8C                            
00009A8C                            Plat_ChkDel:
00009AA8 4E75                       		rts	
00009AAA                            ; ===========================================================================
00009AAA                            
00009AAA                            Plat_Delete:	; Routine 6
00009AAA 6000 0000                  		bra.w	DeleteObject
00009AAA 6000 0000                  		bra.w	DeleteObject
00009AAE                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009AAE                            ; ---------------------------------------------------------------------------
00009AAE                            ; Sprite mappings - unused
00009AAE                            ; ---------------------------------------------------------------------------
00009AAE                            Map_Plat_Unused_internal:
00009AAE 0000                       		dc.w @small-Map_Plat_Unused_internal
00009AB0 0000                       		dc.w @large-Map_Plat_Unused_internal
00009AB2 02                         @small:		dc.b 2
00009AB3 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009AB8 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009ABD 0A                         @large:		dc.b $A
00009ABE F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009AC3 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009AC8 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009ACD 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009AD2 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009AD7 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009ADC 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009AE1 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009AE6 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009AEB 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009AF0                            		even
00009AF0                            		even
00009AF0                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009AF0                            ; ---------------------------------------------------------------------------
00009AF0                            ; Sprite mappings - GHZ	platforms
00009AF0                            ; ---------------------------------------------------------------------------
00009AF0                            Map_Plat_GHZ_internal:
00009AF0 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009AF2 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009AF4 04                         @small:		dc.b 4
00009AF5 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009AFA F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009AFF F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009B04 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009B09 0A                         @large:		dc.b $A
00009B0A F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009B0F 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009B14 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009B19 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009B1E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009B23 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009B28 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009B2D 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009B32 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009B37 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009B3C                            		even
00009B3C                            		even
00009B3C                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009B3C                            ; ---------------------------------------------------------------------------
00009B3C                            ; Sprite mappings - SYZ	platforms
00009B3C                            ; ---------------------------------------------------------------------------
00009B3C                            Map_Plat_SYZ_internal:
00009B3C 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009B3E 03                         @platform:	dc.b 3
00009B3F F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009B44 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009B49 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009B4E                            		even
00009B4E                            		even
00009B4E                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009B4E                            ; ---------------------------------------------------------------------------
00009B4E                            ; Sprite mappings - SLZ	platforms
00009B4E                            ; ---------------------------------------------------------------------------
00009B4E                            Map_Plat_SLZ_internal:
00009B4E 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009B50 02                         @platform:	dc.b 2
00009B51 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009B56 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009B5C 00                         		even
00009B5C 00                         		even
00009B5C                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009B5C                            ; ---------------------------------------------------------------------------
00009B5C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009B5C                            ; ---------------------------------------------------------------------------
00009B5C                            Map_GBall_internal:
00009B5C 0000                       		dc.w @shiny-Map_GBall_internal
00009B5E 0000                       		dc.w @check1-Map_GBall_internal
00009B60 0000                       		dc.w @check2-Map_GBall_internal
00009B62 0000                       		dc.w @check3-Map_GBall_internal
00009B64 06                         @shiny:		dc.b 6
00009B65 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009B6A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009B6F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009B74 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009B79 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009B7E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009B83 04                         @check1:	dc.b 4
00009B84 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009B89 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009B8E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009B93 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009B98 04                         @check2:	dc.b 4
00009B99 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009B9E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009BA3 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009BA8 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009BAD 04                         @check3:	dc.b 4
00009BAE E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009BB3 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009BB8 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009BBD 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009BC2                            		even
00009BC2                            		even
00009BC2                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009BC2                            ; ---------------------------------------------------------------------------
00009BC2                            ; Object 1A - GHZ collapsing ledge
00009BC2                            ; ---------------------------------------------------------------------------
00009BC2                            
00009BC2                            CollapseLedge:
00009BC2 7000                       		moveq	#0,d0
00009BC4 1028 0024                  		move.b	obRoutine(a0),d0
00009BC8 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009BCC 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009BD0                            ; ===========================================================================
00009BD0 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009BD4 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009BD8 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009BDC                            
00009BDC =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009BDC =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009BDC                            ; ===========================================================================
00009BDC                            
00009BDC                            Ledge_Main:	; Routine 0
00009BDC 5428 0024                  		addq.b	#2,obRoutine(a0)
00009BE0 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009BE8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009BEE 0028 0004 0001             		ori.b	#4,obRender(a0)
00009BF4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009BFA 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009C00 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009C06 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009C0C 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009C12 08E8 0004 0001             		bset	#4,obRender(a0)
00009C18                            
00009C18                            Ledge_Touch:	; Routine 2
00009C18 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009C1C 6700                       		beq.s	@slope		; if not, branch
00009C1E 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009C22 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009C26 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009C2A                            
00009C2A                            	@slope:
00009C2A 323C 0030                  		move.w	#$30,d1
00009C2E 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009C34 6100 F2A6                  		bsr.w	SlopeObject
00009C38 6000 0000                  		bra.w	RememberState
00009C3C                            ; ===========================================================================
00009C3C                            
00009C3C                            Ledge_Collapse:	; Routine 4
00009C3C 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009C40 6700 0000                  		beq.w	loc_847A
00009C44 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009C4A 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009C4E                            
00009C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C4E                            
00009C4E                            
00009C4E                            Ledge_WalkOff:	; Routine $A
00009C4E 323C 0030                  		move.w	#$30,d1
00009C52 6100 F328                  		bsr.w	ExitPlatform
00009C56 323C 0030                  		move.w	#$30,d1
00009C5A 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009C60 3428 0008                  		move.w	obX(a0),d2
00009C64 6100 0000                  		bsr.w	SlopeObject2
00009C68 6000 0000                  		bra.w	RememberState
00009C6C                            ; End of function Ledge_WalkOff
00009C6C                            
00009C6C                            ; ===========================================================================
00009C6C                            
00009C6C                            Ledge_Display:	; Routine 6
00009C6C 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009C70 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009C72 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009C76 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009C7A 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009C7E 6000 0000                  		bra.w	DisplaySprite
00009C82                            ; ===========================================================================
00009C82                            
00009C82                            loc_82D0:
00009C82 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009C86 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009C8A 43F8 D000                  		lea	(v_player).w,a1
00009C8E 0829 0003 0022             		btst	#3,obStatus(a1)
00009C94 6700                       		beq.s	loc_82FC
00009C96 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009C9A 6600                       		bne.s	locret_8308
00009C9C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009CA2 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009CA8 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009CAE                            
00009CAE                            loc_82FC:
00009CAE 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009CB4 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009CBA                            
00009CBA                            locret_8308:
00009CBA 4E75                       		rts	
00009CBC                            ; ===========================================================================
00009CBC                            
00009CBC                            Ledge_TimeZero:
00009CBC 6100 0000                  		bsr.w	ObjectFall
00009CC0 6100 0000                  		bsr.w	DisplaySprite
00009CC4 4A28 0001                  		tst.b	obRender(a0)
00009CC8 6A00                       		bpl.s	Ledge_Delete
00009CCA 4E75                       		rts	
00009CCC                            ; ===========================================================================
00009CCC                            
00009CCC                            Ledge_Delete:	; Routine 8
00009CCC 6100 0000                  		bsr.w	DeleteObject
00009CD0 4E75                       		rts	
00009CD0 4E75                       		rts	
00009CD2                            		include	"_incObj\53 Collapsing Floors.asm"
00009CD2                            ; ---------------------------------------------------------------------------
00009CD2                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009CD2                            ; ---------------------------------------------------------------------------
00009CD2                            
00009CD2                            CollapseFloor:
00009CD2 7000                       		moveq	#0,d0
00009CD4 1028 0024                  		move.b	obRoutine(a0),d0
00009CD8 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009CDC 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009CE0                            ; ===========================================================================
00009CE0 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009CE4 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009CE8 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009CEC                            
00009CEC =00000038                  cflo_timedelay:		equ $38
00009CEC =0000003A                  cflo_collapse_flag:	equ $3A
00009CEC                            ; ===========================================================================
00009CEC                            
00009CEC                            CFlo_Main:	; Routine 0
00009CEC 5428 0024                  		addq.b	#2,obRoutine(a0)
00009CF0 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009CF8 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009CFE 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009D04 6600                       		bne.s	@notSLZ
00009D06                            
00009D06 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009D0C 5428 001A                  		addq.b	#2,obFrame(a0)
00009D10                            
00009D10                            	@notSLZ:
00009D10 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009D16 6600                       		bne.s	@notSBZ
00009D18 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009D1E                            
00009D1E                            	@notSBZ:
00009D1E 0028 0004 0001             		ori.b	#4,obRender(a0)
00009D24 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009D2A 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009D30 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009D36                            
00009D36                            CFlo_Touch:	; Routine 2
00009D36 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009D3A 6700                       		beq.s	@solid		; if not, branch
00009D3C 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009D40 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009D44 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009D48                            
00009D48                            	@solid:
00009D48 323C 0020                  		move.w	#$20,d1
00009D4C 6100 F0BA                  		bsr.w	PlatformObject
00009D50 4A28 0028                  		tst.b	obSubtype(a0)
00009D54 6A00                       		bpl.s	@remstate
00009D56 0829 0003 0022             		btst	#3,obStatus(a1)
00009D5C 6700                       		beq.s	@remstate
00009D5E 08A8 0000 0001             		bclr	#0,obRender(a0)
00009D64 3029 0008                  		move.w	obX(a1),d0
00009D68 9068 0008                  		sub.w	obX(a0),d0
00009D6C 6400                       		bcc.s	@remstate
00009D6E 08E8 0000 0001             		bset	#0,obRender(a0)
00009D74                            
00009D74                            	@remstate:
00009D74 6000 0000                  		bra.w	RememberState
00009D78                            ; ===========================================================================
00009D78                            
00009D78                            CFlo_Collapse:	; Routine 4
00009D78 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009D7C 6700 0000                  		beq.w	loc_8458
00009D80 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009D86 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009D8A                            
00009D8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D8A                            
00009D8A                            
00009D8A                            CFlo_WalkOff:	; Routine $A
00009D8A 323C 0020                  		move.w	#$20,d1
00009D8E 6100 F1EC                  		bsr.w	ExitPlatform
00009D92 3428 0008                  		move.w	obX(a0),d2
00009D96 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009D9A 6000 0000                  		bra.w	RememberState
00009D9E                            ; End of function CFlo_WalkOff
00009D9E                            
00009D9E                            ; ===========================================================================
00009D9E                            
00009D9E                            CFlo_Display:	; Routine 6
00009D9E 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009DA2 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009DA4 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009DA8 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009DAC 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009DB0 6000 0000                  		bra.w	DisplaySprite
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            loc_8402:
00009DB4 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009DB8 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009DBC 43F8 D000                  		lea	(v_player).w,a1
00009DC0 0829 0003 0022             		btst	#3,obStatus(a1)
00009DC6 6700                       		beq.s	loc_842E
00009DC8 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009DCC 6600                       		bne.s	locret_843A
00009DCE 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009DD4 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009DDA 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009DE0                            
00009DE0                            loc_842E:
00009DE0 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009DE6 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009DEC                            
00009DEC                            locret_843A:
00009DEC 4E75                       		rts	
00009DEE                            ; ===========================================================================
00009DEE                            
00009DEE                            CFlo_TimeZero:
00009DEE 6100 0000                  		bsr.w	ObjectFall
00009DF2 6100 0000                  		bsr.w	DisplaySprite
00009DF6 4A28 0001                  		tst.b	obRender(a0)
00009DFA 6A00                       		bpl.s	CFlo_Delete
00009DFC 4E75                       		rts	
00009DFE                            ; ===========================================================================
00009DFE                            
00009DFE                            CFlo_Delete:	; Routine 8
00009DFE 6100 0000                  		bsr.w	DeleteObject
00009E02 4E75                       		rts	
00009E04                            ; ===========================================================================
00009E04                            
00009E04                            CFlo_Fragment:
00009E04 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009E0A                            
00009E0A                            loc_8458:
00009E0A 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009E10 0828 0000 0028             		btst	#0,obSubtype(a0)
00009E16 6700                       		beq.s	loc_846C
00009E18 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009E1E                            
00009E1E                            loc_846C:
00009E1E 7207                       		moveq	#7,d1
00009E20 5228 001A                  		addq.b	#1,obFrame(a0)
00009E24 6000                       		bra.s	loc_8486
00009E24 6000                       		bra.s	loc_8486
00009E26                            
00009E26                            ; ===========================================================================
00009E26                            
00009E26                            Ledge_Fragment:
00009E26 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009E2C                            
00009E2C                            loc_847A:
00009E2C 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009E32 7218                       		moveq	#$18,d1
00009E34 5428 001A                  		addq.b	#2,obFrame(a0)
00009E38                            
00009E38                            loc_8486:
00009E38 7000                       		moveq	#0,d0
00009E3A 1028 001A                  		move.b	obFrame(a0),d0
00009E3E D040                       		add.w	d0,d0
00009E40 2668 0004                  		movea.l	obMap(a0),a3
00009E44 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009E48 524B                       		addq.w	#1,a3
00009E4A 08E8 0005 0001             		bset	#5,obRender(a0)
00009E50 1810                       		move.b	0(a0),d4
00009E52 1A28 0001                  		move.b	obRender(a0),d5
00009E56 2248                       		movea.l	a0,a1
00009E58 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009E5E 1284                       		move.b	d4,0(a1)
00009E60 234B 0004                  		move.l	a3,obMap(a1)
00009E64 1345 0001                  		move.b	d5,obRender(a1)
00009E68 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009E6E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009E74 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009E7A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009E80 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009E86 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009E8A 5341                       		subq.w	#1,d1
00009E8C 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009E90 303C 005F                  		move.w	#$5F,d0
00009E94                            ; ===========================================================================
00009E94                            
00009E94                            loc_84AA:
00009E94 4A11                       		tst.b	(a1)
00009E96 6700                       		beq.s	@cont		
00009E98 43E9 0040                  		lea		$40(a1),a1
00009E9C 51C8 FFF6                  		dbf		d0,loc_84AA	
00009EA0 6600                       		bne.s	loc_84F2	
00009EA2                            	@cont:
00009EA2 5A4B                       		addq.w	#5,a3
00009EA4                            
00009EA4                            loc_84B2:
00009EA4 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009EAA 1284                       		move.b	d4,0(a1)
00009EAC 234B 0004                  		move.l	a3,obMap(a1)
00009EB0 1345 0001                  		move.b	d5,obRender(a1)
00009EB4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009EBA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009EC0 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009EC6 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009ECC 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009ED2 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009ED6 6100 0000                  		bsr.w	DisplaySprite1
00009EDA                            
00009EDA                            loc_84EE:
00009EDA 51C9 FFB8                  		dbf	d1,loc_84AA
00009EDE                            
00009EDE                            loc_84F2:
00009EDE 6100 0000                  		bsr.w	DisplaySprite
00009EEC                            ; ===========================================================================
00009EEC                            ; ---------------------------------------------------------------------------
00009EEC                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009EEC                            ; ---------------------------------------------------------------------------
00009EEC 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009EFC 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009F06 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009F0E 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009F16                            
00009F16                            ; ---------------------------------------------------------------------------
00009F16                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009F16                            ; ---------------------------------------------------------------------------
00009F16                            
00009F16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F16                            
00009F16                            
00009F16                            SlopeObject2:
00009F16 43F8 D000                  		lea	(v_player).w,a1
00009F1A 0829 0003 0022             		btst	#3,obStatus(a1)
00009F20 6700                       		beq.s	locret_856E
00009F22 3029 0008                  		move.w	obX(a1),d0
00009F26 9068 0008                  		sub.w	obX(a0),d0
00009F2A D041                       		add.w	d1,d0
00009F2C E248                       		lsr.w	#1,d0
00009F2E 0828 0000 0001             		btst	#0,obRender(a0)
00009F34 6700                       		beq.s	loc_854E
00009F36 4640                       		not.w	d0
00009F38 D041                       		add.w	d1,d0
00009F3A                            
00009F3A                            loc_854E:
00009F3A 7200                       		moveq	#0,d1
00009F3C 1232 0000                  		move.b	(a2,d0.w),d1
00009F40 3028 000C                  		move.w	obY(a0),d0
00009F44 9041                       		sub.w	d1,d0
00009F46 7200                       		moveq	#0,d1
00009F48 1229 0016                  		move.b	obHeight(a1),d1
00009F4C 9041                       		sub.w	d1,d0
00009F4E 3340 000C                  		move.w	d0,obY(a1)
00009F52 9468 0008                  		sub.w	obX(a0),d2
00009F56 9569 0008                  		sub.w	d2,obX(a1)
00009F5A                            
00009F5A                            locret_856E:
00009F5A 4E75                       		rts	
00009F5C                            ; End of function SlopeObject2
00009F5C                            
00009F5C                            ; ===========================================================================
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            ; Collision data for GHZ collapsing ledge
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            Ledge_SlopeData:
00009F5C                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009F8C                            		even
00009F8C                            
00009F8C                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009F8C                            ; ---------------------------------------------------------------------------
00009F8C                            ; Sprite mappings - GHZ	collapsing ledge
00009F8C                            ; ---------------------------------------------------------------------------
00009F8C                            Map_Ledge_internal:
00009F8C 0000                       		dc.w @left-Map_Ledge_internal
00009F8E 0000                       		dc.w @right-Map_Ledge_internal
00009F90 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009F92 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009F94 10                         @left:		dc.b $10
00009F95 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009F9A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009F9F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FA4 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FA9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FAE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009FB3 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009FB8 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009FBD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009FC2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009FC7 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009FCC 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009FD1 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009FD6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009FDB 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009FE0 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009FE5 10                         @right:		dc.b $10
00009FE6 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009FEB D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009FF0 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009FF5 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009FFA D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009FFF D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A004 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A009 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A00E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A013 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A018 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A01D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A022 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A027 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A02C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A031 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A036 19                         @leftsmash:	dc.b $19
0000A037 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A03C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A041 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A046 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A04B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A050 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A055 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A05A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A05F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A064 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A069 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A06E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A073 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A078 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A07D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A082 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A087 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A08C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A091 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A096 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A09B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A0A0 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A0A5 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A0AA 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A0AF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A0B4 19                         @rightsmash:	dc.b $19
0000A0B5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A0BA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A0BF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A0C4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A0C9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A0CE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A0D3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A0D8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A0DD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A0E2 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A0E7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A0EC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A0F1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A0F6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A0FB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A100 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A105 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A10A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A10F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A114 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A119 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A11E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A123 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A128 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A12D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A132                            		even
0000A132                            		even
0000A132                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A132                            ; ---------------------------------------------------------------------------
0000A132                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A132                            ; ---------------------------------------------------------------------------
0000A132                            Map_CFlo_internal:
0000A132 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A134 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A136 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A138 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A13A 04                         byte_874E:	dc.b 4
0000A13B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A140 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A145 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A14A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A14F 08                         byte_8763:	dc.b 8
0000A150 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A155 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A15A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A15F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A164 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A169 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A16E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A173 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A178 04                         byte_878C:	dc.b 4
0000A179 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A17E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A183 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A188 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A18D 08                         byte_87A1:	dc.b 8
0000A18E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A193 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A198 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A19D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A1A2 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A1A7 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A1AC 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A1B1 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A1B6                            		even
0000A1B6                            		even
0000A1B6                            
0000A1B6                            		include	"_incObj\1C Scenery.asm"
0000A1B6                            ; ---------------------------------------------------------------------------
0000A1B6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A1B6                            ; ---------------------------------------------------------------------------
0000A1B6                            
0000A1B6                            Scenery:
0000A1B6 7000                       		moveq	#0,d0
0000A1B8 1028 0024                  		move.b	obRoutine(a0),d0
0000A1BC 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A1C0 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A1C4                            ; ===========================================================================
0000A1C4 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A1C6 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A1C8                            ; ===========================================================================
0000A1C8                            
0000A1C8                            Scen_Main:	; Routine 0
0000A1C8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A1CC 7000                       		moveq	#0,d0
0000A1CE 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A1D2 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A1D6 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A1DA 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A1DE 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A1E2 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A1E8 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A1EC 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A1F0 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A1F4 3028 0018                  		move.w obPriority(a0),d0 
0000A1F8 E248                       		lsr.w #1,d0 
0000A1FA 0240 0380                  		andi.w #$380,d0 
0000A1FE 3140 0018                  		move.w d0,obPriority(a0)		
0000A202 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A206                            
0000A206                            Scen_ChkDel:	; Routine 2
0000A224 6000 0000                  		bra.w	DisplaySprite
0000A228                            ; ===========================================================================
0000A228                            ; ---------------------------------------------------------------------------
0000A228                            ; Variables for	object $1C are stored in an array
0000A228                            ; ---------------------------------------------------------------------------
0000A228 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A22C 44D8                       		dc.w $44D8		; VRAM setting
0000A22E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A232 0000 0000                  		dc.l Map_Scen
0000A236 44D8                       		dc.w $44D8
0000A238 0008 0200                  		dc.b 0,	8, 2, 0
0000A23C 0000 0000                  		dc.l Map_Scen
0000A240 44D8                       		dc.w $44D8
0000A242 0008 0200                  		dc.b 0,	8, 2, 0
0000A246 0000 92F0                  		dc.l Map_Bri
0000A24A 438E                       		dc.w $438E
0000A24C 0110 0100                  		dc.b 1,	$10, 1,	0
0000A250                            		even
0000A250                            		even
0000A250                            Map_Scen:	include	"_maps\Scenery.asm"
0000A250                            ; ---------------------------------------------------------------------------
0000A250                            ; Sprite mappings - SLZ	lava thrower
0000A250                            ; ---------------------------------------------------------------------------
0000A250                            Map_Scen_internal:
0000A250 0000                       		dc.w byte_8858-Map_Scen_internal
0000A252 01                         byte_8858:	dc.b 1
0000A253 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A258                            		even
0000A258                            		even
0000A258                            
0000A258                            		include	"_incObj\1D Unused Switch.asm"
0000A258                            ; ---------------------------------------------------------------------------
0000A258                            ; Object 1D - switch that activates when Sonic touches it
0000A258                            ; (this	is not used anywhere in	the game)
0000A258                            ; ---------------------------------------------------------------------------
0000A258                            
0000A258                            MagicSwitch:
0000A258 7000                       		moveq	#0,d0
0000A25A 1028 0024                  		move.b	obRoutine(a0),d0
0000A25E 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A262 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A266                            ; ===========================================================================
0000A266 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A268 0000                       		dc.w Swi_Action-Swi_Index
0000A26A 0000                       		dc.w Swi_Delete-Swi_Index
0000A26C                            
0000A26C =00000030                  swi_origY:	equ $30		; original y-axis position
0000A26C                            ; ===========================================================================
0000A26C                            
0000A26C                            Swi_Main:	; Routine 0
0000A26C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A270 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A278 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A27E 117C 0004 0001             		move.b	#4,obRender(a0)
0000A284 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A28A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A290 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A296                            
0000A296                            Swi_Action:	; Routine 2
0000A296 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A29C 323C 0010                  		move.w	#$10,d1
0000A2A0 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A2A4 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A2A6                            
0000A2A6 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A2AA 7001                       		moveq	#1,d0
0000A2AC 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A2B0                            
0000A2B0                            Swi_ChkDel:
0000A2B0 6100 0000                  		bsr.w	DisplaySprite
0000A2D2 4E75                       		rts	
0000A2D4                            ; ===========================================================================
0000A2D4                            
0000A2D4                            Swi_Delete:	; Routine 4
0000A2D4 6100 0000                  		bsr.w	DeleteObject
0000A2D8 4E75                       		rts	
0000A2DA                            
0000A2DA                            ; ---------------------------------------------------------------------------
0000A2DA                            ; Subroutine to	check if Sonic touches the object
0000A2DA                            ; ---------------------------------------------------------------------------
0000A2DA                            
0000A2DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A2DA                            
0000A2DA                            
0000A2DA                            Swi_ChkTouch:
0000A2DA 43F8 D000                  		lea	(v_player).w,a1
0000A2DE 3029 0008                  		move.w	obX(a1),d0
0000A2E2 9068 0008                  		sub.w	obX(a0),d0
0000A2E6 D041                       		add.w	d1,d0
0000A2E8 6B00                       		bmi.s	Swi_NoTouch
0000A2EA D241                       		add.w	d1,d1
0000A2EC B041                       		cmp.w	d1,d0
0000A2EE 6400                       		bcc.s	Swi_NoTouch
0000A2F0 3429 000C                  		move.w	obY(a1),d2
0000A2F4 1229 0016                  		move.b	obHeight(a1),d1
0000A2F8 4881                       		ext.w	d1
0000A2FA D242                       		add.w	d2,d1
0000A2FC 3028 000C                  		move.w	obY(a0),d0
0000A300 0440 0010                  		subi.w	#$10,d0
0000A304 9041                       		sub.w	d1,d0
0000A306 6200                       		bhi.s	Swi_NoTouch
0000A308 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A30C 6500                       		bcs.s	Swi_NoTouch
0000A30E 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A310 4E75                       		rts	
0000A312                            ; ===========================================================================
0000A312                            
0000A312                            Swi_NoTouch:
0000A312 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A314 4E75                       		rts	
0000A316                            ; End of function Swi_ChkTouch
0000A316                            ; End of function Swi_ChkTouch
0000A316                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A316                            ; ---------------------------------------------------------------------------
0000A316                            ; Sprite mappings - Unused switch thingy
0000A316                            ; ---------------------------------------------------------------------------
0000A316                            Map_Swi_internal:
0000A316 0000                       		dc.w byte_891E-Map_Swi_internal
0000A318 04                         byte_891E:	dc.b 4
0000A319 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A31E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A323 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A328 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A32E 00                         		even
0000A32E 00                         		even
0000A32E                            
0000A32E                            		include	"_incObj\2A SBZ Small Door.asm"
0000A32E                            ; ---------------------------------------------------------------------------
0000A32E                            ; Object 2A - small vertical door (SBZ)
0000A32E                            ; ---------------------------------------------------------------------------
0000A32E                            
0000A32E                            AutoDoor:
0000A32E 7000                       		moveq	#0,d0
0000A330 1028 0024                  		move.b	obRoutine(a0),d0
0000A334 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A338 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A33C                            ; ===========================================================================
0000A33C 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A33E 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A340                            ; ===========================================================================
0000A340                            
0000A340                            ADoor_Main:	; Routine 0
0000A340 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A344 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A34C 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A352 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A358 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A35E                            		;move.b	#4,obPriority(a0)
0000A35E                            
0000A35E                            ADoor_OpenShut:	; Routine 2
0000A35E 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A362 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A366 3038 D008                  		move.w	(v_player+obX).w,d0
0000A36A D041                       		add.w	d1,d0
0000A36C B068 0008                  		cmp.w	obX(a0),d0
0000A370 6500                       		bcs.s	ADoor_Animate
0000A372 9041                       		sub.w	d1,d0
0000A374 9041                       		sub.w	d1,d0
0000A376 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A37A 6400                       		bcc.s	ADoor_Animate	; close door
0000A37C D041                       		add.w	d1,d0
0000A37E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A382 6400                       		bcc.s	loc_899A	; if yes, branch
0000A384 0828 0000 0022             		btst	#0,obStatus(a0)
0000A38A 6600                       		bne.s	ADoor_Animate
0000A38C 6000                       		bra.s	ADoor_Open
0000A38E                            ; ===========================================================================
0000A38E                            
0000A38E                            loc_899A:
0000A38E 0828 0000 0022             		btst	#0,obStatus(a0)
0000A394 6700                       		beq.s	ADoor_Animate
0000A396                            
0000A396                            ADoor_Open:
0000A396 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A39C                            
0000A39C                            ADoor_Animate:
0000A39C 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A3A2 6100 0000                  		bsr.w	AnimateSprite
0000A3A6 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A3AA 6600                       		bne.s	@remember	; if yes, branch
0000A3AC 323C 0011                  		move.w	#$11,d1
0000A3B0 343C 0020                  		move.w	#$20,d2
0000A3B4 3602                       		move.w	d2,d3
0000A3B6 5243                       		addq.w	#1,d3
0000A3B8 3828 0008                  		move.w	obX(a0),d4
0000A3BC 6100 0000                  		bsr.w	SolidObject
0000A3C0                            
0000A3C0                            	@remember:
0000A3C0 6000 0000                  		bra.w	RememberState
0000A3C0 6000 0000                  		bra.w	RememberState
0000A3C4                            		include	"_anim\SBZ Small Door.asm"
0000A3C4                            ; ---------------------------------------------------------------------------
0000A3C4                            ; Animation script - doors (SBZ)
0000A3C4                            ; ---------------------------------------------------------------------------
0000A3C4 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A3C6 0000                       		dc.w @open-Ani_ADoor
0000A3C8 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A3D4 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A3E0                            		even
0000A3E0                            		even
0000A3E0                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A3E0                            ; --------------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A3E0                            ; --------------------------------------------------------------------------------
0000A3E0                            
0000A3E0                            SME_YnmwF:	
0000A3E0 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A3E4 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A3E8 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A3EC 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A3F0 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A3F2 02                         SME_YnmwF_12:	dc.b 2	
0000A3F3 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A3F8 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A3FD 02                         SME_YnmwF_1D:	dc.b 2	
0000A3FE DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A403 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A408 02                         SME_YnmwF_28:	dc.b 2	
0000A409 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A40E 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A413 02                         SME_YnmwF_33:	dc.b 2	
0000A414 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A419 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A41E 02                         SME_YnmwF_3E:	dc.b 2	
0000A41F D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A424 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A429 02                         SME_YnmwF_49:	dc.b 2	
0000A42A CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A42F 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A434 02                         SME_YnmwF_54:	dc.b 2	
0000A435 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A43A 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A43F 02                         SME_YnmwF_5F:	dc.b 2	
0000A440 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A445 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A44A 02                         SME_YnmwF_6A:	dc.b 2	
0000A44B C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A450 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A456 00                         		even
0000A456 00                         		even
0000A456                            
0000A456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A456                            
0000A456                            
0000A456                            Obj44_SolidWall:
0000A456 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A45A 6700                       		beq.s	loc_8AA8
0000A45C 6B00 0000                  		bmi.w	loc_8AC4
0000A460 4A40                       		tst.w	d0
0000A462 6700 0000                  		beq.w	loc_8A92
0000A466 6B00                       		bmi.s	loc_8A7C
0000A468 4A69 0010                  		tst.w	obVelX(a1)
0000A46C 6B00                       		bmi.s	loc_8A92
0000A46E 6000                       		bra.s	loc_8A82
0000A470                            ; ===========================================================================
0000A470                            
0000A470                            loc_8A7C:
0000A470 4A69 0010                  		tst.w	obVelX(a1)
0000A474 6A00                       		bpl.s	loc_8A92
0000A476                            
0000A476                            loc_8A82:
0000A476 9169 0008                  		sub.w	d0,obX(a1)
0000A47A 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A480 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A486                            
0000A486                            loc_8A92:
0000A486 0829 0001 0022             		btst	#1,obStatus(a1)
0000A48C 6600                       		bne.s	loc_8AB6
0000A48E 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A494 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A49A 4E75                       		rts	
0000A49C                            ; ===========================================================================
0000A49C                            
0000A49C                            loc_8AA8:
0000A49C 0828 0005 0022             		btst	#5,obStatus(a0)
0000A4A2 6700                       		beq.s	locret_8AC2
0000A4A4 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A4AA                            
0000A4AA                            loc_8AB6:
0000A4AA 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A4B0 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A4B6                            
0000A4B6                            locret_8AC2:
0000A4B6 4E75                       		rts	
0000A4B8                            ; ===========================================================================
0000A4B8                            
0000A4B8                            loc_8AC4:
0000A4B8 4A69 0012                  		tst.w	obVelY(a1)
0000A4BC 6A00                       		bpl.s	locret_8AD8
0000A4BE 4A43                       		tst.w	d3
0000A4C0 6A00                       		bpl.s	locret_8AD8
0000A4C2 9769 000C                  		sub.w	d3,obY(a1)
0000A4C6 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A4CC                            
0000A4CC                            locret_8AD8:
0000A4CC 4E75                       		rts	
0000A4CE                            ; End of function Obj44_SolidWall
0000A4CE                            
0000A4CE                            
0000A4CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4CE                            
0000A4CE                            
0000A4CE                            Obj44_SolidWall2:
0000A4CE 43F8 D000                  		lea	(v_player).w,a1
0000A4D2 3029 0008                  		move.w	obX(a1),d0
0000A4D6 9068 0008                  		sub.w	obX(a0),d0
0000A4DA D041                       		add.w	d1,d0
0000A4DC 6B00                       		bmi.s	loc_8B48
0000A4DE 3601                       		move.w	d1,d3
0000A4E0 D643                       		add.w	d3,d3
0000A4E2 B043                       		cmp.w	d3,d0
0000A4E4 6200                       		bhi.s	loc_8B48
0000A4E6 1629 0016                  		move.b	obHeight(a1),d3
0000A4EA 4883                       		ext.w	d3
0000A4EC D443                       		add.w	d3,d2
0000A4EE 3629 000C                  		move.w	obY(a1),d3
0000A4F2 9668 000C                  		sub.w	obY(a0),d3
0000A4F6 D642                       		add.w	d2,d3
0000A4F8 6B00                       		bmi.s	loc_8B48
0000A4FA 3802                       		move.w	d2,d4
0000A4FC D844                       		add.w	d4,d4
0000A4FE B644                       		cmp.w	d4,d3
0000A500 6400                       		bhs.s	loc_8B48
0000A502 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A506 6B00                       		bmi.s	loc_8B48
0000A508 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A50E 6400                       		bhs.s	loc_8B48
0000A510 4A78 FE08                  		tst.w	(v_debuguse).w
0000A514 6600                       		bne.s	loc_8B48
0000A516 3A00                       		move.w	d0,d5
0000A518 B240                       		cmp.w	d0,d1
0000A51A 6400                       		bhs.s	loc_8B30
0000A51C D241                       		add.w	d1,d1
0000A51E 9041                       		sub.w	d1,d0
0000A520 3A00                       		move.w	d0,d5
0000A522 4445                       		neg.w	d5
0000A524                            
0000A524                            loc_8B30:
0000A524 3203                       		move.w	d3,d1
0000A526 B443                       		cmp.w	d3,d2
0000A528 6400                       		bhs.s	loc_8B3C
0000A52A 9644                       		sub.w	d4,d3
0000A52C 3203                       		move.w	d3,d1
0000A52E 4441                       		neg.w	d1
0000A530                            
0000A530                            loc_8B3C:
0000A530 BA41                       		cmp.w	d1,d5
0000A532 6200                       		bhi.s	loc_8B44
0000A534 7801                       		moveq	#1,d4
0000A536 4E75                       		rts	
0000A538                            ; ===========================================================================
0000A538                            
0000A538                            loc_8B44:
0000A538 78FF                       		moveq	#-1,d4
0000A53A 4E75                       		rts	
0000A53C                            ; ===========================================================================
0000A53C                            
0000A53C                            loc_8B48:
0000A53C 7800                       		moveq	#0,d4
0000A53E 4E75                       		rts	
0000A540                            ; End of function Obj44_SolidWall2
0000A540                            
0000A540                            ; ===========================================================================
0000A540                            
0000A540                            		include	"_incObj\1E Ball Hog.asm"
0000A540                            ; ---------------------------------------------------------------------------
0000A540                            ; Object 1E - Ball Hog enemy (SBZ)
0000A540                            ; ---------------------------------------------------------------------------
0000A540                            
0000A540                            BallHog:
0000A540 7000                       		moveq	#0,d0
0000A542 1028 0024                  		move.b	obRoutine(a0),d0
0000A546 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A54A 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A54E                            ; ===========================================================================
0000A54E 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A550 0000                       		dc.w Hog_Action-Hog_Index
0000A552                            
0000A552 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A552                            ; ===========================================================================
0000A552                            
0000A552                            Hog_Main:	; Routine 0
0000A552 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A558 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A55E 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A566 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A56C 117C 0004 0001             		move.b	#4,obRender(a0)
0000A572 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A578 117C 0005 0020             		move.b	#5,obColType(a0)
0000A57E 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A584 6100 0000                  		bsr.w	ObjectFall
0000A588 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A58E 4A41                       		tst.w	d1
0000A590 6A00                       		bpl.s	@floornotfound
0000A592 D368 000C                  		add.w	d1,obY(a0)
0000A596 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A59C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5A0                            
0000A5A0                            	@floornotfound:
0000A5A0 4E75                       		rts	
0000A5A2                            ; ===========================================================================
0000A5A2                            
0000A5A2                            Hog_Action:	; Routine 2
0000A5A2 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A5A8 6100 0000                  		bsr.w	AnimateSprite
0000A5AC 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A5B2 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A5B4 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A5B8 6700                       		beq.s	@makeball	; if yes, branch
0000A5BA 6000                       		bra.s	@remember
0000A5BC                            ; ===========================================================================
0000A5BC                            
0000A5BC                            @setlaunchflag:
0000A5BC 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A5C0                            
0000A5C0                            @remember:
0000A5C0 6000 0000                  		bra.w	RememberState
0000A5C4                            ; ===========================================================================
0000A5C4                            
0000A5C4                            @makeball:
0000A5C4 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A5CA 6100 0000                  		bsr.w	FindFreeObj
0000A5CE 6600                       		bne.s	@fail
0000A5D0 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A5D4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A5DA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A5E0 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A5E6 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A5EC 70FC                       		moveq	#-4,d0
0000A5EE 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A5F4 6700                       		beq.s	@noflip		; if not, branch
0000A5F6 4440                       		neg.w	d0
0000A5F8 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A5FC                            
0000A5FC                            	@noflip:
0000A5FC D169 0008                  		add.w	d0,obX(a1)
0000A600 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A606 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A60C                            
0000A60C                            	@fail:
0000A60C 60B2                       		bra.s	@remember
0000A60C 60B2                       		bra.s	@remember
0000A60E                            		include	"_incObj\20 Cannonball.asm"
0000A60E                            ; ---------------------------------------------------------------------------
0000A60E                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A60E                            ; ---------------------------------------------------------------------------
0000A60E                            
0000A60E                            Cannonball:
0000A60E 7000                       		moveq	#0,d0
0000A610 1028 0024                  		move.b	obRoutine(a0),d0
0000A614 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A618 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A61C                            ; ===========================================================================
0000A61C 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A61E 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A620                            
0000A620 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A620                            ; ===========================================================================
0000A620                            
0000A620                            Cbal_Main:	; Routine 0
0000A620 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A624 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A62A 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A632 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A638 117C 0004 0001             		move.b	#4,obRender(a0)
0000A63E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A644 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A64A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A650 7000                       		moveq	#0,d0
0000A652 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A656 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A65A 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A65E 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A664                            
0000A664                            Cbal_Bounce:	; Routine 2
0000A664 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A66A 4A68 0012                  		tst.w	obVelY(a0)
0000A66E 6B00                       		bmi.s	Cbal_ChkExplode
0000A670 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A676 4A41                       		tst.w	d1		; has ball hit the floor?
0000A678 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A67A                            
0000A67A D368 000C                  		add.w	d1,obY(a0)
0000A67E 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A684 4A03                       		tst.b	d3
0000A686 6700                       		beq.s	Cbal_ChkExplode
0000A688 6B00                       		bmi.s	loc_8CA4
0000A68A 4A68 0010                  		tst.w	obVelX(a0)
0000A68E 6A00                       		bpl.s	Cbal_ChkExplode
0000A690 4468 0010                  		neg.w	obVelX(a0)
0000A694 6000                       		bra.s	Cbal_ChkExplode
0000A696                            ; ===========================================================================
0000A696                            
0000A696                            loc_8CA4:
0000A696 4A68 0010                  		tst.w	obVelX(a0)
0000A69A 6B00                       		bmi.s	Cbal_ChkExplode
0000A69C 4468 0010                  		neg.w	obVelX(a0)
0000A6A0                            
0000A6A0                            Cbal_ChkExplode:
0000A6A0 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A6A4 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A6A6                            
0000A6A6                            	Cbal_Explode:
0000A6A6 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A6AA 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A6AE 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A6B4 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A6B8                            ; ===========================================================================
0000A6B8                            
0000A6B8                            Cbal_Animate:
0000A6B8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A6BC 6A00                       		bpl.s	Cbal_Display
0000A6BE 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A6C4 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A6CA                            
0000A6CA                            Cbal_Display:
0000A6CA 6100 0000                  		bsr.w	DisplaySprite
0000A6CE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A6D2 0640 00E0                  		addi.w	#$E0,d0
0000A6D6 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A6DA 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A6DE 4E75                       		rts	
0000A6DE 4E75                       		rts	
0000A6E0                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A6E0                            ; ---------------------------------------------------------------------------
0000A6E0                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A6E0                            ; ---------------------------------------------------------------------------
0000A6E0                            
0000A6E0                            MissileDissolve:
0000A6E0 7000                       		moveq	#0,d0
0000A6E2 1028 0024                  		move.b	obRoutine(a0),d0
0000A6E6 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A6EA 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A6EE                            ; ===========================================================================
0000A6EE 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A6F0 0000                       		dc.w MDis_Animate-MDis_Index
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            MDis_Main:	; Routine 0
0000A6F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A6F6 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A6FE 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A704 117C 0004 0001             		move.b	#4,obRender(a0)
0000A70A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A710 117C 0000 0020             		move.b	#0,obColType(a0)
0000A716 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A71C 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A722 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A732                            
0000A732                            MDis_Animate:	; Routine 2
0000A732 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A736 6A00                       		bpl.s	@display
0000A738 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A73E 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A742 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A748 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A74C                            
0000A74C                            	@display:
0000A74C 6000 0000                  		bra.w	DisplaySprite
0000A750                            ; ===========================================================================
0000A750                            
0000A750                            ; ---------------------------------------------------------------------------
0000A750                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A750                            ; ---------------------------------------------------------------------------
0000A750                            
0000A750                            ExplosionItem:
0000A750 7000                       		moveq	#0,d0
0000A752 1028 0024                  		move.b	obRoutine(a0),d0
0000A756 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A75A 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A75E                            ; ===========================================================================
0000A75E 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A760 0000                       		dc.w ExItem_Main-ExItem_Index
0000A762 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A764                            ; ===========================================================================
0000A764                            
0000A764                            ExItem_Animal:	; Routine 0
0000A764 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A768 6100 0000                  		bsr.w	FindFreeObj
0000A76C 6600                       		bne.s	ExItem_Main
0000A76E 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A772 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A778 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A77E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A784                            
0000A784                            ExItem_Main:	; Routine 2
0000A784 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A788 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A790 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A796 117C 0004 0001             		move.b	#4,obRender(a0)
0000A79C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A7A2 117C 0000 0020             		move.b	#0,obColType(a0)
0000A7A8 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A7AE 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A7B4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A7C4                            
0000A7C4                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A7C4 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A7C8 6A00                       		bpl.s	@display
0000A7CA 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A7D0 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A7D4 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A7DA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A7DE                            
0000A7DE                            	@display:
0000A7DE 6000 0000                  		bra.w	DisplaySprite
0000A7E2                            ; ===========================================================================
0000A7E2                            ; ---------------------------------------------------------------------------
0000A7E2                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A7E2                            ; ---------------------------------------------------------------------------
0000A7E2                            
0000A7E2                            ExplosionBomb:
0000A7E2 7000                       		moveq	#0,d0
0000A7E4 1028 0024                  		move.b	obRoutine(a0),d0
0000A7E8 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A7EC 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A7F0                            ; ===========================================================================
0000A7F0 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A7F2 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            ExBom_Main:	; Routine 0
0000A7F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7F8 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A800 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A806 117C 0004 0001             		move.b	#4,obRender(a0)
0000A80C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A812 117C 0000 0020             		move.b	#0,obColType(a0)
0000A818 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A81E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A824 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A834                            		include	"_anim\Ball Hog.asm"
0000A834                            ; ---------------------------------------------------------------------------
0000A834                            ; Animation script - doors (SBZ)
0000A834                            ; ---------------------------------------------------------------------------
0000A834 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A836 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A84E 00                         		even
0000A84E 00                         		even
0000A84E                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A84E                            ; --------------------------------------------------------------------------------
0000A84E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A84E                            ; --------------------------------------------------------------------------------
0000A84E                            
0000A84E                            SME_ZER01:	
0000A84E 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A852 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A856 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A85A 02                         SME_ZER01_C:	dc.b 2	
0000A85B EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A860 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A865 02                         SME_ZER01_17:	dc.b 2	
0000A866 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A86B FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A870 02                         SME_ZER01_22:	dc.b 2	
0000A871 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A876 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A87B 02                         SME_ZER01_2D:	dc.b 2	
0000A87C E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A881 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A886 01                         SME_ZER01_38:	dc.b 1	
0000A887 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A88C 01                         SME_ZER01_3E:	dc.b 1	
0000A88D F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A892                            		even
0000A892                            		even
0000A892                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A892                            ; ---------------------------------------------------------------------------
0000A892                            ; Sprite mappings - buzz bomber missile vanishing
0000A892                            ; ---------------------------------------------------------------------------
0000A892                            Map_MisDissolve_internal:
0000A892 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A894 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A896 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A898 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A89A 01                         byte_8EAE:	dc.b 1
0000A89B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A8A0 01                         byte_8EB4:	dc.b 1
0000A8A1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A8A6 01                         byte_8EBA:	dc.b 1
0000A8A7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A8AC 01                         byte_8EC0:	dc.b 1
0000A8AD F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A8B2                            		even
0000A8B2                            		even
0000A8B2                            		include	"_maps\Explosions.asm"
0000A8B2                            ; ---------------------------------------------------------------------------
0000A8B2                            ; Sprite mappings - explosion from a badnik or monitor
0000A8B2                            ; ---------------------------------------------------------------------------
0000A8B2 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A8B6 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A8BA 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A8BC 01                         byte_8ED0:	dc.b 1
0000A8BD F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A8C2 01                         byte_8ED6:	dc.b 1
0000A8C3 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A8C8 01                         byte_8EDC:	dc.b 1
0000A8C9 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A8CE 04                         byte_8EE2:	dc.b 4
0000A8CF EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A8D4 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A8D9 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A8DE FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A8E3 04                         byte_8EF7:	dc.b 4
0000A8E4 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A8E9 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A8EE 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A8F3 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A8F8                            		even
0000A8F8                            ; ---------------------------------------------------------------------------
0000A8F8                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A8F8                            ; ---------------------------------------------------------------------------
0000A8F8 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A8FA 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A8FC 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A8FE FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A900 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A902 01                         byte_8F16:	dc.b 1
0000A903 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A908 01                         byte_8F1C:	dc.b 1
0000A909 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A90E                            		even
0000A90E                            		even
0000A90E                            
0000A90E                            		include	"_incObj\28 Animals.asm"
0000A90E                            ; ---------------------------------------------------------------------------
0000A90E                            ; Object 28 - animals
0000A90E                            ; ---------------------------------------------------------------------------
0000A90E                            
0000A90E                            Animals:
0000A90E 7000                       		moveq	#0,d0
0000A910 1028 0024                  		move.b	obRoutine(a0),d0
0000A914 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A918 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A91C                            ; ===========================================================================
0000A91C 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A920 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A924 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A928 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A92C 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A930 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A934 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A938 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A93C 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A940 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A944 0000                       		dc.w loc_92D6-Anml_Index
0000A946                            
0000A946 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A952                            
0000A952 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A956 0000 0000                  		dc.l Map_Animal1
0000A95A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A95E 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A962 FE80 FD00                  		dc.w $FE80, $FD00
0000A966 0000 0000                  		dc.l Map_Animal1
0000A96A FEC0 FE80                  		dc.w $FEC0, $FE80
0000A96E 0000 0000                  		dc.l Map_Animal2
0000A972 FE40 FD00                  		dc.w $FE40, $FD00
0000A976 0000 0000                  		dc.l Map_Animal3
0000A97A FD00 FC00                  		dc.w $FD00, $FC00
0000A97E 0000 0000                  		dc.l Map_Animal2
0000A982 FD80 FC80                  		dc.w $FD80, $FC80
0000A986 0000 0000                  		dc.l Map_Animal3
0000A98A                            
0000A98A FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A99A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A9AA FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A9B6                            
0000A9B6 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000A9CA 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000A9DE 0000 0000                  		dc.l Map_Animal3
0000A9E2                            
0000A9E2 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A9F4 0565 05B3                  		dc.w $565, $5B3
0000A9F8                            ; ===========================================================================
0000A9F8                            
0000A9F8                            Anml_Ending:	; Routine 0
0000A9F8 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000A9FC 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AA00 7000                       		moveq	#0,d0
0000AA02 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AA06 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AA08 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AA0C 0440 0014                  		subi.w	#$14,d0
0000AA10 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AA16 D040                       		add.w	d0,d0
0000AA18 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AA1E 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AA22 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AA28 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AA2E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AA34 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AA3A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AA40 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA46 08E8 0000 0001             		bset	#0,obRender(a0)
0000AA4C 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AA52 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AA58 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AA5E 6000 0000                  		bra.w	DisplaySprite
0000AA62                            ; ===========================================================================
0000AA62                            
0000AA62                            Anml_FromEnemy:
0000AA62 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA66 6100 8D20                  		bsr.w	RandomNumber
0000AA6A 0240 0001                  		andi.w	#1,d0
0000AA6E 7200                       		moveq	#0,d1
0000AA70 1238 FE10                  		move.b	(v_zone).w,d1
0000AA74 D241                       		add.w	d1,d1
0000AA76 D240                       		add.w	d0,d1
0000AA78 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AA7C 1031 1000                  		move.b	(a1,d1.w),d0
0000AA80 1140 0030                  		move.b	d0,$30(a0)
0000AA84 E748                       		lsl.w	#3,d0
0000AA86 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AA8A D2C0                       		adda.w	d0,a1
0000AA8C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AA90 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AA94 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AA98 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AA9E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AAA4 6700                       		beq.s	loc_90C0	; if yes, branch
0000AAA6 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AAAC                            
0000AAAC                            loc_90C0:
0000AAAC 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AAB2 117C 0004 0001             		move.b	#4,obRender(a0)
0000AAB8 08E8 0000 0001             		bset	#0,obRender(a0)
0000AABE 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AAC4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AACA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AAD0 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AAD6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AADC 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AAE0 6600                       		bne.s	loc_911C
0000AAE2 6100 0000                  		bsr.w	FindFreeObj
0000AAE6 6600                       		bne.s	Anml_Display
0000AAE8 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AAEC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AAF2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AAF8 3028 003E                  		move.w	$3E(a0),d0
0000AAFC E248                       		lsr.w	#1,d0
0000AAFE 1340 001A                  		move.b	d0,obFrame(a1)
0000AB02                            
0000AB02                            Anml_Display:
0000AB02 6000 0000                  		bra.w	DisplaySprite
0000AB06                            ; ===========================================================================
0000AB06                            
0000AB06                            loc_911C:
0000AB06 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AB0C 4268 0010                  		clr.w	obVelX(a0)
0000AB10 6000 0000                  		bra.w	DisplaySprite
0000AB14                            ; ===========================================================================
0000AB14                            
0000AB14                            loc_912A:
0000AB14 4A28 0001                  		tst.b	obRender(a0)
0000AB18 6A00 0000                  		bpl.w	DeleteObject
0000AB1C 6100 0000                  		bsr.w	ObjectFall
0000AB20 4A68 0012                  		tst.w	obVelY(a0)
0000AB24 6B00                       		bmi.s	loc_9180
0000AB26 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB2C 4A41                       		tst.w	d1
0000AB2E 6A00                       		bpl.s	loc_9180
0000AB30 D368 000C                  		add.w	d1,obY(a0)
0000AB34 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AB3A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB40 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AB46 1028 0030                  		move.b	$30(a0),d0
0000AB4A D000                       		add.b	d0,d0
0000AB4C 5800                       		addq.b	#4,d0
0000AB4E 1140 0024                  		move.b	d0,obRoutine(a0)
0000AB52 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AB56 6700                       		beq.s	loc_9180
0000AB58 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000AB5E 6700                       		beq.s	loc_9180
0000AB60 4468 0010                  		neg.w	obVelX(a0)
0000AB64 0868 0000 0001             		bchg	#0,obRender(a0)
0000AB6A                            
0000AB6A                            loc_9180:
0000AB6A 6000 0000                  		bra.w	DisplaySprite
0000AB6E                            ; ===========================================================================
0000AB6E                            
0000AB6E                            loc_9184:
0000AB6E 6100 0000                  		bsr.w	ObjectFall
0000AB72 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AB78 4A68 0012                  		tst.w	obVelY(a0)
0000AB7C 6B00                       		bmi.s	loc_91AE
0000AB7E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB84 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AB8A 4A41                       		tst.w	d1
0000AB8C 6A00                       		bpl.s	loc_91AE
0000AB8E D368 000C                  		add.w	d1,obY(a0)
0000AB92 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AB98                            
0000AB98                            loc_91AE:
0000AB98 4A28 0028                  		tst.b	obSubtype(a0)
0000AB9C 6600                       		bne.s	loc_9224
0000AB9E 4A28 0001                  		tst.b	obRender(a0)
0000ABA2 6A00 0000                  		bpl.w	DeleteObject
0000ABA6 6000 0000                  		bra.w	DisplaySprite
0000ABAA                            ; ===========================================================================
0000ABAA                            
0000ABAA                            loc_91C0:
0000ABAA 6100 0000                  		bsr.w	SpeedToPos
0000ABAE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000ABB4 4A68 0012                  		tst.w	obVelY(a0)
0000ABB8 6B00                       		bmi.s	loc_91FC
0000ABBA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ABC0 4A41                       		tst.w	d1
0000ABC2 6A00                       		bpl.s	loc_91FC
0000ABC4 D368 000C                  		add.w	d1,obY(a0)
0000ABC8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ABCE 4A28 0028                  		tst.b	obSubtype(a0)
0000ABD2 6700                       		beq.s	loc_91FC
0000ABD4 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000ABDA 6700                       		beq.s	loc_91FC
0000ABDC 4468 0010                  		neg.w	obVelX(a0)
0000ABE0 0868 0000 0001             		bchg	#0,obRender(a0)
0000ABE6                            
0000ABE6                            loc_91FC:
0000ABE6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000ABEA 6A00                       		bpl.s	loc_9212
0000ABEC 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ABF2 5228 001A                  		addq.b	#1,obFrame(a0)
0000ABF6 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ABFC                            
0000ABFC                            loc_9212:
0000ABFC 4A28 0028                  		tst.b	obSubtype(a0)
0000AC00 6600                       		bne.s	loc_9224
0000AC02 4A28 0001                  		tst.b	obRender(a0)
0000AC06 6A00 0000                  		bpl.w	DeleteObject
0000AC0A 6000 0000                  		bra.w	DisplaySprite
0000AC0E                            ; ===========================================================================
0000AC0E                            
0000AC0E                            loc_9224:
0000AC0E 3028 0008                  		move.w	obX(a0),d0
0000AC12 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AC16 6500                       		bcs.s	loc_923C
0000AC18 0440 0180                  		subi.w	#$180,d0
0000AC1C 6A00                       		bpl.s	loc_923C
0000AC1E 4A28 0001                  		tst.b	obRender(a0)
0000AC22 6A00 0000                  		bpl.w	DeleteObject
0000AC26                            
0000AC26                            loc_923C:
0000AC26 6000 0000                  		bra.w	DisplaySprite
0000AC2A                            ; ===========================================================================
0000AC2A                            
0000AC2A                            loc_9240:
0000AC2A 4A28 0001                  		tst.b	obRender(a0)
0000AC2E 6A00 0000                  		bpl.w	DeleteObject
0000AC32 5368 0036                  		subq.w	#1,$36(a0)
0000AC36 6600 0000                  		bne.w	loc_925C
0000AC3A 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AC40 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AC46                            
0000AC46                            loc_925C:
0000AC46 6000 0000                  		bra.w	DisplaySprite
0000AC4A                            ; ===========================================================================
0000AC4A                            
0000AC4A                            loc_9260:
0000AC4A 6100 0000                  		bsr.w	sub_9404
0000AC4E 6400                       		bcc.s	loc_927C
0000AC50 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AC56 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AC5C 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AC62 6000 FF46                  		bra.w	loc_91C0
0000AC66                            ; ===========================================================================
0000AC66                            
0000AC66                            loc_927C:
0000AC66 6000 FFA6                  		bra.w	loc_9224
0000AC6A                            ; ===========================================================================
0000AC6A                            
0000AC6A                            loc_9280:
0000AC6A 6100 0000                  		bsr.w	sub_9404
0000AC6E 6A00                       		bpl.s	loc_92B6
0000AC70 4268 0010                  		clr.w	obVelX(a0)
0000AC74 4268 0032                  		clr.w	$32(a0)
0000AC78 6100 0000                  		bsr.w	SpeedToPos
0000AC7C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AC82 6100 0000                  		bsr.w	loc_93C4
0000AC86 6100 0000                  		bsr.w	loc_93EC
0000AC8A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AC8E 6A00                       		bpl.s	loc_92B6
0000AC90 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AC96 5228 001A                  		addq.b	#1,obFrame(a0)
0000AC9A 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ACA0                            
0000ACA0                            loc_92B6:
0000ACA0 6000 FF6C                  		bra.w	loc_9224
0000ACA4                            ; ===========================================================================
0000ACA4                            
0000ACA4                            loc_92BA:
0000ACA4 6100 0000                  		bsr.w	sub_9404
0000ACA8 6A00                       		bpl.s	loc_9310
0000ACAA 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ACB0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACB6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000ACBC 6000 FEB0                  		bra.w	loc_9184
0000ACC0                            ; ===========================================================================
0000ACC0                            
0000ACC0                            loc_92D6:
0000ACC0 6100 0000                  		bsr.w	ObjectFall
0000ACC4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ACCA 4A68 0012                  		tst.w	obVelY(a0)
0000ACCE 6B00                       		bmi.s	loc_9310
0000ACD0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ACD6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ACDC 4A41                       		tst.w	d1
0000ACDE 6A00                       		bpl.s	loc_9310
0000ACE0 4628 0029                  		not.b	$29(a0)
0000ACE4 6600                       		bne.s	loc_9306
0000ACE6 4468 0010                  		neg.w	obVelX(a0)
0000ACEA 0868 0000 0001             		bchg	#0,obRender(a0)
0000ACF0                            
0000ACF0                            loc_9306:
0000ACF0 D368 000C                  		add.w	d1,obY(a0)
0000ACF4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ACFA                            
0000ACFA                            loc_9310:
0000ACFA 6000 FF12                  		bra.w	loc_9224
0000ACFE                            ; ===========================================================================
0000ACFE                            
0000ACFE                            loc_9314:
0000ACFE 6100 0000                  		bsr.w	sub_9404
0000AD02 6A00                       		bpl.s	loc_932E
0000AD04 4268 0010                  		clr.w	obVelX(a0)
0000AD08 4268 0032                  		clr.w	$32(a0)
0000AD0C 6100 0000                  		bsr.w	ObjectFall
0000AD10 6100 0000                  		bsr.w	loc_93C4
0000AD14 6100 0000                  		bsr.w	loc_93EC
0000AD18                            
0000AD18                            loc_932E:
0000AD18 6000 FEF4                  		bra.w	loc_9224
0000AD1C                            ; ===========================================================================
0000AD1C                            
0000AD1C                            loc_9332:
0000AD1C 6100 0000                  		bsr.w	sub_9404
0000AD20 6A00                       		bpl.s	loc_936C
0000AD22 6100 0000                  		bsr.w	ObjectFall
0000AD26 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD2C 4A68 0012                  		tst.w	obVelY(a0)
0000AD30 6B00                       		bmi.s	loc_936C
0000AD32 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AD38 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD3E 4A41                       		tst.w	d1
0000AD40 6A00                       		bpl.s	loc_936C
0000AD42 4468 0010                  		neg.w	obVelX(a0)
0000AD46 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD4C D368 000C                  		add.w	d1,obY(a0)
0000AD50 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD56                            
0000AD56                            loc_936C:
0000AD56 6000 FEB6                  		bra.w	loc_9224
0000AD5A                            ; ===========================================================================
0000AD5A                            
0000AD5A                            loc_9370:
0000AD5A 6100 0000                  		bsr.w	sub_9404
0000AD5E 6A00                       		bpl.s	loc_93C0
0000AD60 6100 0000                  		bsr.w	SpeedToPos
0000AD64 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AD6A 4A68 0012                  		tst.w	obVelY(a0)
0000AD6E 6B00                       		bmi.s	loc_93AA
0000AD70 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD76 4A41                       		tst.w	d1
0000AD78 6A00                       		bpl.s	loc_93AA
0000AD7A 4628 0029                  		not.b	$29(a0)
0000AD7E 6600                       		bne.s	loc_93A0
0000AD80 4468 0010                  		neg.w	obVelX(a0)
0000AD84 0868 0000 0001             		bchg	#0,obRender(a0)
0000AD8A                            
0000AD8A                            loc_93A0:
0000AD8A D368 000C                  		add.w	d1,obY(a0)
0000AD8E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD94                            
0000AD94                            loc_93AA:
0000AD94 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AD98 6A00                       		bpl.s	loc_93C0
0000AD9A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000ADA0 5228 001A                  		addq.b	#1,obFrame(a0)
0000ADA4 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000ADAA                            
0000ADAA                            loc_93C0:
0000ADAA 6000 FE62                  		bra.w	loc_9224
0000ADAE                            ; ===========================================================================
0000ADAE                            
0000ADAE                            loc_93C4:
0000ADAE 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADB4 4A68 0012                  		tst.w	obVelY(a0)
0000ADB8 6B00                       		bmi.s	locret_93EA
0000ADBA 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ADC0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADC6 4A41                       		tst.w	d1
0000ADC8 6A00                       		bpl.s	locret_93EA
0000ADCA D368 000C                  		add.w	d1,obY(a0)
0000ADCE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADD4                            
0000ADD4                            locret_93EA:
0000ADD4 4E75                       		rts	
0000ADD6                            ; ===========================================================================
0000ADD6                            
0000ADD6                            loc_93EC:
0000ADD6 08E8 0000 0001             		bset	#0,obRender(a0)
0000ADDC 3028 0008                  		move.w	obX(a0),d0
0000ADE0 9078 D008                  		sub.w	(v_player+obX).w,d0
0000ADE4 6400                       		bcc.s	locret_9402
0000ADE6 08A8 0000 0001             		bclr	#0,obRender(a0)
0000ADEC                            
0000ADEC                            locret_9402:
0000ADEC 4E75                       		rts	
0000ADEE                            
0000ADEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADEE                            
0000ADEE                            
0000ADEE                            sub_9404:
0000ADEE 3038 D008                  		move.w	(v_player+obX).w,d0
0000ADF2 9068 0008                  		sub.w	obX(a0),d0
0000ADF6 0440 00B8                  		subi.w	#$B8,d0
0000ADFA 4E75                       		rts	
0000ADFC                            ; End of function sub_9404
0000ADFC                            ; End of function sub_9404
0000ADFC                            		include	"_incObj\29 Points.asm"
0000ADFC                            ; ---------------------------------------------------------------------------
0000ADFC                            ; Object 29 - points that appear when you destroy something
0000ADFC                            ; ---------------------------------------------------------------------------
0000ADFC                            
0000ADFC                            Points:
0000ADFC 7000                       		moveq	#0,d0
0000ADFE 1028 0024                  		move.b	obRoutine(a0),d0
0000AE02 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AE06 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AE0A 6000 0000                  		bra.w	DisplaySprite
0000AE0E                            ; ===========================================================================
0000AE0E 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AE10 0000                       		dc.w Poi_Slower-Poi_Index
0000AE12                            ; ===========================================================================
0000AE12                            
0000AE12                            Poi_Main:	; Routine 0
0000AE12 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AE16 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AE1E 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000AE24 117C 0004 0001             		move.b	#4,obRender(a0)
0000AE2A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AE30 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE36 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AE3C                            
0000AE3C                            Poi_Slower:	; Routine 2
0000AE3C 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AE40 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AE44 6100 0000                  		bsr.w	SpeedToPos
0000AE48 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AE4E 4E75                       		rts	
0000AE4E 4E75                       		rts	
0000AE50                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AE50                            ; ---------------------------------------------------------------------------
0000AE50                            ; Sprite mappings - animals
0000AE50                            ; ---------------------------------------------------------------------------
0000AE50                            Map_Animal1_internal:
0000AE50 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AE52 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AE54 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AE56 01                         byte_946C:	dc.b 1
0000AE57 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE5C 01                         byte_9472:	dc.b 1
0000AE5D F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AE62 01                         byte_9478:	dc.b 1
0000AE63 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AE68                            		even
0000AE68                            		even
0000AE68                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AE68                            ; ---------------------------------------------------------------------------
0000AE68                            ; Sprite mappings - animals
0000AE68                            ; ---------------------------------------------------------------------------
0000AE68                            Map_Animal2_internal:
0000AE68 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AE6A 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AE6C 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AE6E 01                         byte_9484:	dc.b 1
0000AE6F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE74 01                         byte_948A:	dc.b 1
0000AE75 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AE7A 01                         byte_9490:	dc.b 1
0000AE7B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AE80                            		even
0000AE80                            		even
0000AE80                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AE80                            ; ---------------------------------------------------------------------------
0000AE80                            ; Sprite mappings - animals
0000AE80                            ; ---------------------------------------------------------------------------
0000AE80                            Map_Animal3_internal:
0000AE80 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AE82 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AE84 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AE86 01                         byte_949C:	dc.b 1
0000AE87 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AE8C 01                         byte_94A2:	dc.b 1
0000AE8D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AE92 01                         byte_94A8:	dc.b 1
0000AE93 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AE98                            		even
0000AE98                            		even
0000AE98                            Map_Poi:	include	"_maps\Points.asm"
0000AE98                            ; --------------------------------------------------------------------------------
0000AE98                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AE98                            ; --------------------------------------------------------------------------------
0000AE98                            
0000AE98                            SME_qLvsg:	
0000AE98 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000AE9C 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000AEA0 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000AEA4 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000AEA6 01                         SME_qLvsg_E:	dc.b 1	
0000AEA7 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000AEAC 01                         SME_qLvsg_14:	dc.b 1	
0000AEAD FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000AEB2 01                         SME_qLvsg_1A:	dc.b 1	
0000AEB3 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000AEB8 01                         SME_qLvsg_20:	dc.b 1	
0000AEB9 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000AEBE 01                         SME_qLvsg_26:	dc.b 1	
0000AEBF FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000AEC4 02                         SME_qLvsg_2C:	dc.b 2	
0000AEC5 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AECA FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000AECF 02                         SME_qLvsg_37:	dc.b 2	
0000AED0 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000AED5 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000AEDA                            		even
0000AEDA                            		even
0000AEDA                            
0000AEDA                            		include	"_incObj\1F Crabmeat.asm"
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA                            
0000AEDA                            Crabmeat:
0000AEDA 7000                       		moveq	#0,d0
0000AEDC 1028 0024                  		move.b	obRoutine(a0),d0
0000AEE0 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000AEE4 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000AEE8                            ; ===========================================================================
0000AEE8                            Crab_Index:
0000AEE8 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000AEEA 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000AEEC 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000AEEE 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000AEF0 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000AEF2                            
0000AEF2 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000AEF2 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000AEF2 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000AEF2 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000AEF2 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000AEF2                            
0000AEF2 =00000030                  crab_timedelay:	equ $30
0000AEF2 =00000032                  crab_mode:	equ $32
0000AEF2                            ; ===========================================================================
0000AEF2                            
0000AEF2                            Crab_Main:	; Routine 0
0000AEF2 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AEF8 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AEFE 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AF06 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AF0C 117C 0004 0001             		move.b	#4,obRender(a0)
0000AF12 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF18 117C 0006 0020             		move.b	#6,obColType(a0)
0000AF1E 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AF24 6100 0000                  		bsr.w	ObjectFall
0000AF28 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AF2E 4A41                       		tst.w	d1
0000AF30 6A00                       		bpl.s	@floornotfound
0000AF32 D368 000C                  		add.w	d1,obY(a0)
0000AF36 1143 0026                  		move.b	d3,obAngle(a0)
0000AF3A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AF40 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AF44                            
0000AF44                            	@floornotfound:
0000AF44 4E75                       		rts	
0000AF46                            ; ===========================================================================
0000AF46                            
0000AF46                            Crab_Action:	; Routine 2
0000AF46 7000                       		moveq	#0,d0
0000AF48 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AF4C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AF50 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AF54 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AF5A 6100 0000                  		bsr.w	AnimateSprite
0000AF5E 6000 0000                  		bra.w	RememberState
0000AF62                            ; ===========================================================================
0000AF62 0000                       @index:		dc.w @waittofire-@index
0000AF64 0000                       		dc.w @walkonfloor-@index
0000AF66                            ; ===========================================================================
0000AF66                            
0000AF66                            @waittofire:
0000AF66 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AF6A 6A00                       		bpl.s	@dontmove
0000AF6C 4A28 0001                  		tst.b	obRender(a0)
0000AF70 6A00                       		bpl.s	@movecrab
0000AF72 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AF78 6600                       		bne.s	@fire
0000AF7A                            
0000AF7A                            	@movecrab:
0000AF7A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AF7E 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AF84 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AF8A 6100 0000                  		bsr.w	Crab_SetAni
0000AF8E 5600                       		addq.b	#3,d0
0000AF90 1140 001C                  		move.b	d0,obAnim(a0)
0000AF94 0868 0000 0022             		bchg	#0,obStatus(a0)
0000AF9A 6600                       		bne.s	@noflip
0000AF9C 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000AFA0                            
0000AFA0                            	@dontmove:
0000AFA0                            	@noflip:
0000AFA0 4E75                       		rts	
0000AFA2                            ; ===========================================================================
0000AFA2                            
0000AFA2                            @fire:
0000AFA2 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000AFA8 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000AFAE 6100 0000                  		bsr.w	FindFreeObj
0000AFB2 6600                       		bne.s	@failleft
0000AFB4 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000AFB8 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000AFBE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AFC4 0469 0010 0008             		subi.w	#$10,obX(a1)
0000AFCA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AFD0 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000AFD6                            
0000AFD6                            	@failleft:
0000AFD6 6100 0000                  		bsr.w	FindFreeObj
0000AFDA 6600                       		bne.s	@failright
0000AFDC 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000AFE0 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000AFE6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AFEC 0669 0010 0008             		addi.w	#$10,obX(a1)
0000AFF2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AFF8 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000AFFE                            
0000AFFE                            	@failright:
0000AFFE 4E75                       		rts	
0000B000                            ; ===========================================================================
0000B000                            
0000B000                            @walkonfloor:
0000B000 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B004 6B00                       		bmi.s	loc_966E
0000B006 6100 0000                  		bsr.w	SpeedToPos
0000B00A 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B010 6600                       		bne.s	loc_9654
0000B012 3628 0008                  		move.w	obX(a0),d3
0000B016 0643 0010                  		addi.w	#$10,d3
0000B01A 0828 0000 0022             		btst	#0,obStatus(a0)
0000B020 6700                       		beq.s	loc_9640
0000B022 0443 0020                  		subi.w	#$20,d3
0000B026                            
0000B026                            loc_9640:
0000B026 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B02C 0C41 FFF8                  		cmpi.w	#-8,d1
0000B030 6D00                       		blt.s	loc_966E
0000B032 0C41 000C                  		cmpi.w	#$C,d1
0000B036 6C00                       		bge.s	loc_966E
0000B038 4E75                       		rts	
0000B03A                            ; ===========================================================================
0000B03A                            
0000B03A                            loc_9654:
0000B03A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B040 D368 000C                  		add.w	d1,obY(a0)
0000B044 1143 0026                  		move.b	d3,obAngle(a0)
0000B048 6100 0000                  		bsr.w	Crab_SetAni
0000B04C 5600                       		addq.b	#3,d0
0000B04E 1140 001C                  		move.b	d0,obAnim(a0)
0000B052 4E75                       		rts	
0000B054                            ; ===========================================================================
0000B054                            
0000B054                            loc_966E:
0000B054 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B058 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B05E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B064 6100 0000                  		bsr.w	Crab_SetAni
0000B068 1140 001C                  		move.b	d0,obAnim(a0)
0000B06C 4E75                       		rts	
0000B06E                            ; ---------------------------------------------------------------------------
0000B06E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B06E                            ; ---------------------------------------------------------------------------
0000B06E                            
0000B06E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B06E                            
0000B06E                            
0000B06E                            Crab_SetAni:
0000B06E 7000                       		moveq	#0,d0
0000B070 1628 0026                  		move.b	obAngle(a0),d3
0000B074 6B00                       		bmi.s	loc_96A4
0000B076 0C03 0006                  		cmpi.b	#6,d3
0000B07A 6500                       		bcs.s	locret_96A2
0000B07C 7001                       		moveq	#1,d0
0000B07E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B084 6600                       		bne.s	locret_96A2
0000B086 7002                       		moveq	#2,d0
0000B088                            
0000B088                            locret_96A2:
0000B088 4E75                       		rts	
0000B08A                            ; ===========================================================================
0000B08A                            
0000B08A                            loc_96A4:
0000B08A 0C03 00FA                  		cmpi.b	#-6,d3
0000B08E 6200                       		bhi.s	locret_96B6
0000B090 7002                       		moveq	#2,d0
0000B092 0828 0000 0022             		btst	#0,obStatus(a0)
0000B098 6600                       		bne.s	locret_96B6
0000B09A 7001                       		moveq	#1,d0
0000B09C                            
0000B09C                            locret_96B6:
0000B09C 4E75                       		rts	
0000B09E                            ; End of function Crab_SetAni
0000B09E                            
0000B09E                            ; ===========================================================================
0000B09E                            
0000B09E                            Crab_Delete:	; Routine 4
0000B09E 6100 0000                  		bsr.w	DeleteObject
0000B0A2 4E75                       		rts	
0000B0A4                            ; ===========================================================================
0000B0A4                            ; ---------------------------------------------------------------------------
0000B0A4                            ; Sub-object - missile that the	Crabmeat throws
0000B0A4                            ; ---------------------------------------------------------------------------
0000B0A4                            
0000B0A4                            Crab_BallMain:	; Routine 6
0000B0A4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B0A8 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B0B0 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B0B6 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0BC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B0C2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B0C8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B0CE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B0D4 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B0DA                            
0000B0DA                            Crab_BallMove:	; Routine 8
0000B0DA 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B0E0 6100 0000                  		bsr.w	AnimateSprite
0000B0E4 6100 0000                  		bsr.w	ObjectFall
0000B0E8 6100 0000                  		bsr.w	DisplaySprite
0000B0EC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B0F0 0640 00E0                  		addi.w	#$E0,d0
0000B0F4 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B0F8 6500                       		bcs.s	@delete		; if yes, branch
0000B0FA 4E75                       		rts	
0000B0FC                            
0000B0FC                            	@delete:
0000B0FC 6000 0000                  		bra.w	DeleteObject
0000B0FC 6000 0000                  		bra.w	DeleteObject
0000B100                            		include	"_anim\Crabmeat.asm"
0000B100                            ; ---------------------------------------------------------------------------
0000B100                            ; Animation script - Crabmeat enemy
0000B100                            ; ---------------------------------------------------------------------------
0000B100 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B106 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B10C 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B110 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B114 00                         		even
0000B114 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B118 00                         		even
0000B118 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B11C 00                         		even
0000B11C 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B122 00                         		even
0000B122 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B128 00                         		even
0000B128 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B12E 00                         		even
0000B12E 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B132 00                         		even
0000B132 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B136                            		even
0000B136                            		even
0000B136                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            Map_Crab_internal:
0000B136 0000                       		dc.w @stand-Map_Crab_internal
0000B138 0000                       		dc.w @walk-Map_Crab_internal
0000B13A 0000                       		dc.w @slope1-Map_Crab_internal
0000B13C 0000                       		dc.w @slope2-Map_Crab_internal
0000B13E 0000                       		dc.w @firing-Map_Crab_internal
0000B140 0000                       		dc.w @ball1-Map_Crab_internal
0000B142 0000                       		dc.w @ball2-Map_Crab_internal
0000B144 04                         @stand:		dc.b 4
0000B145 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B14A F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B14F 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B154 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B159 04                         @walk:		dc.b 4
0000B15A F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B15F F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B164 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B169 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B16E 04                         @slope1:	dc.b 4
0000B16F EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B174 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B179 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B17E FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B183 04                         @slope2:	dc.b 4
0000B184 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B189 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B18E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B193 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B198 06                         @firing:	dc.b 6
0000B199 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B19E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B1A3 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B1A8 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B1AD 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B1B2 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B1B7 01                         @ball1:		dc.b 1
0000B1B8 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B1BD 01                         @ball2:		dc.b 1
0000B1BE F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B1C4 00                         		even
0000B1C4 00                         		even
0000B1C4                            		include	"_incObj\06 Mozzietron.asm"
0000B1C4                            ; ===========================================================================
0000B1C4                            ; ---------------------------------------------------------------------------
0000B1C4                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B1C4                            ; ---------------------------------------------------------------------------
0000B1C4                            
0000B1C4                            Mozzietron:					; XREF: Obj_Index
0000B1C4 7000                       		moveq	#0,d0
0000B1C6 1028 0024                  		move.b	$24(a0),d0
0000B1CA 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B1CE 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B1D2                            ; ===========================================================================
0000B1D2 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B1D4 0000                       		dc.w MozAction-MozIndex
0000B1D6 0000                       		dc.w MozDelete-MozIndex
0000B1D8                            ; ===========================================================================
0000B1D8                            
0000B1D8                            MozMain:				; XREF: MozIndex
0000B1D8 5428 0024                  		addq.b	#2,$24(a0)
0000B1DC 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B1E4 317C 0444 0002             		move.w	#$444,2(a0)
0000B1EA 117C 0004 0001             		move.b	#4,1(a0)
0000B1F0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B1F6 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B1FC 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B202                            MozAction:				; XREF: MozIndex
0000B202 7000                       		moveq	#0,d0
0000B204 1028 0025                  		move.b	$25(a0),d0
0000B208 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B20C 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B210 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B216 6100 0000                  		bsr.w	AnimateSprite
0000B21A 6000 0000                  		bra.w	RememberState
0000B21E                            ; ===========================================================================
0000B21E 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B220 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B222 0000                       		dc.w MozPinned-MozIndex2
0000B224                            ; ===========================================================================
0000B224                            
0000B224                            MozMove:				; XREF: MozIndex2
0000B224 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B228 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B22A 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B230 6600                       		bne.s	MozFire	; if yes, branch
0000B232 5428 0025                  		addq.b	#2,$25(a0)
0000B236 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B23C 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B242 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B248 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B24E 6600                       		bne.s	locret_986C	; if not, branch
0000B250 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B254                            
0000B254                            locret_986C:
0000B254 4E75                       		rts	
0000B256                            ; ===========================================================================
0000B256                            
0000B256                            MozFire:				; XREF: MozMove
0000B256 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B25C 6100 0000                  		bsr.w	ObjectFall
0000B260 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B266 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B268 6A00                       		bpl.s   @return ; if yes, branch 
0000B26A 303C 00B6                  		move.w    #$B6,d0
0000B26E 4EB9 0000 0FCC             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B274 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B27A D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B27E 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B282 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B286                            		@return:
0000B286 4E75                       	    		rts
0000B288                            		
0000B288                            
0000B288                            ; ===========================================================================
0000B288                            
0000B288                            MozPinned:
0000B288 4E75                               rts
0000B28A                                    
0000B28A                            ; ===========================================================================
0000B28A                            
0000B28A                            MozChkDel:				; XREF: Obj55_DropFly
0000B28A 4A28 0001                  		tst.b	1(a0)
0000B28E 6A00 0000                  		bpl.w	DeleteObject
0000B292 4E75                       		rts	
0000B294                            ; ===========================================================================
0000B294                            
0000B294                            MozChkNrSonic:			; XREF: MozIndex2
0000B294                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B294 6B00                       		bmi.s	MozChgDir
0000B296 6100 0000                  		bsr.w	SpeedToPos
0000B29A 4A28 0034                  		tst.b	$34(a0)
0000B29E 6600                       		bne.s	locret_992A
0000B2A0 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2A4 9068 0008                  		sub.w	8(a0),d0
0000B2A8 6A00                       		bpl.s	MozSetNrSonic
0000B2AA 4440                       		neg.w	d0
0000B2AC                            
0000B2AC                            MozSetNrSonic:
0000B2AC 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B2B0 6400                       		bcc.s	locret_992A	; if not, branch
0000B2B2 4A28 0001                  		tst.b	1(a0)
0000B2B6 6A00                       		bpl.s	locret_992A
0000B2B8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B2BE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B2C4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B2CA 6000                       		bra.s	MozStop
0000B2CC                            ; ===========================================================================
0000B2CC                            
0000B2CC                            MozChgDir:				; XREF: MozChkNrSonic
0000B2CC 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B2D2 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B2D8 317C 003B 0032             		move.w	#59,$32(a0)
0000B2DE                            
0000B2DE                            MozStop:				; XREF: MozSetNrSonic
0000B2DE 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B2E2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B2E8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B2EE                            
0000B2EE                            locret_992A:
0000B2EE 4E75                       		rts	
0000B2F0                            ; ===========================================================================
0000B2F0                            
0000B2F0                            MozDelete:				; XREF: MozIndex
0000B2F0 6100 0000                  		bsr.w	DeleteObject
0000B2F4 4E75                       		rts	
0000B2F4 4E75                       		rts	
0000B2F6                            		include	"_incObj\22 Buzz Bomber.asm"
0000B2F6                            ; ===========================================================================
0000B2F6                            ; ---------------------------------------------------------------------------
0000B2F6                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B2F6                            ; ---------------------------------------------------------------------------
0000B2F6                            
0000B2F6                            BuzzBomber:
0000B2F6 7000                       		moveq	#0,d0
0000B2F8 1028 0024                  		move.b	obRoutine(a0),d0
0000B2FC 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B300 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B304                            ; ===========================================================================
0000B304 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B306 0000                       		dc.w Buzz_Action-Buzz_Index
0000B308 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B30A                            
0000B30A =00000032                  buzz_timedelay:	equ $32
0000B30A =00000034                  buzz_buzzstatus:	equ $34
0000B30A =0000003C                  buzz_parent:	equ $3C
0000B30A                            ; ===========================================================================
0000B30A                            
0000B30A                            Buzz_Main:	; Routine 0
0000B30A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B30E 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B316 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B31C 117C 0004 0001             		move.b	#4,obRender(a0)
0000B322 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B328 117C 0008 0020             		move.b	#8,obColType(a0)
0000B32E 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B334                            
0000B334                            Buzz_Action:	; Routine 2
0000B334 7000                       		moveq	#0,d0
0000B336 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B33A 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B33E 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B342 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B348 6100 0000                  		bsr.w	AnimateSprite
0000B34C 6000 0000                  		bra.w	RememberState
0000B350                            ; ===========================================================================
0000B350 0000                       @index:		dc.w @move-@index
0000B352 0000                       		dc.w @chknearsonic-@index
0000B354                            ; ===========================================================================
0000B354                            
0000B354                            @move:
0000B354 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B358 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B35A 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B360 6600                       		bne.s	@fire		; if yes, branch
0000B362 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B366 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B36C 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B372 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B378 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B37E 6600                       		bne.s	@noflip		; if not, branch
0000B380 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B384                            
0000B384                            	@noflip:
0000B384 4E75                       		rts	
0000B386                            ; ===========================================================================
0000B386                            
0000B386                            	@fire:
0000B386 6100 0000                  		bsr.w	FindFreeObj
0000B38A 6600                       		bne.s	@fail
0000B38C 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B390 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B396 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B39C 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B3A2 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B3A8 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B3AE 303C 0018                  		move.w	#$18,d0
0000B3B2 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B3B8 6600                       		bne.s	@noflip2	; if not, branch
0000B3BA 4440                       		neg.w	d0
0000B3BC 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B3C0                            
0000B3C0                            	@noflip2:
0000B3C0 D169 0008                  		add.w	d0,obX(a1)
0000B3C4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B3CA 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B3D0 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B3D4 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B3DA 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B3E0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B3E6                            
0000B3E6                            	@fail:
0000B3E6 4E75                       		rts	
0000B3E8                            ; ===========================================================================
0000B3E8                            
0000B3E8                            @chknearsonic:
0000B3E8 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B3EC 6B00                       		bmi.s	@chgdirection
0000B3EE 6100 0000                  		bsr.w	SpeedToPos
0000B3F2 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B3F6 6600                       		bne.s	@keepgoing
0000B3F8 3038 D008                  		move.w	(v_player+obX).w,d0
0000B3FC 9068 0008                  		sub.w	obX(a0),d0
0000B400 6A00                       		bpl.s	@isleft
0000B402 4440                       		neg.w	d0
0000B404                            
0000B404                            	@isleft:
0000B404 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B408 6400                       		bcc.s	@keepgoing	; if not, branch
0000B40A 4A28 0001                  		tst.b	obRender(a0)
0000B40E 6A00                       		bpl.s	@keepgoing
0000B410 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B416 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B41C 6000                       		bra.s	@stop
0000B41E                            ; ===========================================================================
0000B41E                            
0000B41E                            	@chgdirection:
0000B41E 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B424 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B42A 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B430                            
0000B430                            	@stop:
0000B430 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B434 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B43A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B440                            
0000B440                            @keepgoing:
0000B440 4E75                       		rts	
0000B442                            ; ===========================================================================
0000B442                            
0000B442                            Buzz_Delete:	; Routine 4
0000B442 6100 0000                  		bsr.w	DeleteObject
0000B446 4E75                       		rts	
0000B446 4E75                       		rts	
0000B448                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B448                            ; ---------------------------------------------------------------------------
0000B448                            ; Object 23 - missile that Buzz	Bomber throws
0000B448                            ; ---------------------------------------------------------------------------
0000B448                            
0000B448                            Missile:
0000B448 7000                       		moveq	#0,d0
0000B44A 1028 0024                  		move.b	obRoutine(a0),d0
0000B44E 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B452 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B456                            ; ===========================================================================
0000B456 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B458 0000                       		dc.w Msl_Animate-Msl_Index
0000B45A 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B45C 0000                       		dc.w Msl_Delete-Msl_Index
0000B45E 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B460                            
0000B460 =0000003C                  msl_parent:	equ $3C
0000B460                            ; ===========================================================================
0000B460                            
0000B460                            Msl_Main:	; Routine 0
0000B460 5368 0032                  		subq.w	#1,$32(a0)
0000B464 6A00                       		bpl.s	Msl_ChkCancel
0000B466 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B46A 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B472 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B478 117C 0004 0001             		move.b	#4,obRender(a0)
0000B47E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B484 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B48A 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B490 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B494 6700                       		beq.s	Msl_Animate	; if not, branch
0000B496                            
0000B496 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B49C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B4A2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B4A8 6000                       		bra.s	Msl_Animate2
0000B4AA                            ; ===========================================================================
0000B4AA                            
0000B4AA                            Msl_Animate:	; Routine 2
0000B4AA 6100                       		bsr.s	Msl_ChkCancel
0000B4AC 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B4B2 6100 0000                  		bsr.w	AnimateSprite
0000B4B6 6000 0000                  		bra.w	DisplaySprite
0000B4BA                            
0000B4BA                            ; ---------------------------------------------------------------------------
0000B4BA                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B4BA                            ; destroyed, and if it has, then cancel	the missile
0000B4BA                            ; ---------------------------------------------------------------------------
0000B4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4BA                            
0000B4BA                            
0000B4BA                            Msl_ChkCancel:
0000B4BA 2268 003C                  		movea.l	msl_parent(a0),a1
0000B4BE 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B4C2 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B4C4 4E75                       		rts	
0000B4C6                            ; End of function Msl_ChkCancel
0000B4C6                            
0000B4C6                            ; ===========================================================================
0000B4C6                            
0000B4C6                            Msl_FromBuzz:	; Routine 4
0000B4C6 0828 0007 0022             		btst	#7,obStatus(a0)
0000B4CC 6600                       		bne.s	@explode
0000B4CE 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B4D4 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B4DA 6100 0000                  		bsr.w	SpeedToPos
0000B4DE 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B4E4 6100 0000                  		bsr.w	AnimateSprite
0000B4E8 6100 0000                  		bsr.w	DisplaySprite
0000B4EC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B4F0 0640 00E0                  		addi.w	#$E0,d0
0000B4F4 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B4F8 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B4FA 4E75                       		rts	
0000B4FC                            ; ===========================================================================
0000B4FC                            
0000B4FC                            	@explode:
0000B4FC 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B500 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B506 6000 F1D8                  		bra.w	MissileDissolve
0000B50A                            ; ===========================================================================
0000B50A                            
0000B50A                            Msl_Delete:	; Routine 6
0000B50A 6100 0000                  		bsr.w	DeleteObject
0000B50E 4E75                       		rts	
0000B510                            ; ===========================================================================
0000B510                            
0000B510                            Msl_FromNewt:	; Routine 8
0000B510 4A28 0001                  		tst.b	obRender(a0)
0000B514 6AF4                       		bpl.s	Msl_Delete
0000B516 6100 0000                  		bsr.w	SpeedToPos
0000B51A                            
0000B51A                            Msl_Animate2:
0000B51A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B520 6100 0000                  		bsr.w	AnimateSprite
0000B524 6100 0000                  		bsr.w	DisplaySprite
0000B528 4E75                       		rts	
0000B528 4E75                       		rts	
0000B52A                            		include	"_anim\Mozzietron.asm"
0000B52A                            ; ---------------------------------------------------------------------------
0000B52A                            ; Animation script - Buzz Bomber enemy
0000B52A                            ; ---------------------------------------------------------------------------
0000B52A 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B52C 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B52E 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B530 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B534 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B538 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B540 00                         		even
0000B540 00                         		even
0000B540                            		include	"_anim\Buzz Bomber.asm"
0000B540                            ; ---------------------------------------------------------------------------
0000B540                            ; Animation script - Buzz Bomber enemy
0000B540                            ; ---------------------------------------------------------------------------
0000B540 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B542 0000                       		dc.w @fly2-Ani_Buzz
0000B544 0000                       		dc.w @fires-Ani_Buzz
0000B546 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B54A 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B54E 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B552                            		even
0000B552                            		even
0000B552                            		include	"_anim\Buzz Bomber Missile.asm"
0000B552                            ; ---------------------------------------------------------------------------
0000B552                            ; Animation script - missile that Buzz Bomber throws
0000B552                            ; ---------------------------------------------------------------------------
0000B552 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B554 0000                       		dc.w @missile-Ani_Missile
0000B556 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B55A 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B55E                            		even
0000B55E                            		even
0000B55E                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B55E                            ; --------------------------------------------------------------------------------
0000B55E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B55E                            ; --------------------------------------------------------------------------------
0000B55E                            
0000B55E                            SME_qvHIs:	
0000B55E 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B562 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B566 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B56A 02                         SME_qvHIs_C:	dc.b 2	
0000B56B FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B570 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B575 01                         SME_qvHIs_17:	dc.b 1	
0000B576 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B57B 02                         SME_qvHIs_1D:	dc.b 2	
0000B57C E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B581 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B586 03                         SME_qvHIs_28:	dc.b 3	
0000B587 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B58C E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B591 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B596 04                         SME_qvHIs_38:	dc.b 4	
0000B597 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B59C F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B5A1 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B5A6 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B5AB 04                         SME_qvHIs_4D:	dc.b 4	
0000B5AC E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B5B1 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B5B6 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B5BB F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B5C0                            		even
0000B5C0                            		even
0000B5C0                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B5C0                            ; --------------------------------------------------------------------------------
0000B5C0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B5C0                            ; --------------------------------------------------------------------------------
0000B5C0                            
0000B5C0                            SME_yccqJ:	
0000B5C0 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B5C4 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B5C8 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B5CC 06                         SME_yccqJ_C:	dc.b 6	
0000B5CD F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B5D2 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B5D7 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B5DC 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B5E1 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B5E6 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B5EB 06                         SME_yccqJ_2B:	dc.b 6	
0000B5EC F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B5F1 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B5F6 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B5FB 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B600 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B605 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B60A 06                         SME_yccqJ_4A:	dc.b 6	
0000B60B F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B610 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B615 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B61A 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B61F EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B624 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B629 06                         SME_yccqJ_69:	dc.b 6	
0000B62A F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B62F F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B634 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B639 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B63E F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B643 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B648 07                         SME_yccqJ_88:	dc.b 7	
0000B649 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B64E 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B653 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B658 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B65D 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B662 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B667 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B66C 04                         SME_yccqJ_AC:	dc.b 4	
0000B66D F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B672 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B677 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B67C 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B682 00                         		even
0000B682 00                         		even
0000B682                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B682                            ; ---------------------------------------------------------------------------
0000B682                            ; Sprite mappings - missile that Buzz Bomber throws
0000B682                            ; ---------------------------------------------------------------------------
0000B682                            Map_Missile_internal:
0000B682 0000                       		dc.w @Flare1-Map_Missile_internal
0000B684 0000                       		dc.w @Flare2-Map_Missile_internal
0000B686 0000                       		dc.w @Ball1-Map_Missile_internal
0000B688 0000                       		dc.w @Ball2-Map_Missile_internal
0000B68A 01                         @Flare1:	dc.b 1
0000B68B F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B690 01                         @Flare2:	dc.b 1
0000B691 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B696 01                         @Ball1:		dc.b 1
0000B697 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B69C 01                         @Ball2:		dc.b 1
0000B69D F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B6A2                            		even
0000B6A2                            		even
0000B6A2                            
0000B6A2                            		include	"_incObj\25 & 37 Rings.asm"
0000B6A2                            ; ---------------------------------------------------------------------------
0000B6A2                            ; Object 25 - rings
0000B6A2                            ; ---------------------------------------------------------------------------
0000B6A2                            
0000B6A2                            Rings:
0000B6A2 7000                       		moveq	#0,d0
0000B6A4 1028 0024                  		move.b	obRoutine(a0),d0
0000B6A8 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B6AC 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B6B0                            ; ===========================================================================
0000B6B0                            Ring_Index:
0000B6B0 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B6B2 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B6B4 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B6B6 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B6B8 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B6BA 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B6BC 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B6BE 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B6C0 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B6C2                            
0000B6C2 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B6C2 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B6C2 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B6C2 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B6C2 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B6C2 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B6C2 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B6C2 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B6C2 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B6C2                            ; ---------------------------------------------------------------------------
0000B6C2                            ; Distances between rings (format: horizontal, vertical)
0000B6C2                            ; ---------------------------------------------------------------------------
0000B6C2 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B6C4 1800                       		dc.b $18, 0		; horizontal normal
0000B6C6 2000                       		dc.b $20, 0		; horizontal wide
0000B6C8 0010                       		dc.b 0,	$10		; vertical tight
0000B6CA 0018                       		dc.b 0,	$18		; vertical normal
0000B6CC 0020                       		dc.b 0,	$20		; vertical wide
0000B6CE 1010                       		dc.b $10, $10		; diagonal
0000B6D0 1818                       		dc.b $18, $18
0000B6D2 2020                       		dc.b $20, $20
0000B6D4 F010                       		dc.b $F0, $10
0000B6D6 E818                       		dc.b $E8, $18
0000B6D8 E020                       		dc.b $E0, $20
0000B6DA 1008                       		dc.b $10, 8
0000B6DC 1810                       		dc.b $18, $10
0000B6DE F008                       		dc.b $F0, 8
0000B6E0 E810                       		dc.b $E8, $10
0000B6E2                            ; ===========================================================================
0000B6E2                            
0000B6E2                            Ring_Main:	; Routine 0
0000B6E2 45F8 FC00                  		lea	(v_objstate).w,a2
0000B6E6 7000                       		moveq	#0,d0
0000B6E8 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B6EC 45F2 0002                  		lea	2(a2,d0.w),a2
0000B6F0 1812                       		move.b	(a2),d4
0000B6F2 1228 0028                  		move.b	obSubtype(a0),d1
0000B6F6 1001                       		move.b	d1,d0
0000B6F8 0241 0007                  		andi.w	#7,d1
0000B6FC 0C41 0007                  		cmpi.w	#7,d1
0000B700 6600                       		bne.s	loc_9B80
0000B702 7206                       		moveq	#6,d1
0000B704                            
0000B704                            	loc_9B80:
0000B704 4841                       		swap	d1
0000B706 323C 0000                  		move.w	#0,d1
0000B70A E808                       		lsr.b	#4,d0
0000B70C D040                       		add.w	d0,d0
0000B70E 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B712 4885                       		ext.w	d5
0000B714 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B718 4886                       		ext.w	d6
0000B71A 2248                       		movea.l	a0,a1
0000B71C 3428 0008                  		move.w	obX(a0),d2
0000B720 3628 000C                  		move.w	obY(a0),d3
0000B724 E20C                       		lsr.b	#1,d4
0000B726 6500                       		bcs.s	loc_9C02
0000B728 0892 0007                  		bclr	#7,(a2)
0000B72C 6000                       		bra.s	loc_9BBA
0000B72E                            ; ===========================================================================
0000B72E                            
0000B72E                            Ring_MakeRings:
0000B72E 4841                       		swap	d1
0000B730 E20C                       		lsr.b	#1,d4
0000B732 6500                       		bcs.s	loc_9C02
0000B734 0892 0007                  		bclr	#7,(a2)
0000B738 6100 0000                  		bsr.w	FindFreeObj
0000B73C 6600                       		bne.s	loc_9C0E
0000B73E                            
0000B73E                            loc_9BBA:
0000B73E 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B742 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B746 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B74A 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B750 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B754 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B75C 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B762 137C 0004 0001             		move.b	#4,obRender(a1)
0000B768 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B76E 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B774 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B77A 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B780 1341 0034                  		move.b	d1,$34(a1)
0000B784                            
0000B784                            loc_9C02:
0000B784 5241                       		addq.w	#1,d1
0000B786 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B788 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B78A 4841                       		swap	d1
0000B78C 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B790                            
0000B790                            loc_9C0E:
0000B790 0812 0000                  		btst	#0,(a2)
0000B794 6600 0000                  		bne.w	DeleteObject
0000B798                            
0000B798                            Ring_Animate:	; Routine 2
0000B798 4A38 F5C9                  		tst.b	(v_gshield).w
0000B79C 6700                       		beq.s	@skip
0000B79E 4A28 0001                  		tst.b	obRender(a0)
0000B7A2 6A00                       		bpl.s	@skip
0000B7A4                            		
0000B7A4 43F8 D000                  		lea (v_player).w,a1
0000B7A8                            		
0000B7A8 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B7AC 9068 0008                  		sub.w	obX(a0),d0
0000B7B0 6A00                       		bpl.s	@a1
0000B7B2 4440                       		neg.w	d0
0000B7B4                            		
0000B7B4                            	@a1:
0000B7B4 0C40 0040                  		cmpi.w	#$40,d0
0000B7B8 6200                       		bhi.s	@skip
0000B7BA                            		
0000B7BA 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B7BE 9068 000C                  		sub.w	obY(a0),d0
0000B7C2 6A00                       		bpl.s	@a2
0000B7C4 4440                       		neg.w	d0
0000B7C6                            		
0000B7C6                            	@a2:
0000B7C6 0C40 0040                  		cmpi.w	#$40,d0
0000B7CA 6200                       		bhi.s	@skip
0000B7CC                            		
0000B7CC 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B7D2 45F8 FC00                  		lea	(v_objstate).w,a2
0000B7D6 7000                       		moveq	#0,d0
0000B7D8 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B7DC 1228 0034                  		move.b	$34(a0),d1
0000B7E0 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B7E4                            		
0000B7E4                            	@skip:
0000B7E4 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B7EA 6100 0000                  		bsr.w	DisplaySprite
0000B80A 4E75                       		rts	
0000B80C                            ; ===========================================================================
0000B80C                            
0000B80C                            Ring_Collect:	; Routine 4
0000B80C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B810 117C 0000 0020             		move.b	#0,obColType(a0)
0000B816 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B81C 6100 0000                  		bsr.w	CollectRing
0000B820 45F8 FC00                  		lea	(v_objstate).w,a2
0000B824 7000                       		moveq	#0,d0
0000B826 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B82A 1228 0034                  		move.b	$34(a0),d1
0000B82E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B832                            
0000B832                            Ring_Sparkle:	; Routine 6
0000B832 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B838 6100 0000                  		bsr.w	AnimateSprite
0000B83C 6000 0000                  		bra.w	DisplaySprite
0000B840                            ; ===========================================================================
0000B840                            
0000B840                            Ring_Delete:	; Routine 8
0000B840 6000 0000                  		bra.w	DeleteObject
0000B844                            
0000B844                            Ring_Attract:	; Routine $A
0000B844 4A38 F5C9                  		tst.b	(v_gshield).w
0000B848 6600                       		bne.s	@skip
0000B84A 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B84E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B854 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B85A 6000                       		bra.s	@display
0000B85C                            		
0000B85C                            	@skip:
0000B85C 323C 0030                  		move.w	#$30,d1	; horizontal
0000B860 3038 D008                  		move.w	(v_player+obX).w,d0
0000B864 B068 0008                  		cmp.w	obX(a0),d0
0000B868 6400                       		bcc.s	@a1
0000B86A 4441                       		neg.w	d1
0000B86C 4A68 0010                  		tst.w	obVelX(a0)
0000B870 6B00                       		bmi.s	@a2
0000B872 D241                       		add.w	d1,d1
0000B874 D241                       		add.w	d1,d1
0000B876 6000                       		bra.s	@a2
0000B878                            
0000B878                            	@a1:
0000B878 4A68 0010                  		tst.w	obVelX(a0)
0000B87C 6A00                       		bpl.s	@a2
0000B87E D241                       		add.w	d1,d1
0000B880 D241                       		add.w	d1,d1
0000B882                            
0000B882                            	@a2:
0000B882 D368 0010                  		add.w	d1,obVelX(a0)
0000B886 323C 0030                  		move.w	#$30,d1	; vertical
0000B88A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B88E B068 000C                  		cmp.w	obY(a0),d0
0000B892 6400                       		bcc.s	@a3
0000B894 4441                       		neg.w	d1
0000B896 4A68 0012                  		tst.w	obVelY(a0)
0000B89A 6B00                       		bmi.s	@a4
0000B89C D241                       		add.w	d1,d1
0000B89E D241                       		add.w	d1,d1
0000B8A0 6000                       		bra.s	@a4
0000B8A2                            
0000B8A2                            	@a3:
0000B8A2 4A68 0012                  		tst.w	obVelY(a0)
0000B8A6 6A00                       		bpl.s	@a4
0000B8A8 D241                       		add.w	d1,d1
0000B8AA D241                       		add.w	d1,d1
0000B8AC                            
0000B8AC                            	@a4:
0000B8AC D368 0012                  		add.w	d1,obVelY(a0)
0000B8B0 6100 0000                  		bsr.w	SpeedToPos
0000B8B4                            		
0000B8B4                            	@display:
0000B8B4 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B8BA 6000 0000                  		bra.w	DisplaySprite
0000B8BE                            
0000B8BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B8BE                            
0000B8BE                            
0000B8BE                            CollectRing:
0000B8BE 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B8C2 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B8C8 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B8CC 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B8D2 6500                       		bcs.s	@playsnd	; if yes, branch
0000B8D4 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B8DA 6700                       		beq.s	@got100
0000B8DC 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B8E2 6500                       		bcs.s	@playsnd	; if yes, branch
0000B8E4 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B8EA 6600                       		bne.s	@playsnd
0000B8EC                            
0000B8EC                            	@got100:
0000B8EC 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B8F0 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B8F4 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B8F8                            		
0000B8F8                            
0000B8F8                            	@playsnd:
0000B8F8 4EF9 0000 0FCC             		jmp	(PlaySound_Special).l
0000B8FE                            ; End of function CollectRing
0000B8FE                            
0000B8FE                            ; ===========================================================================
0000B8FE                            ; ---------------------------------------------------------------------------
0000B8FE                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B8FE                            ; ---------------------------------------------------------------------------
0000B8FE                            
0000B8FE                            RingLoss:
0000B8FE 7000                       		moveq	#0,d0
0000B900 1028 0024                  		move.b	obRoutine(a0),d0
0000B904 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B908 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B90C                            ; ===========================================================================
0000B90C 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B90E 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B910 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B912 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B914 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B916                            ; ===========================================================================
0000B916                            
0000B916                            RLoss_Count:	; Routine 0
0000B916 2248                       		movea.l	a0,a1
0000B918 7A00                       		moveq	#0,d5
0000B91A 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B91E 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B924 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B926 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B92A 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B930 6700                               beq.s   @cont                       ; if not, branch
0000B932 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B938 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B93A                            @cont:
0000B93A BA40                               cmp.w   d0,d5
0000B93C 6500                               bcs.s   @belowmax
0000B93E 3A00                               move.w  d0,d5
0000B940                            
0000B940                            @belowmax:
0000B940 5345                               subq.w  #1,d5
0000B942 383C 0288                          move.w  #$288,d4
0000B946 6000                       		bra.s	@makerings
0000B948                            ; ===========================================================================
0000B948                            
0000B948                            	@loop:
0000B948 6100 0000                  		bsr.w	FindFreeObj
0000B94C 6600 0000                  		bne.w	@resetcounter
0000B950                            
0000B950                            @makerings:
0000B950 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B954 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B958 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B95E 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B964 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B96A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B970 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B978 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B97E 137C 0004 0001             		move.b	#4,obRender(a1)
0000B984 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B98A 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B990 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B994 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B996 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B99A BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B99E 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B9A0 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B9A2 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B9A4                            @skiphalvingvel:
0000B9A4 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000B9A8 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000B9AC 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000B9B0                            
0000B9B0                            @resetcounter:
0000B9B0 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000B9B6 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000B9BC 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000B9C2 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B9C4 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000B9C8 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000B9D6                            
0000B9D6                            RLoss_Bounce:	; Routine 2
0000B9D6 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000B9DC 6100 0000                  		bsr.w	SpeedToPos
0000B9E0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B9E6 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B9EA 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B9EC 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B9F0 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B9F4 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B9F6 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B9FC                            	@skipbounceslow:
0000B9FC 6B00                       		bmi.s	@chkdel
0000B9FE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BA02 D007                       		add.b	d7,d0
0000BA04 0200 0003                  		andi.b	#3,d0
0000BA08 6600                       		bne.s	@chkdel
0000BA0A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BA10 4A41                       		tst.w	d1
0000BA12 6A00                       		bpl.s	@chkdel
0000BA14 D368 000C                  		add.w	d1,obY(a0)
0000BA18 3028 0012                  		move.w	obVelY(a0),d0
0000BA1C E440                       		asr.w	#2,d0
0000BA1E 9168 0012                  		sub.w	d0,obVelY(a0)
0000BA22 4468 0012                  		neg.w	obVelY(a0)
0000BA26                            
0000BA26                            	@chkdel:
0000BA26 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BA2A 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BA2E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BA32 0640 00E0                  		addi.w	#$E0,d0
0000BA36 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BA3A 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BA3E 4A38 F5C9                  		tst.b	(v_gshield).w
0000BA42 6700                       		beq.s	@skip
0000BA44 4A28 0001                  		tst.b	obRender(a0)
0000BA48 6A00                       		bpl.s	@skip
0000BA4A                            		
0000BA4A 43F8 D000                  		lea (v_player).w,a1
0000BA4E                            		
0000BA4E 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BA52 9068 0008                  		sub.w	obX(a0),d0
0000BA56 6A00                       		bpl.s	@a1
0000BA58 4440                       		neg.w	d0
0000BA5A                            		
0000BA5A                            	@a1:
0000BA5A 0C40 00A0                  		cmpi.w	#$A0,d0
0000BA5E 6200                       		bhi.s	@skip
0000BA60                            		
0000BA60 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BA64 9068 000C                  		sub.w	obY(a0),d0
0000BA68 6A00                       		bpl.s	@a2
0000BA6A 4440                       		neg.w	d0
0000BA6C                            		
0000BA6C                            	@a2:
0000BA6C 0C40 00A0                  		cmpi.w	#$A0,d0
0000BA70 6200                       		bhi.s	@skip
0000BA72                            		
0000BA72 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BA78 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BA7C                            		
0000BA7C                            	@skip:		
0000BA7C 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BA80 D2FC 0080                          adda.w  #$80,a1
0000BA84 0C51 007E                          cmpi.w  #$7E,(a1)
0000BA88 6400                               bcc.s   @cont
0000BA8A 5451                               addq.w  #2,(a1)
0000BA8C D2D1                               adda.w  (a1),a1
0000BA8E 3288                               move.w  a0,(a1)
0000BA90                            		
0000BA90                            	@cont:
0000BA90 4E75                               rts		
0000BA92                            ; ===========================================================================
0000BA92                            
0000BA92                            RLoss_Collect:	; Routine 4
0000BA92 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA96 117C 0000 0020             		move.b	#0,obColType(a0)
0000BA9C 6100 FE20                  		bsr.w	CollectRing
0000BAA0                            
0000BAA0                            RLoss_Sparkle:	; Routine 6
0000BAA0 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BAA6 6100 0000                  		bsr.w	AnimateSprite
0000BAAA 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BAAE 0C51 007E                          cmpi.w  #$7E,(a1)
0000BAB2 6400                               bcc.s   @cont
0000BAB4 5451                               addq.w  #2,(a1)
0000BAB6 D2D1                               adda.w  (a1),a1
0000BAB8 3288                               move.w  a0,(a1)
0000BABA                            			
0000BABA                            	@cont:
0000BABA 4E75                               rts
0000BABC                            ; ===========================================================================
0000BABC                            
0000BABC                            RLoss_Delete:	; Routine 8
0000BABC 6000 0000                  		bra.w	DeleteObject
0000BAC0                            
0000BAC0                            ; ----------------------------------------------------------------------------------------------
0000BAC0                            ; Ring Spawn Array 
0000BAC0                            ; ----------------------------------------------------------------------------------------------
0000BAC0                            
0000BAC0 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BAD0 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BAE0 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BAF0 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BB00 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BB10 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BB20 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BB30 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BB40                                            even
0000BB40                            ; ===========================================================================
0000BB40                            ; -------------------------------------------------------------------------------------
0000BB40                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BB40                            ; -------------------------------------------------------------------------------------
0000BB40                            
0000BB40                            SpillRingData_Water:
0000BB40 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BB50 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BB60 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BB70 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BB80 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BB90 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BBA0 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BBB0 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BBC0                                            even
0000BBC0                            ; ===========================================================================				
0000BBC0                            ; ===========================================================================				
0000BBC0                            		include	"_incObj\4B Giant Ring.asm"
0000BBC0                            ; ---------------------------------------------------------------------------
0000BBC0                            ; Object 4B - giant ring for entry to special stage
0000BBC0                            ; ---------------------------------------------------------------------------
0000BBC0                            
0000BBC0                            GiantRing:
0000BBC0 7000                       		moveq	#0,d0
0000BBC2 1028 0024                  		move.b	obRoutine(a0),d0
0000BBC6 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BBCA 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BBCE                            ; ===========================================================================
0000BBCE 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BBD0 0000                       		dc.w GRing_Animate-GRing_Index
0000BBD2 0000                       		dc.w GRing_Collect-GRing_Index
0000BBD4 0000                       		dc.w GRing_Delete-GRing_Index
0000BBD6                            ; ===========================================================================
0000BBD6                            
0000BBD6                            GRing_Main:    ; Routine 0
0000BBD6 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BBDE 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BBE4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BBEA 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BBF0 4A28 0001                  		tst.b	obRender(a0)
0000BBF4 6A00                       		bpl.s	GRing_Animate
0000BBF6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BBFC 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BC00 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BC06 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BC08                            
0000BC08 4E75                       		rts    
0000BC0A                            ; ===========================================================================
0000BC0A                            
0000BC0A                            GRing_Okay:
0000BC0A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC0E 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BC14 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BC1A 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BC20                            
0000BC20                            GRing_Animate:	; Routine 2
0000BC20 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BC44 6000 0000                  		bra.w	DisplaySprite
0000BC48                            ; ===========================================================================
0000BC48                            
0000BC48                            GRing_Collect:	; Routine 4
0000BC48 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BC4C 117C 0000 0020             		move.b	#0,obColType(a0)
0000BC52 6100 0000                  		bsr.w	FindFreeObj
0000BC56 6600 0000                  		bne.w	GRing_PlaySnd
0000BC5A 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BC5E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BC64 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BC6A 2348 003C                  		move.l	a0,$3C(a1)
0000BC6E 3038 D008                  		move.w	(v_player+obX).w,d0
0000BC72 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BC76 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BC78 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BC7E 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BC84 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BC8A                            		
0000BC8A                            GRing_PlaySnd:
0000BC94 608A                       		bra.s	GRing_Animate
0000BC96                            ; ===========================================================================
0000BC96                            
0000BC96                            GRing_Delete:	; Routine 6
0000BC96 6000 0000                  		bra.w	DeleteObject
0000BC96 6000 0000                  		bra.w	DeleteObject
0000BC9A                            		include	"_incObj\7C Ring Flash.asm"
0000BC9A                            ; ---------------------------------------------------------------------------
0000BC9A                            ; Object 7C - flash effect when	you collect the	giant ring
0000BC9A                            ; ---------------------------------------------------------------------------
0000BC9A                            
0000BC9A                            RingFlash:
0000BC9A 7000                       		moveq	#0,d0
0000BC9C 1028 0024                  		move.b	obRoutine(a0),d0
0000BCA0 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BCA4 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BCA8                            ; ===========================================================================
0000BCA8 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BCAA 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BCAC 0000                       		dc.w Flash_Delete-Flash_Index
0000BCAE                            ; ===========================================================================
0000BCAE                            
0000BCAE                            Flash_Main:	; Routine 0
0000BCAE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BCB2 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BCBA 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BCC0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BCC6 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BCCC 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BCD2 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BCD8                            
0000BCD8                            Flash_ChkDel:	; Routine 2
0000BCD8 6100                       		bsr.s	Flash_Collect
0000BCF8 6000 0000                  		bra.w	DisplaySprite
0000BCFC                            
0000BCFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BCFC                            
0000BCFC                            
0000BCFC                            Flash_Collect:
0000BCFC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BD00 6A00                       		bpl.s	locret_9F76
0000BD02 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BD08 5228 001A                  		addq.b	#1,obFrame(a0)
0000BD0C 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BD12 6400                       		bcc.s	Flash_End	; if yes, branch
0000BD14 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BD1A 6600                       		bne.s	locret_9F76	; if not, branch
0000BD1C 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BD20 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BD26 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BD2C 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BD32 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BD36 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BD3A                            
0000BD3A                            locret_9F76:
0000BD3A 4E75                       		rts	
0000BD3C                            ; ===========================================================================
0000BD3C                            
0000BD3C                            Flash_End:
0000BD3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD40 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BD46 588F                       		addq.l	#4,sp
0000BD48 4E75                       		rts	
0000BD4A                            ; End of function Flash_Collect
0000BD4A                            
0000BD4A                            ; ===========================================================================
0000BD4A                            
0000BD4A                            Flash_Delete:	; Routine 4
0000BD4A 6000 0000                  		bra.w	DeleteObject
0000BD4A 6000 0000                  		bra.w	DeleteObject
0000BD4E                            
0000BD4E                            		include	"_anim\Rings.asm"
0000BD4E                            ; ---------------------------------------------------------------------------
0000BD4E                            ; Animation script - ring
0000BD4E                            ; ---------------------------------------------------------------------------
0000BD4E 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BD50 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BD56                            		even
0000BD56                            		even
0000BD56                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BD56                            ; --------------------------------------------------------------------------------
0000BD56                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BD56                            ; --------------------------------------------------------------------------------
0000BD56                            
0000BD56                            SME_aSMQh:	
0000BD56 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BD5A 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BD5E 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BD62 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BD66 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BD6A 01                         SME_aSMQh_14:	dc.b 1	
0000BD6B F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BD70 01                         SME_aSMQh_1A:	dc.b 1	
0000BD71 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BD76 01                         SME_aSMQh_20:	dc.b 1	
0000BD77 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BD7C 01                         SME_aSMQh_26:	dc.b 1	
0000BD7D F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BD82 01                         SME_aSMQh_2C:	dc.b 1	
0000BD83 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BD88 01                         SME_aSMQh_32:	dc.b 1	
0000BD89 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BD8E 01                         SME_aSMQh_38:	dc.b 1	
0000BD8F F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BD94 01                         SME_aSMQh_3E:	dc.b 1	
0000BD95 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BD9A 01                         SME_aSMQh_44:	dc.b 1	
0000BD9B F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BDA0 01                         SME_aSMQh_4A:	dc.b 1	
0000BDA1 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BDA6                            		even
0000BDA6                            		even
0000BDA6                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BDA6                            ; ---------------------------------------------------------------------------
0000BDA6                            ; Sprite mappings - giant ring
0000BDA6                            ; ---------------------------------------------------------------------------
0000BDA6                            Map_GRing_internal:
0000BDA6 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BDA8 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BDAA 0000                       		dc.w byte_A036-Map_GRing_internal
0000BDAC 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BDAE 0A                         byte_9FDA:	dc.b $A
0000BDAF E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BDB4 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BDB9 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BDBE E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BDC3 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BDC8 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BDCD 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BDD2 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BDD7 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BDDC 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BDE1 08                         byte_A00D:	dc.b 8
0000BDE2 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BDE7 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BDEC E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BDF1 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BDF6 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BDFB 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BE00 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BE05 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BE0A 04                         byte_A036:	dc.b 4
0000BE0B E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BE10 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BE15 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BE1A 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BE1F 08                         byte_A04B:	dc.b 8
0000BE20 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BE25 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BE2A E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BE2F F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BE34 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BE39 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BE3E 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BE43 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BE48                            		even
0000BE48                            		even
0000BE48                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48                            ; Sprite mappings - flash effect when you collect the giant ring
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48                            Map_Flash_internal:
0000BE48 0000                       		dc.w byte_A084-Map_Flash_internal
0000BE4A 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BE4C 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BE4E 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BE50 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BE52 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BE54 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BE56 0000                       		dc.w byte_A103-Map_Flash_internal
0000BE58 02                         byte_A084:	dc.b 2
0000BE59 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BE5E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BE63 04                         byte_A08F:	dc.b 4
0000BE64 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BE69 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BE6E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BE73 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BE78 04                         byte_A0A4:	dc.b 4
0000BE79 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BE7E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BE83 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BE88 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BE8D 04                         byte_A0B9:	dc.b 4
0000BE8E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BE93 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BE98 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BE9D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BEA2 04                         byte_A0CE:	dc.b 4
0000BEA3 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BEA8 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BEAD 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BEB2 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BEB7 04                         byte_A0E3:	dc.b 4
0000BEB8 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BEBD E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BEC2 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BEC7 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BECC 02                         byte_A0F8:	dc.b 2
0000BECD E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BED2 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BED7 04                         byte_A103:	dc.b 4
0000BED8 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BEDD E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BEE2 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BEE7 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BEEC                            		even
0000BEEC                            		even
0000BEEC                            		include	"_incObj\26 Monitor.asm"
0000BEEC                            ; ---------------------------------------------------------------------------
0000BEEC                            ; Object 26 - monitors
0000BEEC                            ; ---------------------------------------------------------------------------
0000BEEC                            
0000BEEC                            Monitor:
0000BEEC 7000                       		moveq	#0,d0
0000BEEE 1028 0024                  		move.b	obRoutine(a0),d0
0000BEF2 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BEF6 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BEFA                            ; ===========================================================================
0000BEFA 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BEFC 0000                       		dc.w Mon_Solid-Mon_Index
0000BEFE 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BF00 0000                       		dc.w Mon_Animate-Mon_Index
0000BF02 0000                       		dc.w Mon_Display-Mon_Index
0000BF04                            ; ===========================================================================
0000BF04                            
0000BF04                            Mon_Main:	; Routine 0
0000BF04 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF08 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BF0E 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BF14 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BF1C 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BF22 117C 0004 0001             		move.b	#4,obRender(a0)
0000BF28 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BF2E 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BF34 45F8 FC00                  		lea	(v_objstate).w,a2
0000BF38 7000                       		moveq	#0,d0
0000BF3A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BF3E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BF44 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BF4A 6700                       		beq.s	@notbroken	; if not, branch
0000BF4C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BF52 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BF58 4E75                       		rts	
0000BF5A                            ; ===========================================================================
0000BF5A                            
0000BF5A                            	@notbroken:
0000BF5A 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BF60 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BF66                            
0000BF66                            Mon_Solid:	; Routine 2
0000BF66 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BF6A 6700                       		beq.s	@normal		; if not, branch
0000BF6C 5500                       		subq.b	#2,d0
0000BF6E 6600                       		bne.s	@fall
0000BF70                            
0000BF70                            		; 2nd Routine 2
0000BF70 7200                       		moveq	#0,d1
0000BF72 1228 0014                  		move.b	obActWid(a0),d1
0000BF76 0641 000B                  		addi.w	#$B,d1
0000BF7A 6100 D000                  		bsr.w	ExitPlatform
0000BF7E 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BF84 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BF88 4228 0025                  		clr.b	ob2ndRout(a0)
0000BF8C 6000 0000                  		bra.w	Mon_Animate
0000BF90                            ; ===========================================================================
0000BF90                            
0000BF90                            	@ontop:
0000BF90 363C 0010                  		move.w	#$10,d3
0000BF94 3428 0008                  		move.w	obX(a0),d2
0000BF98 6100 D540                  		bsr.w	MvSonicOnPtfm
0000BF9C 6000 0000                  		bra.w	Mon_Animate
0000BFA0                            ; ===========================================================================
0000BFA0                            
0000BFA0                            @fall:		; 2nd Routine 4
0000BFA0 6100 0000                  		bsr.w	ObjectFall
0000BFA4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BFAA 4A41                       		tst.w	d1
0000BFAC 6A00 0000                  		bpl.w	Mon_Animate
0000BFB0 D368 000C                  		add.w	d1,obY(a0)
0000BFB4 4268 0012                  		clr.w	obVelY(a0)
0000BFB8 4228 0025                  		clr.b	ob2ndRout(a0)
0000BFBC 6000 0000                  		bra.w	Mon_Animate
0000BFC0                            ; ===========================================================================
0000BFC0                            
0000BFC0                            @normal:	; 2nd Routine 0
0000BFC0 323C 001A                  		move.w	#$1A,d1
0000BFC4 343C 000F                  		move.w	#$F,d2
0000BFC8 6100 0000                  		bsr.w	Mon_SolidSides
0000BFCC 6700 0000                  		beq.w	loc_A25C
0000BFD0 4A69 0012                  		tst.w	obVelY(a1)
0000BFD4 6B00                       		bmi.s	loc_A20A
0000BFD6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000BFDC 6700                       		beq.s	loc_A25C	; if yes, branch
0000BFDE 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000BFE4 6700                       		beq.s	loc_A25C	; if yes, branch
0000BFE6 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000BFEC 6700                       		beq.s	loc_A25C	; if yes, branch
0000BFEE                            
0000BFEE                            loc_A20A:
0000BFEE 4A41                       		tst.w	d1
0000BFF0 6A00                       		bpl.s	loc_A220
0000BFF2 9769 000C                  		sub.w	d3,obY(a1)
0000BFF6 6100 CE72                  		bsr.w	loc_74AE
0000BFFA 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C000 6000 0000                  		bra.w	Mon_Animate
0000C004                            ; ===========================================================================
0000C004                            
0000C004                            loc_A220:
0000C004 4A40                       		tst.w	d0
0000C006 6700 0000                  		beq.w	loc_A246
0000C00A 6B00                       		bmi.s	loc_A230
0000C00C 4A69 0010                  		tst.w	obVelX(a1)
0000C010 6B00                       		bmi.s	loc_A246
0000C012 6000                       		bra.s	loc_A236
0000C014                            ; ===========================================================================
0000C014                            
0000C014                            loc_A230:
0000C014 4A69 0010                  		tst.w	obVelX(a1)
0000C018 6A00                       		bpl.s	loc_A246
0000C01A                            
0000C01A                            loc_A236:
0000C01A 9169 0008                  		sub.w	d0,obX(a1)
0000C01E 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C024 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C02A                            
0000C02A                            loc_A246:
0000C02A 0829 0001 0022             		btst	#1,obStatus(a1)
0000C030 6600                       		bne.s	loc_A26A
0000C032 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C038 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C03E 6000                       		bra.s	Mon_Animate
0000C040                            ; ===========================================================================
0000C040                            
0000C040                            loc_A25C:
0000C040 0828 0005 0022             		btst	#5,obStatus(a0)
0000C046 6700                       		beq.s	Mon_Animate
0000C048 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C04E 6700                       		beq.s	loc_A26A	; if so, branch
0000C050 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C056                            
0000C056                            loc_A26A:
0000C056 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C05C 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C062                            
0000C062                            Mon_Animate:	; Routine 6
0000C062 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C068 6100 0000                  		bsr.w	AnimateSprite
0000C06C                            
0000C06C                            Mon_Display:	; Routine 8
0000C06C 6100 0000                  		bsr.w	DisplaySprite
0000C08E 4E75                       		rts	
0000C090                            ; ===========================================================================
0000C090                            
0000C090                            Mon_BreakOpen:	; Routine 4
0000C090 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C094 117C 0000 0020             		move.b	#0,obColType(a0)
0000C09A 6100 0000                  		bsr.w	FindFreeObj
0000C09E 6600                       		bne.s	Mon_Explode
0000C0A0 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C0A4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C0AA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C0B0 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C0B6                            
0000C0B6                            Mon_Explode:
0000C0B6 6100 0000                  		bsr.w	FindFreeObj
0000C0BA 6600                       		bne.s	@fail
0000C0BC 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C0C0 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C0C4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C0CA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C0D0                            
0000C0D0                            	@fail:
0000C0D0 45F8 FC00                  		lea	(v_objstate).w,a2
0000C0D4 7000                       		moveq	#0,d0
0000C0D6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C0DA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C0E0 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C0E6 6000 0000                  		bra.w	DisplaySprite
0000C0E6 6000 0000                  		bra.w	DisplaySprite
0000C0EA                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C0EA                            ; ---------------------------------------------------------------------------
0000C0EA                            ; Object 2E - contents of monitors
0000C0EA                            ; ---------------------------------------------------------------------------
0000C0EA                            
0000C0EA                            PowerUp:
0000C0EA 7000                       		moveq	#0,d0
0000C0EC 1028 0024                  		move.b	obRoutine(a0),d0
0000C0F0 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C0F4 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C0F8 6000 0000                  		bra.w	DisplaySprite
0000C0FC                            ; ===========================================================================
0000C0FC 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C0FE 0000                       		dc.w Pow_Move-Pow_Index
0000C100 0000                       		dc.w Pow_Delete-Pow_Index
0000C102                            ; ===========================================================================
0000C102                            
0000C102                            Pow_Main:	; Routine 0
0000C102 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C106 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C10C 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C112 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C118 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C11E 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C124 7000                       		moveq	#0,d0
0000C126 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C12A 5400                       		addq.b	#2,d0
0000C12C 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C130 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C136 D000                       		add.b	d0,d0
0000C138 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C13C 5249                       		addq.w	#1,a1
0000C13E 2149 0004                  		move.l	a1,obMap(a0)
0000C142                            
0000C142                            Pow_Move:	; Routine 2
0000C142 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C146 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C14A 6100 0000                  		bsr.w	SpeedToPos
0000C14E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C154 4E75                       		rts	
0000C156                            ; ===========================================================================
0000C156                            
0000C156                            Pow_Checks:
0000C156 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C15A 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C160                            
0000C160                            Pow_ChkEggman:
0000C160 1028 001C                  		move.b	obAnim(a0),d0
0000C164 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C168 6600                       		bne.s	Pow_ChkSonic
0000C16A                            		
0000C16A 4EF9 0000 0000             		jmp	Spik_Hurt
0000C170                            		
0000C170 4E75                       		rts
0000C172                            ; ===========================================================================
0000C172                            
0000C172                            Pow_ChkSonic:
0000C172 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C176 6600                       		bne.s	Pow_ChkShoes
0000C178                            
0000C178                            	ExtraLife:
0000C178 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C17C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C18A                            
0000C18A                            ; ===========================================================================
0000C18A                            
0000C18A                            Pow_ChkShoes:
0000C18A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C18E 6600                       		bne.s	Pow_ChkShield
0000C190                            
0000C190 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C196 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C19C 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C1A2 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C1A8 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C1AE 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C1B2 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C1B4 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C1BA 6300                       			bls.s	Pow_NoMus
0000C1C6                            ; ===========================================================================
0000C1C6                            
0000C1C6                            Pow_NoMus:
0000C1C6 4E75                       		rts	
0000C1C8                            ; ===========================================================================
0000C1C8                            
0000C1C8                            Pow_ChkShield:
0000C1C8 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C1CC 6600                       		bne.s	Pow_ChkInvinc
0000C1CE                            
0000C1CE 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C1D4 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C1DA 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C1E0 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C1E6 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C1F6                            ; ===========================================================================
0000C1F6                            
0000C1F6                            Pow_ChkInvinc:
0000C1F6 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C1FA 6600                       		bne.s	Pow_ChkRings
0000C1FC                            
0000C1FC 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C202 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C208 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C20E 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C214 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C21A 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C220 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C226 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C22C 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C232 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C238 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C23C 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C23E 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C244 6300                       			bls.s	Pow_NoMusic
0000C250                            ; ===========================================================================
0000C250                            
0000C250                            Pow_NoMusic:
0000C250 4E75                       		rts	
0000C252                            ; ===========================================================================
0000C252                            
0000C252                            Pow_ChkRings:
0000C252 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C256 6600                       		bne.s	Pow_ChkS
0000C258                            
0000C258 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C25E 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C264 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C26A 6500                       		bcs.s	Pow_RingSound
0000C26C 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C272 6700 FF04                  		beq.w	ExtraLife
0000C276 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C27C 6500                       		bcs.s	Pow_RingSound
0000C27E 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C284 6700 FEF2                  		beq.w	ExtraLife
0000C288                            
0000C288                            	Pow_RingSound:
0000C292                            ; ===========================================================================
0000C292                            
0000C292                            Pow_ChkS:
0000C292 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C296 6600                       		bne.s	Pow_ChkSRing
0000C298                            		
0000C298 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C29E 6700                       		beq.s	PowS2	; if yes, branch
0000C2A0 0404 003B                  		subi.b	#$3B,d4
0000C2A4 7000                       		moveq	#0,d0
0000C2A6 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C2AC 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C2B2 6000                       		bra.s	PowSPlay
0000C2B4                            
0000C2B4                            PowS2:
0000C2B4 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C2BA 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C2C0 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C2C6 6500                       		bcs.s	PowSPlay
0000C2C8 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C2CE 6700 FEA8                  		beq.w	ExtraLife
0000C2D2 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C2D8 6500                       		bcs.s	PowSPlay
0000C2DA 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C2E0 6700 FE96                  		beq.w	ExtraLife	
0000C2E4                            
0000C2E4                            PowSPlay:
0000C2EE                            
0000C2EE                            		
0000C2EE                            
0000C2EE                            
0000C2EE                            Pow_ChkSRing:
0000C2EE 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C2F2 6600                       		bne.s	Pow_ChkRShield
0000C2F4                            
0000C2F4                            		
0000C2F4 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C2FA 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C300 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C306 6500                       		bcs.s	Pow_ChkSRingSound
0000C308 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C30E 6700 FE68                  		beq.w	ExtraLife
0000C312 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C318 6500                       		bcs.s	Pow_ChkSRingSound
0000C31A 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C320 6700 FE56                  		beq.w	ExtraLife	
0000C324                            
0000C324                            Pow_ChkSRingSound:
0000C32E                            
0000C32E                            
0000C32E                            Pow_ChkRShield:
0000C32E 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C332 6600                       		bne.s	Pow_ChkGShield
0000C334                            
0000C334 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C33A 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C340 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C346 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C34C 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C35C                            
0000C35C                            Pow_ChkGShield:
0000C35C 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C360 6600                       		bne.s	Pow_ChkSpShield
0000C362                            
0000C362                            
0000C362 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C368 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C36E 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C374 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C37A 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C380                            		
0000C380 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C386 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C38C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C392 6500                       		bcs.s	Pow_ChkGSound
0000C394 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C39A 6700 FDDC                  		beq.w	ExtraLife
0000C39E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C3A4 6500                       		bcs.s	Pow_ChkGSound
0000C3A6 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C3AC 6700 FDCA                  		beq.w	ExtraLife	
0000C3B0                            
0000C3B0                            Pow_ChkGSound:		
0000C3BA                            
0000C3BA                            Pow_ChkSpShield:
0000C3BA 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C3BE 6600                       		bne.s	Pow_ChkEnd
0000C3C0                            
0000C3C0 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C3C6 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C3CC 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C3D2 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C3D8 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C3E8 4E71                       		nop
0000C3EA                            
0000C3EA                            Pow_ChkEnd:
0000C3EA 4E75                       		rts
0000C3EC                            ; ===========================================================================
0000C3EC                            
0000C3EC                            Pow_Delete:	; Routine 4
0000C3EC 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C3F0 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C3F4 4E75                       		rts	
0000C3F4 4E75                       		rts	
0000C3F6                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C3F6                            ; ---------------------------------------------------------------------------
0000C3F6                            ; Subroutine to	make the sides of a monitor solid
0000C3F6                            ; ---------------------------------------------------------------------------
0000C3F6                            
0000C3F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3F6                            
0000C3F6                            
0000C3F6                            Mon_SolidSides:
0000C3F6 43F8 D000                  		lea	(v_player).w,a1
0000C3FA 3029 0008                  		move.w	obX(a1),d0
0000C3FE 9068 0008                  		sub.w	obX(a0),d0
0000C402 D041                       		add.w	d1,d0
0000C404 6B00                       		bmi.s	loc_A4E6
0000C406 3601                       		move.w	d1,d3
0000C408 D643                       		add.w	d3,d3
0000C40A B043                       		cmp.w	d3,d0
0000C40C 6200                       		bhi.s	loc_A4E6
0000C40E 1629 0016                  		move.b	obHeight(a1),d3
0000C412 4883                       		ext.w	d3
0000C414 D443                       		add.w	d3,d2
0000C416 3629 000C                  		move.w	obY(a1),d3
0000C41A 9668 000C                  		sub.w	obY(a0),d3
0000C41E D642                       		add.w	d2,d3
0000C420 6B00                       		bmi.s	loc_A4E6
0000C422 D442                       		add.w	d2,d2
0000C424 B642                       		cmp.w	d2,d3
0000C426 6400                       		bcc.s	loc_A4E6
0000C428 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C42C 6B00                       		bmi.s	loc_A4E6
0000C42E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C434 6400                       		bcc.s	loc_A4E6
0000C436 4A78 FE08                  		tst.w	(v_debuguse).w
0000C43A 6600                       		bne.s	loc_A4E6
0000C43C B240                       		cmp.w	d0,d1
0000C43E 6400                       		bcc.s	loc_A4DC
0000C440 D241                       		add.w	d1,d1
0000C442 9041                       		sub.w	d1,d0
0000C444                            
0000C444                            loc_A4DC:
0000C444 0C43 0010                  		cmpi.w	#$10,d3
0000C448 6500                       		bcs.s	loc_A4EA
0000C44A                            
0000C44A                            loc_A4E2:
0000C44A 7201                       		moveq	#1,d1
0000C44C 4E75                       		rts	
0000C44E                            ; ===========================================================================
0000C44E                            
0000C44E                            loc_A4E6:
0000C44E 7200                       		moveq	#0,d1
0000C450 4E75                       		rts	
0000C452                            ; ===========================================================================
0000C452                            
0000C452                            loc_A4EA:
0000C452 7200                       		moveq	#0,d1
0000C454 1228 0014                  		move.b	obActWid(a0),d1
0000C458 5841                       		addq.w	#4,d1
0000C45A 3401                       		move.w	d1,d2
0000C45C D442                       		add.w	d2,d2
0000C45E D269 0008                  		add.w	obX(a1),d1
0000C462 9268 0008                  		sub.w	obX(a0),d1
0000C466 6BE2                       		bmi.s	loc_A4E2
0000C468 B242                       		cmp.w	d2,d1
0000C46A 64DE                       		bcc.s	loc_A4E2
0000C46C 72FF                       		moveq	#-1,d1
0000C46E 4E75                       		rts	
0000C470                            ; End of function Obj26_SolidSides
0000C470                            ; End of function Obj26_SolidSides
0000C470                            		include	"_anim\Monitor.asm"
0000C470                            ; ---------------------------------------------------------------------------
0000C470                            ; Animation script - monitors
0000C470                            ; ---------------------------------------------------------------------------
0000C470 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C476 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C47C 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C482 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C488 0000                       		dc.w @spshield-Ani_Monitor
0000C48A                            		
0000C48A 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C490 00                         		even
0000C490 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C49C 00                         		even
0000C49C 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C4A8 00                         		even
0000C4A8 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C4B4 00                         		even
0000C4B4 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C4C0 00                         		even
0000C4C0 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C4CC 00                         		even
0000C4CC 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C4D8 00                         		even
0000C4D8 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C4E4 00                         		even
0000C4E4 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C4F0 00                         		even
0000C4F0 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C4F8 00                         		even
0000C4F8 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C504 00                         		even
0000C504 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C510 00                         		even
0000C510 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C51C 00                         		even
0000C51C 00                         		even
0000C51C                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C51C                            ; --------------------------------------------------------------------------------
0000C51C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C51C                            ; --------------------------------------------------------------------------------
0000C51C                            
0000C51C                            SME_YYb7z:	
0000C51C 0000 0000                  		dc.w SME_YYb7z_1E-SME_YYb7z, SME_YYb7z_24-SME_YYb7z	
0000C520 0000 0000                  		dc.w SME_YYb7z_2F-SME_YYb7z, SME_YYb7z_3A-SME_YYb7z	
0000C524 0000 0000                  		dc.w SME_YYb7z_45-SME_YYb7z, SME_YYb7z_50-SME_YYb7z	
0000C528 0000 0000                  		dc.w SME_YYb7z_5B-SME_YYb7z, SME_YYb7z_66-SME_YYb7z	
0000C52C 0000 0000                  		dc.w SME_YYb7z_71-SME_YYb7z, SME_YYb7z_7C-SME_YYb7z	
0000C530 0000 0000                  		dc.w SME_YYb7z_87-SME_YYb7z, SME_YYb7z_92-SME_YYb7z	
0000C534 0000 0000                  		dc.w SME_YYb7z_AC-SME_YYb7z, SME_YYb7z_B7-SME_YYb7z	
0000C538 0000                       		dc.w SME_YYb7z_C2-SME_YYb7z	
0000C53A 01                         SME_YYb7z_1E:	dc.b 1	
0000C53B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C540 02                         SME_YYb7z_24:	dc.b 2	
0000C541 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C546 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C54B 02                         SME_YYb7z_2F:	dc.b 2	
0000C54C F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C551 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C556 02                         SME_YYb7z_3A:	dc.b 2	
0000C557 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C55C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C561 02                         SME_YYb7z_45:	dc.b 2	
0000C562 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C567 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C56C 02                         SME_YYb7z_50:	dc.b 2	
0000C56D F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C572 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C577 02                         SME_YYb7z_5B:	dc.b 2	
0000C578 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C57D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C582 02                         SME_YYb7z_66:	dc.b 2	
0000C583 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C588 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C58D 02                         SME_YYb7z_71:	dc.b 2	
0000C58E F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C593 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C598 02                         SME_YYb7z_7C:	dc.b 2	
0000C599 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C59E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5A3 02                         SME_YYb7z_87:	dc.b 2	
0000C5A4 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C5A9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5AE 05                         SME_YYb7z_92:	dc.b 5	
0000C5AF 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C5B4 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C5B9 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C5BE 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C5C3 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C5C8 02                         SME_YYb7z_AC:	dc.b 2	
0000C5C9 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C5CE F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5D3 02                         SME_YYb7z_B7:	dc.b 2	
0000C5D4 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C5D9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5DE 02                         SME_YYb7z_C2:	dc.b 2	
0000C5DF F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C5E4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C5EA 00                         		even
0000C5EA 00                         		even
0000C5EA                            
0000C5EA                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            ; Object 0E - Sonic on the title screen
0000C5EA                            ; ---------------------------------------------------------------------------
0000C5EA                            
0000C5EA                            TitleSonic:
0000C5EA 7000                       		moveq	#0,d0
0000C5EC 1028 0024                  		move.b	obRoutine(a0),d0
0000C5F0 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C5F4 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C5F8                            ; ===========================================================================
0000C5F8 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C5FA 0000                       		dc.w TSon_Delay-TSon_Index
0000C5FC 0000                       		dc.w TSon_Move-TSon_Index
0000C5FE 0000                       		dc.w TSon_Animate-TSon_Index
0000C600                            ; ===========================================================================
0000C600                            
0000C600                            TSon_Main:	; Routine 0
0000C600 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C604 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C60A 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C610 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C618 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C61E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C624 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C62A 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C630 6100 0000                  		bsr.w	AnimateSprite
0000C634                            
0000C634                            TSon_Delay:	;Routine 2
0000C634 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C638 6A00                       		bpl.s	@wait		; if time remains, branch
0000C63A 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C63E 6000 0000                  		bra.w	DisplaySprite
0000C642                            
0000C642                            	@wait:
0000C642 4E75                       		rts	
0000C644                            ; ===========================================================================
0000C644                            
0000C644                            TSon_Move:	; Routine 4
0000C644 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C648 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C64E 6600                       		bne.s	@display	; if not, branch
0000C650 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C654                            
0000C654                            	@display:
0000C654 6000 0000                  		bra.w	DisplaySprite
0000C658                            
0000C658 4E75                       		rts	
0000C65A                            ; ===========================================================================
0000C65A                            
0000C65A                            TSon_Animate:	; Routine 6
0000C65A 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C660 6100 0000                  		bsr.w	AnimateSprite
0000C664 6000 0000                  		bra.w	DisplaySprite
0000C668                            
0000C668 4E75                       		rts	
0000C668 4E75                       		rts	
0000C66A                            		include	"_incObj\0F Press Start and TM.asm"
0000C66A                            ; ---------------------------------------------------------------------------
0000C66A                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C66A                            ; ---------------------------------------------------------------------------
0000C66A                            
0000C66A                            PSBTM:
0000C66A 7000                       		moveq	#0,d0
0000C66C 1028 0024                  		move.b	obRoutine(a0),d0
0000C670 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C674 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C678 6000 0000                  		bra.w	DisplaySprite
0000C67C                            ; ===========================================================================
0000C67C 0000                       Obj0F_Index:	dc.w Obj0F_Init-Obj0F_Index	
0000C67E 0000                       		dc.w Obj0F_Main-Obj0F_Index
0000C680 0000                       		dc.w MENURTS-Obj0F_Index	
0000C682                            ; ===========================================================================
0000C682                            Obj0F_Init:
0000C682 5428 0024                  	addq.b	#2,obRoutine(a0) ; => Obj0F_Main
0000C686 217C 0000 0000 0004            move.l   #Map_TitleMenu,4(a0)
0000C68E 317C 0101 0008                 move.w   #$101,8(a0)
0000C694 317C 0151 000A                 move.w   #$151,$A(a0)
0000C69A 317C 056F 0002             	move.w	#$56F,2(a0)
0000C6A0 0238 0001 FFB0             	andi.b	#1,(Title_screen_option).w
0000C6A6 1178 FFB0 001A             	move.b	(Title_screen_option).w,mapping_frame(a0)
0000C6AC                            
0000C6AC                            
0000C6AC                            Obj0F_Main:
0000C6AC 7400                             moveq   #0,d2
0000C6AE 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C6B2 1038 F605                        move.b   ($FFFFF605).w,d0
0000C6B6 0800 0000                        btst   #0,d0
0000C6BA 6700                             beq.s   MAIN2
0000C6BC 5302                             subq.b   #1,d2
0000C6BE 6400                             bcc.s   MAIN2
0000C6C0 143C 0001                        move.b   #1,d2
0000C6C4                            
0000C6C4                            MAIN2:
0000C6C4 0800 0001                        btst   #1,d0
0000C6C8 6700                             beq.s   MAIN3
0000C6CA 5202                             addq.b   #1,d2
0000C6CC 0C02 0002                        cmpi.b   #2,d2
0000C6D0 6500                             blo.s   MAIN3
0000C6D2 7400                             moveq   #0,d2
0000C6D4                            
0000C6D4                            MAIN3:
0000C6D4 1142 001A                        move.b   d2,$1A(a0)
0000C6D8 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C6DC 0200 0003                        andi.b   #3,d0
0000C6E0 6700                             beq.s   MENURTS   ; rts
0000C6E2 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C6E6 4EB8 0FCC                        jsr   PlaySound_Special
0000C6EA                            
0000C6EA                            MENURTS:
0000C6EA 4E75                             rts															 
0000C6EC                            ; ===========================================================================
0000C6EC                            
0000C6EC                            Map_TitleMenu:
0000C6EC                            		include "_maps\Title Screen Menu.asm"		
0000C6EC                            ; --------------------------------------------------------------------------------
0000C6EC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C6EC                            ; --------------------------------------------------------------------------------
0000C6EC                            
0000C6EC                            SME_g2Qfx:	
0000C6EC 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C6F0 10                         SME_g2Qfx_6:	dc.b $10	
0000C6F1 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C6F6 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C6FB E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C700 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C705 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C70A E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C70F E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C714 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C719 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C71E F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C723 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C728 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C72D F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C732 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C737 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C73C E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C741 10                         SME_g2Qfx_6B:	dc.b $10	
0000C742 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C747 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C74C E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C751 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C756 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C75B E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C760 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C765 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C76A F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C76F F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C774 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C779 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C77E F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C783 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C788 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C78D F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C792                            		even
0000C792                            		even
0000C792                            		even
0000C792                            
0000C792                            		include	"_anim\Title Screen Sonic.asm"
0000C792                            ; ---------------------------------------------------------------------------
0000C792                            ; Animation script - Sonic on the title screen
0000C792                            ; ---------------------------------------------------------------------------
0000C792 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C794 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C7A0 00                         		even
0000C7A0 00                         		even
0000C7A0                            		include	"_anim\Press Start and TM.asm"
0000C7A0                            ; ---------------------------------------------------------------------------
0000C7A0                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C7A0                            ; ---------------------------------------------------------------------------
0000C7A0 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C7A2 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C7A6                            		even
0000C7A6                            		even
0000C7A6                            
0000C7A6                            		include	"_incObj\sub AnimateSprite.asm"
0000C7A6                            ; ---------------------------------------------------------------------------
0000C7A6                            ; Subroutine to	animate	a sprite using an animation script
0000C7A6                            ; ---------------------------------------------------------------------------
0000C7A6                            
0000C7A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C7A6                            
0000C7A6                            
0000C7A6                            AnimateSprite:
0000C7A6 7000                       		moveq	#0,d0
0000C7A8 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C7AC B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C7B0 6700                       		beq.s	Anim_Run	; if not, branch
0000C7B2                            
0000C7B2 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C7B6 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C7BC 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C7C2                            
0000C7C2                            Anim_Run:
0000C7C2 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C7C6 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C7C8 D040                       		add.w	d0,d0
0000C7CA D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C7CE 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C7D2 7200                       		moveq	#0,d1
0000C7D4 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C7D8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C7DC 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C7DE                            
0000C7DE                            Anim_Next:
0000C7DE 1200                       		move.b	d0,d1
0000C7E0 0200 001F                  		andi.b	#$1F,d0
0000C7E4 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C7E8 1028 0022                  		move.b	obStatus(a0),d0
0000C7EC E719                       		rol.b	#3,d1
0000C7EE B101                       		eor.b	d0,d1
0000C7F0 0201 0003                  		andi.b	#3,d1
0000C7F4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C7FA 8328 0001                  		or.b	d1,obRender(a0)
0000C7FE 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C802                            
0000C802                            Anim_Wait:
0000C802 4E75                       		rts	
0000C804                            ; ===========================================================================
0000C804                            
0000C804                            Anim_End_FF:
0000C804 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C806 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C808 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C80E 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C812 60CA                       		bra.s	Anim_Next
0000C814                            ; ===========================================================================
0000C814                            
0000C814                            Anim_End_FE:
0000C814 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C816 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C818 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C81C 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C820 9200                       		sub.b	d0,d1
0000C822 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C826 60B6                       		bra.s	Anim_Next
0000C828                            ; ===========================================================================
0000C828                            
0000C828                            Anim_End_FD:
0000C828 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C82A 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C82C 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C832                            
0000C832                            Anim_End_FC:
0000C832 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C834 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C836 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C83A                            
0000C83A                            Anim_End_FB:
0000C83A 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C83C 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C83E 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C844 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C848                            
0000C848                            Anim_End_FA:
0000C848 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C84A 6600                       		bne.s	Anim_End	; if not, branch
0000C84C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C850                            
0000C850                            Anim_End:
0000C850 4E75                       		rts	
0000C852                            ; End of function AnimateSprite
0000C852                            ; End of function AnimateSprite
0000C852                            
0000C852                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C852                            ; ---------------------------------------------------------------------------
0000C852                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C852                            ; ---------------------------------------------------------------------------
0000C852                            Map_PSB_internal:
0000C852 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C854 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C856 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C858 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C85A 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C85B 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C860 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C865 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C86A 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C86F 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C874 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C879 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C87A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C87F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C884 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C889 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C88E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C893 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C898 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C89D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8A2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8A7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C8AC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8B1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8B6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8BB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8C0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8C5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8CA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8CF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8D4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8D9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C8DE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8E3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8E8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8ED F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8F2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8F7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C8FC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C901 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C906 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C90B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C910 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C911 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C916                            		even
0000C916                            		even
0000C916                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C916                            ; ---------------------------------------------------------------------------
0000C916                            ; Sprite mappings - Sonic on the title screen
0000C916                            ; ---------------------------------------------------------------------------
0000C916                            Map_TSon_internal:
0000C916 0000                       		dc.w byte_A898-Map_TSon_internal
0000C918 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C91A 0000                       		dc.w byte_A917-Map_TSon_internal
0000C91C 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C91E 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C920 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C922 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C924 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C926 0A                         byte_A898:	dc.b $A
0000C927 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C92C 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C931 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C936 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C93B 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C940 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C945 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C94A 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C94F 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C954 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C959 0F                         byte_A8CB:	dc.b $F
0000C95A 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C95F 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C964 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C969 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C96E 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C973 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C978 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C97D 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C982 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C987 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C98C 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C991 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C996 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C99B 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C9A0 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C9A5 11                         byte_A917:	dc.b $11
0000C9A6 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C9AB 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C9B0 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C9B5 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C9BA 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C9BF 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C9C4 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C9C9 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C9CE 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C9D3 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C9D8 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C9DD 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C9E2 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C9E7 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C9EC 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C9F1 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C9F6 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C9FB 0D                         byte_A96D:	dc.b $D
0000C9FC 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CA01 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CA06 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CA0B 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CA10 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CA15 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CA1A 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CA1F 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CA24 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CA29 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CA2E 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CA33 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CA38 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CA3D 0B                         byte_A9AF:	dc.b $B
0000CA3E 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CA43 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CA48 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CA4D 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CA52 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CA57 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CA5C 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CA61 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CA66 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CA6B 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CA70 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CA75 13                         byte_A9E7:	dc.b $13
0000CA76 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CA7B 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CA80 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CA85 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CA8A 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CA8F 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CA94 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CA99 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CA9E 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CAA3 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CAA8 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CAAD 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CAB2 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CAB7 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CABC 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CAC1 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CAC6 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CACB 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CAD0 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CAD5 15                         byte_AA47:	dc.b $15
0000CAD6 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CADB 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CAE0 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CAE5 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CAEA 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CAEF 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CAF4 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CAF9 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CAFE 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB03 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB08 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB0D 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB12 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB17 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB1C 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB21 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB26 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB2B 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB30 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CB35 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CB3A 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CB3F 16                         byte_AAB1:	dc.b $16
0000CB40 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CB45 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CB4A 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CB4F 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CB54 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CB59 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CB5E 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CB63 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CB68 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CB6D 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CB72 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CB77 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CB7C 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CB81 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CB86 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CB8B 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CB90 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CB95 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CB9A 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CB9F 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CBA4 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CBA9 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CBAE                            		even
0000CBAE                            		even
0000CBAE                            
0000CBAE                            		include	"_incObj\2B Chopper.asm"
0000CBAE                            ; ---------------------------------------------------------------------------
0000CBAE                            ; Object 2B - Chopper enemy (GHZ)
0000CBAE                            ; ---------------------------------------------------------------------------
0000CBAE                            
0000CBAE                            Chopper:
0000CBAE 7000                       		moveq	#0,d0
0000CBB0 1028 0024                  		move.b	obRoutine(a0),d0
0000CBB4 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CBB8 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CBBC 6000 0000                  		bra.w	RememberState
0000CBC0                            ; ===========================================================================
0000CBC0 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CBC2 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CBC4                            
0000CBC4 =00000030                  chop_origY:	equ $30
0000CBC4                            ; ===========================================================================
0000CBC4                            
0000CBC4                            Chop_Main:	; Routine 0
0000CBC4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CBC8 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CBD0 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CBD6 117C 0004 0001             		move.b	#4,obRender(a0)
0000CBDC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CBE2 117C 0009 0020             		move.b	#9,obColType(a0)
0000CBE8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CBEE 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CBF4 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CBFA                            
0000CBFA                            Chop_ChgSpeed:	; Routine 2
0000CBFA 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CC00 6100 FBA4                  		bsr.w	AnimateSprite
0000CC04 6100 0000                  		bsr.w	SpeedToPos
0000CC08 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CC0E 3028 0030                  		move.w	chop_origY(a0),d0
0000CC12 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CC16 6400                       		bcc.s	@chganimation	; if not, branch
0000CC18 3140 000C                  		move.w	d0,obY(a0)
0000CC1C 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CC22                            
0000CC22                            	@chganimation:
0000CC22 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CC28 0440 00C0                  		subi.w	#$C0,d0
0000CC2C B068 000C                  		cmp.w	obY(a0),d0
0000CC30 6400                       		bcc.s	@nochg
0000CC32 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CC38 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CC3C 6B00                       		bmi.s	@nochg		; if not, branch
0000CC3E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CC44                            
0000CC44                            	@nochg:
0000CC44 4E75                       		rts	
0000CC44 4E75                       		rts	
0000CC46                            		include	"_anim\Chopper.asm"
0000CC46                            ; ---------------------------------------------------------------------------
0000CC46                            ; Animation script - Chopper enemy
0000CC46                            ; ---------------------------------------------------------------------------
0000CC46 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CC48 0000                       		dc.w @fast-Ani_Chop
0000CC4A 0000                       		dc.w @still-Ani_Chop
0000CC4C 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CC50 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CC54 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CC58 00                         		even
0000CC58 00                         		even
0000CC58                            Map_Chop:	include	"_maps\Chopper.asm"
0000CC58                            ; ---------------------------------------------------------------------------
0000CC58                            ; Sprite mappings - Chopper enemy (GHZ)
0000CC58                            ; ---------------------------------------------------------------------------
0000CC58                            Map_Chop_internal:
0000CC58 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CC5A 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CC5C 01                         @mouthshut:	dc.b 1
0000CC5D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CC62 01                         @mouthopen:	dc.b 1
0000CC63 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CC68                            		even
0000CC68                            		even
0000CC68                            		include	"_incObj\2C Jaws.asm"
0000CC68                            ; ---------------------------------------------------------------------------
0000CC68                            ; Object 2C - Jaws enemy (LZ)
0000CC68                            ; ---------------------------------------------------------------------------
0000CC68                            
0000CC68                            Jaws:
0000CC68 7000                       		moveq	#0,d0
0000CC6A 1028 0024                  		move.b	obRoutine(a0),d0
0000CC6E 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CC72 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CC76                            ; ===========================================================================
0000CC76 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CC78 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CC7A                            
0000CC7A =00000030                  jaws_timecount:	equ $30
0000CC7A =00000032                  jaws_timedelay:	equ $32
0000CC7A                            ; ===========================================================================
0000CC7A                            
0000CC7A                            Jaws_Main:	; Routine 0
0000CC7A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CC7E 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CC86 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CC8C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CC92 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CC98 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CC9E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CCA4 7000                       		moveq	#0,d0
0000CCA6 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CCAA ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CCAC 5340                       		subq.w	#1,d0
0000CCAE 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CCB2 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CCB6 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CCBC 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CCC2 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CCC4 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CCC8                            
0000CCC8                            Jaws_Turn:	; Routine 2
0000CCC8 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CCCC 6A00                       		bpl.s	@animate	; if time remains, branch
0000CCCE 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CCD4 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CCD8 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CCDE 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CCE4                            
0000CCE4                            	@animate:
0000CCE4 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CCEA 6100 FABA                  		bsr.w	AnimateSprite
0000CCEE 6100 0000                  		bsr.w	SpeedToPos
0000CCF2 6000 0000                  		bra.w	RememberState
0000CCF2 6000 0000                  		bra.w	RememberState
0000CCF6                            		include	"_anim\Jaws.asm"
0000CCF6                            ; ---------------------------------------------------------------------------
0000CCF6                            ; Animation script - Jaws enemy
0000CCF6                            ; ---------------------------------------------------------------------------
0000CCF6 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CCF8 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CCFE                            		even
0000CCFE                            		even
0000CCFE                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CCFE                            ; --------------------------------------------------------------------------------
0000CCFE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CCFE                            ; --------------------------------------------------------------------------------
0000CCFE                            
0000CCFE                            SME_O5C0c:	
0000CCFE 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CD02 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CD06 02                         SME_O5C0c_8:	dc.b 2	
0000CD07 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CD0C F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CD11 02                         SME_O5C0c_13:	dc.b 2	
0000CD12 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CD17 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CD1C 02                         SME_O5C0c_1E:	dc.b 2	
0000CD1D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CD22 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CD27 02                         SME_O5C0c_29:	dc.b 2	
0000CD28 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CD2D F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CD32                            		even
0000CD32                            		even
0000CD32                            		include	"_incObj\2D Burrobot.asm"
0000CD32                            ; ---------------------------------------------------------------------------
0000CD32                            ; Object 2D - Burrobot enemy (LZ)
0000CD32                            ; ---------------------------------------------------------------------------
0000CD32                            
0000CD32                            Burrobot:
0000CD32 7000                       		moveq	#0,d0
0000CD34 1028 0024                  		move.b	obRoutine(a0),d0
0000CD38 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CD3C 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CD40                            ; ===========================================================================
0000CD40 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CD42 0000                       		dc.w Burro_Action-Burro_Index
0000CD44                            
0000CD44 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CD44                            ; ===========================================================================
0000CD44                            
0000CD44                            Burro_Main:	; Routine 0
0000CD44 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD48 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CD4E 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CD54 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CD5C 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CD62 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CD68 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD6E 117C 0005 0020             		move.b	#5,obColType(a0)
0000CD74 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CD7A 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CD7E 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CD84                            
0000CD84                            Burro_Action:	; Routine 2
0000CD84 7000                       		moveq	#0,d0
0000CD86 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CD8A 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CD8E 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CD92 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CD98 6100 FA0C                  		bsr.w	AnimateSprite
0000CD9C 6000 0000                  		bra.w	RememberState
0000CDA0                            ; ===========================================================================
0000CDA0 0000                       @index:		dc.w @changedir-@index
0000CDA2 0000                       		dc.w Burro_Move-@index
0000CDA4 0000                       		dc.w Burro_Jump-@index
0000CDA6 0000                       		dc.w Burro_ChkSonic-@index
0000CDA8                            ; ===========================================================================
0000CDA8                            
0000CDA8                            @changedir:
0000CDA8 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CDAC 6A00                       		bpl.s	@nochg
0000CDAE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CDB2 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CDB8 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CDBE 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CDC4 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CDCA 6700                       		beq.s	@nochg
0000CDCC 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CDD0                            
0000CDD0                            	@nochg:
0000CDD0 4E75                       		rts	
0000CDD2                            ; ===========================================================================
0000CDD2                            
0000CDD2                            Burro_Move:
0000CDD2 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CDD6 6B00                       		bmi.s	loc_AD84
0000CDD8 6100 0000                  		bsr.w	SpeedToPos
0000CDDC 0868 0000 0032             		bchg	#0,$32(a0)
0000CDE2 6600                       		bne.s	loc_AD78
0000CDE4 3628 0008                  		move.w	obX(a0),d3
0000CDE8 0643 000C                  		addi.w	#$C,d3
0000CDEC 0828 0000 0022             		btst	#0,obStatus(a0)
0000CDF2 6600                       		bne.s	loc_AD6A
0000CDF4 0443 0018                  		subi.w	#$18,d3
0000CDF8                            
0000CDF8                            loc_AD6A:
0000CDF8 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CDFE 0C41 000C                  		cmpi.w	#$C,d1
0000CE02 6C00                       		bge.s	loc_AD84
0000CE04 4E75                       		rts	
0000CE06                            ; ===========================================================================
0000CE06                            
0000CE06                            loc_AD78:
0000CE06 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CE0C D368 000C                  		add.w	d1,obY(a0)
0000CE10 4E75                       		rts	
0000CE12                            ; ===========================================================================
0000CE12                            
0000CE12                            loc_AD84:
0000CE12 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CE18 6700                       		beq.s	loc_ADA4
0000CE1A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CE1E 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CE24 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CE2A 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CE30 4E75                       		rts	
0000CE32                            ; ===========================================================================
0000CE32                            
0000CE32                            loc_ADA4:
0000CE32 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CE36 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CE3C 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CE42 4E75                       		rts	
0000CE44                            ; ===========================================================================
0000CE44                            
0000CE44                            Burro_Jump:
0000CE44 6100 0000                  		bsr.w	SpeedToPos
0000CE48 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CE4E 6B00                       		bmi.s	locret_ADF0
0000CE50 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CE56 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CE5C 4A41                       		tst.w	d1
0000CE5E 6A00                       		bpl.s	locret_ADF0
0000CE60 D368 000C                  		add.w	d1,obY(a0)
0000CE64 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CE6A 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CE70 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CE76 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CE7A 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CE7E                            
0000CE7E                            locret_ADF0:
0000CE7E 4E75                       		rts	
0000CE80                            ; ===========================================================================
0000CE80                            
0000CE80                            Burro_ChkSonic:
0000CE80 343C 0060                  		move.w	#$60,d2
0000CE84 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CE88 6400                       		bcc.s	locret_AE20
0000CE8A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CE8E 9068 000C                  		sub.w	obY(a0),d0
0000CE92 6400                       		bcc.s	locret_AE20
0000CE94 0C40 FF80                  		cmpi.w	#-$80,d0
0000CE98 6500                       		bcs.s	locret_AE20
0000CE9A 4A78 FE08                  		tst.w	(v_debuguse).w
0000CE9E 6600                       		bne.s	locret_AE20
0000CEA0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CEA4 3141 0010                  		move.w	d1,obVelX(a0)
0000CEA8 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CEAE                            
0000CEAE                            locret_AE20:
0000CEAE 4E75                       		rts	
0000CEB0                            
0000CEB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEB0                            
0000CEB0                            
0000CEB0                            Burro_ChkSonic2:
0000CEB0 323C 0080                  		move.w	#$80,d1
0000CEB4 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CEBA 3038 D008                  		move.w	(v_player+obX).w,d0
0000CEBE 9068 0008                  		sub.w	obX(a0),d0
0000CEC2 6400                       		bcc.s	loc_AE40
0000CEC4 4440                       		neg.w	d0
0000CEC6 4441                       		neg.w	d1
0000CEC8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CECE                            
0000CECE                            loc_AE40:
0000CECE B042                       		cmp.w	d2,d0
0000CED0 4E75                       		rts	
0000CED2                            ; End of function Burro_ChkSonic2
0000CED2                            ; End of function Burro_ChkSonic2
0000CED2                            		include	"_anim\Burrobot.asm"
0000CED2                            ; ---------------------------------------------------------------------------
0000CED2                            ; Animation script - Burrobot enemy
0000CED2                            ; ---------------------------------------------------------------------------
0000CED2 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CED4 0000                       		dc.w @walk2-Ani_Burro
0000CED6 0000                       		dc.w @digging-Ani_Burro
0000CED8 0000                       		dc.w @fall-Ani_Burro
0000CEDA 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CEDE 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CEE2 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CEE6 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CEEA 00                         		even
0000CEEA 00                         		even
0000CEEA                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CEEA                            ; --------------------------------------------------------------------------------
0000CEEA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CEEA                            ; --------------------------------------------------------------------------------
0000CEEA                            
0000CEEA                            SME_Ag_86:	
0000CEEA 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CEEE 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CEF2 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CEF6 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CEF8 02                         SME_Ag_86_E:	dc.b 2	
0000CEF9 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CEFE 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CF03 02                         SME_Ag_86_19:	dc.b 2	
0000CF04 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CF09 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CF0E 02                         SME_Ag_86_24:	dc.b 2	
0000CF0F E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CF14 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CF19 02                         SME_Ag_86_2F:	dc.b 2	
0000CF1A E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CF1F 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CF24 02                         SME_Ag_86_3A:	dc.b 2	
0000CF25 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CF2A 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CF2F 02                         SME_Ag_86_45:	dc.b 2	
0000CF30 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CF35 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CF3A 02                         SME_Ag_86_50:	dc.b 2	
0000CF3B EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CF40 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CF46 00                         		even
0000CF46 00                         		even
0000CF46                            
0000CF46                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CF46                            ; ---------------------------------------------------------------------------
0000CF46                            ; Object 2F - large grass-covered platforms (MZ)
0000CF46                            ; ---------------------------------------------------------------------------
0000CF46                            
0000CF46                            LargeGrass:
0000CF46 7000                       		moveq	#0,d0
0000CF48 1028 0024                  		move.b	obRoutine(a0),d0
0000CF4C 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CF50 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CF54                            ; ===========================================================================
0000CF54 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CF56 0000                       		dc.w LGrass_Action-LGrass_Index
0000CF58                            
0000CF58 =0000002A                  lgrass_origX:	equ $2A
0000CF58 =0000002C                  lgrass_origY:	equ $2C
0000CF58                            
0000CF58 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CF5A 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CF5C 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CF5E 0140                       		dc.b 1,	$40
0000CF60 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CF62 0220                       		dc.b 2,	$20
0000CF64                            ; ===========================================================================
0000CF64                            
0000CF64                            LGrass_Main:	; Routine 0
0000CF64 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF68 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CF70 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CF76 117C 0004 0001             		move.b	#4,obRender(a0)
0000CF7C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF82 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CF88 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CF8E 7000                       		moveq	#0,d0
0000CF90 1028 0028                  		move.b	obSubtype(a0),d0
0000CF94 E448                       		lsr.w	#2,d0
0000CF96 0240 001C                  		andi.w	#$1C,d0
0000CF9A 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CF9E 3019                       		move.w	(a1)+,d0
0000CFA0 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000CFA4 214A 0030                  		move.l	a2,$30(a0)
0000CFA8 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000CFAC 1151 0014                  		move.b	(a1),obActWid(a0)
0000CFB0 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000CFB6 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000CFBC 08E8 0004 0001             		bset	#4,1(a0)
0000CFC2                            
0000CFC2                            LGrass_Action:	; Routine 2
0000CFC2 6100 0000                  		bsr.w	LGrass_Types
0000CFC6 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CFCA 6700                       		beq.s	LGrass_Solid
0000CFCC 7200                       		moveq	#0,d1
0000CFCE 1228 0014                  		move.b	obActWid(a0),d1
0000CFD2 0641 000B                  		addi.w	#$B,d1
0000CFD6 6100 BFA4                  		bsr.w	ExitPlatform
0000CFDA 0829 0003 0022             		btst	#3,obStatus(a1)
0000CFE0 6600 0000                  		bne.w	LGrass_Slope
0000CFE4 4228 0025                  		clr.b	ob2ndRout(a0)
0000CFE8 6000                       		bra.s	LGrass_Display
0000CFEA                            ; ===========================================================================
0000CFEA                            
0000CFEA                            LGrass_Slope:
0000CFEA 7200                       		moveq	#0,d1
0000CFEC 1228 0014                  		move.b	obActWid(a0),d1
0000CFF0 0641 000B                  		addi.w	#$B,d1
0000CFF4 2468 0030                  		movea.l	$30(a0),a2
0000CFF8 3428 0008                  		move.w	obX(a0),d2
0000CFFC 6100 CF18                  		bsr.w	SlopeObject2
0000D000 6000                       		bra.s	LGrass_Display
0000D002                            ; ===========================================================================
0000D002                            
0000D002                            LGrass_Solid:
0000D002 7200                       		moveq	#0,d1
0000D004 1228 0014                  		move.b	obActWid(a0),d1
0000D008 0641 000B                  		addi.w	#$B,d1
0000D00C 343C 0020                  		move.w	#$20,d2
0000D010 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D016 6600                       		bne.s	loc_AF8E
0000D018 343C 0030                  		move.w	#$30,d2
0000D01C                            
0000D01C                            loc_AF8E:
0000D01C 2468 0030                  		movea.l	$30(a0),a2
0000D020 6100 0000                  		bsr.w	SolidObject2F
0000D024                            
0000D024                            LGrass_Display:
0000D024 6100 0000                  		bsr.w	DisplaySprite
0000D028 6000 0000                  		bra.w	LGrass_ChkDel
0000D02C                            
0000D02C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D02C                            
0000D02C                            
0000D02C                            LGrass_Types:
0000D02C 7000                       		moveq	#0,d0
0000D02E 1028 0028                  		move.b	obSubtype(a0),d0
0000D032 0240 0007                  		andi.w	#7,d0
0000D036 D040                       		add.w	d0,d0
0000D038 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D03C 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D040                            ; End of function LGrass_Types
0000D040                            
0000D040                            ; ===========================================================================
0000D040 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D042 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D044 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D046 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D048 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D04A 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D04C                            ; ===========================================================================
0000D04C                            
0000D04C                            LGrass_Type00:
0000D04C 4E75                       		rts			; type 00 platform doesn't move
0000D04E                            ; ===========================================================================
0000D04E                            
0000D04E                            LGrass_Type01:
0000D04E 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D052 323C 0020                  		move.w	#$20,d1
0000D056 6000                       		bra.s	LGrass_Move
0000D058                            ; ===========================================================================
0000D058                            
0000D058                            LGrass_Type02:
0000D058 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D05C 323C 0030                  		move.w	#$30,d1
0000D060 6000                       		bra.s	LGrass_Move
0000D062                            ; ===========================================================================
0000D062                            
0000D062                            LGrass_Type03:
0000D062 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D066 323C 0040                  		move.w	#$40,d1
0000D06A 6000                       		bra.s	LGrass_Move
0000D06C                            ; ===========================================================================
0000D06C                            
0000D06C                            LGrass_Type04:
0000D06C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D070 323C 0060                  		move.w	#$60,d1
0000D074                            
0000D074                            LGrass_Move:
0000D074 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D07A 6700                       		beq.s	loc_AFF2
0000D07C 4440                       		neg.w	d0
0000D07E D041                       		add.w	d1,d0
0000D080                            
0000D080                            loc_AFF2:
0000D080 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D084 9240                       		sub.w	d0,d1
0000D086 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D08A 4E75                       		rts	
0000D08C                            ; ===========================================================================
0000D08C                            
0000D08C                            LGrass_Type05:
0000D08C 1028 0034                  		move.b	$34(a0),d0
0000D090 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D094 6600                       		bne.s	loc_B010
0000D096 5500                       		subq.b	#2,d0
0000D098 6400                       		bcc.s	loc_B01C
0000D09A 7000                       		moveq	#0,d0
0000D09C 6000                       		bra.s	loc_B01C
0000D09E                            ; ===========================================================================
0000D09E                            
0000D09E                            loc_B010:
0000D09E 5800                       		addq.b	#4,d0
0000D0A0 0C00 0040                  		cmpi.b	#$40,d0
0000D0A4 6500                       		bcs.s	loc_B01C
0000D0A6 103C 0040                  		move.b	#$40,d0
0000D0AA                            
0000D0AA                            loc_B01C:
0000D0AA 1140 0034                  		move.b	d0,$34(a0)
0000D0AE 4EB9 0000 37AE             		jsr	(CalcSine).l
0000D0B4 E848                       		lsr.w	#4,d0
0000D0B6 3200                       		move.w	d0,d1
0000D0B8 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D0BC 3140 000C                  		move.w	d0,obY(a0)
0000D0C0 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D0C6 6600                       		bne.s	loc_B07A
0000D0C8 4A28 0035                  		tst.b	$35(a0)
0000D0CC 6600                       		bne.s	loc_B07A
0000D0CE 117C 0001 0035             		move.b	#1,$35(a0)
0000D0D4 6100 0000                  		bsr.w	FindNextFreeObj
0000D0D8 6600                       		bne.s	loc_B07A
0000D0DA 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D0DE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D0E4 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D0EA 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D0EE 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D0F2 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D0F8 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D0FE 2348 0038                  		move.l	a0,$38(a1)
0000D102 2448                       		movea.l	a0,a2
0000D104 6100                       		bsr.s	sub_B09C
0000D106                            
0000D106                            loc_B07A:
0000D106 7400                       		moveq	#0,d2
0000D108 45E8 0036                  		lea	$36(a0),a2
0000D10C 141A                       		move.b	(a2)+,d2
0000D10E 5302                       		subq.b	#1,d2
0000D110 6500                       		bcs.s	locret_B09A
0000D112                            
0000D112                            loc_B086:
0000D112 7000                       		moveq	#0,d0
0000D114 101A                       		move.b	(a2)+,d0
0000D116 ED48                       		lsl.w	#6,d0
0000D118 0640 D000                  		addi.w	#$D000,d0
0000D11C 3240                       		movea.w	d0,a1
0000D11E 3341 003C                  		move.w	d1,$3C(a1)
0000D122 51CA FFEE                  		dbf	d2,loc_B086
0000D126                            
0000D126                            locret_B09A:
0000D126 4E75                       		rts	
0000D128                            
0000D128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D128                            
0000D128                            
0000D128                            sub_B09C:
0000D128 45EA 0036                  		lea	$36(a2),a2
0000D12C 7000                       		moveq	#0,d0
0000D12E 1012                       		move.b	(a2),d0
0000D130 5212                       		addq.b	#1,(a2)
0000D132 45F2 0001                  		lea	1(a2,d0.w),a2
0000D136 3009                       		move.w	a1,d0
0000D138 0440 D000                  		subi.w	#$D000,d0
0000D13C EC48                       		lsr.w	#6,d0
0000D13E 0240 007F                  		andi.w	#$7F,d0
0000D142 1480                       		move.b	d0,(a2)
0000D144 4E75                       		rts	
0000D146                            ; End of function sub_B09C
0000D146                            
0000D146                            ; ===========================================================================
0000D146                            
0000D146                            LGrass_ChkDel:
0000D146 4A28 0035                  		tst.b	$35(a0)
0000D14A 6700                       		beq.s	loc_B0C6
0000D14C 4A28 0001                  		tst.b	obRender(a0)
0000D150 6A00                       		bpl.s	LGrass_DelFlames
0000D152                            
0000D152                            loc_B0C6:
0000D170 4E75                       		rts	
0000D172                            ; ===========================================================================
0000D172                            
0000D172                            LGrass_DelFlames:
0000D172 7400                       		moveq	#0,d2
0000D174                            
0000D174                            loc_B0E8:
0000D174 45E8 0036                  		lea	$36(a0),a2
0000D178 1412                       		move.b	(a2),d2
0000D17A 421A                       		clr.b	(a2)+
0000D17C 5302                       		subq.b	#1,d2
0000D17E 6500                       		bcs.s	locret_B116
0000D180                            
0000D180                            loc_B0F4:
0000D180 7000                       		moveq	#0,d0
0000D182 1012                       		move.b	(a2),d0
0000D184 421A                       		clr.b	(a2)+
0000D186 ED48                       		lsl.w	#6,d0
0000D188 0640 D000                  		addi.w	#$D000,d0
0000D18C 3240                       		movea.w	d0,a1
0000D18E 6100 0000                  		bsr.w	DeleteChild
0000D192 51CA FFEC                  		dbf	d2,loc_B0F4
0000D196 117C 0000 0035             		move.b	#0,$35(a0)
0000D19C 117C 0000 0034             		move.b	#0,$34(a0)
0000D1A2                            
0000D1A2                            locret_B116:
0000D1A2 4E75                       		rts	
0000D1A4                            ; ===========================================================================
0000D1A4                            ; ---------------------------------------------------------------------------
0000D1A4                            ; Collision data for large moving platforms (MZ)
0000D1A4                            ; ---------------------------------------------------------------------------
0000D1A4                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D1F0                            		even
0000D1F0                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D21C                            		even
0000D21C                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D268                            		even
0000D268                            		even
0000D268                            		include	"_incObj\35 Burning Grass.asm"
0000D268                            ; ---------------------------------------------------------------------------
0000D268                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D268                            ; (appears when	you walk on sinking platforms)
0000D268                            ; ---------------------------------------------------------------------------
0000D268                            
0000D268                            GrassFire:
0000D268 7000                       		moveq	#0,d0
0000D26A 1028 0024                  		move.b	obRoutine(a0),d0
0000D26E 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D272 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D276                            ; ===========================================================================
0000D276 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D278 0000                       		dc.w loc_B238-GFire_Index
0000D27A 0000                       		dc.w GFire_Move-GFire_Index
0000D27C                            
0000D27C =0000002A                  gfire_origX:	equ $2A
0000D27C                            ; ===========================================================================
0000D27C                            
0000D27C                            GFire_Main:	; Routine 0
0000D27C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D280 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D288 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D28E 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D294 117C 0004 0001             		move.b	#4,obRender(a0)
0000D29A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D2A0 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D2A6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D2B6 4A28 0028                  		tst.b	obSubtype(a0)
0000D2BA 6700                       		beq.s	loc_B238
0000D2BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D2C0 6000 0000                  		bra.w	GFire_Move
0000D2C4                            ; ===========================================================================
0000D2C4                            
0000D2C4                            loc_B238:	; Routine 2
0000D2C4 2268 0030                  		movea.l	$30(a0),a1
0000D2C8 3228 0008                  		move.w	obX(a0),d1
0000D2CC 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D2D0 0641 000C                  		addi.w	#$C,d1
0000D2D4 3001                       		move.w	d1,d0
0000D2D6 E248                       		lsr.w	#1,d0
0000D2D8 1031 0000                  		move.b	(a1,d0.w),d0
0000D2DC 4440                       		neg.w	d0
0000D2DE D068 002C                  		add.w	$2C(a0),d0
0000D2E2 3400                       		move.w	d0,d2
0000D2E4 D068 003C                  		add.w	$3C(a0),d0
0000D2E8 3140 000C                  		move.w	d0,obY(a0)
0000D2EC 0C41 0084                  		cmpi.w	#$84,d1
0000D2F0 6400                       		bcc.s	loc_B2B0
0000D2F2 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D2FA 0C41 0080                  		cmpi.w	#$80,d1
0000D2FE 6400                       		bcc.s	loc_B2B0
0000D300 2028 0008                  		move.l	obX(a0),d0
0000D304 0680 0008 0000             		addi.l	#$80000,d0
0000D30A 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D310 6600                       		bne.s	loc_B2B0
0000D312 6100 0000                  		bsr.w	FindNextFreeObj
0000D316 6600                       		bne.s	loc_B2B0
0000D318 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D31C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D322 3342 002C                  		move.w	d2,$2C(a1)
0000D326 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D32C 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D332 2468 0038                  		movea.l	$38(a0),a2
0000D336 6100 FDF0                  		bsr.w	sub_B09C
0000D33A                            
0000D33A                            loc_B2B0:
0000D33A 6000                       		bra.s	GFire_Animate
0000D33C                            ; ===========================================================================
0000D33C                            
0000D33C                            GFire_Move:	; Routine 4
0000D33C 3028 002C                  		move.w	$2C(a0),d0
0000D340 D068 003C                  		add.w	$3C(a0),d0
0000D344 3140 000C                  		move.w	d0,obY(a0)
0000D348                            
0000D348                            GFire_Animate:
0000D348 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D34E 6100 F456                  		bsr.w	AnimateSprite
0000D352 6000 0000                  		bra.w	DisplaySprite
0000D352 6000 0000                  		bra.w	DisplaySprite
0000D356                            		include	"_anim\Burning Grass.asm"
0000D356                            ; ---------------------------------------------------------------------------
0000D356                            ; Animation script - burning grass that sits on the floor (MZ)
0000D356                            ; ---------------------------------------------------------------------------
0000D356 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D358 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D35E                            		even
0000D35E                            		even
0000D35E                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D35E                            ; ---------------------------------------------------------------------------
0000D35E                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D35E                            ; ---------------------------------------------------------------------------
0000D35E                            Map_LGrass_internal:
0000D35E 0000                       		dc.w @wide-Map_LGrass_internal
0000D360 0000                       		dc.w @sloped-Map_LGrass_internal
0000D362 0000                       		dc.w @narrow-Map_LGrass_internal
0000D364 0D                         @wide:		dc.b $D
0000D365 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D36A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D36F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D374 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D379 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D37E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D383 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D388 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D38D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D392 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D397 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D39C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D3A1 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D3A6 0A                         @sloped:	dc.b $A
0000D3A7 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D3AC F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D3B1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D3B6 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D3BB E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D3C0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D3C5 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D3CA E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D3CF C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D3D4 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D3D9 06                         @narrow:	dc.b 6
0000D3DA D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D3DF F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D3E4 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D3E9 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D3EE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D3F3 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D3F8                            		even
0000D3F8                            		even
0000D3F8                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D3F8                            ; --------------------------------------------------------------------------------
0000D3F8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D3F8                            ; --------------------------------------------------------------------------------
0000D3F8                            
0000D3F8                            SME_gyvTV:	
0000D3F8 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D3FC 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D400 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D404 01                         SME_gyvTV_C:	dc.b 1	
0000D405 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D40A 01                         SME_gyvTV_12:	dc.b 1	
0000D40B E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D410 01                         SME_gyvTV_18:	dc.b 1	
0000D411 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D416 01                         SME_gyvTV_1E:	dc.b 1	
0000D417 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D41C 01                         SME_gyvTV_24:	dc.b 1	
0000D41D F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D422 01                         SME_gyvTV_2A:	dc.b 1	
0000D423 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D428                            		even
0000D428                            		even
0000D428                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D428                            ; ---------------------------------------------------------------------------
0000D428                            ; Object 30 - large green glass blocks (MZ)
0000D428                            ; ---------------------------------------------------------------------------
0000D428                            
0000D428                            GlassBlock:
0000D428 7000                       		moveq	#0,d0
0000D42A 1028 0024                  		move.b	obRoutine(a0),d0
0000D42E 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D432 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D454 6000 0000                  		bra.w	DisplaySprite
0000D458                            ; ===========================================================================
0000D458                            
0000D458                            Glass_Delete:
0000D458 6000 0000                  		bra.w	DeleteObject
0000D45C                            ; ===========================================================================
0000D45C 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D45E 0000                       		dc.w Glass_Block012-Glass_Index
0000D460 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D462 0000                       		dc.w Glass_Block34-Glass_Index
0000D464 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D466                            
0000D466 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D466 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D466                            
0000D466 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D469 0400 01                    		dc.b 4,	0, 1
0000D46C 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D46F 0800 01                    		dc.b 8,	0, 1
0000D472                            ; ===========================================================================
0000D472                            
0000D472                            Glass_Main:	; Routine 0
0000D472 45F9 0000 D466             		lea	(Glass_Vars1).l,a2
0000D478 7201                       		moveq	#1,d1
0000D47A 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D480 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D486 6500                       		bcs.s	@IsType012	; if yes, branch
0000D488                            
0000D488 45F9 0000 D46C             		lea	(Glass_Vars2).l,a2
0000D48E 7201                       		moveq	#1,d1
0000D490 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D496                            
0000D496                            	@IsType012:
0000D496 2248                       		movea.l	a0,a1
0000D498 6000                       		bra.s	@Load		; load main object
0000D49A                            ; ===========================================================================
0000D49A                            
0000D49A                            	@Repeat:
0000D49A 6100 0000                  		bsr.w	FindNextFreeObj
0000D49E 6600                       		bne.s	@Fail
0000D4A0                            
0000D4A0                            @Load:
0000D4A0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D4A4 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D4A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D4AE 101A                       		move.b	(a2)+,d0
0000D4B0 4880                       		ext.w	d0
0000D4B2 D068 000C                  		add.w	obY(a0),d0
0000D4B6 3340 000C                  		move.w	d0,obY(a1)
0000D4BA 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D4C2 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D4C8 137C 0004 0001             		move.b	#4,obRender(a1)
0000D4CE 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D4D4 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D4DA 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D4E0 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D4E6 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D4EA 2348 003C                  		move.l	a0,glass_parent(a1)
0000D4EE 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D4F2                            
0000D4F2 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D4F8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D4FE 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D502 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D508                            
0000D508                            	@Fail:
0000D508 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D50E 08E8 0004 0001             		bset	#4,obRender(a0)
0000D514                            
0000D514                            Glass_Block012:	; Routine 2
0000D514 6100 0000                  		bsr.w	Glass_Types
0000D518 323C 002B                  		move.w	#$2B,d1
0000D51C 343C 0048                  		move.w	#$48,d2
0000D520 363C 0049                  		move.w	#$49,d3
0000D524 3828 0008                  		move.w	obX(a0),d4
0000D528 6000 0000                  		bra.w	SolidObject
0000D52C                            ; ===========================================================================
0000D52C                            
0000D52C                            Glass_Reflect012:
0000D52C                            		; Routine 4
0000D52C 2268 003C                  		movea.l	$3C(a0),a1
0000D530 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D536 6000 0000                  		bra.w	Glass_Types
0000D53A                            ; ===========================================================================
0000D53A                            
0000D53A                            Glass_Block34:	; Routine 6
0000D53A 6100 0000                  		bsr.w	Glass_Types
0000D53E 323C 002B                  		move.w	#$2B,d1
0000D542 343C 0038                  		move.w	#$38,d2
0000D546 363C 0039                  		move.w	#$39,d3
0000D54A 3828 0008                  		move.w	obX(a0),d4
0000D54E 6000 0000                  		bra.w	SolidObject
0000D552                            ; ===========================================================================
0000D552                            
0000D552                            Glass_Reflect34:
0000D552                            		; Routine 8
0000D552 2268 003C                  		movea.l	$3C(a0),a1
0000D556 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D55C 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D562 6000 0000                  		bra.w	Glass_Types
0000D566                            
0000D566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D566                            
0000D566                            
0000D566                            Glass_Types:
0000D566 7000                       		moveq	#0,d0
0000D568 1028 0028                  		move.b	obSubtype(a0),d0
0000D56C 0240 0007                  		andi.w	#7,d0
0000D570 D040                       		add.w	d0,d0
0000D572 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D576 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D57A                            ; End of function Glass_Types
0000D57A                            
0000D57A                            ; ===========================================================================
0000D57A 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D57C 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D57E 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D580 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D582 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D584                            ; ===========================================================================
0000D584                            
0000D584                            Glass_Type00:
0000D584 4E75                       		rts	
0000D586                            ; ===========================================================================
0000D586                            
0000D586                            Glass_Type01:
0000D586 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D58A 323C 0040                  		move.w	#$40,d1
0000D58E 6000                       		bra.s	loc_B514
0000D590                            ; ===========================================================================
0000D590                            
0000D590                            Glass_Type02:
0000D590 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D594 323C 0040                  		move.w	#$40,d1
0000D598 4440                       		neg.w	d0
0000D59A D041                       		add.w	d1,d0
0000D59C                            
0000D59C                            loc_B514:
0000D59C 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D5A2 6700                       		beq.s	loc_B526
0000D5A4 4440                       		neg.w	d0
0000D5A6 D041                       		add.w	d1,d0
0000D5A8 E208                       		lsr.b	#1,d0
0000D5AA 0640 0020                  		addi.w	#$20,d0
0000D5AE                            
0000D5AE                            loc_B526:
0000D5AE 6000 0000                  		bra.w	loc_B5EE
0000D5B2                            ; ===========================================================================
0000D5B2                            
0000D5B2                            Glass_Type03:
0000D5B2 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D5B8 6700                       		beq.s	loc_B53E
0000D5BA 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D5BE 0440 0010                  		subi.w	#$10,d0
0000D5C2 6000 0000                  		bra.w	loc_B5EE
0000D5C6                            ; ===========================================================================
0000D5C6                            
0000D5C6                            loc_B53E:
0000D5C6 0828 0003 0022             		btst	#3,obStatus(a0)
0000D5CC 6600                       		bne.s	loc_B54E
0000D5CE 08A8 0000 0034             		bclr	#0,$34(a0)
0000D5D4 6000                       		bra.s	loc_B582
0000D5D6                            ; ===========================================================================
0000D5D6                            
0000D5D6                            loc_B54E:
0000D5D6 4A28 0034                  		tst.b	$34(a0)
0000D5DA 6600                       		bne.s	loc_B582
0000D5DC 117C 0001 0034             		move.b	#1,$34(a0)
0000D5E2 08E8 0000 0035             		bset	#0,$35(a0)
0000D5E8 6700                       		beq.s	loc_B582
0000D5EA 08E8 0007 0034             		bset	#7,$34(a0)
0000D5F0 317C 0010 0036             		move.w	#$10,$36(a0)
0000D5F6 117C 000A 0038             		move.b	#$A,$38(a0)
0000D5FC 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D602 6600                       		bne.s	loc_B582
0000D604 317C 0040 0036             		move.w	#$40,$36(a0)
0000D60A                            
0000D60A                            loc_B582:
0000D60A 4A28 0034                  		tst.b	$34(a0)
0000D60E 6A00                       		bpl.s	loc_B5AA
0000D610 4A28 0038                  		tst.b	$38(a0)
0000D614 6700                       		beq.s	loc_B594
0000D616 5328 0038                  		subq.b	#1,$38(a0)
0000D61A 6600                       		bne.s	loc_B5AA
0000D61C                            
0000D61C                            loc_B594:
0000D61C 4A68 0032                  		tst.w	glass_dist(a0)
0000D620 6700                       		beq.s	loc_B5A4
0000D622 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D626 5368 0036                  		subq.w	#1,$36(a0)
0000D62A 6600                       		bne.s	loc_B5AA
0000D62C                            
0000D62C                            loc_B5A4:
0000D62C 08A8 0007 0034             		bclr	#7,$34(a0)
0000D632                            
0000D632                            loc_B5AA:
0000D632 3028 0032                  		move.w	glass_dist(a0),d0
0000D636 6000                       		bra.s	loc_B5EE
0000D638                            ; ===========================================================================
0000D638                            
0000D638                            Glass_Type04:
0000D638 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D63E 6700                       		beq.s	Glass_ChkSwitch
0000D640 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D644 0440 0010                  		subi.w	#$10,d0
0000D648 6000                       		bra.s	loc_B5EE
0000D64A                            ; ===========================================================================
0000D64A                            
0000D64A                            Glass_ChkSwitch:
0000D64A 4A28 0034                  		tst.b	$34(a0)
0000D64E 6600                       		bne.s	loc_B5E0
0000D650 45F8 F7E0                  		lea	(f_switch).w,a2
0000D654 7000                       		moveq	#0,d0
0000D656 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D65A E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D65C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D660 6700                       		beq.s	loc_B5EA	; if not, branch
0000D662 117C 0001 0034             		move.b	#1,$34(a0)
0000D668                            
0000D668                            loc_B5E0:
0000D668 4A68 0032                  		tst.w	glass_dist(a0)
0000D66C 6700                       		beq.s	loc_B5EA
0000D66E 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D672                            
0000D672                            loc_B5EA:
0000D672 3028 0032                  		move.w	glass_dist(a0),d0
0000D676                            
0000D676                            loc_B5EE:
0000D676 3228 0030                  		move.w	$30(a0),d1
0000D67A 9240                       		sub.w	d0,d1
0000D67C 3141 000C                  		move.w	d1,obY(a0)
0000D680 4E75                       		rts	
0000D680 4E75                       		rts	
0000D682                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D682                            ; --------------------------------------------------------------------------------
0000D682                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D682                            ; --------------------------------------------------------------------------------
0000D682                            
0000D682                            SME_NEyTf:	
0000D682 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D686 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D688 0C                         SME_NEyTf_6:	dc.b $C	
0000D689 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D68E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D693 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D698 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D69D E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D6A2 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D6A7 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D6AC 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D6B1 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D6B6 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D6BB 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D6C0 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D6C5 02                         SME_NEyTf_43:	dc.b 2	
0000D6C6 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D6CB 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D6D0 0A                         SME_NEyTf_4E:	dc.b $A	
0000D6D1 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D6D6 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D6DB D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D6E0 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D6E5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D6EA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D6EF 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D6F4 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D6F9 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D6FE 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D704 00                         		even
0000D704 00                         		even
0000D704                            		include	"_incObj\31 Chained Stompers.asm"
0000D704                            ; ---------------------------------------------------------------------------
0000D704                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D704                            ; ---------------------------------------------------------------------------
0000D704                            
0000D704                            ChainStomp:
0000D704 7000                       		moveq	#0,d0
0000D706 1028 0024                  		move.b	obRoutine(a0),d0
0000D70A 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D70E 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D712                            ; ===========================================================================
0000D712 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D714 0000                       		dc.w loc_B798-CStom_Index
0000D716 0000                       		dc.w loc_B7FE-CStom_Index
0000D718 0000                       		dc.w CStom_Display2-CStom_Index
0000D71A 0000                       		dc.w loc_B7E2-CStom_Index
0000D71C                            
0000D71C =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D71C                            
0000D71C 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D71E 0100                       		dc.b 1,	0
0000D720                            
0000D720 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D723 041C 01                    		dc.b 4,	$1C, 1
0000D726 08CC 03                    		dc.b 8,	$CC, 3
0000D729 06F0 02                    		dc.b 6,	$F0, 2
0000D72C                            
0000D72C 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D730 5000 7800                  		dc.w $5000, $7800
0000D734 3800 5800                  		dc.w $3800, $5800
0000D738 B800                       		dc.w $B800
0000D73A                            ; ===========================================================================
0000D73A                            
0000D73A                            CStom_Main:	; Routine 0
0000D73A 7000                       		moveq	#0,d0
0000D73C 1028 0028                  		move.b	obSubtype(a0),d0
0000D740 6A00                       		bpl.s	loc_B6CE
0000D742 0240 007F                  		andi.w	#$7F,d0
0000D746 D040                       		add.w	d0,d0
0000D748 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D74C 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D750 101A                       		move.b	(a2)+,d0
0000D752 1140 0028                  		move.b	d0,obSubtype(a0)
0000D756                            
0000D756                            loc_B6CE:
0000D756 0200 000F                  		andi.b	#$F,d0
0000D75A D040                       		add.w	d0,d0
0000D75C 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D760 4A40                       		tst.w	d0
0000D762 6600                       		bne.s	loc_B6E0
0000D764 3142 0032                  		move.w	d2,$32(a0)
0000D768                            
0000D768                            loc_B6E0:
0000D768 45F9 0000 D720             		lea	(CStom_Var).l,a2
0000D76E 2248                       		movea.l	a0,a1
0000D770 7203                       		moveq	#3,d1
0000D772 6000                       		bra.s	CStom_MakeStomper
0000D774                            ; ===========================================================================
0000D774                            
0000D774                            CStom_Loop:
0000D774 6100 0000                  		bsr.w	FindNextFreeObj
0000D778 6600 0000                  		bne.w	CStom_SetSize
0000D77C                            
0000D77C                            CStom_MakeStomper:
0000D77C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D780 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D784 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D78A 101A                       		move.b	(a2)+,d0
0000D78C 4880                       		ext.w	d0
0000D78E D068 000C                  		add.w	obY(a0),d0
0000D792 3340 000C                  		move.w	d0,obY(a1)
0000D796 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D79E 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D7A4 137C 0004 0001             		move.b	#4,obRender(a1)
0000D7AA 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D7B0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D7B6 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D7BC 3342 0034                  		move.w	d2,$34(a1)
0000D7C0 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D7C6 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D7CA 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D7D0 6600                       		bne.s	loc_B76A
0000D7D2 5341                       		subq.w	#1,d1
0000D7D4 1028 0028                  		move.b	obSubtype(a0),d0
0000D7D8 0240 00F0                  		andi.w	#$F0,d0
0000D7DC 0C40 0020                  		cmpi.w	#$20,d0
0000D7E0 679A                       		beq.s	CStom_MakeStomper
0000D7E2 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D7E8 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D7EE 5241                       		addq.w	#1,d1
0000D7F0                            
0000D7F0                            loc_B76A:
0000D7F0 2348 003C                  		move.l	a0,$3C(a1)
0000D7F4 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D7F8                            
0000D7F8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D7FE                            
0000D7FE                            CStom_SetSize:
0000D7FE 7000                       		moveq	#0,d0
0000D800 1028 0028                  		move.b	obSubtype(a0),d0
0000D804 E648                       		lsr.w	#3,d0
0000D806 0200 000E                  		andi.b	#$E,d0
0000D80A 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D80E 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D812 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D816 6000                       		bra.s	loc_B798
0000D818                            ; ===========================================================================
0000D818 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D81A 3009                       		dc.b $30, 9
0000D81C 100A                       		dc.b $10, $A
0000D81E                            ; ===========================================================================
0000D81E                            
0000D81E                            loc_B798:	; Routine 2
0000D81E 6100 0000                  		bsr.w	CStom_Types
0000D822 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D828 7200                       		moveq	#0,d1
0000D82A 1228 0014                  		move.b	obActWid(a0),d1
0000D82E 0641 000B                  		addi.w	#$B,d1
0000D832 343C 000C                  		move.w	#$C,d2
0000D836 363C 000D                  		move.w	#$D,d3
0000D83A 3828 0008                  		move.w	obX(a0),d4
0000D83E 6100 0000                  		bsr.w	SolidObject
0000D842 0828 0003 0022             		btst	#3,obStatus(a0)
0000D848 6700                       		beq.s	CStom_Display
0000D84A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D850 6400                       		bcc.s	CStom_Display
0000D852 2448                       		movea.l	a0,a2
0000D854 41F8 D000                  		lea	(v_player).w,a0
0000D858 4EB9 0000 0000             		jsr	(KillSonic).l
0000D85E 204A                       		movea.l	a2,a0
0000D860                            
0000D860                            CStom_Display:
0000D860 6100 0000                  		bsr.w	DisplaySprite
0000D864 6000 0000                  		bra.w	CStom_ChkDel
0000D868                            ; ===========================================================================
0000D868                            
0000D868                            loc_B7E2:	; Routine 8
0000D868 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D86E 08E8 0004 0001             		bset	#4,obRender(a0)
0000D874 2268 003C                  		movea.l	$3C(a0),a1
0000D878 1029 0032                  		move.b	$32(a1),d0
0000D87C EA08                       		lsr.b	#5,d0
0000D87E 5600                       		addq.b	#3,d0
0000D880 1140 001A                  		move.b	d0,obFrame(a0)
0000D884                            
0000D884                            loc_B7FE:	; Routine 4
0000D884 2268 003C                  		movea.l	$3C(a0),a1
0000D888 7000                       		moveq	#0,d0
0000D88A 1029 0032                  		move.b	$32(a1),d0
0000D88E D068 0030                  		add.w	$30(a0),d0
0000D892 3140 000C                  		move.w	d0,obY(a0)
0000D896                            
0000D896                            CStom_Display2:	; Routine 6
0000D896 6100 0000                  		bsr.w	DisplaySprite
0000D89A                            
0000D89A                            CStom_ChkDel:
0000D8B8 4E75                       		rts	
0000D8BA                            ; ===========================================================================
0000D8BA                            
0000D8BA                            CStom_Types:
0000D8BA 1028 0028                  		move.b	obSubtype(a0),d0
0000D8BE 0240 000F                  		andi.w	#$F,d0
0000D8C2 D040                       		add.w	d0,d0
0000D8C4 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D8C8 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D8CC                            ; ===========================================================================
0000D8CC 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D8CE 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D8D0 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D8D2 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D8D4 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D8D6 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D8D8 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D8DA                            ; ===========================================================================
0000D8DA                            
0000D8DA                            CStom_Type00:
0000D8DA 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D8DE 7000                       		moveq	#0,d0
0000D8E0 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D8E4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D8E8 6700                       		beq.s	loc_B8A8	; if not, branch
0000D8EA 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D8EE 6A00                       		bpl.s	loc_B872
0000D8F0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D8F6 6700                       		beq.s	loc_B8A0
0000D8F8                            
0000D8F8                            loc_B872:
0000D8F8 4A68 0032                  		tst.w	$32(a0)
0000D8FC 6700                       		beq.s	loc_B8A0
0000D8FE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D902 0200 000F                  		andi.b	#$F,d0
0000D906 6600                       		bne.s	loc_B892
0000D908 4A28 0001                  		tst.b	1(a0)
0000D90C 6A00                       		bpl.s	loc_B892
0000D918                            
0000D918                            loc_B892:
0000D918 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D91E 6400                       		bcc.s	CStom_Restart
0000D920 317C 0000 0032             		move.w	#0,$32(a0)
0000D926                            
0000D926                            loc_B8A0:
0000D926 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D92C 6000                       		bra.s	CStom_Restart
0000D92E                            ; ===========================================================================
0000D92E                            
0000D92E                            loc_B8A8:
0000D92E 3228 0034                  		move.w	$34(a0),d1
0000D932 B268 0032                  		cmp.w	$32(a0),d1
0000D936 6700                       		beq.s	CStom_Restart
0000D938 3028 0012                  		move.w	obVelY(a0),d0
0000D93C 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D942 D168 0032                  		add.w	d0,$32(a0)
0000D946 B268 0032                  		cmp.w	$32(a0),d1
0000D94A 6200                       		bhi.s	CStom_Restart
0000D94C 3141 0032                  		move.w	d1,$32(a0)
0000D950 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D956 4A28 0001                  		tst.b	obRender(a0)
0000D95A 6A00                       		bpl.s	CStom_Restart
0000D966                            
0000D966                            CStom_Restart:
0000D966 7000                       		moveq	#0,d0
0000D968 1028 0032                  		move.b	$32(a0),d0
0000D96C D068 0030                  		add.w	$30(a0),d0
0000D970 3140 000C                  		move.w	d0,obY(a0)
0000D974 4E75                       		rts	
0000D976                            ; ===========================================================================
0000D976                            
0000D976                            CStom_Type01:
0000D976 4A68 0036                  		tst.w	$36(a0)
0000D97A 6700                       		beq.s	loc_B938
0000D97C 4A68 0038                  		tst.w	$38(a0)
0000D980 6700                       		beq.s	loc_B902
0000D982 5368 0038                  		subq.w	#1,$38(a0)
0000D986 6000                       		bra.s	loc_B97C
0000D988                            ; ===========================================================================
0000D988                            
0000D988                            loc_B902:
0000D988 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D98C 0200 000F                  		andi.b	#$F,d0
0000D990 6600                       		bne.s	loc_B91C
0000D992 4A28 0001                  		tst.b	obRender(a0)
0000D996 6A00                       		bpl.s	loc_B91C
0000D9A2                            
0000D9A2                            loc_B91C:
0000D9A2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D9A8 6400                       		bcc.s	loc_B97C
0000D9AA 317C 0000 0032             		move.w	#0,$32(a0)
0000D9B0 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D9B6 317C 0000 0036             		move.w	#0,$36(a0)
0000D9BC 6000                       		bra.s	loc_B97C
0000D9BE                            ; ===========================================================================
0000D9BE                            
0000D9BE                            loc_B938:
0000D9BE 3228 0034                  		move.w	$34(a0),d1
0000D9C2 B268 0032                  		cmp.w	$32(a0),d1
0000D9C6 6700                       		beq.s	loc_B97C
0000D9C8 3028 0012                  		move.w	obVelY(a0),d0
0000D9CC 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D9D2 D168 0032                  		add.w	d0,$32(a0)
0000D9D6 B268 0032                  		cmp.w	$32(a0),d1
0000D9DA 6200                       		bhi.s	loc_B97C
0000D9DC 3141 0032                  		move.w	d1,$32(a0)
0000D9E0 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D9E6 317C 0001 0036             		move.w	#1,$36(a0)
0000D9EC 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D9F2 4A28 0001                  		tst.b	obRender(a0)
0000D9F6 6A00                       		bpl.s	loc_B97C
0000DA02                            
0000DA02                            loc_B97C:
0000DA02 6000 FF62                  		bra.w	CStom_Restart
0000DA06                            ; ===========================================================================
0000DA06                            
0000DA06                            CStom_Type03:
0000DA06 3038 D008                  		move.w	(v_player+obX).w,d0
0000DA0A 9068 0008                  		sub.w	obX(a0),d0
0000DA0E 6400                       		bcc.s	loc_B98C
0000DA10 4440                       		neg.w	d0
0000DA12                            
0000DA12                            loc_B98C:
0000DA12 0C40 0090                  		cmpi.w	#$90,d0
0000DA16 6400                       		bcc.s	loc_B996
0000DA18 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DA1C                            
0000DA1C                            loc_B996:
0000DA1C 6000 FF48                  		bra.w	CStom_Restart
0000DA1C 6000 FF48                  		bra.w	CStom_Restart
0000DA20                            		include	"_incObj\45 Sideways Stomper.asm"
0000DA20                            ; ---------------------------------------------------------------------------
0000DA20                            ; Object 45 - spiked metal block from beta version (MZ)
0000DA20                            ; ---------------------------------------------------------------------------
0000DA20                            
0000DA20                            SideStomp:
0000DA20 7000                       		moveq	#0,d0
0000DA22 1028 0024                  		move.b	obRoutine(a0),d0
0000DA26 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DA2A 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DA2E                            ; ===========================================================================
0000DA2E 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DA30 0000                       		dc.w SStom_Solid-SStom_Index
0000DA32 0000                       		dc.w loc_BA8E-SStom_Index
0000DA34 0000                       		dc.w SStom_Display-SStom_Index
0000DA36 0000                       		dc.w SStom_Pole-SStom_Index
0000DA38                            
0000DA38                            		;	routine		frame
0000DA38                            		;		 xpos
0000DA38 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DA3B 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DA3E 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DA41 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DA44                            
0000DA44                            ;word_B9BE:	; Note that this indicates three subtypes
0000DA44 3800                       SStom_Len:	dc.w $3800	; short
0000DA46 A000                       		dc.w $A000	; long
0000DA48 5000                       		dc.w $5000	; medium
0000DA4A                            ; ===========================================================================
0000DA4A                            
0000DA4A                            SStom_Main:	; Routine 0
0000DA4A 7000                       		moveq	#0,d0
0000DA4C 1028 0028                  		move.b	obSubtype(a0),d0
0000DA50 D040                       		add.w	d0,d0
0000DA52 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DA56 45F9 0000 DA38             		lea	(SStom_Var).l,a2
0000DA5C 2248                       		movea.l	a0,a1
0000DA5E 7203                       		moveq	#3,d1
0000DA60 6000                       		bra.s	@load
0000DA62                            
0000DA62                            	@loop:
0000DA62 6100 0000                  		bsr.w	FindNextFreeObj
0000DA66 6600                       		bne.s	@fail
0000DA68                            
0000DA68                            	@load:
0000DA68 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DA6C 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DA70 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DA76 101A                       		move.b	(a2)+,d0
0000DA78 4880                       		ext.w	d0
0000DA7A D068 0008                  		add.w	obX(a0),d0
0000DA7E 3340 0008                  		move.w	d0,obX(a1)
0000DA82 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DA8A 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DA90 137C 0004 0001             		move.b	#4,obRender(a1)
0000DA96 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DA9C 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DAA2 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DAA8 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DAAE 3342 0034                  		move.w	d2,$34(a1)
0000DAB2 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DAB8 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DABC 6600                       		bne.s	@notspikes	; if not, branch
0000DABE 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DAC4                            
0000DAC4                            	@notspikes:
0000DAC4 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DAC8 2348 003C                  		move.l	a0,$3C(a1)
0000DACC 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DAD0                            
0000DAD0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DAD6                            
0000DAD6                            	@fail:
0000DAD6 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DADC                            
0000DADC                            SStom_Solid:	; Routine 2
0000DADC 3F28 0008                  		move.w	obX(a0),-(sp)
0000DAE0 6100 0000                  		bsr.w	SStom_Move
0000DAE4 323C 0017                  		move.w	#$17,d1
0000DAE8 343C 0020                  		move.w	#$20,d2
0000DAEC 363C 0020                  		move.w	#$20,d3
0000DAF0 381F                       		move.w	(sp)+,d4
0000DAF2 6100 0000                  		bsr.w	SolidObject
0000DAF6 6100 0000                  		bsr.w	DisplaySprite
0000DAFA 6000 0000                  		bra.w	SStom_ChkDel
0000DAFE                            ; ===========================================================================
0000DAFE                            
0000DAFE                            SStom_Pole:	; Routine 8
0000DAFE 2268 003C                  		movea.l	$3C(a0),a1
0000DB02 1029 0032                  		move.b	$32(a1),d0
0000DB06 0600 0010                  		addi.b	#$10,d0
0000DB0A EA08                       		lsr.b	#5,d0
0000DB0C 5600                       		addq.b	#3,d0
0000DB0E 1140 001A                  		move.b	d0,obFrame(a0)
0000DB12                            
0000DB12                            loc_BA8E:	; Routine 4
0000DB12 2268 003C                  		movea.l	$3C(a0),a1
0000DB16 7000                       		moveq	#0,d0
0000DB18 1029 0032                  		move.b	$32(a1),d0
0000DB1C 4440                       		neg.w	d0
0000DB1E D068 0030                  		add.w	$30(a0),d0
0000DB22 3140 0008                  		move.w	d0,obX(a0)
0000DB26                            
0000DB26                            SStom_Display:	; Routine 6
0000DB26 6100 0000                  		bsr.w	DisplaySprite
0000DB2A                            
0000DB2A                            SStom_ChkDel:
0000DB48 4E75                       		rts	
0000DB4A                            
0000DB4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB4A                            
0000DB4A                            
0000DB4A                            SStom_Move:
0000DB4A 7000                       		moveq	#0,d0
0000DB4C 1028 0028                  		move.b	obSubtype(a0),d0
0000DB50 D040                       		add.w	d0,d0
0000DB52 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DB56 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DB5A                            ; End of function SStom_Move
0000DB5A                            
0000DB5A                            ; ===========================================================================
0000DB5A                            		; This indicates only two subtypes... that do the same thing
0000DB5A                            		; Compare to SStom_Len. This breaks subtype 02
0000DB5A 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DB5C 0000                       		dc.w loc_BADA-off_BAD6
0000DB5E                            ; ===========================================================================
0000DB5E                            
0000DB5E                            loc_BADA:
0000DB5E 4A68 0036                  		tst.w	$36(a0)
0000DB62 6700                       		beq.s	loc_BB08
0000DB64 4A68 0038                  		tst.w	$38(a0)
0000DB68 6700                       		beq.s	loc_BAEC
0000DB6A 5368 0038                  		subq.w	#1,$38(a0)
0000DB6E 6000                       		bra.s	loc_BB3C
0000DB70                            ; ===========================================================================
0000DB70                            
0000DB70                            loc_BAEC:
0000DB70 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DB76 6400                       		bcc.s	loc_BB3C
0000DB78 317C 0000 0032             		move.w	#0,$32(a0)
0000DB7E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DB84 317C 0000 0036             		move.w	#0,$36(a0)
0000DB8A 6000                       		bra.s	loc_BB3C
0000DB8C                            ; ===========================================================================
0000DB8C                            
0000DB8C                            loc_BB08:
0000DB8C 3228 0034                  		move.w	$34(a0),d1
0000DB90 B268 0032                  		cmp.w	$32(a0),d1
0000DB94 6700                       		beq.s	loc_BB3C
0000DB96 3028 0010                  		move.w	obVelX(a0),d0
0000DB9A 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DBA0 D168 0032                  		add.w	d0,$32(a0)
0000DBA4 B268 0032                  		cmp.w	$32(a0),d1
0000DBA8 6200                       		bhi.s	loc_BB3C
0000DBAA 3141 0032                  		move.w	d1,$32(a0)
0000DBAE 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DBB4 317C 0001 0036             		move.w	#1,$36(a0)
0000DBBA 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DBC0                            
0000DBC0                            loc_BB3C:
0000DBC0 7000                       		moveq	#0,d0
0000DBC2 1028 0032                  		move.b	$32(a0),d0
0000DBC6 4440                       		neg.w	d0
0000DBC8 D068 0030                  		add.w	$30(a0),d0
0000DBCC 3140 0008                  		move.w	d0,obX(a0)
0000DBD0 4E75                       		rts	
0000DBD0 4E75                       		rts	
0000DBD2                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DBD2                            ; ---------------------------------------------------------------------------
0000DBD2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DBD2                            ; ---------------------------------------------------------------------------
0000DBD2                            Map_CStom_internal:
0000DBD2 0000                       		dc.w @wideblock-Map_CStom_internal
0000DBD4 0000                       		dc.w @spikes-Map_CStom_internal
0000DBD6 0000                       		dc.w @ceiling-Map_CStom_internal
0000DBD8 0000                       		dc.w @chain1-Map_CStom_internal
0000DBDA 0000                       		dc.w @chain2-Map_CStom_internal
0000DBDC 0000                       		dc.w @chain3-Map_CStom_internal
0000DBDE 0000                       		dc.w @chain4-Map_CStom_internal
0000DBE0 0000                       		dc.w @chain5-Map_CStom_internal
0000DBE2 0000                       		dc.w @chain5-Map_CStom_internal
0000DBE4 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DBE6 0000                       		dc.w @smallblock-Map_CStom_internal
0000DBE8 05                         @wideblock:	dc.b 5
0000DBE9 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DBEE F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DBF3 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DBF8 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DBFD F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DC02 05                         @spikes:	dc.b 5
0000DC03 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DC08 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DC0D F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DC12 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DC17 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DC1C 01                         @ceiling:	dc.b 1
0000DC1D DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DC22 02                         @chain1:	dc.b 2
0000DC23 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC28 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC2D 04                         @chain2:	dc.b 4
0000DC2E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DC33 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DC38 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC3D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC42 06                         @chain3:	dc.b 6
0000DC43 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DC48 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DC4D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DC52 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DC57 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC5C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC61 08                         @chain4:	dc.b 8
0000DC62 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DC67 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DC6C C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DC71 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DC76 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DC7B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DC80 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DC85 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DC8A 0A                         @chain5:	dc.b $A
0000DC8B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DC90 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DC95 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DC9A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DC9F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DCA4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DCA9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DCAE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DCB3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DCB8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DCBD 05                         @mediumblock:	dc.b 5
0000DCBE F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DCC3 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DCC8 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DCCD F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DCD2 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DCD7 01                         @smallblock:	dc.b 1
0000DCD8 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DCDE 00                         		even
0000DCDE 00                         		even
0000DCDE                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DCDE                            ; ---------------------------------------------------------------------------
0000DCDE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DCDE                            ; ---------------------------------------------------------------------------
0000DCDE                            Map_SStom_internal:
0000DCDE 0000                       		dc.w @block-Map_SStom_internal
0000DCE0 0000                       		dc.w @spikes-Map_SStom_internal
0000DCE2 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DCE4 0000                       		dc.w @pole1-Map_SStom_internal
0000DCE6 0000                       		dc.w @pole2-Map_SStom_internal
0000DCE8 0000                       		dc.w @pole3-Map_SStom_internal
0000DCEA 0000                       		dc.w @pole4-Map_SStom_internal
0000DCEC 0000                       		dc.w @pole5-Map_SStom_internal
0000DCEE 0000                       		dc.w @pole5-Map_SStom_internal
0000DCF0 03                         @block:		dc.b 3
0000DCF1 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DCF6 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DCFB F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DD00 03                         @spikes:	dc.b 3
0000DD01 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DD06 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DD0B 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DD10 01                         @wallbracket:	dc.b 1
0000DD11 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DD16 02                         @pole1:		dc.b 2
0000DD17 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DD1C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD21 04                         @pole2:		dc.b 4
0000DD22 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD27 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD2C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD31 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD36 06                         @pole3:		dc.b 6
0000DD37 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD3C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD41 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD46 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD4B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DD50 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DD55 08                         @pole4:		dc.b 8
0000DD56 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD5B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD60 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD65 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD6A F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DD6F F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DD74 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DD79 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DD7E 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DD7F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DD84 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DD89 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DD8E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DD93 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DD98 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DD9D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DDA2 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DDA7 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DDAC F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DDB1                            		; @pole6 should be here, but it isn't...
0000DDB2 00                         		even
0000DDB2 00                         		even
0000DDB2                            
0000DDB2                            		include	"_incObj\32 Button.asm"
0000DDB2                            ; ---------------------------------------------------------------------------
0000DDB2                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DDB2                            ; ---------------------------------------------------------------------------
0000DDB2                            
0000DDB2                            Button:
0000DDB2 7000                       		moveq	#0,d0
0000DDB4 1028 0024                  		move.b	obRoutine(a0),d0
0000DDB8 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DDBC 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DDC0                            ; ===========================================================================
0000DDC0 0000                       But_Index:	dc.w But_Main-But_Index
0000DDC2 0000                       		dc.w But_Pressed-But_Index
0000DDC4                            ; ===========================================================================
0000DDC4                            
0000DDC4                            But_Main:	; Routine 0
0000DDC4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DDC8 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DDD0 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DDD6 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DDDC 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DDDE                            
0000DDDE 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DDE4                            
0000DDE4                            	But_IsMZ:
0000DDE4 117C 0004 0001             		move.b	#4,obRender(a0)
0000DDEA 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DDF0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DDF6 5668 000C                  		addq.w	#3,obY(a0)
0000DDFA                            
0000DDFA                            But_Pressed:	; Routine 2
0000DDFA 4A28 0001                  		tst.b	obRender(a0)
0000DDFE 6A00                       		bpl.s	But_Display
0000DE00 323C 001B                  		move.w	#$1B,d1
0000DE04 343C 0005                  		move.w	#5,d2
0000DE08 363C 0005                  		move.w	#5,d3
0000DE0C 3828 0008                  		move.w	obX(a0),d4
0000DE10 6100 0000                  		bsr.w	SolidObject
0000DE14 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DE1A 1028 0028                  		move.b	obSubtype(a0),d0
0000DE1E 0240 000F                  		andi.w	#$F,d0
0000DE22 47F8 F7E0                  		lea	(f_switch).w,a3
0000DE26 47F3 0000                  		lea	(a3,d0.w),a3
0000DE2A 7600                       		moveq	#0,d3
0000DE2C 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DE32 6700                       		beq.s	loc_BDB2
0000DE34 7607                       		moveq	#7,d3
0000DE36                            
0000DE36                            loc_BDB2:
0000DE36 4A28 0028                  		tst.b	obSubtype(a0)
0000DE3A 6A00                       		bpl.s	loc_BDBE
0000DE3C 6100 0000                  		bsr.w	But_MZBlock
0000DE40 6600                       		bne.s	loc_BDC8
0000DE42                            
0000DE42                            loc_BDBE:
0000DE42 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DE46 6600                       		bne.s	loc_BDC8
0000DE48 0793                       		bclr	d3,(a3)
0000DE4A 6000                       		bra.s	loc_BDDE
0000DE4C                            ; ===========================================================================
0000DE4C                            
0000DE4C                            loc_BDC8:
0000DE4C 4A13                       		tst.b	(a3)
0000DE4E 6600                       		bne.s	loc_BDD6
0000DE5A                            
0000DE5A                            loc_BDD6:
0000DE5A 07D3                       		bset	d3,(a3)
0000DE5C 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DE62                            
0000DE62                            loc_BDDE:
0000DE62 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DE68 6700                       		beq.s	But_Display
0000DE6A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DE6E 6A00                       		bpl.s	But_Display
0000DE70 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DE76 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DE7C                            
0000DE7C                            But_Display:
0000DE7C 6100 0000                  		bsr.w	DisplaySprite
0000DE9E 4E75                       		rts	
0000DEA0                            ; ===========================================================================
0000DEA0                            
0000DEA0                            But_Delete:
0000DEA0 6100 0000                  		bsr.w	DeleteObject
0000DEA4 4E75                       		rts	
0000DEA6                            
0000DEA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA6                            
0000DEA6                            
0000DEA6                            But_MZBlock:
0000DEA6 3F03                       		move.w	d3,-(sp)
0000DEA8 3428 0008                  		move.w	obX(a0),d2
0000DEAC 3628 000C                  		move.w	obY(a0),d3
0000DEB0 0442 0010                  		subi.w	#$10,d2
0000DEB4 5143                       		subq.w	#8,d3
0000DEB6 383C 0020                  		move.w	#$20,d4
0000DEBA 3A3C 0010                  		move.w	#$10,d5
0000DEBE 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DEC2 3C3C 005F                  		move.w	#$5F,d6
0000DEC6                            
0000DEC6                            But_MZLoop:
0000DEC6 4A29 0001                  		tst.b	obRender(a1)
0000DECA 6A00                       		bpl.s	loc_BE4E
0000DECC 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DED0 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DED2                            
0000DED2                            loc_BE4E:
0000DED2 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DED6 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DEDA                            
0000DEDA 361F                       		move.w	(sp)+,d3
0000DEDC 7000                       		moveq	#0,d0
0000DEDE                            
0000DEDE                            locret_BE5A:
0000DEDE 4E75                       		rts	
0000DEE0                            ; ===========================================================================
0000DEE0 1010                       But_MZData:	dc.b $10, $10
0000DEE2                            ; ===========================================================================
0000DEE2                            
0000DEE2                            loc_BE5E:
0000DEE2 7001                       		moveq	#1,d0
0000DEE4 0240 003F                  		andi.w	#$3F,d0
0000DEE8 D040                       		add.w	d0,d0
0000DEEA 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DEEE 121A                       		move.b	(a2)+,d1
0000DEF0 4881                       		ext.w	d1
0000DEF2 3029 0008                  		move.w	obX(a1),d0
0000DEF6 9041                       		sub.w	d1,d0
0000DEF8 9042                       		sub.w	d2,d0
0000DEFA 6400                       		bcc.s	loc_BE80
0000DEFC D241                       		add.w	d1,d1
0000DEFE D041                       		add.w	d1,d0
0000DF00 6500                       		bcs.s	loc_BE84
0000DF02 60CE                       		bra.s	loc_BE4E
0000DF04                            ; ===========================================================================
0000DF04                            
0000DF04                            loc_BE80:
0000DF04 B044                       		cmp.w	d4,d0
0000DF06 62CA                       		bhi.s	loc_BE4E
0000DF08                            
0000DF08                            loc_BE84:
0000DF08 121A                       		move.b	(a2)+,d1
0000DF0A 4881                       		ext.w	d1
0000DF0C 3029 000C                  		move.w	obY(a1),d0
0000DF10 9041                       		sub.w	d1,d0
0000DF12 9043                       		sub.w	d3,d0
0000DF14 6400                       		bcc.s	loc_BE9A
0000DF16 D241                       		add.w	d1,d1
0000DF18 D041                       		add.w	d1,d0
0000DF1A 6500                       		bcs.s	loc_BE9E
0000DF1C 60B4                       		bra.s	loc_BE4E
0000DF1E                            ; ===========================================================================
0000DF1E                            
0000DF1E                            loc_BE9A:
0000DF1E B045                       		cmp.w	d5,d0
0000DF20 62B0                       		bhi.s	loc_BE4E
0000DF22                            
0000DF22                            loc_BE9E:
0000DF22 361F                       		move.w	(sp)+,d3
0000DF24 7001                       		moveq	#1,d0
0000DF26 4E75                       		rts	
0000DF28                            ; End of function But_MZBlock
0000DF28                            ; End of function But_MZBlock
0000DF28                            Map_But:	include	"_maps\Button.asm"
0000DF28                            ; ---------------------------------------------------------------------------
0000DF28                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DF28                            ; ---------------------------------------------------------------------------
0000DF28                            Map_But_internal:
0000DF28 0000                       		dc.w byte_BEAC-Map_But_internal
0000DF2A 0000                       		dc.w byte_BEB7-Map_But_internal
0000DF2C 0000                       		dc.w byte_BEC2-Map_But_internal
0000DF2E 0000                       		dc.w byte_BEB7-Map_But_internal
0000DF30 02                         byte_BEAC:	dc.b 2
0000DF31 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DF36 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DF3B 02                         byte_BEB7:	dc.b 2
0000DF3C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DF41 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DF46 02                         byte_BEC2:	dc.b 2
0000DF47 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DF4C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DF51 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DF56                            		even
0000DF56                            		even
0000DF56                            
0000DF56                            		include	"_incObj\33 Pushable Blocks.asm"
0000DF56                            ; ---------------------------------------------------------------------------
0000DF56                            ; Object 33 - pushable blocks (MZ, LZ)
0000DF56                            ; ---------------------------------------------------------------------------
0000DF56                            
0000DF56                            PushBlock:
0000DF56 7000                       		moveq	#0,d0
0000DF58 1028 0024                  		move.b	obRoutine(a0),d0
0000DF5C 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DF60 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DF64                            ; ===========================================================================
0000DF64 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DF66 0000                       		dc.w loc_BF6E-PushB_Index
0000DF68 0000                       		dc.w loc_C02C-PushB_Index
0000DF6A                            
0000DF6A 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DF6C 4001                       		dc.b $40, 1
0000DF6E                            ; ===========================================================================
0000DF6E                            
0000DF6E                            PushB_Main:	; Routine 0
0000DF6E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DF72 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DF78 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DF7E 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DF86 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DF8C 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DF92 6600                       		bne.s	@notLZ
0000DF94 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DF9A                            
0000DF9A                            	@notLZ:
0000DF9A 117C 0004 0001             		move.b	#4,obRender(a0)
0000DFA0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000DFA6 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000DFAC 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000DFB2 7000                       		moveq	#0,d0
0000DFB4 1028 0028                  		move.b	obSubtype(a0),d0
0000DFB8 D040                       		add.w	d0,d0
0000DFBA 0240 000E                  		andi.w	#$E,d0
0000DFBE 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000DFC2 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DFC6 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DFCA 4A28 0028                  		tst.b	obSubtype(a0)
0000DFCE 6700                       		beq.s	@chkgone
0000DFD0 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000DFD6                            
0000DFD6                            	@chkgone:
0000DFD6 45F8 FC00                  		lea	(v_objstate).w,a2
0000DFDA 7000                       		moveq	#0,d0
0000DFDC 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DFE0 6700                       		beq.s	loc_BF6E
0000DFE2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000DFE8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000DFEE 6600 0000                  		bne.w	DeleteObject
0000DFF2                            
0000DFF2                            loc_BF6E:	; Routine 2
0000DFF2 4A28 0032                  		tst.b	$32(a0)
0000DFF6 6600 0000                  		bne.w	loc_C046
0000DFFA 7200                       		moveq	#0,d1
0000DFFC 1228 0014                  		move.b	obActWid(a0),d1
0000E000 0641 000B                  		addi.w	#$B,d1
0000E004 343C 0010                  		move.w	#$10,d2
0000E008 363C 0011                  		move.w	#$11,d3
0000E00C 3828 0008                  		move.w	obX(a0),d4
0000E010 6100 0000                  		bsr.w	loc_C186
0000E014 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E01A 6600                       		bne.s	loc_BFC6	; if not, branch
0000E01C 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E022 3028 0008                  		move.w	obX(a0),d0
0000E026 0C40 0A20                  		cmpi.w	#$A20,d0
0000E02A 6500                       		bcs.s	loc_BFC6
0000E02C 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E030 6400                       		bcc.s	loc_BFC6
0000E032 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E036 0440 001C                  		subi.w	#$1C,d0
0000E03A 3140 000C                  		move.w	d0,obY(a0)
0000E03E 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E044 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E04A                            
0000E04A                            	loc_BFC6:
0000E066 6000 0000                  		bra.w	DisplaySprite
0000E06A                            ; ===========================================================================
0000E06A                            
0000E06A                            loc_ppppp:
0000E086 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E08C 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E092 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E098 6000                       		bra.s	loc_C02C
0000E09A                            ; ===========================================================================
0000E09A                            
0000E09A                            loc_C016:
0000E09A 45F8 FC00                  		lea	(v_objstate).w,a2
0000E09E 7000                       		moveq	#0,d0
0000E0A0 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E0A4 6700                       		beq.s	loc_C028
0000E0A6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E0AC                            
0000E0AC                            loc_C028:
0000E0AC 6000 0000                  		bra.w	DeleteObject
0000E0B0                            ; ===========================================================================
0000E0B0                            
0000E0B0                            loc_C02C:	; Routine 4
0000E0B0 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E0B4 6700                       		beq.s	locret_C044
0000E0B6 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E0BC 4228 0032                  		clr.b	$32(a0)
0000E0C0 4268 0010                  		clr.w	obVelX(a0)
0000E0C4 4268 0012                  		clr.w	obVelY(a0)
0000E0C8                            
0000E0C8                            locret_C044:
0000E0C8 4E75                       		rts	
0000E0CA                            ; ===========================================================================
0000E0CA                            
0000E0CA                            loc_C046:
0000E0CA 3F28 0008                  		move.w	obX(a0),-(sp)
0000E0CE 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E0D4 6400                       		bcc.s	loc_C056
0000E0D6 6100 0000                  		bsr.w	SpeedToPos
0000E0DA                            
0000E0DA                            loc_C056:
0000E0DA 0828 0001 0022             		btst	#1,obStatus(a0)
0000E0E0 6700                       		beq.s	loc_C0A0
0000E0E2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E0E8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E0EE 4A41                       		tst.w	d1
0000E0F0 6A00 0000                  		bpl.w	loc_C09E
0000E0F4 D368 000C                  		add.w	d1,obY(a0)
0000E0F8 4268 0012                  		clr.w	obVelY(a0)
0000E0FC 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E102 3011                       		move.w	(a1),d0
0000E104 0240 03FF                  		andi.w	#$3FF,d0
0000E108 0C40 016A                  		cmpi.w	#$16A,d0
0000E10C 6500                       		bcs.s	loc_C09E
0000E10E 3028 0030                  		move.w	$30(a0),d0
0000E112 E640                       		asr.w	#3,d0
0000E114 3140 0010                  		move.w	d0,obVelX(a0)
0000E118 117C 0001 0032             		move.b	#1,$32(a0)
0000E11E 4268 000E                  		clr.w	$E(a0)
0000E122                            
0000E122                            loc_C09E:
0000E122 6000                       		bra.s	loc_C0E6
0000E124                            ; ===========================================================================
0000E124                            
0000E124                            loc_C0A0:
0000E124 4A68 0010                  		tst.w	obVelX(a0)
0000E128 6700 0000                  		beq.w	loc_C0D6
0000E12C 6B00                       		bmi.s	loc_C0BC
0000E12E 7600                       		moveq	#0,d3
0000E130 1628 0014                  		move.b	obActWid(a0),d3
0000E134 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E13A 4A41                       		tst.w	d1		; has block touched a wall?
0000E13C 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E13E 6000                       		bra.s	loc_C0E6
0000E140                            ; ===========================================================================
0000E140                            
0000E140                            loc_C0BC:
0000E140 7600                       		moveq	#0,d3
0000E142 1628 0014                  		move.b	obActWid(a0),d3
0000E146 4643                       		not.w	d3
0000E148 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E14E 4A41                       		tst.w	d1		; has block touched a wall?
0000E150 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E152 6000                       		bra.s	loc_C0E6
0000E154                            ; ===========================================================================
0000E154                            
0000E154                            PushB_StopPush:
0000E154 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E158 6000                       		bra.s	loc_C0E6
0000E15A                            ; ===========================================================================
0000E15A                            
0000E15A                            loc_C0D6:
0000E15A 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E162 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E168 6400                       		bcc.s	loc_C104
0000E16A                            
0000E16A                            loc_C0E6:
0000E16A 7200                       		moveq	#0,d1
0000E16C 1228 0014                  		move.b	obActWid(a0),d1
0000E170 0641 000B                  		addi.w	#$B,d1
0000E174 343C 0010                  		move.w	#$10,d2
0000E178 363C 0011                  		move.w	#$11,d3
0000E17C 381F                       		move.w	(sp)+,d4
0000E17E 6100 0000                  		bsr.w	loc_C186
0000E182 6100                       		bsr.s	PushB_ChkLava
0000E184 6000 FEC4                  		bra.w	loc_BFC6
0000E188                            ; ===========================================================================
0000E188                            
0000E188                            loc_C104:
0000E188 381F                       		move.w	(sp)+,d4
0000E18A 43F8 D000                  		lea	(v_player).w,a1
0000E18E 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E194 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E19A 6000 FECE                  		bra.w	loc_ppppp
0000E19E                            ; ===========================================================================
0000E19E                            
0000E19E                            PushB_ChkLava:
0000E19E 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E1A4 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E1A6 343C FFE0                  		move.w	#-$20,d2
0000E1AA 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E1B0 6700                       		beq.s	PushB_LoadLava
0000E1B2 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E1B8 6700                       		beq.s	PushB_LoadLava
0000E1BA 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E1C0 6700                       		beq.s	PushB_LoadLava
0000E1C2 4E75                       		rts	
0000E1C4                            ; ===========================================================================
0000E1C4                            
0000E1C4                            PushB_ChkLava2:
0000E1C4 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E1CA 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E1CC 343C 0020                  		move.w	#$20,d2
0000E1D0 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E1D6 6700                       		beq.s	PushB_LoadLava
0000E1D8 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E1DE 6700                       		beq.s	PushB_LoadLava
0000E1E0                            
0000E1E0                            PushB_NoLava:
0000E1E0 4E75                       		rts	
0000E1E2                            ; ===========================================================================
0000E1E2                            
0000E1E2                            PushB_LoadLava:
0000E1E2 6100 0000                  		bsr.w	FindFreeObj
0000E1E6 6600                       		bne.s	locret_C184
0000E1E8 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E1EC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E1F2 D569 0008                  		add.w	d2,obX(a1)
0000E1F6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E1FC 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E202 2348 003C                  		move.l	a0,$3C(a1)
0000E206                            
0000E206                            locret_C184:
0000E206 4E75                       		rts	
0000E208                            ; ===========================================================================
0000E208                            
0000E208                            loc_C186:
0000E208 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E20C 6700 0000                  		beq.w	loc_C218
0000E210 5500                       		subq.b	#2,d0
0000E212 6600                       		bne.s	loc_C1AA
0000E214 6100 AD66                  		bsr.w	ExitPlatform
0000E218 0829 0003 0022             		btst	#3,obStatus(a1)
0000E21E 6600                       		bne.s	loc_C1A4
0000E220 4228 0025                  		clr.b	ob2ndRout(a0)
0000E224 4E75                       		rts	
0000E226                            ; ===========================================================================
0000E226                            
0000E226                            loc_C1A4:
0000E226 3404                       		move.w	d4,d2
0000E228 6000 B2B0                  		bra.w	MvSonicOnPtfm
0000E22C                            ; ===========================================================================
0000E22C                            
0000E22C                            loc_C1AA:
0000E22C 5500                       		subq.b	#2,d0
0000E22E 6600                       		bne.s	loc_C1F2
0000E230 6100 0000                  		bsr.w	SpeedToPos
0000E234 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E23A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E240 4A41                       		tst.w	d1
0000E242 6A00 0000                  		bpl.w	locret_C1F0
0000E246 D368 000C                  		add.w	d1,obY(a0)
0000E24A 4268 0012                  		clr.w	obVelY(a0)
0000E24E 4228 0025                  		clr.b	ob2ndRout(a0)
0000E252 3011                       		move.w	(a1),d0
0000E254 0240 03FF                  		andi.w	#$3FF,d0
0000E258 0C40 016A                  		cmpi.w	#$16A,d0
0000E25C 6500                       		bcs.s	locret_C1F0
0000E25E 3028 0030                  		move.w	$30(a0),d0
0000E262 E640                       		asr.w	#3,d0
0000E264 3140 0010                  		move.w	d0,obVelX(a0)
0000E268 117C 0001 0032             		move.b	#1,$32(a0)
0000E26E 4268 000E                  		clr.w	obY+2(a0)
0000E272                            
0000E272                            locret_C1F0:
0000E272 4E75                       		rts	
0000E274                            ; ===========================================================================
0000E274                            
0000E274                            loc_C1F2:
0000E274 6100 0000                  		bsr.w	SpeedToPos
0000E278 3028 0008                  		move.w	obX(a0),d0
0000E27C 0240 000C                  		andi.w	#$C,d0
0000E280 6600 0000                  		bne.w	locret_C2E4
0000E284 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E28A 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E290 4268 0010                  		clr.w	obVelX(a0)
0000E294 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E298 4E75                       		rts	
0000E29A                            ; ===========================================================================
0000E29A                            
0000E29A                            loc_C218:
0000E29A 6100 0000                  		bsr.w	Solid_ChkEnter
0000E29E 4A44                       		tst.w	d4
0000E2A0 6700 0000                  		beq.w	locret_C2E4
0000E2A4 6B00 0000                  		bmi.w	locret_C2E4
0000E2A8 4A28 0032                  		tst.b	$32(a0)
0000E2AC 6700                       		beq.s	loc_C230
0000E2AE 6000 0000                  		bra.w	locret_C2E4
0000E2B2                            ; ===========================================================================
0000E2B2                            
0000E2B2                            loc_C230:
0000E2B2 4A40                       		tst.w	d0
0000E2B4 6700 0000                  		beq.w	locret_C2E4
0000E2B8 6B00                       		bmi.s	loc_C268
0000E2BA 0829 0000 0022             		btst	#0,obStatus(a1)
0000E2C0 6600 0000                  		bne.w	locret_C2E4
0000E2C4 3F00                       		move.w	d0,-(sp)
0000E2C6 7600                       		moveq	#0,d3
0000E2C8 1628 0014                  		move.b	obActWid(a0),d3
0000E2CC 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E2D2 301F                       		move.w	(sp)+,d0
0000E2D4 4A41                       		tst.w	d1
0000E2D6 6B00 0000                  		bmi.w	locret_C2E4
0000E2DA 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E2E2 7001                       		moveq	#1,d0
0000E2E4 323C 0040                  		move.w	#$40,d1
0000E2E8 6000                       		bra.s	loc_C294
0000E2EA                            ; ===========================================================================
0000E2EA                            
0000E2EA                            loc_C268:
0000E2EA 0829 0000 0022             		btst	#0,obStatus(a1)
0000E2F0 6700                       		beq.s	locret_C2E4
0000E2F2 3F00                       		move.w	d0,-(sp)
0000E2F4 7600                       		moveq	#0,d3
0000E2F6 1628 0014                  		move.b	obActWid(a0),d3
0000E2FA 4643                       		not.w	d3
0000E2FC 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E302 301F                       		move.w	(sp)+,d0
0000E304 4A41                       		tst.w	d1
0000E306 6B00                       		bmi.s	locret_C2E4
0000E308 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E310 70FF                       		moveq	#-1,d0
0000E312 323C FFC0                  		move.w	#-$40,d1
0000E316                            
0000E316                            loc_C294:
0000E316 43F8 D000                  		lea	(v_player).w,a1
0000E31A D169 0008                  		add.w	d0,obX(a1)
0000E31E 3341 0020                  		move.w	d1,obInertia(a1)
0000E322 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E328 3F00                       		move.w	d0,-(sp)
0000E334 301F                       		move.w	(sp)+,d0
0000E336 4A28 0028                  		tst.b	obSubtype(a0)
0000E33A 6B00                       		bmi.s	locret_C2E4
0000E33C 3F00                       		move.w	d0,-(sp)
0000E33E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E344 301F                       		move.w	(sp)+,d0
0000E346 0C41 0004                  		cmpi.w	#4,d1
0000E34A 6F00                       		ble.s	loc_C2E0
0000E34C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E352 4A40                       		tst.w	d0
0000E354 6A00                       		bpl.s	loc_C2D8
0000E356 4468 0010                  		neg.w	obVelX(a0)
0000E35A                            
0000E35A                            loc_C2D8:
0000E35A 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E360 6000                       		bra.s	locret_C2E4
0000E362                            ; ===========================================================================
0000E362                            
0000E362                            loc_C2E0:
0000E362 D368 000C                  		add.w	d1,obY(a0)
0000E366                            
0000E366                            locret_C2E4:
0000E366 4E75                       		rts	
0000E366 4E75                       		rts	
0000E368                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E368                            ; ---------------------------------------------------------------------------
0000E368                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E368                            ; ---------------------------------------------------------------------------
0000E368                            Map_Push_internal:
0000E368 0000                       		dc.w @single-Map_Push_internal
0000E36A 0000                       		dc.w @four-Map_Push_internal
0000E36C 01                         @single:	dc.b 1
0000E36D F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E372 04                         @four:		dc.b 4
0000E373 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E378 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E37D F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E382 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E388 00                         		even
0000E388 00                         		even
0000E388                            
0000E388                            		include	"_incObj\34 Title Cards.asm"
0000E388                            ; ---------------------------------------------------------------------------
0000E388                            ; Object 34 - zone title cards
0000E388                            ; ---------------------------------------------------------------------------
0000E388                            
0000E388                            TitleCard:
0000E388 7000                       		moveq	#0,d0
0000E38A 1028 0024                  		move.b	obRoutine(a0),d0
0000E38E 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E392 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E396                            ; ===========================================================================
0000E396 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E398 0000                       		dc.w Card_ChkPos-Card_Index
0000E39A 0000                       		dc.w Card_Wait-Card_Index
0000E39C 0000                       		dc.w Card_Wait-Card_Index
0000E39E                            
0000E39E =00000030                  card_mainX:	equ $30		; position for card to display on
0000E39E =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E39E                            ; ===========================================================================
0000E39E                            
0000E39E                            Card_CheckSBZ3:	; Routine 0
0000E39E 2248                       		movea.l	a0,a1
0000E3A0 7000                       		moveq	#0,d0
0000E3A2 1038 FE10                  		move.b	(v_zone).w,d0
0000E3A6 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E3AC 6600                       		bne.s	Card_CheckFZ
0000E3AE 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E3B0                            
0000E3B0                            	Card_CheckFZ:
0000E3B0 3400                       		move.w	d0,d2
0000E3B2 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E3B8 6600                       		bne.s	Card_LoadConfig
0000E3BA 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E3BC 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E3BE                            
0000E3BE                            	Card_LoadConfig:
0000E3BE 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E3C4 E948                       		lsl.w	#4,d0
0000E3C6 D6C0                       		adda.w	d0,a3
0000E3C8 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E3CE 7203                       		moveq	#3,d1
0000E3D0                            
0000E3D0                            Card_Loop:
0000E3D0 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E3D4 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E3D8 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E3DC 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E3E0 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E3E4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E3E8 101A                       		move.b	(a2)+,d0
0000E3EA 6600                       		bne.s	Card_ActNumber
0000E3EC 1002                       		move.b	d2,d0
0000E3EE                            
0000E3EE                            	Card_ActNumber:
0000E3EE 0C00 0007                  		cmpi.b	#7,d0
0000E3F2 6600                       		bne.s	Card_MakeSprite
0000E3F4 D038 FE11                  		add.b	(v_act).w,d0
0000E3F8 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E3FE 6600                       		bne.s	Card_MakeSprite
0000E400 5300                       		subq.b	#1,d0
0000E402                            
0000E402                            	Card_MakeSprite:
0000E402 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E406 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E40E 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E414 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E41A 137C 0000 0001             		move.b	#0,obRender(a1)
0000E420 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E426 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E42C 43E9 0040                  		lea	$40(a1),a1	; next object
0000E430 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E434                            
0000E434                            Card_ChkPos:	; Routine 2
0000E434 7210                       		moveq	#$10,d1		; set horizontal speed
0000E436 3028 0030                  		move.w	card_mainX(a0),d0
0000E43A B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E43E 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E440 6C00                       		bge.s	Card_Move
0000E442 4441                       		neg.w	d1
0000E444                            
0000E444                            Card_Move:
0000E444 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E448                            
0000E448                            Card_NoMove:
0000E448 3028 0008                  		move.w	obX(a0),d0
0000E44C 6B00                       		bmi.s	locret_C3D8
0000E44E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E452 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E454 6000 0000                  		bra.w	DisplaySprite
0000E458                            ; ===========================================================================
0000E458                            
0000E458                            locret_C3D8:
0000E458 4E75                       		rts	
0000E45A                            ; ===========================================================================
0000E45A                            
0000E45A                            Card_Wait:	; Routine 4/6
0000E45A 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E45E 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E460 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E464 6000 0000                  		bra.w	DisplaySprite
0000E468                            ; ===========================================================================
0000E468                            
0000E468                            Card_ChkPos2:
0000E468 4A28 0001                  		tst.b	obRender(a0)
0000E46C 6A00                       		bpl.s	Card_ChangeArt
0000E46E 7220                       		moveq	#$20,d1
0000E470 3028 0032                  		move.w	card_finalX(a0),d0
0000E474 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E478 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E47A 6C00                       		bge.s	Card_Move2
0000E47C 4441                       		neg.w	d1
0000E47E                            
0000E47E                            Card_Move2:
0000E47E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E482 3028 0008                  		move.w	obX(a0),d0
0000E486 6B00                       		bmi.s	locret_C412
0000E488 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E48C 6400                       		bcc.s	locret_C412	; if yes, branch
0000E48E 6000 0000                  		bra.w	DisplaySprite
0000E492                            ; ===========================================================================
0000E492                            
0000E492                            locret_C412:
0000E492 4E75                       		rts	
0000E494                            ; ===========================================================================
0000E494                            
0000E494                            Card_ChangeArt:
0000E494 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E49A 6600                       		bne.s	Card_Delete
0000E49C 7000                       		moveq	#plcid_Explode,d0
0000E49E 4EB9 0000 1466             		jsr	(AddPLC).l	; load explosion patterns
0000E4A4 7000                       		moveq	#0,d0
0000E4A6 1038 FE10                  		move.b	(v_zone).w,d0
0000E4AA 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E4AE 4EB9 0000 1466             		jsr	(AddPLC).l	; load animal patterns
0000E4B4                            
0000E4B4                            Card_Delete:
0000E4B4 6000 0000                  		bra.w	DeleteObject
0000E4B8                            ; ===========================================================================
0000E4B8 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E4BA 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E4BC 00E4                       		dc.w $E4
0000E4BE 0206                       		dc.b 2,	6
0000E4C0 00EA                       		dc.w $EA
0000E4C2 0207                       		dc.b 2,	7
0000E4C4 00E0                       		dc.w $E0
0000E4C6 020A                       		dc.b 2,	$A
0000E4C8                            ; ---------------------------------------------------------------------------
0000E4C8                            ; Title	card configuration data
0000E4C8                            ; Format:
0000E4C8                            ; 4 bytes per item (YYYY XXXX)
0000E4C8                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E4C8                            ; ---------------------------------------------------------------------------
0000E4C8 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E4D8 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E4E8 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E4F8 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E508 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E518 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E528 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E538                            ; ===========================================================================
0000E538                            ; ===========================================================================
0000E538                            		include	"_incObj\39 Game Over.asm"
0000E538                            ; ---------------------------------------------------------------------------
0000E538                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E538                            ; ---------------------------------------------------------------------------
0000E538                            
0000E538                            GameOverCard:
0000E538 7000                       		moveq	#0,d0
0000E53A 1028 0024                  		move.b	obRoutine(a0),d0
0000E53E 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E542 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E546                            ; ===========================================================================
0000E546 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E548 0000                       		dc.w Over_Move-Over_Index
0000E54A 0000                       		dc.w Over_Wait-Over_Index
0000E54C                            ; ===========================================================================
0000E54C                            
0000E54C                            Over_ChkPLC:	; Routine 0
0000E54C 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E550 6700                       		beq.s	Over_Main	; if yes, branch
0000E552 4E75                       		rts	
0000E554                            ; ===========================================================================
0000E554                            
0000E554                            Over_Main:
0000E554 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E558 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E55E 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E564 6700                       		beq.s	Over_1stWord	; if not, branch
0000E566 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E56C                            
0000E56C                            	Over_1stWord:
0000E56C 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E572 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E57A 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E580 117C 0000 0001             		move.b	#0,obRender(a0)
0000E586 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E58C                            
0000E58C                            Over_Move:	; Routine 2
0000E58C 7210                       		moveq	#$10,d1		; set horizontal speed
0000E58E 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E594 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E596 6500                       		bcs.s	Over_UpdatePos
0000E598 4441                       		neg.w	d1
0000E59A                            
0000E59A                            	Over_UpdatePos:
0000E59A D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E59E 6000 0000                  		bra.w	DisplaySprite
0000E5A2                            ; ===========================================================================
0000E5A2                            
0000E5A2                            Over_SetWait:
0000E5A2 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E5A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E5AC 4E75                       		rts	
0000E5AE                            ; ===========================================================================
0000E5AE                            
0000E5AE                            Over_Wait:	; Routine 4
0000E5AE 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E5B2 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E5B6 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E5B8 0828 0000 001A             		btst	#0,obFrame(a0)
0000E5BE 6600                       		bne.s	Over_Display
0000E5C0 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E5C4 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E5C6 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E5CA 6000 0000                  		bra.w	DisplaySprite
0000E5CE                            ; ===========================================================================
0000E5CE                            
0000E5CE                            Over_ChgMode:
0000E5CE 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E5D2 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E5D4 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E5DA 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E5DE 6600                       		bne.s	Over_Display	; if yes, branch
0000E5E0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E5E6 6000                       		bra.s	Over_Display
0000E5E8                            ; ===========================================================================
0000E5E8                            
0000E5E8                            Over_ResetLvl:
0000E5E8 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E5EC 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E5F2                            
0000E5F2                            Over_Display:
0000E5F2 6000 0000                  		bra.w	DisplaySprite
0000E5F2 6000 0000                  		bra.w	DisplaySprite
0000E5F6                            		include	"_incObj\3A Got Through Card.asm"
0000E5F6                            ; ---------------------------------------------------------------------------
0000E5F6                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E5F6                            ; ---------------------------------------------------------------------------
0000E5F6                            
0000E5F6                            GotThroughCard:
0000E5F6 7000                       		moveq	#0,d0
0000E5F8 1028 0024                  		move.b	obRoutine(a0),d0
0000E5FC 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E600 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E604                            ; ===========================================================================
0000E604 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E606 0000                       		dc.w Got_Move-Got_Index
0000E608 0000                       		dc.w Got_Wait-Got_Index
0000E60A 0000                       		dc.w Got_TimeBonus-Got_Index
0000E60C 0000                       		dc.w Got_Wait-Got_Index
0000E60E 0000                       		dc.w Got_NextLevel-Got_Index
0000E610 0000                       		dc.w Got_Wait-Got_Index
0000E612 0000                       		dc.w Got_Move2-Got_Index
0000E614 0000                       		dc.w loc_C766-Got_Index
0000E616                            
0000E616 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E616 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E616                            ; ===========================================================================
0000E616                            
0000E616                            Got_ChkPLC:	; Routine 0
0000E616 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E61A 6700                       		beq.s	Got_Main	; if yes, branch
0000E61C 4E75                       		rts	
0000E61E                            ; ===========================================================================
0000E61E                            
0000E61E                            Got_Main:
0000E61E 2248                       		movea.l	a0,a1
0000E620 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E626 7206                       		moveq	#6,d1
0000E628                            
0000E628                            Got_Loop:
0000E628 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E62C 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E630 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E634 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E638 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E63C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E640 101A                       		move.b	(a2)+,d0
0000E642 0C00 0006                  		cmpi.b	#6,d0
0000E646 6600                       		bne.s	loc_C5CA
0000E648 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E64C                            
0000E64C                            	loc_C5CA:
0000E64C 1340 001A                  		move.b	d0,obFrame(a1)
0000E650 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E658 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E65E 137C 0000 0001             		move.b	#0,obRender(a1)
0000E664 43E9 0040                  		lea	$40(a1),a1
0000E668 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E66C                            
0000E66C                            Got_Move:	; Routine 2
0000E66C 7210                       		moveq	#$10,d1		; set horizontal speed
0000E66E 3028 0030                  		move.w	got_mainX(a0),d0
0000E672 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E676 6700                       		beq.s	loc_C61A	; if yes, branch
0000E678 6C00                       		bge.s	Got_ChgPos
0000E67A 4441                       		neg.w	d1
0000E67C                            
0000E67C                            	Got_ChgPos:
0000E67C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E680                            
0000E680                            	loc_C5FE:
0000E680 3028 0008                  		move.w	obX(a0),d0
0000E684 6B00                       		bmi.s	locret_C60E
0000E686 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E68A 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E68C 6000 0000                  		bra.w	DisplaySprite
0000E690                            ; ===========================================================================
0000E690                            
0000E690                            locret_C60E:
0000E690 4E75                       		rts	
0000E692                            ; ===========================================================================
0000E692                            
0000E692                            loc_C610:
0000E692 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E698 6000 0000                  		bra.w	Got_Move2
0000E69C                            ; ===========================================================================
0000E69C                            
0000E69C                            loc_C61A:
0000E69C 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E6A2 67EE                       		beq.s	loc_C610
0000E6A4 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E6AA 66D4                       		bne.s	loc_C5FE
0000E6AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6B0 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E6B6                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E6B6                            
0000E6B6                            Got_Wait:	; Routine 4, 8, $C
0000E6B6 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E6BA 6600                       		bne.s	Got_Display
0000E6BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6C0                            
0000E6C0                            Got_Display:
0000E6C0 6000 0000                  		bra.w	DisplaySprite
0000E6C4                            ; ===========================================================================
0000E6C4                            
0000E6C4                            Got_TimeBonus:	; Routine 6
0000E6C4 6100 0000                  		bsr.w	DisplaySprite
0000E6C8 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E6CE 7000                       		moveq	#0,d0
0000E6D0 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E6D4 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E6D6 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E6DA 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E6E0                            
0000E6E0                            Got_RingBonus:
0000E6E0 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E6E4 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E6E6 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E6EA 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E6F0                            
0000E6F0                            Got_ChkBonus:
0000E6F0 4A40                       		tst.w	d0		; is there any bonus?
0000E6F2 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E6FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E702 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E708 6600                       		bne.s	Got_SetDelay
0000E70A 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E70E                            
0000E70E                            Got_SetDelay:
0000E70E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E714                            
0000E714                            locret_C692:
0000E714 4E75                       		rts	
0000E716                            ; ===========================================================================
0000E716                            
0000E716                            Got_AddBonus:
0000E716 4EB9 0000 0000             		jsr	(AddPoints).l
0000E71C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E720 0200 0003                  		andi.b	#3,d0
0000E724 66EE                       		bne.s	locret_C692
0000E730                            ; ===========================================================================
0000E730                            
0000E730                            Got_NextLevel:	; Routine $A
0000E730 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E736 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E73C 1038 FE10                  		move.b	(v_zone).w,d0
0000E740 0240 0007                  		andi.w	#7,d0
0000E744 E748                       		lsl.w	#3,d0
0000E746 1238 FE11                  		move.b	(v_act).w,d1
0000E74A 0241 0003                  		andi.w	#3,d1
0000E74E D241                       		add.w	d1,d1
0000E750 D041                       		add.w	d1,d0
0000E752 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E756 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E75A 4A40                       		tst.w	d0
0000E75C 6600                       		bne.s	Got_ChkSS
0000E75E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E764 6000                       		bra.s	Got_Display2
0000E766                            ; ===========================================================================
0000E766                            
0000E766                            Got_ChkSS:	
0000E766 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E76A 4A38 F5C3                  		tst.b	(f_emeraldm).w
0000E76E 6700                       		beq.s	VBla_08A
0000E770 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E77E 6000                       		bra.s	Got_Display2
0000E780 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E786                            		
0000E786                            ; ===========================================================================
0000E786                            
0000E786                            VBla_08A:
0000E786 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E78C                            
0000E78C                            Got_Display2:
0000E78C 6000 0000                  		bra.w	DisplaySprite
0000E790                            ; ===========================================================================
0000E790                            ; ---------------------------------------------------------------------------
0000E790                            ; Level	order array
0000E790                            ; ---------------------------------------------------------------------------
0000E790                            LevelOrder:
0000E790                            		; Green Hill Zone
0000E790 0001                       		dc.b id_GHZ, 1	; Act 2
0000E792 0002                       		dc.b id_GHZ, 2	; Act 2
0000E794 0200                       		dc.b id_MZ, 0	; Act 3
0000E796 0000                       		dc.b 0, 0
0000E798                            
0000E798                            		; Labyrinth Zone
0000E798 0101                       		dc.b id_LZ, 1	; Act 1
0000E79A 0102                       		dc.b id_LZ, 2	; Act 2
0000E79C 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E79E 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E7A0                            
0000E7A0                            		; Marble Zone
0000E7A0 0201                       		dc.b id_MZ, 1	; Act 1
0000E7A2 0202                       		dc.b id_MZ, 2	; Act 2
0000E7A4 0502                       		dc.b id_SBZ, 2	; Act 3
0000E7A6 0000                       		dc.b 0, 0
0000E7A8                            
0000E7A8                            		; Star Light Zone
0000E7A8 0301                       		dc.b id_SLZ, 1	; Act 1
0000E7AA 0302                       		dc.b id_SLZ, 2	; Act 2
0000E7AC 0500                       		dc.b id_SBZ, 0	; Act 3
0000E7AE 0000                       		dc.b 0, 0
0000E7B0                            
0000E7B0                            		; Spring Yard Zone
0000E7B0 0502                       		dc.b id_SBZ, 2	; Act 1
0000E7B2 0402                       		dc.b id_SYZ, 2	; Act 2
0000E7B4 0200                       		dc.b id_MZ,	 0	; Act 3
0000E7B6 0000                       		dc.b 0, 0
0000E7B8                            
0000E7B8                            		; Scrap Brain Zone
0000E7B8 0501                       		dc.b id_SBZ, 1	; Act 1
0000E7BA 0103                       		dc.b id_LZ, 3	; Act 2
0000E7BC 0000                       		dc.b 0, 0	; Final Zone
0000E7BE 0000                       		dc.b 0, 0
0000E7C0                            		even
0000E7C0                            ; ===========================================================================
0000E7C0                            
0000E7C0                            Got_Move2:	; Routine $E
0000E7C0 7220                       		moveq	#$20,d1		; set horizontal speed
0000E7C2 3028 0032                  		move.w	got_finalX(a0),d0
0000E7C6 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E7CA 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E7CC 6C00                       		bge.s	Got_ChgPos2
0000E7CE 4441                       		neg.w	d1
0000E7D0                            
0000E7D0                            	Got_ChgPos2:
0000E7D0 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E7D4 3028 0008                  		move.w	obX(a0),d0
0000E7D8 6B00                       		bmi.s	locret_C748
0000E7DA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E7DE 6400                       		bcc.s	locret_C748	; if yes, branch
0000E7E0 6000 0000                  		bra.w	DisplaySprite
0000E7E4                            ; ===========================================================================
0000E7E4                            
0000E7E4                            locret_C748:
0000E7E4 4E75                       		rts	
0000E7E6                            ; ===========================================================================
0000E7E6                            
0000E7E6                            Got_SBZ2:
0000E7E6 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E7EC 6600 0000                  		bne.w	DeleteObject
0000E7F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7F4 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E7F8 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E808                            ; ===========================================================================
0000E808                            
0000E808                            loc_C766:	; Routine $10
0000E808 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E80C 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E812 6700 0000                  		beq.w	DeleteObject
0000E816 4E75                       		rts	
0000E818                            ; ===========================================================================
0000E818                            		;    x-start,	x-main,	y-main,
0000E818                            		;				routine, frame number
0000E818                            
0000E818 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E81E 0200                       		dc.b 				2,	0
0000E820                            
0000E820 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E826 0201                       		dc.b 				2,	1
0000E828                            
0000E828 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E82E 0206                       		dc.b 				2,	6
0000E830                            
0000E830 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E836 0202                       		dc.b 				2,	2
0000E838                            
0000E838 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E83E 0203                       		dc.b 				2,	3
0000E840                            
0000E840 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E846 0204                       		dc.b 				2,	4
0000E848                            
0000E848 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E84E 0205                       		dc.b 				2,	5
0000E84E 0205                       		dc.b 				2,	5
0000E850                            		include	"_incObj\7E Special Stage Results.asm"
0000E850                            ; ---------------------------------------------------------------------------
0000E850                            ; Object 7E - special stage results screen
0000E850                            ; ---------------------------------------------------------------------------
0000E850                            
0000E850                            SSResult:
0000E850 7000                       		moveq	#0,d0
0000E852 1028 0024                  		move.b	obRoutine(a0),d0
0000E856 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E85A 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E85E                            ; ===========================================================================
0000E85E 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E860 0000                       		dc.w SSR_Move-SSR_Index
0000E862 0000                       		dc.w SSR_Wait-SSR_Index
0000E864 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E866 0000                       		dc.w SSR_Wait-SSR_Index
0000E868 0000                       		dc.w SSR_Exit-SSR_Index
0000E86A 0000                       		dc.w SSR_Wait-SSR_Index
0000E86C 0000                       		dc.w SSR_Continue-SSR_Index
0000E86E 0000                       		dc.w SSR_Wait-SSR_Index
0000E870 0000                       		dc.w SSR_Exit-SSR_Index
0000E872 0000                       		dc.w loc_C91A-SSR_Index
0000E874                            
0000E874 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E874                            ; ===========================================================================
0000E874                            
0000E874                            SSR_ChkPLC:	; Routine 0
0000E874 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E878 6700                       		beq.s	SSR_Main	; if yes, branch
0000E87A 4E75                       		rts	
0000E87C                            ; ===========================================================================
0000E87C                            
0000E87C                            SSR_Main:
0000E87C 2248                       		movea.l	a0,a1
0000E87E 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E884 7203                       		moveq	#3,d1
0000E886 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E88C 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E88E 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E890                            
0000E890                            	SSR_Loop:
0000E890 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E894 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E898 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E89C 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E8A0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E8A4 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E8A8 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E8B0 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E8B6 137C 0000 0001             		move.b	#0,obRender(a1)
0000E8BC 43E9 0040                  		lea	$40(a1),a1
0000E8C0 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E8C4                            
0000E8C4 7007                       		moveq	#7,d0
0000E8C6 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E8CA 6700                       		beq.s	loc_C842
0000E8CC 7000                       		moveq	#0,d0
0000E8CE 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E8D2 6600                       		bne.s	loc_C842	; if not, branch
0000E8D4 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E8D6 317C 0018 0008             		move.w	#$18,obX(a0)
0000E8DC 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E8E2                            
0000E8E2                            loc_C842:
0000E8E2 1140 001A                  		move.b	d0,obFrame(a0)
0000E8E6                            
0000E8E6                            SSR_Move:	; Routine 2
0000E8E6 7210                       		moveq	#$10,d1		; set horizontal speed
0000E8E8 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E8EC B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E8F0 6700                       		beq.s	loc_C86C	; if yes, branch
0000E8F2 6C00                       		bge.s	SSR_ChgPos
0000E8F4 4441                       		neg.w	d1
0000E8F6                            
0000E8F6                            SSR_ChgPos:
0000E8F6 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E8FA                            
0000E8FA                            loc_C85A:
0000E8FA 3028 0008                  		move.w	obX(a0),d0
0000E8FE 6B00                       		bmi.s	locret_C86A
0000E900 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E904 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E906 6000 0000                  		bra.w	DisplaySprite
0000E90A                            ; ===========================================================================
0000E90A                            
0000E90A                            locret_C86A:
0000E90A 4E75                       		rts	
0000E90C                            ; ===========================================================================
0000E90C                            
0000E90C                            loc_C86C:
0000E90C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E912 66E6                       		bne.s	loc_C85A
0000E914 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E918 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E91E 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E924                            
0000E924                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E924 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E928 6600                       		bne.s	SSR_Display
0000E92A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E92E                            
0000E92E                            SSR_Display:
0000E92E 6000 0000                  		bra.w	DisplaySprite
0000E932                            ; ===========================================================================
0000E932                            
0000E932                            SSR_RingBonus:	; Routine 6
0000E932 6100 0000                  		bsr.w	DisplaySprite
0000E936 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E93C 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E940 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E942 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E948 700A                       		moveq	#10,d0		; add 10 to score
0000E94A 4EB9 0000 0000             		jsr	(AddPoints).l
0000E950 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E954 0200 0003                  		andi.b	#3,d0
0000E958 6600                       		bne.s	locret_C8EA
0000E964                            ; ===========================================================================
0000E964                            
0000E964                            loc_C8C4:
0000E96E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E972 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E978 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E97E 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E980 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E986 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E98A                            
0000E98A                            locret_C8EA:
0000E98A 4E75                       		rts	
0000E98C                            ; ===========================================================================
0000E98C                            
0000E98C                            SSR_Exit:	; Routine $A, $12
0000E98C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E992 6000 0000                  		bra.w	DisplaySprite
0000E996                            ; ===========================================================================
0000E996                            
0000E996                            SSR_Continue:	; Routine $E
0000E996 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E99C 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E9AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9B0 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E9B6 6000 0000                  		bra.w	DisplaySprite
0000E9BA                            ; ===========================================================================
0000E9BA                            
0000E9BA                            loc_C91A:	; Routine $14
0000E9BA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E9BE 0200 000F                  		andi.b	#$F,d0
0000E9C2 6600                       		bne.s	SSR_Display2
0000E9C4 0868 0000 001A             		bchg	#0,obFrame(a0)
0000E9CA                            
0000E9CA                            SSR_Display2:
0000E9CA 6000 0000                  		bra.w	DisplaySprite
0000E9CE                            ; ===========================================================================
0000E9CE 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E9D4 0200                       		dc.b 2,	0		; rountine number, frame number
0000E9D6 0320 0120 0118             		dc.w $320, $120, $118
0000E9DC 0201                       		dc.b 2,	1
0000E9DE 0360 0120 0128             		dc.w $360, $120, $128
0000E9E4 0202                       		dc.b 2,	2
0000E9E6 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E9EC 0203                       		dc.b 2,	3
0000E9EE 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E9F4 0206                       		dc.b 2,	6
0000E9F4 0206                       		dc.b 2,	6
0000E9F6                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000E9F6                            ; ---------------------------------------------------------------------------
0000E9F6                            ; Object 7F - chaos emeralds from the special stage results screen
0000E9F6                            ; ---------------------------------------------------------------------------
0000E9F6                            
0000E9F6                            SSRChaos:
0000E9F6 7000                       		moveq	#0,d0
0000E9F8 1028 0024                  		move.b	obRoutine(a0),d0
0000E9FC 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EA00 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EA04                            ; ===========================================================================
0000EA04 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EA06 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EA08                            
0000EA08                            ; ---------------------------------------------------------------------------
0000EA08                            ; X-axis positions for chaos emeralds
0000EA08                            ; ---------------------------------------------------------------------------
0000EA08 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EA14                            ; ===========================================================================
0000EA14                            
0000EA14                            SSRC_Main:	; Routine 0
0000EA14 2248                       		movea.l	a0,a1
0000EA16 45F9 0000 EA08             		lea	(SSRC_PosData).l,a2
0000EA1C 7400                       		moveq	#0,d2
0000EA1E 7200                       		moveq	#0,d1
0000EA20 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EA24 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EA26 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EA2A                            
0000EA2A                            	SSRC_Loop:
0000EA2A 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EA2E 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EA32 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EA38 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EA3C 1633 2000                  		move.b	(a3,d2.w),d3
0000EA40 1343 001A                  		move.b	d3,obFrame(a1)
0000EA44 1343 001C                  		move.b	d3,obAnim(a1)
0000EA48 5202                       		addq.b	#1,d2
0000EA4A 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EA4E 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EA56 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EA5C 137C 0000 0001             		move.b	#0,obRender(a1)
0000EA62 43E9 0040                  		lea	$40(a1),a1	; next object
0000EA66 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EA6A                            
0000EA6A                            SSRC_Flash:	; Routine 2
0000EA6A 1028 001A                  		move.b	obFrame(a0),d0
0000EA6E 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EA74 0C00 0006                  		cmpi.b	#6,d0
0000EA78 6600                       		bne.s	SSRC_Display
0000EA7A 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EA80                            
0000EA80                            	SSRC_Display:
0000EA80 6000 0000                  		bra.w	DisplaySprite
0000EA80 6000 0000                  		bra.w	DisplaySprite
0000EA84                            
0000EA84                            ; ---------------------------------------------------------------------------
0000EA84                            ; Sprite mappings - zone title cards
0000EA84                            ; ---------------------------------------------------------------------------
0000EA84 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EA86 0000                       		dc.w M_Card_LZ-Map_Card
0000EA88 0000                       		dc.w M_Card_MZ-Map_Card
0000EA8A 0000                       		dc.w M_Card_SLZ-Map_Card
0000EA8C 0000                       		dc.w M_Card_SYZ-Map_Card
0000EA8E 0000                       		dc.w M_Card_SBZ-Map_Card
0000EA90 0000                       		dc.w M_Card_Zone-Map_Card
0000EA92 0000                       		dc.w M_Card_Act1-Map_Card
0000EA94 0000                       		dc.w M_Card_Act2-Map_Card
0000EA96 0000                       		dc.w M_Card_Act3-Map_Card
0000EA98 0000                       		dc.w M_Card_Oval-Map_Card
0000EA9A 0000                       		dc.w M_Card_FZ-Map_Card
0000EA9C 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EA9D F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EAA2 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EAA7 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EAAC F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EAB1 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EAB6 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EABB F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EAC0 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EAC5 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EACA                            		even
0000EACA 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EACB F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EAD0 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EAD5 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EADA F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EADF F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EAE4 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EAE9 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EAEE F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EAF3 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EAF8                            		even
0000EAF8 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EAF9 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EAFE F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EB03 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EB08 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EB0D F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EB12 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EB17 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EB1C F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EB21 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EB26 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EB2B F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EB30 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EB31 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EB36 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EB3B F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EB40 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EB45 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EB4A F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EB4F F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EB54 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EB59 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EB5E                            		even
0000EB5E 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EB5F F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EB64 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EB69 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EB6E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EB73 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EB78 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EB7D F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EB82 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EB87 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EB8C F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EB92 00                         		even
0000EB92 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EB93 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EB98 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EB9D F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EBA2 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EBA7 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EBAC F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EBB1 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EBB6 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EBBB F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EBC0 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EBC6 00                         		even
0000EBC6 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EBC7 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EBCC F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EBD1 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EBD6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EBDC 00                         		even
0000EBDC 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EBDD 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EBE2 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EBE7 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EBE8 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EBED F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EBF2 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EBF3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EBF8 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EBFD 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EBFE E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EC03 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EC08 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EC0D F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EC12 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EC17 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EC1C 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EC21 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EC26 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EC2B F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EC30 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EC35 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EC3A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EC40 00                         		even
0000EC40 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EC41 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EC46 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EC4B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EC50 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EC55 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EC5A                            		even
0000EC5A                            
0000EC5A                            Map_Over:	include	"_maps\Game Over.asm"
0000EC5A                            ; ---------------------------------------------------------------------------
0000EC5A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EC5A                            ; ---------------------------------------------------------------------------
0000EC5A                            Map_Over_internal:
0000EC5A 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EC5C 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EC5E 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EC60 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EC62 02                         byte_CBAC:	dc.b 2			; GAME
0000EC63 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EC68 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EC6D 02                         byte_CBB7:	dc.b 2			; OVER
0000EC6E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EC73 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EC78 02                         byte_CBC2:	dc.b 2			; TIME
0000EC79 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EC7E F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EC83 02                         byte_CBCD:	dc.b 2			; OVER
0000EC84 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EC89 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EC8E                            		even
0000EC8E                            		even
0000EC8E                            
0000EC8E                            ; ---------------------------------------------------------------------------
0000EC8E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EC8E                            ; ---------------------------------------------------------------------------
0000EC8E 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EC90 0000                       		dc.w M_Got_Passed-Map_Got
0000EC92 0000                       		dc.w M_Got_Score-Map_Got
0000EC94 0000                       		dc.w M_Got_TBonus-Map_Got
0000EC96 0000                       		dc.w M_Got_RBonus-Map_Got
0000EC98 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EC9A FF4E                       		dc.w M_Card_Act1-Map_Got
0000EC9C FF59                       		dc.w M_Card_Act2-Map_Got
0000EC9E FF64                       		dc.w M_Card_Act3-Map_Got
0000ECA0 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000ECA1 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000ECA6 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000ECAB F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000ECB0 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000ECB5 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000ECBA F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ECBF F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ECC4 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ECC9 06                         M_Got_Passed:	dc.b 6			; PASSED
0000ECCA F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ECCF F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000ECD4 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000ECD9 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000ECDE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ECE3 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000ECE8 06                         M_Got_Score:	dc.b 6			; SCORE
0000ECE9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000ECEE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000ECF3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000ECF8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000ECFD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000ED02 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000ED07 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000ED08 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000ED0D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ED12 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ED17 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ED1C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ED21 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000ED26 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ED2B 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000ED2C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000ED31 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ED36 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ED3B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ED40 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ED45 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000ED4A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ED50 00                         		even
0000ED50                            ; ---------------------------------------------------------------------------
0000ED50                            ; Sprite mappings - special stage results screen
0000ED50                            ; ---------------------------------------------------------------------------
0000ED50 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000ED52 0000                       		dc.w M_SSR_Score-Map_SSR
0000ED54 0000                       		dc.w byte_CD0D-Map_SSR
0000ED56 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000ED58 0000                       		dc.w byte_CD31-Map_SSR
0000ED5A 0000                       		dc.w byte_CD46-Map_SSR
0000ED5C 0000                       		dc.w byte_CD5B-Map_SSR
0000ED5E 0000                       		dc.w byte_CD6B-Map_SSR
0000ED60 0000                       		dc.w byte_CDA8-Map_SSR
0000ED62 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000ED63 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000ED68 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000ED6D F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000ED72 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000ED77 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000ED7C F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000ED81 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000ED86 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED8B F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000ED90 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000ED95 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000ED9A F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000ED9F F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EDA4 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EDA5 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EDAA F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EDAF F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EDB4 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EDB9 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EDBE FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EDC3 07                         byte_CD0D:	dc.b 7
0000EDC4 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EDC9 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EDCE F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EDD3 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EDD8 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EDDD F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EDE2 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EDE7 04                         byte_CD31:	dc.b 4
0000EDE8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EDED F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EDF2 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EDF7 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EDFC 04                         byte_CD46:	dc.b 4
0000EDFD F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE02 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE07 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE0C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EE11 03                         byte_CD5B:	dc.b 3
0000EE12 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EE17 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EE1C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EE21 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EE22 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EE27 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EE2C F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EE31 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EE36 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EE3B F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EE40 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EE45 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EE4A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EE4F F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EE54 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EE59 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EE5E 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EE5F F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EE64 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EE69 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EE6E F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EE73 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EE78 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EE7D F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EE82 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EE87 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EE8C F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EE91 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EE96 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EE9B F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EEA0 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EEA5 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EEAA                            		even
0000EEAA                            
0000EEAA                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EEAA                            ; ---------------------------------------------------------------------------
0000EEAA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EEAA                            ; ---------------------------------------------------------------------------
0000EEAA                            Map_SSRC_internal:
0000EEAA 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EEAC 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EEAE 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EEB0 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EEB2 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EEB4 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EEB6 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EEB8 01                         byte_CE02:	dc.b 1
0000EEB9 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EEBE 01                         byte_CE08:	dc.b 1
0000EEBF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EEC4 01                         byte_CE0E:	dc.b 1
0000EEC5 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EECA 01                         byte_CE14:	dc.b 1
0000EECB F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EED0 01                         byte_CE1A:	dc.b 1
0000EED1 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EED6 01                         byte_CE20:	dc.b 1
0000EED7 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EEDC 00                         byte_CE26:	dc.b 0			; Blank frame
0000EEDE 00                         		even
0000EEDE 00                         		even
0000EEDE                            
0000EEDE                            		include	"_incObj\36 Spikes.asm"
0000EEDE                            ; ---------------------------------------------------------------------------
0000EEDE                            ; Object 36 - spikes
0000EEDE                            ; ---------------------------------------------------------------------------
0000EEDE                            
0000EEDE                            Spikes:
0000EEDE 7000                       		moveq	#0,d0
0000EEE0 1028 0024                  		move.b	obRoutine(a0),d0
0000EEE4 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EEE8 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EEEC                            ; ===========================================================================
0000EEEC 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EEEE 0000                       		dc.w Spik_Solid-Spik_Index
0000EEF0                            
0000EEF0 =00000030                  spik_origX:	equ $30		; start X position
0000EEF0 =00000032                  spik_origY:	equ $32		; start Y position
0000EEF0                            
0000EEF0 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EEF2 0110                       		dc.b 1,	$10
0000EEF4 0204                       		dc.b 2,	4
0000EEF6 031C                       		dc.b 3,	$1C
0000EEF8 0440                       		dc.b 4,	$40
0000EEFA 0510                       		dc.b 5,	$10
0000EEFC                            ; ===========================================================================
0000EEFC                            
0000EEFC                            Spik_Main:	; Routine 0
0000EEFC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF00 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EF08 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EF0E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EF14 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EF1A 1028 0028                  		move.b	obSubtype(a0),d0
0000EF1E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EF24 0240 00F0                  		andi.w	#$F0,d0
0000EF28 43F9 0000 EEF0             		lea	(Spik_Var).l,a1
0000EF2E E648                       		lsr.w	#3,d0
0000EF30 D2C0                       		adda.w	d0,a1
0000EF32 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EF36 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EF3A 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EF40 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EF46                            
0000EF46                            Spik_Solid:	; Routine 2
0000EF46 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EF4A 343C 0004                  		move.w	#4,d2
0000EF4E 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EF54 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EF56 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000EF5C 6600                       		bne.s	Spik_Upright	; if not, branch
0000EF5E 343C 0014                  		move.w	#$14,d2
0000EF62                            
0000EF62                            ; Spikes types $1x and $5x face	sideways
0000EF62                            
0000EF62                            Spik_SideWays:
0000EF62 323C 001B                  		move.w	#$1B,d1
0000EF66 3602                       		move.w	d2,d3
0000EF68 5243                       		addq.w	#1,d3
0000EF6A 3828 0008                  		move.w	obX(a0),d4
0000EF6E 6100 0000                  		bsr.w	SolidObject
0000EF72 0828 0003 0022             		btst	#3,obStatus(a0)
0000EF78 6600                       		bne.s	Spik_Display
0000EF7A 0C44 0001                  		cmpi.w	#1,d4
0000EF7E 6700                       		beq.s	Spik_Hurt
0000EF80 6000                       		bra.s	Spik_Display
0000EF82                            ; ===========================================================================
0000EF82                            
0000EF82                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000EF82                            
0000EF82                            Spik_Upright:
0000EF82 7200                       		moveq	#0,d1
0000EF84 1228 0014                  		move.b	obActWid(a0),d1
0000EF88 0641 000B                  		addi.w	#$B,d1
0000EF8C 343C 0010                  		move.w	#$10,d2
0000EF90 363C 0011                  		move.w	#$11,d3
0000EF94 3828 0008                  		move.w	obX(a0),d4
0000EF98 6100 0000                  		bsr.w	SolidObject
0000EF9C 0828 0003 0022             		btst	#3,obStatus(a0)
0000EFA2 6600                       		bne.s	Spik_Hurt
0000EFA4 4A44                       		tst.w	d4
0000EFA6 6A00                       		bpl.s	Spik_Display
0000EFA8                            
0000EFA8                            Spik_Hurt:
0000EFA8 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000EFAC 6600                       		bne.s	Spik_Display	; if yes, branch
0000EFAE 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000EFB2 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000EFB4 2F08                       		move.l	a0,-(sp)
0000EFB6 2448                       		movea.l	a0,a2
0000EFB8 41F8 D000                  		lea	(v_player).w,a0
0000EFBC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000EFC2 6400                       		bcc.s	loc_CF20
0000EFC4                            		; This fixes the infamous "spike bug"
0000EFC4 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000EFC8 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000EFCA 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000EFD0                            loc_D5A2:
0000EFD0 9680                       		sub.l	d0,d3
0000EFD2 2143 000C                  		move.l	d3,obY(a0)
0000EFD6 4EB9 0000 0000             		jsr	(HurtSonic).l
0000EFDC                            
0000EFDC                            loc_CF20:
0000EFDC 205F                       		movea.l	(sp)+,a0
0000EFDE                            
0000EFDE                            Spik_Display:
0000EFDE 6100 0000                  		bsr.w	DisplaySprite
0000F000 4E75                       		rts	
0000F002                            ; ===========================================================================
0000F002                            
0000F002                            Spik_Type0x:
0000F002 7000                       		moveq	#0,d0
0000F004 1028 0028                  		move.b	obSubtype(a0),d0
0000F008 D040                       		add.w	d0,d0
0000F00A 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F00E 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F012                            ; ===========================================================================
0000F012 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F014 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F016 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F018                            ; ===========================================================================
0000F018                            
0000F018                            Spik_Type00:
0000F018 4E75                       		rts			; don't move the object
0000F01A                            ; ===========================================================================
0000F01A                            
0000F01A                            Spik_Type01:
0000F01A 6100 0000                  		bsr.w	Spik_Wait
0000F01E 7000                       		moveq	#0,d0
0000F020 1028 0034                  		move.b	$34(a0),d0
0000F024 D068 0032                  		add.w	spik_origY(a0),d0
0000F028 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F02C 4E75                       		rts	
0000F02E                            ; ===========================================================================
0000F02E                            
0000F02E                            Spik_Type02:
0000F02E 6100 0000                  		bsr.w	Spik_Wait
0000F032 7000                       		moveq	#0,d0
0000F034 1028 0034                  		move.b	$34(a0),d0
0000F038 D068 0030                  		add.w	spik_origX(a0),d0
0000F03C 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F040 4E75                       		rts	
0000F042                            ; ===========================================================================
0000F042                            
0000F042                            Spik_Wait:
0000F042 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F046 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F048 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F04C 6600                       		bne.s	locret_CFE6
0000F04E 4A28 0001                  		tst.b	obRender(a0)
0000F052 6A00                       		bpl.s	locret_CFE6
0000F05E 6000                       		bra.s	locret_CFE6
0000F060                            ; ===========================================================================
0000F060                            
0000F060                            loc_CFA4:
0000F060 4A68 0036                  		tst.w	$36(a0)
0000F064 6700                       		beq.s	loc_CFC6
0000F066 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F06C 6400                       		bcc.s	locret_CFE6
0000F06E 317C 0000 0034             		move.w	#0,$34(a0)
0000F074 317C 0000 0036             		move.w	#0,$36(a0)
0000F07A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F080 6000                       		bra.s	locret_CFE6
0000F082                            ; ===========================================================================
0000F082                            
0000F082                            loc_CFC6:
0000F082 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F088 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F08E 6500                       		bcs.s	locret_CFE6
0000F090 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F096 317C 0001 0036             		move.w	#1,$36(a0)
0000F09C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F0A2                            
0000F0A2                            locret_CFE6:
0000F0A2 4E75                       		rts	
0000F0A2 4E75                       		rts	
0000F0A4                            Map_Spike:	include	"_maps\Spikes.asm"
0000F0A4                            ; --------------------------------------------------------------------------------
0000F0A4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F0A4                            ; --------------------------------------------------------------------------------
0000F0A4                            
0000F0A4                            SME_XgeaQ:	
0000F0A4 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F0A8 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F0AC 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F0B0 03                         SME_XgeaQ_C:	dc.b 3	
0000F0B1 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F0B6 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F0BB F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F0C0 03                         SME_XgeaQ_1C:	dc.b 3	
0000F0C1 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F0C6 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F0CB 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F0D0 01                         SME_XgeaQ_2C:	dc.b 1	
0000F0D1 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F0D6 03                         SME_XgeaQ_32:	dc.b 3	
0000F0D7 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F0DC F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F0E1 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F0E6 06                         SME_XgeaQ_42:	dc.b 6	
0000F0E7 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F0EC F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F0F1 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F0F6 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F0FB F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F100 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F105 01                         SME_XgeaQ_61:	dc.b 1	
0000F106 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F10C 00                         		even
0000F10C 00                         		even
0000F10C                            		include	"_incObj\3B Purple Rock.asm"
0000F10C                            ; ---------------------------------------------------------------------------
0000F10C                            ; Object 3B - purple rock (GHZ)
0000F10C                            ; ---------------------------------------------------------------------------
0000F10C                            
0000F10C                            PurpleRock:
0000F10C 7000                       		moveq	#0,d0
0000F10E 1028 0024                  		move.b	obRoutine(a0),d0
0000F112 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F116 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F11A                            ; ===========================================================================
0000F11A 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F11C 0000                       		dc.w Rock_Solid-Rock_Index
0000F11E                            ; ===========================================================================
0000F11E                            
0000F11E                            Rock_Main:	; Routine 0
0000F11E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F122 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F12A 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F130 117C 0004 0001             		move.b	#4,obRender(a0)
0000F136 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F13C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F142                            
0000F142                            Rock_Solid:	; Routine 2
0000F142 323C 001B                  		move.w	#$1B,d1
0000F146 343C 0010                  		move.w	#$10,d2
0000F14A 363C 0010                  		move.w	#$10,d3
0000F14E 3828 0008                  		move.w	obX(a0),d4
0000F152 6100 0000                  		bsr.w	SolidObject
0000F156 6100 0000                  		bsr.w	DisplaySprite
0000F178 4E75                       		rts	
0000F178 4E75                       		rts	
0000F17A                            		include	"_incObj\49 Waterfall Sound.asm"
0000F17A                            ; ---------------------------------------------------------------------------
0000F17A                            ; Object 49 - waterfall	sound effect (GHZ)
0000F17A                            ; ---------------------------------------------------------------------------
0000F17A                            
0000F17A                            WaterSound:
0000F17A 7000                       		moveq	#0,d0
0000F17C 1028 0024                  		move.b	obRoutine(a0),d0
0000F180 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F184 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F188                            ; ===========================================================================
0000F188 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F18A 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F18C                            ; ===========================================================================
0000F18C                            
0000F18C                            WSnd_Main:	; Routine 0
0000F18C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F190 117C 0004 0001             		move.b	#4,obRender(a0)
0000F196                            
0000F196                            WSnd_PlaySnd:	; Routine 2
0000F196 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F19A 0200 003F                  		andi.b	#$3F,d0
0000F19E 6600                       		bne.s	WSnd_ChkDel
0000F1AA                            
0000F1AA                            	WSnd_ChkDel:
0000F1C8 4E75                       		rts	
0000F1C8 4E75                       		rts	
0000F1CA                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F1CA                            ; ---------------------------------------------------------------------------
0000F1CA                            ; Sprite mappings - purple rock	(GHZ)
0000F1CA                            ; ---------------------------------------------------------------------------
0000F1CA                            Map_PRock_internal:
0000F1CA 0000                       		dc.w byte_D110-Map_PRock_internal
0000F1CC 02                         byte_D110:	dc.b 2
0000F1CD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F1D2 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F1D8 00                         		even
0000F1D8 00                         		even
0000F1D8                            		include	"_incObj\3C Smashable Wall.asm"
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            
0000F1D8                            SmashWall:
0000F1D8 7000                       		moveq	#0,d0
0000F1DA 1028 0024                  		move.b	obRoutine(a0),d0
0000F1DE 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F1E2 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F1E6 6000 0000                  		bra.w	RememberState
0000F1EA                            ; ===========================================================================
0000F1EA 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F1EC 0000                       		dc.w Smash_Solid-Smash_Index
0000F1EE 0000                       		dc.w Smash_FragMove-Smash_Index
0000F1F0                            
0000F1F0 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F1F0                            ; ===========================================================================
0000F1F0                            
0000F1F0                            Smash_Main:	; Routine 0
0000F1F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F1F4 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F1FC 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F202 117C 0004 0001             		move.b	#4,obRender(a0)
0000F208 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F20E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F214 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F21A                            
0000F21A                            Smash_Solid:	; Routine 2
0000F21A 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F220 323C 001B                  		move.w	#$1B,d1
0000F224 343C 0020                  		move.w	#$20,d2
0000F228 363C 0020                  		move.w	#$20,d3
0000F22C 3828 0008                  		move.w	obX(a0),d4
0000F230 6100 0000                  		bsr.w	SolidObject	
0000F234 4A04                       		tst.b	d4
0000F236 6E00 0000                  		bgt.w	@chkroll	
0000F23A 6700 0000                  		beq.w	@donothing								
0000F23E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F244 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F248                            ; ===========================================================================
0000F248                            
0000F248                            @chkroll:
0000F248 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F24E 6600                       		bne.s	@donothing	; if not, branch	
0000F250 3028 0030                  		move.w	smash_speed(a0),d0
0000F254 6A00                       		bpl.s	@chkspeed
0000F256 4440                       		neg.w	d0
0000F258                            
0000F258                            	@chkspeed:
0000F258 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F25C 6500                       		bcs.s	@donothing	; if not, branch	
0000F25E                            		
0000F25E                            	@continue:	
0000F25E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F264 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F26A 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F270 3028 0008                  		move.w	obX(a0),d0
0000F274 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F278 6500                       		bcs.s	@smash		; if yes, branch
0000F27A 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F280                            
0000F280                            	@smash:
0000F280 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F286 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F28C 7206                       		moveq	#6,d1		; load 7 fragments
0000F28E 343C 0070                  		move.w	#$70,d2
0000F292 6100                       		bsr.s	SmashObject
0000F294                            
0000F294                            @donothing:
0000F294 4E75                       		rts	
0000F296                            
0000F296                            Smash_FragMove:	; Routine 4
0000F296 588F                       		addq.l	#4,sp
0000F298 6100 0000                  		bsr.w	SpeedToPos
0000F29C 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F2A2 4A28 0001                  		tst.b	obRender(a0)
0000F2A6 6A00 0000                  		bpl.w	DeleteObject
0000F2AA 6000 0000                  		bra.w	DisplaySprite
0000F2AE                            
0000F2AE                            
0000F2AE                            
0000F2AE                            		include	"_incObj\sub SmashObject.asm"
0000F2AE                            ; ---------------------------------------------------------------------------
0000F2AE                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F2AE                            ; ---------------------------------------------------------------------------
0000F2AE                            
0000F2AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2AE                            
0000F2AE                            
0000F2AE                            SmashObject:
0000F2AE 7000                       		moveq	#0,d0
0000F2B0 1028 001A                  		move.b	obFrame(a0),d0
0000F2B4 D040                       		add.w	d0,d0
0000F2B6 2668 0004                  		movea.l	obMap(a0),a3
0000F2BA D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F2BE 524B                       		addq.w	#1,a3
0000F2C0 08E8 0005 0001             		bset	#5,obRender(a0)
0000F2C6 1810                       		move.b	0(a0),d4
0000F2C8 1A28 0001                  		move.b	obRender(a0),d5
0000F2CC 2248                       		movea.l	a0,a1
0000F2CE 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F2D4 1284                       		move.b	d4,0(a1)
0000F2D6 234B 0004                  		move.l	a3,obMap(a1)
0000F2DA 1345 0001                  		move.b	d5,obRender(a1)
0000F2DE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F2E4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F2EA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F2F0 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F2F6 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F2FC 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F300 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F304 5341                       		subq.w #1,d1
0000F306 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F30A 303C 005F                  		move.w #$5F,d0
0000F30E                            ; ===========================================================================
0000F30E                            
0000F30E                            Smash_Loop:
0000F30E 4A11                       		tst.b	(a1)
0000F310 6700                       		beq.s	@cont
0000F312 43E9 0040                  		lea		$40(a1),a1
0000F316 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F31A 6600                       		bne.s	Smash_PlaySnd
0000F31C                            
0000F31C                            	@cont:
0000F31C 5A4B                       		addq.w #5,a3
0000F31E                            
0000F31E                            Smash_LoadFrag:				; XREF: SmashObject
0000F31E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F324 1284                       		move.b	d4,0(a1)
0000F326 234B 0004                  		move.l	a3,obMap(a1)
0000F32A 1345 0001                  		move.b	d5,obRender(a1)
0000F32E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F334 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F33A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F340 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F346 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F34C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F350 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F354 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F358                            
0000F358                            Smash_PlaySnd:
0000F358 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F35C 4EF9 0000 0FCC             		jmp	(PlaySound_Special).l ; play smashing sound
0000F362                            
0000F362                            ; End of function SmashObject
0000F362                            ; End of function SmashObject
0000F362                            
0000F362                            ; ===========================================================================
0000F362                            ; Smashed block	fragment speeds
0000F362                            ;
0000F362 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F366 0600 FF00                  		dc.w $600, -$100
0000F36A 0600 0100                  		dc.w $600, $100
0000F36E 0400 0500                  		dc.w $400, $500
0000F372 0600 FA00                  		dc.w $600, -$600
0000F376 0800 FE00                  		dc.w $800, -$200
0000F37A 0800 0200                  		dc.w $800, $200
0000F37E 0600 0600                  		dc.w $600, $600
0000F382                            
0000F382 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F386 F800 FE00                  		dc.w -$800, -$200
0000F38A F800 0200                  		dc.w -$800, $200
0000F38E FA00 0600                  		dc.w -$600, $600
0000F392 FC00 FB00                  		dc.w -$400, -$500
0000F396 FA00 FF00                  		dc.w -$600, -$100
0000F39A FA00 0100                  		dc.w -$600, $100
0000F39E FC00 0500                  		dc.w -$400, $500
0000F3A2                            
0000F3A2                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F3A2                            ; ---------------------------------------------------------------------------
0000F3A2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F3A2                            ; ---------------------------------------------------------------------------
0000F3A2                            Map_Smash_internal:
0000F3A2 0000                       		dc.w @left-Map_Smash_internal
0000F3A4 0000                       		dc.w @middle-Map_Smash_internal
0000F3A6 0000                       		dc.w @right-Map_Smash_internal
0000F3A8 08                         @left:		dc.b 8
0000F3A9 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F3AE F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F3B3 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F3B8 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F3BD E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F3C2 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F3C7 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F3CC 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F3D1 08                         @middle:	dc.b 8
0000F3D2 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F3D7 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F3DC 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F3E1 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F3E6 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F3EB F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F3F0 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F3F5 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F3FA 08                         @right:		dc.b 8
0000F3FB E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F400 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F405 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F40A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F40F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F414 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F419 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F41E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F424 00                         		even
0000F424 00                         		even
0000F424                            
0000F424                            ; ---------------------------------------------------------------------------
0000F424                            ; Object code execution subroutine
0000F424                            ; ---------------------------------------------------------------------------
0000F424                            
0000F424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F424                            
0000F424                            
0000F424                            
0000F424                            ExecuteObjects: ; XREF: GM_Title; et al
0000F424 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F428 7E7F                       		moveq #$7F,d7
0000F42A 7000                       		moveq #0,d0
0000F42C 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F432 6400                       		bcc.s loc_D362
0000F434                            
0000F434                            loc_D348:
0000F434 1010                       		move.b (a0),d0 ; load object number from RAM
0000F436 6700                       		beq.s loc_D358
0000F438 D040                       		add.w d0,d0
0000F43A D040                       		add.w d0,d0
0000F43C 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F440 4E91                       		jsr (a1) ; run the object's code
0000F442 7000                       		moveq #0,d0
0000F444                            
0000F444                            loc_D358:
0000F444 41E8 0040                  		lea $40(a0),a0 ; next object
0000F448 51CF FFEA                  		dbf d7,loc_D348
0000F44C 4E75                       		rts
0000F44E                            ; ===========================================================================
0000F44E                            
0000F44E                            loc_D362:
0000F44E 7E1F                       		moveq #$1F,d7
0000F450 61E2                       		bsr.s loc_D348
0000F452 7E5F                       		moveq #$5F,d7
0000F454                            
0000F454                            loc_D368:
0000F454 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F456 1010                       		move.b (a0),d0 ; get the object's ID
0000F458 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F45A 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F45E 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F460 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F464 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F46A 6700                       		beq.s loc_D378 ; if not, branch
0000F46C 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F470                            
0000F470                            loc_D378:
0000F470 6100 0000                  		bsr.w DisplaySprite2
0000F474                            		
0000F474                            loc_D37C:
0000F474 41E8 0040                  		lea $40(a0),a0
0000F478 51CF FFDA                  		dbf d7,loc_D368
0000F47C 4E75                       		rts
0000F47E                            ; End of function ExecuteObjects
0000F47E                            
0000F47E                            ; ===========================================================================
0000F47E                            ; ---------------------------------------------------------------------------
0000F47E                            ; Object pointers
0000F47E                            ; ---------------------------------------------------------------------------
0000F47E                            Obj_Index:
0000F47E                            		include	"_inc\Object Pointers.asm"
0000F47E                            ; ---------------------------------------------------------------------------
0000F47E                            ; Object pointers
0000F47E                            ; ---------------------------------------------------------------------------
0000F47E 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F482 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F486 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F48A 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F48E 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F492 0000 B1C4                  ptr_Mozzietron:		dc.l Mozzietron
0000F496 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F49A 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F49E 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F4A2 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F4A6 0000 0000                  ptr_Pole:		dc.l Pole
0000F4AA 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F4AE 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F4B2 0000 C5EA                  ptr_TitleSonic:		dc.l TitleSonic
0000F4B6 0000 C66A                  ptr_PSBTM:		dc.l PSBTM
0000F4BA 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F4BE 0000 8CE8                  ptr_Bridge:		dc.l Bridge
0000F4C2 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F4C6 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F4CA 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F4CE 0000 930E                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F4D2 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F4D6 0000 965A                  ptr_Helix:		dc.l Helix
0000F4DA 0000 97E6                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F4DE 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F4E2 0000 9BC2                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F4E6 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F4EA 0000 A1B6                  ptr_Scenery:		dc.l Scenery
0000F4EE 0000 A258                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F4F2 0000 A540                  ptr_BallHog:		dc.l BallHog
0000F4F6 0000 AEDA                  ptr_Crabmeat:		dc.l Crabmeat
0000F4FA 0000 A60E                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F4FE 0000 0000                  ptr_HUD:		dc.l HUD
0000F502 0000 B2F6                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F506 0000 B448                  ptr_Missile:		dc.l Missile
0000F50A 0000 A6E0                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F50E 0000 B6A2                  ptr_Rings:		dc.l Rings
0000F512 0000 BEEC                  ptr_Monitor:		dc.l Monitor
0000F516 0000 A750                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F51A 0000 A90E                  ptr_Animals:		dc.l Animals		; $28
0000F51E 0000 ADFC                  ptr_Points:		dc.l Points
0000F522 0000 A32E                  ptr_AutoDoor:		dc.l AutoDoor
0000F526 0000 CBAE                  ptr_Chopper:		dc.l Chopper
0000F52A 0000 CC68                  ptr_Jaws:		dc.l Jaws
0000F52E 0000 CD32                  ptr_Burrobot:		dc.l Burrobot
0000F532 0000 C0EA                  ptr_PowerUp:		dc.l PowerUp
0000F536 0000 CF46                  ptr_LargeGrass:		dc.l LargeGrass
0000F53A 0000 D428                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F53E 0000 D704                  ptr_ChainStomp:		dc.l ChainStomp
0000F542 0000 DDB2                  ptr_Button:		dc.l Button
0000F546 0000 DF56                  ptr_PushBlock:		dc.l PushBlock
0000F54A 0000 E388                  ptr_TitleCard:		dc.l TitleCard
0000F54E 0000 D268                  ptr_GrassFire:		dc.l GrassFire
0000F552 0000 EEDE                  ptr_Spikes:		dc.l Spikes
0000F556 0000 B8FE                  ptr_RingLoss:		dc.l RingLoss
0000F55A 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F55E 0000 E538                  ptr_GameOverCard:	dc.l GameOverCard
0000F562 0000 E5F6                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F566 0000 F10C                  ptr_PurpleRock:		dc.l PurpleRock
0000F56A 0000 F1D8                  ptr_SmashWall:		dc.l SmashWall
0000F56E 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F572 0000 0000                  ptr_Prison:		dc.l Prison
0000F576 0000 A7E2                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F57A 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F57E 0000 0000                  ptr_Springs:		dc.l Springs
0000F582 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F586 0000 0000                  ptr_Roller:		dc.l Roller
0000F58A 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F58E 0000 DA20                  ptr_SideStomp:		dc.l SideStomp
0000F592 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F596 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F59A 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F59E 0000 F17A                  ptr_WaterSound:		dc.l WaterSound
0000F5A2 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F5A6 0000 BBC0                  ptr_GiantRing:		dc.l GiantRing
0000F5AA 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F5AE 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F5B2 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F5B6 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F5BA 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F5BE 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F5C2 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F5C6 0000 9CD2                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F5CA 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F5CE 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F5D2 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F5D6 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F5DA 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F5DE 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F5E2 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F5E6 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F5EA 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F5EE 0000 0000                  ptr_Fan:		dc.l Fan
0000F5F2 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F5F6 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F5FA 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F5FE 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F602 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F606 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F60A 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F60E 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F612 0000 0000                  ptr_Junction:		dc.l Junction
0000F616 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F61A 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F61E 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F622 0000 0000                  ptr_Saws:		dc.l Saws
0000F626 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F62A 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F62E 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F632 0000 0000                  ptr_Electro:		dc.l Electro
0000F636 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F63A 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F63E 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F642 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F646 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F64A 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F64E 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F652 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F656 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F65A 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F65E 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F662 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F666 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F66A 0000 BC9A                  ptr_RingFlash:		dc.l RingFlash
0000F66E 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F672 0000 E850                  ptr_SSResult:		dc.l SSResult
0000F676 0000 E9F6                  ptr_SSRChaos:		dc.l SSRChaos
0000F67A 0000 5BD8                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F67E 0000 5CF0                  ptr_ContSonic:		dc.l ContSonic
0000F682 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F686 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F68A 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F68E 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F692 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F696 0000 617A                  ptr_EndSonic:		dc.l EndSonic
0000F69A 0000 62D4                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F69E 0000 63AE                  ptr_EndSTH:		dc.l EndSTH
0000F6A2 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F6A6 0000 6614                  ptr_EndEggman:		dc.l EndEggman
0000F6AA 0000 66F4                  ptr_TryChaos:		dc.l TryChaos
0000F6AE                            
0000F6AE                            NullObject:
0000F6AE                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F6AE                            
0000F6AE =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F6AE =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F6AE =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F6AE =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F6AE =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F6AE =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F6AE =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F6AE =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F6AE =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F6AE =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F6AE =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F6AE =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F6AE =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F6AE =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F6AE =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F6AE =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F6AE =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F6AE =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F6AE =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F6AE =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F6AE =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F6AE =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F6AE =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F6AE =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F6AE =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F6AE =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F6AE =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F6AE =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F6AE =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F6AE =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F6AE =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F6AE =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F6AE =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F6AE =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F6AE =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F6AE =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F6AE =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F6AE =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F6AE =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F6AE =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F6AE =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F6AE =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F6AE =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F6AE =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F6AE =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F6AE =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F6AE =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F6AE =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F6AE =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F6AE =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F6AE =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F6AE =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F6AE =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F6AE =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F6AE =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F6AE =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F6AE =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F6AE =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F6AE =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F6AE =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F6AE =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F6AE =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F6AE =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F6AE =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F6AE =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F6AE =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F6AE =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F6AE =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F6AE =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F6AE =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F6AE =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F6AE =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F6AE =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F6AE =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F6AE =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F6AE =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F6AE =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F6AE =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F6AE =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F6AE =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F6AE =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F6AE =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F6AE =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F6AE =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F6AE =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F6AE =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F6AE =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F6AE =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F6AE =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F6AE =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F6AE =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F6AE =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F6AE =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F6AE =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F6AE =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F6AE =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F6AE =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F6AE =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F6AE =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F6AE =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F6AE =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F6AE =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F6AE =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F6AE =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F6AE =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F6AE =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F6AE =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F6AE =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F6AE =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F6AE =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F6AE =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F6AE =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F6AE =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F6AE =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F6AE =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F6AE =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F6AE =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F6AE =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F6AE =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F6AE =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F6AE =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F6AE =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F6AE =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F6AE =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F6AE =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F6AE =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F6AE =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F6AE =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F6AE =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F6AE =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F6AE =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F6AE =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F6AE =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F6AE =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F6AE =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F6AE =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F6AE =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F6AE =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F6AE =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F6AE =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F6AE =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F6AE                            
0000F6AE                            		include	"_incObj\sub ObjectFall.asm"
0000F6AE                            ; ---------------------------------------------------------------------------
0000F6AE                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F6AE                            ; ---------------------------------------------------------------------------
0000F6AE                            
0000F6AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6AE                            
0000F6AE                            
0000F6AE                            ObjectFall:
0000F6AE 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F6B4 6700                       		beq.s	@donothing
0000F6B6 3028 0010                  		move.w	obVelX(a0),d0
0000F6BA 48C0                       		ext.l	d0
0000F6BC E188                       		lsl.l	#8,d0
0000F6BE D1A8 0008                  		add.l	d0,obX(a0)
0000F6C2 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F6C8 6F00                               ble.s   @skipline       ; if yes, branch
0000F6CA 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F6D0                                @skipline:		
0000F6D0 3028 0012                  		move.w	obVelY(a0),d0
0000F6D4 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F6DA 48C0                       		ext.l	d0
0000F6DC E188                       		lsl.l	#8,d0
0000F6DE D1A8 000C                  		add.l	d0,obY(a0)
0000F6E2 4E75                       		rts	
0000F6E4                            	
0000F6E4                            	@donothing:
0000F6E4 4E75                       		rts
0000F6E6                            
0000F6E6                            ; End of function ObjectFall
0000F6E6                            ; End of function ObjectFall
0000F6E6                            		include	"_incObj\sub SpeedToPos.asm"
0000F6E6                            ; ---------------------------------------------------------------------------
0000F6E6                            ; Subroutine translating object	speed to update	object position
0000F6E6                            ; ---------------------------------------------------------------------------
0000F6E6                            
0000F6E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6E6                            
0000F6E6                            
0000F6E6                            SpeedToPos:
0000F6E6 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F6EC E188                       		lsl.l	#8,d0
0000F6EE D1A8 0008                  		add.l	d0,obX(a0)
0000F6F2 E18A                       		lsl.l	#8,d2
0000F6F4 D5A8 000C                  		add.l	d2,obY(a0)
0000F6F8 4E75                       		rts
0000F6FA                            ; End of function SpeedToPos
0000F6FA                            ; End of function SpeedToPos
0000F6FA                            		include	"_incObj\sub DisplaySprite.asm"
0000F6FA                            ; ---------------------------------------------------------------------------
0000F6FA                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F6FA                            ; ---------------------------------------------------------------------------
0000F6FA                            
0000F6FA                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F6FA                            
0000F6FA                            
0000F6FA                            DisplaySprite:
0000F6FA 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F6FE D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F702 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F706 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F708 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F70A D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F70C 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F70E                            
0000F70E                                DSpr_Full:
0000F70E 4E75                               rts    
0000F710                            
0000F710                            ; End of function DisplaySprite
0000F710                            
0000F710                            
0000F710                            ; ---------------------------------------------------------------------------
0000F710                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F710                            ; ---------------------------------------------------------------------------
0000F710                            
0000F710                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F710                            
0000F710                            
0000F710                            DisplaySprite1:
0000F710 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F714 D4E9 0018                          adda.w  obpriority(a1),a2
0000F718 0C52 007E                          cmpi.w    #$7E,(a2)
0000F71C 6400                               bcc.s    DSpr1_Full
0000F71E 5452                               addq.w    #2,(a2)
0000F720 D4D2                               adda.w    (a2),a2
0000F722 3489                               move.w    a1,(a2)
0000F724                            
0000F724                                DSpr1_Full:
0000F724 4E75                               rts    
0000F726                            
0000F726                            ; End of function DisplaySprite1
0000F726                            
0000F726                            ; ---------------------------------------------------------------------------
0000F726                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F726                            ; and d0 is already (priority/2)&$380
0000F726                            ; ---------------------------------------------------------------------------
0000F726                            
0000F726                            ; loc_16530:
0000F726                            DisplaySprite2:
0000F726 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F72A D2C0                           adda.w    d0,a1
0000F72C 0C51 007E                      cmpi.w    #$7E,(a1)
0000F730 6400                           bhs.s    return_16542
0000F732 5451                           addq.w    #2,(a1)
0000F734 D2D1                           adda.w    (a1),a1
0000F736 3288                           move.w    a0,(a1)
0000F738                            
0000F738                            return_16542:
0000F738 4E75                           rts
0000F738 4E75                           rts
0000F73A                            		include	"_incObj\sub DeleteObject.asm"
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            ; Subroutine to	delete an object
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            
0000F73A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F73A                            
0000F73A                            
0000F73A                            DeleteObject:
0000F73A 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F73C                            
0000F73C                            DeleteChild:				; child objects are already in (a1)
0000F73C 7200                       		moveq	#0,d1
0000F73E 700F                       		moveq	#$F,d0
0000F740                            
0000F740                            	DelObj_Loop:
0000F740 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F742 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F746 4E75                       		rts	
0000F748                            
0000F748                            ; End of function DeleteObject
0000F748                            ; End of function DeleteObject
0000F748                            
0000F748                            ; ===========================================================================
0000F748 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F74C 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F750 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F754 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F758                            ; ---------------------------------------------------------------------------
0000F758                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F758                            ; ---------------------------------------------------------------------------
0000F758                            
0000F758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F758                            
0000F758                            
0000F758                            BuildSprites:
0000F758 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F75C 7A00                       		moveq	#0,d5
0000F75E 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F762 7E07                       		moveq	#7,d7
0000F764                            
0000F764                            	@priorityLoop:
0000F764 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F766 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F76A 7C02                       		moveq	#2,d6
0000F76C                            
0000F76C                            	@objectLoop:
0000F76C 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F770 4A10                       		tst.b	(a0)		; if null, branch
0000F772 6700 0000                  		beq.w	@skipObject
0000F776 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F77C                            
0000F77C 1028 0001                  		move.b	obRender(a0),d0
0000F780 1800                       		move.b	d0,d4
0000F782 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000F786 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000F788 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F78C                            	; check object bounds
0000F78C 7000                       		moveq	#0,d0
0000F78E 1028 0014                  		move.b	obActWid(a0),d0
0000F792 3628 0008                  		move.w	obX(a0),d3
0000F796 9651                       		sub.w	(a1),d3
0000F798 3203                       		move.w	d3,d1
0000F79A D240                       		add.w	d0,d1
0000F79C 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000F7A0 3203                       		move.w	d3,d1
0000F7A2 9240                       		sub.w	d0,d1
0000F7A4 0C41 0140                  		cmpi.w	#320,d1
0000F7A8 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000F7AA 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000F7AE                            
0000F7AE 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000F7B2 6700                       		beq.s	@assumeHeight	; if yes, branch
0000F7B4 7000                       		moveq	#0,d0
0000F7B6 1028 0016                  		move.b	obHeight(a0),d0
0000F7BA 3428 000C                  		move.w	obY(a0),d2
0000F7BE 9469 0004                  		sub.w	4(a1),d2
0000F7C2 3202                       		move.w	d2,d1
0000F7C4 D240                       		add.w	d0,d1
0000F7C6 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000F7C8 3202                       		move.w	d2,d1
0000F7CA 9240                       		sub.w	d0,d1
0000F7CC 0C41 00E0                  		cmpi.w	#224,d1
0000F7D0 6C00                       		bge.s	@skipObject
0000F7D2 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000F7D6 6000                       		bra.s	@drawObject
0000F7D8                            ; ===========================================================================
0000F7D8                            
0000F7D8                            	@screenCoords:
0000F7D8 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000F7DC 3628 0008                  		move.w	obX(a0),d3
0000F7E0 6000                       		bra.s	@drawObject
0000F7E2                            ; ===========================================================================
0000F7E2                            
0000F7E2                            	@assumeHeight:
0000F7E2 3428 000C                  		move.w	obY(a0),d2
0000F7E6 9469 0004                  		sub.w	obMap(a1),d2
0000F7EA 0642 0080                  		addi.w	#$80,d2
0000F7EE 0C42 0060                  		cmpi.w	#$60,d2
0000F7F2 6500                       		blo.s	@skipObject
0000F7F4 0C42 0180                  		cmpi.w	#$180,d2
0000F7F8 6400                       		bhs.s	@skipObject
0000F7FA                            
0000F7FA                            	@drawObject:
0000F7FA 2268 0004                  		movea.l	obMap(a0),a1
0000F7FE 7200                       		moveq	#0,d1
0000F800 0804 0005                  		btst	#5,d4
0000F804 6600                       		bne.s	@drawFrame
0000F806 1228 001A                  		move.b	$1A(a0),d1
0000F80A D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F80C D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F810 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F812 1219                       		move.b	(a1)+,d1
0000F814 5301                       		subq.b	#1,d1
0000F816 6B00                       		bmi.s	@setVisible
0000F818                            
0000F818                            	@drawFrame:
0000F818 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000F81C                            
0000F81C                            	@setVisible:
0000F81C 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000F822                            
0000F822                            	@skipObject:
0000F822 5446                       		addq.w	#2,d6
0000F824 5554                       		subq.w	#2,(a4)			; number of objects left
0000F826 6600 FF44                  		bne.w	@objectLoop
0000F82A                            
0000F82A                            	@nextPriority:
0000F82A 49EC 0080                  		lea	$80(a4),a4
0000F82E 51CF FF34                  		dbf	d7,@priorityLoop
0000F832 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000F836 0C05 0050                  		cmpi.b	#$50,d5
0000F83A 6700                       		beq.s	@spriteLimit
0000F83C 24BC 0000 0000             		move.l	#0,(a2)
0000F842 4E75                       		rts	
0000F844                            ; ===========================================================================
0000F844                            
0000F844                            	@spriteLimit:
0000F844 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000F84A 4E75                       		rts	
0000F84C                            ; End of function BuildSprites
0000F84C                            
0000F84C                            
0000F84C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F84C                            
0000F84C                            
0000F84C                            BuildSpr_Draw:
0000F84C 3668 0002                  		movea.w	obGfx(a0),a3
0000F850 0804 0000                  		btst	#0,d4
0000F854 6600                       		bne.s	BuildSpr_FlipX
0000F856 0804 0001                  		btst	#1,d4
0000F85A 6600 0000                  		bne.w	BuildSpr_FlipY
0000F85E                            ; End of function BuildSpr_Draw
0000F85E                            
0000F85E                            
0000F85E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F85E                            
0000F85E                            
0000F85E                            BuildSpr_Normal:
0000F85E 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F862 6700                       		beq.s	@return
0000F864 1019                       		move.b	(a1)+,d0	; get y-offset
0000F866 4880                       		ext.w	d0
0000F868 D042                       		add.w	d2,d0		; add y-position
0000F86A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F86C 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000F86E 5205                       		addq.b	#1,d5		; increase sprite counter
0000F870 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000F872 1019                       		move.b	(a1)+,d0	; get art tile
0000F874 E148                       		lsl.w	#8,d0
0000F876 1019                       		move.b	(a1)+,d0
0000F878 D04B                       		add.w	a3,d0		; add art tile offset
0000F87A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F87C 1019                       		move.b	(a1)+,d0	; get x-offset
0000F87E 4880                       		ext.w	d0
0000F880 D043                       		add.w	d3,d0		; add x-position
0000F882 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F886 6600                       		bne.s	@writeX
0000F888 5240                       		addq.w	#1,d0
0000F88A                            
0000F88A                            	@writeX:
0000F88A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F88C 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000F890                            
0000F890                            	@return:
0000F890 4E75                       		rts	
0000F892                            ; End of function BuildSpr_Normal
0000F892                            
0000F892                            ; ===========================================================================
0000F892                            
0000F892                            BuildSpr_FlipX:
0000F892 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000F896 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000F89A                            
0000F89A                            	@loop:
0000F89A 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F89E 6700                       		beq.s	@return
0000F8A0 1019                       		move.b	(a1)+,d0	; y position
0000F8A2 4880                       		ext.w	d0
0000F8A4 D042                       		add.w	d2,d0
0000F8A6 34C0                       		move.w	d0,(a2)+
0000F8A8 1819                       		move.b	(a1)+,d4	; size
0000F8AA 14C4                       		move.b	d4,(a2)+	
0000F8AC 5205                       		addq.b	#1,d5		; link
0000F8AE 14C5                       		move.b	d5,(a2)+
0000F8B0 1019                       		move.b	(a1)+,d0	; art tile
0000F8B2 E148                       		lsl.w	#8,d0
0000F8B4 1019                       		move.b	(a1)+,d0	
0000F8B6 D04B                       		add.w	a3,d0
0000F8B8 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000F8BC 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8BE 1019                       		move.b	(a1)+,d0	; get x-offset
0000F8C0 4880                       		ext.w	d0
0000F8C2 4440                       		neg.w	d0			; negate it
0000F8C4 D804                       		add.b	d4,d4		; calculate flipped position by size
0000F8C6 0244 0018                  		andi.w	#$18,d4
0000F8CA 5044                       		addq.w	#8,d4
0000F8CC 9044                       		sub.w	d4,d0
0000F8CE D043                       		add.w	d3,d0
0000F8D0 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F8D4 6600                       		bne.s	@writeX
0000F8D6 5240                       		addq.w	#1,d0
0000F8D8                            
0000F8D8                            	@writeX:
0000F8D8 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8DA 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000F8DE                            
0000F8DE                            	@return:
0000F8DE 4E75                       		rts	
0000F8E0                            ; ===========================================================================
0000F8E0                            
0000F8E0                            BuildSpr_FlipY:
0000F8E0 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F8E4 6700                       		beq.s	@return
0000F8E6 1019                       		move.b	(a1)+,d0	; get y-offset
0000F8E8 1811                       		move.b	(a1),d4		; get size
0000F8EA 4880                       		ext.w	d0
0000F8EC 4440                       		neg.w	d0		; negate y-offset
0000F8EE E70C                       		lsl.b	#3,d4	; calculate flip offset
0000F8F0 0244 0018                  		andi.w	#$18,d4
0000F8F4 5044                       		addq.w	#8,d4
0000F8F6 9044                       		sub.w	d4,d0
0000F8F8 D042                       		add.w	d2,d0	; add y-position
0000F8FA 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F8FC 14D9                       		move.b	(a1)+,(a2)+	; size
0000F8FE 5205                       		addq.b	#1,d5
0000F900 14C5                       		move.b	d5,(a2)+	; link
0000F902 1019                       		move.b	(a1)+,d0	; art tile
0000F904 E148                       		lsl.w	#8,d0
0000F906 1019                       		move.b	(a1)+,d0
0000F908 D04B                       		add.w	a3,d0
0000F90A 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000F90E 34C0                       		move.w	d0,(a2)+
0000F910 1019                       		move.b	(a1)+,d0	; x-position
0000F912 4880                       		ext.w	d0
0000F914 D043                       		add.w	d3,d0
0000F916 0240 01FF                  		andi.w	#$1FF,d0
0000F91A 6600                       		bne.s	@writeX
0000F91C 5240                       		addq.w	#1,d0
0000F91E                            
0000F91E                            	@writeX:
0000F91E 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F920 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000F924                            
0000F924                            	@return:
0000F924 4E75                       		rts	
0000F926                            ; ===========================================================================
0000F926                            
0000F926                            BuildSpr_FlipXY:
0000F926 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F92A 6700                       		beq.s	@return
0000F92C 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000F92E 1811                       		move.b	(a1),d4
0000F930 4880                       		ext.w	d0
0000F932 4440                       		neg.w	d0
0000F934 E70C                       		lsl.b	#3,d4
0000F936 0244 0018                  		andi.w	#$18,d4
0000F93A 5044                       		addq.w	#8,d4
0000F93C 9044                       		sub.w	d4,d0
0000F93E D042                       		add.w	d2,d0
0000F940 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F942 1819                       		move.b	(a1)+,d4	; size
0000F944 14C4                       		move.b	d4,(a2)+	; link
0000F946 5205                       		addq.b	#1,d5
0000F948 14C5                       		move.b	d5,(a2)+	; art tile
0000F94A 1019                       		move.b	(a1)+,d0
0000F94C E148                       		lsl.w	#8,d0
0000F94E 1019                       		move.b	(a1)+,d0
0000F950 D04B                       		add.w	a3,d0
0000F952 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000F956 34C0                       		move.w	d0,(a2)+
0000F958 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000F95A 4880                       		ext.w	d0
0000F95C 4440                       		neg.w	d0
0000F95E D804                       		add.b	d4,d4
0000F960 0244 0018                  		andi.w	#$18,d4
0000F964 5044                       		addq.w	#8,d4
0000F966 9044                       		sub.w	d4,d0
0000F968 D043                       		add.w	d3,d0
0000F96A 0240 01FF                  		andi.w	#$1FF,d0
0000F96E 6600                       		bne.s	@writeX
0000F970 5240                       		addq.w	#1,d0
0000F972                            
0000F972                            	@writeX:
0000F972 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F974 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000F978                            
0000F978                            	@return:
0000F978 4E75                       		rts	
0000F97A                            
0000F97A                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F97A                            ; ---------------------------------------------------------------------------
0000F97A                            ; Subroutine to	check if an object is off screen
0000F97A                            
0000F97A                            ; output:
0000F97A                            ;	d0 = flag set if object is off screen
0000F97A                            ; ---------------------------------------------------------------------------
0000F97A                            
0000F97A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F97A                            
0000F97A                            
0000F97A                            ChkObjectVisible:
0000F97A 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F97E 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F982 6B00                       		bmi.s	@offscreen
0000F984 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F988 6C00                       		bge.s	@offscreen	; if not, branch
0000F98A                            
0000F98A 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F98E 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F992 6B00                       		bmi.s	@offscreen
0000F994 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F998 6C00                       		bge.s	@offscreen	; if not, branch
0000F99A                            
0000F99A 7000                       		moveq	#0,d0		; set flag to 0
0000F99C 4E75                       		rts	
0000F99E                            
0000F99E                            	@offscreen:
0000F99E 7001                       		moveq	#1,d0		; set flag to 1
0000F9A0 4E75                       		rts	
0000F9A2                            ; End of function ChkObjectVisible
0000F9A2                            
0000F9A2                            ; ---------------------------------------------------------------------------
0000F9A2                            ; Subroutine to	check if an object is off screen
0000F9A2                            ; More precise than above subroutine, taking width into account
0000F9A2                            
0000F9A2                            ; output:
0000F9A2                            ;	d0 = flag set if object is off screen
0000F9A2                            ; ---------------------------------------------------------------------------
0000F9A2                            
0000F9A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9A2                            
0000F9A2                            
0000F9A2                            ChkPartiallyVisible:
0000F9A2 7200                       		moveq	#0,d1
0000F9A4 1228 0014                  		move.b	obActWid(a0),d1
0000F9A8 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F9AC 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F9B0 D041                       		add.w	d1,d0		; add object width
0000F9B2 6B00                       		bmi.s	@offscreen2
0000F9B4 D241                       		add.w	d1,d1
0000F9B6 9041                       		sub.w	d1,d0
0000F9B8 0C40 0140                  		cmpi.w	#320,d0
0000F9BC 6C00                       		bge.s	@offscreen2
0000F9BE                            
0000F9BE 3228 000C                  		move.w	obY(a0),d1
0000F9C2 9278 F704                  		sub.w	(v_screenposy).w,d1
0000F9C6 6B00                       		bmi.s	@offscreen2
0000F9C8 0C41 00E0                  		cmpi.w	#224,d1
0000F9CC 6C00                       		bge.s	@offscreen2
0000F9CE                            
0000F9CE 7000                       		moveq	#0,d0
0000F9D0 4E75                       		rts	
0000F9D2                            
0000F9D2                            	@offscreen2:
0000F9D2 7001                       		moveq	#1,d0
0000F9D4 4E75                       		rts	
0000F9D6                            ; End of function ChkPartiallyVisible
0000F9D6                            ; End of function ChkPartiallyVisible
0000F9D6                            
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            ; Subroutine to	load a level's objects
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            
0000F9D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9D6                            
0000F9D6                            
0000F9D6                            ObjPosLoad:
0000F9D6 7000                       		moveq	#0,d0
0000F9D8 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000F9DC 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F9E0 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F9E4                            ; End of function ObjPosLoad
0000F9E4                            
0000F9E4                            ; ===========================================================================
0000F9E4 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F9E6 0000                       		dc.w OPL_Next-OPL_Index
0000F9E8                            ; ===========================================================================
0000F9E8                            
0000F9E8                            OPL_Main:
0000F9E8 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000F9EC 3038 FE10                  		move.w	(v_zone).w,d0
0000F9F0 ED08                       		lsl.b	#6,d0
0000F9F2 E848                       		lsr.w	#4,d0
0000F9F4 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F9FA 2248                       		movea.l	a0,a1
0000F9FC D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FA00 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA04 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA08 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FA0C 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FA10 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FA14 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA18 34FC 0101                  		move.w	#$101,(a2)+
0000FA1C 303C 005E                  		move.w	#$5E,d0
0000FA20                            
0000FA20                            OPL_ClrList:
0000FA20 429A                       		clr.l	(a2)+
0000FA22 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FA26                            
0000FA26 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA2A 7400                       		moveq	#0,d2
0000FA2C 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA30 0446 0080                  		subi.w	#$80,d6
0000FA34 6400                       		bhs.s	loc_D93C
0000FA36 7C00                       		moveq	#0,d6
0000FA38                            
0000FA38                            loc_D93C:
0000FA38 0246 FF80                  		andi.w	#$FF80,d6
0000FA3C 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FA40                            
0000FA40                            loc_D944:
0000FA40 BC50                       		cmp.w	(a0),d6
0000FA42 6300                       		bls.s	loc_D956
0000FA44 4A28 0004                  		tst.b	4(a0)
0000FA48 6A00                       		bpl.s	loc_D952
0000FA4A 1412                       		move.b	(a2),d2
0000FA4C 5212                       		addq.b	#1,(a2)
0000FA4E                            
0000FA4E                            loc_D952:
0000FA4E 5C48                       		addq.w	#6,a0
0000FA50 60EE                       		bra.s	loc_D944
0000FA52                            ; ===========================================================================
0000FA52                            
0000FA52                            loc_D956:
0000FA52 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FA56 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FA5A 0446 0080                  		subi.w	#$80,d6
0000FA5E 6500                       		blo.s	loc_D976
0000FA60                            
0000FA60                            loc_D964:
0000FA60 BC50                       		cmp.w	(a0),d6
0000FA62 6300                       		bls.s	loc_D976
0000FA64 4A28 0004                  		tst.b	4(a0)
0000FA68 6A00                       		bpl.s	loc_D972
0000FA6A 522A 0001                  		addq.b	#1,1(a2)
0000FA6E                            
0000FA6E                            loc_D972:
0000FA6E 5C48                       		addq.w	#6,a0
0000FA70 60EE                       		bra.s	loc_D964
0000FA72                            ; ===========================================================================
0000FA72                            
0000FA72                            loc_D976:
0000FA72 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FA76 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FA7C                            
0000FA7C                            OPL_Next:
0000FA7C 45F8 FC00                  		lea	(v_objstate).w,a2
0000FA80 7400                       		moveq	#0,d2
0000FA82 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FA86 0246 FF80                  		andi.w	#$FF80,d6
0000FA8A BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FA8E 6700 0000                  		beq.w	locret_DA3A
0000FA92 6C00                       		bge.s	loc_D9F6
0000FA94 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FA98 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FA9C 0446 0080                  		subi.w	#$80,d6
0000FAA0 6500                       		blo.s	loc_D9D2
0000FAA2                            
0000FAA2                            loc_D9A6:
0000FAA2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FAA6 6C00                       		bge.s	loc_D9D2
0000FAA8 5D48                       		subq.w	#6,a0
0000FAAA 4A28 0004                  		tst.b	4(a0)
0000FAAE 6A00                       		bpl.s	loc_D9BC
0000FAB0 532A 0001                  		subq.b	#1,1(a2)
0000FAB4 142A 0001                  		move.b	1(a2),d2
0000FAB8                            
0000FAB8                            loc_D9BC:
0000FAB8 6100 0000                  		bsr.w	loc_DA3C
0000FABC 6600                       		bne.s	loc_D9C6
0000FABE 5D48                       		subq.w	#6,a0
0000FAC0 60E0                       		bra.s	loc_D9A6
0000FAC2                            ; ===========================================================================
0000FAC2                            
0000FAC2                            loc_D9C6:
0000FAC2 4A28 0004                  		tst.b	4(a0)
0000FAC6 6A00                       		bpl.s	loc_D9D0
0000FAC8 522A 0001                  		addq.b	#1,1(a2)
0000FACC                            
0000FACC                            loc_D9D0:
0000FACC 5C48                       		addq.w	#6,a0
0000FACE                            
0000FACE                            loc_D9D2:
0000FACE 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FAD2 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FAD6 0646 0300                  		addi.w	#$300,d6
0000FADA                            
0000FADA                            loc_D9DE:
0000FADA BC68 FFFA                  		cmp.w	-6(a0),d6
0000FADE 6E00                       		bgt.s	loc_D9F0
0000FAE0 4A28 FFFE                  		tst.b	-2(a0)
0000FAE4 6A00                       		bpl.s	loc_D9EC
0000FAE6 5312                       		subq.b	#1,(a2)
0000FAE8                            
0000FAE8                            loc_D9EC:
0000FAE8 5D48                       		subq.w	#6,a0
0000FAEA 60EE                       		bra.s	loc_D9DE
0000FAEC                            ; ===========================================================================
0000FAEC                            
0000FAEC                            loc_D9F0:
0000FAEC 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FAF0 4E75                       		rts	
0000FAF2                            ; ===========================================================================
0000FAF2                            
0000FAF2                            loc_D9F6:
0000FAF2 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FAF6 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FAFA 0646 0280                  		addi.w	#$280,d6
0000FAFE                            
0000FAFE                            loc_DA02:
0000FAFE BC50                       		cmp.w	(a0),d6
0000FB00 6300                       		bls.s	loc_DA16
0000FB02 4A28 0004                  		tst.b	4(a0)
0000FB06 6A00                       		bpl.s	loc_DA10
0000FB08 1412                       		move.b	(a2),d2
0000FB0A 5212                       		addq.b	#1,(a2)
0000FB0C                            
0000FB0C                            loc_DA10:
0000FB0C 6100 0000                  		bsr.w	loc_DA3C
0000FB10 67EC                       		beq.s	loc_DA02
0000FB12                            
0000FB12                            loc_DA16:
0000FB12 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB16 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FB1A 0446 0300                  		subi.w	#$300,d6
0000FB1E 6500                       		blo.s	loc_DA36
0000FB20                            
0000FB20                            loc_DA24:
0000FB20 BC50                       		cmp.w	(a0),d6
0000FB22 6300                       		bls.s	loc_DA36
0000FB24 4A28 0004                  		tst.b	4(a0)
0000FB28 6A00                       		bpl.s	loc_DA32
0000FB2A 522A 0001                  		addq.b	#1,1(a2)
0000FB2E                            
0000FB2E                            loc_DA32:
0000FB2E 5C48                       		addq.w	#6,a0
0000FB30 60EE                       		bra.s	loc_DA24
0000FB32                            ; ===========================================================================
0000FB32                            
0000FB32                            loc_DA36:
0000FB32 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB36                            
0000FB36                            locret_DA3A:
0000FB36 4E75                       		rts	
0000FB38                            ; ===========================================================================
0000FB38                            
0000FB38                            loc_DA3C:
0000FB38 4A28 0004                  		tst.b	4(a0)
0000FB3C 6A00                       		bpl.s	OPL_MakeItem
0000FB3E 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FB44 6700                       		beq.s	OPL_MakeItem
0000FB46 5C48                       		addq.w	#6,a0
0000FB48 7000                       		moveq	#0,d0
0000FB4A 4E75                       		rts	
0000FB4C                            ; ===========================================================================
0000FB4C                            
0000FB4C                            OPL_MakeItem:
0000FB4C 6100 0000                  		bsr.w	FindFreeObj
0000FB50 6600                       		bne.s	locret_DA8A
0000FB52 3358 0008                  		move.w	(a0)+,obX(a1)
0000FB56 3018                       		move.w	(a0)+,d0
0000FB58 3200                       		move.w	d0,d1
0000FB5A 0240 0FFF                  		andi.w	#$FFF,d0
0000FB5E 3340 000C                  		move.w	d0,obY(a1)
0000FB62 E559                       		rol.w	#2,d1
0000FB64 0201 0003                  		andi.b	#3,d1
0000FB68 1341 0001                  		move.b	d1,obRender(a1)
0000FB6C 1341 0022                  		move.b	d1,obStatus(a1)
0000FB70 1018                       		move.b	(a0)+,d0
0000FB72 6A00                       		bpl.s	loc_DA80
0000FB74 0200 007F                  		andi.b	#$7F,d0
0000FB78 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FB7C                            
0000FB7C                            loc_DA80:
0000FB7C 1280                       		move.b	d0,0(a1)
0000FB7E 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FB82 7000                       		moveq	#0,d0
0000FB84                            
0000FB84                            locret_DA8A:
0000FB84 4E75                       		rts	
0000FB86                            
0000FB86                            		include	"_incObj\sub FindFreeObj.asm"
0000FB86                            ; ---------------------------------------------------------------------------
0000FB86                            ; Subroutine to find a free object space
0000FB86                            
0000FB86                            ; output:
0000FB86                            ;	a1 = free position in object RAM
0000FB86                            ; ---------------------------------------------------------------------------
0000FB86                            
0000FB86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB86                            
0000FB86                            
0000FB86                            FindFreeObj:
0000FB86 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FB8A 303C 005F                  		move.w	#$5F,d0
0000FB8E                            
0000FB8E                            	FFree_Loop:
0000FB8E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FB90 6700                       		beq.s	FFree_Found	; if yes, branch
0000FB92 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FB96 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FB9A                            
0000FB9A                            	FFree_Found:
0000FB9A 4E75                       		rts	
0000FB9C                            
0000FB9C                            ; End of function FindFreeObj
0000FB9C                            
0000FB9C                            
0000FB9C                            ; ---------------------------------------------------------------------------
0000FB9C                            ; Subroutine to find a free object space AFTER the current one
0000FB9C                            
0000FB9C                            ; output:
0000FB9C                            ;	a1 = free position in object RAM
0000FB9C                            ; ---------------------------------------------------------------------------
0000FB9C                            
0000FB9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB9C                            
0000FB9C                            
0000FB9C                            FindNextFreeObj:
0000FB9C 2248                       		movea.l	a0,a1
0000FB9E 303C F000                  		move.w	#$F000,d0
0000FBA2 9048                       		sub.w	a0,d0
0000FBA4 EC48                       		lsr.w	#6,d0
0000FBA6 5340                       		subq.w	#1,d0
0000FBA8 6500                       		bcs.s	NFree_Found
0000FBAA                            
0000FBAA                            	NFree_Loop:
0000FBAA 4A11                       		tst.b	(a1)
0000FBAC 6700                       		beq.s	NFree_Found
0000FBAE 43E9 0040                  		lea	$40(a1),a1
0000FBB2 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FBB6                            
0000FBB6                            	NFree_Found:
0000FBB6 4E75                       		rts	
0000FBB8                            
0000FBB8                            ; End of function FindNextFreeObj
0000FBB8                            ; End of function FindNextFreeObj
0000FBB8                            		include	"_incObj\41 Springs.asm"
0000FBB8                            ; ---------------------------------------------------------------------------
0000FBB8                            ; Object 41 - springs
0000FBB8                            ; ---------------------------------------------------------------------------
0000FBB8                            
0000FBB8                            Springs:
0000FBB8 7000                       		moveq	#0,d0
0000FBBA 1028 0024                  		move.b	obRoutine(a0),d0
0000FBBE 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FBC2 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FBC6 6100 FB32                  		bsr.w	DisplaySprite
0000FBE8 4E75                       		rts	
0000FBEA                            ; ===========================================================================
0000FBEA 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FBEC 0000                       		dc.w Spring_Up-Spring_Index
0000FBEE 0000                       		dc.w Spring_AniUp-Spring_Index
0000FBF0 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FBF2 0000                       		dc.w Spring_LR-Spring_Index
0000FBF4 0000                       		dc.w Spring_AniLR-Spring_Index
0000FBF6 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FBF8 0000                       		dc.w Spring_Dwn-Spring_Index
0000FBFA 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FBFC 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FBFE                            
0000FBFE =00000030                  spring_pow:	equ $30			; power of current spring
0000FBFE                            
0000FBFE F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FC00 F600                       		dc.w -$A00		; power	of yellow spring
0000FC02                            ; ===========================================================================
0000FC02                            
0000FC02                            Spring_Main:	; Routine 0
0000FC02 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC06 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FC0E 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FC14 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FC1A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FC20 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FC26 1028 0028                  		move.b	obSubtype(a0),d0
0000FC2A 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FC2E 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FC30                            
0000FC30 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FC36 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FC3C 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FC42 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FC48 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FC4E                            
0000FC4E                            	Spring_NotLR:
0000FC4E 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FC52 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FC54                            
0000FC54 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FC5A 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FC60                            
0000FC60                            	Spring_NotDwn:
0000FC60 0800 0001                  		btst	#1,d0
0000FC64 6700                       		beq.s	loc_DB72
0000FC66 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FC6C                            
0000FC6C                            loc_DB72:
0000FC6C 0240 000F                  		andi.w	#$F,d0
0000FC70 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FC76 4E75                       		rts	
0000FC78                            ; ===========================================================================
0000FC78                            
0000FC78                            Spring_Up:	; Routine 2
0000FC78 323C 001B                  		move.w	#$1B,d1
0000FC7C 343C 0008                  		move.w	#8,d2
0000FC80 363C 0010                  		move.w	#$10,d3
0000FC84 3828 0008                  		move.w	obX(a0),d4
0000FC88 6100 0000                  		bsr.w	SolidObject
0000FC8C 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FC90 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FC92 4E75                       		rts	
0000FC94                            ; ===========================================================================
0000FC94                            
0000FC94                            Spring_BounceUp:
0000FC94 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC98 5069 000C                  		addq.w	#8,obY(a1)
0000FC9C 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FCA2 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FCA8 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FCAE 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FCB4 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FCBA 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FCC0 4228 0025                  		clr.b	obSolid(a0)
0000FCCE                            
0000FCCE                            Spring_AniUp:	; Routine 4
0000FCCE 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FCD4 6000 CAD0                  		bra.w	AnimateSprite
0000FCD8                            ; ===========================================================================
0000FCD8                            
0000FCD8                            Spring_ResetUp:	; Routine 6
0000FCD8 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FCDE 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FCE2 4E75                       		rts	
0000FCE4                            ; ===========================================================================
0000FCE4                            
0000FCE4                            Spring_LR:	; Routine 8
0000FCE4 323C 0013                  		move.w	#$13,d1
0000FCE8 343C 000E                  		move.w	#$E,d2
0000FCEC 363C 000F                  		move.w	#$F,d3
0000FCF0 3828 0008                  		move.w	obX(a0),d4
0000FCF4 6100 0000                  		bsr.w	SolidObject
0000FCF8 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FCFE 6600                       		bne.s	loc_DC0C
0000FD00 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FD06                            
0000FD06                            loc_DC0C:
0000FD06 0828 0005 0022             		btst	#5,obStatus(a0)
0000FD0C 6600                       		bne.s	Spring_BounceLR
0000FD0E 4E75                       		rts	
0000FD10                            ; ===========================================================================
0000FD10                            
0000FD10                            Spring_BounceLR:
0000FD10 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD14 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FD1A 5069 0008                  		addq.w	#8,obX(a1)
0000FD1E 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FD24 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FD26 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FD2C 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FD30                            
0000FD30                            	Spring_Flipped:
0000FD30 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FD36 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FD3C 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FD42 0829 0002 0022             		btst	#2,obStatus(a1)
0000FD48 6600                       		bne.s	loc_DC56
0000FD4A 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FD50                            
0000FD50                            loc_DC56:
0000FD50 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FD56 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FD66                            
0000FD66                            Spring_AniLR:	; Routine $A
0000FD66 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FD6A 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FD70 6000 CA34                  		bra.w	AnimateSprite
0000FD74                            ; ===========================================================================
0000FD74                            
0000FD74                            Spring_ResetLR:	; Routine $C
0000FD74 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FD7A 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FD7E 4E75                       		rts	
0000FD80                            ; ===========================================================================
0000FD80                            
0000FD80                            Spring_Dwn:	; Routine $E
0000FD80 323C 001B                  		move.w	#$1B,d1
0000FD84 343C 0008                  		move.w	#8,d2
0000FD88 363C 0010                  		move.w	#$10,d3
0000FD8C 3828 0008                  		move.w	obX(a0),d4
0000FD90 6100 0000                  		bsr.w	SolidObject
0000FD94 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FD9A 6600                       		bne.s	loc_DCA4
0000FD9C 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FDA2                            
0000FDA2                            loc_DCA4:
0000FDA2 4A28 0025                  		tst.b	obSolid(a0)
0000FDA6 6600                       		bne.s	locret_DCAE
0000FDA8 4A44                       		tst.w	d4
0000FDAA 6B00                       		bmi.s	Spring_BounceDwn
0000FDAC                            
0000FDAC                            locret_DCAE:
0000FDAC 4E75                       		rts	
0000FDAE                            ; ===========================================================================
0000FDAE                            
0000FDAE                            Spring_BounceDwn:
0000FDAE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FDB2 5169 000C                  		subq.w	#8,obY(a1)
0000FDB6 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FDBC 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FDC0 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FDC6 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FDCC 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FDD2 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FDD8 4228 0025                  		clr.b	obSolid(a0)
0000FDE6                            
0000FDE6                            Spring_AniDwn:	; Routine $10
0000FDE6 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FDEC 6000 C9B8                  		bra.w	AnimateSprite
0000FDF0                            ; ===========================================================================
0000FDF0                            
0000FDF0                            Spring_ResetDwn:
0000FDF0                            		; Routine $12
0000FDF0 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FDF6 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FDFA 4E75                       		rts	
0000FDFA 4E75                       		rts	
0000FDFC                            		include	"_anim\Springs.asm"
0000FDFC                            ; ---------------------------------------------------------------------------
0000FDFC                            ; Animation script - springs
0000FDFC                            ; ---------------------------------------------------------------------------
0000FDFC 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FDFE 0000                       		dc.w byte_DD0E-Ani_Spring
0000FE00 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FE0C 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FE18                            		even
0000FE18                            		even
0000FE18                            Map_Spring:	include	"_maps\Springs.asm"
0000FE18                            ; ---------------------------------------------------------------------------
0000FE18                            ; Sprite mappings - springs
0000FE18                            ; ---------------------------------------------------------------------------
0000FE18                            Map_Spring_internal:
0000FE18 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FE1A 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FE1C 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FE1E 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FE20 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FE22 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FE24 02                         M_Spg_Up:	dc.b 2			; facing up
0000FE25 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FE2A 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FE2F 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FE30 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FE35 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FE36 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FE3B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FE40 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FE45 01                         M_Spg_Left:	dc.b 1			; facing left
0000FE46 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FE4B 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FE4C F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FE51 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FE52 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FE57 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FE5C F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FE61 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FE66                            		even
0000FE66                            		even
0000FE66                            
0000FE66                            		include	"_incObj\42 Newtron.asm"
0000FE66                            ; ---------------------------------------------------------------------------
0000FE66                            ; Object 42 - Newtron enemy (GHZ)
0000FE66                            ; ---------------------------------------------------------------------------
0000FE66                            
0000FE66                            Newtron:
0000FE66 7000                       		moveq	#0,d0
0000FE68 1028 0024                  		move.b	obRoutine(a0),d0
0000FE6C 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FE70 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FE74                            ; ===========================================================================
0000FE74 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FE76 0000                       		dc.w Newt_Action-Newt_Index
0000FE78 0000                       		dc.w Newt_Delete-Newt_Index
0000FE7A                            ; ===========================================================================
0000FE7A                            
0000FE7A                            Newt_Main:	; Routine 0
0000FE7A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE7E 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FE86 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FE8C 117C 0004 0001             		move.b	#4,obRender(a0)
0000FE92 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FE98 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FE9E 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FEA4 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FEAA                            
0000FEAA                            Newt_Action:	; Routine 2
0000FEAA 7000                       		moveq	#0,d0
0000FEAC 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FEB0 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FEB4 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FEB8 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FEBE 6100 C8E6                  		bsr.w	AnimateSprite
0000FEC2 6000 0000                  		bra.w	RememberState
0000FEC6                            ; ===========================================================================
0000FEC6 0000                       @index:		dc.w @chkdistance-@index
0000FEC8 0000                       		dc.w @type00-@index
0000FECA 0000                       		dc.w @matchfloor-@index
0000FECC 0000                       		dc.w @speed-@index
0000FECE 0000                       		dc.w @type01-@index
0000FED0                            ; ===========================================================================
0000FED0                            
0000FED0                            @chkdistance:
0000FED0 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FED6 3038 D008                  		move.w	(v_player+obX).w,d0
0000FEDA 9068 0008                  		sub.w	obX(a0),d0
0000FEDE 6400                       		bcc.s	@sonicisright
0000FEE0 4440                       		neg.w	d0
0000FEE2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FEE8                            
0000FEE8                            	@sonicisright:
0000FEE8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FEEC 6400                       		bcc.s	@outofrange	; if not, branch
0000FEEE 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FEF2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FEF8 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FEFC 6700                       		beq.s	@istype00	; if type is 00, branch
0000FEFE                            
0000FEFE 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FF04 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FF0A 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FF10                            
0000FF10                            	@outofrange:
0000FF10                            	@istype00:
0000FF10 4E75                       		rts	
0000FF12                            ; ===========================================================================
0000FF12                            
0000FF12                            @type00:
0000FF12 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FF18 6400                       		bcc.s	@fall		; is yes, branch
0000FF1A 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FF20 3038 D008                  		move.w	(v_player+obX).w,d0
0000FF24 9068 0008                  		sub.w	obX(a0),d0
0000FF28 6400                       		bcc.s	@sonicisright2
0000FF2A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FF30                            
0000FF30                            	@sonicisright2:
0000FF30 4E75                       		rts	
0000FF32                            ; ===========================================================================
0000FF32                            
0000FF32                            	@fall:
0000FF32 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FF38 6600                       		bne.s	@loc_DE42
0000FF3A 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FF40                            
0000FF40                            	@loc_DE42:
0000FF40 6100 F76C                  		bsr.w	ObjectFall
0000FF44 6100 0000                  		bsr.w	ObjFloorDist
0000FF48 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FF4A 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FF4C                            
0000FF4C D368 000C                  		add.w	d1,obY(a0)
0000FF50 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FF56 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FF5A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FF60 0828 0005 0002             		btst	#5,obGfx(a0)
0000FF66 6700                       		beq.s	@pppppppp
0000FF68 5228 001C                  		addq.b	#1,obAnim(a0)
0000FF6C                            
0000FF6C                            	@pppppppp:
0000FF6C 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FF72 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FF78 0828 0000 0022             		btst	#0,obStatus(a0)
0000FF7E 6600                       		bne.s	@keepfalling
0000FF80 4468 0010                  		neg.w	obVelX(a0)
0000FF84                            
0000FF84                            	@keepfalling:
0000FF84 4E75                       		rts	
0000FF86                            ; ===========================================================================
0000FF86                            
0000FF86                            @matchfloor:
0000FF86 6100 F75E                  		bsr.w	SpeedToPos
0000FF8A 6100 0000                  		bsr.w	ObjFloorDist
0000FF8E 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF92 6D00                       		blt.s	@nextroutine
0000FF94 0C41 000C                  		cmpi.w	#$C,d1
0000FF98 6C00                       		bge.s	@nextroutine
0000FF9A D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FF9E 4E75                       		rts	
0000FFA0                            ; ===========================================================================
0000FFA0                            
0000FFA0                            	@nextroutine:
0000FFA0 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FFA4 4E75                       		rts	
0000FFA6                            ; ===========================================================================
0000FFA6                            
0000FFA6                            @speed:
0000FFA6 6100 F73E                  		bsr.w	SpeedToPos
0000FFAA 4E75                       		rts	
0000FFAC                            ; ===========================================================================
0000FFAC                            
0000FFAC                            @type01:
0000FFAC 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FFB2 6600                       		bne.s	@firemissile
0000FFB4 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FFBA                            
0000FFBA                            	@firemissile:
0000FFBA 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000FFC0 6600                       		bne.s	@fail
0000FFC2 4A28 0032                  		tst.b	$32(a0)
0000FFC6 6600                       		bne.s	@fail
0000FFC8 117C 0001 0032             		move.b	#1,$32(a0)
0000FFCE 6100 FBB6                  		bsr.w	FindFreeObj
0000FFD2 6600                       		bne.s	@fail
0000FFD4 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0000FFD8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FFDE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FFE4 5169 000C                  		subq.w	#8,obY(a1)
0000FFE8 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000FFEE 303C 0014                  		move.w	#$14,d0
0000FFF2 0828 0000 0022             		btst	#0,obStatus(a0)
0000FFF8 6600                       		bne.s	@noflip
0000FFFA 4440                       		neg.w	d0
0000FFFC 4469 0010                  		neg.w	obVelX(a1)
00010000                            
00010000                            	@noflip:
00010000 D169 0008                  		add.w	d0,obX(a1)
00010004 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001000A 137C 0001 0028             		move.b	#1,obSubtype(a1)
00010010                            
00010010                            	@fail:
00010010 4E75                       		rts	
00010012                            ; ===========================================================================
00010012                            
00010012                            Newt_Delete:	; Routine 4
00010012 6000 F726                  		bra.w	DeleteObject
00010012 6000 F726                  		bra.w	DeleteObject
00010016                            		include	"_anim\Newtron.asm"
00010016                            ; ---------------------------------------------------------------------------
00010016                            ; Animation script - Newtron enemy
00010016                            ; ---------------------------------------------------------------------------
00010016 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
00010018 0000                       		dc.w A_Newt_Drop-Ani_Newt
0001001A 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0001001C 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0001001E 0000                       		dc.w A_Newt_Fires-Ani_Newt
00010020 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
00010024 00                         		even
00010024 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0001002C 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
00010030 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
00010034 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0001003E 00                         		even
0001003E 00                         		even
0001003E                            Map_Newt:	include	"_maps\Newtron.asm"
0001003E                            ; ---------------------------------------------------------------------------
0001003E                            ; Sprite mappings - Newtron enemy (GHZ)
0001003E                            ; ---------------------------------------------------------------------------
0001003E                            Map_Newt_internal:
0001003E 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
00010040 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
00010042 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
00010044 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
00010046 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
00010048 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0001004A 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0001004C 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0001004E 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
00010050 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
00010052 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
00010054 03                         M_Newt_Trans:	dc.b 3
00010055 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0001005A F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0001005F FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00010064 03                         M_Newt_Norm:	dc.b 3
00010065 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0001006A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001006F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010074 03                         M_Newt_Fires:	dc.b 3
00010075 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0001007A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001007F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010084 04                         M_Newt_Drop1:	dc.b 4
00010085 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001008A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001008F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010094 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00010099 03                         M_Newt_Drop2:	dc.b 3
0001009A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0001009F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
000100A4 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
000100A9 02                         M_Newt_Drop3:	dc.b 2
000100AA F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100AF F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100B4 03                         M_Newt_Fly1a:	dc.b 3
000100B5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
000100BA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100BF FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
000100C4 03                         M_Newt_Fly1b:	dc.b 3
000100C5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100CA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100CF FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
000100D4 03                         M_Newt_Fly2a:	dc.b 3
000100D5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100DA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100DF FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
000100E4 03                         M_Newt_Fly2b:	dc.b 3
000100E5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000100EA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000100EF FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
000100F4 00                         M_Newt_Blank:	dc.b 0
000100F6 00                         		even
000100F6 00                         		even
000100F6                            		include	"_incObj\43 Roller.asm"
000100F6                            ; ---------------------------------------------------------------------------
000100F6                            ; Object 43 - Roller enemy (SYZ)
000100F6                            ; ---------------------------------------------------------------------------
000100F6                            
000100F6                            Roller:
000100F6 7000                       		moveq	#0,d0
000100F8 1028 0024                  		move.b	obRoutine(a0),d0
000100FC 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010100 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010104                            ; ===========================================================================
00010104 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010106 0000                       		dc.w Roll_Action-Roll_Index
00010108                            ; ===========================================================================
00010108                            
00010108                            Roll_Main:	; Routine 0
00010108 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001010E 117C 0008 0017             		move.b	#8,obWidth(a0)
00010114 6100 F598                  		bsr.w	ObjectFall
00010118 6100 0000                  		bsr.w	ObjFloorDist
0001011C 4A41                       		tst.w	d1
0001011E 6A00                       		bpl.s	locret_E052
00010120 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
00010124 317C 0000 0012             		move.w	#0,obVelY(a0)
0001012A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001012E 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
00010136 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
0001013C 117C 0004 0001             		move.b	#4,obRender(a0)
00010142 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010148 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001014E                            
0001014E                            	locret_E052:
0001014E 4E75                       		rts	
00010150                            ; ===========================================================================
00010150                            
00010150                            Roll_Action:	; Routine 2
00010150 7000                       		moveq	#0,d0
00010152 1028 0025                  		move.b	ob2ndRout(a0),d0
00010156 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0001015A 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
0001015E 43F9 0000 0000             		lea	(Ani_Roll).l,a1
00010164 6100 C640                  		bsr.w	AnimateSprite
00010168 3028 0008                  		move.w	obX(a0),d0
0001016C 0240 FF80                  		andi.w	#$FF80,d0
00010170 3238 F700                  		move.w	(v_screenposx).w,d1
00010174 0441 0080                  		subi.w	#$80,d1
00010178 0241 FF80                  		andi.w	#$FF80,d1
0001017C 9041                       		sub.w	d1,d0
0001017E 0C40 0280                  		cmpi.w	#$280,d0
00010182 6E00 0000                  		bgt.w	Roll_ChkGone
00010186 6000 F572                  		bra.w	DisplaySprite
0001018A                            ; ===========================================================================
0001018A                            
0001018A                            Roll_ChkGone:
0001018A 45F8 FC00                  		lea	(v_objstate).w,a2
0001018E 7000                       		moveq	#0,d0
00010190 1028 0023                  		move.b	obRespawnNo(a0),d0
00010194 6700                       		beq.s	Roll_Delete
00010196 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001019C                            
0001019C                            Roll_Delete:
0001019C 6000 F59C                  		bra.w	DeleteObject
000101A0                            ; ===========================================================================
000101A0 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
000101A2 0000                       		dc.w Roll_RollNoChk-Roll_Index2
000101A4 0000                       		dc.w Roll_ChkJump-Roll_Index2
000101A6 0000                       		dc.w Roll_MatchFloor-Roll_Index2
000101A8                            ; ===========================================================================
000101A8                            
000101A8                            Roll_RollChk:
000101A8 3038 D008                  		move.w	(v_player+obX).w,d0
000101AC 0440 0100                  		subi.w	#$100,d0
000101B0 6500                       		bcs.s	loc_E0D2
000101B2 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
000101B6 6500                       		bcs.s	loc_E0D2
000101B8 5828 0025                  		addq.b	#4,ob2ndRout(a0)
000101BC 117C 0002 001C             		move.b	#2,obAnim(a0)
000101C2 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
000101C8 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
000101CE                            
000101CE                            loc_E0D2:
000101CE 588F                       		addq.l	#4,sp
000101D0 4E75                       		rts	
000101D2                            ; ===========================================================================
000101D2                            
000101D2                            Roll_RollNoChk:
000101D2 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
000101D8 6700                       		beq.s	loc_E0F8
000101DA 5368 0030                  		subq.w	#1,$30(a0)
000101DE 6A00                       		bpl.s	locret_E0F6
000101E0 117C 0001 001C             		move.b	#1,obAnim(a0)
000101E6 317C 0700 0010             		move.w	#$700,obVelX(a0)
000101EC 117C 008E 0020             		move.b	#$8E,obColType(a0)
000101F2                            
000101F2                            locret_E0F6:
000101F2 4E75                       		rts	
000101F4                            ; ===========================================================================
000101F4                            
000101F4                            loc_E0F8:
000101F4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000101F8 4E75                       		rts	
000101FA                            ; ===========================================================================
000101FA                            
000101FA                            Roll_ChkJump:
000101FA 6100 0000                  		bsr.w	Roll_Stop
000101FE 6100 F4E6                  		bsr.w	SpeedToPos
00010202 6100 0000                  		bsr.w	ObjFloorDist
00010206 0C41 FFF8                  		cmpi.w	#-8,d1
0001020A 6D00                       		blt.s	Roll_Jump
0001020C 0C41 000C                  		cmpi.w	#$C,d1
00010210 6C00                       		bge.s	Roll_Jump
00010212 D368 000C                  		add.w	d1,obY(a0)
00010216 4E75                       		rts	
00010218                            ; ===========================================================================
00010218                            
00010218                            Roll_Jump:
00010218 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001021C 08E8 0000 0032             		bset	#0,$32(a0)
00010222 6700                       		beq.s	locret_E12E
00010224 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
0001022A                            
0001022A                            locret_E12E:
0001022A 4E75                       		rts	
0001022C                            ; ===========================================================================
0001022C                            
0001022C                            Roll_MatchFloor:
0001022C 6100 F480                  		bsr.w	ObjectFall
00010230 4A68 0012                  		tst.w	obVelY(a0)
00010234 6B00                       		bmi.s	locret_E150
00010236 6100 0000                  		bsr.w	ObjFloorDist
0001023A 4A41                       		tst.w	d1
0001023C 6A00                       		bpl.s	locret_E150
0001023E D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
00010242 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00010246 317C 0000 0012             		move.w	#0,obVelY(a0)
0001024C                            
0001024C                            locret_E150:
0001024C 4E75                       		rts	
0001024E                            
0001024E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001024E                            
0001024E                            
0001024E                            Roll_Stop:
0001024E 4A28 0032                  		tst.b	$32(a0)
00010252 6B00                       		bmi.s	locret_E188
00010254 3038 D008                  		move.w	(v_player+obX).w,d0
00010258 0440 0030                  		subi.w	#$30,d0
0001025C 9068 0008                  		sub.w	obX(a0),d0
00010260 6400                       		bcc.s	locret_E188
00010262 117C 0000 001C             		move.b	#0,obAnim(a0)
00010268 117C 000E 0020             		move.b	#$E,obColType(a0)
0001026E 4268 0010                  		clr.w	obVelX(a0)
00010272 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00010278 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0001027E 08E8 0007 0032             		bset	#7,$32(a0)
00010284                            
00010284                            locret_E188:
00010284 4E75                       		rts	
00010286                            ; End of function Roll_Stop
00010286                            ; End of function Roll_Stop
00010286                            		include	"_anim\Roller.asm"
00010286                            ; ---------------------------------------------------------------------------
00010286                            ; Animation script - Roller enemy
00010286                            ; ---------------------------------------------------------------------------
00010286 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
00010288 0000                       		dc.w A_Roll_Fold-Ani_Roll
0001028A 0000                       		dc.w A_Roll_Roll-Ani_Roll
0001028C 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010292 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
00010298 00                         		even
00010298 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
0001029E 00                         		even
0001029E 00                         		even
0001029E                            Map_Roll:	include	"_maps\Roller.asm"
0001029E                            ; --------------------------------------------------------------------------------
0001029E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001029E                            ; --------------------------------------------------------------------------------
0001029E                            
0001029E                            SME_q3BmU:	
0001029E 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000102A2 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000102A6 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000102A8 02                         SME_q3BmU_A:	dc.b 2	
000102A9 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000102AE F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
000102B3 02                         SME_q3BmU_15:	dc.b 2	
000102B4 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
000102B9 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
000102BE 01                         SME_q3BmU_20:	dc.b 1	
000102BF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
000102C4 01                         SME_q3BmU_26:	dc.b 1	
000102C5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
000102CA 01                         SME_q3BmU_2C:	dc.b 1	
000102CB F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
000102D0                            		even
000102D0                            		even
000102D0                            
000102D0                            		include	"_incObj\44 GHZ Edge Walls.asm"
000102D0                            ; ---------------------------------------------------------------------------
000102D0                            ; Object 44 - edge walls (GHZ)
000102D0                            ; ---------------------------------------------------------------------------
000102D0                            
000102D0                            EdgeWalls:
000102D0 7000                       		moveq	#0,d0
000102D2 1028 0024                  		move.b	obRoutine(a0),d0
000102D6 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
000102DA 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
000102DE                            ; ===========================================================================
000102DE 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
000102E0 0000                       		dc.w Edge_Solid-Edge_Index
000102E2 0000                       		dc.w Edge_Display-Edge_Index
000102E4                            ; ===========================================================================
000102E4                            
000102E4                            Edge_Main:	; Routine 0
000102E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000102E8 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
000102F0 317C 434C 0002             		move.w	#$434C,obGfx(a0)
000102F6 0028 0004 0001             		ori.b	#4,obRender(a0)
000102FC 117C 0008 0014             		move.b	#8,obActWid(a0)
00010302 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010308 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0001030E 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010314 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010316 5428 0024                  		addq.b	#2,obRoutine(a0)
0001031A 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
0001031C                            ; ===========================================================================
0001031C                            
0001031C                            Edge_Solid:	; Routine 2
0001031C 323C 0013                  		move.w	#$13,d1
00010320 343C 0028                  		move.w	#$28,d2
00010324 6100 A130                  		bsr.w	Obj44_SolidWall
00010328                            
00010328                            Edge_Display:	; Routine 4
00010328 6100 F3D0                  		bsr.w	DisplaySprite
0001034A 4E75                       		rts	
0001034A 4E75                       		rts	
0001034C                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
0001034C                            ; ---------------------------------------------------------------------------
0001034C                            ; Sprite mappings - walls (GHZ)
0001034C                            ; ---------------------------------------------------------------------------
0001034C                            Map_Edge_internal:
0001034C 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
0001034E 0000                       		dc.w M_Edge_Light-Map_Edge_internal
00010350 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
00010352 04                         M_Edge_Shadow:	dc.b 4
00010353 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
00010358 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001035D 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010362 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010367 04                         M_Edge_Light:	dc.b 4
00010368 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
0001036D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010372 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010377 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001037C 04                         M_Edge_Dark:	dc.b 4
0001037D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010382 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010387 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001038C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010392 00                         		even
00010392 00                         		even
00010392                            
00010392                            		include	"_incObj\13 Lava Ball Maker.asm"
00010392                            ; ---------------------------------------------------------------------------
00010392                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010392                            ; ---------------------------------------------------------------------------
00010392                            
00010392                            LavaMaker:
00010392 7000                       		moveq	#0,d0
00010394 1028 0024                  		move.b	obRoutine(a0),d0
00010398 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
0001039C 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000103A0 6000 0000                  		bra.w	LBall_ChkDel
000103A4                            ; ===========================================================================
000103A4 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000103A6 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000103A8                            ; ---------------------------------------------------------------------------
000103A8                            ;
000103A8                            ; Lava ball production rates
000103A8                            ;
000103A8 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000103AE                            ; ===========================================================================
000103AE                            
000103AE                            LavaM_Main:	; Routine 0
000103AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000103B2 1028 0028                  		move.b	obSubtype(a0),d0
000103B6 E848                       		lsr.w	#4,d0
000103B8 0240 000F                  		andi.w	#$F,d0
000103BC 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
000103C2 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
000103C8 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000103CE                            
000103CE                            LavaM_MakeLava:	; Routine 2
000103CE 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
000103D2 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
000103D4 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
000103DA 6100 F59E                  		bsr.w	ChkObjectVisible
000103DE 6600                       		bne.s	LavaM_Wait
000103E0 6100 F7A4                  		bsr.w	FindFreeObj
000103E4 6600                       		bne.s	LavaM_Wait
000103E6 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
000103EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000103F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000103F6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000103FC                            
000103FC                            	LavaM_Wait:
000103FC 4E75                       		rts	
000103FC 4E75                       		rts	
000103FE                            		include	"_incObj\14 Lava Ball.asm"
000103FE                            ; ---------------------------------------------------------------------------
000103FE                            ; Object 14 - lava balls (MZ, SLZ)
000103FE                            ; ---------------------------------------------------------------------------
000103FE                            
000103FE                            LavaBall:
000103FE 7000                       		moveq	#0,d0
00010400 1028 0024                  		move.b	obRoutine(a0),d0
00010404 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010408 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001040C 6000 F2EC                  		bra.w	DisplaySprite
00010410                            ; ===========================================================================
00010410 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010412 0000                       		dc.w LBall_Action-LBall_Index
00010414 0000                       		dc.w LBall_Delete-LBall_Index
00010416                            
00010416 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
00010420 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010428                            ; ===========================================================================
00010428                            
00010428                            LBall_Main:	; Routine 0
00010428 5428 0024                  		addq.b	#2,obRoutine(a0)
0001042C 117C 0008 0016             		move.b	#8,obHeight(a0)
00010432 117C 0008 0017             		move.b	#8,obWidth(a0)
00010438 217C 0000 D3F8 0004        		move.l	#Map_Fire,obMap(a0)
00010440 317C 0345 0002             		move.w	#$345,obGfx(a0)
00010446 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
0001044C 6600                       		bne.s	@notSLZ
0001044E 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
00010454                            
00010454                            	@notSLZ:
00010454 117C 0004 0001             		move.b	#4,obRender(a0)
0001045A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010460 117C 008B 0020             		move.b	#$8B,obColType(a0)
00010466 3168 000C 0030             		move.w	obY(a0),$30(a0)
0001046C 4A28 0029                  		tst.b	$29(a0)
00010470 6700                       		beq.s	@speed
00010472 5428 0018                  		addq.b	#2,obPriority(a0)
00010476                            
00010476                            	@speed:
00010476 7000                       		moveq	#0,d0
00010478 1028 0028                  		move.b	obSubtype(a0),d0
0001047C D040                       		add.w	d0,d0
0001047E 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010484 117C 0008 0014             		move.b	#8,obActWid(a0)
0001048A 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010490 6500                       		bcs.s	@sound		; if yes, branch
00010492                            
00010492 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010498 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
0001049E 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000104A4 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000104AA                            
000104AA                            	@sound:
000104B4                            
000104B4                            LBall_Action:	; Routine 2
000104B4 7000                       		moveq	#0,d0
000104B6 1028 0028                  		move.b	obSubtype(a0),d0
000104BA D040                       		add.w	d0,d0
000104BC 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
000104C0 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
000104C4 6100 F220                  		bsr.w	SpeedToPos
000104C8 43F9 0000 0000             		lea	(Ani_Fire).l,a1
000104CE 6100 C2D6                  		bsr.w	AnimateSprite
000104D2                            
000104D2                            LBall_ChkDel:
000104F0 4E75                       		rts	
000104F2                            ; ===========================================================================
000104F2 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000104F6 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
000104FA 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
000104FE 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010502 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010504                            ; ===========================================================================
00010504                            ; lavaball types 00-03 fly up and fall back down
00010504                            
00010504                            LBall_Type00:
00010504 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
0001050A 3028 0030                  		move.w	$30(a0),d0
0001050E B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010512 6400                       		bcc.s	loc_E41E	; if not, branch
00010514 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010518                            
00010518                            loc_E41E:
00010518 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001051E 4A68 0012                  		tst.w	obVelY(a0)
00010522 6A00                       		bpl.s	locret_E430
00010524 08E8 0001 0022             		bset	#1,obStatus(a0)
0001052A                            
0001052A                            locret_E430:
0001052A 4E75                       		rts	
0001052C                            ; ===========================================================================
0001052C                            ; lavaball type	04 flies up until it hits the ceiling
0001052C                            
0001052C                            LBall_Type04:
0001052C 08E8 0001 0022             		bset	#1,obStatus(a0)
00010532 6100 0000                  		bsr.w	ObjHitCeiling
00010536 4A41                       		tst.w	d1
00010538 6A00                       		bpl.s	locret_E452
0001053A 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010540 117C 0001 001C             		move.b	#1,obAnim(a0)
00010546 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
0001054C                            
0001054C                            locret_E452:
0001054C 4E75                       		rts	
0001054E                            ; ===========================================================================
0001054E                            ; lavaball type	05 falls down until it hits the	floor
0001054E                            
0001054E                            LBall_Type05:
0001054E 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010554 6100 0000                  		bsr.w	ObjFloorDist
00010558 4A41                       		tst.w	d1
0001055A 6A00                       		bpl.s	locret_E474
0001055C 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010562 117C 0001 001C             		move.b	#1,obAnim(a0)
00010568 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
0001056E                            
0001056E                            locret_E474:
0001056E 4E75                       		rts	
00010570                            ; ===========================================================================
00010570                            ; lavaball types 06-07 move sideways
00010570                            
00010570                            LBall_Type06:
00010570 08E8 0000 0022             		bset	#0,obStatus(a0)
00010576 76F8                       		moveq	#-8,d3
00010578 6100 0000                  		bsr.w	ObjHitWallLeft
0001057C 4A41                       		tst.w	d1
0001057E 6A00                       		bpl.s	locret_E498
00010580 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010586 117C 0003 001C             		move.b	#3,obAnim(a0)
0001058C 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010592                            
00010592                            locret_E498:
00010592 4E75                       		rts	
00010594                            ; ===========================================================================
00010594                            
00010594                            LBall_Type07:
00010594 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001059A 7608                       		moveq	#8,d3
0001059C 6100 0000                  		bsr.w	ObjHitWallRight
000105A0 4A41                       		tst.w	d1
000105A2 6A00                       		bpl.s	locret_E4BC
000105A4 117C 0008 0028             		move.b	#8,obSubtype(a0)
000105AA 117C 0003 001C             		move.b	#3,obAnim(a0)
000105B0 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000105B6                            
000105B6                            locret_E4BC:
000105B6 4E75                       		rts	
000105B8                            ; ===========================================================================
000105B8                            
000105B8                            LBall_Type08:
000105B8 4E75                       		rts	
000105BA                            ; ===========================================================================
000105BA                            
000105BA                            LBall_Delete:
000105BA 6000 F17E                  		bra.w	DeleteObject
000105BA 6000 F17E                  		bra.w	DeleteObject
000105BE                            		include	"_anim\Fireballs.asm"
000105BE                            ; ---------------------------------------------------------------------------
000105BE                            ; Animation script - lava balls
000105BE                            ; ---------------------------------------------------------------------------
000105BE 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
000105C0 0000                       		dc.w @vertcollide-Ani_Fire
000105C2 0000                       		dc.w @horizontal-Ani_Fire
000105C4 0000                       		dc.w @horicollide-Ani_Fire
000105C6 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
000105CC 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
000105D0 00                         		even
000105D0 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
000105D6 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
000105DA 00                         		even
000105DA 00                         		even
000105DA                            
000105DA                            		include	"_incObj\6D Flamethrower.asm"
000105DA                            ; ---------------------------------------------------------------------------
000105DA                            ; Object 6D - flame thrower (SBZ)
000105DA                            ; ---------------------------------------------------------------------------
000105DA                            
000105DA                            Flamethrower:
000105DA 7000                       		moveq	#0,d0
000105DC 1028 0024                  		move.b	obRoutine(a0),d0
000105E0 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
000105E4 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
000105E8                            ; ===========================================================================
000105E8 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
000105EA 0000                       		dc.w Flame_Action-Flame_Index
000105EC                            ; ===========================================================================
000105EC                            
000105EC                            Flame_Main:	; Routine 0
000105EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000105F0 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
000105F8 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
000105FE 0028 0004 0001             		ori.b	#4,obRender(a0)
00010604 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001060A 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010610 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010616 1028 0028                  		move.b	obSubtype(a0),d0
0001061A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001061E D040                       		add.w	d0,d0		; multiply by 2
00010620 3140 0030                  		move.w	d0,$30(a0)
00010624 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010628 1028 0028                  		move.b	obSubtype(a0),d0
0001062C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010630 EB48                       		lsl.w	#5,d0		; multiply by $20
00010632 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010636 117C 000A 0036             		move.b	#$A,$36(a0)
0001063C 0828 0001 0022             		btst	#1,obStatus(a0)
00010642 6700                       		beq.s	Flame_Action
00010644 117C 0002 001C             		move.b	#2,obAnim(a0)
0001064A 117C 0015 0036             		move.b	#$15,$36(a0)
00010650                            
00010650                            Flame_Action:	; Routine 2
00010650 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00010654 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00010656 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001065C 0868 0000 001C             		bchg	#0,obAnim(a0)
00010662 6700                       		beq.s	loc_E57A
00010664 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010674                            
00010674                            loc_E57A:
00010674 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0001067A 6100 C12A                  		bsr.w	AnimateSprite
0001067E 117C 0000 0020             		move.b	#0,obColType(a0)
00010684 1028 0036                  		move.b	$36(a0),d0
00010688 B028 001A                  		cmp.b	obFrame(a0),d0
0001068C 6600                       		bne.s	Flame_ChkDel
0001068E 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010694                            
00010694                            Flame_ChkDel:
000106B2 6000 F046                  		bra.w	DisplaySprite
000106B2 6000 F046                  		bra.w	DisplaySprite
000106B6                            		include	"_anim\Flamethrower.asm"
000106B6                            ; ---------------------------------------------------------------------------
000106B6                            ; Animation script - flamethrower (SBZ)
000106B6                            ; ---------------------------------------------------------------------------
000106B6 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
000106B8 0000                       		dc.w @pipe2-Ani_Flame
000106BA 0000                       		dc.w @valve1-Ani_Flame
000106BC 0000                       		dc.w @valve2-Ani_Flame
000106BE 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
000106CC 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
000106D6 00                         		even
000106D6 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
000106E4 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
000106EE 00                         		even
000106EE 00                         		even
000106EE                            Map_Flame:	include	"_maps\Flamethrower.asm"
000106EE                            ; ---------------------------------------------------------------------------
000106EE                            ; Sprite mappings - flame thrower (SBZ)
000106EE                            ; ---------------------------------------------------------------------------
000106EE                            Map_Flame_internal:
000106EE 0000                       		dc.w @pipe1-Map_Flame_internal
000106F0 0000                       		dc.w @pipe2-Map_Flame_internal
000106F2 0000                       		dc.w @pipe3-Map_Flame_internal
000106F4 0000                       		dc.w @pipe4-Map_Flame_internal
000106F6 0000                       		dc.w @pipe5-Map_Flame_internal
000106F8 0000                       		dc.w @pipe6-Map_Flame_internal
000106FA 0000                       		dc.w @pipe7-Map_Flame_internal
000106FC 0000                       		dc.w @pipe8-Map_Flame_internal
000106FE 0000                       		dc.w @pipe9-Map_Flame_internal
00010700 0000                       		dc.w @pipe10-Map_Flame_internal
00010702 0000                       		dc.w @pipe11-Map_Flame_internal
00010704 0000                       		dc.w @valve1-Map_Flame_internal
00010706 0000                       		dc.w @valve2-Map_Flame_internal
00010708 0000                       		dc.w @valve3-Map_Flame_internal
0001070A 0000                       		dc.w @valve4-Map_Flame_internal
0001070C 0000                       		dc.w @valve5-Map_Flame_internal
0001070E 0000                       		dc.w @valve6-Map_Flame_internal
00010710 0000                       		dc.w @valve7-Map_Flame_internal
00010712 0000                       		dc.w @valve8-Map_Flame_internal
00010714 0000                       		dc.w @valve9-Map_Flame_internal
00010716 0000                       		dc.w @valve10-Map_Flame_internal
00010718 0000                       		dc.w @valve11-Map_Flame_internal
0001071A 01                         @pipe1:		dc.b 1
0001071B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010720 02                         @pipe2:		dc.b 2
00010721 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010726 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001072B 02                         @pipe3:		dc.b 2
0001072C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010731 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010736 03                         @pipe4:		dc.b 3
00010737 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001073C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010741 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010746 03                         @pipe5:		dc.b 3
00010747 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001074C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010751 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010756 04                         @pipe6:		dc.b 4
00010757 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001075C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010761 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010766 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001076B 04                         @pipe7:		dc.b 4
0001076C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010771 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010776 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001077B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010780 05                         @pipe8:		dc.b 5
00010781 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010786 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001078B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010790 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010795 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001079A 05                         @pipe9:		dc.b 5
0001079B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000107A0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000107A5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107AA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107AF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107B4 06                         @pipe10:	dc.b 6
000107B5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000107BA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000107BF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000107C4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000107C9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000107CE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107D3 06                         @pipe11:	dc.b 6
000107D4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000107D9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000107DE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000107E3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000107E8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000107ED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000107F2 01                         @valve1:	dc.b 1
000107F3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
000107F8 02                         @valve2:	dc.b 2
000107F9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000107FE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010803 02                         @valve3:	dc.b 2
00010804 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010809 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001080E 03                         @valve4:	dc.b 3
0001080F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010814 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010819 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001081E 03                         @valve5:	dc.b 3
0001081F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010824 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010829 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001082E 04                         @valve6:	dc.b 4
0001082F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010834 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010839 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001083E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010843 04                         @valve7:	dc.b 4
00010844 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010849 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001084E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010853 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010858 05                         @valve8:	dc.b 5
00010859 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001085E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010863 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010868 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001086D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010872 05                         @valve9:	dc.b 5
00010873 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010878 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001087D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010882 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010887 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001088C 06                         @valve10:	dc.b 6
0001088D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010892 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010897 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001089C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000108A1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108A6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108AB 06                         @valve11:	dc.b 6
000108AC E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000108B1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000108B6 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000108BB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108C0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000108C5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108CA                            		even
000108CA                            		even
000108CA                            
000108CA                            		include	"_incObj\46 MZ Bricks.asm"
000108CA                            ; ---------------------------------------------------------------------------
000108CA                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000108CA                            ; ---------------------------------------------------------------------------
000108CA                            
000108CA                            MarbleBrick:
000108CA 7000                       		moveq	#0,d0
000108CC 1028 0024                  		move.b	obRoutine(a0),d0
000108D0 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
000108D4 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
000108D8                            ; ===========================================================================
000108D8 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
000108DA 0000                       		dc.w Brick_Action-Brick_Index
000108DC                            
000108DC =00000030                  brick_origY:	equ $30
000108DC                            ; ===========================================================================
000108DC                            
000108DC                            Brick_Main:	; Routine 0
000108DC 5428 0024                  		addq.b	#2,obRoutine(a0)
000108E0 117C 000F 0016             		move.b	#$F,obHeight(a0)
000108E6 117C 000F 0017             		move.b	#$F,obWidth(a0)
000108EC 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
000108F4 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000108FA 117C 0004 0001             		move.b	#4,obRender(a0)
00010900 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010906 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001090C 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010912 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010918                            
00010918                            Brick_Action:	; Routine 2
00010918 4A28 0001                  		tst.b	obRender(a0)
0001091C 6A00                       		bpl.s	@chkdel
0001091E 7000                       		moveq	#0,d0
00010920 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010924 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010928 D040                       		add.w	d0,d0
0001092A 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
0001092E 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010932 323C 001B                  		move.w	#$1B,d1
00010936 343C 0010                  		move.w	#$10,d2
0001093A 363C 0011                  		move.w	#$11,d3
0001093E 3828 0008                  		move.w	obX(a0),d4
00010942 6100 0000                  		bsr.w	SolidObject
00010946                            
00010946                            	@chkdel:
00010964 6000 ED94                  			bra.w	DisplaySprite
00010968                            ; ===========================================================================
00010968 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
0001096A 0000                       		dc.w Brick_Type01-Brick_TypeIndex
0001096C 0000                       		dc.w Brick_Type02-Brick_TypeIndex
0001096E 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010970 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010972                            ; ===========================================================================
00010972                            
00010972                            Brick_Type00:
00010972 4E75                       		rts	
00010974                            ; ===========================================================================
00010974                            
00010974                            Brick_Type02:
00010974 3038 D008                  		move.w	(v_player+obX).w,d0
00010978 9068 0008                  		sub.w	obX(a0),d0
0001097C 6400                       		bcc.s	loc_E888
0001097E 4440                       		neg.w	d0
00010980                            
00010980                            loc_E888:
00010980 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010984 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010986 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
0001098C                            
0001098C                            Brick_Type01:
0001098C 7000                       		moveq	#0,d0
0001098E 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010992 0828 0003 0028             		btst	#3,obSubtype(a0)
00010998 6700                       		beq.s	loc_E8A8
0001099A 4440                       		neg.w	d0
0001099C 0640 0010                  		addi.w	#$10,d0
000109A0                            
000109A0                            loc_E8A8:
000109A0 3228 0030                  		move.w	brick_origY(a0),d1
000109A4 9240                       		sub.w	d0,d1
000109A6 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
000109AA 4E75                       		rts	
000109AC                            ; ===========================================================================
000109AC                            
000109AC                            Brick_Type03:
000109AC 6100 ED38                  		bsr.w	SpeedToPos
000109B0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
000109B6 6100 0000                  		bsr.w	ObjFloorDist
000109BA 4A41                       		tst.w	d1		; has the block	hit the	floor?
000109BC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
000109C0 D368 000C                  		add.w	d1,obY(a0)
000109C4 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
000109C8 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
000109CE 117C 0004 0028             		move.b	#4,obSubtype(a0)
000109D4 3011                       		move.w	(a1),d0
000109D6 0240 03FF                  		andi.w	#$3FF,d0
000109DA 0C40 016A                  			cmpi.w	#$16A,d0
000109DE 6400                       		bcc.s	locret_E8EE
000109E0 117C 0000 0028             		move.b	#0,obSubtype(a0)
000109E6                            
000109E6                            locret_E8EE:
000109E6 4E75                       		rts	
000109E8                            ; ===========================================================================
000109E8                            
000109E8                            Brick_Type04:
000109E8 7000                       		moveq	#0,d0
000109EA 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
000109EE E648                       		lsr.w	#3,d0
000109F0 3228 0030                  		move.w	brick_origY(a0),d1
000109F4 9240                       		sub.w	d0,d1
000109F6 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
000109FA 4E75                       		rts	
000109FA 4E75                       		rts	
000109FC                            Map_Brick:	include	"_maps\MZ Bricks.asm"
000109FC                            ; ---------------------------------------------------------------------------
000109FC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
000109FC                            ; ---------------------------------------------------------------------------
000109FC                            Map_Brick_internal:
000109FC 0000                       		dc.w @brick-Map_Brick_internal
000109FE 01                         @brick:		dc.b 1
000109FF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010A04                            		even
00010A04                            		even
00010A04                            
00010A04                            		include	"_incObj\12 Light.asm"
00010A04                            ; ---------------------------------------------------------------------------
00010A04                            ; Object 12 - lamp (SYZ)
00010A04                            ; ---------------------------------------------------------------------------
00010A04                            
00010A04                            SpinningLight:
00010A04 7000                       		moveq	#0,d0
00010A06 1028 0024                  		move.b	obRoutine(a0),d0
00010A0A 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010A0E 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010A12                            ; ===========================================================================
00010A12 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010A14 0000                       		dc.w Light_Animate-Light_Index
00010A16                            ; ===========================================================================
00010A16                            
00010A16                            Light_Main:	; Routine 0
00010A16 5428 0024                  		addq.b	#2,obRoutine(a0)
00010A1A 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010A22 317C 0000 0002             		move.w	#0,obGfx(a0)
00010A28 117C 0004 0001             		move.b	#4,obRender(a0)
00010A2E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010A34 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010A3A                            
00010A3A                            Light_Animate:	; Routine 2
00010A3A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010A3E 6A00                       		bpl.s	@chkdel
00010A40 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010A46 5228 001A                  		addq.b	#1,obFrame(a0)
00010A4A 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010A50 6500                       		bcs.s	@chkdel
00010A52 117C 0000 001A             		move.b	#0,obFrame(a0)
00010A58                            
00010A58                            	@chkdel:
00010A76 6000 EC82                  		bra.w	DisplaySprite
00010A76 6000 EC82                  		bra.w	DisplaySprite
00010A7A                            Map_Light	include	"_maps\Light.asm"
00010A7A                            ; --------------------------------------------------------------------------------
00010A7A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010A7A                            ; --------------------------------------------------------------------------------
00010A7A                            
00010A7A                            SME_FBl1X:	
00010A7A 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010A7E 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010A82 05                         SME_FBl1X_8:	dc.b 5	
00010A83 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010A88 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010A8D F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010A92 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010A97 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010A9C 05                         SME_FBl1X_22:	dc.b 5	
00010A9D E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010AA2 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010AA7 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010AAC F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010AB1 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010AB6 06                         SME_FBl1X_3C:	dc.b 6	
00010AB7 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010ABC E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010AC1 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010AC6 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010ACB F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010AD0 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010AD5 05                         SME_FBl1X_5B:	dc.b 5	
00010AD6 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010ADB E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010AE0 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010AE5 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010AEA F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010AF0 00                         		even
00010AF0 00                         		even
00010AF0                            		include	"_incObj\47 Bumper.asm"
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            ; Object 47 - pinball bumper (SYZ)
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            
00010AF0                            Bumper:
00010AF0 7000                       		moveq	#0,d0
00010AF2 1028 0024                  		move.b	obRoutine(a0),d0
00010AF6 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010AFA 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010AFE                            ; ===========================================================================
00010AFE 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010B00 0000                       		dc.w Bump_Hit-Bump_Index
00010B02                            ; ===========================================================================
00010B02                            
00010B02                            Bump_Main:	; Routine 0
00010B02 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B06 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010B0E 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010B14 117C 0004 0001             		move.b	#4,obRender(a0)
00010B1A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B20 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010B26 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010B2C                            
00010B2C                            Bump_Hit:	; Routine 2
00010B2C 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010B30 6700 0000                  		beq.w	@display	; if not, branch
00010B34 4228 0021                  		clr.b	obColProp(a0)
00010B38 43F8 D000                  		lea	(v_player).w,a1
00010B3C 3228 0008                  		move.w	obX(a0),d1
00010B40 3428 000C                  		move.w	obY(a0),d2
00010B44 9269 0008                  		sub.w	obX(a1),d1
00010B48 9469 000C                  		sub.w	obY(a1),d2
00010B4C 4EB9 0000 3A40             		jsr	(CalcAngle).l
00010B52 4EB9 0000 37AE             		jsr	(CalcSine).l
00010B58 C3FC F900                  		muls.w	#-$700,d1
00010B5C E081                       		asr.l	#8,d1
00010B5E 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010B62 C1FC F900                  		muls.w	#-$700,d0
00010B66 E080                       		asr.l	#8,d0
00010B68 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010B6C 08E9 0001 0022             		bset	#1,obStatus(a1)
00010B72 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010B78 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010B7E 4229 003C                  		clr.b	$3C(a1)
00010B82 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010B92 45F8 FC00                  		lea	(v_objstate).w,a2
00010B96 7000                       		moveq	#0,d0
00010B98 1028 0023                  		move.b	obRespawnNo(a0),d0
00010B9C 6700                       		beq.s	@addscore
00010B9E 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010BA4 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010BA6 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010BAA                            
00010BAA                            	@addscore:
00010BAA 7001                       		moveq	#1,d0
00010BAC 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010BB2 6100 EFD2                  		bsr.w	FindFreeObj
00010BB6 6600                       		bne.s	@display
00010BB8 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010BBC 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010BC2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010BC8 137C 0004 001A             		move.b	#4,obFrame(a1)
00010BCE                            
00010BCE                            	@display:
00010BCE 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010BD4 6100 BBD0                  		bsr.w	AnimateSprite
00010BF4 6000 EB04                  		bra.w	DisplaySprite
00010BF8                            ; ===========================================================================
00010BF8                            
00010BF8                            @resetcount:
00010BF8 45F8 FC00                  		lea	(v_objstate).w,a2
00010BFC 7000                       		moveq	#0,d0
00010BFE 1028 0023                  		move.b	obRespawnNo(a0),d0
00010C02 6700                       		beq.s	@delete
00010C04 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010C0A                            
00010C0A                            	@delete:
00010C0A 6000 EB2E                  		bra.w	DeleteObject
00010C0A 6000 EB2E                  		bra.w	DeleteObject
00010C0E                            		include	"_anim\Bumper.asm"
00010C0E                            ; ---------------------------------------------------------------------------
00010C0E                            ; Animation script - flamethrower (SBZ)
00010C0E                            ; ---------------------------------------------------------------------------
00010C0E 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010C10 0000                       		dc.w byte_EAF8-Ani_Bump
00010C12 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010C16 00                         		even
00010C16 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010C1E 00                         		even
00010C1E 00                         		even
00010C1E                            Map_Bump:	include	"_maps\Bumper.asm"
00010C1E                            ; ---------------------------------------------------------------------------
00010C1E                            ; Sprite mappings - pinball bumper (SYZ)
00010C1E                            ; ---------------------------------------------------------------------------
00010C1E                            Map_Bump_internal:
00010C1E 0000                       		dc.w @normal-Map_Bump_internal
00010C20 0000                       		dc.w @bumped1-Map_Bump_internal
00010C22 0000                       		dc.w @bumped2-Map_Bump_internal
00010C24 02                         @normal:	dc.b 2
00010C25 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010C2A F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010C2F 02                         @bumped1:	dc.b 2
00010C30 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010C35 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010C3A 02                         @bumped2:	dc.b 2
00010C3B F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010C40 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010C46 00                         		even
00010C46 00                         		even
00010C46                            
00010C46                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010C46                            ; ---------------------------------------------------------------------------
00010C46                            ; Object 0D - signpost at the end of a level
00010C46                            ; ---------------------------------------------------------------------------
00010C46                            
00010C46                            Signpost:
00010C46 7000                       		moveq	#0,d0
00010C48 1028 0024                  		move.b	obRoutine(a0),d0
00010C4C 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010C50 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010C54 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010C5A 6100 BB4A                  		bsr.w	AnimateSprite
00010C5E 6100 EA9A                  		bsr.w	DisplaySprite
00010C80 4E75                       		rts	
00010C82                            ; ===========================================================================
00010C82 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010C84 0000                       		dc.w Sign_Touch-Sign_Index
00010C86 0000                       		dc.w Sign_Spin-Sign_Index
00010C88 0000                       		dc.w Sign_SonicRun-Sign_Index
00010C8A 0000                       		dc.w Sign_Exit-Sign_Index
00010C8C                            
00010C8C =00000030                  spintime:	equ $30		; time for signpost to spin
00010C8C =00000032                  sparkletime:	equ $32		; time between sparkles
00010C8C =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010C8C                            ; ===========================================================================
00010C8C                            
00010C8C                            Sign_Main:	; Routine 0
00010C8C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C90 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010C98 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010C9E 117C 0004 0001             		move.b	#4,obRender(a0)
00010CA4 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010CAA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010CB0                            
00010CB0                            Sign_Touch:	; Routine 2
00010CB0 3038 D008                  		move.w	(v_player+obX).w,d0
00010CB4 9068 0008                  		sub.w	obX(a0),d0
00010CB8 6500                       		bcs.s	@notouch
00010CBA 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010CBE 6400                       		bcc.s	@notouch	; if not, branch
00010CC0 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010CD0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010CD4 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010CDA 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CDE 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010CE4                            
00010CE4                            	@notouch:
00010CE4 4E75                       		rts	
00010CE6                            	
00010CE6                            ; ===========================================================================
00010CE6                            
00010CE6                            Sign_Spin:	; Routine 4
00010CE6 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010CEA 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010CEC 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010CF2 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010CF6 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010CFC 6600                       		bne.s	@chksparkle	; if not, branch
00010CFE 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D02                            
00010D02                            	@chksparkle:
00010D02 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010D06 6A00                       		bpl.s	@fail		; if time remains, branch
00010D08 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010D0E 7000                       		moveq	#0,d0
00010D10 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010D14 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010D18 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010D1E 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010D22 6100 EE62                  		bsr.w	FindFreeObj
00010D26 6600                       		bne.s	@fail
00010D28 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010D2C 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010D32 101A                       		move.b	(a2)+,d0
00010D34 4880                       		ext.w	d0
00010D36 D068 0008                  		add.w	obX(a0),d0
00010D3A 3340 0008                  		move.w	d0,obX(a1)
00010D3E 101A                       		move.b	(a2)+,d0
00010D40 4880                       		ext.w	d0
00010D42 D068 000C                  		add.w	obY(a0),d0
00010D46 3340 000C                  		move.w	d0,obY(a1)
00010D4A 237C 0000 BD56 0004        		move.l	#Map_Ring,obMap(a1)
00010D52 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010D58 137C 0004 0001             		move.b	#4,obRender(a1)
00010D5E 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010D64 137C 0008 0014             		move.b	#8,obActWid(a1)
00010D6A                            
00010D6A                            	@fail:
00010D6A 4E75                       		rts	
00010D6C                            ; ===========================================================================
00010D6C E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010D6E 0808                       		dc.b	8,   8
00010D70 F000                       		dc.b -$10,   0
00010D72 18F8                       		dc.b  $18,  -8
00010D74 00F8                       		dc.b	0,  -8
00010D76 1000                       		dc.b  $10,   0
00010D78 E808                       		dc.b -$18,   8
00010D7A 1810                       		dc.b  $18, $10
00010D7C                            ; ===========================================================================
00010D7C                            
00010D7C                            Sign_SonicRun:	; Routine 6
00010D7C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010D80 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010D84 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010D8A                            		
00010D8A                            
00010D8A                            	loc_EC86:
00010D8A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D8E                            
00010D8E                            ; ---------------------------------------------------------------------------
00010D8E                            ; Subroutine to	set up bonuses at the end of an	act
00010D8E                            ; ---------------------------------------------------------------------------
00010D8E                            
00010D8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D8E                            
00010D8E                            
00010D8E                            GotThroughAct:
00010D8E 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010D92 6600                       		bne.s	locret_ECEE
00010D94 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010D9A 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010D9E 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010DA2 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010DA6 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010DAC 7000                       		moveq	#plcid_TitleCard,d0
00010DAE 4EB9 0000 1498             		jsr	(NewPLC).l	; load title card patterns
00010DB4 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010DBA 7000                       		moveq	#0,d0
00010DBC 1038 FE23                  		move.b	(v_timemin).w,d0
00010DC0 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010DC4 7200                       		moveq	#0,d1
00010DC6 1238 FE24                  		move.b	(v_timesec).w,d1
00010DCA D041                       		add.w	d1,d0		; add up your time
00010DCC 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010DD0 7214                       		moveq	#$14,d1
00010DD2 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010DD4 6500                       		bcs.s	hastimebonus	; if not, branch
00010DD6 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010DD8                            
00010DD8                            	hastimebonus:
00010DD8 D040                       		add.w	d0,d0
00010DDA 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010DE0 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010DE4 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010DE8 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010DF6 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010DFC                            
00010DFC                            locret_ECEE:
00010DFC 4E75                       		rts	
00010DFE                            
00010DFE                            ; End of function GotThroughAct
00010DFE                            
00010DFE                            ; ===========================================================================
00010DFE 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010E12 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010E28                            ; ===========================================================================
00010E28                            
00010E28                            Sign_Exit:	; Routine 8
00010E28 4E75                       		rts	
00010E2A                            
00010E2A                            ; ---------------------------------------------------------------------------
00010E2A                            ; Subroutine to	set up bonuses at the end of an	zone
00010E2A                            ; ---------------------------------------------------------------------------
00010E2A                            
00010E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E2A                            
00010E2A                            
00010E2A                            GotThroughAct1:
00010E2A 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010E2E 6600                       		bne.s	locret_ECEE1
00010E30 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010E36 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010E3A 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010E3E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E42 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010E48 7000                       		moveq	#plcid_TitleCard,d0
00010E4A 4EB9 0000 1498             		jsr	(NewPLC).l	; load title card patterns
00010E50 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010E56 7000                       		moveq	#0,d0
00010E58 1038 FE23                  		move.b	(v_timemin).w,d0
00010E5C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010E60 7200                       		moveq	#0,d1
00010E62 1238 FE24                  		move.b	(v_timesec).w,d1
00010E66 D041                       		add.w	d1,d0		; add up your time
00010E68 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010E6C 7214                       		moveq	#$14,d1
00010E6E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010E70 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010E74 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010E76                            
00010E76                            	hastimebonus2:
00010E76 D040                       		add.w	d0,d0
00010E78 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010E7E 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010E82 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010E86 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010E94 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010E9A                            
00010E9A                            locret_ECEE1:
00010E9A 4E75                       		rts	
00010E9C                            
00010E9C                            ; End of function GotThroughAct		
00010E9C                            
00010E9C 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010EB0 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010EB0 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010EC6                            		include	"_anim\Signpost.asm"
00010EC6                            ; ---------------------------------------------------------------------------
00010EC6                            ; Animation script - signpost
00010EC6                            ; ---------------------------------------------------------------------------
00010EC6 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010EC8 0000                       		dc.w @spin1-Ani_Sign
00010ECA 0000                       		dc.w @spin2-Ani_Sign
00010ECC 0000                       		dc.w @sonic-Ani_Sign
00010ECE 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010ED2 00                         		even
00010ED2 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010ED8 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010EDE 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010EE2 00                         		even
00010EE2 00                         		even
00010EE2                            Map_Sign:	include	"_maps\Signpost.asm"
00010EE2                            ; --------------------------------------------------------------------------------
00010EE2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010EE2                            ; --------------------------------------------------------------------------------
00010EE2                            
00010EE2                            SME_KvSue:	
00010EE2 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010EE6 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010EEA 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010EEC 04                         SME_KvSue_A:	dc.b 4	
00010EED F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010EF2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010EF7 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010EFC 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F01 03                         SME_KvSue_1F:	dc.b 3	
00010F02 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010F07 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F0C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F11 03                         SME_KvSue_2F:	dc.b 3	
00010F12 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010F17 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F1C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F21 03                         SME_KvSue_3F:	dc.b 3	
00010F22 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010F27 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010F2C 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F31 04                         SME_KvSue_4F:	dc.b 4	
00010F32 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010F37 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010F3C 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010F41 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010F46                            		even
00010F46                            		even
00010F46                            
00010F46                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010F46                            ; ---------------------------------------------------------------------------
00010F46                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010F46                            ; ---------------------------------------------------------------------------
00010F46                            
00010F46                            GeyserMaker:
00010F46 7000                       		moveq	#0,d0
00010F48 1028 0024                  		move.b	obRoutine(a0),d0
00010F4C 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010F50 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010F54 6000 0000                  		bra.w	Geyser_ChkDel
00010F58                            ; ===========================================================================
00010F58 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010F5A 0000                       		dc.w GMake_Wait-GMake_Index
00010F5C 0000                       		dc.w GMake_ChkType-GMake_Index
00010F5E 0000                       		dc.w GMake_MakeLava-GMake_Index
00010F60 0000                       		dc.w GMake_Display-GMake_Index
00010F62 0000                       		dc.w GMake_Delete-GMake_Index
00010F64                            
00010F64 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010F64 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010F64 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010F64                            ; ===========================================================================
00010F64                            
00010F64                            GMake_Main:	; Routine 0
00010F64 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F68 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010F70 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010F76 117C 0004 0001             		move.b	#4,obRender(a0)
00010F7C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010F82 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010F88 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010F8E                            
00010F8E                            GMake_Wait:	; Routine 2
00010F8E 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010F92 6A00                       		bpl.s	@cancel		; if time remains, branch
00010F94                            
00010F94 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010F9A 3038 D00C                  		move.w	(v_player+obY).w,d0
00010F9E 3228 000C                  		move.w	obY(a0),d1
00010FA2 B041                       		cmp.w	d1,d0
00010FA4 6400                       		bcc.s	@cancel
00010FA6 0441 0170                  		subi.w	#$170,d1
00010FAA B041                       		cmp.w	d1,d0
00010FAC 6500                       		bcs.s	@cancel
00010FAE 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00010FB2                            
00010FB2                            	@cancel:
00010FB2 4E75                       		rts	
00010FB4                            ; ===========================================================================
00010FB4                            
00010FB4                            GMake_MakeLava:	; Routine 6
00010FB4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010FB8 6100 EBE2                  		bsr.w	FindNextFreeObj
00010FBC 6600                       		bne.s	@fail
00010FBE 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00010FC2 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010FC8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010FCE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010FD4 2348 003C                  		move.l	a0,gmake_parent(a1)
00010FD8                            
00010FD8                            	@fail:
00010FD8 117C 0001 001C             		move.b	#1,obAnim(a0)
00010FDE 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00010FE2 6700                       		beq.s	@isgeyser	; if yes, branch
00010FE4 117C 0004 001C             		move.b	#4,obAnim(a0)
00010FEA 6000                       		bra.s	GMake_Display
00010FEC                            ; ===========================================================================
00010FEC                            
00010FEC                            	@isgeyser:
00010FEC 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00010FF0 08E9 0001 0022             		bset	#1,obStatus(a1)
00010FF6 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00010FFC 6000                       		bra.s	GMake_Display
00010FFE                            ; ===========================================================================
00010FFE                            
00010FFE                            GMake_ChkType:	; Routine 4
00010FFE 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011002 6700                       		beq.s	GMake_Display	; if yes, branch
00011004 5428 0024                  		addq.b	#2,obRoutine(a0)
00011008 4E75                       		rts	
0001100A                            ; ===========================================================================
0001100A                            
0001100A                            GMake_Display:	; Routine 8
0001100A 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011010 6100 B794                  		bsr.w	AnimateSprite
00011014 6100 E6E4                  		bsr.w	DisplaySprite
00011018 4E75                       		rts	
0001101A                            ; ===========================================================================
0001101A                            
0001101A                            GMake_Delete:	; Routine $A
0001101A 117C 0000 001C             		move.b	#0,obAnim(a0)
00011020 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011026 4A28 0028                  		tst.b	obSubtype(a0)
0001102A 6700 E70E                  		beq.w	DeleteObject
0001102E 4E75                       		rts	
00011030                            
00011030                            
00011030                            ; ---------------------------------------------------------------------------
00011030                            ; Object 4D - lava geyser / lavafall (MZ)
00011030                            ; ---------------------------------------------------------------------------
00011030                            
00011030                            LavaGeyser:
00011030 7000                       		moveq	#0,d0
00011032 1028 0024                  		move.b	obRoutine(a0),d0
00011036 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
0001103A 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0001103E 6000 E6BA                  		bra.w	DisplaySprite
00011042                            ; ===========================================================================
00011042 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00011044 0000                       		dc.w Geyser_Action-Geyser_Index
00011046 0000                       		dc.w loc_EFFC-Geyser_Index
00011048 0000                       		dc.w Geyser_Delete-Geyser_Index
0001104A                            
0001104A FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
0001104E                            ; ===========================================================================
0001104E                            
0001104E                            Geyser_Main:	; Routine 0
0001104E 5428 0024                  		addq.b	#2,obRoutine(a0)
00011052 3168 000C 0030             		move.w	obY(a0),$30(a0)
00011058 4A28 0028                  		tst.b	obSubtype(a0)
0001105C 6700                       		beq.s	@isgeyser
0001105E 0468 0250 000C             		subi.w	#$250,obY(a0)
00011064                            
00011064                            	@isgeyser:
00011064 7000                       		moveq	#0,d0
00011066 1028 0028                  		move.b	obSubtype(a0),d0
0001106A D040                       		add.w	d0,d0
0001106C 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011072 2248                       		movea.l	a0,a1
00011074 7201                       		moveq	#1,d1
00011076 6100                       		bsr.s	@makelava
00011078 6000                       		bra.s	@activate
0001107A                            ; ===========================================================================
0001107A                            
0001107A                            	@loop:
0001107A 6100 EB20                  		bsr.w	FindNextFreeObj
0001107E 6600                       		bne.s	@fail
00011080                            
00011080                            @makelava:
00011080 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011084 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001108C 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011092 137C 0004 0001             		move.b	#4,obRender(a1)
00011098 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001109E 3368 0008 0008             		move.w	obX(a0),obX(a1)
000110A4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000110AA 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000110B0 337C 0080 0018             		move.w	#$80,obPriority(a1)
000110B6 137C 0005 001C             		move.b	#5,obAnim(a1)
000110BC 4A28 0028                  		tst.b	obSubtype(a0)
000110C0 6700                       		beq.s	@fail
000110C2 137C 0002 001C             		move.b	#2,obAnim(a1)
000110C8                            
000110C8                            	@fail:
000110C8 51C9 FFB0                  		dbf	d1,@loop
000110CC 4E75                       		rts	
000110CE                            ; ===========================================================================
000110CE                            
000110CE                            @activate:
000110CE 0669 0060 000C             		addi.w	#$60,obY(a1)
000110D4 3368 0030 0030             		move.w	$30(a0),$30(a1)
000110DA 0669 0060 0030             		addi.w	#$60,$30(a1)
000110E0 137C 0093 0020             		move.b	#$93,obColType(a1)
000110E6 137C 0080 0016             		move.b	#$80,obHeight(a1)
000110EC 08E9 0004 0001             		bset	#4,obRender(a1)
000110F2 5829 0024                  		addq.b	#4,obRoutine(a1)
000110F6 2348 003C                  		move.l	a0,$3C(a1)
000110FA 4A28 0028                  		tst.b	obSubtype(a0)
000110FE 6700                       		beq.s	@sound
00011100 7200                       		moveq	#0,d1
00011102 6100 FF76                  		bsr.w	@loop
00011106 5429 0024                  		addq.b	#2,obRoutine(a1)
0001110A 08E9 0004 0002             		bset	#4,obGfx(a1)
00011110 0669 0100 000C             		addi.w	#$100,obY(a1)
00011116 337C 0000 0018             		move.w	#0,obPriority(a1)
0001111C 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011122 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011128 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001112E                            
0001112E                            	@sound:
00011138                            
00011138                            Geyser_Action:	; Routine 2
00011138 7000                       		moveq	#0,d0
0001113A 1028 0028                  		move.b	obSubtype(a0),d0
0001113E D040                       		add.w	d0,d0
00011140 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011144 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00011148 6100 E59C                  		bsr.w	SpeedToPos
0001114C 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011152 6100 B652                  		bsr.w	AnimateSprite
00011156                            
00011156                            Geyser_ChkDel:
00011174 4E75                       		rts	
00011176                            ; ===========================================================================
00011176 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011178 0000                       		dc.w Geyser_Type01-Geyser_Types
0001117A                            ; ===========================================================================
0001117A                            
0001117A                            Geyser_Type00:
0001117A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011180 3028 0030                  		move.w	$30(a0),d0
00011184 B068 000C                  		cmp.w	obY(a0),d0
00011188 6400                       		bcc.s	locret_EFDA
0001118A 5828 0024                  		addq.b	#4,obRoutine(a0)
0001118E 2268 003C                  		movea.l	$3C(a0),a1
00011192 137C 0003 001C             		move.b	#3,obAnim(a1)
00011198                            
00011198                            locret_EFDA:
00011198 4E75                       		rts	
0001119A                            ; ===========================================================================
0001119A                            
0001119A                            Geyser_Type01:
0001119A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000111A0 3028 0030                  		move.w	$30(a0),d0
000111A4 B068 000C                  		cmp.w	obY(a0),d0
000111A8 6400                       		bcc.s	locret_EFFA
000111AA 5828 0024                  		addq.b	#4,obRoutine(a0)
000111AE 2268 003C                  		movea.l	$3C(a0),a1
000111B2 137C 0001 001C             		move.b	#1,obAnim(a1)
000111B8                            
000111B8                            locret_EFFA:
000111B8 4E75                       		rts	
000111BA                            ; ===========================================================================
000111BA                            
000111BA                            loc_EFFC:	; Routine 4
000111BA 2268 003C                  		movea.l	$3C(a0),a1
000111BE 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000111C4 6700 0000                  		beq.w	Geyser_Delete
000111C8 3029 000C                  		move.w	obY(a1),d0
000111CC 0640 0060                  		addi.w	#$60,d0
000111D0 3140 000C                  		move.w	d0,obY(a0)
000111D4 9068 0030                  		sub.w	$30(a0),d0
000111D8 4440                       		neg.w	d0
000111DA 7208                       		moveq	#8,d1
000111DC 0C40 0040                  		cmpi.w	#$40,d0
000111E0 6C00                       		bge.s	loc_F026
000111E2 720B                       		moveq	#$B,d1
000111E4                            
000111E4                            loc_F026:
000111E4 0C40 0080                  		cmpi.w	#$80,d0
000111E8 6F00                       		ble.s	loc_F02E
000111EA 720E                       		moveq	#$E,d1
000111EC                            
000111EC                            loc_F02E:
000111EC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000111F0 6A00                       		bpl.s	loc_F04C
000111F2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000111F8 5228 001B                  		addq.b	#1,obAniFrame(a0)
000111FC 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011202 6500                       		bcs.s	loc_F04C
00011204 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001120A                            
0001120A                            loc_F04C:
0001120A 1028 001B                  		move.b	obAniFrame(a0),d0
0001120E D001                       		add.b	d1,d0
00011210 1140 001A                  		move.b	d0,obFrame(a0)
00011214 6000 FF40                  		bra.w	Geyser_ChkDel
00011218                            ; ===========================================================================
00011218                            
00011218                            Geyser_Delete:	; Routine 6
00011218 6000 E520                  		bra.w	DeleteObject
00011218 6000 E520                  		bra.w	DeleteObject
0001121C                            		include	"_incObj\54 Lava Tag.asm"
0001121C                            ; ---------------------------------------------------------------------------
0001121C                            ; Object 54 - invisible	lava tag (MZ)
0001121C                            ; ---------------------------------------------------------------------------
0001121C                            
0001121C                            LavaTag:
0001121C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011222 6E00 0000                  		bgt	WaterTag	;TIS
00011226 7000                       		moveq	#0,d0
00011228 1028 0024                  		move.b	obRoutine(a0),d0
0001122C 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
00011230 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011234                            ; ===========================================================================
00011234 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011236 0000                       		dc.w LTag_ChkDel-LTag_Index
00011238                            
00011238 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
0001123C 00                         		even
0001123C                            ; ===========================================================================
0001123C                            
0001123C                            LTag_Main:	; Routine 0
0001123C 5428 0024                  		addq.b	#2,obRoutine(a0)
00011240 7000                       		moveq	#0,d0
00011242 1028 0028                  		move.b	obSubtype(a0),d0
00011246 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
0001124C 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
00011254 117C 0084 0001             		move.b	#$84,obRender(a0)
0001125A                            
0001125A                            LTag_ChkDel:	; Routine 2
0001125A 3028 0008                  		move.w	obX(a0),d0
0001125E 0240 FF80                  		andi.w	#$FF80,d0
00011262 3238 F700                  		move.w	(v_screenposx).w,d1
00011266 0441 0080                  		subi.w	#$80,d1
0001126A 0241 FF80                  		andi.w	#$FF80,d1
0001126E 9041                       		sub.w	d1,d0
00011270 6B00 E4C8                  		bmi.w	DeleteObject
00011274 0C40 0280                  		cmpi.w	#$280,d0
00011278 6200 E4C0                  		bhi.w	DeleteObject
0001127C 4E75                       		rts
0001127E                            
0001127E                            
0001127E                            ; ---------------------------------------------------------------------------
0001127E                            ; Object 54a - invisible	water tag (MZ) - TIS
0001127E                            ; ---------------------------------------------------------------------------
0001127E                            
0001127E                            WaterTag:	
0001127E 7000                       		moveq	#0,d0
00011280 1028 0024                  		move.b	obRoutine(a0),d0
00011284 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011288 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001128C                            ; ===========================================================================
0001128C 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001128E 0000                       		dc.w WTag_ChkDel-WTag_Index
00011290                            
00011290 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011294 00                         		even
00011294                            ; ===========================================================================
00011294                            
00011294                            
00011294                            WTag_Main:	; Routine 0
00011294 5428 0024                  		addq.b	#2,obRoutine(a0)
00011298 7000                       		moveq	#0,d0
0001129A                            		;move.b	obSubtype(a0),d0
0001129A                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001129A 0400 00F0                  		sub.b	#$F0,d0
0001129E 1178 0096 0020             		move.b	$96,obColType(a0)							
000112A4                            		;move.l	#Map_LTag,obMap(a0)
000112A4                            		;move.b	#$84,obRender(a0)
000112A4                            
000112A4                            WTag_ChkDel:	; Routine 2
000112A4 3028 0008                  		move.w	obX(a0),d0
000112A8 0240 FF80                  		andi.w	#$FF80,d0
000112AC 3238 F700                  		move.w	(v_screenposx).w,d1
000112B0 0441 0080                  		subi.w	#$80,d1
000112B4 0241 FF80                  		andi.w	#$FF80,d1
000112B8 9041                       		sub.w	d1,d0
000112BA 6B00 E47E                  		bmi.w	DeleteObject
000112BE 0C40 0280                  		cmpi.w	#$280,d0
000112C2 6200 E476                  		bhi.w	DeleteObject
000112C6 4E75                       		rts
000112C8                            
000112C8                            
000112C8                            Map_LTag:	include	"_maps\Lava Tag.asm"
000112C8                            ; ---------------------------------------------------------------------------
000112C8                            ; Sprite mappings - invisible lava tag (MZ)
000112C8                            ; ---------------------------------------------------------------------------
000112C8                            Map_LTag_internal:
000112C8 0000                       		dc.w @0-Map_LTag_internal
000112CA 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
000112CC 00                         		even
000112CC 00                         		even
000112CC                            		include	"_anim\Lava Geyser.asm"
000112CC                            ; ---------------------------------------------------------------------------
000112CC                            ; Animation script - geyser of lava (MZ)
000112CC                            ; ---------------------------------------------------------------------------
000112CC 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
000112CE 0000                       		dc.w @bubble2-Ani_Geyser
000112D0 0000                       		dc.w @end-Ani_Geyser
000112D2 0000                       		dc.w @bubble3-Ani_Geyser
000112D4 0000                       		dc.w @blank-Ani_Geyser
000112D6 0000                       		dc.w @bubble4-Ani_Geyser
000112D8 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
000112E2 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
000112E6 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
000112EA 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
000112F2 0F13 FF                    @blank:		dc.b $F, $13, afEnd
000112F6 00                         		even
000112F6 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
000112FA                            		even
000112FA                            		even
000112FA                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
000112FA                            ; ---------------------------------------------------------------------------
000112FA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000112FA                            ; ---------------------------------------------------------------------------
000112FA                            Map_Geyser_internal:
000112FA 0000                       		dc.w @bubble1-Map_Geyser_internal
000112FC 0000                       		dc.w @bubble2-Map_Geyser_internal
000112FE 0000                       		dc.w @bubble3-Map_Geyser_internal
00011300 0000                       		dc.w @bubble4-Map_Geyser_internal
00011302 0000                       		dc.w @bubble5-Map_Geyser_internal
00011304 0000                       		dc.w @bubble6-Map_Geyser_internal
00011306 0000                       		dc.w @end1-Map_Geyser_internal
00011308 0000                       		dc.w @end2-Map_Geyser_internal
0001130A 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001130C 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001130E 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011310 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011312 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011314 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011316 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011318 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0001131A 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001131C 0000                       		dc.w @bubble7-Map_Geyser_internal
0001131E 0000                       		dc.w @bubble8-Map_Geyser_internal
00011320 0000                       		dc.w @blank-Map_Geyser_internal
00011322 02                         @bubble1:	dc.b 2
00011323 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011328 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001132D 02                         @bubble2:	dc.b 2
0001132E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011333 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00011338 04                         @bubble3:	dc.b 4
00011339 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001133E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011343 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011348 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001134D 04                         @bubble4:	dc.b 4
0001134E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011353 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011358 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001135D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011362 06                         @bubble5:	dc.b 6
00011363 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011368 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001136D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011372 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011377 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001137C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011381 06                         @bubble6:	dc.b 6
00011382 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011387 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001138C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011391 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011396 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001139B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000113A0 02                         @end1:		dc.b 2
000113A1 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000113A6 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
000113AB 02                         @end2:		dc.b 2
000113AC E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000113B1 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
000113B6 0A                         @medcolumn1:	dc.b $A
000113B7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000113BC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000113C1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000113C6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000113CB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000113D0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000113D5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000113DA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000113DF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000113E4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000113E9 0A                         @medcolumn2:	dc.b $A
000113EA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000113EF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000113F4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000113F9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000113FE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011403 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011408 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001140D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011412 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011417 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001141C 0A                         @medcolumn3:	dc.b $A
0001141D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011422 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011427 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001142C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011431 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011436 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001143B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011440 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011445 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001144A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001144F 06                         @shortcolumn1:	dc.b 6
00011450 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011455 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001145A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001145F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011464 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011469 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001146E 06                         @shortcolumn2:	dc.b 6
0001146F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011474 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011479 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001147E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011483 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011488 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001148D 06                         @shortcolumn3:	dc.b 6
0001148E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011493 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011498 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001149D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000114A2 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000114A7 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000114AC 10                         @longcolumn1:	dc.b $10
000114AD 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000114B2 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000114B7 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000114BC B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000114C1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000114C6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000114CB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000114D0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000114D5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000114DA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000114DF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000114E4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000114E9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000114EE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000114F3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000114F8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000114FD 10                         @longcolumn2:	dc.b $10
000114FE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011503 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011508 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001150D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011512 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011517 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001151C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011521 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011526 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001152B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011530 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011535 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001153A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001153F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011544 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011549 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001154E 10                         @longcolumn3:	dc.b $10
0001154F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011554 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011559 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001155E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011563 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011568 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001156D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011572 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011577 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001157C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011581 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011586 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001158B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011590 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011595 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001159A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001159F 06                         @bubble7:	dc.b 6
000115A0 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000115A5 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
000115AA E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
000115AF E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
000115B4 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
000115B9 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
000115BE 06                         @bubble8:	dc.b 6
000115BF E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
000115C4 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
000115C9 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000115CE E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000115D3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000115D8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000115DD 00                         @blank:	dc.b 0
000115DE                            		even
000115DE                            		even
000115DE                            
000115DE                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
000115DE                            ; ---------------------------------------------------------------------------
000115DE                            ; Object 40 - Moto Bug enemy (GHZ)
000115DE                            ; ---------------------------------------------------------------------------
000115DE                            
000115DE                            MotoBug:
000115DE 7000                       		moveq	#0,d0
000115E0 1028 0024                  		move.b	obRoutine(a0),d0
000115E4 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
000115E8 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
000115EC                            ; ===========================================================================
000115EC 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
000115EE 0000                       		dc.w Moto_Action-Moto_Index
000115F0 0000                       		dc.w Moto_Animate-Moto_Index
000115F2 0000                       		dc.w Moto_Delete-Moto_Index
000115F4                            ; ===========================================================================
000115F4                            
000115F4                            Moto_Main:	; Routine 0
000115F4 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
000115FC 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011602 117C 0004 0001             		move.b	#4,obRender(a0)
00011608 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001160E 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011614 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011618 6600                       		bne.s	@smoke		; if yes, branch
0001161A 117C 000E 0016             		move.b	#$E,obHeight(a0)
00011620 117C 0008 0017             		move.b	#8,obWidth(a0)
00011626 117C 000C 0020             		move.b	#$C,obColType(a0)
0001162C 6100 E080                  		bsr.w	ObjectFall
00011630 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011636 4A41                       		tst.w	d1
00011638 6A00                       		bpl.s	@notonfloor
0001163A D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001163E 317C 0000 0012             		move.w	#0,obVelY(a0)
00011644 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
00011648 0868 0000 0022             		bchg	#0,obStatus(a0)
0001164E                            
0001164E                            	@notonfloor:
0001164E 4E75                       		rts	
00011650                            ; ===========================================================================
00011650                            
00011650                            @smoke:
00011650 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
00011654 6000 0000                  		bra.w	Moto_Animate
00011658                            ; ===========================================================================
00011658                            
00011658                            Moto_Action:	; Routine 2
00011658 7000                       		moveq	#0,d0
0001165A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001165E 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
00011662 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
00011666 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001166C 6100 B138                  		bsr.w	AnimateSprite
00011670                            
00011670                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
00011670                            ; ---------------------------------------------------------------------------
00011670                            ; Subroutine to remember whether an object is destroyed/collected
00011670                            ; ---------------------------------------------------------------------------
00011670                            
00011670                            RememberState:
0001168E 6000 E06A                  		bra.w	DisplaySprite
00011692                            
00011692                            	@offscreen:
00011692 45F8 FC00                  		lea	(v_objstate).w,a2
00011696 7000                       		moveq	#0,d0
00011698 1028 0023                  		move.b	obRespawnNo(a0),d0
0001169C 6700                       		beq.s	@delete
0001169E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000116A4                            
000116A4                            	@delete:
000116A4 6000 E094                  		bra.w	DeleteObject
000116A4 6000 E094                  		bra.w	DeleteObject
000116A8                            
000116A8                            ; ===========================================================================
000116A8 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
000116AA 0000                       		dc.w @findfloor-Moto_ActIndex
000116AC                            
000116AC =00000030                  @time:		equ $30
000116AC =00000033                  @smokedelay:	equ $33
000116AC                            ; ===========================================================================
000116AC                            
000116AC                            @move:
000116AC 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
000116B0 6A00                       		bpl.s	@wait		; if time remains, branch
000116B2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000116B6 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
000116BC 117C 0001 001C             		move.b	#1,obAnim(a0)
000116C2 0868 0000 0022             		bchg	#0,obStatus(a0)
000116C8 6600                       		bne.s	@wait
000116CA 4468 0010                  		neg.w	obVelX(a0)	; change direction
000116CE                            
000116CE                            	@wait:
000116CE 4E75                       		rts	
000116D0                            ; ===========================================================================
000116D0                            
000116D0                            @findfloor:
000116D0 6100 E014                  		bsr.w	SpeedToPos
000116D4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000116DA 0C41 FFF8                  		cmpi.w	#-8,d1
000116DE 6D00                       		blt.s	@pause
000116E0 0C41 000C                  		cmpi.w	#$C,d1
000116E4 6C00                       		bge.s	@pause
000116E6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000116EA 5328 0033                  		subq.b	#1,@smokedelay(a0)
000116EE 6A00                       		bpl.s	@nosmoke
000116F0 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
000116F6 6100 E48E                  		bsr.w	FindFreeObj
000116FA 6600                       		bne.s	@nosmoke
000116FC 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011700 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011706 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001170C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011712 137C 0002 001C             		move.b	#2,obAnim(a1)
00011718                            
00011718                            	@nosmoke:
00011718 4E75                       		rts	
0001171A                            
0001171A                            @pause:
0001171A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001171E 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011724 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
0001172A 117C 0000 001C             		move.b	#0,obAnim(a0)
00011730 4E75                       		rts	
00011732                            ; ===========================================================================
00011732                            
00011732                            Moto_Animate:	; Routine 4
00011732 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011738 6100 B06C                  		bsr.w	AnimateSprite
0001173C 6000 DFBC                  		bra.w	DisplaySprite
00011740                            ; ===========================================================================
00011740                            
00011740                            Moto_Delete:	; Routine 6
00011740 6000 DFF8                  		bra.w	DeleteObject
00011740 6000 DFF8                  		bra.w	DeleteObject
00011744                            		include	"_anim\Moto Bug.asm"
00011744                            ; ---------------------------------------------------------------------------
00011744                            ; Animation script - Motobug enemy
00011744                            ; ---------------------------------------------------------------------------
00011744 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
00011746 0000                       		dc.w @walk-Ani_Moto
00011748 0000                       		dc.w @smoke-Ani_Moto
0001174A                            
0001174A 0F02 FF                    @stand:		dc.b $F, 2, afEnd
0001174E 00                         		even
0001174E 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
00011754 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011762 00                         		even
00011762 00                         		even
00011762                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011762                            ; --------------------------------------------------------------------------------
00011762                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011762                            ; --------------------------------------------------------------------------------
00011762                            
00011762                            SME_TTY9T:	
00011762 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
00011766 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
0001176A 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
0001176E 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011770 04                         SME_TTY9T_E:	dc.b 4	
00011771 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011776 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
0001177B F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011780 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011785 04                         SME_TTY9T_23:	dc.b 4	
00011786 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
0001178B 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011790 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011795 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
0001179A 05                         SME_TTY9T_38:	dc.b 5	
0001179B F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000117A0 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
000117A5 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000117AA 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
000117AF 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
000117B4 01                         SME_TTY9T_52:	dc.b 1	
000117B5 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
000117BA 01                         SME_TTY9T_58:	dc.b 1	
000117BB FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
000117C0 01                         SME_TTY9T_5E:	dc.b 1	
000117C1 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
000117C6 00                         SME_TTY9T_64:	dc.b 0	
000117C8 00                         		even
000117C8 00                         		even
000117C8                            		include	"_incObj\4F.asm"
000117C8                            ; ---------------------------------------------------------------------------
000117C8                            ; Object 4F - Splats
000117C8                            ; ---------------------------------------------------------------------------
000117C8                            
000117C8                            Obj4F:
000117C8 7000                                       moveq   #0,d0
000117CA 1028 0024                                  move.b  $24(a0),d0
000117CE 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
000117D2 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
000117D6                            ; ---------------------------------------------------------------------------
000117D6 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
000117D8 0000                                       dc.w loc_D246-ObjSplats_Index
000117DA 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
000117DC 0000                                       dc.w loc_D2C8-ObjSplats_Index
000117DE                            ; ---------------------------------------------------------------------------
000117DE                            
000117DE                            ObjSplats_Init:
000117DE 5428 0024                                  addq.b  #2,$24(a0)
000117E2 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
000117EA 317C 24E4 0002                             move.w  #$24E4,2(a0)
000117F0 117C 0004 0001                             move.b  #4,1(a0)
000117F6 117C 0004 0014                             move.b  #4,obActWid(a0)
000117FC 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011802 117C 0014 0016                             move.b  #$14,$16(a0)
00011808 117C 0002 0020                             move.b  #2,$20(a0)
0001180E 4A28 0028                                  tst.b   $28(a0)
00011812 6700                                       beq.s   loc_D246
00011814 343C 0300                                  move.w  #$300,d2
00011818 6000                                       bra.s   ObjSplats_FaceRight
0001181A                            ; ---------------------------------------------------------------------------
0001181A                            
0001181A                            loc_D246:
0001181A 343C 00E0                                  move.w  #$E0,d2
0001181E                            
0001181E                            ObjSplats_FaceRight:
0001181E 323C 0100                                  move.w  #$100,d1
00011822 08E8 0000 0001                             bset    #0,1(a0)
00011828 3038 D008                                  move.w  ($FFFFD008).w,d0
0001182C 9068 0008                                  sub.w   8(a0),d0
00011830 6400                                       bcc.s   ObjSplats_Move
00011832 4440                                       neg.w   d0
00011834 4441                                       neg.w   d1
00011836 08A8 0000 0001                             bclr    #0,1(a0)
0001183C                            
0001183C                            ObjSplats_Move:
0001183C B042                                       cmp.w   d2,d0
0001183E 6400                                       bcc.s   ObjSplats_Bounce
00011840 3141 0010                                  move.w  d1,$10(a0)
00011844 5428 0024                                  addq.b  #2,$24(a0)
00011848                            
00011848                            ObjSplats_Bounce:
00011848 6100 DE64                                  bsr.w   ObjectFall
0001184C 117C 0001 001A                             move.b  #1,$1A(a0)
00011852 4A68 0012                                  tst.w   $12(a0)
00011856 6B00                                       bmi.s   ObjSplats_Turn
00011858 117C 0000 001A                             move.b  #0,$1A(a0)
0001185E 6100 0000                                  bsr.w   ObjFloorDist
00011862 4A41                                       tst.w   d1
00011864 6A00                                       bpl.s   ObjSplats_Turn
00011866 3011                                       move.w  (a1),d0
00011868 0240 03FF                                  andi.w  #$3FF,d0
0001186C 0C40 02D2                                  cmpi.w  #$2D2,d0
00011870 6500                                       bcs.s   ObjSplats_Fall
00011872 5428 0024                                  addq.b  #2,$24(a0)
00011876 6000                                       bra.s   ObjSplats_Turn
00011878                            ; ---------------------------------------------------------------------------
00011878                            
00011878                            ObjSplats_Fall:
00011878 D368 000C                                  add.w   d1,$C(a0)
0001187C 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011882                            
00011882                            ObjSplats_Turn:
00011882 6100 0000                                  bsr.w   Yad_ChkWall
00011886 6700                                       beq.s   loc_D2C4
00011888 4468 0010                                  neg.w   $10(a0)
0001188C 0868 0000 0001                             bchg    #0,1(a0)
00011892 0868 0000 0022                             bchg    #0,$22(a0)
00011898                            
00011898                            loc_D2C4:
00011898 6000 FDD6                                  bra.w   RememberState
0001189C                            ; ---------------------------------------------------------------------------
0001189C                            
0001189C                            loc_D2C8:
0001189C 6100 DE10                                  bsr.w   ObjectFall
000118A0 6100 DE58                                  bsr.w   DisplaySprite
000118A4 4A28 0001                                  tst.b   1(a0)
000118A8 6A00 DE90                                  bpl.w   DeleteObject
000118AC 4E75                                       rts
000118AC 4E75                                       rts
000118AE                            Map_Splats:	include	"_maps\Splats.asm"
000118AE 0000                       Map_Splats_internal:     dc.w unk_D310-*
000118B0 0000                                       dc.w unk_D31B-Map_Splats_internal
000118B2 02                         unk_D310:       dc.b   2
000118B3 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
000118BD 02                         unk_D31B:       dc.b   2
000118BE EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
000118BE EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
000118C8                            
000118C8                            		include	"_incObj\50 Yadrin.asm"
000118C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000118C8                            
000118C8                            
000118C8                            Yad_ChkWall:
000118C8 3038 FE04                  		move.w	(v_framecount).w,d0
000118CC D047                       		add.w	d7,d0
000118CE 0240 0003                  		andi.w	#3,d0
000118D2 6600                       		bne.s	loc_F836
000118D4 7600                       		moveq	#0,d3
000118D6 1628 0014                  		move.b	obActWid(a0),d3
000118DA 4A68 0010                  		tst.w	obVelX(a0)
000118DE 6B00                       		bmi.s	loc_F82C
000118E0 6100 0000                  		bsr.w	ObjHitWallRight
000118E4 4A41                       		tst.w	d1
000118E6 6A00                       		bpl.s	loc_F836
000118E8                            
000118E8                            loc_F828:
000118E8 7001                       		moveq	#1,d0
000118EA 4E75                       		rts	
000118EC                            ; ===========================================================================
000118EC                            
000118EC                            loc_F82C:
000118EC 4643                       		not.w	d3
000118EE 6100 0000                  		bsr.w	ObjHitWallLeft
000118F2 4A41                       		tst.w	d1
000118F4 6BF2                       		bmi.s	loc_F828
000118F6                            
000118F6                            loc_F836:
000118F6 7000                       		moveq	#0,d0
000118F8 4E75                       		rts	
000118FA                            ; End of function Yad_ChkWall
000118FA                            
000118FA                            ; ===========================================================================
000118FA                            ; ---------------------------------------------------------------------------
000118FA                            ; Object 50 - Yadrin enemy (SYZ)
000118FA                            ; ---------------------------------------------------------------------------
000118FA                            
000118FA                            Yadrin:
000118FA 7000                       		moveq	#0,d0
000118FC 1028 0024                  		move.b	obRoutine(a0),d0
00011900 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011904 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011908                            ; ===========================================================================
00011908 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
0001190A 0000                       		dc.w Yad_Action-Yad_Index
0001190C                            
0001190C =00000030                  yad_timedelay:	equ $30
0001190C                            ; ===========================================================================
0001190C                            
0001190C                            Yad_Main:	; Routine 0
0001190C 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011914 317C 247B 0002             		move.w	#$247B,obGfx(a0)
0001191A 117C 0004 0001             		move.b	#4,obRender(a0)
00011920 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011926 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001192C 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011932 117C 0008 0017             		move.b	#8,obWidth(a0)
00011938 117C 00CC 0020             		move.b	#$CC,obColType(a0)
0001193E 6100 DD6E                  		bsr.w	ObjectFall
00011942 6100 0000                  		bsr.w	ObjFloorDist
00011946 4A41                       		tst.w	d1
00011948 6A00                       		bpl.s	locret_F89E
0001194A D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001194E 317C 0000 0012             		move.w	#0,obVelY(a0)
00011954 5428 0024                  		addq.b	#2,obRoutine(a0)
00011958 0868 0000 0022             		bchg	#0,obStatus(a0)
0001195E                            
0001195E                            	locret_F89E:
0001195E 4E75                       		rts	
00011960                            ; ===========================================================================
00011960                            
00011960                            Yad_Action:	; Routine 2
00011960 7000                       		moveq	#0,d0
00011962 1028 0025                  		move.b	ob2ndRout(a0),d0
00011966 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
0001196A 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
0001196E 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011974 6100 AE30                  		bsr.w	AnimateSprite
00011978 6000 FCF6                  		bra.w	RememberState
0001197C                            ; ===========================================================================
0001197C 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
0001197E 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011980                            ; ===========================================================================
00011980                            
00011980                            Yad_Move:
00011980 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011984 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011986 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001198A 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011990 117C 0001 001C             		move.b	#1,obAnim(a0)
00011996 0868 0000 0022             		bchg	#0,obStatus(a0)
0001199C 6600                       		bne.s	locret_F8E2
0001199E 4468 0010                  		neg.w	obVelX(a0)	; change direction
000119A2                            
000119A2                            	locret_F8E2:
000119A2 4E75                       		rts	
000119A4                            ; ===========================================================================
000119A4                            
000119A4                            Yad_FixToFloor:
000119A4 6100 DD40                  		bsr.w	SpeedToPos
000119A8 6100 0000                  		bsr.w	ObjFloorDist
000119AC 0C41 FFF8                  		cmpi.w	#-8,d1
000119B0 6D00                       		blt.s	Yad_Pause
000119B2 0C41 000C                  		cmpi.w	#$C,d1
000119B6 6C00                       		bge.s	Yad_Pause
000119B8 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
000119BC 6100 FF0A                  		bsr.w	Yad_ChkWall
000119C0 6600                       		bne.s	Yad_Pause
000119C2 4E75                       		rts	
000119C4                            ; ===========================================================================
000119C4                            
000119C4                            Yad_Pause:
000119C4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000119C8 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
000119CE 317C 0000 0010             		move.w	#0,obVelX(a0)
000119D4 117C 0000 001C             		move.b	#0,obAnim(a0)
000119DA 4E75                       		rts	
000119DA 4E75                       		rts	
000119DC                            		include	"_anim\Yadrin.asm"
000119DC                            ; ---------------------------------------------------------------------------
000119DC                            ; Animation script - Yadrin enemy
000119DC                            ; ---------------------------------------------------------------------------
000119DC 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
000119DE 0000                       		dc.w @walk-Ani_Yad
000119E0                            
000119E0 0800 FF                    @stand:		dc.b 8,	0, afEnd
000119E4 00                         		even
000119E4 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
000119F2                            		even
000119F2                            		even
000119F2                            Map_Yad:	include	"_maps\Yadrin.asm"
000119F2                            ; --------------------------------------------------------------------------------
000119F2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119F2                            ; --------------------------------------------------------------------------------
000119F2                            
000119F2                            SME_4WhIu:	
000119F2 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
000119F6 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
000119FA 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
000119FE 09                         SME_4WhIu_C:	dc.b 9	
000119FF F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011A04 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011A09 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A0E FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A13 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A18 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011A1D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A22 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011A27 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011A2C 09                         SME_4WhIu_3A:	dc.b 9	
00011A2D F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011A32 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A37 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011A3C FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011A41 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011A46 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A4B F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011A50 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011A55 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011A5A 0C                         SME_4WhIu_68:	dc.b $C	
00011A5B EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011A60 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011A65 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011A6A 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011A6F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011A74 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011A79 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011A7E FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011A83 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011A88 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011A8D 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011A92 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011A97 0C                         SME_4WhIu_A5:	dc.b $C	
00011A98 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011A9D FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011AA2 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011AA7 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011AAC 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011AB1 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011AB6 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011ABB EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011AC0 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011AC5 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011ACA 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011ACF 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011AD4 05                         SME_4WhIu_E2:	dc.b 5	
00011AD5 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011ADA 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011ADF EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011AE4 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011AE9 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011AEE 05                         SME_4WhIu_FC:	dc.b 5	
00011AEF F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011AF4 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011AF9 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011AFE F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011B03 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011B08                            		even
00011B08                            		even
00011B08                            
00011B08                            		include	"_incObj\sub SolidObject.asm"
00011B08                            ; ---------------------------------------------------------------------------
00011B08                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011B08                            ;
00011B08                            ; input:
00011B08                            ;	d1 = width
00011B08                            ;	d2 = height / 2 (when jumping)
00011B08                            ;	d3 = height / 2 (when walking)
00011B08                            ;	d4 = x-axis position
00011B08                            ; ---------------------------------------------------------------------------
00011B08                            
00011B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B08                            
00011B08                            
00011B08                            SolidObject:
00011B08 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011B0C 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011B10 3401                       		move.w	d1,d2
00011B12 D442                       		add.w	d2,d2
00011B14 43F8 D000                  		lea	(v_player).w,a1
00011B18 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B1E 6600                       		bne.s	@leave		; if yes, branch
00011B20 3029 0008                  		move.w	obX(a1),d0
00011B24 9068 0008                  		sub.w	obX(a0),d0
00011B28 D041                       		add.w	d1,d0
00011B2A 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011B2C B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011B2E 6500                       		bcs.s	@stand		; if not, branch
00011B30                            
00011B30                            	@leave:
00011B30 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011B36 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011B3C 4228 0025                  		clr.b	obSolid(a0)
00011B40 7800                       		moveq	#0,d4
00011B42 4E75                       		rts	
00011B44                            
00011B44                            	@stand:
00011B44 3404                       		move.w	d4,d2
00011B46 4EB9 0000 94DA             		jsr	MvSonicOnPtfm
00011B4C 7800                       		moveq	#0,d4
00011B4E 4E75                       		rts	
00011B50                            ; ===========================================================================
00011B50                            
00011B50                            SolidObject71:
00011B50 4A28 0025                  		tst.b	obSolid(a0)
00011B54 6700 0000                  		beq.w	loc_FAD0
00011B58 3401                       		move.w	d1,d2
00011B5A D442                       		add.w	d2,d2
00011B5C 43F8 D000                  		lea	(v_player).w,a1
00011B60 0829 0001 0022             		btst	#1,obStatus(a1)
00011B66 6600                       		bne.s	@leave
00011B68 3029 0008                  		move.w	obX(a1),d0
00011B6C 9068 0008                  		sub.w	obX(a0),d0
00011B70 D041                       		add.w	d1,d0
00011B72 6B00                       		bmi.s	@leave
00011B74 B042                       		cmp.w	d2,d0
00011B76 6500                       		bcs.s	@stand
00011B78                            
00011B78                            	@leave:
00011B78 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011B7E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011B84 4228 0025                  		clr.b	obSolid(a0)
00011B88 7800                       		moveq	#0,d4
00011B8A 4E75                       		rts	
00011B8C                            
00011B8C                            	@stand:
00011B8C 3404                       		move.w	d4,d2
00011B8E 4EB9 0000 94DA             		jsr	MvSonicOnPtfm
00011B94 7800                       		moveq	#0,d4
00011B96 4E75                       		rts	
00011B98                            ; ===========================================================================
00011B98                            
00011B98                            SolidObject2F:
00011B98 43F8 D000                  		lea	(v_player).w,a1
00011B9C 4A28 0001                  		tst.b	obRender(a0)
00011BA0 6A00 0000                  		bpl.w	Solid_Ignore
00011BA4 3029 0008                  		move.w	obX(a1),d0
00011BA8 9068 0008                  		sub.w	obX(a0),d0
00011BAC D041                       		add.w	d1,d0
00011BAE 6B00 0000                  		bmi.w	Solid_Ignore
00011BB2 3601                       		move.w	d1,d3
00011BB4 D643                       		add.w	d3,d3
00011BB6 B043                       		cmp.w	d3,d0
00011BB8 6200 0000                  		bhi.w	Solid_Ignore
00011BBC 3A00                       		move.w	d0,d5
00011BBE 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011BC4 6700                       		beq.s	@notflipped	; if not, branch
00011BC6 4645                       		not.w	d5
00011BC8 DA43                       		add.w	d3,d5
00011BCA                            
00011BCA                            	@notflipped:
00011BCA E24D                       		lsr.w	#1,d5
00011BCC 7600                       		moveq	#0,d3
00011BCE 1632 5000                  		move.b	(a2,d5.w),d3
00011BD2 9612                       		sub.b	(a2),d3
00011BD4 3A28 000C                  		move.w	obY(a0),d5
00011BD8 9A43                       		sub.w	d3,d5
00011BDA 1629 0016                  		move.b	obHeight(a1),d3
00011BDE 4883                       		ext.w	d3
00011BE0 D443                       		add.w	d3,d2
00011BE2 3629 000C                  		move.w	obY(a1),d3
00011BE6 9645                       		sub.w	d5,d3
00011BE8 5843                       		addq.w	#4,d3
00011BEA D642                       		add.w	d2,d3
00011BEC 6B00 0000                  		bmi.w	Solid_Ignore
00011BF0 3802                       		move.w	d2,d4
00011BF2 D844                       		add.w	d4,d4
00011BF4 B644                       		cmp.w	d4,d3
00011BF6 6400 0000                  		bcc.w	Solid_Ignore
00011BFA 6000 0000                  		bra.w	loc_FB0E
00011BFE                            ; ===========================================================================
00011BFE                            
00011BFE                            Solid_ChkEnter:
00011BFE 4A28 0001                  		tst.b	obRender(a0)
00011C02 6A00 0000                  		bpl.w	Solid_Ignore
00011C06                            
00011C06                            loc_FAD0:
00011C06 43F8 D000                  		lea	(v_player).w,a1
00011C0A 3029 0008                  		move.w	obX(a1),d0
00011C0E 9068 0008                  		sub.w	obX(a0),d0
00011C12 D041                       		add.w	d1,d0
00011C14 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011C18 3601                       		move.w	d1,d3
00011C1A D643                       		add.w	d3,d3
00011C1C B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011C1E 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011C22 1629 0016                  		move.b	obHeight(a1),d3
00011C26 4883                       		ext.w	d3
00011C28 D443                       		add.w	d3,d2
00011C2A 3629 000C                  		move.w	obY(a1),d3
00011C2E 9668 000C                  		sub.w	obY(a0),d3
00011C32 5843                       		addq.w	#4,d3
00011C34 D642                       		add.w	d2,d3
00011C36 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011C3A 3802                       		move.w	d2,d4
00011C3C D844                       		add.w	d4,d4
00011C3E B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011C40 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011C44                            
00011C44                            loc_FB0E:
00011C44 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011C48 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011C4C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011C52 6400 0000                  			bcc.w	Solid_Debug
00011C56 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011C5A 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011C5E 3A00                       		move.w	d0,d5
00011C60 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011C62 6400                       		bcc.s	@isright	; if yes, branch
00011C64 D241                       		add.w	d1,d1
00011C66 9041                       		sub.w	d1,d0
00011C68 3A00                       		move.w	d0,d5
00011C6A 4445                       		neg.w	d5
00011C6C                            
00011C6C                            	@isright:
00011C6C 3203                       		move.w	d3,d1
00011C6E B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011C70 6400                       		bcc.s	@isbelow	; if yes, branch
00011C72                            
00011C72 5943                       		subq.w	#4,d3
00011C74 9644                       		sub.w	d4,d3
00011C76 3203                       		move.w	d3,d1
00011C78 4441                       		neg.w	d1
00011C7A                            
00011C7A                            	@isbelow:
00011C7A BA41                       		cmp.w	d1,d5
00011C7C 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011C80 0C41 0004                  		cmpi.w	#4,d1
00011C84 6300                       		bls.s	Solid_SideAir
00011C86 4A40                       		tst.w	d0		; where is Sonic?
00011C88 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011C8A 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011C8C 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011C90 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011C92 6000                       		bra.s	Solid_Left
00011C94                            ; ===========================================================================
00011C94                            
00011C94                            Solid_Right:
00011C94 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011C98 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011C9A                            
00011C9A                            Solid_Left:
00011C9A 337C 0000 0020             		move.w	#0,obInertia(a1)
00011CA0 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011CA6                            
00011CA6                            Solid_Centre:
00011CA6 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011CAA 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011CB0 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011CB2 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011CB8 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011CBE 7801                       		moveq	#1,d4		; return side collision
00011CC0 4E75                       		rts	
00011CC2                            ; ===========================================================================
00011CC2                            
00011CC2                            Solid_SideAir:
00011CC2 6100                       		bsr.s	Solid_NotPushing
00011CC4 7801                       		moveq	#1,d4		; return side collision
00011CC6 4E75                       		rts	
00011CC8                            ; ===========================================================================
00011CC8                            
00011CC8                            Solid_Ignore:
00011CC8 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011CCE 6700                       		beq.s	Solid_Debug	; if not, branch
00011CD0 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011CD6 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CD8 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011CDE 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CE0 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011CE6 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011CE8 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011CEE                            
00011CEE                            
00011CEE                            Solid_NotPushing:
00011CEE 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011CF4 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011CFA                            
00011CFA                            Solid_Debug:
00011CFA 7800                       		moveq	#0,d4		; return no collision
00011CFC 4E75                       		rts	
00011CFE                            ; ===========================================================================
00011CFE                            
00011CFE                            Solid_TopBottom:
00011CFE 4A43                       		tst.w	d3		; is Sonic below the object?
00011D00 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011D02 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011D06 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011D08 60BE                       		bra.s	Solid_Ignore
00011D0A                            ; ===========================================================================
00011D0A                            
00011D0A                            Solid_Below:
00011D0A 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011D0E 6700                       		beq.s	Solid_Squash	; if not, branch
00011D10 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011D12 4A43                       		tst.w	d3		; is Sonic above the object?
00011D14 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011D16 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011D1A 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011D20                            
00011D20                            Solid_TopBtmAir:
00011D20 78FF                       		moveq	#-1,d4
00011D22 4E75                       		rts	
00011D24                            ; ===========================================================================
00011D24                            
00011D24                            Solid_Squash:
00011D24 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011D2A 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011D2C 2F08                       		move.l	a0,-(sp)
00011D2E 2049                       		movea.l	a1,a0
00011D30 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011D36 205F                       		movea.l	(sp)+,a0
00011D38 78FF                       		moveq	#-1,d4
00011D3A 4E75                       		rts	
00011D3C                            ; ===========================================================================
00011D3C                            
00011D3C                            Solid_Landed:
00011D3C 5943                       		subq.w	#4,d3
00011D3E 7200                       		moveq	#0,d1
00011D40 1228 0014                  		move.b	obActWid(a0),d1
00011D44 3401                       		move.w	d1,d2
00011D46 D442                       		add.w	d2,d2
00011D48 D269 0008                  		add.w	obX(a1),d1
00011D4C 9268 0008                  		sub.w	obX(a0),d1
00011D50 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011D52 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011D54 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011D56 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011D5A 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011D5C 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011D60 5369 000C                  		subq.w	#1,obY(a1)
00011D64 6100                       		bsr.s	Solid_ResetFloor
00011D66 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011D6C 08E8 0003 0022             		bset	#3,obStatus(a0)
00011D72 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011D74 4E75                       		rts	
00011D76                            ; ===========================================================================
00011D76                            
00011D76                            Solid_Miss:
00011D76 7800                       		moveq	#0,d4
00011D78 4E75                       		rts	
00011D7A                            ; End of function SolidObject
00011D7A                            
00011D7A                            
00011D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D7A                            
00011D7A                            
00011D7A                            Solid_ResetFloor:
00011D7A 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011D80 6700                       		beq.s	@notonobj	; if not, branch
00011D82                            
00011D82 7000                       		moveq	#0,d0
00011D84 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011D88 ED48                       		lsl.w	#6,d0
00011D8A 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011D90 2440                       		movea.l	d0,a2
00011D92 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011D98 422A 0025                  		clr.b	obSolid(a2)
00011D9C                            
00011D9C                            	@notonobj:
00011D9C 3008                       		move.w	a0,d0
00011D9E 0440 D000                  		subi.w	#$D000,d0
00011DA2 EC48                       		lsr.w	#6,d0
00011DA4 0240 007F                  		andi.w	#$7F,d0
00011DA8 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011DAC 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011DB2 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011DB8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011DBE 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011DC4 6700                       		beq.s	@notinair	; if not, branch
00011DC6 2F08                       		move.l	a0,-(sp)
00011DC8 2049                       		movea.l	a1,a0
00011DCA 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011DD0 205F                       		movea.l	(sp)+,a0
00011DD2                            
00011DD2                            	@notinair:
00011DD2 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011DD8 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011DDE 4E75                       		rts	
00011DE0                            ; End of function Solid_ResetFloor
00011DE0                            ; End of function Solid_ResetFloor
00011DE0                            
00011DE0                            		include	"_incObj\51 Smashable Green Block.asm"
00011DE0                            ; ---------------------------------------------------------------------------
00011DE0                            ; Object 51 - smashable	green block (MZ)
00011DE0                            ; ---------------------------------------------------------------------------
00011DE0                            
00011DE0                            SmashBlock:
00011DE0 7000                       		moveq	#0,d0
00011DE2 1028 0024                  		move.b	obRoutine(a0),d0
00011DE6 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011DEA 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011DEE 6000 F880                  		bra.w	RememberState
00011DF2                            ; ===========================================================================
00011DF2 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011DF4 0000                       		dc.w Smab_Solid-Smab_Index
00011DF6 0000                       		dc.w Smab_Points-Smab_Index
00011DF8                            ; ===========================================================================
00011DF8                            
00011DF8                            Smab_Main:	; Routine 0
00011DF8 5428 0024                  		addq.b	#2,obRoutine(a0)
00011DFC 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011E04 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011E0A 117C 0004 0001             		move.b	#4,obRender(a0)
00011E10 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011E16 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011E1C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011E22                            
00011E22                            Smab_Solid:	; Routine 2
00011E22                            
00011E22 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011E22 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011E22                            
00011E22 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011E28 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011E2E 323C 001B                  		move.w	#$1B,d1
00011E32 343C 0010                  		move.w	#$10,d2
00011E36 363C 0011                  		move.w	#$11,d3
00011E3A 3828 0008                  		move.w	obX(a0),d4
00011E3E 6100 FCC8                  		bsr.w	SolidObject
00011E42 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011E48 6600                       		bne.s	@smash		; if yes, branch
00011E4A                            
00011E4A                            	@notspinning:
00011E4A 4E75                       		rts	
00011E4C                            ; ===========================================================================
00011E4C                            
00011E4C                            @smash:
00011E4C 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011E52 66F6                       		bne.s	@notspinning	; if not, branch
00011E54 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011E5A 08E9 0002 0022             		bset	#2,obStatus(a1)
00011E60 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011E66 137C 0007 0017             		move.b	#7,obWidth(a1)
00011E6C 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011E72 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011E78 08E9 0001 0022             		bset	#1,obStatus(a1)
00011E7E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011E84 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011E8A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011E90 4228 0025                  		clr.b	obSolid(a0)
00011E94 117C 0001 001A             		move.b	#1,obFrame(a0)
00011E9A 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011EA0 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011EA2 343C 0038                  		move.w	#$38,d2
00011EA6 6100 D406                  		bsr.w	SmashObject
00011EAA 6100 DCDA                  		bsr.w	FindFreeObj
00011EAE 6600                       		bne.s	Smab_Points
00011EB0 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011EB4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011EBA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011EC0 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011EC4 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011EC8 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011ECC 6500                       		bcs.s	@bonus		; if yes, branch
00011ECE 7406                       		moveq	#6,d2		; set cap for points
00011ED0                            
00011ED0                            	@bonus:
00011ED0 7000                       		moveq	#0,d0
00011ED2 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011ED6 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011EDC 6500                       		bcs.s	@givepoints	; if not, branch
00011EDE 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011EE2 740A                       		moveq	#10,d2
00011EE4                            
00011EE4                            	@givepoints:
00011EE4 4EB9 0000 0000             		jsr	(AddPoints).l
00011EEA E24A                       		lsr.w	#1,d2
00011EEC 1342 001A                  		move.b	d2,obFrame(a1)
00011EF0                            
00011EF0                            Smab_Points:	; Routine 4
00011EF0 6100 D7F4                  		bsr.w	SpeedToPos
00011EF4 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011EFA 6100 D7FE                  		bsr.w	DisplaySprite
00011EFE 4A28 0001                  		tst.b	obRender(a0)
00011F02 6A00 D836                  		bpl.w	DeleteObject
00011F06 4E75                       		rts	
00011F08                            ; ===========================================================================
00011F08 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011F0C FF00 FF00                  		dc.w -$100, -$100
00011F10 0200 FE00                  		dc.w $200, -$200
00011F14 0100 FF00                  		dc.w $100, -$100
00011F18                            
00011F18 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011F18 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011F20                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011F20                            ; ---------------------------------------------------------------------------
00011F20                            ; Sprite mappings - smashable green block (MZ)
00011F20                            ; ---------------------------------------------------------------------------
00011F20                            Map_Smab_internal:
00011F20 0000                       		dc.w @two-Map_Smab_internal
00011F22 0000                       		dc.w @four-Map_Smab_internal
00011F24 02                         @two:		dc.b 2
00011F25 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
00011F2A 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00011F2F 04                         @four:		dc.b 4
00011F30 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
00011F35 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00011F3A F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00011F3F 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011F44                            		even
00011F44                            		even
00011F44                            
00011F44                            		include	"_incObj\52 Moving Blocks.asm"
00011F44                            ; ---------------------------------------------------------------------------
00011F44                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011F44                            ; ---------------------------------------------------------------------------
00011F44                            
00011F44                            MovingBlock:
00011F44 7000                       		moveq	#0,d0
00011F46 1028 0024                  		move.b	obRoutine(a0),d0
00011F4A 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011F4E 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011F52                            ; ===========================================================================
00011F52 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011F54 0000                       		dc.w MBlock_Platform-MBlock_Index
00011F56 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011F58                            
00011F58 =00000030                  mblock_origX:	equ $30
00011F58 =00000032                  mblock_origY:	equ $32
00011F58                            
00011F58 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011F5A 2001                       		dc.b $20, 1
00011F5C 2002                       		dc.b $20, 2
00011F5E 4003                       		dc.b $40, 3
00011F60 3004                       		dc.b $30, 4
00011F62                            ; ===========================================================================
00011F62                            
00011F62                            MBlock_Main:	; Routine 0
00011F62 5428 0024                  		addq.b	#2,obRoutine(a0)
00011F66 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011F6E 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011F74 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011F7A 6600                       		bne.s	loc_FE44
00011F7C 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011F84 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011F8A 117C 0007 0016             		move.b	#7,obHeight(a0)
00011F90                            
00011F90                            loc_FE44:
00011F90 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00011F96 6600                       		bne.s	loc_FE60
00011F98 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00011F9E 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00011FA4 6700                       		beq.s	loc_FE60	; if yes, branch
00011FA6 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00011FAC                            
00011FAC                            loc_FE60:
00011FAC 117C 0004 0001             		move.b	#4,obRender(a0)
00011FB2 7000                       		moveq	#0,d0
00011FB4 1028 0028                  		move.b	obSubtype(a0),d0
00011FB8 E648                       		lsr.w	#3,d0
00011FBA 0240 001E                  		andi.w	#$1E,d0
00011FBE 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00011FC2 115A 0014                  		move.b	(a2)+,obActWid(a0)
00011FC6 115A 001A                  		move.b	(a2)+,obFrame(a0)
00011FCA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011FD0 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011FD6 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00011FDC 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00011FE2                            
00011FE2                            MBlock_Platform: ; Routine 2
00011FE2 6100 0000                  		bsr.w	MBlock_Move
00011FE6 7200                       		moveq	#0,d1
00011FE8 1228 0014                  		move.b	obActWid(a0),d1
00011FEC 4EB9 0000 8E08             		jsr	(PlatformObject).l
00011FF2 6000                       		bra.s	MBlock_ChkDel
00011FF4                            ; ===========================================================================
00011FF4                            
00011FF4                            MBlock_StandOn:	; Routine 4
00011FF4 7200                       		moveq	#0,d1
00011FF6 1228 0014                  		move.b	obActWid(a0),d1
00011FFA 4EB9 0000 8F7C             		jsr	(ExitPlatform).l
00012000 3F28 0008                  		move.w	obX(a0),-(sp)
00012004 6100 0000                  		bsr.w	MBlock_Move
00012008 341F                       		move.w	(sp)+,d2
0001200A 4EB9 0000 94E6             		jsr	(MvSonicOnPtfm2).l
00012010                            
00012010                            MBlock_ChkDel:
0001202E 6000 D6CA                  		bra.w	DisplaySprite
00012032                            ; ===========================================================================
00012032                            
00012032                            MBlock_Move:
00012032 7000                       		moveq	#0,d0
00012034 1028 0028                  		move.b	obSubtype(a0),d0
00012038 0240 000F                  		andi.w	#$F,d0
0001203C D040                       		add.w	d0,d0
0001203E 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00012042 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00012046                            ; ===========================================================================
00012046 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
0001204A 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
0001204E 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00012052 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00012056 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
0001205A 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
0001205C                            ; ===========================================================================
0001205C                            
0001205C                            MBlock_Type00:
0001205C 4E75                       		rts	
0001205E                            ; ===========================================================================
0001205E                            
0001205E                            MBlock_Type01:
0001205E 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012062 323C 0060                  		move.w	#$60,d1
00012066 0828 0000 0022             		btst	#0,obStatus(a0)
0001206C 6700                       		beq.s	loc_FF26
0001206E 4440                       		neg.w	d0
00012070 D041                       		add.w	d1,d0
00012072                            
00012072                            loc_FF26:
00012072 3228 0030                  		move.w	mblock_origX(a0),d1
00012076 9240                       		sub.w	d0,d1
00012078 3141 0008                  		move.w	d1,obX(a0)
0001207C 4E75                       		rts	
0001207E                            ; ===========================================================================
0001207E                            
0001207E                            MBlock_Type02:
0001207E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012084 6600                       		bne.s	MBlock_02_Wait
00012086 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001208A                            
0001208A                            MBlock_02_Wait:
0001208A 4E75                       		rts	
0001208C                            ; ===========================================================================
0001208C                            
0001208C                            MBlock_Type03:
0001208C 7600                       		moveq	#0,d3
0001208E 1628 0014                  		move.b	obActWid(a0),d3
00012092 6100 0000                  		bsr.w	ObjHitWallRight
00012096 4A41                       		tst.w	d1		; has the platform hit a wall?
00012098 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
0001209A 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001209E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000120A4 4E75                       		rts	
000120A6                            ; ===========================================================================
000120A6                            
000120A6                            MBlock_03_End:
000120A6 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
000120AA 4E75                       		rts	
000120AC                            ; ===========================================================================
000120AC                            
000120AC                            MBlock_Type05:
000120AC 7600                       		moveq	#0,d3
000120AE 1628 0014                  		move.b	obActWid(a0),d3
000120B2 6100 0000                  		bsr.w	ObjHitWallRight
000120B6 4A41                       		tst.w	d1		; has the platform hit a wall?
000120B8 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
000120BA 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000120BE 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000120C4 4E75                       		rts	
000120C6                            ; ===========================================================================
000120C6                            
000120C6                            MBlock_05_End:
000120C6 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
000120CA 4E75                       		rts	
000120CC                            ; ===========================================================================
000120CC                            
000120CC                            MBlock_Type06:
000120CC 6100 D618                  		bsr.w	SpeedToPos
000120D0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
000120D6 6100 0000                  		bsr.w	ObjFloorDist
000120DA 4A41                       		tst.w	d1		; has platform hit the floor?
000120DC 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000120E0 D368 000C                  		add.w	d1,obY(a0)
000120E4 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
000120E8 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
000120EC                            
000120EC                            locret_FFA0:
000120EC 4E75                       		rts	
000120EE                            ; ===========================================================================
000120EE                            
000120EE                            MBlock_Type07:
000120EE 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
000120F2 6700                       		beq.s	MBlock_07_ChkDel
000120F4 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
000120F8                            
000120F8                            MBlock_07_ChkDel:
000120F8 588F                       		addq.l	#4,sp
00012118 4E75                       		rts	
0001211A                            ; ===========================================================================
0001211A                            
0001211A                            MBlock_Type08:
0001211A 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001211E 323C 0080                  		move.w	#$80,d1
00012122 0828 0000 0022             		btst	#0,obStatus(a0)
00012128 6700                       		beq.s	loc_FFE2
0001212A 4440                       		neg.w	d0
0001212C D041                       		add.w	d1,d0
0001212E                            
0001212E                            loc_FFE2:
0001212E 3228 0032                  		move.w	mblock_origY(a0),d1
00012132 9240                       		sub.w	d0,d1
00012134 3141 000C                  		move.w	d1,obY(a0)
00012138 4E75                       		rts	
0001213A                            ; ===========================================================================
0001213A                            
0001213A                            MBlock_Type0A:
0001213A 7600                       		moveq	#0,d3
0001213C 1628 0014                  		move.b	obActWid(a0),d3
00012140 D643                       		add.w	d3,d3
00012142 7208                       		moveq	#8,d1
00012144 0828 0000 0022             		btst	#0,obStatus(a0)
0001214A 6700                       		beq.s	loc_10004
0001214C 4441                       		neg.w	d1
0001214E 4443                       		neg.w	d3
00012150                            
00012150                            loc_10004:
00012150 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00012154 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00012156 3028 0008                  		move.w	obX(a0),d0
0001215A 9068 0030                  		sub.w	mblock_origX(a0),d0
0001215E B043                       		cmp.w	d3,d0
00012160 6700                       		beq.s	MBlock_0A_Wait
00012162 D368 0008                  		add.w	d1,obX(a0)	; move platform
00012166 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001216C 4E75                       		rts	
0001216E                            ; ===========================================================================
0001216E                            
0001216E                            MBlock_0A_Wait:
0001216E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00012172 6600                       		bne.s	locret_1002E	; if time remains, branch
00012174 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001217A                            
0001217A                            locret_1002E:
0001217A 4E75                       		rts	
0001217C                            ; ===========================================================================
0001217C                            
0001217C                            MBlock_0A_Back:
0001217C 3028 0008                  		move.w	obX(a0),d0
00012180 9068 0030                  		sub.w	mblock_origX(a0),d0
00012184 6700                       		beq.s	MBlock_0A_Reset
00012186 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001218A 4E75                       		rts	
0001218C                            ; ===========================================================================
0001218C                            
0001218C                            MBlock_0A_Reset:
0001218C 4268 0036                  		clr.w	$36(a0)
00012190 5328 0028                  		subq.b	#1,obSubtype(a0)
00012194 4E75                       		rts	
00012194 4E75                       		rts	
00012196                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012196                            ; ---------------------------------------------------------------------------
00012196                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012196                            ; ---------------------------------------------------------------------------
00012196                            Map_MBlock_internal:
00012196 0000                       		dc.w @mz1-Map_MBlock_internal
00012198 0000                       		dc.w @mz2-Map_MBlock_internal
0001219A 0000                       		dc.w @sbz-Map_MBlock_internal
0001219C 0000                       		dc.w @sbzwide-Map_MBlock_internal
0001219E 0000                       		dc.w @mz3-Map_MBlock_internal
000121A0 01                         @mz1:		dc.b 1
000121A1 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000121A6 02                         @mz2:		dc.b 2
000121A7 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000121AC F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000121B1 04                         @sbz:		dc.b 4
000121B2 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000121B7 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000121BC F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000121C1 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000121C6 04                         @sbzwide:	dc.b 4
000121C7 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000121CC F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000121D1 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000121D6 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000121DB 03                         @mz3:		dc.b 3
000121DC F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000121E1 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000121E6 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000121EC 00                         		even
000121EC 00                         		even
000121EC                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
000121EC                            ; ---------------------------------------------------------------------------
000121EC                            ; Sprite mappings - moving block (LZ)
000121EC                            ; ---------------------------------------------------------------------------
000121EC                            Map_MBlockLZ_internal:
000121EC 0000                       		dc.w @0-Map_MBlockLZ_internal
000121EE 01                         @0:		dc.b 1
000121EF F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000121F4                            		even
000121F4                            		even
000121F4                            
000121F4                            		include	"_incObj\55 Basaran.asm"
000121F4                            ; ---------------------------------------------------------------------------
000121F4                            ; Object 55 - Basaran enemy (MZ)
000121F4                            ; ---------------------------------------------------------------------------
000121F4                            
000121F4                            Basaran:
000121F4 7000                       		moveq	#0,d0
000121F6 1028 0024                  		move.b	obRoutine(a0),d0
000121FA 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
000121FE 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012202                            ; ===========================================================================
00012202 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012204 0000                       		dc.w Bas_Action-Bas_Index
00012206                            ; ===========================================================================
00012206                            
00012206                            Bas_Main:	; Routine 0
00012206 5428 0024                  		addq.b	#2,obRoutine(a0)
0001220A 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012212 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012218 117C 0004 0001             		move.b	#4,obRender(a0)
0001221E 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012224 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001222A 117C 000B 0020             		move.b	#$B,obColType(a0)
00012230 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012236                            
00012236                            Bas_Action:	; Routine 2
00012236 7000                       		moveq	#0,d0
00012238 1028 0025                  		move.b	ob2ndRout(a0),d0
0001223C 323B 0000                  		move.w	@index(pc,d0.w),d1
00012240 4EBB 1000                  		jsr	@index(pc,d1.w)
00012244 43F9 0000 0000             		lea	(Ani_Bas).l,a1
0001224A 6100 A55A                  		bsr.w	AnimateSprite
0001224E 6000 F420                  		bra.w	RememberState
00012252                            ; ===========================================================================
00012252 0000                       @index:		dc.w @dropcheck-@index
00012254 0000                       		dc.w @dropfly-@index
00012256 0000                       		dc.w @flapsound-@index
00012258 0000                       		dc.w @flyup-@index
0001225A                            ; ===========================================================================
0001225A                            
0001225A                            @dropcheck:
0001225A 343C 0080                  		move.w	#$80,d2
0001225E 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
00012262 6400                       		bcc.s	@nodrop		; if not, branch
00012264 3038 D00C                  		move.w	(v_player+obY).w,d0
00012268 3140 0036                  		move.w	d0,$36(a0)
0001226C 9068 000C                  		sub.w	obY(a0),d0
00012270 6500                       		bcs.s	@nodrop
00012272 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012276 6400                       		bcc.s	@nodrop		; if not, branch
00012278 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
0001227C 6600                       		bne.s	@nodrop		; if yes, branch
0001227E                            
0001227E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012282 D007                       		add.b	d7,d0
00012284 0200 0007                  		andi.b	#7,d0
00012288 6600                       		bne.s	@nodrop
0001228A 117C 0001 001C             		move.b	#1,obAnim(a0)
00012290 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012294                            
00012294                            	@nodrop:
00012294 4E75                       		rts	
00012296                            ; ===========================================================================
00012296                            
00012296                            @dropfly:
00012296 6100 D44E                  		bsr.w	SpeedToPos
0001229A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
000122A0 343C 0080                  		move.w	#$80,d2
000122A4 6100 0000                  		bsr.w	@chkdistance
000122A8 3028 0036                  		move.w	$36(a0),d0
000122AC 9068 000C                  		sub.w	obY(a0),d0
000122B0 6500                       		bcs.s	@chkdel
000122B2 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
000122B6 6400                       		bcc.s	@dropmore	; if not, branch
000122B8 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
000122BC 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
000122C2 117C 0002 001C             		move.b	#2,obAnim(a0)
000122C8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000122CC                            
000122CC                            	@dropmore:
000122CC 4E75                       		rts	
000122CE                            
000122CE                            	@chkdel:
000122CE 4A28 0001                  		tst.b	obRender(a0)
000122D2 6A00 D466                  		bpl.w	DeleteObject
000122D6 4E75                       		rts	
000122D8                            ; ===========================================================================
000122D8                            
000122D8                            @flapsound:
000122D8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000122DC 0200 000F                  		andi.b	#$F,d0
000122E0 6600                       		bne.s	@nosound
000122EC                            
000122EC                            	@nosound:
000122EC 6100 D3F8                  		bsr.w	SpeedToPos
000122F0 3038 D008                  		move.w	(v_player+obX).w,d0
000122F4 9068 0008                  		sub.w	obX(a0),d0
000122F8 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
000122FA 4440                       		neg.w	d0
000122FC                            
000122FC                            	@isright:
000122FC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012300 6500                       		bcs.s	@dontflyup	; if yes, branch
00012302 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012306 D007                       		add.b	d7,d0
00012308 0200 0007                  		andi.b	#7,d0
0001230C 6600                       		bne.s	@dontflyup
0001230E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012312                            
00012312                            @dontflyup:
00012312 4E75                       		rts	
00012314                            ; ===========================================================================
00012314                            
00012314                            @flyup:
00012314 6100 D3D0                  		bsr.w	SpeedToPos
00012318 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001231E 6100 0000                  		bsr.w	ObjHitCeiling
00012322 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012324 6A00                       		bpl.s	@noceiling	; if not, branch
00012326 9368 000C                  		sub.w	d1,obY(a0)
0001232A 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
00012330 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012334 4268 0012                  		clr.w	obVelY(a0)
00012338 4228 001C                  		clr.b	obAnim(a0)
0001233C 4228 0025                  		clr.b	ob2ndRout(a0)
00012340                            
00012340                            	@noceiling:
00012340 4E75                       		rts	
00012342                            ; ===========================================================================
00012342                            
00012342                            ; Subroutine to check Sonic's distance from the basaran
00012342                            
00012342                            ; input:
00012342                            ;	d2 = distance to compare
00012342                            
00012342                            ; output:
00012342                            ;	d0 = distance between Sonic and basaran
00012342                            ;	d1 = speed/direction for basaran to fly
00012342                            
00012342                            @chkdistance:
00012342 323C 0100                  		move.w	#$100,d1
00012346 08E8 0000 0022             		bset	#0,obStatus(a0)
0001234C 3038 D008                  		move.w	(v_player+obX).w,d0
00012350 9068 0008                  		sub.w	obX(a0),d0
00012354 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
00012356 4440                       		neg.w	d0
00012358 4441                       		neg.w	d1
0001235A 08A8 0000 0022             		bclr	#0,obStatus(a0)
00012360                            
00012360                            	@right:
00012360 B042                       		cmp.w	d2,d0
00012362 4E75                       		rts	
00012364                            ; ===========================================================================
00012364                            ; unused crap
00012364 6100 D380                  		bsr.w	SpeedToPos
00012368 6100 D390                  		bsr.w	DisplaySprite
0001236C 4A28 0001                  		tst.b	obRender(a0)
00012370 6A00 D3C8                  		bpl.w	DeleteObject
00012374 4E75                       		rts	
00012374 4E75                       		rts	
00012376                            		include	"_anim\Basaran.asm"
00012376                            ; ---------------------------------------------------------------------------
00012376                            ; Animation script - Basaran enemy
00012376                            ; ---------------------------------------------------------------------------
00012376 0000                       Ani_Bas:	dc.w @still-Ani_Bas
00012378 0000                       		dc.w @fall-Ani_Bas
0001237A 0000                       		dc.w @fly-Ani_Bas
0001237C 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012380 00                         		even
00012380 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012384 00                         		even
00012384 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001238A                            		even
0001238A                            		even
0001238A                            Map_Bas:	include	"_maps\Basaran.asm"
0001238A                            ; --------------------------------------------------------------------------------
0001238A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001238A                            ; --------------------------------------------------------------------------------
0001238A                            
0001238A                            SME_RhYYA:	
0001238A 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001238E 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012392 01                         SME_RhYYA_8:	dc.b 1	
00012393 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012398 03                         SME_RhYYA_E:	dc.b 3	
00012399 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
0001239E 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
000123A3 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
000123A8 04                         SME_RhYYA_1E:	dc.b 4	
000123A9 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
000123AE 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
000123B3 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
000123B8 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
000123BD 04                         SME_RhYYA_33:	dc.b 4	
000123BE F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
000123C3 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
000123C8 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
000123CD FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
000123D2                            		even
000123D2                            		even
000123D2                            
000123D2                            		include	"_incObj\56 Floating Blocks and Doors.asm"
000123D2                            ; ---------------------------------------------------------------------------
000123D2                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
000123D2                            ; ---------------------------------------------------------------------------
000123D2                            
000123D2                            FloatingBlock:
000123D2 7000                       		moveq	#0,d0
000123D4 1028 0024                  		move.b	obRoutine(a0),d0
000123D8 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
000123DC 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
000123E0                            ; ===========================================================================
000123E0 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
000123E2 0000                       		dc.w FBlock_Action-FBlock_Index
000123E4                            
000123E4 =00000034                  fb_origX:	equ $34		; original x-axis position
000123E4 =00000030                  fb_origY:	equ $30		; original y-axis position
000123E4 =0000003A                  fb_height:	equ $3A		; total object height
000123E4 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
000123E4                            
000123E4                            FBlock_Var:	; width/2, height/2
000123E4 1010                       		dc.b  $10, $10	; subtype 0x/8x
000123E6 2020                       		dc.b  $20, $20	; subtype 1x/9x
000123E8 1020                       		dc.b  $10, $20	; subtype 2x/Ax
000123EA 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
000123EC 1027                       		dc.b  $10, $27	; subtype 4x/Cx
000123EE 1010                       		dc.b  $10, $10	; subtype 5x/Dx
000123F0 0820                       		dc.b	8, $20	; subtype 6x/Ex
000123F2 4010                       		dc.b  $40, $10	; subtype 7x/Fx
000123F4                            ; ===========================================================================
000123F4                            
000123F4                            FBlock_Main:	; Routine 0
000123F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000123F8 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012400 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012406 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001240C 6600                       		bne.s	@notLZ
0001240E 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012414                            
00012414                            	@notLZ:
00012414 117C 0004 0001             		move.b	#4,obRender(a0)
0001241A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00012420 7000                       		moveq	#0,d0
00012422 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012426 E648                       		lsr.w	#3,d0
00012428 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
0001242C 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
00012430 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012434 1152 0016                  		move.b	(a2),obHeight(a0)
00012438 E248                       		lsr.w	#1,d0
0001243A 1140 001A                  		move.b	d0,obFrame(a0)
0001243E 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012444 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
0001244A 7000                       		moveq	#0,d0
0001244C 1012                       		move.b	(a2),d0
0001244E D040                       		add.w	d0,d0
00012450 3140 003A                  		move.w	d0,fb_height(a0)
00012454 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
0001245A 6600                       			bne.s	@dontdelete
0001245C 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
00012462 6600                       			bne.s	@notatpos
00012464 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012468 6700                       			beq.s	@dontdelete
0001246A 4EF9 0000 F73A             			jmp	(DeleteObject).l
00012470                            	@notatpos:
00012470 4228 0028                  			clr.b	obSubtype(a0)
00012474 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012478 6600                       			bne.s	@dontdelete
0001247A 4EF9 0000 F73A             			jmp	(DeleteObject).l
00012480                            	@dontdelete:
00012480 7000                       		moveq	#0,d0
00012482 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012488 6700                       		beq.s	@stillnotLZ
0001248A 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001248E 0240 000F                  		andi.w	#$F,d0
00012492 5140                       		subq.w	#8,d0
00012494 6500                       		bcs.s	@stillnotLZ
00012496 E548                       		lsl.w	#2,d0
00012498 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
0001249C 45F2 0000                  		lea	(a2,d0.w),a2
000124A0 4A52                       		tst.w	(a2)
000124A2 6A00                       		bpl.s	@stillnotLZ
000124A4 0868 0000 0022             		bchg	#0,obStatus(a0)
000124AA                            
000124AA                            	@stillnotLZ:
000124AA 1028 0028                  		move.b	obSubtype(a0),d0
000124AE 6A00                       		bpl.s	FBlock_Action
000124B0 0200 000F                  		andi.b	#$F,d0
000124B4 1140 003C                  		move.b	d0,fb_type(a0)
000124B8 117C 0005 0028             		move.b	#5,obSubtype(a0)
000124BE 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
000124C4 6600                       		bne.s	@chkstate
000124C6 117C 000C 0028             		move.b	#$C,obSubtype(a0)
000124CC 317C 0080 003A             		move.w	#$80,fb_height(a0)
000124D2                            
000124D2                            @chkstate:
000124D2 45F8 FC00                  		lea	(v_objstate).w,a2
000124D6 7000                       		moveq	#0,d0
000124D8 1028 0023                  		move.b	obRespawnNo(a0),d0
000124DC 6700                       		beq.s	FBlock_Action
000124DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000124E4 0832 0000 0002             		btst	#0,2(a2,d0.w)
000124EA 6700                       		beq.s	FBlock_Action
000124EC 5228 0028                  		addq.b	#1,obSubtype(a0)
000124F0 4268 003A                  		clr.w	fb_height(a0)
000124F4                            
000124F4                            FBlock_Action:	; Routine 2
000124F4 3F28 0008                  		move.w	obX(a0),-(sp)
000124F8 7000                       		moveq	#0,d0
000124FA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
000124FE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012502 D040                       		add.w	d0,d0
00012504 323B 0000                  		move.w	@index(pc,d0.w),d1
00012508 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001250C 381F                       		move.w	(sp)+,d4
0001250E 4A28 0001                  		tst.b	obRender(a0)
00012512 6A00                       		bpl.s	@chkdel
00012514 7200                       		moveq	#0,d1
00012516 1228 0014                  		move.b	obActWid(a0),d1
0001251A 0641 000B                  		addi.w	#$B,d1
0001251E 7400                       		moveq	#0,d2
00012520 1428 0016                  		move.b	obHeight(a0),d2
00012524 3602                       		move.w	d2,d3
00012526 5243                       		addq.w	#1,d3
00012528 6100 F5DE                  		bsr.w	SolidObject
0001252C                            
0001252C                            	@chkdel:
00012548                            		@display:
00012548 6000 D1B0                  			bra.w	DisplaySprite
0001254C                            		@chkdel2:
0001254C 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012552 6600                       			bne.s	@delete
00012554 4A28 0038                  			tst.b	$38(a0)
00012558 66EE                       			bne.s	@display
0001255A                            		@delete:
0001255A 4EF9 0000 F73A             			jmp	(DeleteObject).l
00012560                            ; ===========================================================================
00012560 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012564 0000 0000                  		dc.w @type02-@index, @type03-@index
00012568 0000 0000                  		dc.w @type04-@index, @type05-@index
0001256C 0000 0000                  		dc.w @type06-@index, @type07-@index
00012570 0000 0000                  		dc.w @type08-@index, @type09-@index
00012574 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00012578 0000 0000                  		dc.w @type0C-@index, @type0D-@index
0001257C                            ; ===========================================================================
0001257C                            
0001257C                            @type00:
0001257C                            ; doesn't move
0001257C 4E75                       		rts	
0001257E                            ; ===========================================================================
0001257E                            
0001257E                            @type01:
0001257E                            ; moves side-to-side
0001257E 323C 0040                  		move.w	#$40,d1		; set move distance
00012582 7000                       		moveq	#0,d0
00012584 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012588 6000                       		bra.s	@moveLR
0001258A                            ; ===========================================================================
0001258A                            
0001258A                            @type02:
0001258A                            ; moves side-to-side
0001258A 323C 0080                  		move.w	#$80,d1		; set move distance
0001258E 7000                       		moveq	#0,d0
00012590 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012594                            
00012594                            	@moveLR:
00012594 0828 0000 0022             		btst	#0,obStatus(a0)
0001259A 6700                       		beq.s	@noflip
0001259C 4440                       		neg.w	d0
0001259E D041                       		add.w	d1,d0
000125A0                            
000125A0                            	@noflip:
000125A0 3228 0034                  		move.w	fb_origX(a0),d1
000125A4 9240                       		sub.w	d0,d1
000125A6 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
000125AA 4E75                       		rts	
000125AC                            ; ===========================================================================
000125AC                            
000125AC                            @type03:
000125AC                            ; moves up/down
000125AC 323C 0040                  		move.w	#$40,d1		; set move distance
000125B0 7000                       		moveq	#0,d0
000125B2 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000125B6 6000                       		bra.s	@moveUD
000125B8                            ; ===========================================================================
000125B8                            
000125B8                            @type04:
000125B8                            ; moves up/down
000125B8 323C 0080                  		move.w	#$80,d1		; set move distance
000125BC 7000                       		moveq	#0,d0
000125BE 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000125C2                            
000125C2                            	@moveUD:
000125C2 0828 0000 0022             		btst	#0,obStatus(a0)
000125C8 6700                       		beq.s	@noflip04
000125CA 4440                       		neg.w	d0
000125CC D041                       		add.w	d1,d0
000125CE                            
000125CE                            	@noflip04:
000125CE 3228 0030                  		move.w	fb_origY(a0),d1
000125D2 9240                       		sub.w	d0,d1
000125D4 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
000125D8 4E75                       		rts	
000125DA                            ; ===========================================================================
000125DA                            
000125DA                            @type05:
000125DA                            ; moves up when a switch is pressed
000125DA 4A28 0038                  		tst.b	$38(a0)
000125DE 6600                       		bne.s	@loc_104A4
000125E0 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000125E6 6600                       		bne.s	@aaa		; if not, branch
000125E8 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
000125EE 6600                       		bne.s	@aaa
000125F0 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000125F4 3038 D008                  		move.w	(v_player+obX).w,d0
000125F8 B068 0008                  		cmp.w	obX(a0),d0
000125FC 6400                       		bcc.s	@aaa
000125FE 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012604                            
00012604                            	@aaa:
00012604 45F8 F7E0                  		lea	(f_switch).w,a2
00012608 7000                       		moveq	#0,d0
0001260A 1028 003C                  		move.b	fb_type(a0),d0
0001260E 0832 0000 0000             		btst	#0,(a2,d0.w)
00012614 6700                       		beq.s	@loc_104AE
00012616 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001261C 6600                       		bne.s	@loc_1049E	; if not, branch
0001261E 0C00 0003                  		cmpi.b	#3,d0
00012622 6600                       		bne.s	@loc_1049E
00012624 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012628                            
00012628                            @loc_1049E:
00012628 117C 0001 0038             		move.b	#1,$38(a0)
0001262E                            
0001262E                            @loc_104A4:
0001262E 4A68 003A                  		tst.w	fb_height(a0)
00012632 6700                       		beq.s	@loc_104C8
00012634 5568 003A                  		subq.w	#2,fb_height(a0)
00012638                            
00012638                            @loc_104AE:
00012638 3028 003A                  		move.w	fb_height(a0),d0
0001263C 0828 0000 0022             		btst	#0,$22(a0)
00012642 6700                       		beq.s	@loc_104BC
00012644 4440                       		neg.w	d0
00012646                            
00012646                            @loc_104BC:
00012646 3228 0030                  		move.w	fb_origY(a0),d1
0001264A D240                       		add.w	d0,d1
0001264C 3141 000C                  		move.w	d1,obY(a0)
00012650 4E75                       		rts	
00012652                            ; ===========================================================================
00012652                            
00012652                            @loc_104C8:
00012652 5228 0028                  		addq.b	#1,$28(a0)
00012656 4228 0038                  		clr.b	$38(a0)
0001265A 45F8 FC00                  		lea	(v_objstate).w,a2
0001265E 7000                       		moveq	#0,d0
00012660 1028 0023                  		move.b	obRespawnNo(a0),d0
00012664 67D2                       		beq.s	@loc_104AE
00012666 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001266C 60CA                       		bra.s	@loc_104AE
0001266E                            ; ===========================================================================
0001266E                            
0001266E                            @type06:
0001266E 4A28 0038                  		tst.b	$38(a0)
00012672 6600                       		bne.s	@loc_10500
00012674 45F8 F7E0                  		lea	(f_switch).w,a2
00012678 7000                       		moveq	#0,d0
0001267A 1028 003C                  		move.b	fb_type(a0),d0
0001267E 4A32 0000                  		tst.b	(a2,d0.w)
00012682 6A00                       		bpl.s	@loc_10512
00012684 117C 0001 0038             		move.b	#1,$38(a0)
0001268A                            
0001268A                            @loc_10500:
0001268A 7000                       		moveq	#0,d0
0001268C 1028 0016                  		move.b	obHeight(a0),d0
00012690 D040                       		add.w	d0,d0
00012692 B068 003A                  		cmp.w	fb_height(a0),d0
00012696 6700                       		beq.s	@loc_1052C
00012698 5468 003A                  		addq.w	#2,fb_height(a0)
0001269C                            
0001269C                            @loc_10512:
0001269C 3028 003A                  		move.w	fb_height(a0),d0
000126A0 0828 0000 0022             		btst	#0,obStatus(a0)
000126A6 6700                       		beq.s	@loc_10520
000126A8 4440                       		neg.w	d0
000126AA                            
000126AA                            @loc_10520:
000126AA 3228 0030                  		move.w	fb_origY(a0),d1
000126AE D240                       		add.w	d0,d1
000126B0 3141 000C                  		move.w	d1,obY(a0)
000126B4 4E75                       		rts	
000126B6                            ; ===========================================================================
000126B6                            
000126B6                            @loc_1052C:
000126B6 5328 0028                  		subq.b	#1,obSubtype(a0)
000126BA 4228 0038                  		clr.b	$38(a0)
000126BE 45F8 FC00                  		lea	(v_objstate).w,a2
000126C2 7000                       		moveq	#0,d0
000126C4 1028 0023                  		move.b	obRespawnNo(a0),d0
000126C8 67D2                       		beq.s	@loc_10512
000126CA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000126D0 60CA                       		bra.s	@loc_10512
000126D2                            ; ===========================================================================
000126D2                            
000126D2                            @type07:
000126D2 4A28 0038                  		tst.b	$38(a0)
000126D6 6600                       		bne.s	@loc_1055E
000126D8 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
000126DC 6700                       		beq.s	@locret_10578
000126DE 117C 0001 0038             		move.b	#1,$38(a0)
000126E4 4268 003A                  		clr.w	fb_height(a0)
000126E8                            
000126E8                            @loc_1055E:
000126E8 5268 0008                  		addq.w	#1,obX(a0)
000126EC 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126F2 5268 003A                  		addq.w	#1,fb_height(a0)
000126F6 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
000126FC 6600                       		bne.s	@locret_10578
000126FE 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012704 4228 0038                  			clr.b	$38(a0)
00012708 4228 0028                  		clr.b	obSubtype(a0)
0001270C                            
0001270C                            @locret_10578:
0001270C 4E75                       		rts	
0001270E                            ; ===========================================================================
0001270E                            
0001270E                            @type0C:
0001270E 4A28 0038                  		tst.b	$38(a0)
00012712 6600                       		bne.s	@loc_10598
00012714 45F8 F7E0                  		lea	(f_switch).w,a2
00012718 7000                       		moveq	#0,d0
0001271A 1028 003C                  		move.b	fb_type(a0),d0
0001271E 0832 0000 0000             		btst	#0,(a2,d0.w)
00012724 6700                       		beq.s	@loc_105A2
00012726 117C 0001 0038             		move.b	#1,$38(a0)
0001272C                            
0001272C                            @loc_10598:
0001272C 4A68 003A                  		tst.w	fb_height(a0)
00012730 6700                       		beq.s	@loc_105C0
00012732 5568 003A                  		subq.w	#2,fb_height(a0)
00012736                            
00012736                            @loc_105A2:
00012736 3028 003A                  		move.w	fb_height(a0),d0
0001273A 0828 0000 0022             		btst	#0,obStatus(a0)
00012740 6700                       		beq.s	@loc_105B4
00012742 4440                       		neg.w	d0
00012744 0640 0080                  		addi.w	#$80,d0
00012748                            
00012748                            @loc_105B4:
00012748 3228 0034                  		move.w	fb_origX(a0),d1
0001274C D240                       		add.w	d0,d1
0001274E 3141 0008                  		move.w	d1,obX(a0)
00012752 4E75                       		rts	
00012754                            ; ===========================================================================
00012754                            
00012754                            @loc_105C0:
00012754 5228 0028                  		addq.b	#1,obSubtype(a0)
00012758 4228 0038                  		clr.b	$38(a0)
0001275C 45F8 FC00                  		lea	(v_objstate).w,a2
00012760 7000                       		moveq	#0,d0
00012762 1028 0023                  		move.b	obRespawnNo(a0),d0
00012766 67CE                       		beq.s	@loc_105A2
00012768 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001276E 60C6                       		bra.s	@loc_105A2
00012770                            ; ===========================================================================
00012770                            
00012770                            @type0D:
00012770 4A28 0038                  		tst.b	$38(a0)
00012774 6600                       		bne.s	@loc_105F8
00012776 45F8 F7E0                  		lea	(f_switch).w,a2
0001277A 7000                       		moveq	#0,d0
0001277C 1028 003C                  		move.b	fb_type(a0),d0
00012780 4A32 0000                  		tst.b	(a2,d0.w)
00012784 6A00                       		bpl.s	@wtf
00012786 117C 0001 0038             		move.b	#1,$38(a0)
0001278C                            
0001278C                            @loc_105F8:
0001278C 303C 0080                  		move.w	#$80,d0
00012790 B068 003A                  		cmp.w	fb_height(a0),d0
00012794 6700                       		beq.s	@loc_10624
00012796 5468 003A                  		addq.w	#2,fb_height(a0)
0001279A                            
0001279A                            @wtf:
0001279A 3028 003A                  		move.w	fb_height(a0),d0
0001279E 0828 0000 0022             		btst	#0,obStatus(a0)
000127A4 6700                       		beq.s	@loc_10618
000127A6 4440                       		neg.w	d0
000127A8 0640 0080                  		addi.w	#$80,d0
000127AC                            
000127AC                            @loc_10618:
000127AC 3228 0034                  		move.w	fb_origX(a0),d1
000127B0 D240                       		add.w	d0,d1
000127B2 3141 0008                  		move.w	d1,obX(a0)
000127B6 4E75                       		rts	
000127B8                            ; ===========================================================================
000127B8                            
000127B8                            @loc_10624:
000127B8 5328 0028                  		subq.b	#1,obSubtype(a0)
000127BC 4228 0038                  		clr.b	$38(a0)
000127C0 45F8 FC00                  		lea	(v_objstate).w,a2
000127C4 7000                       		moveq	#0,d0
000127C6 1028 0023                  		move.b	obRespawnNo(a0),d0
000127CA 67CE                       		beq.s	@wtf
000127CC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000127D2 60C6                       		bra.s	@wtf
000127D4                            ; ===========================================================================
000127D4                            
000127D4                            @type08:
000127D4 323C 0010                  		move.w	#$10,d1
000127D8 7000                       		moveq	#0,d0
000127DA 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
000127DE E248                       		lsr.w	#1,d0
000127E0 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
000127E4 6000                       		bra.s	@square
000127E6                            ; ===========================================================================
000127E6                            
000127E6                            @type09:
000127E6 323C 0030                  		move.w	#$30,d1
000127EA 7000                       		moveq	#0,d0
000127EC 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
000127F0 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
000127F4 6000                       		bra.s	@square
000127F6                            ; ===========================================================================
000127F6                            
000127F6                            @type0A:
000127F6 323C 0050                  		move.w	#$50,d1
000127FA 7000                       		moveq	#0,d0
000127FC 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012800 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012804 6000                       		bra.s	@square
00012806                            ; ===========================================================================
00012806                            
00012806                            @type0B:
00012806 323C 0070                  		move.w	#$70,d1
0001280A 7000                       		moveq	#0,d0
0001280C 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012810 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012814                            
00012814                            @square:
00012814 4A43                       		tst.w	d3
00012816 6600                       		bne.s	@loc_1068E
00012818 5228 0022                  		addq.b	#1,obStatus(a0)
0001281C 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012822                            
00012822                            @loc_1068E:
00012822 1428 0022                  		move.b	obStatus(a0),d2
00012826 0202 0003                  		andi.b	#3,d2
0001282A 6600                       		bne.s	@loc_106AE
0001282C 9041                       		sub.w	d1,d0
0001282E D068 0034                  		add.w	fb_origX(a0),d0
00012832 3140 0008                  		move.w	d0,obX(a0)
00012836 4441                       		neg.w	d1
00012838 D268 0030                  		add.w	fb_origY(a0),d1
0001283C 3141 000C                  		move.w	d1,obY(a0)
00012840 4E75                       		rts	
00012842                            ; ===========================================================================
00012842                            
00012842                            @loc_106AE:
00012842 5302                       		subq.b	#1,d2
00012844 6600                       		bne.s	@loc_106CC
00012846 5341                       		subq.w	#1,d1
00012848 9041                       		sub.w	d1,d0
0001284A 4440                       		neg.w	d0
0001284C D068 0030                  		add.w	fb_origY(a0),d0
00012850 3140 000C                  		move.w	d0,obY(a0)
00012854 5241                       		addq.w	#1,d1
00012856 D268 0034                  		add.w	fb_origX(a0),d1
0001285A 3141 0008                  		move.w	d1,obX(a0)
0001285E 4E75                       		rts	
00012860                            ; ===========================================================================
00012860                            
00012860                            @loc_106CC:
00012860 5302                       		subq.b	#1,d2
00012862 6600                       		bne.s	@loc_106EA
00012864 5341                       		subq.w	#1,d1
00012866 9041                       		sub.w	d1,d0
00012868 4440                       		neg.w	d0
0001286A D068 0034                  		add.w	fb_origX(a0),d0
0001286E 3140 0008                  		move.w	d0,obX(a0)
00012872 5241                       		addq.w	#1,d1
00012874 D268 0030                  		add.w	fb_origY(a0),d1
00012878 3141 000C                  		move.w	d1,obY(a0)
0001287C 4E75                       		rts	
0001287E                            ; ===========================================================================
0001287E                            
0001287E                            @loc_106EA:
0001287E 9041                       		sub.w	d1,d0
00012880 D068 0030                  		add.w	fb_origY(a0),d0
00012884 3140 000C                  		move.w	d0,obY(a0)
00012888 4441                       		neg.w	d1
0001288A D268 0034                  		add.w	fb_origX(a0),d1
0001288E 3141 0008                  		move.w	d1,obX(a0)
00012892 4E75                       		rts	
00012892 4E75                       		rts	
00012894                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012894                            ; ---------------------------------------------------------------------------
00012894                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012894                            ; ---------------------------------------------------------------------------
00012894                            Map_FBlock_internal:
00012894 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012896 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012898 0000                       		dc.w @syz1x2-Map_FBlock_internal
0001289A 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
0001289C 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
0001289E 0000                       		dc.w @slz-Map_FBlock_internal
000128A0 0000                       		dc.w @lzvert-Map_FBlock_internal
000128A2 0000                       		dc.w @lzhoriz-Map_FBlock_internal
000128A4 01                         @syz1x1:	dc.b 1
000128A5 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
000128AA 04                         @syz2x2:	dc.b 4
000128AB E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
000128B0 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000128B5 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000128BA 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000128BF 02                         @syz1x2:	dc.b 2
000128C0 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
000128C5 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000128CA 04                         @syzrect2x2:	dc.b 4
000128CB E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
000128D0 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000128D5 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000128DA 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000128DF 03                         @syzrect1x3:	dc.b 3
000128E0 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
000128E5 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000128EA 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000128EF 01                         @slz:		dc.b 1
000128F0 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
000128F5 02                         @lzvert:	dc.b 2
000128F6 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
000128FB 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012900 04                         @lzhoriz:	dc.b 4
00012901 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012906 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001290B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012910 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012916 00                         		even
00012916 00                         		even
00012916                            
00012916                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012916                            ; ---------------------------------------------------------------------------
00012916                            ; Object 57 - spiked balls (SYZ, LZ)
00012916                            ; ---------------------------------------------------------------------------
00012916                            
00012916                            SpikeBall:
00012916 7000                       		moveq	#0,d0
00012918 1028 0024                  		move.b	obRoutine(a0),d0
0001291C 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012920 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012924                            ; ===========================================================================
00012924 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012926 0000                       		dc.w SBall_Move-SBall_Index
00012928 0000                       		dc.w SBall_Display-SBall_Index
0001292A                            
0001292A =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
0001292A                            		; $30-$37	; object RAM numbers of childs (1 byte each)
0001292A =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
0001292A =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
0001292A =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
0001292A =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
0001292A                            ; ===========================================================================
0001292A                            
0001292A                            SBall_Main:	; Routine 0
0001292A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001292E 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012936 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
0001293C 117C 0004 0001             		move.b	#4,obRender(a0)
00012942 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012948 117C 0008 0014             		move.b	#8,obActWid(a0)
0001294E 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012954 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
0001295A 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012960 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012966 6600                       		bne.s	@notlz
00012968                            
00012968 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
0001296E 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012974 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
0001297C                            
0001297C                            	@notlz:
0001297C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012980 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012984 4881                       		ext.w	d1
00012986 E741                       		asl.w	#3,d1		; multiply by 8
00012988 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
0001298C 1028 0022                  		move.b	obStatus(a0),d0
00012990 E418                       		ror.b	#2,d0
00012992 0200 00C0                  		andi.b	#$C0,d0
00012996 1140 0026                  		move.b	d0,obAngle(a0)
0001299A 45E8 0029                  		lea	sball_childs(a0),a2
0001299E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000129A2 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000129A6 14FC 0000                  		move.b	#0,(a2)+
000129AA 3601                       		move.w	d1,d3
000129AC E94B                       		lsl.w	#4,d3
000129AE 1143 003C                  		move.b	d3,sball_radius(a0)
000129B2 5341                       		subq.w	#1,d1		; set chain length (type-1)
000129B4 6500                       		bcs.s	@fail
000129B6 0828 0003 0028             		btst	#3,obSubtype(a0)
000129BC 6700                       		beq.s	@makechain
000129BE 5341                       		subq.w	#1,d1
000129C0 6500                       		bcs.s	@fail
000129C2                            
000129C2                            @makechain:
000129C2 6100 D1C2                  		bsr.w	FindFreeObj
000129C6 6600                       		bne.s	@fail
000129C8 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
000129CC 3A09                       		move.w	a1,d5		; get child object RAM address
000129CE 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
000129D2 EC4D                       		lsr.w	#6,d5		; divide by $40
000129D4 0245 007F                  		andi.w	#$7F,d5
000129D8 14C5                       		move.b	d5,(a2)+	; copy child RAM number
000129DA 137C 0004 0024             		move.b	#4,obRoutine(a1)
000129E0 1290                       		move.b	0(a0),0(a1)
000129E2 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000129E8 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000129EE 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000129F4 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
000129FA 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012A00 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012A06 0403 0010                  		subi.b	#$10,d3
00012A0A 1343 003C                  		move.b	d3,sball_radius(a1)
00012A0E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012A14 6600                       		bne.s	@notlzagain
00012A16                            
00012A16 4A03                       		tst.b	d3
00012A18 6600                       		bne.s	@notlzagain
00012A1A 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012A20                            
00012A20                            	@notlzagain:
00012A20 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012A24                            
00012A24                            	@fail:
00012A24 3A08                       		move.w	a0,d5
00012A26 0445 D000                  		subi.w	#$D000,d5
00012A2A EC4D                       		lsr.w	#6,d5
00012A2C 0245 007F                  		andi.w	#$7F,d5
00012A30 14C5                       		move.b	d5,(a2)+
00012A32 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012A38 6600                       		bne.s	SBall_Move
00012A3A                            
00012A3A 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012A40 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012A46                            
00012A46                            SBall_Move:	; Routine 2
00012A46 6100 0000                  		bsr.w	@movesub
00012A4A 6000 0000                  		bra.w	@chkdel
00012A4E                            ; ===========================================================================
00012A4E                            
00012A4E                            @movesub:
00012A4E 3028 003E                  		move.w	sball_speed(a0),d0
00012A52 D168 0026                  		add.w	d0,obAngle(a0)
00012A56 1028 0026                  		move.b	obAngle(a0),d0
00012A5A 4EB9 0000 37AE             		jsr	(CalcSine).l
00012A60 3428 0038                  		move.w	sball_origY(a0),d2
00012A64 3628 003A                  		move.w	sball_origX(a0),d3
00012A68 45E8 0029                  		lea	sball_childs(a0),a2
00012A6C 7C00                       		moveq	#0,d6
00012A6E 1C1A                       		move.b	(a2)+,d6
00012A70                            
00012A70                            	@loop:
00012A70 7800                       		moveq	#0,d4
00012A72 181A                       		move.b	(a2)+,d4
00012A74 ED4C                       		lsl.w	#6,d4
00012A76 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012A7C 2244                       		movea.l	d4,a1
00012A7E 7800                       		moveq	#0,d4
00012A80 1829 003C                  		move.b	sball_radius(a1),d4
00012A84 2A04                       		move.l	d4,d5
00012A86 C9C0                       		muls.w	d0,d4
00012A88 E084                       		asr.l	#8,d4
00012A8A CBC1                       		muls.w	d1,d5
00012A8C E085                       		asr.l	#8,d5
00012A8E D842                       		add.w	d2,d4
00012A90 DA43                       		add.w	d3,d5
00012A92 3344 000C                  		move.w	d4,obY(a1)
00012A96 3345 0008                  		move.w	d5,obX(a1)
00012A9A 51CE FFD4                  		dbf	d6,@loop
00012A9E 4E75                       		rts	
00012AA0                            ; ===========================================================================
00012AA0                            
00012AA0                            @chkdel:
00012ABE 6000 CC3A                  		bra.w	DisplaySprite
00012AC2                            ; ===========================================================================
00012AC2                            
00012AC2                            @delete:
00012AC2 7400                       		moveq	#0,d2
00012AC4 45E8 0029                  		lea	sball_childs(a0),a2
00012AC8 141A                       		move.b	(a2)+,d2
00012ACA                            
00012ACA                            	@deleteloop:
00012ACA 7000                       		moveq	#0,d0
00012ACC 101A                       		move.b	(a2)+,d0
00012ACE ED48                       		lsl.w	#6,d0
00012AD0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012AD6 2240                       		movea.l	d0,a1
00012AD8 6100 CC62                  		bsr.w	DeleteChild
00012ADC 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012AE0                            
00012AE0 4E75                       		rts	
00012AE2                            ; ===========================================================================
00012AE2                            
00012AE2                            SBall_Display:	; Routine 4
00012AE2 6000 CC16                  		bra.w	DisplaySprite
00012AE2 6000 CC16                  		bra.w	DisplaySprite
00012AE6                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012AE6                            ; ---------------------------------------------------------------------------
00012AE6                            ; Sprite mappings - chain of spiked balls (SYZ)
00012AE6                            ; ---------------------------------------------------------------------------
00012AE6                            Map_SBall_internal:
00012AE6 0000                       		dc.w @0-Map_SBall_internal
00012AE8 01                         @0:		dc.b 1
00012AE9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012AEE                            		even
00012AEE                            		even
00012AEE                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012AEE                            ; ---------------------------------------------------------------------------
00012AEE                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012AEE                            ; ---------------------------------------------------------------------------
00012AEE                            Map_SBall2_internal:
00012AEE 0000                       		dc.w @chain-Map_SBall2_internal
00012AF0 0000                       		dc.w @spikeball-Map_SBall2_internal
00012AF2 0000                       		dc.w @base-Map_SBall2_internal
00012AF4 01                         @chain:		dc.b 1
00012AF5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012AFA 01                         @spikeball:	dc.b 1
00012AFB F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012B00 01                         @base:		dc.b 1
00012B01 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012B06                            		even
00012B06                            		even
00012B06                            		include	"_incObj\58 Big Spiked Ball.asm"
00012B06                            ; ---------------------------------------------------------------------------
00012B06                            ; Object 58 - giant spiked balls (SYZ)
00012B06                            ; ---------------------------------------------------------------------------
00012B06                            
00012B06                            BigSpikeBall:
00012B06 7000                       		moveq	#0,d0
00012B08 1028 0024                  		move.b	obRoutine(a0),d0
00012B0C 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012B10 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012B14                            ; ===========================================================================
00012B14 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012B16 0000                       		dc.w BBall_Move-BBall_Index
00012B18                            
00012B18 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012B18 =00000038                  bball_origY:	equ $38		; original y-axis position
00012B18 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012B18 =0000003E                  bball_speed:	equ $3E		; speed
00012B18                            ; ===========================================================================
00012B18                            
00012B18                            BBall_Main:	; Routine 0
00012B18 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B1C 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012B24 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012B2A 117C 0004 0001             		move.b	#4,obRender(a0)
00012B30 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B36 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012B3C 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012B42 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012B48 117C 0086 0020             		move.b	#$86,obColType(a0)
00012B4E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012B52 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012B56 4881                       		ext.w	d1
00012B58 E741                       		asl.w	#3,d1		; multiply by 8
00012B5A 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012B5E 1028 0022                  		move.b	obStatus(a0),d0
00012B62 E418                       		ror.b	#2,d0
00012B64 0200 00C0                  		andi.b	#$C0,d0
00012B68 1140 0026                  		move.b	d0,obAngle(a0)
00012B6C 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012B72                            
00012B72                            BBall_Move:	; Routine 2
00012B72 7000                       		moveq	#0,d0
00012B74 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012B78 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012B7C D040                       		add.w	d0,d0
00012B7E 323B 0000                  		move.w	@index(pc,d0.w),d1
00012B82 4EBB 1000                  		jsr	@index(pc,d1.w)
00012BA4 6000 CB54                  		bra.w	DisplaySprite
00012BA8                            ; ===========================================================================
00012BA8 0000                       @index:		dc.w @type00-@index
00012BAA 0000                       		dc.w @type01-@index
00012BAC 0000                       		dc.w @type02-@index
00012BAE 0000                       		dc.w @type03-@index
00012BB0                            ; ===========================================================================
00012BB0                            
00012BB0                            @type00:
00012BB0 4E75                       		rts	
00012BB2                            ; ===========================================================================
00012BB2                            
00012BB2                            @type01:
00012BB2 323C 0060                  		move.w	#$60,d1
00012BB6 7000                       		moveq	#0,d0
00012BB8 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012BBC 0828 0000 0022             		btst	#0,obStatus(a0)
00012BC2 6700                       		beq.s	@noflip1
00012BC4 4440                       		neg.w	d0
00012BC6 D041                       		add.w	d1,d0
00012BC8                            
00012BC8                            	@noflip1:
00012BC8 3228 003A                  		move.w	bball_origX(a0),d1
00012BCC 9240                       		sub.w	d0,d1
00012BCE 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012BD2 4E75                       		rts	
00012BD4                            ; ===========================================================================
00012BD4                            
00012BD4                            @type02:
00012BD4 323C 0060                  		move.w	#$60,d1
00012BD8 7000                       		moveq	#0,d0
00012BDA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012BDE 0828 0000 0022             		btst	#0,obStatus(a0)
00012BE4 6700                       		beq.s	@noflip2
00012BE6 4440                       		neg.w	d0
00012BE8 0640 0080                  		addi.w	#$80,d0
00012BEC                            
00012BEC                            	@noflip2:
00012BEC 3228 0038                  		move.w	bball_origY(a0),d1
00012BF0 9240                       		sub.w	d0,d1
00012BF2 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012BF6 4E75                       		rts	
00012BF8                            ; ===========================================================================
00012BF8                            
00012BF8                            @type03:
00012BF8 3028 003E                  		move.w	bball_speed(a0),d0
00012BFC D168 0026                  		add.w	d0,obAngle(a0)
00012C00 1028 0026                  		move.b	obAngle(a0),d0
00012C04 4EB9 0000 37AE             		jsr	(CalcSine).l
00012C0A 3428 0038                  		move.w	bball_origY(a0),d2
00012C0E 3628 003A                  		move.w	bball_origX(a0),d3
00012C12 7800                       		moveq	#0,d4
00012C14 1828 003C                  		move.b	bball_radius(a0),d4
00012C18 2A04                       		move.l	d4,d5
00012C1A C9C0                       		muls.w	d0,d4
00012C1C E084                       		asr.l	#8,d4
00012C1E CBC1                       		muls.w	d1,d5
00012C20 E085                       		asr.l	#8,d5
00012C22 D842                       		add.w	d2,d4
00012C24 DA43                       		add.w	d3,d5
00012C26 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012C2A 3145 0008                  		move.w	d5,obX(a0)
00012C2E 4E75                       		rts	
00012C2E 4E75                       		rts	
00012C30                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012C30                            ; --------------------------------------------------------------------------------
00012C30                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012C30                            ; --------------------------------------------------------------------------------
00012C30                            
00012C30                            SME_u_DKx:	
00012C30 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012C34 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012C36 05                         SME_u_DKx_6:	dc.b 5	
00012C37 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012C3C F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012C41 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012C46 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012C4B 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012C50 01                         SME_u_DKx_20:	dc.b 1	
00012C51 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012C56 02                         SME_u_DKx_26:	dc.b 2	
00012C57 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012C5C E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012C62 00                         		even
00012C62 00                         		even
00012C62                            		include	"_incObj\59 SLZ Elevators.asm"
00012C62                            ; ---------------------------------------------------------------------------
00012C62                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012C62                            ; ---------------------------------------------------------------------------
00012C62                            
00012C62                            Elevator:
00012C62 7000                       		moveq	#0,d0
00012C64 1028 0024                  		move.b	obRoutine(a0),d0
00012C68 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012C6C 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012C8E 6000 CA6A                  		bra.w	DisplaySprite
00012C92                            ; ===========================================================================
00012C92 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012C94 0000                       		dc.w Elev_Platform-Elev_Index
00012C96 0000                       		dc.w Elev_Action-Elev_Index
00012C98 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012C9A                            
00012C9A =00000032                  elev_origX:	equ $32		; original x-axis position
00012C9A =00000030                  elev_origY:	equ $30		; original y-axis position
00012C9A =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012C9A                            
00012C9A 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012C9C                            
00012C9C 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012C9E 2001                       		dc.b $20, 1
00012CA0 3401                       		dc.b $34, 1
00012CA2 1003                       		dc.b $10, 3
00012CA4 2003                       		dc.b $20, 3
00012CA6 3403                       		dc.b $34, 3
00012CA8 1401                       		dc.b $14, 1
00012CAA 2401                       		dc.b $24, 1
00012CAC 2C01                       		dc.b $2C, 1
00012CAE 1403                       		dc.b $14, 3
00012CB0 2403                       		dc.b $24, 3
00012CB2 2C03                       		dc.b $2C, 3
00012CB4 2005                       		dc.b $20, 5
00012CB6 2007                       		dc.b $20, 7
00012CB8 3009                       		dc.b $30, 9
00012CBA                            ; ===========================================================================
00012CBA                            
00012CBA                            Elev_Main:	; Routine 0
00012CBA 5428 0024                  		addq.b	#2,obRoutine(a0)
00012CBE 7000                       		moveq	#0,d0
00012CC0 1028 0028                  		move.b	obSubtype(a0),d0
00012CC4 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012CC6 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012CCA 0240 007F                  		andi.w	#$7F,d0
00012CCE C0FC 0006                  		mulu.w	#6,d0
00012CD2 3140 003C                  		move.w	d0,elev_dist(a0)
00012CD6 3140 003E                  		move.w	d0,$3E(a0)
00012CDA 588F                       		addq.l	#4,sp
00012CDC 4E75                       		rts	
00012CDE                            ; ===========================================================================
00012CDE                            
00012CDE                            	@normal:
00012CDE E648                       		lsr.w	#3,d0
00012CE0 0240 001E                  		andi.w	#$1E,d0
00012CE4 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012CE8 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012CEC 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012CF0 7000                       		moveq	#0,d0
00012CF2 1028 0028                  		move.b	obSubtype(a0),d0
00012CF6 D040                       		add.w	d0,d0
00012CF8 0240 001E                  		andi.w	#$1E,d0
00012CFC 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012D00 101A                       		move.b	(a2)+,d0
00012D02 E548                       		lsl.w	#2,d0
00012D04 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012D08 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012D0C 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012D14 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012D1A 117C 0004 0001             		move.b	#4,obRender(a0)
00012D20 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D26 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012D2C 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012D32                            
00012D32                            Elev_Platform:	; Routine 2
00012D32 7200                       		moveq	#0,d1
00012D34 1228 0014                  		move.b	obActWid(a0),d1
00012D38 4EB9 0000 8E08             		jsr	(PlatformObject).l
00012D3E 6000 0000                  		bra.w	Elev_Types
00012D42                            ; ===========================================================================
00012D42                            
00012D42                            Elev_Action:	; Routine 4
00012D42 7200                       		moveq	#0,d1
00012D44 1228 0014                  		move.b	obActWid(a0),d1
00012D48 4EB9 0000 8F7C             		jsr	(ExitPlatform).l
00012D4E 3F28 0008                  		move.w	obX(a0),-(sp)
00012D52 6100 0000                  		bsr.w	Elev_Types
00012D56 341F                       		move.w	(sp)+,d2
00012D58 4A10                       		tst.b	0(a0)
00012D5A 6700                       		beq.s	@deleted
00012D5C 4EF9 0000 94E6             		jmp	(MvSonicOnPtfm2).l
00012D62                            
00012D62                            	@deleted:
00012D62 4E75                       		rts	
00012D64                            ; ===========================================================================
00012D64                            
00012D64                            Elev_Types:
00012D64 7000                       		moveq	#0,d0
00012D66 1028 0028                  		move.b	obSubtype(a0),d0
00012D6A 0240 000F                  		andi.w	#$F,d0
00012D6E D040                       		add.w	d0,d0
00012D70 323B 0000                  		move.w	@index(pc,d0.w),d1
00012D74 4EFB 1000                  		jmp	@index(pc,d1.w)
00012D78                            ; ===========================================================================
00012D78 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012D7C 0000 0000                  		dc.w @type02-@index, @type01-@index
00012D80 0000 0000                  		dc.w @type04-@index, @type01-@index
00012D84 0000 0000                  		dc.w @type06-@index, @type01-@index
00012D88 0000 0000                  		dc.w @type08-@index, @type09-@index
00012D8C                            ; ===========================================================================
00012D8C                            
00012D8C                            @type00:
00012D8C 4E75                       		rts	
00012D8E                            ; ===========================================================================
00012D8E                            
00012D8E                            @type01:
00012D8E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012D94 6600                       		bne.s	@notstanding
00012D96 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012D9A                            
00012D9A                            	@notstanding:
00012D9A 4E75                       		rts	
00012D9C                            ; ===========================================================================
00012D9C                            
00012D9C                            @type02:
00012D9C 6100 0000                  		bsr.w	Elev_Move
00012DA0 3028 0034                  		move.w	$34(a0),d0
00012DA4 4440                       		neg.w	d0
00012DA6 D068 0030                  		add.w	elev_origY(a0),d0
00012DAA 3140 000C                  		move.w	d0,obY(a0)
00012DAE 4E75                       		rts	
00012DB0                            ; ===========================================================================
00012DB0                            
00012DB0                            @type04:
00012DB0 6100 0000                  		bsr.w	Elev_Move
00012DB4 3028 0034                  		move.w	$34(a0),d0
00012DB8 D068 0030                  		add.w	elev_origY(a0),d0
00012DBC 3140 000C                  		move.w	d0,obY(a0)
00012DC0 4E75                       		rts	
00012DC2                            ; ===========================================================================
00012DC2                            
00012DC2                            @type06:
00012DC2 6100 0000                  		bsr.w	Elev_Move
00012DC6 3028 0034                  		move.w	$34(a0),d0
00012DCA E240                       		asr.w	#1,d0
00012DCC 4440                       		neg.w	d0
00012DCE D068 0030                  		add.w	elev_origY(a0),d0
00012DD2 3140 000C                  		move.w	d0,obY(a0)
00012DD6 3028 0034                  		move.w	$34(a0),d0
00012DDA D068 0032                  		add.w	elev_origX(a0),d0
00012DDE 3140 0008                  		move.w	d0,obX(a0)
00012DE2 4E75                       		rts	
00012DE4                            ; ===========================================================================
00012DE4                            
00012DE4                            @type08:
00012DE4 6100 0000                  		bsr.w	Elev_Move
00012DE8 3028 0034                  		move.w	$34(a0),d0
00012DEC E240                       		asr.w	#1,d0
00012DEE D068 0030                  		add.w	elev_origY(a0),d0
00012DF2 3140 000C                  		move.w	d0,obY(a0)
00012DF6 3028 0034                  		move.w	$34(a0),d0
00012DFA 4440                       		neg.w	d0
00012DFC D068 0032                  		add.w	elev_origX(a0),d0
00012E00 3140 0008                  		move.w	d0,obX(a0)
00012E04 4E75                       		rts	
00012E06                            ; ===========================================================================
00012E06                            
00012E06                            @type09:
00012E06 6100 0000                  		bsr.w	Elev_Move
00012E0A 3028 0034                  		move.w	$34(a0),d0
00012E0E 4440                       		neg.w	d0
00012E10 D068 0030                  		add.w	elev_origY(a0),d0
00012E14 3140 000C                  		move.w	d0,obY(a0)
00012E18 4A28 0028                  		tst.b	obSubtype(a0)
00012E1C 6700 0000                  		beq.w	@typereset
00012E20 4E75                       		rts	
00012E22                            ; ===========================================================================
00012E22                            
00012E22                            	@typereset:
00012E22 0828 0003 0022             		btst	#3,obStatus(a0)
00012E28 6700                       		beq.s	@delete
00012E2A 08E9 0001 0022             		bset	#1,obStatus(a1)
00012E30 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012E36 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012E3C                            
00012E3C                            	@delete:
00012E3C 6000 C8FC                  		bra.w	DeleteObject
00012E40                            
00012E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012E40                            
00012E40                            
00012E40                            Elev_Move:
00012E40 3028 0038                  		move.w	$38(a0),d0
00012E44 4A28 003A                  		tst.b	$3A(a0)
00012E48 6600                       		bne.s	loc_10CC8
00012E4A 0C40 0800                  		cmpi.w	#$800,d0
00012E4E 6400                       		bcc.s	loc_10CD0
00012E50 0640 0010                  		addi.w	#$10,d0
00012E54 6000                       		bra.s	loc_10CD0
00012E56                            ; ===========================================================================
00012E56                            
00012E56                            loc_10CC8:
00012E56 4A40                       		tst.w	d0
00012E58 6700                       		beq.s	loc_10CD0
00012E5A 0440 0010                  		subi.w	#$10,d0
00012E5E                            
00012E5E                            loc_10CD0:
00012E5E 3140 0038                  		move.w	d0,$38(a0)
00012E62 48C0                       		ext.l	d0
00012E64 E180                       		asl.l	#8,d0
00012E66 D0A8 0034                  		add.l	$34(a0),d0
00012E6A 2140 0034                  		move.l	d0,$34(a0)
00012E6E 4840                       		swap	d0
00012E70 3428 003C                  		move.w	elev_dist(a0),d2
00012E74 B042                       		cmp.w	d2,d0
00012E76 6300                       		bls.s	loc_10CF0
00012E78 117C 0001 003A             		move.b	#1,$3A(a0)
00012E7E                            
00012E7E                            loc_10CF0:
00012E7E D442                       		add.w	d2,d2
00012E80 B042                       		cmp.w	d2,d0
00012E82 6600                       		bne.s	locret_10CFA
00012E84 4228 0028                  		clr.b	obSubtype(a0)
00012E88                            
00012E88                            locret_10CFA:
00012E88 4E75                       		rts	
00012E8A                            ; End of function Elev_Move
00012E8A                            
00012E8A                            ; ===========================================================================
00012E8A                            
00012E8A                            Elev_MakeMulti:	; Routine 6
00012E8A 5368 003C                  		subq.w	#1,elev_dist(a0)
00012E8E 6600                       		bne.s	@chkdel
00012E90 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012E96 6100 CCEE                  		bsr.w	FindFreeObj
00012E9A 6600                       		bne.s	@chkdel
00012E9C 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012EA0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012EA6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012EAC 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012EB2                            
00012EB2                            @chkdel:
00012EB2 588F                       		addq.l	#4,sp
00012ED2 4E75                       		rts	
00012ED2 4E75                       		rts	
00012ED4                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012ED4                            ; ---------------------------------------------------------------------------
00012ED4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012ED4                            ; ---------------------------------------------------------------------------
00012ED4                            Map_Elev_internal:
00012ED4 0000                       		dc.w @elevator-Map_Elev_internal
00012ED6 03                         @elevator:	dc.b 3
00012ED7 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012EDC F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012EE1 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012EE6                            		even
00012EE6                            		even
00012EE6                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012EE6                            ; ---------------------------------------------------------------------------
00012EE6                            ; Object 5A - platforms	moving in circles (SLZ)
00012EE6                            ; ---------------------------------------------------------------------------
00012EE6                            
00012EE6                            CirclingPlatform:
00012EE6 7000                       		moveq	#0,d0
00012EE8 1028 0024                  		move.b	obRoutine(a0),d0
00012EEC 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012EF0 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012F12 6000 C7E6                  		bra.w	DisplaySprite
00012F16                            ; ===========================================================================
00012F16 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012F18 0000                       		dc.w Circ_Platform-Circ_Index
00012F1A 0000                       		dc.w Circ_Action-Circ_Index
00012F1C                            
00012F1C =00000032                  circ_origX:	equ $32		; original x-axis position
00012F1C =00000030                  circ_origY:	equ $30		; original y-axis position
00012F1C                            ; ===========================================================================
00012F1C                            
00012F1C                            Circ_Main:	; Routine 0
00012F1C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F20 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012F28 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F2E 117C 0004 0001             		move.b	#4,obRender(a0)
00012F34 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012F3A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012F40 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012F46 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012F4C                            
00012F4C                            Circ_Platform:	; Routine 2
00012F4C 7200                       		moveq	#0,d1
00012F4E 1228 0014                  		move.b	obActWid(a0),d1
00012F52 4EB9 0000 8E08             		jsr	(PlatformObject).l
00012F58 6000 0000                  		bra.w	Circ_Types
00012F5C                            ; ===========================================================================
00012F5C                            
00012F5C                            Circ_Action:	; Routine 4
00012F5C 7200                       		moveq	#0,d1
00012F5E 1228 0014                  		move.b	obActWid(a0),d1
00012F62 4EB9 0000 8F7C             		jsr	(ExitPlatform).l
00012F68 3F28 0008                  		move.w	obX(a0),-(sp)
00012F6C 6100 0000                  		bsr.w	Circ_Types
00012F70 341F                       		move.w	(sp)+,d2
00012F72 4EF9 0000 94E6             		jmp	(MvSonicOnPtfm2).l
00012F78                            ; ===========================================================================
00012F78                            
00012F78                            Circ_Types:
00012F78 7000                       		moveq	#0,d0
00012F7A 1028 0028                  		move.b	obSubtype(a0),d0
00012F7E 0240 000C                  		andi.w	#$C,d0
00012F82 E248                       		lsr.w	#1,d0
00012F84 323B 0000                  		move.w	@index(pc,d0.w),d1
00012F88 4EFB 1000                  		jmp	@index(pc,d1.w)
00012F8C                            ; ===========================================================================
00012F8C 0000                       @index:		dc.w @type00-@index
00012F8E 0000                       		dc.w @type04-@index
00012F90                            ; ===========================================================================
00012F90                            
00012F90                            @type00:
00012F90 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012F94 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00012F98 4881                       		ext.w	d1
00012F9A 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012F9E 0402 0050                  		subi.b	#$50,d2
00012FA2 4882                       		ext.w	d2
00012FA4 0828 0000 0028             		btst	#0,obSubtype(a0)
00012FAA 6700                       		beq.s	@noshift00a
00012FAC 4441                       		neg.w	d1
00012FAE 4442                       		neg.w	d2
00012FB0                            
00012FB0                            	@noshift00a:
00012FB0 0828 0001 0028             		btst	#1,obSubtype(a0)
00012FB6 6700                       		beq.s	@noshift00b
00012FB8 4441                       		neg.w	d1
00012FBA C342                       		exg	d1,d2
00012FBC                            
00012FBC                            	@noshift00b:
00012FBC D268 0032                  		add.w	circ_origX(a0),d1
00012FC0 3141 0008                  		move.w	d1,obX(a0)
00012FC4 D468 0030                  		add.w	circ_origY(a0),d2
00012FC8 3142 000C                  		move.w	d2,obY(a0)
00012FCC 4E75                       		rts	
00012FCE                            ; ===========================================================================
00012FCE                            
00012FCE                            @type04:
00012FCE 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00012FD2 0401 0050                  		subi.b	#$50,d1
00012FD6 4881                       		ext.w	d1
00012FD8 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012FDC 0402 0050                  		subi.b	#$50,d2
00012FE0 4882                       		ext.w	d2
00012FE2 0828 0000 0028             		btst	#0,obSubtype(a0)
00012FE8 6700                       		beq.s	@noshift04a
00012FEA 4441                       		neg.w	d1
00012FEC 4442                       		neg.w	d2
00012FEE                            
00012FEE                            	@noshift04a:
00012FEE 0828 0001 0028             		btst	#1,obSubtype(a0)
00012FF4 6700                       		beq.s	@noshift04b
00012FF6 4441                       		neg.w	d1
00012FF8 C342                       		exg	d1,d2
00012FFA                            
00012FFA                            	@noshift04b:
00012FFA 4441                       		neg.w	d1
00012FFC D268 0032                  		add.w	circ_origX(a0),d1
00013000 3141 0008                  		move.w	d1,obX(a0)
00013004 D468 0030                  		add.w	circ_origY(a0),d2
00013008 3142 000C                  		move.w	d2,obY(a0)
0001300C 4E75                       		rts	
0001300C 4E75                       		rts	
0001300E                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001300E                            ; ---------------------------------------------------------------------------
0001300E                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001300E                            ; ---------------------------------------------------------------------------
0001300E                            Map_Circ_internal:
0001300E 0000                       		dc.w @platform-Map_Circ_internal
00013010 02                         @platform:	dc.b 2
00013011 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013016 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001301C 00                         		even
0001301C 00                         		even
0001301C                            		include	"_incObj\5B Staircase.asm"
0001301C                            ; ---------------------------------------------------------------------------
0001301C                            ; Object 5B - blocks that form a staircase (SLZ)
0001301C                            ; ---------------------------------------------------------------------------
0001301C                            
0001301C                            Staircase:
0001301C 7000                       		moveq	#0,d0
0001301E 1028 0024                  		move.b	obRoutine(a0),d0
00013022 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013026 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00013048 6000 C6B0                  		bra.w	DisplaySprite
0001304C                            ; ===========================================================================
0001304C 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
0001304E 0000                       		dc.w Stair_Move-Stair_Index
00013050 0000                       		dc.w Stair_Solid-Stair_Index
00013052                            
00013052 =00000030                  stair_origX:	equ $30		; original x-axis position
00013052 =00000032                  stair_origY:	equ $32		; original y-axis position
00013052                            
00013052 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00013052                            ; ===========================================================================
00013052                            
00013052                            Stair_Main:	; Routine 0
00013052 5428 0024                  		addq.b	#2,obRoutine(a0)
00013056 7638                       		moveq	#$38,d3
00013058 7801                       		moveq	#1,d4
0001305A 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
00013060 6700                       		beq.s	@notflipped	; if not, branch
00013062 763B                       		moveq	#$3B,d3
00013064 78FF                       		moveq	#-1,d4
00013066                            
00013066                            	@notflipped:
00013066 3428 0008                  		move.w	obX(a0),d2
0001306A 2248                       		movea.l	a0,a1
0001306C 7203                       		moveq	#3,d1
0001306E 6000                       		bra.s	@makeblocks
00013070                            ; ===========================================================================
00013070                            
00013070                            @loop:
00013070 6100 CB2A                  		bsr.w	FindNextFreeObj
00013074 6600 0000                  		bne.w	@fail
00013078 137C 0004 0024             		move.b	#4,obRoutine(a1)
0001307E                            
0001307E                            @makeblocks:
0001307E 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013082 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
0001308A 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00013090 137C 0004 0001             		move.b	#4,obRender(a1)
00013096 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001309C 137C 0010 0014             		move.b	#$10,obActWid(a1)
000130A2 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000130A8 3342 0008                  		move.w	d2,obX(a1)
000130AC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000130B2 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
000130B8 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
000130BE 0642 0020                  		addi.w	#$20,d2
000130C2 1343 0037                  		move.b	d3,$37(a1)
000130C6 2348 003C                  		move.l	a0,stair_parent(a1)
000130CA D604                       		add.b	d4,d3
000130CC 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
000130D0                            
000130D0                            	@fail:
000130D0                            
000130D0                            Stair_Move:	; Routine 2
000130D0 7000                       		moveq	#0,d0
000130D2 1028 0028                  		move.b	obSubtype(a0),d0
000130D6 0240 0007                  		andi.w	#7,d0
000130DA D040                       		add.w	d0,d0
000130DC 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
000130E0 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
000130E4                            
000130E4                            Stair_Solid:	; Routine 4
000130E4 2468 003C                  		movea.l	stair_parent(a0),a2
000130E8 7000                       		moveq	#0,d0
000130EA 1028 0037                  		move.b	$37(a0),d0
000130EE 1032 0000                  		move.b	(a2,d0.w),d0
000130F2 D068 0032                  		add.w	stair_origY(a0),d0
000130F6 3140 000C                  		move.w	d0,obY(a0)
000130FA 7200                       		moveq	#0,d1
000130FC 1228 0014                  		move.b	obActWid(a0),d1
00013100 0641 000B                  		addi.w	#$B,d1
00013104 343C 0010                  		move.w	#$10,d2
00013108 363C 0011                  		move.w	#$11,d3
0001310C 3828 0008                  		move.w	obX(a0),d4
00013110 6100 E9F6                  		bsr.w	SolidObject
00013114 4A04                       		tst.b	d4
00013116 6A00                       		bpl.s	loc_10F92
00013118 1544 0036                  		move.b	d4,$36(a2)
0001311C                            
0001311C                            loc_10F92:
0001311C 0828 0003 0022             		btst	#3,obStatus(a0)
00013122 6700                       		beq.s	locret_10FA0
00013124 157C 0001 0036             		move.b	#1,$36(a2)
0001312A                            
0001312A                            locret_10FA0:
0001312A 4E75                       		rts	
0001312C                            ; ===========================================================================
0001312C 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
0001312E 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013130 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00013132 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013134                            ; ===========================================================================
00013134                            
00013134                            Stair_Type00:
00013134 4A68 0034                  		tst.w	$34(a0)
00013138 6600                       		bne.s	loc_10FC0
0001313A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00013140 6600                       		bne.s	locret_10FBE
00013142 317C 001E 0034             		move.w	#$1E,$34(a0)
00013148                            
00013148                            locret_10FBE:
00013148 4E75                       		rts	
0001314A                            ; ===========================================================================
0001314A                            
0001314A                            loc_10FC0:
0001314A 5368 0034                  		subq.w	#1,$34(a0)
0001314E 66F8                       		bne.s	locret_10FBE
00013150 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013154 4E75                       		rts	
00013156                            ; ===========================================================================
00013156                            
00013156                            Stair_Type02:
00013156 4A68 0034                  		tst.w	$34(a0)
0001315A 6600                       		bne.s	loc_10FE0
0001315C 4A28 0036                  		tst.b	$36(a0)
00013160 6A00                       		bpl.s	locret_10FDE
00013162 317C 003C 0034             		move.w	#$3C,$34(a0)
00013168                            
00013168                            locret_10FDE:
00013168 4E75                       		rts	
0001316A                            ; ===========================================================================
0001316A                            
0001316A                            loc_10FE0:
0001316A 5368 0034                  		subq.w	#1,$34(a0)
0001316E 6600                       		bne.s	loc_10FEC
00013170 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013174 4E75                       		rts	
00013176                            ; ===========================================================================
00013176                            
00013176                            loc_10FEC:
00013176 43E8 0038                  		lea	$38(a0),a1
0001317A 3028 0034                  		move.w	$34(a0),d0
0001317E E408                       		lsr.b	#2,d0
00013180 0200 0001                  		andi.b	#1,d0
00013184 12C0                       		move.b	d0,(a1)+
00013186 0A00 0001                  		eori.b	#1,d0
0001318A 12C0                       		move.b	d0,(a1)+
0001318C 0A00 0001                  		eori.b	#1,d0
00013190 12C0                       		move.b	d0,(a1)+
00013192 0A00 0001                  		eori.b	#1,d0
00013196 12C0                       		move.b	d0,(a1)+
00013198 4E75                       		rts	
0001319A                            ; ===========================================================================
0001319A                            
0001319A                            Stair_Type01:
0001319A 43E8 0038                  		lea	$38(a0),a1
0001319E 0C11 0080                  		cmpi.b	#$80,(a1)
000131A2 6700                       		beq.s	locret_11038
000131A4 5211                       		addq.b	#1,(a1)
000131A6 7200                       		moveq	#0,d1
000131A8 1219                       		move.b	(a1)+,d1
000131AA 4841                       		swap	d1
000131AC E289                       		lsr.l	#1,d1
000131AE 2401                       		move.l	d1,d2
000131B0 E289                       		lsr.l	#1,d1
000131B2 2601                       		move.l	d1,d3
000131B4 D682                       		add.l	d2,d3
000131B6 4841                       		swap	d1
000131B8 4842                       		swap	d2
000131BA 4843                       		swap	d3
000131BC 12C3                       		move.b	d3,(a1)+
000131BE 12C2                       		move.b	d2,(a1)+
000131C0 12C1                       		move.b	d1,(a1)+
000131C2                            
000131C2                            locret_11038:
000131C2 4E75                       		rts	
000131C4 4E75                       		rts	
000131C4 4E75                       		rts	
000131C6                            Map_Stair:	include	"_maps\Staircase.asm"
000131C6                            ; ---------------------------------------------------------------------------
000131C6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000131C6                            ; ---------------------------------------------------------------------------
000131C6                            Map_Stair_internal:
000131C6 0000                       		dc.w @block-Map_Stair_internal
000131C8 01                         @block:		dc.b 1
000131C9 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000131CE                            		even
000131CE                            		even
000131CE                            		include	"_incObj\5C Pylon.asm"
000131CE                            ; ---------------------------------------------------------------------------
000131CE                            ; Object 5C - metal pylons in foreground (SLZ)
000131CE                            ; ---------------------------------------------------------------------------
000131CE                            
000131CE                            Pylon:
000131CE 7000                       		moveq	#0,d0
000131D0 1028 0024                  		move.b	obRoutine(a0),d0
000131D4 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
000131D8 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
000131DC                            ; ===========================================================================
000131DC 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
000131DE 0000                       		dc.w Pyl_Display-Pyl_Index
000131E0                            ; ===========================================================================
000131E0                            
000131E0                            Pyl_Main:	; Routine 0
000131E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000131E4 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
000131EC 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
000131F2 117C 0010 0014             		move.b	#$10,obActWid(a0)
000131F8                            
000131F8                            Pyl_Display:	; Routine 2
000131F8 2238 F700                  		move.l	(v_screenposx).w,d1
000131FC D281                       		add.l	d1,d1
000131FE 4841                       		swap	d1
00013200 4441                       		neg.w	d1
00013202 3141 0008                  		move.w	d1,obX(a0)
00013206 2238 F704                  		move.l	(v_screenposy).w,d1
0001320A D281                       		add.l	d1,d1
0001320C 4841                       		swap	d1
0001320E 0241 003F                  		andi.w	#$3F,d1
00013212 4441                       		neg.w	d1
00013214 0641 0100                  		addi.w	#$100,d1
00013218 3141 000A                  		move.w	d1,obScreenY(a0)
0001321C 6000 C4DC                  		bra.w	DisplaySprite
0001321C 6000 C4DC                  		bra.w	DisplaySprite
00013220                            Map_Pylon:	include	"_maps\Pylon.asm"
00013220                            ; ---------------------------------------------------------------------------
00013220                            ; Sprite mappings - metal pylons in foreground (SLZ)
00013220                            ; ---------------------------------------------------------------------------
00013220                            Map_Pylon_internal:
00013220 0000                       		dc.w @pylon-Map_Pylon_internal
00013222 09                         @pylon:		dc.b 9
00013223 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013228 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001322D C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00013232 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013237 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001323C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00013241 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00013246 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001324B 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00013250                            		even
00013250                            		even
00013250                            
00013250                            		include	"_incObj\1B Water Surface.asm"
00013250                            ; ---------------------------------------------------------------------------
00013250                            ; Object 1B - water surface (LZ)
00013250                            ; ---------------------------------------------------------------------------
00013250                            
00013250                            WaterSurface:
00013250 7000                       		moveq	#0,d0
00013252 1028 0024                  		move.b	obRoutine(a0),d0
00013256 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
0001325A 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
0001325E                            ; ===========================================================================
0001325E 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
00013260 0000                       		dc.w Surf_Action-Surf_Index
00013262                            
00013262 =00000030                  surf_origX:	equ $30		; original x-axis position
00013262 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
00013262                            ; ===========================================================================
00013262                            
00013262                            Surf_Main:	; Routine 0
00013262 5428 0024                  		addq.b	#2,obRoutine(a0)
00013266 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
0001326E 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013274 117C 0004 0001             		move.b	#4,obRender(a0)
0001327A 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013280 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013286                            
00013286                            Surf_Action:	; Routine 2
00013286 3238 F700                  		move.w	(v_screenposx).w,d1
0001328A 0241 FFE0                  		andi.w	#$FFE0,d1
0001328E D268 0030                  		add.w	surf_origX(a0),d1
00013292 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013298 6700                       		beq.s	@even		; branch on even frames
0001329A 0641 0020                  		addi.w	#$20,d1
0001329E                            
0001329E                            	@even:
0001329E 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000132A2 3238 F646                  		move.w	(v_waterpos1).w,d1
000132A6 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
000132AA 4A28 0032                  		tst.b	surf_freeze(a0)
000132AE 6600                       		bne.s	@stopped
000132B0 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000132B6 6700                       		beq.s	@animate	; if not, branch
000132B8 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
000132BC 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
000132C2 6000                       		bra.s	@display
000132C4                            ; ===========================================================================
000132C4                            
000132C4                            @stopped:
000132C4 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
000132C8 6600                       		bne.s	@display	; if yes, branch
000132CA 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
000132D0 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
000132D4                            
000132D4                            @animate:
000132D4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000132D8 6A00                       		bpl.s	@display
000132DA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000132E0 5228 001A                  		addq.b	#1,obFrame(a0)
000132E4 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
000132EA 6500                       		bcs.s	@display
000132EC 117C 0000 001A             		move.b	#0,obFrame(a0)
000132F2                            
000132F2                            @display:
000132F2 6000 C406                  		bra.w	DisplaySprite
000132F2 6000 C406                  		bra.w	DisplaySprite
000132F6                            Map_Surf:	include	"_maps\Water Surface.asm"
000132F6                            ; --------------------------------------------------------------------------------
000132F6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000132F6                            ; --------------------------------------------------------------------------------
000132F6                            
000132F6                            SME_LGSi8:	
000132F6 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
000132FA 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
000132FE 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013302 03                         SME_LGSi8_C:	dc.b 3	
00013303 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013308 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001330D F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013312 03                         SME_LGSi8_1C:	dc.b 3	
00013313 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013318 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001331D F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013322 03                         SME_LGSi8_2C:	dc.b 3	
00013323 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013328 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001332D F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013332 06                         SME_LGSi8_3C:	dc.b 6	
00013333 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013338 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
0001333D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013342 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00013347 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001334C F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
00013351 06                         SME_LGSi8_5B:	dc.b 6	
00013352 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013357 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
0001335C F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013361 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
00013366 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001336B F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
00013370 06                         SME_LGSi8_7A:	dc.b 6	
00013371 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013376 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
0001337B F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013380 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013385 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001338A F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013390 00                         		even
00013390 00                         		even
00013390                            		include	"_incObj\0B Pole that Breaks.asm"
00013390                            ; ---------------------------------------------------------------------------
00013390                            ; Object 0B - pole that	breaks (LZ)
00013390                            ; ---------------------------------------------------------------------------
00013390                            
00013390                            Pole:
00013390 7000                       		moveq	#0,d0
00013392 1028 0024                  		move.b	obRoutine(a0),d0
00013396 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001339A 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
0001339E                            ; ===========================================================================
0001339E 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
000133A0 0000                       		dc.w Pole_Action-Pole_Index
000133A2 0000                       		dc.w Pole_Display-Pole_Index
000133A4                            
000133A4 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000133A4 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000133A4                            ; ===========================================================================
000133A4                            
000133A4                            Pole_Main:	; Routine 0
000133A4 5428 0024                  		addq.b	#2,obRoutine(a0)
000133A8 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
000133B0 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
000133B6 117C 0004 0001             		move.b	#4,obRender(a0)
000133BC 117C 0008 0014             		move.b	#8,obActWid(a0)
000133C2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000133C8 117C 00E1 0020             		move.b	#$E1,obColType(a0)
000133CE 7000                       		moveq	#0,d0
000133D0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000133D4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000133D8 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
000133DC                            
000133DC                            Pole_Action:	; Routine 2
000133DC 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
000133E0 6700                       		beq.s	@grab		; if not, branch
000133E2 4A68 0030                  		tst.w	pole_time(a0)
000133E6 6700                       		beq.s	@moveup
000133E8 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
000133EC 6600                       		bne.s	@moveup
000133EE 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
000133F4 6000                       		bra.s	@release
000133F6                            ; ===========================================================================
000133F6                            
000133F6                            @moveup:
000133F6 43F8 D000                  		lea	(v_player).w,a1
000133FA 3028 000C                  		move.w	obY(a0),d0
000133FE 0440 0018                  		subi.w	#$18,d0
00013402 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013408 6700                       		beq.s	@movedown	; if not, branch
0001340A 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001340E B069 000C                  		cmp.w	obY(a1),d0
00013412 6500                       		bcs.s	@movedown
00013414 3340 000C                  		move.w	d0,obY(a1)
00013418                            
00013418                            @movedown:
00013418 0640 0024                  		addi.w	#$24,d0
0001341C 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
00013422 6700                       		beq.s	@letgo		; if not, branch
00013424 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013428 B069 000C                  		cmp.w	obY(a1),d0
0001342C 6400                       		bcc.s	@letgo
0001342E 3340 000C                  		move.w	d0,obY(a1)
00013432                            
00013432                            @letgo:
00013432 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013436 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
0001343A 6700                       		beq.s	Pole_Display	; if not, branch
0001343C                            
0001343C                            @release:
0001343C 4228 0020                  		clr.b	obColType(a0)
00013440 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
00013444 4238 F7C8                  		clr.b	(f_lockmulti).w
00013448 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001344C 4228 0032                  		clr.b	pole_grabbed(a0)
00013450 6000                       		bra.s	Pole_Display
00013452                            ; ===========================================================================
00013452                            
00013452                            @grab:
00013452 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
00013456 6700                       		beq.s	Pole_Display	; if not, branch
00013458 43F8 D000                  		lea	(v_player).w,a1
0001345C 3028 0008                  		move.w	obX(a0),d0
00013460 0640 0014                  		addi.w	#$14,d0
00013464 B069 0008                  		cmp.w	obX(a1),d0
00013468 6400                       		bcc.s	Pole_Display
0001346A 4228 0021                  		clr.b	obColProp(a0)
0001346E 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013474 6400                       		bcc.s	Pole_Display
00013476 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
0001347A 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
0001347E 3028 0008                  		move.w	obX(a0),d0
00013482 0640 0014                  		addi.w	#$14,d0
00013486 3340 0008                  		move.w	d0,obX(a1)
0001348A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013490 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013496 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001349C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000134A2 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
000134A8                            
000134A8                            Pole_Display:	; Routine 4
000134A8 6000 E1C6                  		bra.w	RememberState
000134A8 6000 E1C6                  		bra.w	RememberState
000134AC                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
000134AC                            ; ---------------------------------------------------------------------------
000134AC                            ; Sprite mappings - pole that breaks (LZ)
000134AC                            ; ---------------------------------------------------------------------------
000134AC                            Map_Pole_internal:
000134AC 0000                       		dc.w @normal-Map_Pole_internal
000134AE 0000                       		dc.w @broken-Map_Pole_internal
000134B0 02                         @normal:	dc.b 2			; normal pole
000134B1 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000134B6 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000134BB 04                         @broken:	dc.b 4			; broken pole
000134BC E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000134C1 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000134C6 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000134CB 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000134D0                            		even
000134D0                            		even
000134D0                            		include	"_incObj\0C Flapping Door.asm"
000134D0                            ; ---------------------------------------------------------------------------
000134D0                            ; Object 0C - flapping door (LZ)
000134D0                            ; ---------------------------------------------------------------------------
000134D0                            
000134D0                            FlapDoor:
000134D0 7000                       		moveq	#0,d0
000134D2 1028 0024                  		move.b	obRoutine(a0),d0
000134D6 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
000134DA 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
000134DE                            ; ===========================================================================
000134DE 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
000134E0 0000                       		dc.w Flap_OpenClose-Flap_Index
000134E2                            
000134E2 =00000032                  flap_time:	equ $32		; time between opening/closing
000134E2 =00000030                  flap_wait:	equ $30		; time until change
000134E2                            ; ===========================================================================
000134E2                            
000134E2                            Flap_Main:	; Routine 0
000134E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000134E6 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
000134EE 317C 4328 0002             		move.w	#$4328,obGfx(a0)
000134F4 0028 0004 0001             		ori.b	#4,obRender(a0)
000134FA 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013500 7000                       		moveq	#0,d0
00013502 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013506 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001350A 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001350E                            
0001350E                            Flap_OpenClose:	; Routine 2
0001350E 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013512 6A00                       		bpl.s	@wait		; if time remains, branch
00013514 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
0001351A 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
00013520 4A28 0001                  		tst.b	obRender(a0)
00013524 6A00                       		bpl.s	@nosound
00013530                            
00013530                            	@wait:
00013530                            	@nosound:
00013530 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013536 6100 926E                  		bsr.w	AnimateSprite
0001353A 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
0001353E 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
00013542 6600                       		bne.s	@display	; if yes, branch
00013544 3038 D008                  		move.w	(v_player+obX).w,d0
00013548 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
0001354C 6400                       		bcc.s	@display	; if yes, branch
0001354E 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013554 323C 0013                  		move.w	#$13,d1
00013558 343C 0020                  		move.w	#$20,d2
0001355C 3602                       		move.w	d2,d3
0001355E 5243                       		addq.w	#1,d3
00013560 3828 0008                  		move.w	obX(a0),d4
00013564 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
00013568                            
00013568                            	@display:
00013568 6000 E106                  		bra.w	RememberState
00013568 6000 E106                  		bra.w	RememberState
0001356C                            		include	"_anim\Flapping Door.asm"
0001356C                            ; ---------------------------------------------------------------------------
0001356C                            ; Animation script - flapping door (LZ)
0001356C                            ; ---------------------------------------------------------------------------
0001356C 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
0001356E 0000                       		dc.w @closing-Ani_Flap
00013570 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013576 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
0001357C                            		even
0001357C                            		even
0001357C                            Map_Flap:	include	"_maps\Flapping Door.asm"
0001357C                            ; ---------------------------------------------------------------------------
0001357C                            ; Sprite mappings - flapping door (LZ)
0001357C                            ; ---------------------------------------------------------------------------
0001357C                            Map_Flap_internal:
0001357C 0000                       		dc.w @closed-Map_Flap_internal
0001357E 0000                       		dc.w @halfway-Map_Flap_internal
00013580 0000                       		dc.w @open-Map_Flap_internal
00013582 02                         @closed:	dc.b 2
00013583 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013588 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001358D 02                         @halfway:	dc.b 2
0001358E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013593 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013598 02                         @open:		dc.b 2
00013599 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001359E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000135A4 00                         		even
000135A4 00                         		even
000135A4                            
000135A4                            		include	"_incObj\71 Invisible Barriers.asm"
000135A4                            ; ---------------------------------------------------------------------------
000135A4                            ; Object 71 - invisible	solid barriers
000135A4                            ; ---------------------------------------------------------------------------
000135A4                            
000135A4                            Invisibarrier:
000135A4 7000                       		moveq	#0,d0
000135A6 1028 0024                  		move.b	obRoutine(a0),d0
000135AA 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
000135AE 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
000135B2                            ; ===========================================================================
000135B2 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
000135B4 0000                       		dc.w Invis_Solid-Invis_Index
000135B6                            
000135B6 =00000016                  invis_height:	equ $16		; height in pixels
000135B6                            ; ===========================================================================
000135B6                            
000135B6                            Invis_Main:	; Routine 0
000135B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000135BA 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
000135C2 317C 8680 0002             		move.w	#$8680,obGfx(a0)
000135C8 0028 0004 0001             		ori.b	#4,obRender(a0)
000135CE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000135D2 1200                       		move.b	d0,d1
000135D4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000135D8 0640 0010                  		addi.w	#$10,d0
000135DC E248                       		lsr.w	#1,d0
000135DE 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
000135E2 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000135E6 5241                       		addq.w	#1,d1
000135E8 E749                       		lsl.w	#3,d1
000135EA 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
000135EE                            
000135EE                            Invis_Solid:	; Routine 2
000135EE 6100 C38A                  		bsr.w	ChkObjectVisible
000135F2 6600                       		bne.s	@chkdel
000135F4 7200                       		moveq	#0,d1
000135F6 1228 0014                  		move.b	obActWid(a0),d1
000135FA 0641 000B                  		addi.w	#$B,d1
000135FE 7400                       		moveq	#0,d2
00013600 1428 0016                  		move.b	invis_height(a0),d2
00013604 3602                       		move.w	d2,d3
00013606 5243                       		addq.w	#1,d3
00013608 3828 0008                  		move.w	obX(a0),d4
0001360C 6100 E542                  		bsr.w	SolidObject71
00013610                            
00013610                            @chkdel:
0001362C 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
00013630 6700                       		beq.s	@nodisplay	; if not, branch
00013632 4EF9 0000 F6FA             		jmp	(DisplaySprite).l	; if yes, display the object
00013638                            
00013638                            	@nodisplay:
00013638 4E75                       		rts	
0001363A                            
0001363A                            	@delete:
0001363A 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001363A 4EF9 0000 F73A             		jmp	(DeleteObject).l
00013640                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
00013640                            ; --------------------------------------------------------------------------------
00013640                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013640                            ; --------------------------------------------------------------------------------
00013640                            
00013640                            SME_t60cE:	
00013640 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
00013644 0000                       		dc.w SME_t60cE_30-SME_t60cE	
00013646 04                         SME_t60cE_6:	dc.b 4	
00013647 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
0001364C 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
00013651 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
00013656 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
0001365B 04                         SME_t60cE_1B:	dc.b 4	
0001365C E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
00013661 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
00013666 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
0001366B 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
00013670 04                         SME_t60cE_30:	dc.b 4	
00013671 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013676 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
0001367B 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013680 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013686 00                         		even
00013686 00                         		even
00013686                            
00013686                            		include	"_incObj\5D Fan.asm"
00013686                            ; ---------------------------------------------------------------------------
00013686                            ; Object 5D - fans (SLZ)
00013686                            ; ---------------------------------------------------------------------------
00013686                            
00013686                            Fan:
00013686 7000                       		moveq	#0,d0
00013688 1028 0024                  		move.b	obRoutine(a0),d0
0001368C 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013690 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013694                            ; ===========================================================================
00013694 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013696 0000                       		dc.w Fan_Delay-Fan_Index
00013698                            
00013698 =00000030                  fan_time:	equ $30		; time between switching on/off
00013698 =00000032                  fan_switch:	equ $32		; on/off switch
00013698                            ; ===========================================================================
00013698                            
00013698                            Fan_Main:	; Routine 0
00013698 5428 0024                  		addq.b	#2,obRoutine(a0)
0001369C 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000136A4 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
000136AA 0028 0004 0001             		ori.b	#4,obRender(a0)
000136B0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000136B6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000136BC                            
000136BC                            Fan_Delay:	; Routine 2
000136BC 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
000136C2 6600                       		bne.s	@blow		; if yes, branch
000136C4 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
000136C8 6A00                       		bpl.s	@blow		; if time remains, branch
000136CA 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
000136D0 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
000136D6 6700                       		beq.s	@blow		; if fan is off, branch
000136D8 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
000136DE                            
000136DE                            @blow:
000136DE 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
000136E2 6600 0000                  		bne.w	@chkdel		; if not, branch
000136E6 43F8 D000                  		lea	(v_player).w,a1
000136EA 3029 0008                  		move.w	obX(a1),d0
000136EE 9068 0008                  		sub.w	obX(a0),d0
000136F2 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000136F8 6600                       		bne.s	@chksonic	; if yes, branch
000136FA 4440                       		neg.w	d0
000136FC                            
000136FC                            @chksonic:
000136FC 0640 0050                  		addi.w	#$50,d0
00013700 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013704 6400                       		bcc.s	@animate	; if yes, branch
00013706 3229 000C                  		move.w	obY(a1),d1
0001370A 0641 0060                  		addi.w	#$60,d1
0001370E 9268 000C                  		sub.w	obY(a0),d1
00013712 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013714 0C41 0070                  		cmpi.w	#$70,d1
00013718 6400                       		bcc.s	@animate	; branch if Sonic is too high
0001371A 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001371E 6400                       		bcc.s	@faraway	; if yes, branch
00013720 4640                       		not.w	d0
00013722 D040                       		add.w	d0,d0
00013724                            
00013724                            	@faraway:
00013724 0640 0060                  		addi.w	#$60,d0
00013728 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001372E 6600                       		bne.s	@right		; if yes, branch
00013730 4440                       		neg.w	d0
00013732                            
00013732                            	@right:
00013732 4400                       		neg.b	d0
00013734 E840                       		asr.w	#4,d0
00013736 0828 0000 0028             		btst	#0,obSubtype(a0)
0001373C 6700                       		beq.s	@movesonic
0001373E 4440                       		neg.w	d0
00013740                            
00013740                            	@movesonic:
00013740 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013744                            
00013744                            @animate:
00013744 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013748 6A00                       		bpl.s	@chkdel
0001374A 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
00013750 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013754 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
0001375A 6500                       		bcs.s	@noreset
0001375C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00013762                            
00013762                            	@noreset:
00013762 7000                       		moveq	#0,d0
00013764 0828 0000 0028             		btst	#0,obSubtype(a0)
0001376A 6700                       		beq.s	@noflip
0001376C 7002                       		moveq	#2,d0
0001376E                            
0001376E                            	@noflip:
0001376E D028 001B                  		add.b	obAniFrame(a0),d0
00013772 1140 001A                  		move.b	d0,obFrame(a0)
00013776                            
00013776                            @chkdel:
00013776 6100 BF82                  		bsr.w	DisplaySprite
00013798 4E75                       		rts	
00013798 4E75                       		rts	
0001379A                            Map_Fan:	include	"_maps\Fan.asm"
0001379A                            ; ---------------------------------------------------------------------------
0001379A                            ; Sprite mappings - fans (SLZ)
0001379A                            ; ---------------------------------------------------------------------------
0001379A                            Map_Fan_internal:
0001379A 0000                       		dc.w @fan1-Map_Fan_internal
0001379C 0000                       		dc.w @fan2-Map_Fan_internal
0001379E 0000                       		dc.w @fan3-Map_Fan_internal
000137A0 0000                       		dc.w @fan2-Map_Fan_internal
000137A2 0000                       		dc.w @fan1-Map_Fan_internal
000137A4 02                         @fan1:		dc.b 2
000137A5 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000137AA 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000137AF 02                         @fan2:		dc.b 2
000137B0 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000137B5 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000137BA 02                         @fan3:		dc.b 2
000137BB F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000137C0 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000137C6 00                         		even
000137C6 00                         		even
000137C6                            		include	"_incObj\5E Seesaw.asm"
000137C6                            ; ---------------------------------------------------------------------------
000137C6                            ; Object 5E - seesaws (SLZ)
000137C6                            ; ---------------------------------------------------------------------------
000137C6                            
000137C6                            Seesaw:
000137C6 7000                       		moveq	#0,d0
000137C8 1028 0024                  		move.b	obRoutine(a0),d0
000137CC 323B 0000                  		move.w	See_Index(pc,d0.w),d1
000137D0 4EBB 1000                  		jsr	See_Index(pc,d1.w)
000137D4 3028 0000                  		move.w	see_origX(a0),d0
000137D8 0240 FF80                  		andi.w	#$FF80,d0
000137DC 3238 F700                  		move.w	(v_screenposx).w,d1
000137E0 0441 0080                  		subi.w	#$80,d1
000137E4 0241 FF80                  		andi.w	#$FF80,d1
000137E8 9041                       		sub.w	d1,d0
000137EA 6B00 BF4E                  		bmi.w	DeleteObject
000137EE 0C40 0280                  		cmpi.w	#$280,d0
000137F2 6200 BF46                  		bhi.w	DeleteObject
000137F6 6000 BF02                  		bra.w	DisplaySprite
000137FA                            ; ===========================================================================
000137FA 0000                       See_Index:	dc.w See_Main-See_Index
000137FC 0000                       		dc.w See_Slope-See_Index
000137FE 0000                       		dc.w See_Slope2-See_Index
00013800 0000                       		dc.w See_Spikeball-See_Index
00013802 0000                       		dc.w See_MoveSpike-See_Index
00013804 0000                       		dc.w See_SpikeFall-See_Index
00013806                            
00013806 =00000030                  see_origX:	equ $30		; original x-axis position
00013806 =00000034                  see_origY:	equ $34		; original y-axis position
00013806 =00000038                  see_speed:	equ $38		; speed of collision
00013806 =0000003A                  see_frame:	equ $3A		; 
00013806 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013806                            ; ===========================================================================
00013806                            
00013806                            See_Main:	; Routine 0
00013806 5428 0024                  		addq.b	#2,obRoutine(a0)
0001380A 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013812 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013818 0028 0004 0001             		ori.b	#4,obRender(a0)
0001381E 117C 0004 0018             		move.b	#4,obPriority(a0)
00013824 117C 0030 0014             		move.b	#$30,obActWid(a0)
0001382A 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013830 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013834 6600                       		bne.s	@noball		; if not, branch
00013836                            
00013836 6100 C364                  		bsr.w	FindNextFreeObj
0001383A 6600                       		bne.s	@noball
0001383C 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013840 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013844 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001384A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013850 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013856 2348 003C                  		move.l	a0,see_parent(a1)
0001385A                            
0001385A                            	@noball:
0001385A 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013860 6700                       		beq.s	@noflip		; if not, branch
00013862 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013868                            
00013868                            	@noflip:
00013868 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
0001386E                            
0001386E                            See_Slope:	; Routine 2
0001386E 1228 003A                  		move.b	see_frame(a0),d1
00013872 6100 0000                  		bsr.w	See_ChgFrame
00013876 45F9 0000 0000             		lea	(See_DataSlope).l,a2
0001387C 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013882 6700                       		beq.s	@notflat	; if not, branch
00013884 45F9 0000 0000             		lea	(See_DataFlat).l,a2
0001388A                            
0001388A                            	@notflat:
0001388A 43F8 D000                  		lea	(v_player).w,a1
0001388E 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013894 323C 0030                  		move.w	#$30,d1
00013898 4EB9 0000 8EDC             		jsr	(SlopeObject).l
0001389E 4E75                       		rts	
000138A0                            ; ===========================================================================
000138A0                            
000138A0                            See_Slope2:	; Routine 4
000138A0 6100 0000                  		bsr.w	See_ChkSide
000138A4 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000138AA 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000138B0 6700                       		beq.s	@notflat	; if not, branch
000138B2 45F9 0000 0000             		lea	(See_DataFlat).l,a2
000138B8                            
000138B8                            	@notflat:
000138B8 323C 0030                  		move.w	#$30,d1
000138BC 4EB9 0000 8F7C             		jsr	(ExitPlatform).l
000138C2 323C 0030                  		move.w	#$30,d1
000138C6 3428 0008                  		move.w	obX(a0),d2
000138CA 4EB9 0000 9F16             		jsr	(SlopeObject2).l
000138D0 4E75                       		rts	
000138D2                            ; ===========================================================================
000138D2                            
000138D2                            See_ChkSide:
000138D2 7202                       		moveq	#2,d1
000138D4 43F8 D000                  		lea	(v_player).w,a1
000138D8 3028 0008                  		move.w	obX(a0),d0
000138DC 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
000138E0 6400                       		bcc.s	@leftside	; if yes, branch
000138E2 4440                       		neg.w	d0
000138E4 7200                       		moveq	#0,d1
000138E6                            
000138E6                            	@leftside:
000138E6 0C40 0008                  		cmpi.w	#8,d0
000138EA 6400                       		bcc.s	See_ChgFrame
000138EC 7201                       		moveq	#1,d1
000138EE                            
000138EE                            See_ChgFrame:
000138EE 1028 001A                  		move.b	obFrame(a0),d0
000138F2 B001                       		cmp.b	d1,d0		; does frame need to change?
000138F4 6700                       		beq.s	@noflip		; if not, branch
000138F6 6400                       		bcc.s	@loc_11772
000138F8 5400                       		addq.b	#2,d0
000138FA                            
000138FA                            	@loc_11772:
000138FA 5300                       		subq.b	#1,d0
000138FC 1140 001A                  		move.b	d0,obFrame(a0)
00013900 1141 003A                  		move.b	d1,see_frame(a0)
00013904 08A8 0000 0001             		bclr	#0,obRender(a0)
0001390A 0828 0001 001A             		btst	#1,obFrame(a0)
00013910 6700                       		beq.s	@noflip
00013912 08E8 0000 0001             		bset	#0,obRender(a0)
00013918                            
00013918                            	@noflip:
00013918 4E75                       		rts	
0001391A                            ; ===========================================================================
0001391A                            
0001391A                            See_Spikeball:	; Routine 6
0001391A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001391E 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013926 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001392C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013932 117C 0004 0018             		move.b	#4,obPriority(a0)
00013938 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001393E 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013944 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
0001394A 0668 0028 0008             		addi.w	#$28,obX(a0)
00013950 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013956 117C 0001 001A             		move.b	#1,obFrame(a0)
0001395C 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013962 6700                       		beq.s	See_MoveSpike	; if not, branch
00013964 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
0001396A 117C 0002 003A             		move.b	#2,see_frame(a0)
00013970                            
00013970                            See_MoveSpike:	; Routine 8
00013970 2268 003C                  		movea.l	see_parent(a0),a1
00013974 7000                       		moveq	#0,d0
00013976 1028 003A                  		move.b	see_frame(a0),d0
0001397A 9029 003A                  		sub.b	see_frame(a1),d0
0001397E 6700                       		beq.s	loc_1183E
00013980 6400                       		bcc.s	loc_117FC
00013982 4400                       		neg.b	d0
00013984                            
00013984                            loc_117FC:
00013984 323C F7E8                  		move.w	#-$818,d1
00013988 343C FEEC                  		move.w	#-$114,d2
0001398C 0C00 0001                  		cmpi.b	#1,d0
00013990 6700                       		beq.s	loc_11822
00013992 323C F510                  		move.w	#-$AF0,d1
00013996 343C FF34                  		move.w	#-$CC,d2
0001399A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000139A0 6D00                       		blt.s	loc_11822
000139A2 323C F200                  		move.w	#-$E00,d1
000139A6 343C FF60                  		move.w	#-$A0,d2
000139AA                            
000139AA                            loc_11822:
000139AA 3141 0012                  		move.w	d1,obVelY(a0)
000139AE 3142 0010                  		move.w	d2,obVelX(a0)
000139B2 3028 0008                  		move.w	obX(a0),d0
000139B6 9068 0030                  		sub.w	see_origX(a0),d0
000139BA 6400                       		bcc.s	loc_11838
000139BC 4468 0010                  		neg.w	obVelX(a0)
000139C0                            
000139C0                            loc_11838:
000139C0 5428 0024                  		addq.b	#2,obRoutine(a0)
000139C4 6000                       		bra.s	See_SpikeFall
000139C6                            ; ===========================================================================
000139C6                            
000139C6                            loc_1183E:
000139C6 45F9 0000 0000             		lea	(See_Speeds).l,a2
000139CC 7000                       		moveq	#0,d0
000139CE 1029 001A                  		move.b	obFrame(a1),d0
000139D2 343C 0028                  		move.w	#$28,d2
000139D6 3228 0008                  		move.w	obX(a0),d1
000139DA 9268 0030                  		sub.w	see_origX(a0),d1
000139DE 6400                       		bcc.s	loc_1185C
000139E0 4442                       		neg.w	d2
000139E2 5440                       		addq.w	#2,d0
000139E4                            
000139E4                            loc_1185C:
000139E4 D040                       		add.w	d0,d0
000139E6 3228 0034                  		move.w	see_origY(a0),d1
000139EA D272 0000                  		add.w	(a2,d0.w),d1
000139EE 3141 000C                  		move.w	d1,obY(a0)
000139F2 D468 0030                  		add.w	see_origX(a0),d2
000139F6 3142 0008                  		move.w	d2,obX(a0)
000139FA 4268 000E                  		clr.w	obY+2(a0)
000139FE 4268 000A                  		clr.w	obX+2(a0)
00013A02 4E75                       		rts	
00013A04                            ; ===========================================================================
00013A04                            
00013A04                            See_SpikeFall:	; Routine $A
00013A04 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013A08 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013A0A 6100 BCA2                  		bsr.w	ObjectFall
00013A0E 3028 0034                  		move.w	see_origY(a0),d0
00013A12 0440 002F                  		subi.w	#$2F,d0
00013A16 B068 000C                  		cmp.w	obY(a0),d0
00013A1A 6E00                       		bgt.s	locret_11898
00013A1C 6100 BC90                  		bsr.w	ObjectFall
00013A20                            
00013A20                            locret_11898:
00013A20 4E75                       		rts	
00013A22                            ; ===========================================================================
00013A22                            
00013A22                            loc_1189A:
00013A22 6100 BC8A                  		bsr.w	ObjectFall
00013A26 2268 003C                  		movea.l	see_parent(a0),a1
00013A2A 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013A30 7000                       		moveq	#0,d0
00013A32 1029 001A                  		move.b	obFrame(a1),d0
00013A36 3228 0008                  		move.w	obX(a0),d1
00013A3A 9268 0030                  		sub.w	see_origX(a0),d1
00013A3E 6400                       		bcc.s	loc_118BA
00013A40 5440                       		addq.w	#2,d0
00013A42                            
00013A42                            loc_118BA:
00013A42 D040                       		add.w	d0,d0
00013A44 3228 0034                  		move.w	see_origY(a0),d1
00013A48 D272 0000                  		add.w	(a2,d0.w),d1
00013A4C B268 000C                  		cmp.w	obY(a0),d1
00013A50 6E00                       		bgt.s	locret_11938
00013A52 2268 003C                  		movea.l	see_parent(a0),a1
00013A56 7202                       		moveq	#2,d1
00013A58 4A68 0010                  		tst.w	obVelX(a0)
00013A5C 6B00                       		bmi.s	See_Spring
00013A5E 7200                       		moveq	#0,d1
00013A60                            
00013A60                            See_Spring:
00013A60 1341 003A                  		move.b	d1,$3A(a1)
00013A64 1141 003A                  		move.b	d1,see_frame(a0)
00013A68 B229 001A                  		cmp.b	obFrame(a1),d1
00013A6C 6700                       		beq.s	loc_1192C
00013A6E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013A74 6700                       		beq.s	loc_1192C
00013A76 4229 0025                  		clr.b	ob2ndRout(a1)
00013A7A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013A80 45F8 D000                  		lea	(v_player).w,a2
00013A84 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013A8A 446A 0012                  		neg.w	obVelY(a2)
00013A8E 08EA 0001 0022             		bset	#1,obStatus(a2)
00013A94 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013A9A 422A 003C                  		clr.b	$3C(a2)
00013A9E 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013AA4 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013AB4                            
00013AB4                            loc_1192C:
00013AB4 4268 0010                  		clr.w	obVelX(a0)
00013AB8 4268 0012                  		clr.w	obVelY(a0)
00013ABC 5528 0024                  		subq.b	#2,obRoutine(a0)
00013AC0                            
00013AC0                            locret_11938:
00013AC0 4E75                       		rts	
00013AC2                            ; ===========================================================================
00013AC2 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013ACC                            
00013ACC                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013AFC                            		even
00013AFC                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013B2C                            		even
00013B2C                            		even
00013B2C                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013B2C                            ; ---------------------------------------------------------------------------
00013B2C                            ; Sprite mappings - seesaws (SLZ)
00013B2C                            ; ---------------------------------------------------------------------------
00013B2C                            Map_Seesaw_internal:
00013B2C 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B2E 0000                       		dc.w @flat-Map_Seesaw_internal
00013B30 0000                       		dc.w @sloping-Map_Seesaw_internal
00013B32 0000                       		dc.w @flat-Map_Seesaw_internal
00013B34 07                         @sloping:	dc.b 7
00013B35 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013B3A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013B3F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013B44 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013B49 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013B4E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013B53 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013B58 04                         @flat:		dc.b 4
00013B59 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013B5E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013B63 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013B68 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013B6E 00                         		even
00013B6E 00                         		even
00013B6E                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013B6E                            ; ---------------------------------------------------------------------------
00013B6E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013B6E                            ; ---------------------------------------------------------------------------
00013B6E                            Map_SSawBall_internal:
00013B6E 0000                       		dc.w @red-Map_SSawBall_internal
00013B70 0000                       		dc.w @silver-Map_SSawBall_internal
00013B72 01                         @red:		dc.b 1
00013B73 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013B78 01                         @silver:	dc.b 1
00013B79 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013B7E                            		even
00013B7E                            		even
00013B7E                            		include	"_incObj\5F Bomb Enemy.asm"
00013B7E                            ; ---------------------------------------------------------------------------
00013B7E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013B7E                            ; ---------------------------------------------------------------------------
00013B7E                            
00013B7E                            Bomb:
00013B7E 7000                       		moveq	#0,d0
00013B80 1028 0024                  		move.b	obRoutine(a0),d0
00013B84 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013B88 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013B8C                            ; ===========================================================================
00013B8C 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013B8E 0000                       		dc.w Bom_Action-Bom_Index
00013B90 0000                       		dc.w Bom_Display-Bom_Index
00013B92 0000                       		dc.w Bom_End-Bom_Index
00013B94                            
00013B94 =00000030                  bom_time:	equ $30		; time of fuse
00013B94 =00000034                  bom_origY:	equ $34		; original y-axis position
00013B94 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013B94                            ; ===========================================================================
00013B94                            
00013B94                            Bom_Main:	; Routine 0
00013B94 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B98 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013BA0 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013BA6 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BAC 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013BB2 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013BB8 1028 0028                  		move.b	obSubtype(a0),d0
00013BBC 6700                       		beq.s	loc_11A3C
00013BBE 1140 0024                  		move.b	d0,obRoutine(a0)
00013BC2 4E75                       		rts	
00013BC4                            ; ===========================================================================
00013BC4                            
00013BC4                            loc_11A3C:
00013BC4 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013BCA 0868 0000 0022             		bchg	#0,obStatus(a0)
00013BD0                            
00013BD0                            Bom_Action:	; Routine 2
00013BD0 7000                       		moveq	#0,d0
00013BD2 1028 0025                  		move.b	ob2ndRout(a0),d0
00013BD6 323B 0000                  		move.w	@index(pc,d0.w),d1
00013BDA 4EBB 1000                  		jsr	@index(pc,d1.w)
00013BDE 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013BE4 6100 8BC0                  		bsr.w	AnimateSprite
00013BE8 6000 DA86                  		bra.w	RememberState
00013BEC                            ; ===========================================================================
00013BEC 0000                       @index:		dc.w @walk-@index
00013BEE 0000                       		dc.w @wait-@index
00013BF0 0000                       		dc.w @explode-@index
00013BF2                            ; ===========================================================================
00013BF2                            
00013BF2                            @walk:
00013BF2 6100 0000                  		bsr.w	@chksonic
00013BF6 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013BFA 6A00                       		bpl.s	@noflip		; if time remains, branch
00013BFC 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013C00 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013C06 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013C0C 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013C12 0868 0000 0022             		bchg	#0,obStatus(a0)
00013C18 6700                       		beq.s	@noflip
00013C1A 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013C1E                            
00013C1E                            	@noflip:
00013C1E 4E75                       		rts	
00013C20                            ; ===========================================================================
00013C20                            
00013C20                            @wait:
00013C20 6100 0000                  		bsr.w	@chksonic
00013C24 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C28 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013C2A 6100 BABA                  		bsr.w	SpeedToPos
00013C2E 4E75                       		rts	
00013C30                            ; ===========================================================================
00013C30                            
00013C30                            	@stopwalking:
00013C30 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013C34 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013C3A 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013C3E 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013C44 4E75                       		rts	
00013C46                            ; ===========================================================================
00013C46                            
00013C46                            @explode:
00013C46 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013C4A 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013C4C 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013C50 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013C56                            
00013C56                            	@noexplode:
00013C56 4E75                       		rts	
00013C58                            ; ===========================================================================
00013C58                            
00013C58                            @chksonic:
00013C58 3038 D008                  		move.w	(v_player+obX).w,d0
00013C5C 9068 0008                  		sub.w	obX(a0),d0
00013C60 6400                       		bcc.s	@isleft
00013C62 4440                       		neg.w	d0
00013C64                            
00013C64                            	@isleft:
00013C64 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013C68 6400                       		bcc.s	@outofrange	; if not, branch
00013C6A 3038 D00C                  		move.w	(v_player+obY).w,d0
00013C6E 9068 000C                  		sub.w	obY(a0),d0
00013C72 6400                       		bcc.s	@isabove
00013C74 4440                       		neg.w	d0
00013C76                            
00013C76                            	@isabove:
00013C76 0C40 0060                  		cmpi.w	#$60,d0
00013C7A 6400                       		bcc.s	@outofrange
00013C7C 4A78 FE08                  		tst.w	(v_debuguse).w
00013C80 6600                       		bne.s	@outofrange
00013C82                            
00013C82 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013C88 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013C8E 4268 0010                  		clr.w	obVelX(a0)
00013C92 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013C98 6100 BF02                  		bsr.w	FindNextFreeObj
00013C9C 6600                       		bne.s	@outofrange
00013C9E 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013CA2 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013CA8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013CAE 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013CB4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013CBA 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013CC0 137C 0003 001C             		move.b	#3,obAnim(a1)
00013CC6 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013CCC 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013CD2 6700                       		beq.s	@normal		; if not, branch
00013CD4 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013CD8                            
00013CD8                            	@normal:
00013CD8 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013CDE 2348 003C                  		move.l	a0,bom_parent(a1)
00013CE2                            
00013CE2                            @outofrange:
00013CE2 4E75                       		rts	
00013CE4                            ; ===========================================================================
00013CE4                            
00013CE4                            Bom_Display:	; Routine 4
00013CE4 6100                       		bsr.s	loc_11B70
00013CE6 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013CEC 6100 8AB8                  		bsr.w	AnimateSprite
00013CF0 6000 D97E                  		bra.w	RememberState
00013CF4                            ; ===========================================================================
00013CF4                            
00013CF4                            loc_11B70:
00013CF4 5368 0030                  		subq.w	#1,bom_time(a0)
00013CF8 6B00                       		bmi.s	loc_11B7C
00013CFA 6100 B9EA                  		bsr.w	SpeedToPos
00013CFE 4E75                       		rts	
00013D00                            ; ===========================================================================
00013D00                            
00013D00                            loc_11B7C:
00013D00 4268 0030                  		clr.w	bom_time(a0)
00013D04 4228 0024                  		clr.b	obRoutine(a0)
00013D08 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013D0E 7203                       		moveq	#3,d1
00013D10 2248                       		movea.l	a0,a1
00013D12 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013D18 6000                       		bra.s	@makeshrapnel
00013D1A                            ; ===========================================================================
00013D1A                            
00013D1A                            	@loop:
00013D1A 6100 BE80                  		bsr.w	FindNextFreeObj
00013D1E 6600                       		bne.s	@fail
00013D20                            
00013D20                            @makeshrapnel:
00013D20 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013D24 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013D2A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013D30 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013D36 137C 0004 001C             		move.b	#4,obAnim(a1)
00013D3C 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013D40 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013D44 137C 0098 0020             		move.b	#$98,obColType(a1)
00013D4A 08E9 0007 0001             		bset	#7,obRender(a1)
00013D50                            
00013D50                            	@fail:
00013D50 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013D54                            
00013D54 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013D5A                            
00013D5A                            Bom_End:	; Routine 6
00013D5A 6100 B98A                  		bsr.w	SpeedToPos
00013D5E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013D64 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013D6A 6100 8A3A                  		bsr.w	AnimateSprite
00013D6E 4A28 0001                  		tst.b	obRender(a0)
00013D72 6A00 B9C6                  		bpl.w	DeleteObject
00013D76 6000 B982                  		bra.w	DisplaySprite
00013D7A                            ; ===========================================================================
00013D7A FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013D7A FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013D8A                            		include	"_anim\Bomb Enemy.asm"
00013D8A                            ; ---------------------------------------------------------------------------
00013D8A                            ; Animation script - Bomb enemy
00013D8A                            ; ---------------------------------------------------------------------------
00013D8A 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013D8C 0000                       		dc.w @walk-Ani_Bomb
00013D8E 0000                       		dc.w @activated-Ani_Bomb
00013D90 0000                       		dc.w @fuse-Ani_Bomb
00013D92 0000                       		dc.w @shrapnel-Ani_Bomb
00013D94 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013D98 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013D9E 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013DA2 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013DA6 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013DAA                            		even
00013DAA                            		even
00013DAA                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013DAA                            ; ---------------------------------------------------------------------------
00013DAA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013DAA                            ; ---------------------------------------------------------------------------
00013DAA                            Map_Bomb_internal:
00013DAA 0000                       		dc.w @stand1-Map_Bomb_internal
00013DAC 0000                       		dc.w @stand2-Map_Bomb_internal
00013DAE 0000                       		dc.w @walk1-Map_Bomb_internal
00013DB0 0000                       		dc.w @walk2-Map_Bomb_internal
00013DB2 0000                       		dc.w @walk3-Map_Bomb_internal
00013DB4 0000                       		dc.w @walk4-Map_Bomb_internal
00013DB6 0000                       		dc.w @activate1-Map_Bomb_internal
00013DB8 0000                       		dc.w @activate2-Map_Bomb_internal
00013DBA 0000                       		dc.w @fuse1-Map_Bomb_internal
00013DBC 0000                       		dc.w @fuse2-Map_Bomb_internal
00013DBE 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013DC0 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013DC2 03                         @stand1:	dc.b 3
00013DC3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013DC8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013DCD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013DD2 03                         @stand2:	dc.b 3
00013DD3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013DD8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013DDD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013DE2 03                         @walk1:		dc.b 3
00013DE3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013DE8 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013DED E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013DF2 03                         @walk2:		dc.b 3
00013DF3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013DF8 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013DFD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E02 03                         @walk3:		dc.b 3
00013E03 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013E08 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013E0D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013E12 03                         @walk4:		dc.b 3
00013E13 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E18 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013E1D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013E22 02                         @activate1:	dc.b 2
00013E23 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013E28 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E2D 02                         @activate2:	dc.b 2
00013E2E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013E33 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013E38 01                         @fuse1:		dc.b 1
00013E39 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013E3E 01                         @fuse2:		dc.b 1
00013E3F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013E44 01                         @shrapnel1:	dc.b 1
00013E45 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013E4A 01                         @shrapnel2:	dc.b 1
00013E4B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013E50                            		even
00013E50                            		even
00013E50                            
00013E50                            		include	"_incObj\60 Orbinaut.asm"
00013E50                            ; ---------------------------------------------------------------------------
00013E50                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013E50                            ; ---------------------------------------------------------------------------
00013E50                            
00013E50                            Orbinaut:
00013E50 7000                       		moveq	#0,d0
00013E52 1028 0024                  		move.b	obRoutine(a0),d0
00013E56 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013E5A 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013E5E                            ; ===========================================================================
00013E5E 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013E60 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013E62 0000                       		dc.w Orb_Display-Orb_Index
00013E64 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013E66 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013E68                            
00013E68 =0000003C                  orb_parent:	equ $3C		; address of parent object
00013E68                            ; ===========================================================================
00013E68                            
00013E68                            Orb_Main:	; Routine 0
00013E68 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013E70 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013E76 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013E7C 6700                       		beq.s	@isscrap
00013E7E 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013E84                            
00013E84                            	@isscrap:
00013E84 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013E8A 6600                       		bne.s	@notlabyrinth
00013E8C 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013E92                            
00013E92                            	@notlabyrinth:
00013E92 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E98 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013E9E 117C 000B 0020             		move.b	#$B,obColType(a0)
00013EA4 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013EAA 7400                       		moveq	#0,d2
00013EAC 45E8 0037                  		lea	$37(a0),a2
00013EB0 264A                       		movea.l	a2,a3
00013EB2 524A                       		addq.w	#1,a2
00013EB4 7203                       		moveq	#3,d1
00013EB6                            
00013EB6                            @makesatellites:
00013EB6 6100 BCE4                  		bsr.w	FindNextFreeObj
00013EBA 6600                       		bne.s	@fail
00013EBC 5213                       		addq.b	#1,(a3)
00013EBE 3A09                       		move.w	a1,d5
00013EC0 0445 D000                  		subi.w	#$D000,d5
00013EC4 EC4D                       		lsr.w	#6,d5
00013EC6 0245 007F                  		andi.w	#$7F,d5
00013ECA 14C5                       		move.b	d5,(a2)+
00013ECC 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013ECE 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013ED4 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013EDA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013EE0 0029 0004 0001             		ori.b	#4,obRender(a1)
00013EE6 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013EEC 137C 0008 0014             		move.b	#8,obActWid(a1)
00013EF2 137C 0003 001A             		move.b	#3,obFrame(a1)
00013EF8 137C 0098 0020             		move.b	#$98,obColType(a1)
00013EFE 1342 0026                  		move.b	d2,obAngle(a1)
00013F02 0602 0040                  		addi.b	#$40,d2
00013F06 2348 003C                  		move.l	a0,orb_parent(a1)
00013F0A 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013F0E                            
00013F0E                            	@fail:
00013F0E 7001                       		moveq	#1,d0
00013F10 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013F16 6700                       		beq.s	@noflip		; if not, branch
00013F18 4440                       		neg.w	d0
00013F1A                            
00013F1A                            	@noflip:
00013F1A 1140 0036                  		move.b	d0,$36(a0)
00013F1E 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013F24 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F28 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013F2E 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013F34 6700                       		beq.s	@noflip2	; if not, branch
00013F36 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013F3A                            
00013F3A                            	@noflip2:
00013F3A 4E75                       		rts	
00013F3C                            ; ===========================================================================
00013F3C                            
00013F3C                            Orb_ChkSonic:	; Routine 2
00013F3C 3038 D008                  		move.w	(v_player+obX).w,d0
00013F40 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013F44 6400                       		bcc.s	@isright	; if yes, branch
00013F46 4440                       		neg.w	d0
00013F48                            
00013F48                            	@isright:
00013F48 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013F4C 6400                       		bcc.s	@animate	; if not, branch
00013F4E 3038 D00C                  		move.w	(v_player+obY).w,d0
00013F52 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013F56 6400                       		bcc.s	@isabove	; if yes, branch
00013F58 4440                       		neg.w	d0
00013F5A                            
00013F5A                            	@isabove:
00013F5A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013F5E 6400                       		bcc.s	@animate	; if not, branch
00013F60 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013F64 6600                       		bne.s	@animate	; if yes, branch
00013F66 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013F6C                            
00013F6C                            @animate:
00013F6C 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013F72 6100 8832                  		bsr.w	AnimateSprite
00013F76 6000 0000                  		bra.w	Orb_ChkDel
00013F7A                            ; ===========================================================================
00013F7A                            
00013F7A                            Orb_Display:	; Routine 4
00013F7A 6100 B76A                  		bsr.w	SpeedToPos
00013F7E                            
00013F7E                            Orb_ChkDel:
00013F9C 6000 B75C                  		bra.w	DisplaySprite
00013FA0                            
00013FA0                            @chkgone:
00013FA0 45F8 FC00                  		lea	(v_objstate).w,a2
00013FA4 7000                       		moveq	#0,d0
00013FA6 1028 0023                  		move.b	obRespawnNo(a0),d0
00013FAA 6700                       		beq.s	loc_11E34
00013FAC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013FB2                            
00013FB2                            loc_11E34:
00013FB2 45E8 0037                  		lea	$37(a0),a2
00013FB6 7400                       		moveq	#0,d2
00013FB8 141A                       		move.b	(a2)+,d2
00013FBA 5342                       		subq.w	#1,d2
00013FBC 6500                       		bcs.s	Orb_Delete
00013FBE                            
00013FBE                            loc_11E40:
00013FBE 7000                       		moveq	#0,d0
00013FC0 101A                       		move.b	(a2)+,d0
00013FC2 ED48                       		lsl.w	#6,d0
00013FC4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00013FCA 2240                       		movea.l	d0,a1
00013FCC 6100 B76E                  		bsr.w	DeleteChild
00013FD0 51CA FFEC                  		dbf	d2,loc_11E40
00013FD4                            
00013FD4                            Orb_Delete:
00013FD4 6000 B764                  		bra.w	DeleteObject
00013FD8                            ; ===========================================================================
00013FD8                            
00013FD8                            Orb_MoveOrb:	; Routine 6
00013FD8 2268 003C                  		movea.l	orb_parent(a0),a1
00013FDC 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00013FE0 6600 B758                  		bne.w	DeleteObject	; if not, delete
00013FE4 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00013FEA 6600                       		bne.s	@circle		; if not, branch
00013FEC 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00013FF2 6600                       		bne.s	@circle		; if not, branch
00013FF4 5428 0024                  		addq.b	#2,obRoutine(a0)
00013FF8 5329 0037                  		subq.b	#1,$37(a1)
00013FFC 6600                       		bne.s	@fire
00013FFE 5429 0024                  		addq.b	#2,obRoutine(a1)
00014002                            
00014002                            	@fire:
00014002 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014008 0829 0000 0022             		btst	#0,obStatus(a1)
0001400E 6700                       		beq.s	@noflip
00014010 4468 0010                  		neg.w	obVelX(a0)
00014014                            
00014014                            	@noflip:
00014014 6000 B6E4                  		bra.w	DisplaySprite
00014018                            ; ===========================================================================
00014018                            
00014018                            @circle:
00014018 1028 0026                  		move.b	obAngle(a0),d0
0001401C 4EB9 0000 37AE             		jsr	(CalcSine).l
00014022 E841                       		asr.w	#4,d1
00014024 D269 0008                  		add.w	obX(a1),d1
00014028 3141 0008                  		move.w	d1,obX(a0)
0001402C E840                       		asr.w	#4,d0
0001402E D069 000C                  		add.w	obY(a1),d0
00014032 3140 000C                  		move.w	d0,obY(a0)
00014036 1029 0036                  		move.b	$36(a1),d0
0001403A D128 0026                  		add.b	d0,obAngle(a0)
0001403E 6000 B6BA                  		bra.w	DisplaySprite
00014042                            ; ===========================================================================
00014042                            
00014042                            Orb_ChkDel2:	; Routine 8
00014042 6100 B6A2                  		bsr.w	SpeedToPos
00014046 4A28 0001                  		tst.b	obRender(a0)
0001404A 6A00 B6EE                  		bpl.w	DeleteObject
0001404E 6000 B6AA                  		bra.w	DisplaySprite
0001404E 6000 B6AA                  		bra.w	DisplaySprite
00014052                            		include	"_anim\Orbinaut.asm"
00014052                            ; ---------------------------------------------------------------------------
00014052                            ; Animation script - Orbinaut enemy
00014052                            ; ---------------------------------------------------------------------------
00014052 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00014054 0000                       		dc.w @angers-Ani_Orb
00014056 0F00 FF                    @normal:	dc.b $F, 0, afEnd
0001405A 00                         		even
0001405A 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
00014060 00                         		even
00014060 00                         		even
00014060                            Map_Orb:	include	"_maps\Orbinaut.asm"
00014060                            ; ---------------------------------------------------------------------------
00014060                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00014060                            ; ---------------------------------------------------------------------------
00014060                            Map_Orb_internal:
00014060 0000                       		dc.w @normal-Map_Orb_internal
00014062 0000                       		dc.w @medium-Map_Orb_internal
00014064 0000                       		dc.w @angry-Map_Orb_internal
00014066 0000                       		dc.w @spikeball-Map_Orb_internal
00014068 01                         @normal:	dc.b 1
00014069 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001406E 01                         @medium:	dc.b 1
0001406F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014074 01                         @angry:		dc.b 1
00014075 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001407A 01                         @spikeball:	dc.b 1
0001407B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014080                            		even
00014080                            		even
00014080                            
00014080                            		include	"_incObj\16 Harpoon.asm"
00014080                            ; ---------------------------------------------------------------------------
00014080                            ; Object 16 - harpoon (LZ)
00014080                            ; ---------------------------------------------------------------------------
00014080                            
00014080                            Harpoon:
00014080 7000                       		moveq	#0,d0
00014082 1028 0024                  		move.b	obRoutine(a0),d0
00014086 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
0001408A 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
0001408E                            ; ===========================================================================
0001408E 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00014090 0000                       		dc.w Harp_Move-Harp_Index
00014092 0000                       		dc.w Harp_Wait-Harp_Index
00014094                            
00014094 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014094                            ; ===========================================================================
00014094                            
00014094                            Harp_Main:	; Routine 0
00014094 5428 0024                  		addq.b	#2,obRoutine(a0)
00014098 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
000140A0 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
000140A6 0028 0004 0001             		ori.b	#4,obRender(a0)
000140AC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000140B2 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
000140B8 117C 0014 0014             		move.b	#$14,obActWid(a0)
000140BE 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
000140C4                            
000140C4                            Harp_Move:	; Routine 2
000140C4 43F9 0000 0000             		lea	(Ani_Harp).l,a1
000140CA 6100 86DA                  		bsr.w	AnimateSprite
000140CE 7000                       		moveq	#0,d0
000140D0 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
000140D4 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
000140DA 6000 D594                  		bra.w	RememberState
000140DE                            
000140DE                            	@types:
000140DE 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
000140E4                            		even
000140E4                            
000140E4                            Harp_Wait:	; Routine 4
000140E4 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
000140E8 6A00                       		bpl.s	@chkdel		; branch if time remains
000140EA 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
000140F0 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
000140F4 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
000140FA                            
000140FA                            	@chkdel:
000140FA 6000 D574                  		bra.w	RememberState
000140FA 6000 D574                  		bra.w	RememberState
000140FE                            		include	"_anim\Harpoon.asm"
000140FE                            ; ---------------------------------------------------------------------------
000140FE                            ; Animation script - harpoon (LZ)
000140FE                            ; ---------------------------------------------------------------------------
000140FE 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00014100 0000                       		dc.w @h_retracting-Ani_Harp
00014102 0000                       		dc.w @v_extending-Ani_Harp
00014104 0000                       		dc.w @v_retracting-Ani_Harp
00014106 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
0001410A 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001410E 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00014112 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014116                            		even
00014116                            		even
00014116                            Map_Harp:	include	"_maps\Harpoon.asm"
00014116                            ; ---------------------------------------------------------------------------
00014116                            ; Sprite mappings - harpoon (LZ)
00014116                            ; ---------------------------------------------------------------------------
00014116                            Map_Harp_internal:
00014116 0000                       		dc.w @h_retracted-Map_Harp_internal
00014118 0000                       		dc.w @h_middle-Map_Harp_internal
0001411A 0000                       		dc.w @h_extended-Map_Harp_internal
0001411C 0000                       		dc.w @v_retracted-Map_Harp_internal
0001411E 0000                       		dc.w @v_middle-Map_Harp_internal
00014120 0000                       		dc.w @v_extended-Map_Harp_internal
00014122 01                         @h_retracted:	dc.b 1
00014123 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00014128 01                         @h_middle:	dc.b 1
00014129 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001412E 02                         @h_extended:	dc.b 2
0001412F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00014134 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00014139 01                         @v_retracted:	dc.b 1
0001413A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001413F 01                         @v_middle:	dc.b 1
00014140 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00014145 02                         @v_extended:	dc.b 2
00014146 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001414B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00014150                            		even
00014150                            		even
00014150                            		include	"_incObj\61 LZ Blocks.asm"
00014150                            ; ---------------------------------------------------------------------------
00014150                            ; Object 61 - blocks (LZ)
00014150                            ; ---------------------------------------------------------------------------
00014150                            
00014150                            LabyrinthBlock:
00014150 7000                       		moveq	#0,d0
00014152 1028 0024                  		move.b	obRoutine(a0),d0
00014156 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
0001415A 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
0001415E                            ; ===========================================================================
0001415E 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
00014160 0000                       		dc.w LBlk_Action-LBlk_Index
00014162                            
00014162 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00014164 200C                       		dc.b $20, $C
00014166 1010                       		dc.b $10, $10
00014168 1010                       		dc.b $10, $10
0001416A                            
0001416A =00000016                  lblk_height:	equ $16		; block height
0001416A =00000034                  lblk_origX:	equ $34		; original x-axis position
0001416A =00000030                  lblk_origY:	equ $30		; original y-axis position
0001416A =00000036                  lblk_time:	equ $36		; time delay for block movement
0001416A =00000038                  lblk_untouched:	equ $38		; flag block as untouched
0001416A                            ; ===========================================================================
0001416A                            
0001416A                            LBlk_Main:	; Routine 0
0001416A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001416E 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014176 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
0001417C 117C 0004 0001             		move.b	#4,obRender(a0)
00014182 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014188 7000                       		moveq	#0,d0
0001418A 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001418E E648                       		lsr.w	#3,d0		; read only the 1st digit
00014190 0240 000E                  		andi.w	#$E,d0
00014194 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014198 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
0001419C 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
000141A0 E248                       		lsr.w	#1,d0
000141A2 1140 001A                  		move.b	d0,obFrame(a0)
000141A6 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
000141AC 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
000141B2 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000141B6 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
000141BA 6700                       		beq.s	LBlk_Action	; branch if 0
000141BC 0C00 0007                  		cmpi.b	#7,d0
000141C0 6700                       		beq.s	LBlk_Action	; branch if 7
000141C2 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
000141C8                            
000141C8                            LBlk_Action:	; Routine 2
000141C8 3F28 0008                  		move.w	obX(a0),-(sp)
000141CC 7000                       		moveq	#0,d0
000141CE 1028 0028                  		move.b	obSubtype(a0),d0
000141D2 0240 000F                  		andi.w	#$F,d0
000141D6 D040                       		add.w	d0,d0
000141D8 323B 0000                  		move.w	@index(pc,d0.w),d1
000141DC 4EBB 1000                  		jsr	@index(pc,d1.w)
000141E0 381F                       		move.w	(sp)+,d4
000141E2 4A28 0001                  		tst.b	obRender(a0)
000141E6 6A00                       		bpl.s	@chkdel
000141E8 7200                       		moveq	#0,d1
000141EA 1228 0014                  		move.b	obActWid(a0),d1
000141EE 0641 000B                  		addi.w	#$B,d1
000141F2 7400                       		moveq	#0,d2
000141F4 1428 0016                  		move.b	lblk_height(a0),d2
000141F8 3602                       		move.w	d2,d3
000141FA 5243                       		addq.w	#1,d3
000141FC 6100 D90A                  		bsr.w	SolidObject
00014200 1144 003F                  		move.b	d4,$3F(a0)
00014204 6100 0000                  		bsr.w	loc_12180
00014208                            
00014208                            @chkdel:
00014226 6000 B4D2                  		bra.w	DisplaySprite
0001422A                            ; ===========================================================================
0001422A 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001422E 0000 0000                  		dc.w @type02-@index, @type03-@index
00014232 0000 0000                  		dc.w @type04-@index, @type05-@index
00014236 0000 0000                  		dc.w @type06-@index, @type07-@index
0001423A                            ; ===========================================================================
0001423A                            
0001423A                            @type00:
0001423A 4E75                       		rts	
0001423C                            ; ===========================================================================
0001423C                            
0001423C                            @type01:
0001423C                            @type03:
0001423C 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
00014240 6600                       		bne.s	@wait01		; if yes, branch
00014242 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
00014248 6700                       		beq.s	@donothing01	; if not, branch
0001424A 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
00014250                            
00014250                            	@donothing01:
00014250 4E75                       		rts	
00014252                            ; ===========================================================================
00014252                            
00014252                            	@wait01:
00014252 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
00014256 66F8                       		bne.s	@donothing01	; if time remains, branch
00014258 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
0001425C 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
00014260 4E75                       		rts	
00014262                            ; ===========================================================================
00014262                            
00014262                            @type02:
00014262                            @type06:
00014262 6100 B482                  		bsr.w	SpeedToPos
00014266 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
0001426A 6100 0000                  		bsr.w	ObjFloorDist
0001426E 4A41                       		tst.w	d1		; has block hit the floor?
00014270 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014274 5241                       		addq.w	#1,d1
00014276 D368 000C                  		add.w	d1,obY(a0)
0001427A 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
0001427E 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014282                            
00014282                            	@nofloor02:
00014282 4E75                       		rts	
00014284                            ; ===========================================================================
00014284                            
00014284                            @type04:
00014284 6100 B460                  		bsr.w	SpeedToPos
00014288 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001428C 6100 0000                  		bsr.w	ObjHitCeiling
00014290 4A41                       		tst.w	d1		; has block hit the ceiling?
00014292 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014296 9368 000C                  		sub.w	d1,obY(a0)
0001429A 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
0001429E 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000142A2                            
000142A2                            	@noceiling04:
000142A2 4E75                       		rts	
000142A4                            ; ===========================================================================
000142A4                            
000142A4                            @type05:
000142A4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
000142AA 6600                       		bne.s	@notouch05	; if not, branch
000142AC 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
000142B0 4228 0038                  		clr.b	lblk_untouched(a0)
000142B4                            
000142B4                            	@notouch05:
000142B4 4E75                       		rts	
000142B6                            ; ===========================================================================
000142B6                            
000142B6                            @type07:
000142B6 3038 F646                  		move.w	(v_waterpos1).w,d0
000142BA 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
000142BE 6700                       		beq.s	@stop07		; if yes, branch
000142C0 6400                       		bcc.s	@fall07		; branch if block is above water
000142C2 0C40 FFFE                  		cmpi.w	#-2,d0
000142C6 6C00                       		bge.s	@loc_1214E
000142C8 70FE                       		moveq	#-2,d0
000142CA                            
000142CA                            	@loc_1214E:
000142CA D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
000142CE 6100 0000                  		bsr.w	ObjHitCeiling
000142D2 4A41                       		tst.w	d1		; has block hit the ceiling?
000142D4 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
000142D8 9368 000C                  		sub.w	d1,obY(a0)	; stop block
000142DC                            
000142DC                            	@noceiling07:
000142DC 4E75                       		rts	
000142DE                            ; ===========================================================================
000142DE                            
000142DE                            @fall07:
000142DE 0C40 0002                  		cmpi.w	#2,d0
000142E2 6F00                       		ble.s	@loc_1216A
000142E4 7002                       		moveq	#2,d0
000142E6                            
000142E6                            	@loc_1216A:
000142E6 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
000142EA 6100 0000                  		bsr.w	ObjFloorDist
000142EE 4A41                       		tst.w	d1
000142F0 6A00 0000                  		bpl.w	@stop07
000142F4 5241                       		addq.w	#1,d1
000142F6 D368 000C                  		add.w	d1,obY(a0)
000142FA                            
000142FA                            	@stop07:
000142FA 4E75                       		rts	
000142FC                            ; ===========================================================================
000142FC                            
000142FC                            loc_12180:
000142FC 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014300 6700                       		beq.s	locret_121C0	; if yes, branch
00014302 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014308 6600                       		bne.s	loc_1219A	; if yes, branch
0001430A 4A28 003E                  		tst.b	$3E(a0)
0001430E 6700                       		beq.s	locret_121C0
00014310 5928 003E                  		subq.b	#4,$3E(a0)
00014314 6000                       		bra.s	loc_121A6
00014316                            ; ===========================================================================
00014316                            
00014316                            loc_1219A:
00014316 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001431C 6700                       		beq.s	locret_121C0
0001431E 5828 003E                  		addq.b	#4,$3E(a0)
00014322                            
00014322                            loc_121A6:
00014322 1028 003E                  		move.b	$3E(a0),d0
00014326 4EB9 0000 37AE             		jsr	(CalcSine).l
0001432C 323C 0400                  		move.w	#$400,d1
00014330 C1C1                       		muls.w	d1,d0
00014332 4840                       		swap	d0
00014334 D068 0030                  		add.w	lblk_origY(a0),d0
00014338 3140 000C                  		move.w	d0,obY(a0)
0001433C                            
0001433C                            locret_121C0:
0001433C 4E75                       		rts	
0001433C 4E75                       		rts	
0001433E                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
0001433E                            Map_6865:
0001433E 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
00014340 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
00014342 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
00014344 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
00014346 01                         Map_6865_8: 	dc.b $1
00014347 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
0001434C 02                         Map_6865_E: 	dc.b $2
0001434D F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
00014352 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
00014357 01                         Map_6865_19: 	dc.b $1
00014358 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
0001435D 01                         Map_6865_1F: 	dc.b $1
0001435E F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
00014364 00                         	even
00014364 00                         	even
00014364                            		include	"_incObj\62 Gargoyle.asm"
00014364                            ; ---------------------------------------------------------------------------
00014364                            ; Object 62 - gargoyle head (LZ)
00014364                            ; ---------------------------------------------------------------------------
00014364                            
00014364                            Gargoyle:
00014364 7000                       		moveq	#0,d0
00014366 1028 0024                  		move.b	obRoutine(a0),d0
0001436A 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
0001436E 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
00014372 6000 D2FC                  		bra.w	RememberState
00014376                            ; ===========================================================================
00014376 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
00014378 0000                       		dc.w Gar_MakeFire-Gar_Index
0001437A 0000                       		dc.w Gar_FireBall-Gar_Index
0001437C 0000                       		dc.w Gar_AniFire-Gar_Index
0001437E                            
0001437E 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014386                            ; ===========================================================================
00014386                            
00014386                            Gar_Main:	; Routine 0
00014386 5428 0024                  		addq.b	#2,obRoutine(a0)
0001438A 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014392 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014398 0028 0004 0001             		ori.b	#4,obRender(a0)
0001439E 317C 0180 0018             		move.w	#$180,obPriority(a0)
000143A4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000143AA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000143AE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000143B2 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
000143B8 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
000143BE 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
000143C4                            
000143C4                            Gar_MakeFire:	; Routine 2
000143C4 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
000143C8 6600                       		bne.s	@nofire		; if time remains, branch
000143CA                            
000143CA 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
000143D0 6100 B5A8                  		bsr.w	ChkObjectVisible
000143D4 6600                       		bne.s	@nofire
000143D6 6100 B7AE                  		bsr.w	FindFreeObj
000143DA 6600                       		bne.s	@nofire
000143DC 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
000143E0 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
000143E4 3368 0008 0008             		move.w	obX(a0),obX(a1)
000143EA 3368 000C 000C             		move.w	obY(a0),obY(a1)
000143F0 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000143F6 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000143FC                            
000143FC                            	@nofire:
000143FC 4E75                       		rts	
000143FE                            ; ===========================================================================
000143FE                            
000143FE                            Gar_FireBall:	; Routine 4
000143FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00014402 117C 0008 0016             		move.b	#8,obHeight(a0)
00014408 117C 0008 0017             		move.b	#8,obWidth(a0)
0001440E 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014416 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
0001441C 0028 0004 0001             		ori.b	#4,obRender(a0)
00014422 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014428 117C 0098 0020             		move.b	#$98,obColType(a0)
0001442E 117C 0008 0014             		move.b	#8,obActWid(a0)
00014434 117C 0002 001A             		move.b	#2,obFrame(a0)
0001443A 5068 000C                  		addq.w	#8,obY(a0)
0001443E 317C 0200 0010             		move.w	#$200,obVelX(a0)
00014444 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
0001444A 6600                       		bne.s	@noflip		; if not, branch
0001444C 4468 0010                  		neg.w	obVelX(a0)
00014450                            
00014450                            	@noflip:
0001445A                            
0001445A                            Gar_AniFire:	; Routine 6
0001445A 1038 FE05                  		move.b	(v_framebyte).w,d0
0001445E 0200 0007                  		andi.b	#7,d0
00014462 6600                       		bne.s	@nochg
00014464 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
0001446A                            
0001446A                            	@nochg:
0001446A 6100 B27A                  		bsr.w	SpeedToPos
0001446E 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014474 6600                       		bne.s	@isright	; if not, branch
00014476 76F8                       		moveq	#-8,d3
00014478 6100 0000                  		bsr.w	ObjHitWallLeft
0001447C 4A41                       		tst.w	d1
0001447E 6B00 B2BA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014482 4E75                       		rts	
00014484                            
00014484                            	@isright:
00014484 7608                       		moveq	#8,d3
00014486 6100 0000                  		bsr.w	ObjHitWallRight
0001448A 4A41                       		tst.w	d1
0001448C 6B00 B2AC                  		bmi.w	DeleteObject
00014490 4E75                       		rts	
00014490 4E75                       		rts	
00014492                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014492                            ; ---------------------------------------------------------------------------
00014492                            ; Sprite mappings - gargoyle head (LZ)
00014492                            ; ---------------------------------------------------------------------------
00014492                            Map_Gar_internal:
00014492 0000                       		dc.w @head-Map_Gar_internal
00014494 0000                       		dc.w @head-Map_Gar_internal
00014496 0000                       		dc.w @fireball1-Map_Gar_internal
00014498 0000                       		dc.w @fireball2-Map_Gar_internal
0001449A 03                         @head:		dc.b 3
0001449B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000144A0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000144A5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000144AA 01                         @fireball1:	dc.b 1
000144AB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000144B0 01                         @fireball2:	dc.b 1
000144B1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000144B6                            		even
000144B6                            		even
000144B6                            		include	"_incObj\63 LZ Conveyor.asm"
000144B6                            ; ---------------------------------------------------------------------------
000144B6                            ; Object 63 - platforms	on a conveyor belt (LZ)
000144B6                            ; ---------------------------------------------------------------------------
000144B6                            
000144B6                            LabyrinthConvey:
000144B6 7000                       		moveq	#0,d0
000144B8 1028 0024                  		move.b	obRoutine(a0),d0
000144BC 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
000144C0 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
000144E0                            
000144E0                            LCon_Display:
000144E0 6000 B218                  		bra.w	DisplaySprite
000144E4                            ; ===========================================================================
000144E4                            
000144E4                            loc_1236A:
000144E4 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
000144EA 6600                       		bne.s	loc_12378
000144EC 0C40 FF80                  		cmpi.w	#-$80,d0
000144F0 64EE                       		bcc.s	LCon_Display
000144F2                            
000144F2                            loc_12378:
000144F2 1028 002F                  		move.b	$2F(a0),d0
000144F6 6A00 B242                  		bpl.w	DeleteObject
000144FA 0240 007F                  		andi.w	#$7F,d0
000144FE 45F8 F7C1                  		lea	(v_obj63).w,a2
00014502 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014508 6000 B230                  		bra.w	DeleteObject
0001450C                            ; ===========================================================================
0001450C 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001450E 0000                       		dc.w loc_124B2-LCon_Index
00014510 0000                       		dc.w loc_124C2-LCon_Index
00014512 0000                       		dc.w loc_124DE-LCon_Index
00014514                            ; ===========================================================================
00014514                            
00014514                            LCon_Main:	; Routine 0
00014514 1028 0028                  		move.b	obSubtype(a0),d0
00014518 6B00 0000                  		bmi.w	loc_12460
0001451C 5428 0024                  		addq.b	#2,obRoutine(a0)
00014520 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014528 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
0001452E 0028 0004 0001             		ori.b	#4,obRender(a0)
00014534 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001453A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014540 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
00014546 6600                       		bne.s	loc_123E2
00014548 5828 0024                  		addq.b	#4,obRoutine(a0)
0001454C 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
00014552 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014558 6000 0000                  		bra.w	loc_124DE
0001455C                            ; ===========================================================================
0001455C                            
0001455C                            loc_123E2:
0001455C 117C 0004 001A             		move.b	#4,obFrame(a0)
00014562 7000                       		moveq	#0,d0
00014564 1028 0028                  		move.b	obSubtype(a0),d0
00014568 3200                       		move.w	d0,d1
0001456A E648                       		lsr.w	#3,d0
0001456C 0240 001E                  		andi.w	#$1E,d0
00014570 45FA 0000                  		lea	LCon_Data(pc),a2
00014574 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014578 315A 0038                  		move.w	(a2)+,$38(a0)
0001457C 315A 0030                  		move.w	(a2)+,$30(a0)
00014580 214A 003C                  		move.l	a2,$3C(a0)
00014584 0241 000F                  		andi.w	#$F,d1
00014588 E549                       		lsl.w	#2,d1
0001458A 1141 0038                  		move.b	d1,$38(a0)
0001458E 117C 0004 003A             		move.b	#4,$3A(a0)
00014594 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014598 6700                       		beq.s	loc_1244C
0001459A 117C 0001 003B             		move.b	#1,$3B(a0)
000145A0 4428 003A                  		neg.b	$3A(a0)
000145A4 7200                       		moveq	#0,d1
000145A6 1228 0038                  		move.b	$38(a0),d1
000145AA D228 003A                  		add.b	$3A(a0),d1
000145AE B228 0039                  		cmp.b	$39(a0),d1
000145B2 6500                       		bcs.s	loc_12448
000145B4 1001                       		move.b	d1,d0
000145B6 7200                       		moveq	#0,d1
000145B8 4A00                       		tst.b	d0
000145BA 6A00                       		bpl.s	loc_12448
000145BC 1228 0039                  		move.b	$39(a0),d1
000145C0 5901                       		subq.b	#4,d1
000145C2                            
000145C2                            loc_12448:
000145C2 1141 0038                  		move.b	d1,$38(a0)
000145C6                            
000145C6                            loc_1244C:
000145C6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000145CC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000145D2 6100 0000                  		bsr.w	LCon_ChangeDir
000145D6 6000 0000                  		bra.w	loc_124B2
000145DA                            ; ===========================================================================
000145DA                            
000145DA                            loc_12460:
000145DA 1140 002F                  		move.b	d0,$2F(a0)
000145DE 0240 007F                  		andi.w	#$7F,d0
000145E2 45F8 F7C1                  		lea	(v_obj63).w,a2
000145E6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000145EC 6600 B14C                  		bne.w	DeleteObject
000145F0 D040                       		add.w	d0,d0
000145F2 0240 001E                  		andi.w	#$1E,d0
000145F6 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
000145FA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014600 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014604 321A                       		move.w	(a2)+,d1
00014606 2248                       		movea.l	a0,a1
00014608 6000                       		bra.s	LCon_MakePtfms
0001460A                            ; ===========================================================================
0001460A                            
0001460A                            LCon_Loop:
0001460A 6100 B57A                  		bsr.w	FindFreeObj
0001460E 6600                       		bne.s	loc_124AA
00014610                            
00014610                            LCon_MakePtfms:
00014610 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014614 335A 0008                  		move.w	(a2)+,obX(a1)
00014618 335A 000C                  		move.w	(a2)+,obY(a1)
0001461C 301A                       		move.w	(a2)+,d0
0001461E 1340 0028                  		move.b	d0,obSubtype(a1)
00014622                            
00014622                            loc_124AA:
00014622 51C9 FFE6                  		dbf	d1,LCon_Loop
00014626                            
00014626 588F                       		addq.l	#4,sp
00014628 4E75                       		rts	
0001462A                            ; ===========================================================================
0001462A                            
0001462A                            loc_124B2:	; Routine 2
0001462A 7200                       		moveq	#0,d1
0001462C 1228 0014                  		move.b	obActWid(a0),d1
00014630 4EB9 0000 8E08             		jsr	(PlatformObject).l
00014636 6000 0000                  		bra.w	sub_12502
0001463A                            ; ===========================================================================
0001463A                            
0001463A                            loc_124C2:	; Routine 4
0001463A 7200                       		moveq	#0,d1
0001463C 1228 0014                  		move.b	obActWid(a0),d1
00014640 4EB9 0000 8F7C             		jsr	(ExitPlatform).l
00014646 3F28 0008                  		move.w	obX(a0),-(sp)
0001464A 6100 0000                  		bsr.w	sub_12502
0001464E 341F                       		move.w	(sp)+,d2
00014650 4EF9 0000 94E6             		jmp	(MvSonicOnPtfm2).l
00014656                            ; ===========================================================================
00014656                            
00014656                            loc_124DE:	; Routine 6
00014656 3038 FE04                  		move.w	(v_framecount).w,d0
0001465A 0240 0003                  		andi.w	#3,d0
0001465E 6600                       		bne.s	loc_124FC
00014660 7201                       		moveq	#1,d1
00014662 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014666 6700                       		beq.s	loc_124F2
00014668 4401                       		neg.b	d1
0001466A                            
0001466A                            loc_124F2:
0001466A D328 001A                  		add.b	d1,obFrame(a0)
0001466E 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014674                            
00014674                            loc_124FC:
00014674 588F                       		addq.l	#4,sp
00014676 6000 CFF8                  		bra.w	RememberState
0001467A                            
0001467A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001467A                            
0001467A                            
0001467A                            sub_12502:
0001467A 4A38 F7EE                  		tst.b	(f_switch+$E).w
0001467E 6700                       		beq.s	loc_12520
00014680 4A28 003B                  		tst.b	$3B(a0)
00014684 6600                       		bne.s	loc_12520
00014686 117C 0001 003B             		move.b	#1,$3B(a0)
0001468C 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014692 4428 003A                  		neg.b	$3A(a0)
00014696 6000                       		bra.s	loc_12534
00014698                            ; ===========================================================================
00014698                            
00014698                            loc_12520:
00014698 3028 0008                  		move.w	obX(a0),d0
0001469C B068 0034                  		cmp.w	$34(a0),d0
000146A0 6600                       		bne.s	loc_1256A
000146A2 3028 000C                  		move.w	obY(a0),d0
000146A6 B068 0036                  		cmp.w	$36(a0),d0
000146AA 6600                       		bne.s	loc_1256A
000146AC                            
000146AC                            loc_12534:
000146AC 7200                       		moveq	#0,d1
000146AE 1228 0038                  		move.b	$38(a0),d1
000146B2 D228 003A                  		add.b	$3A(a0),d1
000146B6 B228 0039                  		cmp.b	$39(a0),d1
000146BA 6500                       		bcs.s	loc_12552
000146BC 1001                       		move.b	d1,d0
000146BE 7200                       		moveq	#0,d1
000146C0 4A00                       		tst.b	d0
000146C2 6A00                       		bpl.s	loc_12552
000146C4 1228 0039                  		move.b	$39(a0),d1
000146C8 5901                       		subq.b	#4,d1
000146CA                            
000146CA                            loc_12552:
000146CA 1141 0038                  		move.b	d1,$38(a0)
000146CE 2268 003C                  		movea.l	$3C(a0),a1
000146D2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000146D8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000146DE 6100 0000                  		bsr.w	LCon_ChangeDir
000146E2                            
000146E2                            loc_1256A:
000146E2 6100 B002                  		bsr.w	SpeedToPos
000146E6 4E75                       		rts	
000146E8                            ; End of function sub_12502
000146E8                            
000146E8                            
000146E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146E8                            
000146E8                            
000146E8                            LCon_ChangeDir:
000146E8 7000                       		moveq	#0,d0
000146EA 343C FF00                  		move.w	#-$100,d2
000146EE 3028 0008                  		move.w	obX(a0),d0
000146F2 9068 0034                  		sub.w	$34(a0),d0
000146F6 6400                       		bcc.s	loc_12584
000146F8 4440                       		neg.w	d0
000146FA 4442                       		neg.w	d2
000146FC                            
000146FC                            loc_12584:
000146FC 7200                       		moveq	#0,d1
000146FE 363C FF00                  		move.w	#-$100,d3
00014702 3228 000C                  		move.w	obY(a0),d1
00014706 9268 0036                  		sub.w	$36(a0),d1
0001470A 6400                       		bcc.s	loc_12598
0001470C 4441                       		neg.w	d1
0001470E 4443                       		neg.w	d3
00014710                            
00014710                            loc_12598:
00014710 B240                       		cmp.w	d0,d1
00014712 6500                       		bcs.s	loc_125C2
00014714 3028 0008                  		move.w	obX(a0),d0
00014718 9068 0034                  		sub.w	$34(a0),d0
0001471C 6700                       		beq.s	loc_125AE
0001471E 48C0                       		ext.l	d0
00014720 E180                       		asl.l	#8,d0
00014722 81C1                       		divs.w	d1,d0
00014724 4440                       		neg.w	d0
00014726                            
00014726                            loc_125AE:
00014726 3140 0010                  		move.w	d0,obVelX(a0)
0001472A 3143 0012                  		move.w	d3,obVelY(a0)
0001472E 4840                       		swap	d0
00014730 3140 000A                  		move.w	d0,obX+2(a0)
00014734 4268 000E                  		clr.w	obY+2(a0)
00014738 4E75                       		rts	
0001473A                            ; ===========================================================================
0001473A                            
0001473A                            loc_125C2:
0001473A 3228 000C                  		move.w	obY(a0),d1
0001473E 9268 0036                  		sub.w	$36(a0),d1
00014742 6700                       		beq.s	loc_125D4
00014744 48C1                       		ext.l	d1
00014746 E181                       		asl.l	#8,d1
00014748 83C0                       		divs.w	d0,d1
0001474A 4441                       		neg.w	d1
0001474C                            
0001474C                            loc_125D4:
0001474C 3141 0012                  		move.w	d1,obVelY(a0)
00014750 3142 0010                  		move.w	d2,obVelX(a0)
00014754 4841                       		swap	d1
00014756 3141 000E                  		move.w	d1,obY+2(a0)
0001475A 4268 000A                  		clr.w	obX+2(a0)
0001475E 4E75                       		rts	
00014760                            ; End of function LCon_ChangeDir
00014760                            
00014760                            ; ===========================================================================
00014760 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00014762 0000                       		dc.w word_12610-LCon_Data
00014764 0000                       		dc.w word_12628-LCon_Data
00014766 0000                       		dc.w word_1263C-LCon_Data
00014768 0000                       		dc.w word_12650-LCon_Data
0001476A 0000                       		dc.w word_12668-LCon_Data
0001476C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001477C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014788 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014798 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000147A0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000147B4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000147C8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000147E0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000147E0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000147F4                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
000147F4                            ; ---------------------------------------------------------------------------
000147F4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000147F4                            ; ---------------------------------------------------------------------------
000147F4                            Map_LConv_internal:
000147F4 0000                       		dc.w @wheel1-Map_LConv_internal
000147F6 0000                       		dc.w @wheel2-Map_LConv_internal
000147F8 0000                       		dc.w @wheel3-Map_LConv_internal
000147FA 0000                       		dc.w @wheel4-Map_LConv_internal
000147FC 0000                       		dc.w @platform-Map_LConv_internal
000147FE 01                         @wheel1:	dc.b 1
000147FF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014804 01                         @wheel2:	dc.b 1
00014805 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001480A 01                         @wheel3:	dc.b 1
0001480B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014810 01                         @wheel4:	dc.b 1
00014811 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014816 01                         @platform:	dc.b 1
00014817 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001481C                            		even
0001481C                            		even
0001481C                            		include	"_incObj\64 Bubbles.asm"
0001481C                            ; ---------------------------------------------------------------------------
0001481C                            ; Object 64 - bubbles (LZ)
0001481C                            ; ---------------------------------------------------------------------------
0001481C                            
0001481C                            Bubble:
0001481C 7000                       		moveq	#0,d0
0001481E 1028 0024                  		move.b	obRoutine(a0),d0
00014822 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014826 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
0001482A                            ; ===========================================================================
0001482A 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
0001482C 0000                       		dc.w Bub_Animate-Bub_Index
0001482E 0000                       		dc.w Bub_ChkWater-Bub_Index
00014830 0000                       		dc.w Bub_Display-Bub_Index
00014832 0000                       		dc.w Bub_Delete-Bub_Index
00014834 0000                       		dc.w Bub_BblMaker-Bub_Index
00014836                            
00014836 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014836 =00000030                  bub_origX:	equ $30		; original x-axis position
00014836 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014836 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014836                            ; ===========================================================================
00014836                            
00014836                            Bub_Main:	; Routine 0
00014836 5428 0024                  		addq.b	#2,obRoutine(a0)
0001483A 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014842 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014848 117C 0084 0001             		move.b	#$84,obRender(a0)
0001484E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014854 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001485A 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
0001485E 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014860                            
00014860 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014864 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014868 1140 0032                  		move.b	d0,bub_time(a0)
0001486C 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014870 117C 0006 001C             		move.b	#6,obAnim(a0)
00014876 6000 0000                  		bra.w	Bub_BblMaker
0001487A                            ; ===========================================================================
0001487A                            
0001487A                            @bubble:
0001487A 1140 001C                  		move.b	d0,obAnim(a0)
0001487E 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014884 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
0001488A 4EB9 0000 3788             		jsr	(RandomNumber).l
00014890 1140 0026                  		move.b	d0,obAngle(a0)
00014894                            
00014894                            Bub_Animate:	; Routine 2
00014894 43F9 0000 0000             		lea	(Ani_Bub).l,a1
0001489A 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
000148A0 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
000148A6 6600                       		bne.s	Bub_ChkWater	; if not, branch
000148A8                            
000148A8 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
000148AE                            
000148AE                            Bub_ChkWater:	; Routine 4
000148AE 3038 F646                  		move.w	(v_waterpos1).w,d0
000148B2 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
000148B6 6500                       		bcs.s	@wobble		; if yes, branch
000148B8                            
000148B8                            @burst:
000148B8 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
000148BE 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
000148C2 6000 0000                  		bra.w	Bub_Display
000148C6                            ; ===========================================================================
000148C6                            
000148C6                            @wobble:
000148C6 1028 0026                  		move.b	obAngle(a0),d0
000148CA 5228 0026                  		addq.b	#1,obAngle(a0)
000148CE 0240 007F                  		andi.w	#$7F,d0
000148D2 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000148D8 1031 0000                  		move.b	(a1,d0.w),d0
000148DC 4880                       		ext.w	d0
000148DE D068 0030                  		add.w	bub_origX(a0),d0
000148E2 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
000148E6 4A28 002E                  		tst.b	bub_inhalable(a0)
000148EA 6700                       		beq.s	@display
000148EC 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
000148F0 6700                       		beq.s	@display	; if not, branch
000148F2                            
000148F2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014900 43F8 D000                  		lea	(v_player).w,a1
00014904 4269 0010                  		clr.w	obVelX(a1)
00014908 4269 0012                  		clr.w	obVelY(a1)
0001490C 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014910 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014916 337C 0023 003E             		move.w	#$23,$3E(a1)
0001491C 137C 0000 003C             		move.b	#0,$3C(a1)
00014922 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014928 08A9 0004 0022             		bclr	#4,obStatus(a1)
0001492E 0829 0002 0022             		btst	#2,obStatus(a1)
00014934 6700 FF82                  		beq.w	@burst
00014938 08A9 0002 0022             		bclr	#2,obStatus(a1)
0001493E 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014944 137C 0009 0017             		move.b	#9,obWidth(a1)
0001494A 5B69 000C                  		subq.w	#5,obY(a1)
0001494E 6000 FF68                  		bra.w	@burst
00014952                            ; ===========================================================================
00014952                            
00014952                            @display:
00014952 6100 AD92                  		bsr.w	SpeedToPos
00014956 4A28 0001                  		tst.b	obRender(a0)
0001495A 6A00                       		bpl.s	@delete
0001495C 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00014962                            
00014962                            	@delete:
00014962 4EF9 0000 F73A             		jmp	(DeleteObject).l
00014968                            ; ===========================================================================
00014968                            
00014968                            Bub_Display:	; Routine 6
00014968 43F9 0000 0000             		lea	(Ani_Bub).l,a1
0001496E 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
00014974 4A28 0001                  		tst.b	obRender(a0)
00014978 6A00                       		bpl.s	@delete
0001497A 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00014980                            
00014980                            	@delete:
00014980 4EF9 0000 F73A             		jmp	(DeleteObject).l
00014986                            ; ===========================================================================
00014986                            
00014986                            Bub_Delete:	; Routine 8
00014986 6000 ADB2                  		bra.w	DeleteObject
0001498A                            ; ===========================================================================
0001498A                            
0001498A                            Bub_BblMaker:	; Routine $A
0001498A 4A68 0036                  		tst.w	$36(a0)
0001498E 6600                       		bne.s	@loc_12874
00014990 3038 F646                  		move.w	(v_waterpos1).w,d0
00014994 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014998 6400 0000                  		bcc.w	@chkdel		; if not, branch
0001499C 4A28 0001                  		tst.b	obRender(a0)
000149A0 6A00 0000                  		bpl.w	@chkdel
000149A4 5368 0038                  		subq.w	#1,$38(a0)
000149A8 6A00 0000                  		bpl.w	@loc_12914
000149AC 317C 0001 0036             		move.w	#1,$36(a0)
000149B2                            
000149B2                            	@tryagain:
000149B2 4EB9 0000 3788             		jsr	(RandomNumber).l
000149B8 3200                       		move.w	d0,d1
000149BA 0240 0007                  		andi.w	#7,d0
000149BE 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
000149C2 64EE                       		bcc.s	@tryagain	; if yes, branch
000149C4                            
000149C4 1140 0034                  		move.b	d0,$34(a0)
000149C8 0241 000C                  		andi.w	#$C,d1
000149CC 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
000149D2 D2C1                       		adda.w	d1,a1
000149D4 2149 003C                  		move.l	a1,$3C(a0)
000149D8 5328 0032                  		subq.b	#1,bub_time(a0)
000149DC 6A00                       		bpl.s	@loc_12872
000149DE 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
000149E4 08E8 0007 0036             		bset	#7,$36(a0)
000149EA                            
000149EA                            @loc_12872:
000149EA 6000                       		bra.s	@loc_1287C
000149EC                            ; ===========================================================================
000149EC                            
000149EC                            @loc_12874:
000149EC 5368 0038                  		subq.w	#1,$38(a0)
000149F0 6A00 0000                  		bpl.w	@loc_12914
000149F4                            
000149F4                            @loc_1287C:
000149F4 4EB9 0000 3788             		jsr	(RandomNumber).l
000149FA 0240 001F                  		andi.w	#$1F,d0
000149FE 3140 0038                  		move.w	d0,$38(a0)
00014A02 6100 B182                  		bsr.w	FindFreeObj
00014A06 6600                       		bne.s	@fail
00014A08 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014A0C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014A12 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A18 0240 000F                  		andi.w	#$F,d0
00014A1C 5140                       		subq.w	#8,d0
00014A1E D169 0008                  		add.w	d0,obX(a1)
00014A22 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014A28 7000                       		moveq	#0,d0
00014A2A 1028 0034                  		move.b	$34(a0),d0
00014A2E 2468 003C                  		movea.l	$3C(a0),a2
00014A32 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014A38 0828 0007 0036             		btst	#7,$36(a0)
00014A3E 6700                       		beq.s	@fail
00014A40 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A46 0240 0003                  		andi.w	#3,d0
00014A4A 6600                       		bne.s	@loc_buh
00014A4C 08E8 0006 0036             		bset	#6,$36(a0)
00014A52 6600                       		bne.s	@fail
00014A54 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014A5A                            
00014A5A                            @loc_buh:
00014A5A 4A28 0034                  		tst.b	$34(a0)
00014A5E 6600                       		bne.s	@fail
00014A60 08E8 0006 0036             		bset	#6,$36(a0)
00014A66 6600                       		bne.s	@fail
00014A68 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014A6E                            
00014A6E                            	@fail:
00014A6E 5328 0034                  		subq.b	#1,$34(a0)
00014A72 6A00                       		bpl.s	@loc_12914
00014A74 4EB9 0000 3788             		jsr	(RandomNumber).l
00014A7A 0240 007F                  		andi.w	#$7F,d0
00014A7E 0640 0080                  		addi.w	#$80,d0
00014A82 D168 0038                  		add.w	d0,$38(a0)
00014A86 4268 0036                  		clr.w	$36(a0)
00014A8A                            
00014A8A                            @loc_12914:
00014A8A 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014A90 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
00014A96                            
00014A96                            @chkdel:
00014AB4 3038 F646                  		move.w	(v_waterpos1).w,d0
00014AB8 B068 000C                  		cmp.w	obY(a0),d0
00014ABC 6500 AC3C                  		bcs.w	DisplaySprite
00014AC0 4E75                       		rts	
00014AC2                            ; ===========================================================================
00014AC2                            ; bubble production sequence
00014AC2                            
00014AC2                            ; 0 = small bubble, 1 =	large bubble
00014AC2                            
00014AC2 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014AD4                            
00014AD4                            ; ===========================================================================
00014AD4                            
00014AD4                            Bub_ChkSonic:
00014AD4 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014AD8 6B00                       		bmi.s	@loc_12998
00014ADA 43F8 D000                  		lea	(v_player).w,a1
00014ADE 3029 0008                  		move.w	obX(a1),d0
00014AE2 3228 0008                  		move.w	obX(a0),d1
00014AE6 0441 0010                  		subi.w	#$10,d1
00014AEA B240                       		cmp.w	d0,d1
00014AEC 6400                       		bcc.s	@loc_12998
00014AEE 0641 0020                  		addi.w	#$20,d1
00014AF2 B240                       		cmp.w	d0,d1
00014AF4 6500                       		bcs.s	@loc_12998
00014AF6 3029 000C                  		move.w	obY(a1),d0
00014AFA 3228 000C                  		move.w	obY(a0),d1
00014AFE B240                       		cmp.w	d0,d1
00014B00 6400                       		bcc.s	@loc_12998
00014B02 0641 0010                  		addi.w	#$10,d1
00014B06 B240                       		cmp.w	d0,d1
00014B08 6500                       		bcs.s	@loc_12998
00014B0A 7001                       		moveq	#1,d0
00014B0C 4E75                       		rts	
00014B0E                            ; ===========================================================================
00014B0E                            
00014B0E                            @loc_12998:
00014B0E 7000                       		moveq	#0,d0
00014B10 4E75                       		rts	
00014B10 4E75                       		rts	
00014B12                            		include	"_anim\Bubbles.asm"
00014B12                            ; ---------------------------------------------------------------------------
00014B12                            ; Animation script - bubbles (LZ)
00014B12                            ; ---------------------------------------------------------------------------
00014B12 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014B14 0000                       		dc.w @medium-Ani_Bub
00014B16 0000                       		dc.w @large-Ani_Bub
00014B18 0000                       		dc.w @incroutine-Ani_Bub
00014B1A 0000                       		dc.w @incroutine-Ani_Bub
00014B1C 0000                       		dc.w @burst-Ani_Bub
00014B1E 0000                       		dc.w @bubmaker-Ani_Bub
00014B20 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014B26 00                         		even
00014B26 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014B2C 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014B34 00                         		even
00014B34 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014B36 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014B3C 00                         		even
00014B3C 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014B42 00                         		even
00014B42 00                         		even
00014B42                            Map_Bub:	include	"_maps\Bubbles.asm"
00014B42                            ; ---------------------------------------------------------------------------
00014B42                            ; Sprite mappings - bubbles (LZ)
00014B42                            ; ---------------------------------------------------------------------------
00014B42                            Map_Bub_internal:
00014B42 0000                       		dc.w @bubble1-Map_Bub_internal
00014B44 0000                       		dc.w @bubble2-Map_Bub_internal
00014B46 0000                       		dc.w @bubble3-Map_Bub_internal
00014B48 0000                       		dc.w @bubble4-Map_Bub_internal
00014B4A 0000                       		dc.w @bubble5-Map_Bub_internal
00014B4C 0000                       		dc.w @bubble6-Map_Bub_internal
00014B4E 0000                       		dc.w @bubblefull-Map_Bub_internal
00014B50 0000                       		dc.w @burst1-Map_Bub_internal
00014B52 0000                       		dc.w @burst2-Map_Bub_internal
00014B54 0000                       		dc.w @zero_sm-Map_Bub_internal
00014B56 0000                       		dc.w @five_sm-Map_Bub_internal
00014B58 0000                       		dc.w @three_sm-Map_Bub_internal
00014B5A 0000                       		dc.w @one_sm-Map_Bub_internal
00014B5C 0000                       		dc.w @zero-Map_Bub_internal
00014B5E 0000                       		dc.w @five-Map_Bub_internal
00014B60 0000                       		dc.w @four-Map_Bub_internal
00014B62 0000                       		dc.w @three-Map_Bub_internal
00014B64 0000                       		dc.w @two-Map_Bub_internal
00014B66 0000                       		dc.w @one-Map_Bub_internal
00014B68 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014B6A 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014B6C 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014B6E 0000                       		dc.w @blank-Map_Bub_internal
00014B70 01                         @bubble1:	dc.b 1
00014B71 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014B76 01                         @bubble2:	dc.b 1
00014B77 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014B7C 01                         @bubble3:	dc.b 1
00014B7D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014B82 01                         @bubble4:	dc.b 1
00014B83 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014B88 01                         @bubble5:	dc.b 1
00014B89 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014B8E 01                         @bubble6:	dc.b 1
00014B8F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014B94 01                         @bubblefull:	dc.b 1
00014B95 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014B9A 04                         @burst1:	dc.b 4
00014B9B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014BA0 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014BA5 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014BAA 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014BAF 04                         @burst2:	dc.b 4
00014BB0 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014BB5 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014BBA 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014BBF 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014BC4 01                         @zero_sm:	dc.b 1
00014BC5 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014BCA 01                         @five_sm:	dc.b 1
00014BCB F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014BD0 01                         @three_sm:	dc.b 1
00014BD1 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014BD6 01                         @one_sm:	dc.b 1
00014BD7 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014BDC 01                         @zero:		dc.b 1
00014BDD F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014BE2 01                         @five:		dc.b 1
00014BE3 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014BE8 01                         @four:		dc.b 1
00014BE9 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014BEE 01                         @three:		dc.b 1
00014BEF F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014BF4 01                         @two:		dc.b 1
00014BF5 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014BFA 01                         @one:		dc.b 1
00014BFB F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014C00 01                         @bubmaker1:	dc.b 1
00014C01 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014C06 01                         @bubmaker2:	dc.b 1
00014C07 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014C0C 01                         @bubmaker3:	dc.b 1
00014C0D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014C12 00                         @blank:		dc.b 0
00014C14 00                         		even
00014C14 00                         		even
00014C14                            		include	"_incObj\65 Waterfalls.asm"
00014C14                            ; ---------------------------------------------------------------------------
00014C14                            ; Object 65 - waterfalls (LZ)
00014C14                            ; ---------------------------------------------------------------------------
00014C14                            
00014C14                            Waterfall:
00014C14 7000                       		moveq	#0,d0
00014C16 1028 0024                  		move.b	obRoutine(a0),d0
00014C1A 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014C1E 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014C22                            ; ===========================================================================
00014C22 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014C24 0000                       		dc.w WFall_Animate-WFall_Index
00014C26 0000                       		dc.w WFall_ChkDel-WFall_Index
00014C28 0000                       		dc.w WFall_OnWater-WFall_Index
00014C2A 0000                       		dc.w loc_12B36-WFall_Index
00014C2C                            ; ===========================================================================
00014C2C                            
00014C2C                            WFall_Main:	; Routine 0
00014C2C 5828 0024                  		addq.b	#4,obRoutine(a0)
00014C30 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014C38 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014C3E 0028 0004 0001             		ori.b	#4,obRender(a0)
00014C44 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014C4A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014C50 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014C54 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014C56 08E8 0007 0002             		bset	#7,obGfx(a0)
00014C5C                            
00014C5C                            	@under80:
00014C5C 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014C60 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014C64 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014C68 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014C6A                            
00014C6A 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014C6E 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014C72 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014C78 6700                       		beq.s	@not49		; if not, branch
00014C7A                            
00014C7A 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014C80                            
00014C80                            	@not49:
00014C80 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014C86 6700                       		beq.s	WFall_Animate	; if not, branch
00014C88 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014C8E                            
00014C8E                            WFall_Animate:	; Routine 2
00014C8E 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014C94 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
00014C9A                            
00014C9A                            WFall_ChkDel:	; Routine 4
00014C9A 6000 C9D4                  		bra.w	RememberState
00014C9E                            ; ===========================================================================
00014C9E                            
00014C9E                            WFall_OnWater:	; Routine 6
00014C9E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014CA2 0440 0010                  		subi.w	#$10,d0
00014CA6 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014CAA 60E2                       		bra.s	WFall_Animate
00014CAC                            ; ===========================================================================
00014CAC                            
00014CAC                            loc_12B36:	; Routine 8
00014CAC 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014CB2 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014CB8 6600                       		bne.s	@animate
00014CBA 08E8 0007 0002             		bset	#7,obGfx(a0)
00014CC0                            
00014CC0                            	@animate:
00014CC0 60CC                       		bra.s	WFall_Animate
00014CC0 60CC                       		bra.s	WFall_Animate
00014CC2                            		include	"_anim\Waterfalls.asm"
00014CC2                            ; ---------------------------------------------------------------------------
00014CC2                            ; Animation script - waterfall (LZ)
00014CC2                            ; ---------------------------------------------------------------------------
00014CC2 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014CC4 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014CCA 00                         		even
00014CCA 00                         		even
00014CCA                            Map_WFall	include	"_maps\Waterfalls.asm"
00014CCA                            ; ---------------------------------------------------------------------------
00014CCA                            ; Sprite mappings - waterfalls (LZ)
00014CCA                            ; ---------------------------------------------------------------------------
00014CCA                            Map_WFall_internal:
00014CCA 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014CCC 0000                       		dc.w @cornerwide-Map_WFall_internal
00014CCE 0000                       		dc.w @cornermedium-Map_WFall_internal
00014CD0 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014CD2 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014CD4 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014CD6 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014CD8 0000                       		dc.w @vertwide-Map_WFall_internal
00014CDA 0000                       		dc.w @diagonal-Map_WFall_internal
00014CDC 0000                       		dc.w @splash1-Map_WFall_internal
00014CDE 0000                       		dc.w @splash2-Map_WFall_internal
00014CE0 0000                       		dc.w @splash3-Map_WFall_internal
00014CE2 01                         @vertnarrow:	dc.b 1
00014CE3 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014CE8 02                         @cornerwide:	dc.b 2
00014CE9 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014CEE 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014CF3 02                         @cornermedium:	dc.b 2
00014CF4 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014CF9 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014CFE 01                         @cornernarrow:	dc.b 1
00014CFF F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014D04 02                         @cornermedium2:	dc.b 2
00014D05 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014D0A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014D0F 01                         @cornernarrow2:	dc.b 1
00014D10 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014D15 01                         @cornernarrow3:	dc.b 1
00014D16 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014D1B 01                         @vertwide:	dc.b 1
00014D1C F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014D21 02                         @diagonal:	dc.b 2
00014D22 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014D27 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014D2C 02                         @splash1:	dc.b 2
00014D2D F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014D32 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014D37 02                         @splash2:	dc.b 2
00014D38 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014D3D F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014D42 02                         @splash3:	dc.b 2
00014D43 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014D48 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014D4E 00                         		even
00014D4E 00                         		even
00014D4E                            
00014D4E                            
00014D4E                            SpinDash_dust:
00014D4E                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014D4E 7000                       		moveq	#0,d0
00014D50 1028 0024                  		move.b	$24(a0),d0
00014D54 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014D58 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014D5C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D5C 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014D5E 0000                       		dc loc_1DD90-off_1DD2E; 1
00014D60 0000                       		dc loc_1DE46-off_1DD2E; 2
00014D62 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014D64                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D64                            
00014D64                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014D64 5428 0024                  		addq.b	#2,$24(a0)
00014D68 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014D70 0028 0004 0001             		or.b	#4,1(a0)
00014D76 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014D7C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014D82 317C 07AC 0002             		move	#$7AC,2(a0)
00014D88 317C D000 003E             		move	#-$3000,$3E(a0)
00014D8E 317C F580 003C             		move	#$F580,$3C(a0)
00014D94 B0FC D1C0                  		cmp	#-$2E40,a0
00014D98 6700                       		beq.s	loc_1DD8C
00014D9A 117C 0001 0034             		move.b	#1,$34(a0)
00014DA0                            ;		cmp	#2,($FFFFFF70).w
00014DA0                            ;		beq.s	loc_1DD8C
00014DA0                            ;		move	#$48C,2(a0)
00014DA0                            ;		move	#-$4FC0,$3E(a0)
00014DA0                            ;		move	#-$6E80,$3C(a0)
00014DA0                            
00014DA0                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014DA0                            ;		bsr.w	sub_16D6E
00014DA0                            
00014DA0                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014DA0 3468 003E                  		movea.w	$3E(a0),a2
00014DA4 7000                       		moveq	#0,d0
00014DA6 1028 001C                  		move.b	$1C(a0),d0
00014DAA D040                       		add	d0,d0
00014DAC 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014DB0 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014DB4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DB4 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014DB6 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014DB8 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014DBA 0000                       		dc loc_1DE20-off_1DDA4; 3
00014DBC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DBC                            
00014DBC                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014DBC 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014DC2 4A28 001D                  		tst.b	$1D(a0)
00014DC6 6600                       		bne.s	loc_1DE28
00014DC8 316A 0008 0008             		move	8(a2),8(a0)
00014DCE 117C 0000 0022             		move.b	#0,$22(a0)
00014DD4 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014DDA 6000                       		bra.s	loc_1DE28
00014DDC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DDC                            
00014DDC                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014DDC                            ;		cmp.b	#$C,$28(a2)
00014DDC                            ;		bcs.s	loc_1DE3E
00014DDC 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014DE2 6400                       		bcc.s	loc_1DE3E
00014DE4 4A2A 0039                  		tst.b	$39(a2)
00014DE8 6700                       		beq.s	loc_1DE3E
00014DEA 316A 0008 0008             		move	8(a2),8(a0)
00014DF0 316A 000C 000C             		move	$C(a2),$C(a0)
00014DF6 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014DFC 0228 0001 0022             		and.b	#1,$22(a0)
00014E02 4A28 0034                  		tst.b	$34(a0)
00014E06 6700                       		beq.s	loc_1DE06
00014E08 5968 000C                  		sub	#4,$C(a0)
00014E0C                            
00014E0C                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014E0C 4A28 001D                  		tst.b	$1D(a0)
00014E10 6600                       		bne.s	loc_1DE28
00014E12 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014E18 4A6A 0002                  		tst	2(a2)
00014E1C 6A00                       		bpl.s	loc_1DE28
00014E1E 0068 8000 0002             		or	#-$8000,2(a0)
00014E24                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E24                            
00014E24                            loc_1DE20:				; DATA XREF: h+6E30?o
00014E24                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014E24 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014E2A 4EB9 0000 C7A6             		jsr	AnimateSprite
00014E30 6100 0000                  		bsr.w	loc_1DEE4
00014E34 4EFA A8C4                  		jmp	DisplaySprite
00014E38                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E38                            
00014E38                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014E38 117C 0000 001C             		move.b	#0,$1C(a0)
00014E3E 4E75                       		rts	
00014E40                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E40                            
00014E40                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014E40 6000 A8F8                  		bra.w	DeleteObject
00014E44                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E44                            
00014E44                            
00014E44                            
00014E44                            loc_1DE4A:
00014E44 3468 003E                  	movea.w	$3E(a0),a2
00014E48 7210                       	moveq	#$10,d1
00014E4A 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014E50 6700                       	beq.s	loc_1DE64
00014E52 7206                       	moveq	#$6,d1
00014E54 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014E5A 6700                       	beq.s	loc_1DE64
00014E5C 117C 0002 0024             	move.b	#2,$24(a0)
00014E62 117C 0000 0032             	move.b	#0,$32(a0)
00014E68 4E75                       	rts
00014E6A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014E6A                            
00014E6A                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014E6A 5328 0032                  		subq.b	#1,$32(a0)
00014E6E 6A00                       		bpl.s	loc_1DEE0
00014E70 117C 0003 0032             		move.b	#3,$32(a0)
00014E76 4EBA AD0E                  		jsr	FindFreeObj
00014E7A 6600                       		bne.s	loc_1DEE0
00014E7C 1290                       		move.b	0(a0),0(a1)
00014E7E 336A 0008 0008             		move	8(a2),8(a1)
00014E84 336A 000C 000C             		move	$C(a2),$C(a1)
00014E8A 4A28 0034                  		tst.b	$34(a0)
00014E8E 6700                       		beq.s	loc_1DE9A
00014E90 5941                       		sub	#4,d1
00014E92                            
00014E92                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014E92 D369 000C                  		add	d1,$C(a1)
00014E96 137C 0000 0022             		move.b	#0,$22(a1)
00014E9C 137C 0003 001C             		move.b	#3,$1C(a1)
00014EA2 5429 0024                  		addq.b	#2,$24(a1)
00014EA6 2368 0004 0004             		move.l	4(a0),4(a1)
00014EAC 1368 0001 0001             		move.b	1(a0),1(a1)
00014EB2 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014EB8 137C 0004 0014             		move.b	#4,obActWid(a1)
00014EBE 3368 0002 0002             		move	2(a0),2(a1)
00014EC4 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014ECA 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014ED0 4A6A 0002                  		tst	2(a2)
00014ED4 6A00                       		bpl.s	loc_1DEE0
00014ED6 0069 8000 0002             		or	#-$8000,2(a1)
00014EDC                            
00014EDC                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014EDC 6100                       		bsr.s	loc_1DEE4
00014EDE 4E75                       		rts	
00014EE0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EE0                            
00014EE0                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014EE0 7000                       		moveq	#0,d0
00014EE2 1028 001A                  		move.b	$1A(a0),d0
00014EE6 B028 0030                  		cmp.b	$30(a0),d0
00014EEA 6700 0000                  		beq.w	locret_1DF36
00014EEE 1140 0030                  		move.b	d0,$30(a0)
00014EF2 45F9 0000 0000             		lea	(off_1E074).l,a2
00014EF8 D040                       		add	d0,d0
00014EFA D4F2 0000                  		add	(a2,d0.w),a2
00014EFE 3A1A                       		move	(a2)+,d5
00014F00 5345                       		subq	#1,d5
00014F02 6B00 0000                  		bmi.w	locret_1DF36
00014F06 3828 003C                  		move $3C(a0),d4
00014F0A                            
00014F0A                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014F0A 7200                       		moveq	#0,d1
00014F0C 321A                       		move	(a2)+,d1
00014F0E 3601                       		move	d1,d3
00014F10 E04B                       		lsr.w	#8,d3
00014F12 0243 00F0                  		and	#$F0,d3	; 'ð'
00014F16 0643 0010                  		add	#$10,d3
00014F1A 0241 0FFF                  		and	#$FFF,d1
00014F1E EB89                       		lsl.l	#5,d1
00014F20 0681 0000 0000             		add.l	#Art_Dust,d1
00014F26 3404                       		move	d4,d2
00014F28 D843                       		add	d3,d4
00014F2A D843                       		add	d3,d4
00014F2C 4EB9 0000 11A2             		jsr	(QueueDMATransfer).l
00014F32 51CD FFD6                  		dbf	d5,loc_1DF0A
00014F36 4E75                           rts
00014F38                            
00014F38                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014F38 4E75                       		rts	
00014F3A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F3A 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014F3C 0000                       		dc byte_1DF43-off_1DF38; 1
00014F3E 0000                       		dc byte_1DF4F-off_1DF38; 2
00014F40 0000                       		dc byte_1DF58-off_1DF38; 3
00014F42 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014F45 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014F51 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014F5A 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014F60                            ; -------------------------------------------------------------------------------
00014F60                            ; Unknown Sprite Mappings
00014F60                            ; -------------------------------------------------------------------------------
00014F60                            MapUnc_1DF5E:
00014F60 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014F62 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014F64 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014F66 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014F68 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014F6A 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014F6C 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014F6E 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014F70 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014F72 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014F74 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014F76 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014F78 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014F7A 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014F7C 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014F7E 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014F80 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014F82 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014F84 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014F86 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014F88 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014F8A 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014F8C 00                         word_1DF8A:	dc.b 0
00014F8D 01                         word_1DF8C:	dc.b 1
00014F8E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014F93 01                         word_1DF96:	dc.b 1
00014F94 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014F99 01                         word_1DFA0:	dc.b 1
00014F9A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014F9F 01                         word_1DFAA:	dc.b 1
00014FA0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014FA5 01                         word_1DFB4:	dc.b 1
00014FA6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014FAB 01                         word_1DFBE:	dc.b 1
00014FAC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014FB1 01                         word_1DFC8:	dc.b 1
00014FB2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FB7 01                         word_1DFD2:	dc.b 1
00014FB8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FBD 01                         word_1DFDC:	dc.b 1
00014FBE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014FC3 01                         word_1DFE6:	dc.b 1
00014FC4 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FC9 01                         word_1DFF0:	dc.b 1
00014FCA 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FCF 01                         word_1DFFA:	dc.b 1
00014FD0 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014FD5 02                         word_1E004:	dc.b 2
00014FD6 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014FDB 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014FE0 02                         word_1E016:	dc.b 2
00014FE1 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014FE6 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014FEB 02                         word_1E028:	dc.b 2
00014FEC F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014FF1 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014FF6 02                         word_1E03A:	dc.b 2
00014FF7 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014FFC 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015001 01                         word_1E04C:	dc.b 1
00015002 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015007 01                         word_1E056:	dc.b 1
00015008 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001500D 01                         word_1E060:	dc.b 1
0001500E F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00015013 01                         word_1E06A:	dc.b 1
00015014 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015019 00                         	dc.b 0
0001501A 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001501C 0000                       	dc word_1E0A2-off_1E074; 1
0001501E 0000                       	dc word_1E0A6-off_1E074; 2
00015020 0000                       	dc word_1E0AA-off_1E074; 3
00015022 0000                       	dc word_1E0AE-off_1E074; 4
00015024 0000                       	dc word_1E0B2-off_1E074; 5
00015026 0000                       	dc word_1E0B6-off_1E074; 6
00015028 0000                       	dc word_1E0BA-off_1E074; 7
0001502A 0000                       	dc word_1E0BE-off_1E074; 8
0001502C 0000                       	dc word_1E0C2-off_1E074; 9
0001502E 0000                       	dc word_1E0C6-off_1E074; 10
00015030 0000                       	dc word_1E0CA-off_1E074; 11
00015032 0000                       	dc word_1E0CE-off_1E074; 12
00015034 0000                       	dc word_1E0D2-off_1E074; 13
00015036 0000                       	dc word_1E0D8-off_1E074; 14
00015038 0000                       	dc word_1E0DE-off_1E074; 15
0001503A 0000                       	dc word_1E0E4-off_1E074; 16
0001503C 0000                       	dc word_1E0EA-off_1E074; 17
0001503E 0000                       	dc word_1E0EA-off_1E074; 18
00015040 0000                       	dc word_1E0EA-off_1E074; 19
00015042 0000                       	dc word_1E0EA-off_1E074; 20
00015044 0000                       	dc word_1E0EC-off_1E074; 21
00015046 0000                       word_1E0A0:	dc 0
00015048 0001                       word_1E0A2:	dc 1
0001504A 7000                       	dc $7000
0001504C 0001                       word_1E0A6:	dc 1
0001504E F008                       	dc $F008
00015050 0001                       word_1E0AA:	dc 1
00015052 F018                       	dc $F018
00015054 0001                       word_1E0AE:	dc 1
00015056 F028                       	dc $F028
00015058 0001                       word_1E0B2:	dc 1
0001505A F038                       	dc $F038
0001505C 0001                       word_1E0B6:	dc 1
0001505E F048                       	dc $F048
00015060 0001                       word_1E0BA:	dc 1
00015062 7058                       	dc $7058
00015064 0001                       word_1E0BE:	dc 1
00015066 7060                       	dc $7060
00015068 0001                       word_1E0C2:	dc 1
0001506A 7068                       	dc $7068
0001506C 0001                       word_1E0C6:	dc 1
0001506E 7070                       	dc $7070
00015070 0001                       word_1E0CA:	dc 1
00015072 7078                       	dc $7078
00015074 0001                       word_1E0CE:	dc 1
00015076 7080                       	dc $7080
00015078 0002                       word_1E0D2:	dc 2
0001507A 1088                       	dc $1088
0001507C 708A                       	dc $708A
0001507E 0002                       word_1E0D8:	dc 2
00015080 3092                       	dc $3092
00015082 7096                       	dc $7096
00015084 0002                       word_1E0DE:	dc 2
00015086 509E                       	dc $509E
00015088 70A4                       	dc $70A4
0001508A 0002                       word_1E0E4:	dc 2
0001508C 50AC                       	dc $50AC
0001508E 70B2                       	dc $70B2
00015090 0000                       word_1E0EA:	dc 0
00015092 0001                       word_1E0EC:	dc 1
00015094 F0BA                       	dc $F0BA
00015096                            	even
00015096                            
00015096                            ; ===========================================================================
00015096                            
00015096                            LoadPlayerPal:
00015096 7000                       		moveq	#0,d0
00015098 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001509C 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000150A0 4E75                       		rts
000150A2                            
000150A2                            	@palLUT:
000150A2 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
000150A7 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
000150AC                            
000150AC                            LoadPlayerWaterPal:
000150AC 7000                       		moveq	#0,d0
000150AE 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000150B2 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000150B6 4E75                       		rts
000150B8                            
000150B8                            	@palLUT:
000150B8 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
000150BD 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
000150C2                            
000150C2                            ; ---------------------------------------------------------------------------
000150C2                            ; Object 01 - Sonic
000150C2                            ; ---------------------------------------------------------------------------
000150C2                            
000150C2                            SonicPlayer:
000150C2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000150C6 6700                       		beq.s	Sonic_Normal	; if not, branch
000150C8 4EF9 0000 0000             		jmp	(DebugMode).l
000150CE                            ; ===========================================================================
000150CE                            
000150CE                            Sonic_Normal:
000150CE 7000                       		moveq	#0,d0
000150D0 1028 0024                  		move.b	obRoutine(a0),d0
000150D4 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
000150D8 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
000150DC                            ; ===========================================================================
000150DC 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
000150DE 0000                       		dc.w Sonic_Control-Sonic_Index
000150E0 0000                       		dc.w Sonic_Hurt-Sonic_Index
000150E2 0000                       		dc.w Sonic_Death-Sonic_Index
000150E4 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
000150E6                            ; ===========================================================================
000150E6                            
000150E6                            Sonic_Main:	; Routine 0
000150E6 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000150EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000150F0 117C 0013 0016             		move.b	#$13,obHeight(a0)
000150F6 117C 0009 0017             		move.b	#9,obWidth(a0)
000150FC 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015104 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001510A 317C 0100 0018             		move.w	#$100,obPriority(a0)
00015110 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015116 117C 0004 0001             		move.b	#4,obRender(a0)
0001511C 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00015122 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015128 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
0001512E 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015134                            
00015134                            Sonic_Control:    ; Routine 2
00015134 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015138 6700 0000                  		beq.w	@cont    
0001513C 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
0001513E                             
0001513E                            	@cont: 
0001513E 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
00015142 6700                       		beq.s    loc_12C58    ; if not, branch
00015144 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
0001514A 6700                       		beq.s    loc_12C58    ; if not, branch
0001514C 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
00015152 4238 F7CC                  		clr.b    (f_lockctrl).w
00015156 4E75                       		rts
00015158                            		
00015158                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
00015158                            ; ---------------------------------------------------------------------------
00015158                            ; Subroutine to    horizontally pan the camera view ahead of the player
00015158                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
00015158                            ; ---------------------------------------------------------------------------
00015158                            
00015158                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00015158                            
00015158                            
00015158                            Sonic_PanCamera:
00015158 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
0001515C 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
00015160 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
00015162 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
00015164                            
00015164                                @abs_inertia:
00015164                            
00015164                            ; These lines were intended to prevent the Camera from panning while
00015164                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
00015164                            ; However, given that no such object exists in Sonic 1, I just went
00015164                            ; ahead and commented these out.
00015164                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
00015164                            ;        beq.s    @skip                    ; if not, branch
00015164                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
00015164                            ;        bcs.s    @reset_pan                ; if so, branch
00015164                            
00015164                            ; These lines aren't part of the original routine; I added them myself.
00015164                            ; If you've ported the Spin Dash, uncomment the following lines of code
00015164                            ; to allow the camera to pan ahead while charging the Spin Dash:
00015164 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
00015168 6700                               beq.s    @skip                    ; if not, branch
0001516A 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00015170 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
00015172 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00015174                            
00015174                                @skip:
00015174 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
00015178 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
0001517A 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
0001517E 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00015180                            
00015180                                @pan_right:
00015180 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015182 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00015186 6500                               bcs.s    @update_pan                ; if not, branch
00015188 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
0001518C 6000                               bra.s    @update_pan                ; branch
0001518E                            ; ---------------------------------------------------------------------------
0001518E                            
0001518E                                @pan_left:
0001518E 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015190 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015194 6400                               bcc.s    @update_pan                ; if not, branch
00015196 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
0001519A 6000                               bra.s    @update_pan                ; branch
0001519C                            ; ---------------------------------------------------------------------------
0001519C                            
0001519C                                @reset_pan:
0001519C 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000151A0 6700                               beq.s    @update_pan                ; if so, branch
000151A2 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000151A4                                 
000151A4                                @reset_right:
000151A4 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000151A6 6000                               bra.s    @update_pan                ; branch
000151A8                            ; ---------------------------------------------------------------------------
000151A8                            
000151A8                                @reset_left:
000151A8 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000151AA                            
000151AA                                @update_pan:
000151AA 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000151AE 4E75                               rts                                ; return
000151B0                                 
000151B0                            ; End of function Sonic_PanCamera
000151B0                            
000151B0                            
000151B0                            ; ===========================================================================
000151B0                            
000151B0                            loc_12C58:
000151B0 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
000151B4 6600                       		bne.s	loc_12C64	; if yes, branch
000151B6 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
000151BC                            
000151BC                            loc_12C64:
000151BC 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
000151C2 6600                       		bne.s	loc_12C7E	; if yes, branch
000151C4 7000                       		moveq	#0,d0
000151C6 1028 0022                  		move.b	obStatus(a0),d0
000151CA 0240 0006                  		andi.w	#6,d0
000151CE 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
000151D2 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
000151D6                            
000151D6                            loc_12C7E:
000151D6 6100                       		bsr.s	Sonic_Display
000151D8 6100 0000                  		bsr.w	Sonic_RecordPosition
000151DC 6100 0000                  		bsr.w	Sonic_Water
000151E0 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
000151E6 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000151EC 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
000151F0 6700                       		beq.s	loc_12CA6
000151F2 4A28 001C                  		tst.b	obAnim(a0)
000151F6 6600                       		bne.s	loc_12CA6
000151F8 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
000151FE                            
000151FE                            loc_12CA6:
000151FE 6100 0000                  		bsr.w	Sonic_Animate
00015202 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015206 6B00                       		bmi.s	loc_12CB6
00015208 4EB9 0000 0000             		jsr	(ReactToItem).l
0001520E                            
0001520E                            loc_12CB6:
0001520E 6100 0000                  		bsr.w	Sonic_Loops
00015212 6100 0000                  		bsr.w	Sonic_LoadGfx
00015216 4E75                       		rts	
00015218                            ; ===========================================================================
00015218 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
0001521A 0000                       		dc.w Sonic_MdJump-Sonic_Modes
0001521C 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
0001521E 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
00015220                            ; ---------------------------------------------------------------------------
00015220                            ; Music	to play	after invincibility wears off
00015220                            ; ---------------------------------------------------------------------------
00015220                            MusicList2:
00015220 00                         		dc.b bgm_GHZ
00015221 00                         		dc.b bgm_LZ
00015222 00                         		dc.b bgm_MZ
00015223 00                         		dc.b bgm_SLZ
00015224 00                         		dc.b bgm_SYZ
00015225 00                         		dc.b bgm_SBZ
00015226                            		; The ending doesn't get an entry
00015226                            		even
00015226                            
00015226                            		include	"_incObj\Sonic Display.asm"
00015226                            ; ---------------------------------------------------------------------------
00015226                            ; Subroutine to display Sonic and set music
00015226                            ; ---------------------------------------------------------------------------
00015226                            
00015226                            Sonic_Display:
00015226 3028 0030                  		move.w    flashtime(a0),d0
0001522A 6700                       		beq.s    @showAfterImage
0001522C 5368 0030                  		subq.w    #1,flashtime(a0)
00015230 E648                               	lsr.w    #3,d0
00015232 6400                               	bcc.s    @chkinvincible
00015234                            
00015234                            	@showAfterImage:
00015234 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015238 4A40                       		tst.w    d0                    ; is inertia greater than 0?
0001523A 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
0001523C 4440                       		neg        d0                    ; if not, negate it
0001523E                            
0001523E                            	@AfterImage_Start:        
0001523E 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015242 6700                       		beq.s	@display	; if not, don't show the After Image
00015244                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
00015244                            		;blt.s    @display	; if not, don't show the After Image
00015244                            	
00015244                            	@AfterImage_Start2:    
00015244 6100 A940                          	bsr.w    FindFreeObj    ; search a free space in object RAM
00015248 6600                               	bne.s    @display    ; if not have, don't load the After Image
0001524A 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
0001524E 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
00015254 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
0001525A 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
00015260                            
00015260                                	@display:
00015260 4EB9 0000 F6FA                     	jsr    (DisplaySprite).l
00015266                            
00015266                            	@chkinvincible:
00015266 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
0001526A 6700                       		beq.s	@chkshoes	; if not, branch
0001526C 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
00015270 6700                       		beq.s	@chkshoes	; if no	time remains, branch
00015272 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
00015276 6600                       		bne.s	@chkshoes
00015278 4A38 F7AA                  		tst.b	(f_lockscreen).w
0001527C 6600                       		bne.s	@removeinvincible
0001527E 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015284 6500                       		bcs.s	@removeinvincible
00015286 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001528A 4EB9 0000 0FC6                     	jsr	(PlaySound).l    ; play normal music
00015290                            
00015290                            	@removeinvincible:
00015290 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015296                            
00015296                            	@chkshoes:
00015296 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001529A 6700                       		beq.s	@exit		; if not, branch
0001529C 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
000152A0 6700                       		beq.s	@exit
000152A2 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
000152A6 6600                       		bne.s	@exit
000152A8 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000152AE 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000152B4 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000152BA 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
000152C0 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000152C4 4EB9 0000 0FC6                     	jsr	(PlaySound).l    ; play normal music
000152CA                            		
000152CA                            	@exit:
000152CA 4E75                       		rts	
000152CA 4E75                       		rts	
000152CC                            		include	"_incObj\Sonic RecordPosition.asm"
000152CC                            ; ---------------------------------------------------------------------------
000152CC                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000152CC                            ; ---------------------------------------------------------------------------
000152CC                            
000152CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152CC                            
000152CC                            
000152CC                            Sonic_RecordPosition:
000152CC 3038 F7A8                  		move.w	(v_trackpos).w,d0
000152D0 43F8 CB00                  		lea	(v_tracksonic).w,a1
000152D4 43F1 0000                  		lea	(a1,d0.w),a1
000152D8 32E8 0008                  		move.w	obX(a0),(a1)+
000152DC 32E8 000C                  		move.w	obY(a0),(a1)+
000152E0 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
000152E4 4E75                       		rts	
000152E6                            ; End of function Sonic_RecordPosition
000152E6                            ; End of function Sonic_RecordPosition
000152E6                            		include	"_incObj\Sonic Water.asm"
000152E6                            ; ---------------------------------------------------------------------------
000152E6                            ; Subroutine for Sonic when he's underwater
000152E6                            ; ---------------------------------------------------------------------------
000152E6                            
000152E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152E6                            
000152E6                            
000152E6                            Sonic_Water:
000152E6 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
000152EC 6700                       		beq.s	WaterTagforMZ	; if yes, branch
000152EE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
000152F4 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
000152F6                            
000152F6                            	Sonic_Water_Exit:
000152F6 4E75                       		rts	
000152F8                            ; ===========================================================================
000152F8                            
000152F8                            	Sonic_Water_LZ:
000152F8 3038 F646                  		move.w	(v_waterpos1).w,d0
000152FC B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015300 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015304 6000 0000                  		bra	WaterStatus
00015308                            	WaterTagforMZ:
00015308 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001530E 6700 0000                  		beq.w	Abovewater	; if yes, branch
00015312                            		;move.w #$F,d0             ;TIS Length ($F = full line)
00015312                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
00015312                                ;    lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
00015312                            	;	jsr	Palload_Loop
00015312                            	WaterStatus:
00015312 08E8 0006 0022             		bset	#6,obStatus(a0)
00015318 6600 FFDC                  		bne.w	Sonic_Water_Exit
0001531C 6100 0000                  		bsr.w	ResumeMusic
00015320 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015326                            
00015326 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
0001532C 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
00015332 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
00015338 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
0001533E 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
00015344 E0E8 0010                  		asr	obVelX(a0)
00015348 E0E8 0012                  		asr	obVelY(a0)
0001534C E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
00015350 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
00015354                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015354 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015364 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001536A 6600 0000                  		bne.w	@return
0001536E                            		
0001536E                            		
0001536E                            	@return:
0001536E 4E75                       		rts
00015370                            ; ===========================================================================
00015370                            
00015370                            Abovewater:
00015370 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015376 6700 FF7E                  		beq.w	Sonic_Water_Exit
0001537A 6100 0000                  		bsr.w	ResumeMusic
0001537E 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015384                            
00015384 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001538A 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015390 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015396 E1E8 0012                  		asl	obVelY(a0)
0001539A 6700 FF5A                  		beq.w	Sonic_Water_Exit
0001539E 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000153A4 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
000153AA 6E00                       		bgt.s	@belowmaxspeed
000153AC 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
000153B2                            
000153B2                            	@belowmaxspeed:
000153BC                            ; End of function Sonic_Water
000153BC                            ; End of function Sonic_Water
000153BC                            		include "_incObj\03 Hangable Sprite.asm"
000153BC                            ; ===========================================================================
000153BC                            ; ----------------------------------------------------------------------------
000153BC                            ; Object 03 - Invisible sprite that you can hang on to
000153BC                            ; ----------------------------------------------------------------------------
000153BC                            ; Sprite_2C92C:
000153BC                            Obj03:
000153BC 7000                       	moveq    #0,d0
000153BE 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
000153C2 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
000153C6 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
000153CA                            ; ===========================================================================
000153CA                            ; off_2C93A:
000153CA                            Obj03_Index:
000153CA 0000                           dc.w Obj03_Main-Obj03_Index
000153CC 0000                               dc.w Obj03_Init-Obj03_Index
000153CE                            ; ===========================================================================
000153CE                            ; loc_2C93E:
000153CE                            Obj03_Init:
000153CE 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
000153D2 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
000153D8 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
000153DE 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
000153E4                            ; loc_2C954:
000153E4                            Obj03_Main:
000153E4 45E8 0030                      lea    $30(a0),a2
000153E8 43F8 D000                      lea    (v_player).w,a1 ; a1=character
000153EC 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
000153F0 6100                           bsr.s    Obj03_Check
000153F2                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
000153F2                            ;    addq.w    #1,a2                          ;disabled
000153F2                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
000153F2                            ;    bsr.s    Obj03_Check         	;disabled
000153F2 4EF9 0000 0000             	jmp		bonu_chkdel
000153F8                            ; ===========================================================================
000153F8                            ; loc_2C972:
000153F8                            Obj03_Check:
000153F8 4A12                       		tst.b	(a2)
000153FA 6700                       		beq.s	loc_2C9A0
000153FC 0200 0070                  		andi.b	#btnABC,d0
00015400 6700 0000                  		beq.w	Obj03_Check_End
00015404 4238 F7C8                  		clr.b	f_lockmulti.w
00015408 4212                       		clr.b	(a2)
0001540A 157C 0012 0002             		move.b	#$12,2(a2)
00015410 0240 0F00                  		andi.w	#$F00,d0
00015414 6700                       		beq.s	loc_2C954
00015416 157C 003C 0002             		move.b	#$3C,2(a2)
0001541C                            	
0001541C                            loc_2C954:
0001541C 337C FD00 0012             		move.w	#-$300,y_vel(a1)
00015422 6000 0000                  		bra.w	Obj03_Check_End
00015426                            ; ===========================================================================
00015426                            
00015426                            loc_2C9A0:
00015426 4A2A 0002                  		tst.b	2(a2)
0001542A 6700                       		beq.s	loc_2C972
0001542C 532A 0002                  		subq.b	#1,2(a2)
00015430 6600 0000                  		bne.w	Obj03_Check_End
00015434                            
00015434                            loc_2C972:
00015434 3029 0008                  		move.w	obX(a1),d0
00015438 9068 0008                  		sub.w	obX(a0),d0
0001543C 0640 0018                  		addi.w	#$18,d0
00015440 0C40 0030                  		cmpi.w	#$30,d0
00015444 6400 0000                  		bhs.w	Obj03_Check_End
00015448 3229 000C                  		move.w	obY(a1),d1
0001544C 9268 000C                  		sub.w	obY(a0),d1
00015450 0C41 0010                  		cmpi.w	#$10,d1
00015454 6400 0000                  		bhs.w	Obj03_Check_End
00015458 4A38 F7C8                  		tst.b	f_lockmulti.w
0001545C 6B00                       		bmi.s	Obj03_Check_End
0001545E 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00015464 6400                       		bhs.s	Obj03_Check_End
00015466 4A78 FFFA                  		tst.w	(f_debugmode).w
0001546A 6600                       		bne.s	Obj03_Check_End
0001546C 4269 0010                  		clr.w	x_vel(a1)
00015470 4269 0012                  		clr.w	y_vel(a1)
00015474 4269 0020                  		clr.w	obInertia(a1)
00015478 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001547E 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015484 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
0001548A 14BC 0001                  		move.b	#1,(a2)
0001548E                            
0001548E                            ; return_2CA08:
0001548E                            Obj03_Check_End:
0001548E 4E75                       		rts
0001548E 4E75                       		rts
00015490                            
00015490                            ; ===========================================================================
00015490                            ; ---------------------------------------------------------------------------
00015490                            ; Modes	for controlling	Sonic
00015490                            ; ---------------------------------------------------------------------------
00015490                            
00015490                            Sonic_MdNormal:
00015490 6100 0000                  		bsr.w	Sonic_Peelout
00015494 6100 0000                  		bsr.w	Sonic_SpinDash
00015498 6100 0000                  		bsr.w	Sonic_Jump
0001549C 6100 0000                  		bsr.w	Sonic_SlopeResist
000154A0 6100 0000                  		bsr.w	Sonic_Move
000154A4 6100 0000                  		bsr.w	Sonic_Roll
000154A8 6100 0000                  		bsr.w	Sonic_LevelBound
000154AC 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
000154B2 6100 0000                  		bsr.w	Sonic_AnglePos
000154B6 6100 0000                  		bsr.w	Sonic_SlopeRepel
000154BA 4E75                       		rts	
000154BC                            
000154BC                            ; ===========================================================================
000154BC                            
000154BC                            Sonic_MdJump:
000154BC 6100 0000                  		bsr.w   Sonic_AirRoll
000154C0 6100 0000                  		bsr.w	Sonic_JumpHeight
000154C4 6100 0000                  		bsr.w	Sonic_JumpDirection
000154C8 6100 0000                  		bsr.w	Sonic_LevelBound
000154CC 4EB9 0000 F6AE             		jsr	(ObjectFall).l
000154D2 0828 0006 0022             		btst	#6,obStatus(a0)
000154D8 6700                       		beq.s	loc_12E5C
000154DA 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000154E0                            
000154E0                            loc_12E5C:
000154E0 6100 0000                  		bsr.w	Sonic_JumpAngle
000154E4 6100 0000                  		bsr.w	Sonic_Floor
000154E8 4E75                       		rts	
000154EA                            ; ===========================================================================
000154EA                            
000154EA                            Sonic_MdRoll:
000154EA 6100 0000                  		bsr.w	Sonic_Jump
000154EE 6100 0000                  		bsr.w	Sonic_RollRepel
000154F2 6100 0000                  		bsr.w	Sonic_RollSpeed
000154F6 6100 0000                  		bsr.w	Sonic_LevelBound
000154FA 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
00015500 6100 0000                  		bsr.w	Sonic_AnglePos
00015504 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015508 4E75                       		rts	
0001550A                            ; ===========================================================================
0001550A                            
0001550A                            Sonic_MdJump2:
0001550A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001550E 6100 0000                  		bsr.w	Sonic_JumpDirection
00015512 6100 0000                  		bsr.w	Sonic_LevelBound
00015516 4EB9 0000 F6AE             		jsr	(ObjectFall).l
0001551C 0828 0006 0022             		btst	#6,obStatus(a0)
00015522 6700                       		beq.s	loc_12EA6
00015524 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001552A                            
0001552A                            loc_12EA6:
0001552A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001552E 6100 0000                  		bsr.w	Sonic_Floor
00015532 4E75                       		rts	
00015534                            
00015534                            		include	"_incObj\Sonic Move.asm"
00015534                            ; ---------------------------------------------------------------------------
00015534                            ; Subroutine to	make Sonic walk/run
00015534                            ; ---------------------------------------------------------------------------
00015534                            
00015534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015534                            
00015534                            
00015534                            Sonic_Move:
00015534 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015538 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
0001553C 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015540 4A38 F7CA                  		tst.b	(f_jumponly).w
00015544 6600 0000                  		bne.w	loc_12FEE
00015548 4A68 003E                  		tst.w	$3E(a0)
0001554C 6600 0000                  		bne.w	Sonic_ResetScr
00015550 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015556 6700                       		beq.s	@notleft	; if not, branch
00015558 6100 0000                  		bsr.w	Sonic_MoveLeft
0001555C                            
0001555C                            	@notleft:
0001555C 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015562 6700                       		beq.s	@notright	; if not, branch
00015564 6100 0000                  		bsr.w	Sonic_MoveRight
00015568                            
00015568                            	@notright:
00015568 1028 0026                  		move.b	obAngle(a0),d0
0001556C 0600 0020                  		addi.b	#$20,d0
00015570 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015574 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015578 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
0001557C 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015580 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015586 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001558C 0828 0003 0022             		btst	#3,obStatus(a0)
00015592 6700                       		beq.s	Sonic_Balance
00015594 7000                       		moveq	#0,d0
00015596 1028 003D                  		move.b	$3D(a0),d0
0001559A ED48                       		lsl.w	#6,d0
0001559C 43F8 D000                  		lea	(v_objspace).w,a1
000155A0 43F1 0000                  		lea	(a1,d0.w),a1
000155A4 4A29 0022                  		tst.b	obStatus(a1)
000155A8 6B00                       		bmi.s	Sonic_LookUp
000155AA 7200                       		moveq	#0,d1
000155AC 1229 0014                  		move.b	obActWid(a1),d1
000155B0 3401                       		move.w	d1,d2
000155B2 D442                       		add.w	d2,d2
000155B4 5942                       		subq.w	#4,d2
000155B6 D268 0008                  		add.w	obX(a0),d1
000155BA 9269 0008                  		sub.w	obX(a1),d1
000155BE 0C41 0004                  		cmpi.w	#4,d1
000155C2 6D00                       		blt.s	loc_12F6A
000155C4 B242                       		cmp.w	d2,d1
000155C6 6C00                       		bge.s	loc_12F5A
000155C8 6000                       		bra.s	Sonic_LookUp
000155CA                            ; ===========================================================================
000155CA                            
000155CA                            Sonic_Balance:
000155CA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000155D0 0C41 000C                  		cmpi.w	#$C,d1
000155D4 6D00                       		blt.s	Sonic_LookUp
000155D6 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000155DC 6600                       		bne.s	loc_12F62
000155DE                            
000155DE                            loc_12F5A:
000155DE 08A8 0000 0022             		bclr	#0,obStatus(a0)
000155E4 6000                       		bra.s	loc_12F70
000155E6                            ; ===========================================================================
000155E6                            
000155E6                            loc_12F62:
000155E6 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000155EC 6600                       		bne.s	Sonic_LookUp
000155EE                            
000155EE                            loc_12F6A:
000155EE 08E8 0000 0022             		bset	#0,obStatus(a0)
000155F4                            
000155F4                            loc_12F70:
000155F4 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
000155FA 6000 0000                  		bra.w	Sonic_ResetScr
000155FE                            ; ===========================================================================
000155FE                            
000155FE                            Sonic_LookUp:
000155FE 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00015604 6700                       		beq.s	Sonic_Duck	; if not, branch
00015606 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001560C 5238 C903                  		addq.b	#1,($FFFFC903).w
00015610 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00015616 6500                       		bcs.s	Sonic_ResetScr_Part2
00015618 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001561E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00015624 6700                       		beq.s	loc_12FC2
00015626 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001562A 6000                       		bra.s	loc_12FC2
0001562C                            ; ===========================================================================
0001562C                            
0001562C                            Sonic_Duck:
0001562C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00015632 6700                       		beq.s	Sonic_ResetScr	; if not, branch
00015634 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001563A 5238 C903                  		addq.b	#1,($FFFFC903).w
0001563E 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00015644 6500                       		bcs.s	Sonic_ResetScr_Part2
00015646 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001564C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00015652 6700                       		beq.s	loc_12FC2
00015654 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015658 6000                       		bra.s	loc_12FC2
0001565A                            ; ===========================================================================
0001565A                            
0001565A                            Sonic_ResetScr:
0001565A 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00015660                            		
00015660                            Sonic_ResetScr_Part2:
00015660 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00015666 6700                       		beq.s	loc_12FC2	; if yes, branch
00015668 6400                       		bcc.s	loc_12FBE
0001566A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001566E                            
0001566E                            loc_12FBE:
0001566E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015672                            
00015672                            loc_12FC2:
00015672 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015676 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
0001567A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001567C 3028 0020                  		move.w	obInertia(a0),d0
00015680 6700                       		beq.s	loc_12FEE
00015682 6B00                       		bmi.s	loc_12FE2
00015684 9045                       		sub.w	d5,d0
00015686 6400                       		bcc.s	loc_12FDC
00015688 303C 0000                  		move.w	#0,d0
0001568C                            
0001568C                            loc_12FDC:
0001568C 3140 0020                  		move.w	d0,obInertia(a0)
00015690 6000                       		bra.s	loc_12FEE
00015692                            ; ===========================================================================
00015692                            
00015692                            loc_12FE2:
00015692 D045                       		add.w	d5,d0
00015694 6400                       		bcc.s	loc_12FEA
00015696 303C 0000                  		move.w	#0,d0
0001569A                            
0001569A                            loc_12FEA:
0001569A 3140 0020                  		move.w	d0,obInertia(a0)
0001569E                            
0001569E                            loc_12FEE:
0001569E 4A28 0039                  		tst.b	$39(a0) 	;Peelout
000156A2 6600                       		bne.s	loc_1300C 	;Peelout
000156A4 1028 0026                  		move.b	obAngle(a0),d0
000156A8 4EB9 0000 37AE             		jsr	(CalcSine).l
000156AE C3E8 0020                  		muls.w	obInertia(a0),d1
000156B2 E081                       		asr.l	#8,d1
000156B4 3141 0010                  		move.w	d1,obVelX(a0)
000156B8 C1E8 0020                  		muls.w	obInertia(a0),d0
000156BC E080                       		asr.l	#8,d0
000156BE 3140 0012                  		move.w	d0,obVelY(a0)
000156C2                            
000156C2                            loc_1300C:
000156C2 1028 0026                  		move.b	obAngle(a0),d0
000156C6 0600 0040                  		addi.b	#$40,d0
000156CA 6B00                       		bmi.s	locret_1307C
000156CC 123C 0040                  		move.b	#$40,d1
000156D0 4A68 0020                  		tst.w	obInertia(a0)
000156D4 6700                       		beq.s	locret_1307C
000156D6 6B00                       		bmi.s	loc_13024
000156D8 4441                       		neg.w	d1
000156DA                            
000156DA                            loc_13024:
000156DA 1028 0026                  		move.b	obAngle(a0),d0
000156DE D001                       		add.b	d1,d0
000156E0 3F00                       		move.w	d0,-(sp)
000156E2 6100 0000                  		bsr.w	Sonic_WalkSpeed
000156E6 301F                       		move.w	(sp)+,d0
000156E8 4A41                       		tst.w	d1
000156EA 6A00                       		bpl.s	locret_1307C
000156EC E141                       		asl.w	#8,d1
000156EE 0600 0020                  		addi.b	#$20,d0
000156F2 0200 00C0                  		andi.b	#$C0,d0
000156F6 6700                       		beq.s	loc_13078
000156F8 0C00 0040                  		cmpi.b	#$40,d0
000156FC 6700                       		beq.s	loc_13066
000156FE 0C00 0080                  		cmpi.b	#$80,d0
00015702 6700                       		beq.s	loc_13060
00015704 D368 0010                  		add.w	d1,obVelX(a0)
00015708 08E8 0005 0022             		bset	#5,obStatus(a0)
0001570E 317C 0000 0020             		move.w	#0,obInertia(a0)
00015714 4E75                       		rts	
00015716                            ; ===========================================================================
00015716                            
00015716                            loc_13060:
00015716 9368 0012                  		sub.w	d1,obVelY(a0)
0001571A 4E75                       		rts	
0001571C                            ; ===========================================================================
0001571C                            
0001571C                            loc_13066:
0001571C 9368 0010                  		sub.w	d1,obVelX(a0)
00015720 08E8 0005 0022             		bset	#5,obStatus(a0)
00015726 317C 0000 0020             		move.w	#0,obInertia(a0)
0001572C 4E75                       		rts	
0001572E                            ; ===========================================================================
0001572E                            
0001572E                            loc_13078:
0001572E D368 0012                  		add.w	d1,obVelY(a0)
00015732                            
00015732                            locret_1307C:
00015732 4E75                       		rts	
00015734                            ; End of function Sonic_Move
00015734                            
00015734                            
00015734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015734                            
00015734                            
00015734                            Sonic_MoveLeft:
00015734 3028 0020                  		move.w	obInertia(a0),d0
00015738 6700                       		beq.s	loc_13086
0001573A 6A00                       		bpl.s	loc_130B2
0001573C                            
0001573C                            loc_13086:
0001573C 08E8 0000 0022             		bset	#0,$22(a0)
00015742 6600                       		bne.s	loc_1309A
00015744 08A8 0005 0022             		bclr	#5,$22(a0)
0001574A 117C 0001 001D             		move.b	#1,$1D(a0)
00015750                            
00015750                            loc_1309A:
00015750 9045                       		sub.w	d5,d0
00015752 3206                       		move.w	d6,d1
00015754 4441                       		neg.w	d1
00015756 B041                       		cmp.w	d1,d0
00015758 6E00                       		bgt.s	loc_130A6
0001575A D045                       		add.w	d5,d0
0001575C B041                       		cmp.w	d1,d0
0001575E 6F00                       		ble.s	loc_130A6
00015760 3001                       		move.w	d1,d0
00015762                            
00015762                            loc_130A6:
00015762 3140 0020                  		move.w	d0,obInertia(a0)
00015766 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
0001576C 4E75                       		rts
0001576E                            ; ===========================================================================
0001576E                            
0001576E                            loc_130B2:
0001576E 9044                       		sub.w	d4,d0
00015770 6400                       		bcc.s	loc_130BA
00015772 303C FF80                  		move.w	#-$80,d0
00015776                            
00015776                            loc_130BA:
00015776 3140 0020                  		move.w	d0,obInertia(a0)
0001577A 1228 0026                  		move.b	obAngle(a0),d1
0001577E 0601 0020                  		addi.b	#$20,d1
00015782 0201 00C0                  		andi.b	#$C0,d1
00015786 6600                       		bne.s	locret_130E8
00015788 0C40 0400                  		cmpi.w	#$400,d0
0001578C 6D00                       		blt.s	locret_130E8
0001578E 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015794 08A8 0000 0022             		bclr	#0,obStatus(a0)
000157A4 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
000157AA 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
000157B0                            		
000157B0                            locret_130E8:
000157B0 4E75                       		rts	
000157B2                            ; End of function Sonic_MoveLeft
000157B2                            
000157B2                            
000157B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157B2                            
000157B2                            
000157B2                            Sonic_MoveRight:
000157B2 3028 0020                  		move.w	obInertia(a0),d0
000157B6 6B00                       		bmi.s	loc_13118
000157B8 08A8 0000 0022             		bclr	#0,$22(a0)
000157BE 6700                       		beq.s	loc_13104
000157C0 08A8 0005 0022             		bclr	#5,$22(a0)
000157C6 117C 0001 001D             		move.b	#1,$1D(a0)
000157CC                            
000157CC                            loc_13104:
000157CC D045                       		add.w	d5,d0
000157CE B046                       		cmp.w	d6,d0
000157D0 6D00                       		blt.s	loc_1310C
000157D2 9045                       		sub.w	d5,d0
000157D4 B046                       		cmp.w	d6,d0
000157D6 6C00                       		bge.s	loc_1310C
000157D8 3006                       		move.w	d6,d0
000157DA                            
000157DA                            loc_1310C:
000157DA 3140 0020                  		move.w	d0,obInertia(a0)
000157DE 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000157E4 4E75                       		rts
000157E6                            ; ===========================================================================
000157E6                            
000157E6                            loc_13118:
000157E6 D044                       		add.w	d4,d0
000157E8 6400                       		bcc.s	loc_13120
000157EA 303C 0080                  		move.w	#$80,d0
000157EE                            
000157EE                            loc_13120:
000157EE 3140 0020                  		move.w	d0,obInertia(a0)
000157F2 1228 0026                  		move.b	obAngle(a0),d1
000157F6 0601 0020                  		addi.b	#$20,d1
000157FA 0201 00C0                  		andi.b	#$C0,d1
000157FE 6600                       		bne.s	locret_1314E
00015800 0C40 FC00                  		cmpi.w	#-$400,d0
00015804 6E00                       		bgt.s	locret_1314E
00015806 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
0001580C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001581C 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015822 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015828                            		
00015828                            locret_1314E:
00015828 4E75                       		rts	
0001582A                            ; End of function Sonic_MoveRight
0001582A                            ; End of function Sonic_MoveRight
0001582A                            		include	"_incObj\Sonic RollSpeed.asm"
0001582A                            ; ---------------------------------------------------------------------------
0001582A                            ; Subroutine to	change Sonic's speed as he rolls
0001582A                            ; ---------------------------------------------------------------------------
0001582A                            
0001582A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001582A                            
0001582A                            
0001582A                            Sonic_RollSpeed:
0001582A 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
0001582E E346                       		asl.w	#1,d6
00015830 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015832 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015836 E444                       		asr.w	#2,d4
00015838 4A38 F7CA                  		tst.b	(f_jumponly).w
0001583C 6600 0000                  		bne.w	loc_131CC
00015840 4A68 003E                  		tst.w	$3E(a0)
00015844 6600                       		bne.s	@notright
00015846 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001584C 6700                       		beq.s	@notleft	; if not, branch
0001584E 6100 0000                  		bsr.w	Sonic_RollLeft
00015852                            
00015852                            	@notleft:
00015852 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015858 6700                       		beq.s	@notright	; if not, branch
0001585A 6100 0000                  		bsr.w	Sonic_RollRight
0001585E                            
0001585E                            	@notright:
0001585E 3028 0020                  		move.w	obInertia(a0),d0
00015862 6700                       		beq.s	loc_131AA
00015864 6B00                       		bmi.s	loc_1319E
00015866 9045                       		sub.w	d5,d0
00015868 6400                       		bcc.s	loc_13198
0001586A 303C 0000                  		move.w	#0,d0
0001586E                            
0001586E                            loc_13198:
0001586E 3140 0020                  		move.w	d0,obInertia(a0)
00015872 6000                       		bra.s	loc_131AA
00015874                            ; ===========================================================================
00015874                            
00015874                            loc_1319E:
00015874 D045                       		add.w	d5,d0
00015876 6400                       		bcc.s	loc_131A6
00015878 303C 0000                  		move.w	#0,d0
0001587C                            
0001587C                            loc_131A6:
0001587C 3140 0020                  		move.w	d0,obInertia(a0)
00015880                            
00015880                            loc_131AA:
00015880 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015884 6600                       		bne.s	loc_131CC	; if yes, branch
00015886 08A8 0002 0022             		bclr	#2,obStatus(a0)
0001588C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015892 117C 0009 0017             		move.b	#9,obWidth(a0)
00015898 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001589E 5B68 000C                  		subq.w	#5,obY(a0)
000158A2                            
000158A2                            loc_131CC:
000158A2 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
000158A8 6700                       		beq.s	@cont2
000158AA 6400                       		bcc.s	@cont1
000158AC 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000158B0                            		
000158B0                            @cont1:
000158B0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000158B4                            		
000158B4                            @cont2:
000158B4 1028 0026                  		move.b	obAngle(a0),d0
000158B8 4EB9 0000 37AE             		jsr	(CalcSine).l
000158BE C1E8 0020                  		muls.w	obInertia(a0),d0
000158C2 E080                       		asr.l	#8,d0
000158C4 3140 0012                  		move.w	d0,obVelY(a0)
000158C8 C3E8 0020                  		muls.w	obInertia(a0),d1
000158CC E081                       		asr.l	#8,d1
000158CE 0C41 1000                  		cmpi.w	#$1000,d1
000158D2 6F00                       		ble.s	loc_131F0
000158D4 323C 1000                  		move.w	#$1000,d1
000158D8                            
000158D8                            loc_131F0:
000158D8 0C41 F000                  		cmpi.w	#-$1000,d1
000158DC 6C00                       		bge.s	loc_131FA
000158DE 323C F000                  		move.w	#-$1000,d1
000158E2                            
000158E2                            loc_131FA:
000158E2 3141 0010                  		move.w	d1,obVelX(a0)
000158E6 6000 FDDA                  		bra.w	loc_1300C
000158EA                            ; End of function Sonic_RollSpeed
000158EA                            
000158EA                            
000158EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158EA                            
000158EA                            
000158EA                            Sonic_RollLeft:
000158EA 3028 0020                  		move.w	obInertia(a0),d0
000158EE 6700                       		beq.s	loc_1320A
000158F0 6A00                       		bpl.s	loc_13218
000158F2                            
000158F2                            loc_1320A:
000158F2 08E8 0000 0022             		bset	#0,obStatus(a0)
000158F8 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000158FE 4E75                       		rts	
00015900                            ; ===========================================================================
00015900                            
00015900                            loc_13218:
00015900 9044                       		sub.w	d4,d0
00015902 6400                       		bcc.s	loc_13220
00015904 303C FF80                  		move.w	#-$80,d0
00015908                            
00015908                            loc_13220:
00015908 3140 0020                  		move.w	d0,obInertia(a0)
0001590C 4E75                       		rts	
0001590E                            ; End of function Sonic_RollLeft
0001590E                            
0001590E                            
0001590E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001590E                            
0001590E                            
0001590E                            Sonic_RollRight:
0001590E 3028 0020                  		move.w	obInertia(a0),d0
00015912 6B00                       		bmi.s	loc_1323A
00015914 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001591A 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015920 4E75                       		rts	
00015922                            ; ===========================================================================
00015922                            
00015922                            loc_1323A:
00015922 D044                       		add.w	d4,d0
00015924 6400                       		bcc.s	loc_13242
00015926 303C 0080                  		move.w	#$80,d0
0001592A                            
0001592A                            loc_13242:
0001592A 3140 0020                  		move.w	d0,obInertia(a0)
0001592E 4E75                       		rts	
00015930                            ; End of function Sonic_RollRight
00015930                            ; End of function Sonic_RollRight
00015930                            		include	"_incObj\Sonic JumpDirection.asm"
00015930                            ; ---------------------------------------------------------------------------
00015930                            ; Subroutine to	change Sonic's direction while jumping
00015930                            ; ---------------------------------------------------------------------------
00015930                            
00015930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015930                            
00015930                            
00015930                            Sonic_JumpDirection:
00015930 3C38 F760                  		move.w	($FFFFF760).w,d6
00015934 3A38 F762                  		move.w	($FFFFF762).w,d5
00015938 E345                       		asl.w	#1,d5
0001593A 3028 0010                  		move.w	$10(a0),d0	
0001593E 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015944 6700                       		beq.s	loc_13278; if not, branch	
00015946 08E8 0000 0022             		bset	#0,$22(a0)	
0001594C 9045                       		sub.w	d5,d0	
0001594E 3206                       		move.w	d6,d1	
00015950 4441                       		neg.w	d1	
00015952 B041                       		cmp.w	d1,d0	
00015954 6E00                       		bgt.s	loc_13278	
00015956 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015958 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001595A 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
0001595C 3001                       		move.w	d1,d0
0001595E                            
0001595E                            loc_13278:
0001595E 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015964 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015966 08A8 0000 0022             		bclr	#0,$22(a0)	
0001596C D045                       		add.w	d5,d0	
0001596E B046                       		cmp.w	d6,d0	
00015970 6D00                       		blt.s	Obj01_JumpMove
00015972 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015974 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015976 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015978 3006                       		move.w	d6,d0
0001597A                            
0001597A                            Obj01_JumpMove:
0001597A 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
0001597E                            
0001597E                            Obj01_ResetScr2:
0001597E 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015984 6700                       		beq.s	loc_132A4	; if yes, branch
00015986 6400                       		bcc.s	loc_132A0
00015988 5878 F73E                  		addq.w	#4,(v_lookshift).w
0001598C                            
0001598C                            loc_132A0:
0001598C 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015990                            
00015990                            loc_132A4:
00015990 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015996 6500                       		bcs.s	locret_132D2	; if yes, branch
00015998 3028 0010                  		move.w	obVelX(a0),d0
0001599C 3200                       		move.w	d0,d1
0001599E EA41                       		asr.w	#5,d1
000159A0 6700                       		beq.s	locret_132D2
000159A2 6B00                       		bmi.s	loc_132C6
000159A4 9041                       		sub.w	d1,d0
000159A6 6400                       		bcc.s	loc_132C0
000159A8 303C 0000                  		move.w	#0,d0
000159AC                            
000159AC                            loc_132C0:
000159AC 3140 0010                  		move.w	d0,obVelX(a0)
000159B0 4E75                       		rts	
000159B2                            ; ===========================================================================
000159B2                            
000159B2                            loc_132C6:
000159B2 9041                       		sub.w	d1,d0
000159B4 6500                       		bcs.s	loc_132CE
000159B6 303C 0000                  		move.w	#0,d0
000159BA                            
000159BA                            loc_132CE:
000159BA 3140 0010                  		move.w	d0,obVelX(a0)
000159BE                            
000159BE                            locret_132D2:
000159BE 4E75                       		rts	
000159C0                            ; End of function Sonic_JumpDirection
000159C0                            ; End of function Sonic_JumpDirection
000159C0                            		include "_incObj\Sonic Peelout.asm"
000159C0                            ; ---------------------------------------------------------------------------
000159C0                            ; Subroutine to make Sonic perform a peelout
000159C0                            ; ---------------------------------------------------------------------------
000159C0                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
000159C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C0                            
000159C0                            Sonic_Peelout:
000159C0 0828 0001 0039             		btst	#1,$39(a0)
000159C6 6600                       		bne.s	SCDPeelout_Launch
000159C8 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
000159CE 6600                       		bne.s	@return
000159D0 1038 F603                  		move.b	($FFFFF603).w,d0
000159D4 0200 0070                  		andi.b	#%01110000,d0
000159D8 6700 0000                  		beq.w	@return
000159DC 117C 0001 001C             		move.b	#1,$1C(a0)
000159E2 317C 0000 003A             		move.w	#0,$3A(a0)
000159E8 303C 00D2                  		move.w	#$D2,d0
000159EC 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
000159F2                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
000159F2 588F                       		addq.l	#4,sp
000159F4 08E8 0001 0039             		bset	#1,$39(a0)
000159FA                            		
000159FA 4268 0020                  		clr.w	obInertia(a0)
000159FE                             
000159FE 6100 0000                  		bsr.w	Sonic_LevelBound
00015A02 6100 0000                  		bsr.w	Sonic_AnglePos
00015A06                             
00015A06                            	@return:
00015A06 4E75                       		rts	
00015A08                            ; ---------------------------------------------------------------------------
00015A08                             
00015A08                            SCDPeelout_Launch:
00015A08 0828 0001 0039             		btst	#1,$39(a0)
00015A0E 1038 F602                  		move.b	($FFFFF602).w,d0
00015A12 0800 0000                  		btst	#0,d0
00015A16 6600 0000                  		bne.w	SCDPeelout_Charge
00015A1A 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015A20 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015A26 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015A2A 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015A30 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015A36 3028 0020                  		move.w	obInertia(a0),d0
00015A3A 0440 0800                  		subi.w	#$800,d0
00015A3E D040                       		add.w	d0,d0
00015A40 0240 1F00                  		andi.w	#$1F00,d0
00015A44 4440                       		neg.w	d0
00015A46 0640 2000                  		addi.w	#$2000,d0
00015A4A 31C0 C904                  		move.w	d0,($FFFFC904).w
00015A4E 0828 0000 0022             		btst	#0,$22(a0)
00015A54 6700                       		beq.s	@dontflip
00015A56 4468 0020                  		neg.w	obInertia(a0)
00015A5A                             
00015A5A                            @dontflip:
00015A5A 08A8 0007 0022             		bclr	#7,$22(a0)
00015A60 303C 00D3                  		move.w	#$D3,d0
00015A64 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
00015A6A                            	;	sfx 	sfx_PeeloutRelease
00015A6A 1028 0026                  		move.b	obAngle(a0),d0
00015A6E 4EB9 0000 37AE             		jsr	(CalcSine).l
00015A74 C3E8 0020                  		muls.w	obInertia(a0),d1
00015A78 E081                       		asr.l	#8,d1
00015A7A 3141 0010                  		move.w	d1,obVelX(a0)
00015A7E C1E8 0020                  		muls.w	obInertia(a0),d0
00015A82 E080                       		asr.l	#8,d0
00015A84 3140 0012                  		move.w	d0,obVelY(a0)	
00015A88 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015A8C                            ; ---------------------------------------------------------------------------
00015A8C                             
00015A8C                            SCDPeelout_Charge:				; If still charging the dash...
00015A8C 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015A90 3401                       		move.w	d1,d2
00015A92 D241                       		add.w	d1,d1
00015A94 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015A98 6700                       		beq.s	@noshoes
00015A9A E242                       		asr.w	#1,d2
00015A9C 9242                       		sub.w	d2,d1
00015A9E                            
00015A9E                            @noshoes:
00015A9E 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015AA4 B268 0020                  		cmp.w	obInertia(a0),d1
00015AA8 6E00                       		bgt.s	@inctimer
00015AAA 3141 0020                  		move.w	d1,obInertia(a0)
00015AAE                            
00015AAE                            @inctimer:
00015AAE 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015AB2 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015AB8 6500                       		bcs.s	SCDPeelout_ResetScr
00015ABA 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015AC0 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015AC6                            		
00015AC6                            SCDPeelout_Stop_Sound:
00015AC6 303C 00D4                  		move.w	#$D4,d0
00015ACA 4EB9 0000 0FCC             		jsr		(PlaySound_Special).l
00015AD0                            	;	sfx 	sfx_PeeloutStop
00015AD0 4268 0020                  		clr.w	obInertia(a0)
00015AD4                            
00015AD4                            SCDPeelout_ResetScr:
00015AD4 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015AD6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015ADC 6700                       		beq.s	@finish
00015ADE 6400                       		bcc.s	@skip
00015AE0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015AE4                             
00015AE4                            	@skip:
00015AE4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015AE8                             
00015AE8                            	@finish:
00015AE8 6100 0000                  		bsr.w	Sonic_LevelBound
00015AEC 6100 0000                  		bsr.w	Sonic_AnglePos
00015AF0 4E75                       		rts
00015AF2                            		
00015AF2                            		
00015AF2                            		include "_incObj\Sonic Spindash.asm"
00015AF2                            ; ---------------------------------------------------------------------------
00015AF2                            ; Subroutine to make Sonic perform a spindash
00015AF2                            ; ---------------------------------------------------------------------------
00015AF2                             
00015AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AF2                             
00015AF2                             
00015AF2                            Sonic_SpinDash:
00015AF2 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015AF6 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015AF8 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015AFE 6600                       		bne.s	locret2_1AC8C		; if not, return
00015B00 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015B04 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015B08 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015B0C 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015B12 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015B16 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play spin sound
00015B1C 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015B1E 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015B24 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015B2A                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015B2A                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015B2A 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015B30                            						; the smoke/dust object
00015B30                            loc2_1AC84:
00015B30 6100 0000                  		bsr.w	Sonic_LevelBound
00015B34 6100 0000                  		bsr.w	Sonic_AnglePos
00015B38                            
00015B38                            locret2_1AC8C:
00015B38 4E75                       		rts	
00015B3A                            ; ---------------------------------------------------------------------------
00015B3A                            
00015B3A                            loc2_1AC8E:	
00015B3A 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015B40 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015B44 0800 0001                  		btst	#1,d0			; check down button
00015B48 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015B4C 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015B52 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015B58 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015B5E 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015B62 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015B68 7000                       		moveq	#0,d0
00015B6A 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015B6E D040                       		add.w	d0,d0			; double it
00015B70 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015B76 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015B7A 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015B7E D040                       		add.w	d0,d0			; double it
00015B80 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015B84 4440                       		neg.w	d0			; negate it
00015B86 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015B8A 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015B8E 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015B94 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015B96 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015B9A                            
00015B9A                            loc2_1ACF4:
00015B9A 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015BA0 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015BA6 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015BAA 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play it!
00015BB0 1028 0026                  		move.b	obAngle(a0),d0
00015BB4 4EB9 0000 37AE             		jsr	(CalcSine).l
00015BBA C3E8 0020                  		muls.w	obInertia(a0),d1
00015BBE E081                       		asr.l	#8,d1
00015BC0 3141 0010                  		move.w	d1,obVelX(a0)
00015BC4 C1E8 0020                  		muls.w	obInertia(a0),d0
00015BC8 E080                       		asr.l	#8,d0
00015BCA 3140 0012                  		move.w	d0,obVelY(a0)
00015BCE                            	
00015BCE 6000                       		bra.s	loc2_1AD78
00015BD0                            ; ===========================================================================
00015BD0                            Dash_Speeds:
00015BD0 0600                       		dc.w  $600		; 0
00015BD2 0680                       		dc.w  $680		; 1
00015BD4 0700                       		dc.w  $700		; 2
00015BD6 0780                       		dc.w  $780		; 3
00015BD8 0800                       		dc.w  $800		; 4
00015BDA 0880                       		dc.w  $880		; 5
00015BDC 0900                       		dc.w  $900		; 6
00015BDE 0980                       		dc.w  $980		; 7
00015BE0 0A00                       		dc.w  $A00		; 8
00015BE2                            ; ===========================================================================
00015BE2                            
00015BE2                            loc2_1AD30:				; If still charging the dash...
00015BE2 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015BE6 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015BE8 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015BEC EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015BEE 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015BF2 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015BF4 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015BFA                            
00015BFA                            loc2_1AD48:
00015BFA 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015BFE 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015C02 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015C06 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015C0C 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015C10 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015C16 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l	; play charge sound
00015C1C 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015C22 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015C28 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015C2A 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015C30                            
00015C30                            loc2_1AD78:
00015C30 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015C32 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015C38 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015C3A 6400                       		bcc.s	loc2_1AD88
00015C3C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015C40                            
00015C40                            loc2_1AD88:
00015C40 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015C44                            
00015C44                            loc2_1AD8C:
00015C44 6100 0000                  		bsr.w	Sonic_LevelBound
00015C48 6100 0000                  		bsr.w	Sonic_AnglePos
00015C4C                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015C4C 4E75                       		rts
00015C4E                            ; End of subroutine Sonic_SpinDash
00015C4E                            ; End of subroutine Sonic_SpinDash
00015C4E                            
00015C4E                            Sonic_AirRoll:
00015C4E 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015C54 6600                               bne.s   AirRoll_Return   ; if not, return
00015C56                            
00015C56                            AirRoll_CheckBtn:
00015C56 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015C5A 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015C5E 6700                               beq.s	AirRoll_Return
00015C60 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015C66                                   ; move.w	#$BC,d0
00015C66                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015C66                            
00015C66                            AirRoll_Return:
00015C66 4E75                               rts
00015C68                            ; ===========================================================================
00015C68                            ; ---------------------------------------------------------------------------
00015C68                            ; Unused subroutine to squash Sonic
00015C68                            ; ---------------------------------------------------------------------------
00015C68 1028 0026                  		move.b	obAngle(a0),d0
00015C6C 0600 0020                  		addi.b	#$20,d0
00015C70 0200 00C0                  		andi.b	#$C0,d0
00015C74 6600                       		bne.s	locret_13302
00015C76 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015C7A 4A41                       		tst.w	d1
00015C7C 6A00                       		bpl.s	locret_13302
00015C7E 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015C84 317C 0000 0010             		move.w	#0,obVelX(a0)
00015C8A 317C 0000 0012             		move.w	#0,obVelY(a0)
00015C90 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015C96                            
00015C96                            locret_13302:
00015C96 4E75                       		rts		
00015C98                            		include	"_incObj\Sonic LevelBound.asm"
00015C98                            ; ---------------------------------------------------------------------------
00015C98                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015C98                            ; ---------------------------------------------------------------------------
00015C98                            
00015C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C98                            
00015C98                            
00015C98                            Sonic_LevelBound:
00015C98 2228 0008                  		move.l	obX(a0),d1
00015C9C 3028 0010                  		move.w	obVelX(a0),d0
00015CA0 48C0                       		ext.l	d0
00015CA2 E180                       		asl.l	#8,d0
00015CA4 D280                       		add.l	d0,d1
00015CA6 4841                       		swap	d1
00015CA8 3038 F728                  		move.w	(v_limitleft2).w,d0
00015CAC 0640 0010                  		addi.w	#$10,d0
00015CB0 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015CB2 6200                       		bhi.s	@sides		; if yes, branch
00015CB4 3038 F72A                  		move.w	(v_limitright2).w,d0
00015CB8 0640 0128                  		addi.w	#$128,d0
00015CBC 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015CC0 6600                       		bne.s	@screenlocked
00015CC2 0640 0040                  		addi.w	#$40,d0
00015CC6                            
00015CC6                            	@screenlocked:
00015CC6 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015CC8 6300                       		bls.s	@sides		; if yes, branch
00015CCA                            
00015CCA                            	@chkbottom:
00015CCA 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015CCE 0640 00E0                  		addi.w	#$E0,d0
00015CD2 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015CD6 6D00                       		blt.s	@bottom		; if yes, branch
00015CD8 4E75                       		rts	
00015CDA                            ; ===========================================================================
00015CDA                            
00015CDA                            @bottom:
00015CDA 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015CDE 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015CE2 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015CE4 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015CE6 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015CEC 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015CF0 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015CF6 6500 0000                  		bcs.w	Kill_transport
00015CFA 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015CFE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015D04 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015D0A 4E75                       		rts	
00015D0C                            @dontkill: 
00015D0C 4E75                       		rts
00015D0E                            ; ===========================================================================
00015D0E                            
00015D0E                            @sides:
00015D0E 3140 0008                  		move.w	d0,obX(a0)
00015D12 317C 0000 000A             		move.w	#0,obX+2(a0)
00015D18 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015D1E 317C 0000 0020             		move.w	#0,obInertia(a0)
00015D24 60A4                       		bra.s	@chkbottom
00015D26                            
00015D26                            Kill_transport: 
00015D26 4EF9 0000 0000                     	jmp        (KillSonic).l
00015D2C                            
00015D2C                            ; End of function Sonic_LevelBound
00015D2C                            ; End of function Sonic_LevelBound
00015D2C                            		include	"_incObj\Sonic Roll.asm"
00015D2C                            ; ---------------------------------------------------------------------------
00015D2C                            ; Subroutine allowing Sonic to roll when he's moving
00015D2C                            ; ---------------------------------------------------------------------------
00015D2C                            
00015D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D2C                            
00015D2C                            
00015D2C                            Sonic_Roll:
00015D2C 4A38 F7CA                  		tst.b	(f_jumponly).w
00015D30 6600                       		bne.s	@noroll
00015D32 3028 0020                  		move.w	obInertia(a0),d0
00015D36 6A00                       		bpl.s	@ispositive
00015D38 4440                       		neg.w	d0
00015D3A                            
00015D3A                            	@ispositive:
00015D3A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015D3E 6500                       		bcs.s	@noroll		; if not, branch
00015D40 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015D44 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015D48 6600                       		bne.s	@noroll		; if yes, branch
00015D4A 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015D50 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015D52                            
00015D52                            	@noroll:
00015D52 4E75                       		rts	
00015D54                            ; ===========================================================================
00015D54                            
00015D54                            Sonic_ChkRoll:
00015D54 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015D5A 6700                       		beq.s	@roll		; if not, branch
00015D5C 4E75                       		rts	
00015D5E                            ; ===========================================================================
00015D5E                            
00015D5E                            @roll:
00015D5E 08E8 0002 0022             		bset	#2,obStatus(a0)
00015D64 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015D6A 117C 0007 0017             		move.b	#7,obWidth(a0)
00015D70 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015D76 5A68 000C                  		addq.w	#5,obY(a0)
00015D84 4A68 0020                  		tst.w	obInertia(a0)
00015D88 6600                       		bne.s	@ismoving
00015D8A 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015D90                            
00015D90                            	@ismoving:
00015D90 4E75                       		rts	
00015D92                            ; End of function Sonic_Roll
00015D92                            ; End of function Sonic_Roll
00015D92                            		include	"_incObj\Sonic Jump.asm"
00015D92                            ; ---------------------------------------------------------------------------
00015D92                            ; Subroutine allowing Sonic to jump
00015D92                            ; ---------------------------------------------------------------------------
00015D92                            
00015D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D92                            
00015D92                            
00015D92                            Sonic_Jump:
00015D92 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015D96 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015D9A 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015D9E 7000                       		moveq	#0,d0
00015DA0 1028 0026                  		move.b	obAngle(a0),d0
00015DA4 0600 0080                  		addi.b	#$80,d0
00015DA8 6100 0000                  		bsr.w	sub_14D48
00015DAC 0C41 0006                  		cmpi.w	#6,d1
00015DB0 6D00 0000                  		blt.w	locret_1348E
00015DB4 343C 0680                  		move.w	#$680,d2
00015DB8 0828 0006 0022             		btst	#6,obStatus(a0)
00015DBE 6700                       		beq.s	loc_1341C
00015DC0 343C 0380                  		move.w	#$380,d2
00015DC4                            
00015DC4                            loc_1341C:
00015DC4 7000                       		moveq	#0,d0
00015DC6 1028 0026                  		move.b	obAngle(a0),d0
00015DCA 0400 0040                  		subi.b	#$40,d0
00015DCE 4EB9 0000 37AE             		jsr	(CalcSine).l
00015DD4 C3C2                       		muls.w	d2,d1
00015DD6 E081                       		asr.l	#8,d1
00015DD8 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015DDC C1C2                       		muls.w	d2,d0
00015DDE E080                       		asr.l	#8,d0
00015DE0 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015DE4 08E8 0001 0022             		bset	#1,obStatus(a0)
00015DEA 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015DF0 588F                       		addq.l	#4,sp
00015DF2 117C 0001 003C             		move.b	#1,$3C(a0)
00015DF8 4228 0038                  		clr.b	$38(a0)
00015E06 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015E0C 117C 0009 0017             		move.b	#9,obWidth(a0)
00015E12 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015E18 117C 0007 0017             		move.b	#7,obWidth(a0)
00015E1E                            Result_Check:
00015E1E 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015E22 6700                       		beq.s   NormalJump ; If not, branch
00015E24 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
00015E2A 6000                       		bra.s   cont ; Continue
00015E2C                            NormalJump:
00015E2C 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015E32                            cont:
00015E32 08E8 0002 0022             		bset	#2,obStatus(a0)
00015E38 5A68 000C                  		addq.w	#5,obY(a0)
00015E3C                            
00015E3C                            locret_1348E:
00015E3C 4E75                       		rts	
00015E3E                            ; ===========================================================================
00015E3E                            
00015E3E                            ; End of function Sonic_Jump
00015E3E                            ; End of function Sonic_Jump
00015E3E                            		include	"_incObj\Sonic JumpHeight.asm"
00015E3E                            ; ---------------------------------------------------------------------------
00015E3E                            ; Subroutine controlling Sonic's jump height/duration
00015E3E                            ; ---------------------------------------------------------------------------
00015E3E                            
00015E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E3E                            
00015E3E                            
00015E3E                            Sonic_JumpHeight:
00015E3E 4A28 003C                  		tst.b	$3C(a0)
00015E42 6700                       		beq.s	loc_134C4
00015E44 323C FC00                  		move.w	#-$400,d1
00015E48 0828 0006 0022             		btst	#6,obStatus(a0)
00015E4E 6700                       		beq.s	loc_134AE
00015E50 323C FE00                  		move.w	#-$200,d1
00015E54                            
00015E54                            loc_134AE:
00015E54 B268 0012                  		cmp.w	obVelY(a0),d1
00015E58 6F00                       		ble.s	locret_134C2
00015E5A 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015E5E 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015E62 6600                       		bne.s	locret_134C2	; if yes, branch
00015E64 3141 0012                  		move.w	d1,obVelY(a0)
00015E68                            
00015E68                            locret_134C2:
00015E68 4E75                       		rts	
00015E6A                            ; ===========================================================================
00015E6A                            
00015E6A                            loc_134C4:
00015E6A 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015E70 6C00                       		bge.s	locret_134D2
00015E72 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015E78                            
00015E78                            locret_134D2:
00015E78 4E75                       		rts	
00015E7A                            ; End of function Sonic_JumpHeight
00015E7A                            ; End of function Sonic_JumpHeight
00015E7A                            		include	"_incObj\Sonic SlopeResist.asm"
00015E7A                            ; ---------------------------------------------------------------------------
00015E7A                            ; Subroutine to	slow Sonic walking up a	slope
00015E7A                            ; ---------------------------------------------------------------------------
00015E7A                            
00015E7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E7A                            
00015E7A                            
00015E7A                            Sonic_SlopeResist:
00015E7A 1028 0026                  		move.b	obAngle(a0),d0
00015E7E 0600 0060                  		addi.b	#$60,d0
00015E82 0C00 00C0                  		cmpi.b	#$C0,d0
00015E86 6400                       		bcc.s	locret_13508
00015E88 1028 0026                  		move.b	obAngle(a0),d0
00015E8C 4EB9 0000 37AE             		jsr	(CalcSine).l
00015E92 C1FC 0020                  		muls.w	#$20,d0
00015E96 E080                       		asr.l	#8,d0
00015E98 4A68 0020                  		tst.w	obInertia(a0)
00015E9C 6700                       		beq.s	locret_13508
00015E9E 6B00                       		bmi.s	loc_13504
00015EA0 4A40                       		tst.w	d0
00015EA2 6700                       		beq.s	locret_13502
00015EA4 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00015EA8                            
00015EA8                            locret_13502:
00015EA8 4E75                       		rts	
00015EAA                            ; ===========================================================================
00015EAA                            
00015EAA                            loc_13504:
00015EAA D168 0020                  		add.w	d0,obInertia(a0)
00015EAE                            
00015EAE                            locret_13508:
00015EAE 4E75                       		rts	
00015EB0                            ; End of function Sonic_SlopeResist
00015EB0                            ; End of function Sonic_SlopeResist
00015EB0                            		include	"_incObj\Sonic RollRepel.asm"
00015EB0                            ; ---------------------------------------------------------------------------
00015EB0                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015EB0                            ; ---------------------------------------------------------------------------
00015EB0                            
00015EB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EB0                            
00015EB0                            
00015EB0                            Sonic_RollRepel:
00015EB0 1028 0026                  		move.b	obAngle(a0),d0
00015EB4 0600 0060                  		addi.b	#$60,d0
00015EB8 0C00 00C0                  		cmpi.b	#-$40,d0
00015EBC 6400                       		bcc.s	locret_13544
00015EBE 1028 0026                  		move.b	obAngle(a0),d0
00015EC2 4EB9 0000 37AE             		jsr	(CalcSine).l
00015EC8 C1FC 0050                  		muls.w	#$50,d0
00015ECC E080                       		asr.l	#8,d0
00015ECE 4A68 0020                  		tst.w	obInertia(a0)
00015ED2 6B00                       		bmi.s	loc_1353A
00015ED4 4A40                       		tst.w	d0
00015ED6 6A00                       		bpl.s	loc_13534
00015ED8 E480                       		asr.l	#2,d0
00015EDA                            
00015EDA                            loc_13534:
00015EDA D168 0020                  		add.w	d0,obInertia(a0)
00015EDE 4E75                       		rts	
00015EE0                            ; ===========================================================================
00015EE0                            
00015EE0                            loc_1353A:
00015EE0 4A40                       		tst.w	d0
00015EE2 6B00                       		bmi.s	loc_13540
00015EE4 E480                       		asr.l	#2,d0
00015EE6                            
00015EE6                            loc_13540:
00015EE6 D168 0020                  		add.w	d0,obInertia(a0)
00015EEA                            
00015EEA                            locret_13544:
00015EEA 4E75                       		rts	
00015EEC                            ; End of function Sonic_RollRepel
00015EEC                            ; End of function Sonic_RollRepel
00015EEC                            		include	"_incObj\Sonic SlopeRepel.asm"
00015EEC                            ; ---------------------------------------------------------------------------
00015EEC                            ; Subroutine to	push Sonic down	a slope
00015EEC                            ; ---------------------------------------------------------------------------
00015EEC                            
00015EEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EEC                            
00015EEC                            
00015EEC                            Sonic_SlopeRepel:
00015EEC 4E71                       		nop	
00015EEE 4A28 0038                  		tst.b	$38(a0)
00015EF2 6600                       		bne.s	locret_13580
00015EF4 4A68 003E                  		tst.w	$3E(a0)
00015EF8 6600                       		bne.s	loc_13582
00015EFA 1028 0026                  		move.b	obAngle(a0),d0
00015EFE 0600 0020                  		addi.b	#$20,d0
00015F02 0200 00C0                  		andi.b	#$C0,d0
00015F06 6700                       		beq.s	locret_13580
00015F08 3028 0020                  		move.w	obInertia(a0),d0
00015F0C 6A00                       		bpl.s	loc_1356A
00015F0E 4440                       		neg.w	d0
00015F10                            
00015F10                            loc_1356A:
00015F10 0C40 0280                  		cmpi.w	#$280,d0
00015F14 6400                       		bcc.s	locret_13580
00015F16 4268 0020                  		clr.w	obInertia(a0)
00015F1A 08E8 0001 0022             		bset	#1,obStatus(a0)
00015F20 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015F26                            
00015F26                            locret_13580:
00015F26 4E75                       		rts	
00015F28                            ; ===========================================================================
00015F28                            
00015F28                            loc_13582:
00015F28 5368 003E                  		subq.w	#1,$3E(a0)
00015F2C 4E75                       		rts	
00015F2E                            ; End of function Sonic_SlopeRepel
00015F2E                            ; End of function Sonic_SlopeRepel
00015F2E                            		include	"_incObj\Sonic JumpAngle.asm"
00015F2E                            ; ---------------------------------------------------------------------------
00015F2E                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015F2E                            ; ---------------------------------------------------------------------------
00015F2E                            
00015F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F2E                            
00015F2E                            
00015F2E                            Sonic_JumpAngle:
00015F2E 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00015F32 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015F34 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015F36                            
00015F36 5400                       		addq.b	#2,d0		; increase angle
00015F38 6400                       		bcc.s	loc_13596
00015F3A 7000                       		moveq	#0,d0
00015F3C                            
00015F3C                            loc_13596:
00015F3C 6000                       		bra.s	loc_1359E
00015F3E                            ; ===========================================================================
00015F3E                            
00015F3E                            loc_13598:
00015F3E 5500                       		subq.b	#2,d0		; decrease angle
00015F40 6400                       		bcc.s	loc_1359E
00015F42 7000                       		moveq	#0,d0
00015F44                            
00015F44                            loc_1359E:
00015F44 1140 0026                  		move.b	d0,obAngle(a0)
00015F48                            
00015F48                            locret_135A2:
00015F48 4E75                       		rts	
00015F4A                            ; End of function Sonic_JumpAngle
00015F4A                            ; End of function Sonic_JumpAngle
00015F4A                            		include	"_incObj\Sonic Floor.asm"
00015F4A                            ; ---------------------------------------------------------------------------
00015F4A                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00015F4A                            ; ---------------------------------------------------------------------------
00015F4A                            
00015F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F4A                            
00015F4A                            
00015F4A                            Sonic_Floor:
00015F4A 3228 0010                  		move.w	obVelX(a0),d1
00015F4E 3428 0012                  		move.w	obVelY(a0),d2
00015F52 4EB9 0000 3A40             		jsr	(CalcAngle).l
00015F58 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015F5C 0400 0020                  		subi.b	#$20,d0
00015F60 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015F64 0200 00C0                  		andi.b	#$C0,d0
00015F68 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015F6C 0C00 0040                  		cmpi.b	#$40,d0
00015F70 6700 0000                  		beq.w	loc_13680
00015F74 0C00 0080                  		cmpi.b	#$80,d0
00015F78 6700 0000                  		beq.w	loc_136E2
00015F7C 0C00 00C0                  		cmpi.b	#$C0,d0
00015F80 6700 0000                  		beq.w	loc_1373E
00015F84 6100 0000                  		bsr.w	Sonic_HitWall
00015F88 4A41                       		tst.w	d1
00015F8A 6A00                       		bpl.s	loc_135F0
00015F8C 9368 0008                  		sub.w	d1,obX(a0)
00015F90 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F96                            
00015F96                            loc_135F0:
00015F96 6100 0000                  		bsr.w	sub_14EB4
00015F9A 4A41                       		tst.w	d1
00015F9C 6A00                       		bpl.s	loc_13602
00015F9E D368 0008                  		add.w	d1,obX(a0)
00015FA2 317C 0000 0010             		move.w	#0,obVelX(a0)
00015FA8                            
00015FA8                            loc_13602:
00015FA8 6100 0000                  		bsr.w	Sonic_HitFloor
00015FAC 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015FB0 4A41                       		tst.w	d1
00015FB2 6A00                       		bpl.s	locret_1367E
00015FB4 1428 0012                  		move.b	obVelY(a0),d2
00015FB8 5002                       		addq.b	#8,d2
00015FBA 4402                       		neg.b	d2
00015FBC B202                       		cmp.b	d2,d1
00015FBE 6C00                       		bge.s	loc_1361E
00015FC0 B002                       		cmp.b	d2,d0
00015FC2 6D00                       		blt.s	locret_1367E
00015FC4                            
00015FC4                            loc_1361E:
00015FC4 D368 000C                  		add.w	d1,obY(a0)
00015FC8 1143 0026                  		move.b	d3,obAngle(a0)
00015FCC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015FD0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015FD6 1003                       		move.b	d3,d0
00015FD8 0600 0020                  		addi.b	#$20,d0
00015FDC 0200 0040                  		andi.b	#$40,d0
00015FE0 6600                       		bne.s	loc_1365C
00015FE2 1003                       		move.b	d3,d0
00015FE4 0600 0010                  		addi.b	#$10,d0
00015FE8 0200 0020                  		andi.b	#$20,d0
00015FEC 6700                       		beq.s	loc_1364E
00015FEE E0E8 0012                  		asr	obVelY(a0)
00015FF2 6000                       		bra.s	loc_13670
00015FF4                            ; ===========================================================================
00015FF4                            
00015FF4                            loc_1364E:
00015FF4 317C 0000 0012             		move.w	#0,obVelY(a0)
00015FFA 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016000 4E75                       		rts	
00016002                            ; ===========================================================================
00016002                            
00016002                            loc_1365C:
00016002 317C 0000 0010             		move.w	#0,obVelX(a0)
00016008 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
0001600E 6F00                       		ble.s	loc_13670
00016010 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00016016                            
00016016                            loc_13670:
00016016 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001601C 4A03                       		tst.b	d3
0001601E 6A00                       		bpl.s	locret_1367E
00016020 4468 0020                  		neg.w	obInertia(a0)
00016024                            
00016024                            locret_1367E:
00016024 4E75                       		rts	
00016026                            ; ===========================================================================
00016026                            
00016026                            loc_13680:
00016026 6100 0000                  		bsr.w	Sonic_HitWall
0001602A 4A41                       		tst.w	d1
0001602C 6A00                       		bpl.s	loc_1369A
0001602E 9368 0008                  		sub.w	d1,obX(a0)
00016032 317C 0000 0010             		move.w	#0,obVelX(a0)
00016038 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001603E 4E75                       		rts	
00016040                            ; ===========================================================================
00016040                            
00016040                            loc_1369A:
00016040 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016044 4A41                       		tst.w	d1
00016046 6A00                       		bpl.s	loc_136B4
00016048 9368 000C                  		sub.w	d1,obY(a0)
0001604C 4A68 0012                  		tst.w	obVelY(a0)
00016050 6A00                       		bpl.s	locret_136B2
00016052 317C 0000 0012             		move.w	#0,obVelY(a0)
00016058                            
00016058                            locret_136B2:
00016058 4E75                       		rts	
0001605A                            ; ===========================================================================
0001605A                            
0001605A                            loc_136B4:
0001605A 4A68 0012                  		tst.w	obVelY(a0)
0001605E 6B00                       		bmi.s	locret_136E0
00016060 6100 0000                  		bsr.w	Sonic_HitFloor
00016064 4A41                       		tst.w	d1
00016066 6A00                       		bpl.s	locret_136E0
00016068 D368 000C                  		add.w	d1,obY(a0)
0001606C 1143 0026                  		move.b	d3,obAngle(a0)
00016070 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016074 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001607A 317C 0000 0012             		move.w	#0,obVelY(a0)
00016080 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016086                            
00016086                            locret_136E0:
00016086 4E75                       		rts	
00016088                            ; ===========================================================================
00016088                            
00016088                            loc_136E2:
00016088 6100 0000                  		bsr.w	Sonic_HitWall
0001608C 4A41                       		tst.w	d1
0001608E 6A00                       		bpl.s	loc_136F4
00016090 9368 0008                  		sub.w	d1,obX(a0)
00016094 317C 0000 0010             		move.w	#0,obVelX(a0)
0001609A                            
0001609A                            loc_136F4:
0001609A 6100 0000                  		bsr.w	sub_14EB4
0001609E 4A41                       		tst.w	d1
000160A0 6A00                       		bpl.s	loc_13706
000160A2 D368 0008                  		add.w	d1,obX(a0)
000160A6 317C 0000 0010             		move.w	#0,obVelX(a0)
000160AC                            
000160AC                            loc_13706:
000160AC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000160B0 4A41                       		tst.w	d1
000160B2 6A00                       		bpl.s	locret_1373C
000160B4 9368 000C                  		sub.w	d1,obY(a0)
000160B8 1003                       		move.b	d3,d0
000160BA 0600 0020                  		addi.b	#$20,d0
000160BE 0200 0040                  		andi.b	#$40,d0
000160C2 6600                       		bne.s	loc_13726
000160C4 317C 0000 0012             		move.w	#0,obVelY(a0)
000160CA 4E75                       		rts	
000160CC                            ; ===========================================================================
000160CC                            
000160CC                            loc_13726:
000160CC 1143 0026                  		move.b	d3,obAngle(a0)
000160D0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000160D4 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000160DA 4A03                       		tst.b	d3
000160DC 6A00                       		bpl.s	locret_1373C
000160DE 4468 0020                  		neg.w	obInertia(a0)
000160E2                            
000160E2                            locret_1373C:
000160E2 4E75                       		rts	
000160E4                            ; ===========================================================================
000160E4                            
000160E4                            loc_1373E:
000160E4 6100 0000                  		bsr.w	sub_14EB4
000160E8 4A41                       		tst.w	d1
000160EA 6A00                       		bpl.s	loc_13758
000160EC D368 0008                  		add.w	d1,obX(a0)
000160F0 317C 0000 0010             		move.w	#0,obVelX(a0)
000160F6 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000160FC 4E75                       		rts	
000160FE                            ; ===========================================================================
000160FE                            
000160FE                            loc_13758:
000160FE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016102 4A41                       		tst.w	d1
00016104 6A00                       		bpl.s	loc_13772
00016106 9368 000C                  		sub.w	d1,obY(a0)
0001610A 4A68 0012                  		tst.w	obVelY(a0)
0001610E 6A00                       		bpl.s	locret_13770
00016110 317C 0000 0012             		move.w	#0,obVelY(a0)
00016116                            
00016116                            locret_13770:
00016116 4E75                       		rts	
00016118                            ; ===========================================================================
00016118                            
00016118                            loc_13772:
00016118 4A68 0012                  		tst.w	obVelY(a0)
0001611C 6B00                       		bmi.s	locret_1379E
0001611E 6100 0000                  		bsr.w	Sonic_HitFloor
00016122 4A41                       		tst.w	d1
00016124 6A00                       		bpl.s	locret_1379E
00016126 D368 000C                  		add.w	d1,obY(a0)
0001612A 1143 0026                  		move.b	d3,obAngle(a0)
0001612E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016132 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016138 317C 0000 0012             		move.w	#0,obVelY(a0)
0001613E 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016144                            
00016144                            locret_1379E:
00016144 4E75                       		rts	
00016146                            ; End of function Sonic_Floor
00016146                            ; End of function Sonic_Floor
00016146                            		include	"_incObj\Sonic ResetOnFloor.asm"
00016146                            ; ---------------------------------------------------------------------------
00016146                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00016146                            ; ---------------------------------------------------------------------------
00016146                            
00016146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016146                            
00016146                            
00016146                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
00016146 08A8 0005 0022                     	bclr    #5,$22(a0)
0001614C 08A8 0001 0022                     	bclr    #1,$22(a0)
00016152 0828 0002 0022                     	btst    #2,$22(a0)
00016158 6700                               	beq.s    loc_137E4
0001615A 08A8 0002 0022             		bclr	#2,obStatus(a0)
00016160 117C 0013 0016             		move.b	#$13,obHeight(a0)
00016166 117C 0009 0017             		move.b	#9,obWidth(a0)
0001616C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016172 5B68 000C                  		subq.w	#5,obY(a0)
00016176                            
00016176                            loc_137E4:
00016176 117C 0000 003C             		move.b	#0,$3C(a0)
0001617C 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016182 4E75                       		rts	
00016184                            ; End of function Sonic_ResetOnFloor
00016184                            ; End of function Sonic_ResetOnFloor
00016184                            		include	"_incObj\Sonic (part 2).asm"
00016184                            ; ---------------------------------------------------------------------------
00016184                            ; Sonic	when he	gets hurt
00016184                            ; ---------------------------------------------------------------------------
00016184                            
00016184                            Sonic_Hurt:	; Routine 4
00016184 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001618A 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016190 0828 0006 0022             		btst	#6,obStatus(a0)
00016196 6700                       		beq.s	loc_1380C
00016198 0468 0020 0012             		subi.w	#$20,obVelY(a0)
0001619E                            
0001619E                            loc_1380C:
0001619E 6100 0000                  		bsr.w	Sonic_HurtStop
000161A2 6100 FAF4                  		bsr.w	Sonic_LevelBound
000161A6 6100 F124                  		bsr.w	Sonic_RecordPosition
000161AA 6100 0000                  		bsr.w	Sonic_Animate
000161AE 6100 0000                  		bsr.w	Sonic_LoadGfx
000161B2 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
000161B8                            
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            ; Subroutine to	stop Sonic falling after he's been hurt
000161B8                            ; ---------------------------------------------------------------------------
000161B8                            
000161B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161B8                            
000161B8                            
000161B8                            Sonic_HurtStop:
000161B8 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000161BC 0640 00E0                  		addi.w	#$E0,d0
000161C0                            		;cmp.w	obY(a0),d0
000161C0                            		;bcs.w	KillSonic
000161C0 6100 FD88                  		bsr.w	Sonic_Floor
000161C4 0828 0001 0022             		btst	#1,obStatus(a0)
000161CA 6600                       		bne.s	locret_13860
000161CC 7000                       		moveq	#0,d0
000161CE 3140 0012                  		move.w	d0,obVelY(a0)
000161D2 3140 0010                  		move.w	d0,obVelX(a0)
000161D6 3140 0020                  		move.w	d0,obInertia(a0)
000161DA 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000161E0 5528 0024                  		subq.b	#2,obRoutine(a0)
000161E4 317C 0078 0030             		move.w	#$78,$30(a0)
000161EA                            
000161EA                            locret_13860:
000161EA 4E75                       		rts	
000161EC                            ; End of function Sonic_HurtStop
000161EC                            
000161EC                            ; ---------------------------------------------------------------------------
000161EC                            ; Sonic	when he	dies
000161EC                            ; ---------------------------------------------------------------------------
000161EC                            
000161EC                            Sonic_Death:	; Routine 6
000161EC 6100 0000                  		bsr.w	GameOver
000161F0 4EB9 0000 F6AE             		jsr	(ObjectFall).l
000161F6 6100 F0D4                  		bsr.w	Sonic_RecordPosition
000161FA 6100 0000                  		bsr.w	Sonic_Animate
000161FE 6100 0000                  		bsr.w	Sonic_LoadGfx
00016202 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00016208                            
00016208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016208                            
00016208                            GameOver:
00016208 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001620C 0640 0100                  		addi.w	#$100,d0
00016210 B068 000C                  		cmp.w	obY(a0),d0
00016214 6400 0000                  		bcc.w	locret_13900
00016218 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
0001621E 5428 0024                  		addq.b	#2,obRoutine(a0)
00016222 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00016226 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
0001622A 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
0001622E 6600                       		bne.s	loc_138D4
00016230 317C 0000 003A             		move.w	#0,$3A(a0)
00016236 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
0001623C 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016242 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
00016248 4238 FE1A                  		clr.b	(f_timeover).w
0001624C                            
0001624C                            loc_138C2:
00016256 7003                       		moveq	#3,d0
00016258 4EF9 0000 1466             		jmp	(AddPLC).l	; load game over patterns
0001625E                            		
0001625E                            loc_138C3:
00016268 7003                       		moveq	#3,d0
0001626A 4EF9 0000 1466             		jmp	(AddPLC).l	; load game over patterns
00016270                            ; ===========================================================================
00016270                            
00016270                            loc_138D4:
00016270 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016276 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001627A 6700                       		beq.s	locret_13900	; if not, branch
0001627C 317C 0000 003A             		move.w	#0,$3A(a0)
00016282 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
00016288 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001628E 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016294 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001629A 60B0                       		bra.s	loc_138C2
0001629C                            		
0001629C                            
0001629C                            ; ===========================================================================
0001629C                            
0001629C                            locret_13900:
0001629C 4E75                       		rts	
0001629E                            ; End of function GameOver
0001629E                            
0001629E                            ; ---------------------------------------------------------------------------
0001629E                            ; Sonic	when the level is restarted
0001629E                            ; ---------------------------------------------------------------------------
0001629E                            
0001629E                            Sonic_ResetLevel:; Routine 8
0001629E 4A68 003A                  		tst.w	$3A(a0)
000162A2 6700                       		beq.s	locret_13914
000162A4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000162A8 6600                       		bne.s	locret_13914
000162AA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000162B0                            
000162B0                            	locret_13914:
000162B0 4E75                       		rts	
000162B0 4E75                       		rts	
000162B2                            		include	"_incObj\Sonic Loops.asm"
000162B2                            ; ---------------------------------------------------------------------------
000162B2                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000162B2                            ; ---------------------------------------------------------------------------
000162B2                            
000162B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162B2                            
000162B2                            
000162B2                            Sonic_Loops:
000162B2 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
000162B8 6700                       		beq.s	@isstarlight	; if yes, branch
000162BA 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
000162BE 6600 0000                  		bne.w	@noloops	; if not, branch
000162C2                            
000162C2                            	@isstarlight:
000162C2 3028 000C                  		move.w	obY(a0),d0
000162C6 E248                       		lsr.w	#1,d0
000162C8 0240 0380                  		andi.w	#$380,d0
000162CC 1228 0008                  		move.b	obX(a0),d1
000162D0 0241 007F                  		andi.w	#$7F,d1
000162D4 D041                       		add.w	d1,d0
000162D6 43F8 A400                  		lea	(v_lvllayout).w,a1
000162DA 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000162DE                            
000162DE B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
000162E2 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
000162E6 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
000162EA 6700 FA68                  		beq.w	Sonic_ChkRoll
000162EE                            
000162EE B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
000162F2 6700                       		beq.s	@chkifleft	; if yes, branch
000162F4 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
000162F8 6700                       		beq.s	@chkifinair
000162FA 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016300 4E75                       		rts	
00016302                            ; ===========================================================================
00016302                            
00016302                            @chkifinair:
00016302 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016308 6700                       		beq.s	@chkifleft	; if not, branch
0001630A                            
0001630A 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016310 4E75                       		rts	
00016312                            ; ===========================================================================
00016312                            
00016312                            @chkifleft:
00016312 3428 0008                  		move.w	obX(a0),d2
00016316 0C02 002C                  		cmpi.b	#$2C,d2
0001631A 6400                       		bcc.s	@chkifright
0001631C                            
0001631C 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016322 4E75                       		rts	
00016324                            ; ===========================================================================
00016324                            
00016324                            @chkifright:
00016324 0C02 00E0                  		cmpi.b	#$E0,d2
00016328 6500                       		bcs.s	@chkangle1
0001632A                            
0001632A 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016330 4E75                       		rts	
00016332                            ; ===========================================================================
00016332                            
00016332                            @chkangle1:
00016332 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
00016338 6600                       		bne.s	@chkangle2	; if yes, branch
0001633A                            
0001633A 1228 0026                  		move.b	obAngle(a0),d1
0001633E 6700                       		beq.s	@done
00016340 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
00016344 6200                       		bhi.s	@done		; if yes, branch
00016346 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
0001634C 4E75                       		rts	
0001634E                            ; ===========================================================================
0001634E                            
0001634E                            @chkangle2:
0001634E 1228 0026                  		move.b	obAngle(a0),d1
00016352 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
00016356 6300                       		bls.s	@done		; if yes, branch
00016358 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
0001635E                            
0001635E                            @noloops:
0001635E                            @done:
0001635E 4E75                       		rts	
00016360                            ; End of function Sonic_Loops
00016360                            ; End of function Sonic_Loops
00016360                            		include	"_incObj\Sonic Animate.asm"
00016360                            ; ---------------------------------------------------------------------------
00016360                            ; Subroutine to	animate	Sonic's sprites
00016360                            ; ---------------------------------------------------------------------------
00016360                            
00016360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016360                            
00016360                            
00016360                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016360 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
00016366 7000                       		moveq	#0,d0
00016368 1028 001C                  		move.b	obAnim(a0),d0
0001636C B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016370 6700                       		beq.s	@do		; if not, branch
00016372 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016376 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
0001637A 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
0001637E                            		
0001637E 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016384                            
00016384                            	@do:
00016384 D040                       		add.w	d0,d0
00016386 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001638A 1011                       		move.b	(a1),d0
0001638C 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001638E 1228 0022                  		move.b	obStatus(a0),d1
00016392 0201 0001                  		andi.b	#1,d1
00016396 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001639C 8328 0001                  		or.b	d1,obRender(a0)
000163A0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000163A4 6A00                       		bpl.s	@delay		; if time remains, branch
000163A6 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
000163AA                            
000163AA                            @loadframe:
000163AA 7200                       		moveq	#0,d1
000163AC 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
000163B0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000163B4 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
000163B8 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
000163BC                            
000163BC                            	@next:
000163BC 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
000163C0 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
000163C4                            
000163C4                            	@delay:
000163C4 4E75                       		rts	
000163C6                            ; ===========================================================================
000163C6                            
000163C6                            @end_FF:
000163C6 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000163C8 6600                       		bne.s	@end_FE		; if not, branch
000163CA 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
000163CE 1029 0001                  		move.b	1(a1),d0	; read sprite number
000163D2 60E8                       		bra.s	@next
000163D4                            ; ===========================================================================
000163D4                            
000163D4                            @end_FE:
000163D4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000163D6 6600                       		bne.s	@end_FD		; if not, branch
000163D8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000163DC 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
000163E0 9200                       		sub.b	d0,d1
000163E2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000163E6 60D4                       		bra.s	@next
000163E8                            ; ===========================================================================
000163E8                            
000163E8                            @end_FD:
000163E8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000163EA 6600                       		bne.s	@end		; if not, branch
000163EC 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
000163F2                            
000163F2                            	@end:
000163F2 4E75                       		rts	
000163F4                            ; ===========================================================================
000163F4                            
000163F4                            @walkrunroll:
000163F4 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000163F8 6ACA                       		bpl.s	@delay		; if time remains, branch
000163FA 5200                       		addq.b	#1,d0		; is animation walking/running?
000163FC 6600 0000                  		bne.w	@rolljump	; if not, branch
00016400 7200                       		moveq	#0,d1
00016402 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016406 6B00                       		bmi.s	@ble 			; better handling of angles
00016408 6700                       		beq.s	@ble
0001640A 5300                       		subq.b	#1,d0
0001640C                            
0001640C                            	@ble:																
0001640C 1428 0022                  		move.b	obStatus(a0),d2
00016410 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016414 6600                       		bne.s	@flip		; if yes, branch
00016416 4600                       		not.b	d0		; reverse angle
00016418                            
00016418                            	@flip:
00016418 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001641C 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
0001641E 7203                       		moveq	#3,d1
00016420                            
00016420                            	@noinvert:
00016420 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016426 B302                       		eor.b	d1,d2
00016428 8528 0001                  		or.b	d2,obRender(a0)
0001642C 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
00016432 6600 0000                  		bne.w	@push		; if yes, branch
00016436                            
00016436 E808                       		lsr.b	#4,d0		; divide angle by $10
00016438 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001643C 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016440 6A00                       		bpl.s	@nomodspeed
00016442 4442                       		neg.w	d2		; modulus speed
00016444                            
00016444                            	@nomodspeed:
00016444 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
0001644A 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
0001644E 6400                       		bcc.s	@maxrunning	; if yes, branch
00016450                            
00016450 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00016456 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001645A 6400                       		bcc.s	@running	; if yes, branch
0001645C                            
0001645C 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016462                            
00016462                            	@running:
00016462 D000                       		add.b	d0,d0
00016464 D000                       		add.b	d0,d0
00016466 1600                       		move.b	d0,d3
00016468 4442                       		neg.w	d2
0001646A 0642 0780                  		addi.w	#$780,d2
0001646E 6A00                       		bpl.s	@belowmax
00016470 7400                       		moveq	#0,d2		; max animation speed
00016472 6000                       		bra.s	@belowmax
00016474                            
00016474                            	@maxrunning:
00016474 D000                       		add.b d0,d0
00016476 1600                       		move.b d0,d3
00016478 4442                       		neg.w d2
0001647A 0642 0800                  		addi.w #$800, d2
0001647E 6A00                       		bpl.s @belowmax
00016480 7400                       		moveq #0, d2 
00016482                            
00016482                            	@belowmax:
00016482 E04A                       		lsr.w	#8,d2
00016484 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016488 6100 FF20                  		bsr.w	@loadframe
0001648C D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016490 4E75                       		rts	
00016492                            ; ===========================================================================
00016492                            
00016492                            @rolljump:
00016492 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016494 6600                       		bne.s	@push		; if not, branch
00016496 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001649A 6A00                       		bpl.s	@nomodspeed2
0001649C 4442                       		neg.w	d2
0001649E                            
0001649E                            	@nomodspeed2:
0001649E 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000164A4 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000164A8 6400                       		bcc.s	@rollfast	; if yes, branch
000164AA 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000164B0                            
000164B0                            	@rollfast:
000164B0 4442                       		neg.w	d2
000164B2 0642 0400                  		addi.w	#$400,d2
000164B6 6A00                       		bpl.s	@belowmax2
000164B8 7400                       		moveq	#0,d2
000164BA                            
000164BA                            	@belowmax2:
000164BA E04A                       		lsr.w	#8,d2
000164BC 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000164C0 1228 0022                  		move.b	obStatus(a0),d1
000164C4 0201 0001                  		andi.b	#1,d1
000164C8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000164CE 8328 0001                  		or.b	d1,obRender(a0)
000164D2 6000 FED6                  		bra.w	@loadframe
000164D6                            ; ===========================================================================
000164D6                            
000164D6                            @push:
000164D6 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000164DA 6B00                       		bmi.s	@negspeed
000164DC 4442                       		neg.w	d2
000164DE                            
000164DE                            	@negspeed:
000164DE 0642 0800                  		addi.w	#$800,d2
000164E2 6A00                       		bpl.s	@belowmax3	
000164E4 7400                       		moveq	#0,d2
000164E6                            
000164E6                            	@belowmax3:
000164E6 EC4A                       		lsr.w	#6,d2
000164E8 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000164EC 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000164F2 1228 0022                  		move.b	obStatus(a0),d1
000164F6 0201 0001                  		andi.b	#1,d1
000164FA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016500 8328 0001                  		or.b	d1,obRender(a0)
00016504 6000 FEA4                  		bra.w	@loadframe
00016508                            
00016508                            ; End of function Sonic_Animate
00016508                            ; End of function Sonic_Animate
00016508                            		include	"_anim\Sonic.asm"
00016508                            ; ---------------------------------------------------------------------------
00016508                            ; Animation script - Sonic
00016508                            ; ---------------------------------------------------------------------------
00016508                            Ani_Sonic:
00016508                            
00016508 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
0001650A 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
0001650C 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001650E 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016510 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016512 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016514 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016516 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016518 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
0001651A 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
0001651C 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
0001651E 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016520 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016522 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016524 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016526 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016528 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
0001652A 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
0001652C 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
0001652E 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016530 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016532 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016534 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016536 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016538 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
0001653A 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
0001653C 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
0001653E 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016540 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016542 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016544 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016546 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016548 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
0001654A 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
0001654C 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
0001654E 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016550 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016552 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016554                            
00016554 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016562 00                         		even
00016562 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016570 00                         		even
00016570 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016577 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001657E 00                         		even
0001657E FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016585 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001658C 00                         		even
0001658C FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001659A 00                         		even
0001659A                            SonAni_Wait:	
0001659A 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165A9 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165B8 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165C7 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
000165D6 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000165E5 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000165F4 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016603 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016612 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
0001661A                            		even
0001661A 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016620                            		even
00016620 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016626 00                         		even
00016626 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
0001662C                            		even
0001662C 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016630 00                         		even
00016630 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016634 00                         		even
00016634 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016638 00                         		even
00016638 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
0001663C 00                         		even
0001663C 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
00016646                            		even
00016646 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
0001664C 00                         		even
0001664C 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016656 00                         		even
00016656 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016660 00                         		even
00016660 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016664                            		even
00016664 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
0001666A                            		even
0001666A 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016670 00                         		even
00016670 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016674 00                         		even
00016674 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
0001667C 00                         		even
0001667C 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016680 00                         		even
00016680 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016684 00                         		even
00016684 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016688 00                         		even
00016688 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
0001668C 00                         		even
0001668C                            SonAni_WaterSlide:
0001668C 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016690                            		even
00016690 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016694                            		even
00016694 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
0001669C 00                         		even
0001669C 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
000166A0                            		even
000166A0 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
000166AE 00                         		even
000166AE 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
000166BA                            		even
000166BA 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
000166BE                            		even
000166BE 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
000166C2                            		even
000166C2 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
000166C6                            		even
000166C6 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
000166D0 00                         		even
000166D0 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
000166D9 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
000166E1 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
000166E8 3334 35                    		dc.b	$33, $34, $35
000166EB 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
000166F2                            		even
000166F2 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
000166F8                            		even
000166F8                            
000166F8                            
000166F8 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
000166F8 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
000166F8 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
000166F8 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
000166F8 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
000166F8 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
000166F8 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
000166F8 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
000166F8 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
000166F8 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
000166F8 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
000166F8 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
000166F8 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
000166F8 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
000166F8 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
000166F8 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
000166F8 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
000166F8 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
000166F8 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
000166F8 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
000166F8 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
000166F8 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
000166F8 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
000166F8 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
000166F8 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
000166F8 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
000166F8 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
000166F8 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
000166F8 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
000166F8 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
000166F8 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
000166F8 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
000166F8 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
000166F8 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
000166F8 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
000166F8 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
000166F8 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
000166F8 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000166F8 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
000166F8                            		include	"_incObj\Sonic LoadGfx.asm"
000166F8                            ; ---------------------------------------------------------------------------
000166F8                            ; Sonic	graphics loading subroutine
000166F8                            ; ---------------------------------------------------------------------------
000166F8                            
000166F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166F8                            
000166F8                            
000166F8                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
000166F8 7000                       		moveq	#0,d0
000166FA 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000166FE B038 F766                  		cmp.b	($FFFFF766).w,d0
00016702 6700                       		beq.s	locret_13C96
00016704 11C0 F766                  		move.b	d0,($FFFFF766).w
00016708 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001670E D040                       		add.w	d0,d0
00016710 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016714 7A00                       		moveq	#0,d5
00016716 1A1A                       		move.b	(a2)+,d5
00016718 5345                       		subq.w	#1,d5
0001671A 6B00                       		bmi.s	locret_13C96
0001671C 383C F000                  		move.w	#$F000,d4
00016720 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016726                            
00016726                            SPLC_ReadEntry:
00016726 7200                       		moveq	#0,d1
00016728 121A                       		move.b	(a2)+,d1
0001672A E149                       		lsl.w	#8,d1
0001672C 121A                       		move.b	(a2)+,d1
0001672E 3601                       		move.w	d1,d3
00016730 E04B                       		lsr.w	#8,d3
00016732 0243 00F0                  		andi.w	#$F0,d3
00016736 0643 0010                  		addi.w	#$10,d3
0001673A 0241 0FFF                  		andi.w	#$FFF,d1
0001673E EB89                       		lsl.l	#5,d1
00016740 D286                       		add.l	d6,d1
00016742 3404                       		move.w	d4,d2
00016744 D843                       		add.w	d3,d4
00016746 D843                       		add.w	d3,d4
00016748 4EB9 0000 11A2             		jsr	(QueueDMATransfer).l
0001674E 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016752                            
00016752                            locret_13C96:
00016752 4E75                       		rts	
00016754                            ; End of function Sonic_LoadGfx
00016754                            ; End of function Sonic_LoadGfx
00016754                            
00016754                            		include	"_incObj\0A Drowning Countdown.asm"
00016754                            ; ---------------------------------------------------------------------------
00016754                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016754                            ; Sonic's mouth (LZ)
00016754                            ; ---------------------------------------------------------------------------
00016754                            
00016754                            DrownCount:
00016754 7000                       		moveq	#0,d0
00016756 1028 0024                  		move.b	obRoutine(a0),d0
0001675A 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
0001675E 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016762                            ; ===========================================================================
00016762                            Drown_Index:
00016762 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016764 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016766 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016768 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
0001676A 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
0001676C 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
0001676E 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016770 0000                       			dc.w Drown_Display-Drown_Index
00016772 0000                       			dc.w Drown_Delete-Drown_Index
00016774                            
00016774 =00000030                  drown_origX:		equ $30		; original x-axis position
00016774 =00000038                  drown_time:		equ $38		; time between each number changes
00016774                            
00016774 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016774 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016774 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016774 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016774 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016774 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016774 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016774                            ; ===========================================================================
00016774                            
00016774                            Drown_Main:	; Routine 0
00016774 5428 0024                  		addq.b	#2,obRoutine(a0)
00016778 217C 0001 4B42 0004        		move.l	#Map_Bub,obMap(a0)
00016780 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016786 117C 0084 0001             		move.b	#$84,obRender(a0)
0001678C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016792 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016798 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
0001679C 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
0001679E                            
0001679E 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
000167A2 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
000167AA 317C 0440 0002             		move.w	#$440,obGfx(a0)
000167B0 0240 007F                  		andi.w	#$7F,d0
000167B4 1140 0033                  		move.b	d0,$33(a0)
000167B8 6000 0000                  		bra.w	Drown_Countdown
000167BC                            ; ===========================================================================
000167BC                            
000167BC                            @smallbubble:
000167BC 1140 001C                  		move.b	d0,obAnim(a0)
000167C0 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
000167C6 317C FF78 0012             		move.w	#-$88,obVelY(a0)
000167CC                            
000167CC                            Drown_Animate:	; Routine 2
000167CC 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000167D2 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
000167D8                            
000167D8                            Drown_ChkWater:	; Routine 4
000167D8 3038 F646                  		move.w	(v_waterpos1).w,d0
000167DC B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
000167E0 6500                       		bcs.s	@wobble		; if not, branch
000167E2                            
000167E2 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
000167E8 5E28 001C                  		addq.b	#7,obAnim(a0)
000167EC 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
000167F2 6700                       		beq.s	Drown_Display
000167F4 6000                       		bra.s	Drown_Display
000167F6                            ; ===========================================================================
000167F6                            
000167F6                            @wobble:
000167F6 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
000167FA 6700                       		beq.s	@notunnel	; if not, branch
000167FC 5868 0030                  		addq.w	#4,drown_origX(a0)
00016800                            
00016800                            	@notunnel:
00016800 1028 0026                  		move.b	obAngle(a0),d0
00016804 5228 0026                  		addq.b	#1,obAngle(a0)
00016808 0240 007F                  		andi.w	#$7F,d0
0001680C 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016812 1031 0000                  		move.b	(a1,d0.w),d0
00016816 4880                       		ext.w	d0
00016818 D068 0030                  		add.w	drown_origX(a0),d0
0001681C 3140 0008                  		move.w	d0,obX(a0)
00016820 6100                       		bsr.s	Drown_ShowNumber
00016822 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
00016828 4A28 0001                  		tst.b	obRender(a0)
0001682C 6A00                       		bpl.s	@delete
0001682E 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00016834                            
00016834                            	@delete:
00016834 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001683A                            ; ===========================================================================
0001683A                            
0001683A                            Drown_Display:	; Routine 6, Routine $E
0001683A 6100                       		bsr.s	Drown_ShowNumber
0001683C 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016842 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
00016848 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001684E                            ; ===========================================================================
0001684E                            
0001684E                            Drown_Delete:	; Routine 8, Routine $10
0001684E 4EF9 0000 F73A             		jmp	(DeleteObject).l
00016854                            ; ===========================================================================
00016854                            
00016854                            Drown_AirLeft:	; Routine $C
00016854 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001685A 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
0001685C 5368 0038                  		subq.w	#1,drown_time(a0)
00016860 6600                       		bne.s	@display
00016862 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016868 5E28 001C                  		addq.b	#7,obAnim(a0)
0001686C 60CC                       		bra.s	Drown_Display
0001686E                            ; ===========================================================================
0001686E                            
0001686E                            	@display:
0001686E 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016874 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001687A 4A28 0001                  		tst.b	obRender(a0)
0001687E 6A00                       		bpl.s	Drown_AirLeft_Delete
00016880 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00016886                            
00016886                            Drown_AirLeft_Delete:	
00016886 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001688C                            ; ===========================================================================
0001688C                            
0001688C                            Drown_ShowNumber:
0001688C 4A68 0038                  		tst.w	drown_time(a0)
00016890 6700                       		beq.s	@nonumber
00016892 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016896 6600                       		bne.s	@nonumber	; if time remains, branch
00016898 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
0001689E 6400                       		bcc.s	@nonumber
000168A0                            
000168A0 317C 000F 0038             		move.w	#15,drown_time(a0)
000168A6 4268 0012                  		clr.w	obVelY(a0)
000168AA 117C 0080 0001             		move.b	#$80,obRender(a0)
000168B0 3028 0008                  		move.w	obX(a0),d0
000168B4 9078 F700                  		sub.w	(v_screenposx).w,d0
000168B8 0640 0080                  		addi.w	#$80,d0
000168BC 3140 0008                  		move.w	d0,obX(a0)
000168C0 3028 000C                  		move.w	obY(a0),d0
000168C4 9078 F704                  		sub.w	(v_screenposy).w,d0
000168C8 0640 0080                  		addi.w	#$80,d0
000168CC 3140 000A                  		move.w	d0,obScreenY(a0)
000168D0 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000168D6                            
000168D6                            	@nonumber:
000168D6 4E75                       		rts	
000168D8                            ; ===========================================================================
000168D8                            Drown_WobbleData:
000168D8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000168E8 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000168F8 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016908 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016918 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016928 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016938 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016948 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016958 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016968 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016978 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016988 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016998 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000169A8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000169B8 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000169C8 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000169D8                            ; ===========================================================================
000169D8                            
000169D8                            Drown_Countdown:; Routine $A
000169D8 4A68 002C                  		tst.w	$2C(a0)
000169DC 6600 0000                  		bne.w	@loc_13F86
000169E0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000169E6 6400 0000                  		bcc.w	@nocountdown
000169EA 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000169F0 6700 0000                  		beq.w	@nocountdown	; if not, branch
000169F4                            
000169F4 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000169F8 6A00 0000                  		bpl.w	@nochange	; branch if time remains
000169FC 317C 003B 0038             		move.w	#59,drown_time(a0)
00016A02 317C 0001 0036             		move.w	#1,$36(a0)
00016A08 4EB9 0000 3788             		jsr	(RandomNumber).l
00016A0E 0240 0001                  		andi.w	#1,d0
00016A12 1140 0034                  		move.b	d0,$34(a0)
00016A16 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016A1A 0C40 0019                  		cmpi.w	#25,d0
00016A1E 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016A20 0C40 0014                  		cmpi.w	#20,d0
00016A24 6700                       		beq.s	@warnsound
00016A26 0C40 000F                  		cmpi.w	#15,d0
00016A2A 6700                       		beq.s	@warnsound
00016A2C 0C40 000C                  		cmpi.w	#12,d0
00016A30 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016A32                            
00016A32                            	@skipmusic:
00016A3C 5328 0032                  		subq.b	#1,$32(a0)
00016A40 6A00                       		bpl.s	@reduceair
00016A42 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016A48 08E8 0007 0036             		bset	#7,$36(a0)
00016A4E 6000                       		bra.s	@reduceair
00016A50                            ; ===========================================================================
00016A50                            
00016A50                            @warnsound:
00016A5A                            
00016A5A                            @reduceair:
00016A5A 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016A5E 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016A62                            
00016A62                            		; Sonic drowns here
00016A62 6100 0000                  		bsr.w	ResumeMusic
00016A66 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016A76 117C 000A 0034             		move.b	#$A,$34(a0)
00016A7C 317C 0001 0036             		move.w	#1,$36(a0)
00016A82 317C 0078 002C             		move.w	#$78,$2C(a0)
00016A88 2F08                       		move.l	a0,-(sp)
00016A8A 41F8 D000                  		lea	(v_player).w,a0
00016A8E 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016A92 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016A98 08E8 0001 0022             		bset	#1,obStatus(a0)
00016A9E 08E8 0007 0002             		bset	#7,obGfx(a0)
00016AA4 317C 0000 0012             		move.w	#0,obVelY(a0)
00016AAA 317C 0000 0010             		move.w	#0,obVelX(a0)
00016AB0 317C 0000 0020             		move.w	#0,obInertia(a0)
00016AB6 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016ABC 205F                       		movea.l	(sp)+,a0
00016ABE 4E75                       		rts	
00016AC0                            ; ===========================================================================
00016AC0                            
00016AC0                            @loc_13F86:
00016AC0 5368 002C                  		subq.w	#1,$2C(a0)
00016AC4 6600                       		bne.s	@loc_13F94
00016AC6 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016ACC 4E75                       		rts	
00016ACE                            ; ===========================================================================
00016ACE                            
00016ACE                            	@loc_13F94:
00016ACE 2F08                       		move.l	a0,-(sp)
00016AD0 41F8 D000                  		lea	(v_player).w,a0
00016AD4 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
00016ADA 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016AE0 205F                       		movea.l	(sp)+,a0
00016AE2 6000                       		bra.s	@nochange
00016AE4                            ; ===========================================================================
00016AE4                            
00016AE4                            @gotomakenum:
00016AE4 6000                       		bra.s	@makenum
00016AE6                            ; ===========================================================================
00016AE6                            
00016AE6                            @nochange:
00016AE6 4A68 0036                  		tst.w	$36(a0)
00016AEA 6700 0000                  		beq.w	@nocountdown
00016AEE 5368 003A                  		subq.w	#1,$3A(a0)
00016AF2 6A00 0000                  		bpl.w	@nocountdown
00016AF6                            
00016AF6                            @makenum:
00016AF6 4EB9 0000 3788             		jsr	(RandomNumber).l
00016AFC 0240 000F                  		andi.w	#$F,d0
00016B00 3140 003A                  		move.w	d0,$3A(a0)
00016B04 4EB9 0000 FB86             		jsr	(FindFreeObj).l
00016B0A 6600 0000                  		bne.w	@nocountdown
00016B0E 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016B12 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016B18 7006                       		moveq	#6,d0
00016B1A 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016B20 6700                       		beq.s	@noflip
00016B22 4440                       		neg.w	d0
00016B24 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016B2A                            
00016B2A                            	@noflip:
00016B2A D169 0008                  		add.w	d0,obX(a1)
00016B2E 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016B34 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016B3A 4A68 002C                  		tst.w	$2C(a0)
00016B3E 6700 0000                  		beq.w	@loc_1403E
00016B42 0268 0007 003A             		andi.w	#7,$3A(a0)
00016B48 0668 0000 003A             		addi.w	#0,$3A(a0)
00016B4E 3038 D00C                  		move.w	(v_player+obY).w,d0
00016B52 0440 000C                  		subi.w	#$C,d0
00016B56 3340 000C                  		move.w	d0,obY(a1)
00016B5A 4EB9 0000 3788             		jsr	(RandomNumber).l
00016B60 1340 0026                  		move.b	d0,obAngle(a1)
00016B64 3038 FE04                  		move.w	(v_framecount).w,d0
00016B68 0200 0003                  		andi.b	#3,d0
00016B6C 6600                       		bne.s	@loc_14082
00016B6E 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016B74 6000                       		bra.s	@loc_14082
00016B76                            ; ===========================================================================
00016B76                            
00016B76                            @loc_1403E:
00016B76 0828 0007 0036             		btst	#7,$36(a0)
00016B7C 6700                       		beq.s	@loc_14082
00016B7E 3438 FE14                  		move.w	(v_air).w,d2
00016B82 E24A                       		lsr.w	#1,d2
00016B84 4EB9 0000 3788             		jsr	(RandomNumber).l
00016B8A 0240 0003                  		andi.w	#3,d0
00016B8E 6600                       		bne.s	@loc_1406A
00016B90 08E8 0006 0036             		bset	#6,$36(a0)
00016B96 6600                       		bne.s	@loc_14082
00016B98 1342 0028                  		move.b	d2,obSubtype(a1)
00016B9C 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016BA2                            
00016BA2                            	@loc_1406A:
00016BA2 4A28 0034                  		tst.b	$34(a0)
00016BA6 6600                       		bne.s	@loc_14082
00016BA8 08E8 0006 0036             		bset	#6,$36(a0)
00016BAE 6600                       		bne.s	@loc_14082
00016BB0 1342 0028                  		move.b	d2,obSubtype(a1)
00016BB4 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016BBA                            
00016BBA                            @loc_14082:
00016BBA 5328 0034                  		subq.b	#1,$34(a0)
00016BBE 6A00                       		bpl.s	@nocountdown
00016BC0 4268 0036                  		clr.w	$36(a0)
00016BC4                            
00016BC4                            @nocountdown:
00016BC4 4E75                       		rts	
00016BC4 4E75                       		rts	
00016BC6                            
00016BC6                            
00016BC6                            ; ---------------------------------------------------------------------------
00016BC6                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016BC6                            ; ---------------------------------------------------------------------------
00016BC6                            
00016BC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BC6                            
00016BC6                            
00016BC6                            ResumeMusic:
00016BC6                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016BC6                            		;bhi.s	@over12		; if yes, branch
00016BC6                            		;move.b	(v_Saved_music),d0
00016BC6                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016BC6                            		;beq.s	@notinvinc ; if not, branch
00016BC6                            		;move.w	#bgm_Invincible,d0
00016BC6                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016BC6                            		;beq.s	@notinvinc	; if not, branch
00016BC6                            		;move.w	#bgm_Ending,d0
00016BC6                            
00016BC6                            	;@notinvinc:
00016BC6                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016BC6                            		;beq.s	@playselected ; if not, branch
00016BC6                            		;move.w	#bgm_Boss,d0
00016BC6                            
00016BC6                            	;@playselected:
00016BC6                            		;jsr	(PlaySound).l
00016BC6                            
00016BC6                            	;@over12:
00016BC6 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016BCC 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016BD0 4E75                       		rts	
00016BD2                            
00016BD2                            ;End of function ResumeMusic
00016BD2                            
00016BD2                            ; ===========================================================================
00016BD2                            
00016BD2                            		include	"_anim\Drowning Countdown.asm"
00016BD2                            ; ---------------------------------------------------------------------------
00016BD2                            ; Animation script - countdown numbers and bubbles (LZ)
00016BD2                            ; ---------------------------------------------------------------------------
00016BD2 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016BD4 0000                       		dc.w @oneappear-Ani_Drown
00016BD6 0000                       		dc.w @twoappear-Ani_Drown
00016BD8 0000                       		dc.w @threeappear-Ani_Drown
00016BDA 0000                       		dc.w @fourappear-Ani_Drown
00016BDC 0000                       		dc.w @fiveappear-Ani_Drown
00016BDE 0000                       		dc.w @smallbubble-Ani_Drown
00016BE0 0000                       		dc.w @zeroflash-Ani_Drown
00016BE2 0000                       		dc.w @oneflash-Ani_Drown
00016BE4 0000                       		dc.w @twoflash-Ani_Drown
00016BE6 0000                       		dc.w @threeflash-Ani_Drown
00016BE8 0000                       		dc.w @fourflash-Ani_Drown
00016BEA 0000                       		dc.w @fiveflash-Ani_Drown
00016BEC 0000                       		dc.w @blank-Ani_Drown
00016BEE 0000                       		dc.w @mediumbubble-Ani_Drown
00016BF0 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016BFA 00                         		even
00016BFA 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016C04 00                         		even
00016C04 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016C0E 00                         		even
00016C0E 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016C18 00                         		even
00016C18 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016C22 00                         		even
00016C22 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016C2C 00                         		even
00016C2C 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016C32 00                         		even
00016C32 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016C3A 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016C42 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016C4A 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016C52 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016C5A 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016C62 0EFC                       @blank:		dc.b $E, afRoutine
00016C64 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016C6A                            		even
00016C6A                            		even
00016C6A                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016C6A                            ; ---------------------------------------------------------------------------
00016C6A                            ; Sprite mappings - drowning countdown numbers (LZ)
00016C6A                            ; ---------------------------------------------------------------------------
00016C6A                            Map_Drown_internal:
00016C6A 0000                       		dc.w @num-Map_Drown_internal
00016C6C 01                         @num:		dc.b 1
00016C6D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016C72                            		even
00016C72                            		even
00016C72                            
00016C72                            		include	"_incObj\4E Silver Shield.asm"
00016C72                            ; ---------------------------------------------------------------------------
00016C72                            ; Object 4E - Silver Shield
00016C72                            ; ---------------------------------------------------------------------------
00016C72                            
00016C72                            SpShieldItem:
00016C72 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016C78 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016C7C                            		; In this case, VRAM = $541*20
00016C7C 363C 0200                  		move.w #$200,d3
00016C80 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016C86                            ; ---------------------------------------------------------------------------
00016C86                            SpShieldObj_Main:
00016C86 7000                       		moveq #0,d0
00016C88 1028 0024                  		move.b $24(a0),d0
00016C8C 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016C90 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016C94                            ; ===========================================================================
00016C94                            SpShield_Index:
00016C94 0000                       		dc.w SpShield_Init-SpShield_Index
00016C96 0000                       		dc.w SpShieldChecks-SpShield_Index
00016C98                            ; ===========================================================================
00016C98                            SpShield_Init:
00016C98 5428 0024                  		addq.b #2,$24(a0)
00016C9C 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016CA4 117C 0004 0001             		move.b #4,1(a0)
00016CAA 317C 0080 0018             		move.w #$80,$18(a0)
00016CB0 117C 0018 0014             		move.b #$18,obActWid(a0)
00016CB6 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016CBC 0838 0007 D002             		btst #7,($FFFFD002).w
00016CC2 6700                       		beq.s SpShieldChecks
00016CC4 08E8 0007 0002             		bset #7,2(a0)
00016CCA                            ; ---------------------------------------------------------------------------
00016CCA                            SpShieldChecks:
00016CCA 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016CCE 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016CD0 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016CD4 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016CD6                            SpShieldProperties:
00016CD6 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016CDC 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016CE2 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016CE8 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016CEE 4EB9 0000 C7A6             		jsr AnimateSprite
00016CF4 4EFA 8A04                  		jmp DisplaySprite
00016CF8                            SpSonicHasShield:
00016CF8 4E75                       		rts
00016CFA                            Spjmp_DeleteObj38: ; loc_12648:
00016CFA 4EFA 8A3E                  		jmp DeleteObject
00016CFA 4EFA 8A3E                  		jmp DeleteObject
00016CFE                            		include	"_incObj\04 Gold Shield.asm"
00016CFE                            ; ---------------------------------------------------------------------------
00016CFE                            ; Object 04 - Gold shield
00016CFE                            ; ---------------------------------------------------------------------------
00016CFE                            
00016CFE                            GShieldItem:
00016CFE 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016D04 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016D08                            		; In this case, VRAM = $541*20
00016D08 363C 0200                  		move.w #$200,d3
00016D0C 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016D12                            ; ---------------------------------------------------------------------------
00016D12                            GShieldObj_Main:
00016D12 7000                       		moveq #0,d0
00016D14 1028 0024                  		move.b $24(a0),d0
00016D18 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016D1C 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016D20                            ; ===========================================================================
00016D20                            GShield_Index:
00016D20 0000                       		dc.w GShield_Init-GShield_Index
00016D22 0000                       		dc.w GShieldChecks-GShield_Index
00016D24                            ; ===========================================================================
00016D24                            GShield_Init:
00016D24 5428 0024                  		addq.b #2,$24(a0)
00016D28 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016D30 117C 0004 0001             		move.b #4,1(a0)
00016D36 317C 0080 0018             		move.w #$80,$18(a0)
00016D3C 117C 0018 0014             		move.b #$18,obActWid(a0)
00016D42 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016D48 0838 0007 D002             		btst #7,($FFFFD002).w
00016D4E 6700                       		beq.s GShieldChecks
00016D50 08E8 0007 0002             		bset #7,2(a0)
00016D56                            ; ---------------------------------------------------------------------------
00016D56                            GShieldChecks:
00016D56 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016D5A 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016D5C 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016D60 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016D62                            GShieldProperties:
00016D62 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016D68 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016D6E 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016D74 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016D7A 4EB9 0000 C7A6             		jsr AnimateSprite
00016D80 4EFA 8978                  		jmp DisplaySprite
00016D84                            GSonicHasShield:
00016D84 4E75                       		rts
00016D86                            Gjmp_DeleteObj38: ; loc_12648:
00016D86 4EFA 89B2                  		jmp DeleteObject
00016D86 4EFA 89B2                  		jmp DeleteObject
00016D8A                            		include	"_incObj\07 Red Shield.asm"
00016D8A                            ; ---------------------------------------------------------------------------
00016D8A                            ; Object 07 - red shield
00016D8A                            ; ---------------------------------------------------------------------------
00016D8A                            
00016D8A                            RShieldItem:
00016D8A 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00016D90 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016D94                            		; In this case, VRAM = $541*20
00016D94 363C 0200                  		move.w #$200,d3
00016D98 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016D9E                            ; ---------------------------------------------------------------------------
00016D9E                            RShieldObj_Main:
00016D9E 7000                       		moveq #0,d0
00016DA0 1028 0024                  		move.b $24(a0),d0
00016DA4 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00016DA8 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00016DAC                            ; ===========================================================================
00016DAC                            RShield_Index:
00016DAC 0000                       		dc.w RShield_Init-RShield_Index
00016DAE 0000                       		dc.w RShieldChecks-RShield_Index
00016DB0                            ; ===========================================================================
00016DB0                            RShield_Init:
00016DB0 5428 0024                  		addq.b #2,$24(a0)
00016DB4 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016DBC 117C 0004 0001             		move.b #4,1(a0)
00016DC2 317C 0080 0018             		move.w #$80,$18(a0)
00016DC8 117C 0018 0014             		move.b #$18,obActWid(a0)
00016DCE 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016DD4 0838 0007 D002             		btst #7,($FFFFD002).w
00016DDA 6700                       		beq.s RShieldChecks
00016DDC 08E8 0007 0002             		bset #7,2(a0)
00016DE2                            ; ---------------------------------------------------------------------------
00016DE2                            RShieldChecks:
00016DE2 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016DE6 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00016DE8 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00016DEC 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00016DEE                            RShieldProperties:
00016DEE 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016DF4 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016DFA 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016E00 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016E06 4EB9 0000 C7A6             		jsr AnimateSprite
00016E0C 4EFA 88EC                  		jmp DisplaySprite
00016E10                            RSonicHasShield:
00016E10 4E75                       		rts
00016E12                            Rjmp_DeleteObj38: ; loc_12648:
00016E12 4EFA 8926                  		jmp DeleteObject
00016E12 4EFA 8926                  		jmp DeleteObject
00016E16                            		include	"_incObj\38 Shield.asm"
00016E16                            ; ---------------------------------------------------------------------------
00016E16                            ; Object 38 - shield
00016E16                            ; ---------------------------------------------------------------------------
00016E16                            
00016E16                            ShieldItem:
00016E16 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
00016E1C 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016E20                            		; In this case, VRAM = $541*20
00016E20 363C 0200                  		move.w #$200,d3
00016E24 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016E2A                            ; ---------------------------------------------------------------------------
00016E2A                            ShieldObj_Main:
00016E2A 7000                       		moveq #0,d0
00016E2C 1028 0024                  		move.b $24(a0),d0
00016E30 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016E34 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016E38                            ; ===========================================================================
00016E38                            Shield_Index:
00016E38 0000                       		dc.w Shield_Init-Shield_Index
00016E3A 0000                       		dc.w ShieldChecks-Shield_Index
00016E3C                            ; ===========================================================================
00016E3C                            Shield_Init:
00016E3C 5428 0024                  		addq.b #2,$24(a0)
00016E40 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016E48 117C 0004 0001             		move.b #4,1(a0)
00016E4E 317C 0080 0018             		move.w #$80,$18(a0)
00016E54 117C 0018 0014             		move.b #$18,obActWid(a0)
00016E5A 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016E60 0838 0007 D002             		btst #7,($FFFFD002).w
00016E66 6700                       		beq.s ShieldChecks
00016E68 08E8 0007 0002             		bset #7,2(a0)
00016E6E                            ; ---------------------------------------------------------------------------
00016E6E                            ShieldChecks:
00016E6E 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016E72 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016E74 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00016E78 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00016E7A                            ShieldProperties:
00016E7A 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016E80 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016E86 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016E8C 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016E92 4EB9 0000 C7A6             		jsr AnimateSprite
00016E98 4EFA 8860                  		jmp DisplaySprite
00016E9C                            SonicHasShield:
00016E9C 4E75                       		rts
00016E9E                            jmp_DeleteObj38: ; loc_12648:
00016E9E 4EFA 889A                  		jmp DeleteObject
00016E9E 4EFA 889A                  		jmp DeleteObject
00016EA2                            		include	"_incObj\19 Invincibility Stars.asm"		
00016EA2                            ; ---------------------------------------------------------------------------
00016EA2                            ; Object 19 - Invincibility Stars
00016EA2                            ; ---------------------------------------------------------------------------
00016EA2                            
00016EA2                            InvStarsObj:
00016EA2 223C 0000 0000             		move.l #Unc_Stars,d1
00016EA8 343C A820                  		move.w #$A820,d2
00016EAC 363C 0200                  		move.w #$200,d3
00016EB0 4EB9 0000 11A2             		jsr (QueueDMATransfer).l
00016EB6                            Invincibility_Main:
00016EB6 7000                       		moveq #0,d0
00016EB8 1028 0024                  		move.b $24(a0),d0
00016EBC                            Invincibility_Init:
00016EBC 5428 0024                  		addq.b #2,$24(a0)
00016EC0 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00016EC8 117C 0004 0001             		move.b #4,1(a0)
00016ECE 317C 0080 0018             		move.w #$80,$18(a0)
00016ED4 117C 0010 0014             		move.b #$10,obActWid(a0)
00016EDA 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00016EE0                            ; ===========================================================================
00016EE0                            
00016EE0                            Obj19_Stars: ; XREF: Obj38_Index
00016EE0 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00016EE4 6700                       		beq.s Obj19_Delete2 ; if not, branch
00016EE6 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00016EEA 1228 001C                  		move.b $1C(a0),d1
00016EEE 5301                       		subq.b #1,d1
00016EF0 6000                       		bra.s Obj19_StarTrail
00016EF2                            ; ===========================================================================
00016EF2 E909                       		lsl.b #4,d1
00016EF4 5801                       		addq.b #4,d1
00016EF6 9001                       		sub.b d1,d0
00016EF8 1228 0030                  		move.b $30(a0),d1
00016EFC 9001                       		sub.b d1,d0
00016EFE 5801                       		addq.b #4,d1
00016F00 0201 000F                  		andi.b #$F,d1
00016F04 1141 0030                  		move.b d1,$30(a0)
00016F08 6000                       		bra.s Obj19_StarTrail2a
00016F0A                            ; ===========================================================================
00016F0A                            
00016F0A                            Obj19_StarTrail: ; XREF: Obj19_Stars
00016F0A E709                       		lsl.b #3,d1
00016F0C 1401                       		move.b d1,d2
00016F0E D201                       		add.b d1,d1
00016F10 D202                       		add.b d2,d1
00016F12 5801                       		addq.b #4,d1
00016F14 9001                       		sub.b d1,d0
00016F16 1228 0030                  		move.b $30(a0),d1
00016F1A 9001                       		sub.b d1,d0
00016F1C 5801                       		addq.b #4,d1
00016F1E 0C01 0018                  		cmpi.b #$18,d1
00016F22 6500                       		bcs.s Obj19_StarTrail2
00016F24 7200                       		moveq #0,d1
00016F26                            
00016F26                            Obj19_StarTrail2:
00016F26 1141 0030                  		move.b d1,$30(a0)
00016F2A                            
00016F2A                            Obj19_StarTrail2a:
00016F2A 43F8 CB00                  		lea ($FFFFCB00).w,a1
00016F2E 43F1 0000                  		lea (a1,d0.w),a1
00016F32 3159 0008                  		move.w (a1)+,8(a0)
00016F36 3159 000C                  		move.w (a1)+,$C(a0)
00016F3A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
00016F40 43F9 0000 0000             		lea (Ani_Shield).l,a1
00016F46 4EB9 0000 C7A6             		jsr (AnimateSprite).l
00016F4C 4EF9 0000 F6FA             		jmp (DisplaySprite).l
00016F52                            ; ===========================================================================
00016F52                            
00016F52                            Obj19_Delete2: ; XREF: Obj19_Stars
00016F52 4EF9 0000 F73A             		jmp (DeleteObject).l
00016F52 4EF9 0000 F73A             		jmp (DeleteObject).l
00016F58                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00016F58                            ; ---------------------------------------------------------------------------
00016F58                            ; Object 4A - special stage entry from beta
00016F58                            ; ---------------------------------------------------------------------------
00016F58                            
00016F58                            VanishSonic:
00016F58 7000                       		moveq	#0,d0
00016F5A 1028 0024                  		move.b	obRoutine(a0),d0
00016F5E 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00016F62 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00016F66                            ; ===========================================================================
00016F66 0000                       Van_Index:	dc.w Van_Main-Van_Index
00016F68 0000                       		dc.w Van_RmvSonic-Van_Index
00016F6A 0000                       		dc.w Van_LoadSonic-Van_Index
00016F6C                            
00016F6C =00000030                  van_time:	equ $30		; time for Sonic to disappear
00016F6C                            ; ===========================================================================
00016F6C                            
00016F6C                            Van_Main:	; Routine 0
00016F6C 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00016F70 6700                       		beq.s	@isempty	; if yes, branch
00016F72 4E75                       		rts	
00016F74                            
00016F74                            	@isempty:
00016F74 5428 0024                  		addq.b	#2,obRoutine(a0)
00016F78 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00016F80 117C 0004 0001             		move.b	#4,obRender(a0)
00016F86 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016F8C 117C 0038 0014             		move.b	#$38,obActWid(a0)
00016F92 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016F98 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00016F9E                            
00016F9E                            Van_RmvSonic:	; Routine 2
00016F9E 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00016FA4 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00016FAA 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00016FB0 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00016FB6 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
00016FBC 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00016FC2 6600                       		bne.s	@display
00016FC4 4A38 D000                  		tst.b	(v_player).w
00016FC8 6700                       		beq.s	@display
00016FCA 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00016FDA                            
00016FDA                            	@display:
00016FDA 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00016FE0                            ; ===========================================================================
00016FE0                            
00016FE0                            Van_LoadSonic:	; Routine 4
00016FE0 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00016FE4 6600                       		bne.s	@wait		; if time remains, branch
00016FE6 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00016FEC 4EF9 0000 F73A             		jmp	(DeleteObject).l
00016FF2                            
00016FF2                            	@wait:
00016FF2 4E75                       		rts	
00016FF2 4E75                       		rts	
00016FF4                            		include	"_incObj\08 Water Splash.asm"
00016FF4                            ; ---------------------------------------------------------------------------
00016FF4                            ; Object 08 - water splash (LZ)
00016FF4                            ; ---------------------------------------------------------------------------
00016FF4                            
00016FF4                            Splash:
00016FF4 7000                       		moveq	#0,d0
00016FF6 1028 0024                  		move.b	obRoutine(a0),d0
00016FFA 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00016FFE 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017002                            ; ===========================================================================
00017002 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017004 0000                       		dc.w Spla_Display-Spla_Index
00017006 0000                       		dc.w Spla_Delete-Spla_Index
00017008                            ; ===========================================================================
00017008                            
00017008                            Spla_Main:    ; Routine 0
00017008 5428 0024                          addq.b    #2,obRoutine(a0)
0001700C 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017014 0028 0004 0001                     ori.b    #4,obRender(a0)
0001701A 117C 0001 0018                     move.b    #1,obPriority(a0)
00017020 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017026 317C 4259 0002                     move.w    #$4259,obGfx(a0)
0001702C 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017032                            
00017032                            Spla_Display:    ; Routine 2
00017032                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017032 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017038 43F9 0000 0000                     lea    (Ani_Splash).l,a1
0001703E 4EB9 0000 C7A6                     jsr    (AnimateSprite).l
00017044 4EF9 0000 F6FA                     jmp    (DisplaySprite).l
0001704A                            ; ===========================================================================
0001704A                            
0001704A                            Spla_Delete:	; Routine 4
0001704A 4EF9 0000 F73A             		jmp	(DeleteObject).l	; delete when animation	is complete
0001704A 4EF9 0000 F73A             		jmp	(DeleteObject).l	; delete when animation	is complete
00017050                            		include	"_anim\Shield and Invincibility.asm"
00017050                            ; ---------------------------------------------------------------------------
00017050                            ; Animation script - shield and invincibility stars
00017050                            ; ---------------------------------------------------------------------------
00017050 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017052 0000                       		dc.w @stars1-Ani_Shield
00017054 0000                       		dc.w @stars2-Ani_Shield
00017056 0000                       		dc.w @stars3-Ani_Shield
00017058 0000                       		dc.w @stars4-Ani_Shield
0001705A 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
00017062 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
00017068 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00017079 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00017082 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017093 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
0001709C 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000170AD 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
000170B6                            		even
000170B6                            		even
000170B6                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
000170B6                            ; --------------------------------------------------------------------------------
000170B6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000170B6                            ; --------------------------------------------------------------------------------
000170B6                            
000170B6                            SME_7M_8q:	
000170B6 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
000170BA 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
000170BE 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
000170C2 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
000170C6 00                         SME_7M_8q_10:	dc.b 0	
000170C7 04                         SME_7M_8q_11:	dc.b 4	
000170C8 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000170CD E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000170D2 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000170D7 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000170DC 04                         SME_7M_8q_26:	dc.b 4	
000170DD E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
000170E2 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
000170E7 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
000170EC 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
000170F1 04                         SME_7M_8q_3B:	dc.b 4	
000170F2 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000170F7 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000170FC 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017101 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017106 04                         SME_7M_8q_50:	dc.b 4	
00017107 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001710C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017111 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017116 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
0001711B 04                         SME_7M_8q_65:	dc.b 4	
0001711C E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017121 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017126 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
0001712B 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017130 04                         SME_7M_8q_7A:	dc.b 4	
00017131 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
00017136 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
0001713B 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
00017140 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
00017145 04                         SME_7M_8q_8F:	dc.b 4	
00017146 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
0001714B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
00017150 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00017155 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001715A                            		even
0001715A                            		even
0001715A                            Map_Shield2:	include	"_maps\Shield 2.asm"
0001715A                            ; --------------------------------------------------------------------------------
0001715A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001715A                            ; --------------------------------------------------------------------------------
0001715A                            
0001715A                            SME_X5P7B:	
0001715A 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
0001715E 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
00017162 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
00017166 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
0001716A 00                         SME_X5P7B_10:	dc.b 0	
0001716B 04                         SME_X5P7B_11:	dc.b 4	
0001716C E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017171 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017176 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001717B 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017180 04                         SME_X5P7B_26:	dc.b 4	
00017181 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017186 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001718B 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017190 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017195 04                         SME_X5P7B_3B:	dc.b 4	
00017196 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001719B E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000171A0 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000171A5 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000171AA 04                         SME_X5P7B_50:	dc.b 4	
000171AB E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000171B0 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000171B5 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000171BA 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000171BF 04                         SME_X5P7B_65:	dc.b 4	
000171C0 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000171C5 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000171CA 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000171CF 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000171D4 04                         SME_X5P7B_7A:	dc.b 4	
000171D5 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
000171DA E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
000171DF 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
000171E4 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
000171E9 04                         SME_X5P7B_8F:	dc.b 4	
000171EA E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
000171EF E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
000171F4 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
000171F9 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
000171FE                            		even
000171FE                            		even
000171FE                            
000171FE                            Map_Shield3:	include	"_maps\Shield 3.asm"
000171FE                            ; --------------------------------------------------------------------------------
000171FE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000171FE                            ; --------------------------------------------------------------------------------
000171FE                            
000171FE                            SME__wWzO:	
000171FE 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
00017202 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
00017206 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
0001720A 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
0001720E 00                         SME__wWzO_10:	dc.b 0	
0001720F 04                         SME__wWzO_11:	dc.b 4	
00017210 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017215 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001721A 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001721F 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017224 04                         SME__wWzO_26:	dc.b 4	
00017225 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
0001722A E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001722F 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017234 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017239 04                         SME__wWzO_3B:	dc.b 4	
0001723A E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001723F E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017244 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017249 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001724E 04                         SME__wWzO_50:	dc.b 4	
0001724F E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017254 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017259 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001725E 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017263 04                         SME__wWzO_65:	dc.b 4	
00017264 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017269 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001726E 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017273 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017278 04                         SME__wWzO_7A:	dc.b 4	
00017279 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001727E E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017283 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017288 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
0001728D 04                         SME__wWzO_8F:	dc.b 4	
0001728E E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017293 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017298 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
0001729D 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
000172A2                            		even
000172A2                            		even
000172A2                            		include	"_anim\Special Stage Entry (Unused).asm"
000172A2                            ; ---------------------------------------------------------------------------
000172A2                            ; Animation script - special stage entry effect from beta
000172A2                            ; ---------------------------------------------------------------------------
000172A2 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
000172A4 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
000172B8                            		even
000172B8                            		even
000172B8                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
000172B8                            ; ---------------------------------------------------------------------------
000172B8                            ; Sprite mappings - special stage entry	from beta
000172B8                            ; ---------------------------------------------------------------------------
000172B8                            Map_Vanish_internal:
000172B8 0000                       		dc.w @flash1-Map_Vanish_internal
000172BA 0000                       		dc.w @flash2-Map_Vanish_internal
000172BC 0000                       		dc.w @flash3-Map_Vanish_internal
000172BE 0000                       		dc.w @sparkle1-Map_Vanish_internal
000172C0 0000                       		dc.w @sparkle2-Map_Vanish_internal
000172C2 0000                       		dc.w @sparkle3-Map_Vanish_internal
000172C4 0000                       		dc.w @sparkle4-Map_Vanish_internal
000172C6 0000                       		dc.w @blank-Map_Vanish_internal
000172C8 03                         @flash1:	dc.b 3
000172C9 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000172CE 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000172D3 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000172D8 03                         @flash2:	dc.b 3
000172D9 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000172DE 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000172E3 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000172E8 05                         @flash3:	dc.b 5
000172E9 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000172EE EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000172F3 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000172F8 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000172FD 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017302 09                         @sparkle1:	dc.b 9
00017303 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017308 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001730D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00017312 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00017317 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001731C F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00017321 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017326 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001732B F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00017330 12                         @sparkle2:	dc.b $12
00017331 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00017336 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001733B F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00017340 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017345 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001734A 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001734F 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017354 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00017359 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001735E 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017363 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00017368 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001736D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017372 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017377 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001737C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017381 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017386 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001738B 11                         @sparkle3:	dc.b $11
0001738C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017391 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017396 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001739B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000173A0 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000173A5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000173AA 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000173AF F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000173B4 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000173B9 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000173BE 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000173C3 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000173C8 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000173CD 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000173D2 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000173D7 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000173DC 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000173E1 09                         @sparkle4:	dc.b 9
000173E2 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000173E7 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000173EC 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000173F1 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000173F6 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000173FB FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017400 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017405 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001740A 04                         		dc.b 4
0001740B 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00017410                            		even
00017410                            		even
00017410                            		include	"_anim\Water Splash.asm"
00017410                            ; ---------------------------------------------------------------------------
00017410                            ; Animation script - water splash (LZ)
00017410                            ; ---------------------------------------------------------------------------
00017410 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00017412 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00017418 00                         		even
00017418 00                         		even
00017418                            Map_Splash:	include	"_maps\Water Splash.asm"
00017418                            ; ---------------------------------------------------------------------------
00017418                            ; Sprite mappings - water splash (LZ)
00017418                            ; ---------------------------------------------------------------------------
00017418                            Map_Splash_internal:
00017418 0000                       		dc.w @splash1-Map_Splash_internal
0001741A 0000                       		dc.w @splash2-Map_Splash_internal
0001741C 0000                       		dc.w @splash3-Map_Splash_internal
0001741E 02                         @splash1:	dc.b 2
0001741F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00017424 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00017429 02                         @splash2:	dc.b 2
0001742A E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001742F EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00017434 01                         @splash3:	dc.b 1
00017435 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001743A                            		even
0001743A                            		even
0001743A                            
0001743A                            		include	"_incObj\Sonic AnglePos.asm"
0001743A                            ; ---------------------------------------------------------------------------
0001743A                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001743A                            ; ---------------------------------------------------------------------------
0001743A                            
0001743A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001743A                            
0001743A                            
0001743A                            Sonic_AnglePos:
0001743A 0828 0003 0022             		btst	#3,obStatus(a0)
00017440 6700                       		beq.s	loc_14602
00017442 7000                       		moveq	#0,d0
00017444 11C0 F768                  		move.b	d0,($FFFFF768).w
00017448 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001744C 4E75                       		rts	
0001744E                            ; ===========================================================================
0001744E                            
0001744E                            loc_14602:
0001744E 7003                       		moveq	#3,d0
00017450 11C0 F768                  		move.b	d0,($FFFFF768).w
00017454 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017458 1028 0026                  		move.b	obAngle(a0),d0
0001745C 0600 0020                  		addi.b	#$20,d0
00017460 6A00                       		bpl.s	loc_14624
00017462 1028 0026                  		move.b	obAngle(a0),d0
00017466 6A00                       		bpl.s	loc_1461E
00017468 5300                       		subq.b	#1,d0
0001746A                            
0001746A                            loc_1461E:
0001746A 0600 0020                  		addi.b	#$20,d0
0001746E 6000                       		bra.s	loc_14630
00017470                            ; ===========================================================================
00017470                            
00017470                            loc_14624:
00017470 1028 0026                  		move.b	obAngle(a0),d0
00017474 6A00                       		bpl.s	loc_1462C
00017476 5200                       		addq.b	#1,d0
00017478                            
00017478                            loc_1462C:
00017478 0600 001F                  		addi.b	#$1F,d0
0001747C                            
0001747C                            loc_14630:
0001747C 0200 00C0                  		andi.b	#$C0,d0
00017480 0C00 0040                  		cmpi.b	#$40,d0
00017484 6700 0000                  		beq.w	Sonic_WalkVertL
00017488 0C00 0080                  		cmpi.b	#$80,d0
0001748C 6700 0000                  		beq.w	Sonic_WalkCeiling
00017490 0C00 00C0                  		cmpi.b	#$C0,d0
00017494 6700 0000                  		beq.w	Sonic_WalkVertR
00017498 3428 000C                  		move.w	obY(a0),d2
0001749C 3628 0008                  		move.w	obX(a0),d3
000174A0 7000                       		moveq	#0,d0
000174A2 1028 0016                  		move.b	obHeight(a0),d0
000174A6 4880                       		ext.w	d0
000174A8 D440                       		add.w	d0,d2
000174AA 1028 0017                  		move.b	obWidth(a0),d0
000174AE 4880                       		ext.w	d0
000174B0 D640                       		add.w	d0,d3
000174B2 49F8 F768                  		lea	($FFFFF768).w,a4
000174B6 367C 0010                  		movea.w	#$10,a3
000174BA 3C3C 0000                  		move.w	#0,d6
000174BE 7A0D                       		moveq	#$D,d5
000174C0 6100 0000                  		bsr.w	FindFloor
000174C4 3F01                       		move.w	d1,-(sp)
000174C6 3428 000C                  		move.w	obY(a0),d2
000174CA 3628 0008                  		move.w	obX(a0),d3
000174CE 7000                       		moveq	#0,d0
000174D0 1028 0016                  		move.b	obHeight(a0),d0
000174D4 4880                       		ext.w	d0
000174D6 D440                       		add.w	d0,d2
000174D8 1028 0017                  		move.b	obWidth(a0),d0
000174DC 4880                       		ext.w	d0
000174DE 4440                       		neg.w	d0
000174E0 D640                       		add.w	d0,d3
000174E2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000174E6 367C 0010                  		movea.w	#$10,a3
000174EA 3C3C 0000                  		move.w	#0,d6
000174EE 7A0D                       		moveq	#$D,d5
000174F0 6100 0000                  		bsr.w	FindFloor
000174F4 301F                       		move.w	(sp)+,d0
000174F6 6100 0000                  		bsr.w	Sonic_Angle
000174FA 4A41                       		tst.w	d1
000174FC 6700                       		beq.s	locret_146BE
000174FE 6A00                       		bpl.s	loc_146C0
00017500 0C41 FFF2                  		cmpi.w	#-$E,d1
00017504 6D00                       		blt.s	locret_146E6
00017506 D368 000C                  		add.w	d1,obY(a0)
0001750A                            
0001750A                            locret_146BE:
0001750A 4E75                       		rts	
0001750C                            ; ===========================================================================
0001750C                            
0001750C                            loc_146C0:
0001750C 0C41 000E                  		cmpi.w	#$E,d1
00017510 6E00                       		bgt.s	loc_146CC
00017512                            
00017512                            loc_146C6:
00017512 D368 000C                  		add.w	d1,obY(a0)
00017516 4E75                       		rts	
00017518                            ; ===========================================================================
00017518                            
00017518                            loc_146CC:
00017518 4A28 0038                  		tst.b	$38(a0)
0001751C 66F4                       		bne.s	loc_146C6
0001751E 08E8 0001 0022             		bset	#1,obStatus(a0)
00017524 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001752A 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017530 4E75                       		rts	
00017532                            ; ===========================================================================
00017532                            
00017532                            locret_146E6:
00017532 4E75                       		rts	
00017534                            ; End of function Sonic_AnglePos
00017534                            
00017534                            ; ===========================================================================
00017534 2428 0008                  		move.l	obX(a0),d2
00017538 3028 0010                  		move.w	obVelX(a0),d0
0001753C 48C0                       		ext.l	d0
0001753E E180                       		asl.l	#8,d0
00017540 9480                       		sub.l	d0,d2
00017542 2142 0008                  		move.l	d2,obX(a0)
00017546 303C 0038                  		move.w	#$38,d0
0001754A 48C0                       		ext.l	d0
0001754C E180                       		asl.l	#8,d0
0001754E 9680                       		sub.l	d0,d3
00017550 2143 000C                  		move.l	d3,obY(a0)
00017554 4E75                       		rts	
00017556                            ; ===========================================================================
00017556                            
00017556                            locret_1470A:
00017556 4E75                       		rts	
00017558                            ; ===========================================================================
00017558 2628 000C                  		move.l	obY(a0),d3
0001755C 3028 0012                  		move.w	obVelY(a0),d0
00017560 0440 0038                  		subi.w	#$38,d0
00017564 3140 0012                  		move.w	d0,obVelY(a0)
00017568 48C0                       		ext.l	d0
0001756A E180                       		asl.l	#8,d0
0001756C 9680                       		sub.l	d0,d3
0001756E 2143 000C                  		move.l	d3,obY(a0)
00017572 4E75                       		rts	
00017574 4E75                       		rts	
00017576                            ; ===========================================================================
00017576 2428 0008                  		move.l	obX(a0),d2
0001757A 2628 000C                  		move.l	obY(a0),d3
0001757E 3028 0010                  		move.w	obVelX(a0),d0
00017582 48C0                       		ext.l	d0
00017584 E180                       		asl.l	#8,d0
00017586 9480                       		sub.l	d0,d2
00017588 3028 0012                  		move.w	obVelY(a0),d0
0001758C 48C0                       		ext.l	d0
0001758E E180                       		asl.l	#8,d0
00017590 9680                       		sub.l	d0,d3
00017592 2142 0008                  		move.l	d2,obX(a0)
00017596 2143 000C                  		move.l	d3,obY(a0)
0001759A 4E75                       		rts	
0001759C                            
0001759C                            ; ---------------------------------------------------------------------------
0001759C                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001759C                            ; ---------------------------------------------------------------------------
0001759C                            
0001759C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001759C                            
0001759C                            
0001759C                            Sonic_Angle:
0001759C 1438 F76A                  		move.b	($FFFFF76A).w,d2
000175A0 B240                       		cmp.w	d0,d1
000175A2 6F00                       		ble.s	loc_1475E
000175A4 1438 F768                  		move.b	($FFFFF768).w,d2
000175A8 3200                       		move.w	d0,d1
000175AA                            
000175AA                            loc_1475E:
000175AA 0802 0000                  		btst	#0,d2
000175AE 6600                       		bne.s	loc_1476A
000175B0 1142 0026                  		move.b	d2,obAngle(a0)
000175B4 4E75                       		rts	
000175B6                            ; ===========================================================================
000175B6                            
000175B6                            loc_1476A:
000175B6 1428 0026                  		move.b	obAngle(a0),d2
000175BA 0602 0020                  		addi.b	#$20,d2
000175BE 0202 00C0                  		andi.b	#$C0,d2
000175C2 1142 0026                  		move.b	d2,obAngle(a0)
000175C6 4E75                       		rts	
000175C8                            ; End of function Sonic_Angle
000175C8                            
000175C8                            ; ---------------------------------------------------------------------------
000175C8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000175C8                            ; ---------------------------------------------------------------------------
000175C8                            
000175C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000175C8                            
000175C8                            
000175C8                            Sonic_WalkVertR:
000175C8 3428 000C                  		move.w	obY(a0),d2
000175CC 3628 0008                  		move.w	obX(a0),d3
000175D0 7000                       		moveq	#0,d0
000175D2 1028 0017                  		move.b	obWidth(a0),d0
000175D6 4880                       		ext.w	d0
000175D8 4440                       		neg.w	d0
000175DA D440                       		add.w	d0,d2
000175DC 1028 0016                  		move.b	obHeight(a0),d0
000175E0 4880                       		ext.w	d0
000175E2 D640                       		add.w	d0,d3
000175E4 49F8 F768                  		lea	($FFFFF768).w,a4
000175E8 367C 0010                  		movea.w	#$10,a3
000175EC 3C3C 0000                  		move.w	#0,d6
000175F0 7A0D                       		moveq	#$D,d5
000175F2 6100 0000                  		bsr.w	FindWall
000175F6 3F01                       		move.w	d1,-(sp)
000175F8 3428 000C                  		move.w	obY(a0),d2
000175FC 3628 0008                  		move.w	obX(a0),d3
00017600 7000                       		moveq	#0,d0
00017602 1028 0017                  		move.b	obWidth(a0),d0
00017606 4880                       		ext.w	d0
00017608 D440                       		add.w	d0,d2
0001760A 1028 0016                  		move.b	obHeight(a0),d0
0001760E 4880                       		ext.w	d0
00017610 D640                       		add.w	d0,d3
00017612 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017616 367C 0010                  		movea.w	#$10,a3
0001761A 3C3C 0000                  		move.w	#0,d6
0001761E 7A0D                       		moveq	#$D,d5
00017620 6100 0000                  		bsr.w	FindWall
00017624 301F                       		move.w	(sp)+,d0
00017626 6100 FF74                  		bsr.w	Sonic_Angle
0001762A 4A41                       		tst.w	d1
0001762C 6700                       		beq.s	locret_147F0
0001762E 6A00                       		bpl.s	loc_147F2
00017630 0C41 FFF2                  		cmpi.w	#-$E,d1
00017634 6D00 FF20                  		blt.w	locret_1470A
00017638 D368 0008                  		add.w	d1,obX(a0)
0001763C                            
0001763C                            locret_147F0:
0001763C 4E75                       		rts	
0001763E                            ; ===========================================================================
0001763E                            
0001763E                            loc_147F2:
0001763E 0C41 000E                  		cmpi.w	#$E,d1
00017642 6E00                       		bgt.s	loc_147FE
00017644                            
00017644                            loc_147F8:
00017644 D368 0008                  		add.w	d1,obX(a0)
00017648 4E75                       		rts	
0001764A                            ; ===========================================================================
0001764A                            
0001764A                            loc_147FE:
0001764A 4A28 0038                  		tst.b	$38(a0)
0001764E 66F4                       		bne.s	loc_147F8
00017650 08E8 0001 0022             		bset	#1,obStatus(a0)
00017656 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001765C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017662 4E75                       		rts	
00017664                            ; End of function Sonic_WalkVertR
00017664                            
00017664                            ; ---------------------------------------------------------------------------
00017664                            ; Subroutine allowing Sonic to walk upside-down
00017664                            ; ---------------------------------------------------------------------------
00017664                            
00017664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017664                            
00017664                            
00017664                            Sonic_WalkCeiling:
00017664 3428 000C                  		move.w	obY(a0),d2
00017668 3628 0008                  		move.w	obX(a0),d3
0001766C 7000                       		moveq	#0,d0
0001766E 1028 0016                  		move.b	obHeight(a0),d0
00017672 4880                       		ext.w	d0
00017674 9440                       		sub.w	d0,d2
00017676 0A42 000F                  		eori.w	#$F,d2
0001767A 1028 0017                  		move.b	obWidth(a0),d0
0001767E 4880                       		ext.w	d0
00017680 D640                       		add.w	d0,d3
00017682 49F8 F768                  		lea	($FFFFF768).w,a4
00017686 367C FFF0                  		movea.w	#-$10,a3
0001768A 3C3C 1000                  		move.w	#$1000,d6
0001768E 7A0D                       		moveq	#$D,d5
00017690 6100 0000                  		bsr.w	FindFloor
00017694 3F01                       		move.w	d1,-(sp)
00017696 3428 000C                  		move.w	obY(a0),d2
0001769A 3628 0008                  		move.w	obX(a0),d3
0001769E 7000                       		moveq	#0,d0
000176A0 1028 0016                  		move.b	obHeight(a0),d0
000176A4 4880                       		ext.w	d0
000176A6 9440                       		sub.w	d0,d2
000176A8 0A42 000F                  		eori.w	#$F,d2
000176AC 1028 0017                  		move.b	obWidth(a0),d0
000176B0 4880                       		ext.w	d0
000176B2 9640                       		sub.w	d0,d3
000176B4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000176B8 367C FFF0                  		movea.w	#-$10,a3
000176BC 3C3C 1000                  		move.w	#$1000,d6
000176C0 7A0D                       		moveq	#$D,d5
000176C2 6100 0000                  		bsr.w	FindFloor
000176C6 301F                       		move.w	(sp)+,d0
000176C8 6100 FED2                  		bsr.w	Sonic_Angle
000176CC 4A41                       		tst.w	d1
000176CE 6700                       		beq.s	locret_14892
000176D0 6A00                       		bpl.s	loc_14894
000176D2 0C41 FFF2                  		cmpi.w	#-$E,d1
000176D6 6D00 FE5A                  		blt.w	locret_146E6
000176DA 9368 000C                  		sub.w	d1,obY(a0)
000176DE                            
000176DE                            locret_14892:
000176DE 4E75                       		rts	
000176E0                            ; ===========================================================================
000176E0                            
000176E0                            loc_14894:
000176E0 0C41 000E                  		cmpi.w	#$E,d1
000176E4 6E00                       		bgt.s	loc_148A0
000176E6                            
000176E6                            loc_1489A:
000176E6 9368 000C                  		sub.w	d1,obY(a0)
000176EA 4E75                       		rts	
000176EC                            ; ===========================================================================
000176EC                            
000176EC                            loc_148A0:
000176EC 4A28 0038                  		tst.b	$38(a0)
000176F0 66F4                       		bne.s	loc_1489A
000176F2 08E8 0001 0022             		bset	#1,obStatus(a0)
000176F8 08A8 0005 0022             		bclr	#5,obStatus(a0)
000176FE 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017704 4E75                       		rts	
00017706                            ; End of function Sonic_WalkCeiling
00017706                            
00017706                            ; ---------------------------------------------------------------------------
00017706                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017706                            ; ---------------------------------------------------------------------------
00017706                            
00017706                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017706                            
00017706                            
00017706                            Sonic_WalkVertL:
00017706 3428 000C                  		move.w	obY(a0),d2
0001770A 3628 0008                  		move.w	obX(a0),d3
0001770E 7000                       		moveq	#0,d0
00017710 1028 0017                  		move.b	obWidth(a0),d0
00017714 4880                       		ext.w	d0
00017716 9440                       		sub.w	d0,d2
00017718 1028 0016                  		move.b	obHeight(a0),d0
0001771C 4880                       		ext.w	d0
0001771E 9640                       		sub.w	d0,d3
00017720 0A43 000F                  		eori.w	#$F,d3
00017724 49F8 F768                  		lea	($FFFFF768).w,a4
00017728 367C FFF0                  		movea.w	#-$10,a3
0001772C 3C3C 0800                  		move.w	#$800,d6
00017730 7A0D                       		moveq	#$D,d5
00017732 6100 0000                  		bsr.w	FindWall
00017736 3F01                       		move.w	d1,-(sp)
00017738 3428 000C                  		move.w	obY(a0),d2
0001773C 3628 0008                  		move.w	obX(a0),d3
00017740 7000                       		moveq	#0,d0
00017742 1028 0017                  		move.b	obWidth(a0),d0
00017746 4880                       		ext.w	d0
00017748 D440                       		add.w	d0,d2
0001774A 1028 0016                  		move.b	obHeight(a0),d0
0001774E 4880                       		ext.w	d0
00017750 9640                       		sub.w	d0,d3
00017752 0A43 000F                  		eori.w	#$F,d3
00017756 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001775A 367C FFF0                  		movea.w	#-$10,a3
0001775E 3C3C 0800                  		move.w	#$800,d6
00017762 7A0D                       		moveq	#$D,d5
00017764 6100 0000                  		bsr.w	FindWall
00017768 301F                       		move.w	(sp)+,d0
0001776A 6100 FE30                  		bsr.w	Sonic_Angle
0001776E 4A41                       		tst.w	d1
00017770 6700                       		beq.s	locret_14934
00017772 6A00                       		bpl.s	loc_14936
00017774 0C41 FFF2                  		cmpi.w	#-$E,d1
00017778 6D00 FDDC                  		blt.w	locret_1470A
0001777C 9368 0008                  		sub.w	d1,obX(a0)
00017780                            
00017780                            locret_14934:
00017780 4E75                       		rts	
00017782                            ; ===========================================================================
00017782                            
00017782                            loc_14936:
00017782 0C41 000E                  		cmpi.w	#$E,d1
00017786 6E00                       		bgt.s	loc_14942
00017788                            
00017788                            loc_1493C:
00017788 9368 0008                  		sub.w	d1,obX(a0)
0001778C 4E75                       		rts	
0001778E                            ; ===========================================================================
0001778E                            
0001778E                            loc_14942:
0001778E 4A28 0038                  		tst.b	$38(a0)
00017792 66F4                       		bne.s	loc_1493C
00017794 08E8 0001 0022             		bset	#1,obStatus(a0)
0001779A 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177A0 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177A6 4E75                       		rts	
000177A8                            ; End of function Sonic_WalkVertL
000177A8                            ; End of function Sonic_WalkVertL
000177A8                            
000177A8                            		include	"_incObj\sub FindNearestTile.asm"
000177A8                            ; ---------------------------------------------------------------------------
000177A8                            ; Subroutine to	find which tile	the object is standing on
000177A8                            
000177A8                            ; input:
000177A8                            ;	d2 = y-position of object's bottom edge
000177A8                            ;	d3 = x-position of object
000177A8                            
000177A8                            ; output:
000177A8                            ;	a1 = address within 256x256 mappings where object is standing
000177A8                            ;	     (refers to a 16x16 tile number)
000177A8                            ; ---------------------------------------------------------------------------
000177A8                            
000177A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177A8                            
000177A8                            
000177A8                            FindNearestTile:
000177A8 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
000177AA E248                       		lsr.w	#1,d0
000177AC 0240 0380                  		andi.w	#$380,d0
000177B0 3203                       		move.w	d3,d1		; get x-pos. of object
000177B2 E049                       		lsr.w	#8,d1
000177B4 0241 007F                  		andi.w	#$7F,d1
000177B8 D041                       		add.w	d1,d0		; combine
000177BA 72FF                       		moveq	#-1,d1
000177BC 43F8 A400                  		lea	(v_lvllayout).w,a1
000177C0 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000177C4 6700                       		beq.s	@blanktile	; branch if 0
000177C6 6B00                       		bmi.s	@specialtile	; branch if >$7F
000177C8 5301                       		subq.b	#1,d1
000177CA 4881                       		ext.w	d1
000177CC EE59                       		ror.w	#7,d1
000177CE 3002                       		move.w	d2,d0
000177D0 D040                       		add.w	d0,d0
000177D2 0240 01E0                  		andi.w	#$1E0,d0
000177D6 D240                       		add.w	d0,d1
000177D8 3003                       		move.w	d3,d0
000177DA E648                       		lsr.w	#3,d0
000177DC 0240 001E                  		andi.w	#$1E,d0
000177E0 D240                       		add.w	d0,d1
000177E2                            
000177E2                            @blanktile:
000177E2 2241                       		movea.l	d1,a1
000177E4 4E75                       		rts	
000177E6                            ; ===========================================================================
000177E6                            
000177E6                            @specialtile:
000177E6 0241 007F                  		andi.w	#$7F,d1
000177EA 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
000177F0 6700                       		beq.s	@treatasnormal	; if not, branch
000177F2 5241                       		addq.w	#1,d1
000177F4 0C41 0029                  		cmpi.w	#$29,d1
000177F8 6600                       		bne.s	@treatasnormal
000177FA 323C 0051                  		move.w	#$51,d1
000177FE                            
000177FE                            	@treatasnormal:
000177FE 5301                       		subq.b	#1,d1
00017800 EE59                       		ror.w	#7,d1
00017802 3002                       		move.w	d2,d0
00017804 D040                       		add.w	d0,d0
00017806 0240 01E0                  		andi.w	#$1E0,d0
0001780A D240                       		add.w	d0,d1
0001780C 3003                       		move.w	d3,d0
0001780E E648                       		lsr.w	#3,d0
00017810 0240 001E                  		andi.w	#$1E,d0
00017814 D240                       		add.w	d0,d1
00017816 2241                       		movea.l	d1,a1
00017818 4E75                       		rts	
0001781A                            ; End of function FindNearestTile
0001781A                            ; End of function FindNearestTile
0001781A                            		include	"_incObj\sub FindFloor.asm"
0001781A                            ; ---------------------------------------------------------------------------
0001781A                            ; Subroutine to	find the floor
0001781A                            
0001781A                            ; input:
0001781A                            ;	d2 = y-position of object's bottom edge
0001781A                            ;	d3 = x-position of object
0001781A                            ;	d5 = bit to test for solidness
0001781A                            
0001781A                            ; output:
0001781A                            ;	d1 = distance to the floor
0001781A                            ;	a1 = address within 256x256 mappings where object is standing
0001781A                            ;	     (refers to a 16x16 tile number)
0001781A                            ;	(a4) = floor angle
0001781A                            ; ---------------------------------------------------------------------------
0001781A                            
0001781A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001781A                            
0001781A                            
0001781A                            FindFloor:
0001781A 618C                       		bsr.s	FindNearestTile
0001781C 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
0001781E 3800                       		move.w	d0,d4
00017820 0240 07FF                  		andi.w	#$7FF,d0
00017824 6700                       		beq.s	@isblank	; branch if tile is blank
00017826 0B04                       		btst	d5,d4		; is the tile solid?
00017828 6600                       		bne.s	@issolid	; if yes, branch
0001782A                            
0001782A                            @isblank:
0001782A D44B                       		add.w	a3,d2
0001782C 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017830 944B                       		sub.w	a3,d2
00017832 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017836 4E75                       		rts	
00017838                            ; ===========================================================================
00017838                            
00017838                            @issolid:
00017838 2478 F796                  		movea.l	(v_collindex).w,a2
0001783C 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017840 0240 00FF                  		andi.w	#$FF,d0
00017844 67E4                       		beq.s	@isblank	; branch if 0
00017846 45F9 0000 0000             		lea	(AngleMap).l,a2
0001784C 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017850 E948                       		lsl.w	#4,d0
00017852 3203                       		move.w	d3,d1		; get x-pos. of object
00017854 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017858 6700                       		beq.s	@noflip		; if not, branch
0001785A 4641                       		not.w	d1
0001785C 4414                       		neg.b	(a4)
0001785E                            
0001785E                            	@noflip:
0001785E 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017862 6700                       		beq.s	@noflip2	; if not, branch
00017864 0614 0040                  		addi.b	#$40,(a4)
00017868 4414                       		neg.b	(a4)
0001786A 0414 0040                  		subi.b	#$40,(a4)
0001786E                            
0001786E                            	@noflip2:
0001786E 0241 000F                  		andi.w	#$F,d1
00017872 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017874 45F9 0000 0000             		lea	(CollArray1).l,a2
0001787A 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
0001787E 4880                       		ext.w	d0
00017880 BD44                       		eor.w	d6,d4
00017882 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017886 6700                       		beq.s	@noflip3	; if not, branch
00017888 4440                       		neg.w	d0
0001788A                            
0001788A                            	@noflip3:
0001788A 4A40                       		tst.w	d0
0001788C 679C                       		beq.s	@isblank	; branch if height is 0
0001788E 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017890 0C00 0010                  		cmpi.b	#$10,d0
00017894 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017896 3202                       		move.w	d2,d1		; get y-pos. of object
00017898 0241 000F                  		andi.w	#$F,d1
0001789C D041                       		add.w	d1,d0
0001789E 323C 000F                  		move.w	#$F,d1
000178A2 9240                       		sub.w	d0,d1		; return distance to floor
000178A4 4E75                       		rts	
000178A6                            ; ===========================================================================
000178A6                            
000178A6                            @negfloor:
000178A6 3202                       		move.w	d2,d1
000178A8 0241 000F                  		andi.w	#$F,d1
000178AC D041                       		add.w	d1,d0
000178AE 6A00 FF7A                  		bpl.w	@isblank
000178B2                            
000178B2                            @maxfloor:
000178B2 944B                       		sub.w	a3,d2
000178B4 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000178B8 D44B                       		add.w	a3,d2
000178BA 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000178BE 4E75                       		rts	
000178C0                            ; End of function FindFloor
000178C0                            
000178C0                            
000178C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178C0                            
000178C0                            
000178C0                            FindFloor2:
000178C0 6100 FEE6                  		bsr.w	FindNearestTile
000178C4 3011                       		move.w	(a1),d0
000178C6 3800                       		move.w	d0,d4
000178C8 0240 07FF                  		andi.w	#$7FF,d0
000178CC 6700                       		beq.s	@isblank2
000178CE 0B04                       		btst	d5,d4
000178D0 6600                       		bne.s	@issolid
000178D2                            
000178D2                            @isblank2:
000178D2 323C 000F                  		move.w	#$F,d1
000178D6 3002                       		move.w	d2,d0
000178D8 0240 000F                  		andi.w	#$F,d0
000178DC 9240                       		sub.w	d0,d1
000178DE 4E75                       		rts	
000178E0                            ; ===========================================================================
000178E0                            
000178E0                            @issolid:
000178E0 2478 F796                  		movea.l	(v_collindex).w,a2
000178E4 1032 0000                  		move.b	(a2,d0.w),d0
000178E8 0240 00FF                  		andi.w	#$FF,d0
000178EC 67E4                       		beq.s	@isblank2
000178EE 45F9 0000 0000             		lea	(AngleMap).l,a2
000178F4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000178F8 E948                       		lsl.w	#4,d0
000178FA 3203                       		move.w	d3,d1
000178FC 0804 000B                  		btst	#$B,d4
00017900 6700                       		beq.s	@noflip
00017902 4641                       		not.w	d1
00017904 4414                       		neg.b	(a4)
00017906                            
00017906                            	@noflip:
00017906 0804 000C                  		btst	#$C,d4
0001790A 6700                       		beq.s	@noflip2
0001790C 0614 0040                  		addi.b	#$40,(a4)
00017910 4414                       		neg.b	(a4)
00017912 0414 0040                  		subi.b	#$40,(a4)
00017916                            
00017916                            	@noflip2:
00017916 0241 000F                  		andi.w	#$F,d1
0001791A D240                       		add.w	d0,d1
0001791C 45F9 0000 0000             		lea	(CollArray1).l,a2
00017922 1032 1000                  		move.b	(a2,d1.w),d0
00017926 4880                       		ext.w	d0
00017928 BD44                       		eor.w	d6,d4
0001792A 0804 000C                  		btst	#$C,d4
0001792E 6700                       		beq.s	@noflip3
00017930 4440                       		neg.w	d0
00017932                            
00017932                            	@noflip3:
00017932 4A40                       		tst.w	d0
00017934 679C                       		beq.s	@isblank2
00017936 6B00                       		bmi.s	@negfloor
00017938 3202                       		move.w	d2,d1
0001793A 0241 000F                  		andi.w	#$F,d1
0001793E D041                       		add.w	d1,d0
00017940 323C 000F                  		move.w	#$F,d1
00017944 9240                       		sub.w	d0,d1
00017946 4E75                       		rts	
00017948                            ; ===========================================================================
00017948                            
00017948                            @negfloor:
00017948 3202                       		move.w	d2,d1
0001794A 0241 000F                  		andi.w	#$F,d1
0001794E D041                       		add.w	d1,d0
00017950 6A00 FF80                  		bpl.w	@isblank2
00017954 4641                       		not.w	d1
00017956 4E75                       		rts	
00017958                            ; End of function FindFloor2
00017958                            ; End of function FindFloor2
00017958                            		include	"_incObj\sub FindWall.asm"
00017958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017958                            
00017958                            
00017958                            FindWall:
00017958 6100 FE4E                  		bsr.w	FindNearestTile
0001795C 3011                       		move.w	(a1),d0
0001795E 3800                       		move.w	d0,d4
00017960 0240 07FF                  		andi.w	#$7FF,d0
00017964 6700                       		beq.s	loc_14B1E
00017966 0B04                       		btst	d5,d4
00017968 6600                       		bne.s	loc_14B2C
0001796A                            
0001796A                            loc_14B1E:
0001796A D64B                       		add.w	a3,d3
0001796C 6100 0000                  		bsr.w	FindWall2
00017970 964B                       		sub.w	a3,d3
00017972 0641 0010                  		addi.w	#$10,d1
00017976 4E75                       		rts	
00017978                            ; ===========================================================================
00017978                            
00017978                            loc_14B2C:
00017978 2478 F796                  		movea.l	(v_collindex).w,a2
0001797C 1032 0000                  		move.b	(a2,d0.w),d0
00017980 0240 00FF                  		andi.w	#$FF,d0
00017984 67E4                       		beq.s	loc_14B1E
00017986 45F9 0000 0000             		lea	(AngleMap).l,a2
0001798C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017990 E948                       		lsl.w	#4,d0
00017992 3202                       		move.w	d2,d1
00017994 0804 000C                  		btst	#$C,d4
00017998 6700                       		beq.s	loc_14B5A
0001799A 4641                       		not.w	d1
0001799C 0614 0040                  		addi.b	#$40,(a4)
000179A0 4414                       		neg.b	(a4)
000179A2 0414 0040                  		subi.b	#$40,(a4)
000179A6                            
000179A6                            loc_14B5A:
000179A6 0804 000B                  		btst	#$B,d4
000179AA 6700                       		beq.s	loc_14B62
000179AC 4414                       		neg.b	(a4)
000179AE                            
000179AE                            loc_14B62:
000179AE 0241 000F                  		andi.w	#$F,d1
000179B2 D240                       		add.w	d0,d1
000179B4 45F9 0000 0000             		lea	(CollArray2).l,a2
000179BA 1032 1000                  		move.b	(a2,d1.w),d0
000179BE 4880                       		ext.w	d0
000179C0 BD44                       		eor.w	d6,d4
000179C2 0804 000B                  		btst	#$B,d4
000179C6 6700                       		beq.s	loc_14B7E
000179C8 4440                       		neg.w	d0
000179CA                            
000179CA                            loc_14B7E:
000179CA 4A40                       		tst.w	d0
000179CC 679C                       		beq.s	loc_14B1E
000179CE 6B00                       		bmi.s	loc_14B9A
000179D0 0C00 0010                  		cmpi.b	#$10,d0
000179D4 6700                       		beq.s	loc_14BA6
000179D6 3203                       		move.w	d3,d1
000179D8 0241 000F                  		andi.w	#$F,d1
000179DC D041                       		add.w	d1,d0
000179DE 323C 000F                  		move.w	#$F,d1
000179E2 9240                       		sub.w	d0,d1
000179E4 4E75                       		rts	
000179E6                            ; ===========================================================================
000179E6                            
000179E6                            loc_14B9A:
000179E6 3203                       		move.w	d3,d1
000179E8 0241 000F                  		andi.w	#$F,d1
000179EC D041                       		add.w	d1,d0
000179EE 6A00 FF7A                  		bpl.w	loc_14B1E
000179F2                            
000179F2                            loc_14BA6:
000179F2 964B                       		sub.w	a3,d3
000179F4 6100 0000                  		bsr.w	FindWall2
000179F8 D64B                       		add.w	a3,d3
000179FA 0441 0010                  		subi.w	#$10,d1
000179FE 4E75                       		rts	
00017A00                            ; End of function FindWall
00017A00                            
00017A00                            
00017A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A00                            
00017A00                            
00017A00                            FindWall2:
00017A00 6100 FDA6                  		bsr.w	FindNearestTile
00017A04 3011                       		move.w	(a1),d0
00017A06 3800                       		move.w	d0,d4
00017A08 0240 07FF                  		andi.w	#$7FF,d0
00017A0C 6700                       		beq.s	loc_14BC6
00017A0E 0B04                       		btst	d5,d4
00017A10 6600                       		bne.s	loc_14BD4
00017A12                            
00017A12                            loc_14BC6:
00017A12 323C 000F                  		move.w	#$F,d1
00017A16 3003                       		move.w	d3,d0
00017A18 0240 000F                  		andi.w	#$F,d0
00017A1C 9240                       		sub.w	d0,d1
00017A1E 4E75                       		rts	
00017A20                            ; ===========================================================================
00017A20                            
00017A20                            loc_14BD4:
00017A20 2478 F796                  		movea.l	(v_collindex).w,a2
00017A24 1032 0000                  		move.b	(a2,d0.w),d0
00017A28 0240 00FF                  		andi.w	#$FF,d0
00017A2C 67E4                       		beq.s	loc_14BC6
00017A2E 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A34 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017A38 E948                       		lsl.w	#4,d0
00017A3A 3202                       		move.w	d2,d1
00017A3C 0804 000C                  		btst	#$C,d4
00017A40 6700                       		beq.s	loc_14C02
00017A42 4641                       		not.w	d1
00017A44 0614 0040                  		addi.b	#$40,(a4)
00017A48 4414                       		neg.b	(a4)
00017A4A 0414 0040                  		subi.b	#$40,(a4)
00017A4E                            
00017A4E                            loc_14C02:
00017A4E 0804 000B                  		btst	#$B,d4
00017A52 6700                       		beq.s	loc_14C0A
00017A54 4414                       		neg.b	(a4)
00017A56                            
00017A56                            loc_14C0A:
00017A56 0241 000F                  		andi.w	#$F,d1
00017A5A D240                       		add.w	d0,d1
00017A5C 45F9 0000 0000             		lea	(CollArray2).l,a2
00017A62 1032 1000                  		move.b	(a2,d1.w),d0
00017A66 4880                       		ext.w	d0
00017A68 BD44                       		eor.w	d6,d4
00017A6A 0804 000B                  		btst	#$B,d4
00017A6E 6700                       		beq.s	loc_14C26
00017A70 4440                       		neg.w	d0
00017A72                            
00017A72                            loc_14C26:
00017A72 4A40                       		tst.w	d0
00017A74 679C                       		beq.s	loc_14BC6
00017A76 6B00                       		bmi.s	loc_14C3C
00017A78 3203                       		move.w	d3,d1
00017A7A 0241 000F                  		andi.w	#$F,d1
00017A7E D041                       		add.w	d1,d0
00017A80 323C 000F                  		move.w	#$F,d1
00017A84 9240                       		sub.w	d0,d1
00017A86 4E75                       		rts	
00017A88                            ; ===========================================================================
00017A88                            
00017A88                            loc_14C3C:
00017A88 3203                       		move.w	d3,d1
00017A8A 0241 000F                  		andi.w	#$F,d1
00017A8E D041                       		add.w	d1,d0
00017A90 6A00 FF80                  		bpl.w	loc_14BC6
00017A94 4641                       		not.w	d1
00017A96 4E75                       		rts	
00017A98                            ; End of function FindWall2
00017A98                            ; End of function FindWall2
00017A98                            
00017A98                            ; ---------------------------------------------------------------------------
00017A98                            ; Unused floor/wall subroutine - logs something	to do with collision
00017A98                            ; ---------------------------------------------------------------------------
00017A98                            
00017A98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A98                            
00017A98                            
00017A98                            FloorLog_Unk:
00017A98 4E75                       		rts	
00017A9A                            
00017A9A 43F9 0000 0000             		lea	(CollArray1).l,a1
00017AA0 45F9 0000 0000             		lea	(CollArray1).l,a2
00017AA6 363C 00FF                  		move.w	#$FF,d3
00017AAA                            
00017AAA                            loc_14C5E:
00017AAA 7A10                       		moveq	#$10,d5
00017AAC 343C 000F                  		move.w	#$F,d2
00017AB0                            
00017AB0                            loc_14C64:
00017AB0 7800                       		moveq	#0,d4
00017AB2 323C 000F                  		move.w	#$F,d1
00017AB6                            
00017AB6                            loc_14C6A:
00017AB6 3019                       		move.w	(a1)+,d0
00017AB8 EAA8                       		lsr.l	d5,d0
00017ABA D944                       		addx.w	d4,d4
00017ABC 51C9 FFF8                  		dbf	d1,loc_14C6A
00017AC0                            
00017AC0 34C4                       		move.w	d4,(a2)+
00017AC2 92FC 0020                  		suba.w	#$20,a1
00017AC6 5345                       		subq.w	#1,d5
00017AC8 51CA FFE6                  		dbf	d2,loc_14C64
00017ACC                            
00017ACC D2FC 0020                  		adda.w	#$20,a1
00017AD0 51CB FFD8                  		dbf	d3,loc_14C5E
00017AD4                            
00017AD4 43F9 0000 0000             		lea	(CollArray1).l,a1
00017ADA 45F9 0000 0000             		lea	(CollArray2).l,a2
00017AE0 6100                       		bsr.s	FloorLog_Unk2
00017AE2 43F9 0000 0000             		lea	(CollArray1).l,a1
00017AE8 45F9 0000 0000             		lea	(CollArray1).l,a2
00017AEE                            
00017AEE                            ; End of function FloorLog_Unk
00017AEE                            
00017AEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AEE                            
00017AEE                            
00017AEE                            FloorLog_Unk2:
00017AEE 363C 0FFF                  		move.w	#$FFF,d3
00017AF2                            
00017AF2                            loc_14CA6:
00017AF2 7400                       		moveq	#0,d2
00017AF4 323C 000F                  		move.w	#$F,d1
00017AF8 3019                       		move.w	(a1)+,d0
00017AFA 6700                       		beq.s	loc_14CD4
00017AFC 6B00                       		bmi.s	loc_14CBE
00017AFE                            
00017AFE                            loc_14CB2:
00017AFE E248                       		lsr.w	#1,d0
00017B00 6400                       		bhs.s	loc_14CB8
00017B02 5202                       		addq.b	#1,d2
00017B04                            
00017B04                            loc_14CB8:
00017B04 51C9 FFF8                  		dbf	d1,loc_14CB2
00017B08                            
00017B08 6000                       		bra.s	loc_14CD6
00017B0A                            ; ===========================================================================
00017B0A                            
00017B0A                            loc_14CBE:
00017B0A 0C40 FFFF                  		cmpi.w	#-1,d0
00017B0E 6700                       		beq.s	loc_14CD0
00017B10                            
00017B10                            loc_14CC4:
00017B10 E348                       		lsl.w	#1,d0
00017B12 6400                       		bhs.s	loc_14CCA
00017B14 5302                       		subq.b	#1,d2
00017B16                            
00017B16                            loc_14CCA:
00017B16 51C9 FFF8                  		dbf	d1,loc_14CC4
00017B1A                            
00017B1A 6000                       		bra.s	loc_14CD6
00017B1C                            ; ===========================================================================
00017B1C                            
00017B1C                            loc_14CD0:
00017B1C 303C 0010                  		move.w	#$10,d0
00017B20                            
00017B20                            loc_14CD4:
00017B20 3400                       		move.w	d0,d2
00017B22                            
00017B22                            loc_14CD6:
00017B22 14C2                       		move.b	d2,(a2)+
00017B24 51CB FFCC                  		dbf	d3,loc_14CA6
00017B28                            
00017B28 4E75                       		rts	
00017B2A                            
00017B2A                            ; End of function FloorLog_Unk2
00017B2A                            
00017B2A                            
00017B2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B2A                            
00017B2A                            
00017B2A                            Sonic_WalkSpeed:
00017B2A 2628 0008                  		move.l	obX(a0),d3
00017B2E 2428 000C                  		move.l	obY(a0),d2
00017B32 3228 0010                  		move.w	obVelX(a0),d1
00017B36 48C1                       		ext.l	d1
00017B38 E181                       		asl.l	#8,d1
00017B3A D681                       		add.l	d1,d3
00017B3C 3228 0012                  		move.w	obVelY(a0),d1
00017B40 48C1                       		ext.l	d1
00017B42 E181                       		asl.l	#8,d1
00017B44 D481                       		add.l	d1,d2
00017B46 4842                       		swap	d2
00017B48 4843                       		swap	d3
00017B4A 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017B4E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017B52 1200                       		move.b	d0,d1
00017B54 0600 0020                  		addi.b	#$20,d0
00017B58 6A00                       		bpl.s	loc_14D1A
00017B5A 1001                       		move.b	d1,d0
00017B5C 6A00                       		bpl.s	loc_14D14
00017B5E 5300                       		subq.b	#1,d0
00017B60                            
00017B60                            loc_14D14:
00017B60 0600 0020                  		addi.b	#$20,d0
00017B64 6000                       		bra.s	loc_14D24
00017B66                            ; ===========================================================================
00017B66                            
00017B66                            loc_14D1A:
00017B66 1001                       		move.b	d1,d0
00017B68 6A00                       		bpl.s	loc_14D20
00017B6A 5200                       		addq.b	#1,d0
00017B6C                            
00017B6C                            loc_14D20:
00017B6C 0600 001F                  		addi.b	#$1F,d0
00017B70                            
00017B70                            loc_14D24:
00017B70 0200 00C0                  		andi.b	#$C0,d0
00017B74 6700 0000                  		beq.w	loc_14DF0
00017B78 0C00 0080                  		cmpi.b	#$80,d0
00017B7C 6700 0000                  		beq.w	loc_14F7C
00017B80 0201 0038                  		andi.b	#$38,d1
00017B84 6600                       		bne.s	loc_14D3C
00017B86 5042                       		addq.w	#8,d2
00017B88                            
00017B88                            loc_14D3C:
00017B88 0C00 0040                  		cmpi.b	#$40,d0
00017B8C 6700 0000                  		beq.w	loc_1504A
00017B90 6000 0000                  		bra.w	loc_14EBC
00017B94                            
00017B94                            ; End of function Sonic_WalkSpeed
00017B94                            
00017B94                            
00017B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B94                            
00017B94                            
00017B94                            sub_14D48:
00017B94 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017B98 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017B9C 0600 0020                  		addi.b	#$20,d0
00017BA0 0200 00C0                  		andi.b	#$C0,d0
00017BA4 0C00 0040                  		cmpi.b	#$40,d0
00017BA8 6700 0000                  		beq.w	loc_14FD6
00017BAC 0C00 0080                  		cmpi.b	#$80,d0
00017BB0 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017BB4 0C00 00C0                  		cmpi.b	#$C0,d0
00017BB8 6700 0000                  		beq.w	sub_14E50
00017BBC                            
00017BBC                            ; End of function sub_14D48
00017BBC                            
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC                            ; Subroutine to	make Sonic land	on the floor after jumping
00017BBC                            ; ---------------------------------------------------------------------------
00017BBC                            
00017BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BBC                            
00017BBC                            
00017BBC                            Sonic_HitFloor:
00017BBC 3428 000C                  		move.w	obY(a0),d2
00017BC0 3628 0008                  		move.w	obX(a0),d3
00017BC4 7000                       		moveq	#0,d0
00017BC6 1028 0016                  		move.b	obHeight(a0),d0
00017BCA 4880                       		ext.w	d0
00017BCC D440                       		add.w	d0,d2
00017BCE 1028 0017                  		move.b	obWidth(a0),d0
00017BD2 4880                       		ext.w	d0
00017BD4 D640                       		add.w	d0,d3
00017BD6 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017BDA 367C 0010                  		movea.w	#$10,a3
00017BDE 3C3C 0000                  		move.w	#0,d6
00017BE2 7A0D                       		moveq	#$D,d5
00017BE4 6100 FC34                  		bsr.w	FindFloor
00017BE8 3F01                       		move.w	d1,-(sp)
00017BEA 3428 000C                  		move.w	obY(a0),d2
00017BEE 3628 0008                  		move.w	obX(a0),d3
00017BF2 7000                       		moveq	#0,d0
00017BF4 1028 0016                  		move.b	obHeight(a0),d0
00017BF8 4880                       		ext.w	d0
00017BFA D440                       		add.w	d0,d2
00017BFC 1028 0017                  		move.b	obWidth(a0),d0
00017C00 4880                       		ext.w	d0
00017C02 9640                       		sub.w	d0,d3
00017C04 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017C08 367C 0010                  		movea.w	#$10,a3
00017C0C 3C3C 0000                  		move.w	#0,d6
00017C10 7A0D                       		moveq	#$D,d5
00017C12 6100 FC06                  		bsr.w	FindFloor
00017C16 301F                       		move.w	(sp)+,d0
00017C18 143C 0000                  		move.b	#0,d2
00017C1C                            
00017C1C                            loc_14DD0:
00017C1C 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017C20 B240                       		cmp.w	d0,d1
00017C22 6F00                       		ble.s	loc_14DDE
00017C24 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C28 C141                       		exg	d0,d1
00017C2A                            
00017C2A                            loc_14DDE:
00017C2A 0803 0000                  		btst	#0,d3
00017C2E 6700                       		beq.s	locret_14DE6
00017C30 1602                       		move.b	d2,d3
00017C32                            
00017C32                            locret_14DE6:
00017C32 4E75                       		rts	
00017C34                            
00017C34                            ; End of function Sonic_HitFloor
00017C34                            
00017C34                            ; ===========================================================================
00017C34 3428 000C                  		move.w	obY(a0),d2
00017C38 3628 0008                  		move.w	obX(a0),d3
00017C3C                            
00017C3C                            loc_14DF0:
00017C3C 0642 000A                  		addi.w	#$A,d2
00017C40 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C44 367C 0010                  		movea.w	#$10,a3
00017C48 3C3C 0000                  		move.w	#0,d6
00017C4C 7A0E                       		moveq	#$E,d5
00017C4E 6100 FBCA                  		bsr.w	FindFloor
00017C52 143C 0000                  		move.b	#0,d2
00017C56                            
00017C56                            loc_14E0A:
00017C56 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C5A 0803 0000                  		btst	#0,d3
00017C5E 6700                       		beq.s	locret_14E16
00017C60 1602                       		move.b	d2,d3
00017C62                            
00017C62                            locret_14E16:
00017C62 4E75                       		rts	
00017C64                            
00017C64                            		include	"_incObj\sub ObjFloorDist.asm"
00017C64                            ; ---------------------------------------------------------------------------
00017C64                            ; Subroutine to find the distance of an object to the floor
00017C64                            
00017C64                            ; input:
00017C64                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017C64                            
00017C64                            ; output:
00017C64                            ;	d1 = distance to the floor
00017C64                            ;	d3 = floor angle
00017C64                            ;	a1 = address within 256x256 mappings where object is standing
00017C64                            ;	     (refers to a 16x16 tile number)
00017C64                            ;	(a4) = floor angle
00017C64                            ; ---------------------------------------------------------------------------
00017C64                            
00017C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C64                            
00017C64                            
00017C64                            ObjFloorDist:
00017C64 3628 0008                  		move.w	obX(a0),d3
00017C68                            
00017C68                            
00017C68                            ObjFloorDist2:
00017C68 3428 000C                  		move.w	obY(a0),d2
00017C6C 7000                       		moveq	#0,d0
00017C6E 1028 0016                  		move.b	obHeight(a0),d0
00017C72 4880                       		ext.w	d0
00017C74 D440                       		add.w	d0,d2
00017C76 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C7A 18BC 0000                  		move.b	#0,(a4)
00017C7E 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017C82 3C3C 0000                  		move.w	#0,d6
00017C86 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017C88 6100 FB90                  		bsr.w	FindFloor
00017C8C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017C90 0803 0000                  		btst	#0,d3
00017C94 6700                       		beq.s	locret_14E4E
00017C96 163C 0000                  		move.b	#0,d3
00017C9A                            
00017C9A                            	locret_14E4E:
00017C9A 4E75                       		rts	
00017C9C                            
00017C9C                            ; End of function ObjFloorDist2
00017C9C                            ; End of function ObjFloorDist2
00017C9C                            
00017C9C                            
00017C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C9C                            
00017C9C                            
00017C9C                            sub_14E50:
00017C9C 3428 000C                  		move.w	obY(a0),d2
00017CA0 3628 0008                  		move.w	obX(a0),d3
00017CA4 7000                       		moveq	#0,d0
00017CA6 1028 0017                  		move.b	obWidth(a0),d0
00017CAA 4880                       		ext.w	d0
00017CAC 9440                       		sub.w	d0,d2
00017CAE 1028 0016                  		move.b	obHeight(a0),d0
00017CB2 4880                       		ext.w	d0
00017CB4 D640                       		add.w	d0,d3
00017CB6 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017CBA 367C 0010                  		movea.w	#$10,a3
00017CBE 3C3C 0000                  		move.w	#0,d6
00017CC2 7A0E                       		moveq	#$E,d5
00017CC4 6100 FC92                  		bsr.w	FindWall
00017CC8 3F01                       		move.w	d1,-(sp)
00017CCA 3428 000C                  		move.w	obY(a0),d2
00017CCE 3628 0008                  		move.w	obX(a0),d3
00017CD2 7000                       		moveq	#0,d0
00017CD4 1028 0017                  		move.b	obWidth(a0),d0
00017CD8 4880                       		ext.w	d0
00017CDA D440                       		add.w	d0,d2
00017CDC 1028 0016                  		move.b	obHeight(a0),d0
00017CE0 4880                       		ext.w	d0
00017CE2 D640                       		add.w	d0,d3
00017CE4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017CE8 367C 0010                  		movea.w	#$10,a3
00017CEC 3C3C 0000                  		move.w	#0,d6
00017CF0 7A0E                       		moveq	#$E,d5
00017CF2 6100 FC64                  		bsr.w	FindWall
00017CF6 301F                       		move.w	(sp)+,d0
00017CF8 143C 00C0                  		move.b	#-$40,d2
00017CFC 6000 FF1E                  		bra.w	loc_14DD0
00017D00                            
00017D00                            ; End of function sub_14E50
00017D00                            
00017D00                            
00017D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D00                            
00017D00                            
00017D00                            sub_14EB4:
00017D00 3428 000C                  		move.w	obY(a0),d2
00017D04 3628 0008                  		move.w	obX(a0),d3
00017D08                            
00017D08                            loc_14EBC:
00017D08 0643 000A                  		addi.w	#$A,d3
00017D0C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D10 367C 0010                  		movea.w	#$10,a3
00017D14 3C3C 0000                  		move.w	#0,d6
00017D18 7A0E                       		moveq	#$E,d5
00017D1A 6100 FC3C                  		bsr.w	FindWall
00017D1E 143C 00C0                  		move.b	#-$40,d2
00017D22 6000 FF32                  		bra.w	loc_14E0A
00017D26                            
00017D26                            ; End of function sub_14EB4
00017D26                            
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            ; Subroutine to	detect when an object hits a wall to its right
00017D26                            ; ---------------------------------------------------------------------------
00017D26                            
00017D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D26                            
00017D26                            
00017D26                            ObjHitWallRight:
00017D26 D668 0008                  		add.w	obX(a0),d3
00017D2A 3428 000C                  		move.w	obY(a0),d2
00017D2E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D32 18BC 0000                  		move.b	#0,(a4)
00017D36 367C 0010                  		movea.w	#$10,a3
00017D3A 3C3C 0000                  		move.w	#0,d6
00017D3E 7A0E                       		moveq	#$E,d5
00017D40 6100 FC16                  		bsr.w	FindWall
00017D44 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D48 0803 0000                  		btst	#0,d3
00017D4C 6700                       		beq.s	locret_14F06
00017D4E 163C 00C0                  		move.b	#-$40,d3
00017D52                            
00017D52                            locret_14F06:
00017D52 4E75                       		rts	
00017D54                            
00017D54                            ; End of function ObjHitWallRight
00017D54                            
00017D54                            ; ---------------------------------------------------------------------------
00017D54                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017D54                            ; touches them
00017D54                            ; ---------------------------------------------------------------------------
00017D54                            
00017D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D54                            
00017D54                            
00017D54                            Sonic_DontRunOnWalls:
00017D54 3428 000C                  		move.w	obY(a0),d2
00017D58 3628 0008                  		move.w	obX(a0),d3
00017D5C 7000                       		moveq	#0,d0
00017D5E 1028 0016                  		move.b	obHeight(a0),d0
00017D62 4880                       		ext.w	d0
00017D64 9440                       		sub.w	d0,d2
00017D66 0A42 000F                  		eori.w	#$F,d2
00017D6A 1028 0017                  		move.b	obWidth(a0),d0
00017D6E 4880                       		ext.w	d0
00017D70 D640                       		add.w	d0,d3
00017D72 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D76 367C FFF0                  		movea.w	#-$10,a3
00017D7A 3C3C 1000                  		move.w	#$1000,d6
00017D7E 7A0E                       		moveq	#$E,d5
00017D80 6100 FA98                  		bsr.w	FindFloor
00017D84 3F01                       		move.w	d1,-(sp)
00017D86 3428 000C                  		move.w	obY(a0),d2
00017D8A 3628 0008                  		move.w	obX(a0),d3
00017D8E 7000                       		moveq	#0,d0
00017D90 1028 0016                  		move.b	obHeight(a0),d0
00017D94 4880                       		ext.w	d0
00017D96 9440                       		sub.w	d0,d2
00017D98 0A42 000F                  		eori.w	#$F,d2
00017D9C 1028 0017                  		move.b	obWidth(a0),d0
00017DA0 4880                       		ext.w	d0
00017DA2 9640                       		sub.w	d0,d3
00017DA4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017DA8 367C FFF0                  		movea.w	#-$10,a3
00017DAC 3C3C 1000                  		move.w	#$1000,d6
00017DB0 7A0E                       		moveq	#$E,d5
00017DB2 6100 FA66                  		bsr.w	FindFloor
00017DB6 301F                       		move.w	(sp)+,d0
00017DB8 143C 0080                  		move.b	#-$80,d2
00017DBC 6000 FE5E                  		bra.w	loc_14DD0
00017DC0                            ; End of function Sonic_DontRunOnWalls
00017DC0                            
00017DC0                            ; ===========================================================================
00017DC0 3428 000C                  		move.w	obY(a0),d2
00017DC4 3628 0008                  		move.w	obX(a0),d3
00017DC8                            
00017DC8                            loc_14F7C:
00017DC8 0442 000A                  		subi.w	#$A,d2
00017DCC 0A42 000F                  		eori.w	#$F,d2
00017DD0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DD4 367C FFF0                  		movea.w	#-$10,a3
00017DD8 3C3C 1000                  		move.w	#$1000,d6
00017DDC 7A0E                       		moveq	#$E,d5
00017DDE 6100 FA3A                  		bsr.w	FindFloor
00017DE2 143C 0080                  		move.b	#-$80,d2
00017DE6 6000 FE6E                  		bra.w	loc_14E0A
00017DEA                            
00017DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DEA                            
00017DEA                            
00017DEA                            ObjHitCeiling:
00017DEA 3428 000C                  		move.w	obY(a0),d2
00017DEE 3628 0008                  		move.w	obX(a0),d3
00017DF2 7000                       		moveq	#0,d0
00017DF4 1028 0016                  		move.b	obHeight(a0),d0
00017DF8 4880                       		ext.w	d0
00017DFA 9440                       		sub.w	d0,d2
00017DFC 0A42 000F                  		eori.w	#$F,d2
00017E00 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E04 367C FFF0                  		movea.w	#-$10,a3
00017E08 3C3C 1000                  		move.w	#$1000,d6
00017E0C 7A0E                       		moveq	#$E,d5
00017E0E 6100 FA0A                  		bsr.w	FindFloor
00017E12 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017E16 0803 0000                  		btst	#0,d3
00017E1A 6700                       		beq.s	locret_14FD4
00017E1C 163C 0080                  		move.b	#-$80,d3
00017E20                            
00017E20                            locret_14FD4:
00017E20 4E75                       		rts	
00017E22                            ; End of function ObjHitCeiling
00017E22                            
00017E22                            ; ===========================================================================
00017E22                            
00017E22                            loc_14FD6:
00017E22 3428 000C                  		move.w	obY(a0),d2
00017E26 3628 0008                  		move.w	obX(a0),d3
00017E2A 7000                       		moveq	#0,d0
00017E2C 1028 0017                  		move.b	obWidth(a0),d0
00017E30 4880                       		ext.w	d0
00017E32 9440                       		sub.w	d0,d2
00017E34 1028 0016                  		move.b	obHeight(a0),d0
00017E38 4880                       		ext.w	d0
00017E3A 9640                       		sub.w	d0,d3
00017E3C 0A43 000F                  		eori.w	#$F,d3
00017E40 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E44 367C FFF0                  		movea.w	#-$10,a3
00017E48 3C3C 0800                  		move.w	#$800,d6
00017E4C 7A0E                       		moveq	#$E,d5
00017E4E 6100 FB08                  		bsr.w	FindWall
00017E52 3F01                       		move.w	d1,-(sp)
00017E54 3428 000C                  		move.w	obY(a0),d2
00017E58 3628 0008                  		move.w	obX(a0),d3
00017E5C 7000                       		moveq	#0,d0
00017E5E 1028 0017                  		move.b	obWidth(a0),d0
00017E62 4880                       		ext.w	d0
00017E64 D440                       		add.w	d0,d2
00017E66 1028 0016                  		move.b	obHeight(a0),d0
00017E6A 4880                       		ext.w	d0
00017E6C 9640                       		sub.w	d0,d3
00017E6E 0A43 000F                  		eori.w	#$F,d3
00017E72 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E76 367C FFF0                  		movea.w	#-$10,a3
00017E7A 3C3C 0800                  		move.w	#$800,d6
00017E7E 7A0E                       		moveq	#$E,d5
00017E80 6100 FAD6                  		bsr.w	FindWall
00017E84 301F                       		move.w	(sp)+,d0
00017E86 143C 0040                  		move.b	#$40,d2
00017E8A 6000 FD90                  		bra.w	loc_14DD0
00017E8E                            
00017E8E                            ; ---------------------------------------------------------------------------
00017E8E                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017E8E                            ; ---------------------------------------------------------------------------
00017E8E                            
00017E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E8E                            
00017E8E                            
00017E8E                            Sonic_HitWall:
00017E8E 3428 000C                  		move.w	obY(a0),d2
00017E92 3628 0008                  		move.w	obX(a0),d3
00017E96                            
00017E96                            loc_1504A:
00017E96 0443 000A                  		subi.w	#$A,d3
00017E9A 0A43 000F                  		eori.w	#$F,d3
00017E9E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EA2 367C FFF0                  		movea.w	#-$10,a3
00017EA6 3C3C 0800                  		move.w	#$800,d6
00017EAA 7A0E                       		moveq	#$E,d5
00017EAC 6100 FAAA                  		bsr.w	FindWall
00017EB0 143C 0040                  		move.b	#$40,d2
00017EB4 6000 FDA0                  		bra.w	loc_14E0A
00017EB8                            ; End of function Sonic_HitWall
00017EB8                            
00017EB8                            ; ---------------------------------------------------------------------------
00017EB8                            ; Subroutine to	detect when an object hits a wall to its left
00017EB8                            ; ---------------------------------------------------------------------------
00017EB8                            
00017EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EB8                            
00017EB8                            
00017EB8                            ObjHitWallLeft:
00017EB8 D668 0008                  		add.w	obX(a0),d3
00017EBC 3428 000C                  		move.w	obY(a0),d2
00017EC0                            		; Engine bug: colliding with left walls is erratic with this function.
00017EC0                            		; The cause is this: a missing instruction to flip collision on the found
00017EC0                            		; 16x16 block; this one:
00017EC0                            		;eori.w	#$F,d3
00017EC0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EC4 18BC 0000                  		move.b	#0,(a4)
00017EC8 367C FFF0                  		movea.w	#-$10,a3
00017ECC 3C3C 0800                  		move.w	#$800,d6
00017ED0 7A0E                       		moveq	#$E,d5
00017ED2 6100 FA84                  		bsr.w	FindWall
00017ED6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EDA 0803 0000                  		btst	#0,d3
00017EDE 6700                       		beq.s	locret_15098
00017EE0 163C 0040                  		move.b	#$40,d3
00017EE4                            
00017EE4                            locret_15098:
00017EE4 4E75                       		rts	
00017EE6                            ; End of function ObjHitWallLeft
00017EE6                            
00017EE6                            ; ===========================================================================
00017EE6                            
00017EE6                            		include	"_incObj\66 Rotating Junction.asm"
00017EE6                            ; ---------------------------------------------------------------------------
00017EE6                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00017EE6                            ; ---------------------------------------------------------------------------
00017EE6                            
00017EE6                            Junction:
00017EE6 7000                       		moveq	#0,d0
00017EE8 1028 0024                  		move.b	obRoutine(a0),d0
00017EEC 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00017EF0 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00017EF4                            ; ===========================================================================
00017EF4 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00017EF6 0000                       		dc.w Jun_Action-Jun_Index
00017EF8 0000                       		dc.w Jun_Display-Jun_Index
00017EFA 0000                       		dc.w Jun_Release-Jun_Index
00017EFC                            
00017EFC =00000034                  jun_frame:	equ $34		; current frame
00017EFC =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00017EFC =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00017EFC                            ; ===========================================================================
00017EFC                            
00017EFC                            Jun_Main:	; Routine 0
00017EFC 5428 0024                  		addq.b	#2,obRoutine(a0)
00017F00 323C 0001                  		move.w	#1,d1
00017F04 2248                       		movea.l	a0,a1
00017F06 6000                       		bra.s	@makeitem
00017F08                            ; ===========================================================================
00017F08                            
00017F08                            	@repeat:
00017F08 4EB9 0000 FB86             		jsr	FindFreeObj
00017F0E 6600                       		bne.s	@fail
00017F10 12BC 0066                  		move.b	#id_Junction,0(a1)
00017F14 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00017F18 3368 0008 0008             		move.w	obX(a0),obX(a1)
00017F1E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00017F24 337C 0180 0018             		move.w	#$180,obPriority(a1)
00017F2A 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00017F30                            
00017F30                            @makeitem:
00017F30 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00017F38 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00017F3E 0029 0004 0001             		ori.b	#4,obRender(a1)
00017F44 137C 0038 0014             		move.b	#$38,obActWid(a1)
00017F4A                            
00017F4A                            	@fail:
00017F4A 51C9 FFBC                  		dbf	d1,@repeat
00017F4E                            
00017F4E 117C 0030 0014             		move.b	#$30,obActWid(a0)
00017F54 317C 0200 0018             		move.w	#$200,obPriority(a0)
00017F5A 317C 003C 0030             		move.w	#$3C,$30(a0)
00017F60 117C 0001 0034             		move.b	#1,jun_frame(a0)
00017F66 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00017F6C                            
00017F6C                            Jun_Action:	; Routine 2
00017F6C 6100 0000                  		bsr.w	Jun_ChkSwitch
00017F70 4A28 0001                  		tst.b	obRender(a0)
00017F74 6A00 0000                  		bpl.w	Jun_Display
00017F78 323C 0030                  		move.w	#$30,d1
00017F7C 3401                       		move.w	d1,d2
00017F7E 3602                       		move.w	d2,d3
00017F80 5243                       		addq.w	#1,d3
00017F82 3828 0008                  		move.w	obX(a0),d4
00017F86 6100 9B80                  		bsr.w	SolidObject
00017F8A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00017F90 6700 0000                  		beq.w	Jun_Display	; if not, branch
00017F94                            
00017F94 43F8 D000                  		lea	(v_player).w,a1
00017F98 720E                       		moveq	#$E,d1
00017F9A 3029 0008                  		move.w	obX(a1),d0
00017F9E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00017FA2 6500                       		bcs.s	@isleft		; if yes, branch
00017FA4 7207                       		moveq	#7,d1		
00017FA6                            
00017FA6                            	@isleft:
00017FA6 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00017FAA 6600                       		bne.s	Jun_Display	; if not, branch
00017FAC                            
00017FAC 1141 0032                  		move.b	d1,$32(a0)
00017FB0 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00017FB4 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00017FBA 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00017FC0 337C 0800 0020             		move.w	#$800,obInertia(a1)
00017FC6 337C 0000 0010             		move.w	#0,obVelX(a1)
00017FCC 337C 0000 0012             		move.w	#0,obVelY(a1)
00017FD2 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017FD8 08A9 0005 0022             		bclr	#5,obStatus(a1)
00017FDE 08E9 0001 0022             		bset	#1,obStatus(a1)
00017FE4 3429 0008                  		move.w	obX(a1),d2
00017FE8 3629 000C                  		move.w	obY(a1),d3
00017FEC 6100 0000                  		bsr.w	Jun_ChgPos
00017FF0 D569 0008                  		add.w	d2,obX(a1)
00017FF4 D769 000C                  		add.w	d3,obY(a1)
00017FF8 E0E9 0008                  		asr	obX(a1)
00017FFC E0E9 000C                  		asr	obY(a1)
00018000                            
00018000                            Jun_Display:	; Routine 4
00018000 6000 966E                  		bra.w	RememberState
00018004                            ; ===========================================================================
00018004                            
00018004                            Jun_Release:	; Routine 6
00018004 1028 001A                  		move.b	obFrame(a0),d0
00018008 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
0001800C 6700                       		beq.s	@release	; if yes, branch
0001800E 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
00018012 6600                       		bne.s	@dontrelease	; if not, branch
00018014                            
00018014                            	@release:
00018014 B028 0032                  		cmp.b	$32(a0),d0
00018018 6700                       		beq.s	@dontrelease
0001801A 43F8 D000                  		lea	(v_player).w,a1
0001801E 337C 0000 0010             		move.w	#0,obVelX(a1)
00018024 337C 0800 0012             		move.w	#$800,obVelY(a1)
0001802A 0C00 0004                  		cmpi.b	#4,d0
0001802E 6700                       		beq.s	@isdown
00018030 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018036 337C 0800 0012             		move.w	#$800,obVelY(a1)
0001803C                            
0001803C                            	@isdown:
0001803C 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018040 5928 0024                  		subq.b	#4,obRoutine(a0)
00018044                            
00018044                            	@dontrelease:
00018044 6100                       		bsr.s	Jun_ChkSwitch
00018046 6100                       		bsr.s	Jun_ChgPos
00018048 6000 9626                  		bra.w	RememberState
0001804C                            
0001804C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001804C                            
0001804C                            
0001804C                            Jun_ChkSwitch:
0001804C 45F8 F7E0                  		lea	(f_switch).w,a2
00018050 7000                       		moveq	#0,d0
00018052 1028 0038                  		move.b	jun_switch(a0),d0
00018056 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001805C 6700                       		beq.s	@unpressed	; if not, branch
0001805E                            
0001805E 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018062 6600                       		bne.s	@animate	; if yes, branch
00018064 4428 0034                  		neg.b	jun_frame(a0)
00018068 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
0001806E 6000                       		bra.s	@animate
00018070                            ; ===========================================================================
00018070                            
00018070                            @unpressed:
00018070 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018074                            
00018074                            @animate:
00018074 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018078 6A00                       		bpl.s	@nochange	; if time remains, branch
0001807A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018080 1228 0034                  		move.b	jun_frame(a0),d1
00018084 1028 001A                  		move.b	obFrame(a0),d0
00018088 D001                       		add.b	d1,d0
0001808A 0200 000F                  		andi.b	#$F,d0
0001808E 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018092                            
00018092                            	@nochange:
00018092 4E75                       		rts	
00018094                            ; End of function Jun_ChkSwitch
00018094                            
00018094                            
00018094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018094                            
00018094                            
00018094                            Jun_ChgPos:
00018094 43F8 D000                  		lea	(v_player).w,a1
00018098 7000                       		moveq	#0,d0
0001809A 1028 001A                  		move.b	obFrame(a0),d0
0001809E D040                       		add.w	d0,d0
000180A0 45FB 0000                  		lea	@data(pc,d0.w),a2
000180A4 101A                       		move.b	(a2)+,d0
000180A6 4880                       		ext.w	d0
000180A8 D068 0008                  		add.w	obX(a0),d0
000180AC 3340 0008                  		move.w	d0,obX(a1)
000180B0 101A                       		move.b	(a2)+,d0
000180B2 4880                       		ext.w	d0
000180B4 D068 000C                  		add.w	obY(a0),d0
000180B8 3340 000C                  		move.w	d0,obY(a1)
000180BC 4E75                       		rts	
000180BE                            
000180BE                            
000180BE E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
000180C2 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
000180C6 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
000180CA 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
000180CE 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
000180D2 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
000180D6 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
000180DA E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
000180DA E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
000180DE                            Map_Jun:	include	"_maps\Rotating Junction.asm"
000180DE                            ; ---------------------------------------------------------------------------
000180DE                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000180DE                            ; ---------------------------------------------------------------------------
000180DE                            Map_Jun_internal:
000180DE 0000                       		dc.w @gap0-Map_Jun_internal
000180E0 0000                       		dc.w @gap1-Map_Jun_internal
000180E2 0000                       		dc.w @gap2-Map_Jun_internal
000180E4 0000                       		dc.w @gap3-Map_Jun_internal
000180E6 0000                       		dc.w @gap4-Map_Jun_internal
000180E8 0000                       		dc.w @gap5-Map_Jun_internal
000180EA 0000                       		dc.w @gap6-Map_Jun_internal
000180EC 0000                       		dc.w @gap7-Map_Jun_internal
000180EE 0000                       		dc.w @gap8-Map_Jun_internal
000180F0 0000                       		dc.w @gap9-Map_Jun_internal
000180F2 0000                       		dc.w @gapA-Map_Jun_internal
000180F4 0000                       		dc.w @gapB-Map_Jun_internal
000180F6 0000                       		dc.w @gapC-Map_Jun_internal
000180F8 0000                       		dc.w @gapD-Map_Jun_internal
000180FA 0000                       		dc.w @gapE-Map_Jun_internal
000180FC 0000                       		dc.w @gapF-Map_Jun_internal
000180FE 0000                       		dc.w @circle-Map_Jun_internal
00018100 06                         @gap0:		dc.b 6
00018101 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018106 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001810B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00018110 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018115 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001811A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001811F 06                         @gap1:		dc.b 6
00018120 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018125 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001812A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001812F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018134 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018139 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001813E 06                         @gap2:		dc.b 6
0001813F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018144 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018149 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001814E 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018153 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018158 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001815D 06                         @gap3:		dc.b 6
0001815E 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018163 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018168 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001816D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018172 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018177 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001817C 06                         @gap4:		dc.b 6
0001817D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018182 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018187 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001818C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018191 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018196 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001819B 06                         @gap5:		dc.b 6
0001819C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000181A1 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000181A6 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000181AB 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000181B0 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000181B5 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000181BA 06                         @gap6:		dc.b 6
000181BB 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000181C0 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000181C5 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000181CA 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000181CF 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000181D4 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000181D9 06                         @gap7:		dc.b 6
000181DA 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000181DF F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000181E4 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000181E9 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000181EE 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000181F3 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000181F8 06                         @gap8:		dc.b 6
000181F9 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000181FE 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018203 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018208 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001820D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00018212 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018217 06                         @gap9:		dc.b 6
00018218 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001821D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00018222 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018227 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001822C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00018231 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018236 06                         @gapA:		dc.b 6
00018237 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001823C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018241 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018246 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001824B E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018250 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018255 06                         @gapB:		dc.b 6
00018256 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001825B D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018260 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018265 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001826A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001826F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018274 06                         @gapC:		dc.b 6
00018275 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001827A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001827F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018284 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018289 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001828E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018293 06                         @gapD:		dc.b 6
00018294 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018299 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001829E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000182A3 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000182A8 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000182AD E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000182B2 06                         @gapE:		dc.b 6
000182B3 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000182B8 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000182BD D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000182C2 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000182C7 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000182CC E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000182D1 06                         @gapF:		dc.b 6
000182D2 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000182D7 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000182DC DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000182E1 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000182E6 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000182EB F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000182F0 0C                         @circle:	dc.b $C
000182F1 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000182F6 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000182FB E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018300 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018305 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001830A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001830F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00018314 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00018319 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001831E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00018323 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00018328 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001832E 00                         		even
0001832E 00                         		even
0001832E                            		include	"_incObj\67 Running Disc.asm"
0001832E                            ; ---------------------------------------------------------------------------
0001832E                            ; Object 67 - disc that	you run	around (SBZ)
0001832E                            ; ---------------------------------------------------------------------------
0001832E                            
0001832E                            RunningDisc:
0001832E 7000                       		moveq	#0,d0
00018330 1028 0024                  		move.b	obRoutine(a0),d0
00018334 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
00018338 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
0001833C                            ; ===========================================================================
0001833C 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
0001833E 0000                       		dc.w Disc_Action-Disc_Index
00018340                            
00018340 =00000032                  disc_origX:	equ $32		; original x-axis position
00018340 =00000030                  disc_origY:	equ $30		; original y-axis position
00018340                            ; ===========================================================================
00018340                            
00018340                            Disc_Main:	; Routine 0
00018340 5428 0024                  		addq.b	#2,obRoutine(a0)
00018344 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
0001834C 317C C344 0002             		move.w	#$C344,obGfx(a0)
00018352 117C 0004 0001             		move.b	#4,obRender(a0)
00018358 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001835E 117C 0008 0014             		move.b	#8,obActWid(a0)
00018364 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001836A 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018370 117C 0018 0034             		move.b	#$18,$34(a0)
00018376 117C 0048 0038             		move.b	#$48,$38(a0)
0001837C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018380 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018384 6700                       		beq.s	@typeis0	; branch if 0
00018386 117C 0010 0034             		move.b	#$10,$34(a0)
0001838C 117C 0038 0038             		move.b	#$38,$38(a0)
00018392                            
00018392                            	@typeis0:
00018392 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018396 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001839A 4881                       		ext.w	d1
0001839C E741                       		asl.w	#3,d1
0001839E 3141 0036                  		move.w	d1,$36(a0)
000183A2 1028 0022                  		move.b	obStatus(a0),d0
000183A6 E418                       		ror.b	#2,d0
000183A8 0200 00C0                  		andi.b	#$C0,d0
000183AC 1140 0026                  		move.b	d0,obAngle(a0)
000183B0                            
000183B0                            Disc_Action:	; Routine 2
000183B0 6100 0000                  		bsr.w	Disc_MoveSonic
000183B4 6100 0000                  		bsr.w	Disc_MoveSpot
000183B8 6000 0000                  		bra.w	Disc_ChkDel
000183BC                            ; ===========================================================================
000183BC                            
000183BC                            Disc_MoveSonic:
000183BC 7400                       		moveq	#0,d2
000183BE 1428 0038                  		move.b	$38(a0),d2
000183C2 3602                       		move.w	d2,d3
000183C4 D643                       		add.w	d3,d3
000183C6 43F8 D000                  		lea	(v_player).w,a1
000183CA 3029 0008                  		move.w	obX(a1),d0
000183CE 9068 0032                  		sub.w	disc_origX(a0),d0
000183D2 D042                       		add.w	d2,d0
000183D4 B043                       		cmp.w	d3,d0
000183D6 6400                       		bcc.s	loc_155A8
000183D8 3229 000C                  		move.w	obY(a1),d1
000183DC 9268 0030                  		sub.w	disc_origY(a0),d1
000183E0 D242                       		add.w	d2,d1
000183E2 B243                       		cmp.w	d3,d1
000183E4 6400                       		bcc.s	loc_155A8
000183E6 0829 0001 0022             		btst	#1,obStatus(a1)
000183EC 6700                       		beq.s	loc_155B8
000183EE 4228 003A                  		clr.b	$3A(a0)
000183F2 4E75                       		rts	
000183F4                            ; ===========================================================================
000183F4                            
000183F4                            loc_155A8:
000183F4 4A28 003A                  		tst.b	$3A(a0)
000183F8 6700                       		beq.s	locret_155B6
000183FA 4229 0038                  		clr.b	$38(a1)
000183FE 4228 003A                  		clr.b	$3A(a0)
00018402                            
00018402                            locret_155B6:
00018402 4E75                       		rts	
00018404                            ; ===========================================================================
00018404                            
00018404                            loc_155B8:
00018404 4A28 003A                  		tst.b	$3A(a0)
00018408 6600                       		bne.s	loc_155E2
0001840A 117C 0001 003A             		move.b	#1,$3A(a0)
00018410 0829 0002 0022             		btst	#2,obStatus(a1)
00018416 6600                       		bne.s	loc_155D0
00018418 4229 001C                  		clr.b	obAnim(a1)
0001841C                            
0001841C                            loc_155D0:
0001841C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018422 137C 0001 001D             		move.b	#1,obNextAni(a1)
00018428 137C 0001 0038             		move.b	#1,$38(a1)
0001842E                            
0001842E                            loc_155E2:
0001842E 3029 0020                  		move.w	obInertia(a1),d0
00018432 4A68 0036                  		tst.w	$36(a0)
00018436 6A00                       		bpl.s	loc_15608
00018438 0C40 FC00                  		cmpi.w	#-$400,d0
0001843C 6F00                       		ble.s	loc_155FA
0001843E 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00018444 4E75                       		rts	
00018446                            ; ===========================================================================
00018446                            
00018446                            loc_155FA:
00018446 0C40 F100                  		cmpi.w	#-$F00,d0
0001844A 6C00                       		bge.s	locret_15606
0001844C 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00018452                            
00018452                            locret_15606:
00018452 4E75                       		rts	
00018454                            ; ===========================================================================
00018454                            
00018454                            loc_15608:
00018454 0C40 0400                  		cmpi.w	#$400,d0
00018458 6C00                       		bge.s	loc_15616
0001845A 337C 0400 0020             		move.w	#$400,obInertia(a1)
00018460 4E75                       		rts	
00018462                            ; ===========================================================================
00018462                            
00018462                            loc_15616:
00018462 0C40 0F00                  		cmpi.w	#$F00,d0
00018466 6F00                       		ble.s	locret_15622
00018468 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
0001846E                            
0001846E                            locret_15622:
0001846E 4E75                       		rts	
00018470                            ; ===========================================================================
00018470                            
00018470                            Disc_MoveSpot:
00018470 3028 0036                  		move.w	$36(a0),d0
00018474 D168 0026                  		add.w	d0,obAngle(a0)
00018478 1028 0026                  		move.b	obAngle(a0),d0
0001847C 4EB9 0000 37AE             		jsr	(CalcSine).l
00018482 3428 0030                  		move.w	disc_origY(a0),d2
00018486 3628 0032                  		move.w	disc_origX(a0),d3
0001848A 7800                       		moveq	#0,d4
0001848C 1828 0034                  		move.b	$34(a0),d4
00018490 E14C                       		lsl.w	#8,d4
00018492 2A04                       		move.l	d4,d5
00018494 C9C0                       		muls.w	d0,d4
00018496 4844                       		swap	d4
00018498 CBC1                       		muls.w	d1,d5
0001849A 4845                       		swap	d5
0001849C D842                       		add.w	d2,d4
0001849E DA43                       		add.w	d3,d5
000184A0 3144 000C                  		move.w	d4,obY(a0)
000184A4 3145 0008                  		move.w	d5,obX(a0)
000184A8 4E75                       		rts	
000184AA                            ; ===========================================================================
000184AA                            
000184AA                            Disc_ChkDel:
000184C6 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
000184CC                            
000184CC                            	@delete:
000184CC 4EF9 0000 F73A             		jmp	(DeleteObject).l
000184CC 4EF9 0000 F73A             		jmp	(DeleteObject).l
000184D2                            Map_Disc:	include	"_maps\Running Disc.asm"
000184D2                            ; ---------------------------------------------------------------------------
000184D2                            ; Sprite mappings - disc that you run around (SBZ)
000184D2                            ; (It's just a small blob that moves around in a circle. The disc itself is
000184D2                            ; part of the level tiles.)
000184D2                            ; ---------------------------------------------------------------------------
000184D2                            Map_Disc_internal:
000184D2 0000                       		dc.w @spot-Map_Disc_internal
000184D4 01                         @spot:		dc.b 1
000184D5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000184DA                            		even
000184DA                            		even
000184DA                            		include	"_incObj\68 Conveyor Belt.asm"
000184DA                            ; ---------------------------------------------------------------------------
000184DA                            ; Object 68 - conveyor belts (SBZ)
000184DA                            ; ---------------------------------------------------------------------------
000184DA                            
000184DA                            Conveyor:
000184DA 7000                       		moveq	#0,d0
000184DC 1028 0024                  		move.b	obRoutine(a0),d0
000184E0 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
000184E4 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
000184E8                            ; ===========================================================================
000184E8 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
000184EA 0000                       		dc.w Conv_Action-Conv_Index
000184EC                            
000184EC =00000036                  conv_speed:	equ $36
000184EC =00000038                  conv_width:	equ $38
000184EC                            ; ===========================================================================
000184EC                            
000184EC                            Conv_Main:	; Routine 0
000184EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000184F0 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
000184F6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000184FA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000184FE 6700                       		beq.s	@typeis0	; if zero, branch
00018500 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018506                            
00018506                            	@typeis0:
00018506 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001850A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001850E 4881                       		ext.w	d1
00018510 E841                       		asr.w	#4,d1
00018512 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00018516                            
00018516                            Conv_Action:	; Routine 2
00018516 6100                       		bsr.s	@movesonic
00018534 4E75                       		rts	
00018536                            
00018536                            	@delete:
00018536 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001853C                            ; ===========================================================================
0001853C                            
0001853C                            @movesonic:
0001853C 7400                       		moveq	#0,d2
0001853E 1428 0038                  		move.b	conv_width(a0),d2
00018542 3602                       		move.w	d2,d3
00018544 D643                       		add.w	d3,d3
00018546 43F8 D000                  		lea	(v_player).w,a1
0001854A 3029 0008                  		move.w	obX(a1),d0
0001854E 9068 0008                  		sub.w	obX(a0),d0
00018552 D042                       		add.w	d2,d0
00018554 B043                       		cmp.w	d3,d0
00018556 6400                       		bcc.s	@notonconveyor
00018558 3229 000C                  		move.w	obY(a1),d1
0001855C 9268 000C                  		sub.w	obY(a0),d1
00018560 0641 0030                  		addi.w	#$30,d1
00018564 0C41 0030                  		cmpi.w	#$30,d1
00018568 6400                       		bcc.s	@notonconveyor
0001856A 0829 0001 0022             		btst	#1,obStatus(a1)
00018570 6600                       		bne.s	@notonconveyor
00018572 3028 0036                  		move.w	conv_speed(a0),d0
00018576 D169 0008                  		add.w	d0,obX(a1)
0001857A                            
0001857A                            	@notonconveyor:
0001857A 4E75                       		rts	
0001857A 4E75                       		rts	
0001857C                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001857C                            ; ---------------------------------------------------------------------------
0001857C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001857C                            ; ---------------------------------------------------------------------------
0001857C                            
0001857C                            SpinPlatform:
0001857C 7000                       		moveq	#0,d0
0001857E 1028 0024                  		move.b	obRoutine(a0),d0
00018582 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018586 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001858A                            ; ===========================================================================
0001858A 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001858C 0000                       		dc.w Spin_Trapdoor-Spin_Index
0001858E 0000                       		dc.w Spin_Spinner-Spin_Index
00018590                            
00018590 =00000030                  spin_timer:	equ $30		; time counter until change
00018590 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018590                            ; ===========================================================================
00018590                            
00018590                            Spin_Main:	; Routine 0
00018590 5428 0024                  		addq.b	#2,obRoutine(a0)
00018594 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
0001859C 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000185A2 0028 0004 0001             		ori.b	#4,obRender(a0)
000185A8 117C 0080 0014             		move.b	#$80,obActWid(a0)
000185AE 7000                       		moveq	#0,d0
000185B0 1028 0028                  		move.b	obSubtype(a0),d0
000185B4 0240 000F                  		andi.w	#$F,d0
000185B8 C0FC 003C                  		mulu.w	#$3C,d0
000185BC 3140 0032                  		move.w	d0,spin_timelen(a0)
000185C0 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
000185C4 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
000185C6                            
000185C6 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
000185CA 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
000185D2 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000185D8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000185DE 117C 0002 001C             		move.b	#2,obAnim(a0)
000185E4 7000                       		moveq	#0,d0
000185E6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000185EA 3200                       		move.w	d0,d1
000185EC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000185F0 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000185F4 3140 0030                  		move.w	d0,spin_timer(a0)
000185F8 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
000185FC 0241 0070                  		andi.w	#$70,d1
00018600 0641 0010                  		addi.w	#$10,d1
00018604 E549                       		lsl.w	#2,d1
00018606 5341                       		subq.w	#1,d1
00018608 3141 0036                  		move.w	d1,$36(a0)
0001860C 6000                       		bra.s	Spin_Spinner
0001860E                            ; ===========================================================================
0001860E                            
0001860E                            Spin_Trapdoor:	; Routine 2
0001860E 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
00018612 6A00                       		bpl.s	@animate	; if time remains, branch
00018614                            
00018614 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001861A 0868 0000 001C             		bchg	#0,obAnim(a0)
00018620 4A28 0001                  		tst.b	obRender(a0)
00018624 6A00                       		bpl.s	@animate
00018630                            
00018630                            	@animate:
00018630 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018636 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001863C 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00018640 6600                       		bne.s	@notsolid	; if not, branch
00018642 323C 004B                  		move.w	#$4B,d1
00018646 343C 000C                  		move.w	#$C,d2
0001864A 3602                       		move.w	d2,d3
0001864C 5243                       		addq.w	#1,d3
0001864E 3828 0008                  		move.w	obX(a0),d4
00018652 6100 94B4                  		bsr.w	SolidObject
00018656 6000 9018                  		bra.w	RememberState
0001865A                            ; ===========================================================================
0001865A                            
0001865A                            @notsolid:
0001865A 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00018660 6700                       		beq.s	@display	; if not, branch
00018662 43F8 D000                  		lea	(v_player).w,a1
00018666 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001866C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018672 4228 0025                  		clr.b	obSolid(a0)
00018676                            
00018676                            	@display:
00018676 6000 8FF8                  		bra.w	RememberState
0001867A                            ; ===========================================================================
0001867A                            
0001867A                            Spin_Spinner:	; Routine 4
0001867A 3038 FE04                  		move.w	(v_framecount).w,d0
0001867E C068 0036                  		and.w	$36(a0),d0
00018682 6600                       		bne.s	@delay
00018684 117C 0001 0034             		move.b	#1,$34(a0)
0001868A                            
0001868A                            	@delay:
0001868A 4A28 0034                  		tst.b	$34(a0)
0001868E 6700                       		beq.s	@animate
00018690 5368 0030                  		subq.w	#1,spin_timer(a0)
00018694 6A00                       		bpl.s	@animate
00018696 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001869C 4228 0034                  		clr.b	$34(a0)
000186A0 0868 0000 001C             		bchg	#0,obAnim(a0)
000186A6                            
000186A6                            	@animate:
000186A6 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000186AC 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
000186B2 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
000186B6 6600                       		bne.s	@notsolid2	; if not, branch
000186B8 323C 001B                  		move.w	#$1B,d1
000186BC 343C 0007                  		move.w	#7,d2
000186C0 3602                       		move.w	d2,d3
000186C2 5243                       		addq.w	#1,d3
000186C4 3828 0008                  		move.w	obX(a0),d4
000186C8 6100 943E                  		bsr.w	SolidObject
000186CC 6000 8FA2                  		bra.w	RememberState
000186D0                            ; ===========================================================================
000186D0                            
000186D0                            @notsolid2:
000186D0 0828 0003 0022             		btst	#3,obStatus(a0)
000186D6 6700                       		beq.s	@display
000186D8 43F8 D000                  		lea	(v_player).w,a1
000186DC 08A9 0003 0022             		bclr	#3,obStatus(a1)
000186E2 08A8 0003 0022             		bclr	#3,obStatus(a0)
000186E8 4228 0025                  		clr.b	obSolid(a0)
000186EC                            
000186EC                            	@display:
000186EC 6000 8F82                  		bra.w	RememberState
000186EC 6000 8F82                  		bra.w	RememberState
000186F0                            		include	"_anim\SBZ Spinning Platforms.asm"
000186F0                            ; ---------------------------------------------------------------------------
000186F0                            ; Animation script - trapdoor (SBZ)
000186F0                            ; ---------------------------------------------------------------------------
000186F0 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
000186F2 0000                       		dc.w @trapclose-Ani_Spin
000186F4 0000                       		dc.w @spin1-Ani_Spin
000186F6 0000                       		dc.w @spin2-Ani_Spin
000186F8 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
000186FE 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018704 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018718 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
0001872C                            		even
0001872C                            		even
0001872C                            Map_Trap:	include	"_maps\Trapdoor.asm"
0001872C                            ; ---------------------------------------------------------------------------
0001872C                            ; Sprite mappings - trapdoor (SBZ)
0001872C                            ; ---------------------------------------------------------------------------
0001872C                            Map_Trap_internal:
0001872C 0000                       		dc.w @closed-Map_Trap_internal
0001872E 0000                       		dc.w @half-Map_Trap_internal
00018730 0000                       		dc.w @open-Map_Trap_internal
00018732 04                         @closed:	dc.b 4
00018733 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00018738 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001873D F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018742 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00018747 08                         @half:		dc.b 8
00018748 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001874D 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018752 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018757 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001875C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018761 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018766 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001876B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018770 04                         @open:		dc.b 4
00018771 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018776 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001877B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018780 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018786 00                         		even
00018786 00                         		even
00018786                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018786                            ; ---------------------------------------------------------------------------
00018786                            ; Sprite mappings - spinning platforms (SBZ)
00018786                            ; ---------------------------------------------------------------------------
00018786                            Map_Spin_internal:
00018786 0000                       		dc.w @flat-Map_Spin_internal
00018788 0000                       		dc.w @spin1-Map_Spin_internal
0001878A 0000                       		dc.w @spin2-Map_Spin_internal
0001878C 0000                       		dc.w @spin3-Map_Spin_internal
0001878E 0000                       		dc.w @spin4-Map_Spin_internal
00018790 02                         @flat:		dc.b 2
00018791 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018796 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001879B 02                         @spin1:		dc.b 2
0001879C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000187A1 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000187A6 02                         @spin2:		dc.b 2
000187A7 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000187AC 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000187B1 02                         @spin3:		dc.b 2
000187B2 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000187B7 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000187BC 02                         @spin4:		dc.b 2
000187BD F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000187C2 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000187C8 00                         		even
000187C8 00                         		even
000187C8                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000187C8                            ; ---------------------------------------------------------------------------
000187C8                            ; Object 6A - ground saws and pizza cutters (SBZ)
000187C8                            ; ---------------------------------------------------------------------------
000187C8                            
000187C8                            Saws:
000187C8 7000                       		moveq	#0,d0
000187CA 1028 0024                  		move.b	obRoutine(a0),d0
000187CE 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000187D2 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
000187D6                            ; ===========================================================================
000187D6 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
000187D8 0000                       		dc.w Saw_Action-Saw_Index
000187DA                            
000187DA =0000003A                  saw_origX:	equ $3A		; original x-axis position
000187DA =00000038                  saw_origY:	equ $38		; original y-axis position
000187DA =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
000187DA                            ; ===========================================================================
000187DA                            
000187DA                            Saw_Main:	; Routine 0
000187DA 5428 0024                  		addq.b	#2,obRoutine(a0)
000187DE 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
000187E6 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
000187EC 117C 0004 0001             		move.b	#4,obRender(a0)
000187F2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000187F8 117C 0020 0014             		move.b	#$20,obActWid(a0)
000187FE 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018804 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
0001880A 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018810 6400                       		bcc.s	Saw_Action	; if yes, branch
00018812 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018818                            
00018818                            Saw_Action:	; Routine 2
00018818 7000                       		moveq	#0,d0
0001881A 1028 0028                  		move.b	obSubtype(a0),d0
0001881E 0240 0007                  		andi.w	#7,d0
00018822 D040                       		add.w	d0,d0
00018824 323B 0000                  		move.w	@index(pc,d0.w),d1
00018828 4EBB 1000                  		jsr	@index(pc,d1.w)
00018848 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001884E                            
0001884E                            	@delete:
0001884E 4EF9 0000 F73A             		jmp	(DeleteObject).l
00018854                            ; ===========================================================================
00018854 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
0001885A 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
0001885E                            ; ===========================================================================
0001885E                            
0001885E                            @type00:
0001885E 4E75                       		rts			; doesn't move
00018860                            ; ===========================================================================
00018860                            
00018860                            @type01:
00018860 323C 0060                  		move.w	#$60,d1
00018864 7000                       		moveq	#0,d0
00018866 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001886A 0828 0000 0022             		btst	#0,obStatus(a0)
00018870 6700                       		beq.s	@noflip01
00018872 4440                       		neg.w	d0
00018874 D041                       		add.w	d1,d0
00018876                            
00018876                            	@noflip01:
00018876 3228 003A                  		move.w	saw_origX(a0),d1
0001887A 9240                       		sub.w	d0,d1
0001887C 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018880                            
00018880 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018884 6A00                       		bpl.s	@sameframe01
00018886 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
0001888C 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018892                            
00018892                            	@sameframe01:
00018892 4A28 0001                  		tst.b	obRender(a0)
00018896 6A00                       		bpl.s	@nosound01
00018898 3038 FE04                  		move.w	(v_framecount).w,d0
0001889C 0240 000F                  		andi.w	#$F,d0
000188A0 6600                       		bne.s	@nosound01
000188AC                            
000188AC                            	@nosound01:
000188AC 4E75                       		rts	
000188AE                            ; ===========================================================================
000188AE                            
000188AE                            @type02:
000188AE 323C 0030                  		move.w	#$30,d1
000188B2 7000                       		moveq	#0,d0
000188B4 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000188B8 0828 0000 0022             		btst	#0,obStatus(a0)
000188BE 6700                       		beq.s	@noflip02
000188C0 4440                       		neg.w	d0
000188C2 0640 0080                  		addi.w	#$80,d0
000188C6                            
000188C6                            	@noflip02:
000188C6 3228 0038                  		move.w	saw_origY(a0),d1
000188CA 9240                       		sub.w	d0,d1
000188CC 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000188D0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000188D4 6A00                       		bpl.s	@sameframe02
000188D6 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000188DC 0868 0000 001A             		bchg	#0,obFrame(a0)
000188E2                            
000188E2                            	@sameframe02:
000188E2 4A28 0001                  		tst.b	obRender(a0)
000188E6 6A00                       		bpl.s	@nosound02
000188E8 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000188EC 0C00 0018                  		cmpi.b	#$18,d0
000188F0 6600                       		bne.s	@nosound02
000188FC                            
000188FC                            	@nosound02:
000188FC 4E75                       		rts	
000188FE                            ; ===========================================================================
000188FE                            
000188FE                            @type03:
000188FE 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018902 6600                       		bne.s	@here03		; if yes, branch
00018904                            
00018904 3038 D008                  		move.w	(v_player+obX).w,d0
00018908 0440 00C0                  		subi.w	#$C0,d0
0001890C 6500                       		bcs.s	@nosaw03x
0001890E 9068 0008                  		sub.w	obX(a0),d0
00018912 6500                       		bcs.s	@nosaw03x
00018914 3038 D00C                  		move.w	(v_player+obY).w,d0
00018918 0440 0080                  		subi.w	#$80,d0
0001891C B068 000C                  		cmp.w	obY(a0),d0
00018920 6400                       		bcc.s	@nosaw03y
00018922 0640 0100                  		addi.w	#$100,d0
00018926 B068 000C                  		cmp.w	obY(a0),d0
0001892A 6500                       		bcs.s	@nosaw03y
0001892C 117C 0001 003D             		move.b	#1,saw_here(a0)
00018932 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018938 117C 00A2 0020             		move.b	#$A2,obColType(a0)
0001893E 117C 0002 001A             		move.b	#2,obFrame(a0)
0001894E                            
0001894E                            	@nosaw03x:
0001894E 588F                       		addq.l	#4,sp
00018950                            
00018950                            	@nosaw03y:
00018950 4E75                       		rts	
00018952                            ; ===========================================================================
00018952                            
00018952                            @here03:
00018952 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
00018958 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
0001895E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018962 6A00                       		bpl.s	@sameframe03
00018964 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001896A 0868 0000 001A             		bchg	#0,obFrame(a0)
00018970                            
00018970                            	@sameframe03:
00018970 4E75                       		rts	
00018972                            ; ===========================================================================
00018972                            
00018972                            @type04:
00018972 4A28 003D                  		tst.b	saw_here(a0)
00018976 6600                       		bne.s	@here04
00018978 3038 D008                  		move.w	(v_player+obX).w,d0
0001897C 0640 00E0                  		addi.w	#$E0,d0
00018980 9068 0008                  		sub.w	obX(a0),d0
00018984 6400                       		bcc.s	@nosaw04x
00018986 3038 D00C                  		move.w	(v_player+obY).w,d0
0001898A 0440 0080                  		subi.w	#$80,d0
0001898E B068 000C                  		cmp.w	obY(a0),d0
00018992 6400                       		bcc.s	@nosaw04y
00018994 0640 0100                  		addi.w	#$100,d0
00018998 B068 000C                  		cmp.w	obY(a0),d0
0001899C 6500                       		bcs.s	@nosaw04y
0001899E 117C 0001 003D             		move.b	#1,saw_here(a0)
000189A4 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
000189AA 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000189B0 117C 0002 001A             		move.b	#2,obFrame(a0)
000189C0                            
000189C0                            	@nosaw04x:
000189C0 588F                       		addq.l	#4,sp
000189C2                            
000189C2                            	@nosaw04y:
000189C2 4E75                       		rts	
000189C4                            ; ===========================================================================
000189C4                            
000189C4                            @here04:
000189C4 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
000189CA 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000189D0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000189D4 6A00                       		bpl.s	@sameframe04
000189D6 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
000189DC 0868 0000 001A             		bchg	#0,obFrame(a0)
000189E2                            
000189E2                            	@sameframe04:
000189E2 4E75                       		rts	
000189E2 4E75                       		rts	
000189E4                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
000189E4                            ; ---------------------------------------------------------------------------
000189E4                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000189E4                            ; ---------------------------------------------------------------------------
000189E4                            Map_Saw_internal:
000189E4 0000                       		dc.w @pizzacutter1-Map_Saw_internal
000189E6 0000                       		dc.w @pizzacutter2-Map_Saw_internal
000189E8 0000                       		dc.w @groundsaw1-Map_Saw_internal
000189EA 0000                       		dc.w @groundsaw2-Map_Saw_internal
000189EC 07                         @pizzacutter1:	dc.b 7
000189ED C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000189F2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000189F7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000189FC E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018A01 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018A06 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018A0B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018A10 07                         @pizzacutter2:	dc.b 7
00018A11 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018A16 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018A1B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018A20 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018A25 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018A2A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018A2F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018A34 04                         @groundsaw1:	dc.b 4
00018A35 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018A3A E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018A3F 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018A44 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018A49 04                         @groundsaw2:	dc.b 4
00018A4A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018A4F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018A54 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018A59 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018A5E                            		even
00018A5E                            		even
00018A5E                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018A5E                            ; ---------------------------------------------------------------------------
00018A5E                            ; Object 6B - stomper and sliding door (SBZ)
00018A5E                            ; ---------------------------------------------------------------------------
00018A5E                            
00018A5E                            ScrapStomp:
00018A5E 7000                       		moveq	#0,d0
00018A60 1028 0024                  		move.b	obRoutine(a0),d0
00018A64 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018A68 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018A6C                            ; ===========================================================================
00018A6C 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018A6E 0000                       		dc.w Sto_Action-Sto_Index
00018A70                            
00018A70 =00000016                  sto_height:	equ $16
00018A70 =00000034                  sto_origX:	equ $34		; original x-axis position
00018A70 =00000030                  sto_origY:	equ $30		; original y-axis position
00018A70 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018A70                            
00018A70 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018A74 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018A78 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018A7C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018A80 8040 0005                  		dc.b  $80, $40,	  0,   5
00018A84                            ; ===========================================================================
00018A84                            
00018A84                            Sto_Main:	; Routine 0
00018A84 5428 0024                  		addq.b	#2,obRoutine(a0)
00018A88 7000                       		moveq	#0,d0
00018A8A 1028 0028                  		move.b	obSubtype(a0),d0
00018A8E E448                       		lsr.w	#2,d0
00018A90 0240 001C                  		andi.w	#$1C,d0
00018A94 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018A98 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018A9C 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018AA0 E448                       		lsr.w	#2,d0
00018AA2 1140 001A                  		move.b	d0,obFrame(a0)
00018AA6 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018AAE 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018AB4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018ABA 6600                       		bne.s	@isSBZ12	; if not, branch
00018ABC 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018AC2 6700                       		beq.s	@isSBZ3
00018AC4                            
00018AC4                            @chkdel:
00018AC4 45F8 FC00                  		lea	(v_objstate).w,a2
00018AC8 7000                       		moveq	#0,d0
00018ACA 1028 0023                  		move.b	obRespawnNo(a0),d0
00018ACE 6700                       		beq.s	@delete
00018AD0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018AD6                            
00018AD6                            	@delete:
00018AD6 4EF9 0000 F73A             		jmp	(DeleteObject).l
00018ADC                            ; ===========================================================================
00018ADC                            
00018ADC                            @isSBZ3:
00018ADC 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018AE2 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018AE8 6600                       		bne.s	@isSBZ12
00018AEA 45F8 FC00                  		lea	(v_objstate).w,a2
00018AEE 7000                       		moveq	#0,d0
00018AF0 1028 0023                  		move.b	obRespawnNo(a0),d0
00018AF4 6700                       		beq.s	@isSBZ12
00018AF6 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018AFC 6700                       		beq.s	@isSBZ12
00018AFE 4238 F7CB                  		clr.b	(v_obj6B).w
00018B02 60C0                       		bra.s	@chkdel
00018B04                            ; ===========================================================================
00018B04                            
00018B04                            @isSBZ12:
00018B04 0028 0004 0001             		ori.b	#4,obRender(a0)
00018B0A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018B10 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018B16 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018B1C 7000                       		moveq	#0,d0
00018B1E 101B                       		move.b	(a3)+,d0
00018B20 3140 003C                  		move.w	d0,$3C(a0)
00018B24 7000                       		moveq	#0,d0
00018B26 1028 0028                  		move.b	obSubtype(a0),d0
00018B2A 6A00                       		bpl.s	Sto_Action
00018B2C 0200 000F                  		andi.b	#$F,d0
00018B30 1140 003E                  		move.b	d0,$3E(a0)
00018B34 1153 0028                  		move.b	(a3),obSubtype(a0)
00018B38 0C13 0005                  		cmpi.b	#5,(a3)
00018B3C 6600                       		bne.s	@chkgone
00018B3E 08E8 0004 0001             		bset	#4,obRender(a0)
00018B44                            
00018B44                            	@chkgone:
00018B44 45F8 FC00                  		lea	(v_objstate).w,a2
00018B48 7000                       		moveq	#0,d0
00018B4A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B4E 6700                       		beq.s	Sto_Action
00018B50 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018B56                            
00018B56                            Sto_Action:	; Routine 2
00018B56 3F28 0008                  		move.w	obX(a0),-(sp)
00018B5A 7000                       		moveq	#0,d0
00018B5C 1028 0028                  		move.b	obSubtype(a0),d0
00018B60 0240 000F                  		andi.w	#$F,d0
00018B64 D040                       		add.w	d0,d0
00018B66 323B 0000                  		move.w	@index(pc,d0.w),d1
00018B6A 4EBB 1000                  		jsr	@index(pc,d1.w)
00018B6E 381F                       		move.w	(sp)+,d4
00018B70 4A28 0001                  		tst.b	obRender(a0)
00018B74 6A00                       		bpl.s	@chkdel
00018B76 7200                       		moveq	#0,d1
00018B78 1228 0014                  		move.b	obActWid(a0),d1
00018B7C 0641 000B                  		addi.w	#$B,d1
00018B80 7400                       		moveq	#0,d2
00018B82 1428 0016                  		move.b	sto_height(a0),d2
00018B86 3602                       		move.w	d2,d3
00018B88 5243                       		addq.w	#1,d3
00018B8A 6100 8F7C                  		bsr.w	SolidObject
00018B8E                            
00018B8E                            	@chkdel:
00018BAA 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00018BB0                            
00018BB0                            	@chkgone:
00018BB0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018BB6 6600                       		bne.s	@delete
00018BB8 4238 F7CB                  		clr.b	(v_obj6B).w
00018BBC 45F8 FC00                  		lea	(v_objstate).w,a2
00018BC0 7000                       		moveq	#0,d0
00018BC2 1028 0023                  		move.b	obRespawnNo(a0),d0
00018BC6 6700                       		beq.s	@delete
00018BC8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018BCE                            
00018BCE                            	@delete:
00018BCE 4EF9 0000 F73A             		jmp	(DeleteObject).l
00018BD4                            ; ===========================================================================
00018BD4 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018BD8 0000 0000                  		dc.w @type02-@index, @type03-@index
00018BDC 0000 0000                  		dc.w @type04-@index, @type05-@index
00018BE0                            ; ===========================================================================
00018BE0                            
00018BE0                            @type00:
00018BE0 4E75                       		rts
00018BE2                            ; ===========================================================================
00018BE2                            
00018BE2                            @type01:
00018BE2 4A28 0038                  		tst.b	sto_active(a0)
00018BE6 6600                       		bne.s	@isactive01
00018BE8 45F8 F7E0                  		lea	(f_switch).w,a2
00018BEC 7000                       		moveq	#0,d0
00018BEE 1028 003E                  		move.b	$3E(a0),d0
00018BF2 0832 0000 0000             		btst	#0,(a2,d0.w)
00018BF8 6700                       		beq.s	@loc_15DC2
00018BFA 117C 0001 0038             		move.b	#1,sto_active(a0)
00018C00                            
00018C00                            	@isactive01:
00018C00 3028 003C                  		move.w	$3C(a0),d0
00018C04 B068 003A                  		cmp.w	$3A(a0),d0
00018C08 6700                       		beq.s	@loc_15DE0
00018C0A 5468 003A                  		addq.w	#2,$3A(a0)
00018C0E                            
00018C0E                            	@loc_15DC2:
00018C0E 3028 003A                  		move.w	$3A(a0),d0
00018C12 0828 0000 0022             		btst	#0,obStatus(a0)
00018C18 6700                       		beq.s	@noflip01
00018C1A 4440                       		neg.w	d0
00018C1C 0640 0080                  		addi.w	#$80,d0
00018C20                            
00018C20                            	@noflip01:
00018C20 3228 0034                  		move.w	sto_origX(a0),d1
00018C24 9240                       		sub.w	d0,d1
00018C26 3141 0008                  		move.w	d1,obX(a0)
00018C2A 4E75                       		rts	
00018C2C                            ; ===========================================================================
00018C2C                            
00018C2C                            @loc_15DE0:
00018C2C 5228 0028                  		addq.b	#1,obSubtype(a0)
00018C30 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018C36 4228 0038                  		clr.b	sto_active(a0)
00018C3A 45F8 FC00                  		lea	(v_objstate).w,a2
00018C3E 7000                       		moveq	#0,d0
00018C40 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C44 67C8                       		beq.s	@loc_15DC2
00018C46 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018C4C 60C0                       		bra.s	@loc_15DC2
00018C4E                            ; ===========================================================================
00018C4E                            
00018C4E                            @type02:
00018C4E 4A28 0038                  		tst.b	sto_active(a0)
00018C52 6600                       		bne.s	@isactive02
00018C54 5368 0036                  		subq.w	#1,$36(a0)
00018C58 6600                       		bne.s	@loc_15E1E
00018C5A 117C 0001 0038             		move.b	#1,sto_active(a0)
00018C60                            
00018C60                            	@isactive02:
00018C60 4A68 003A                  		tst.w	$3A(a0)
00018C64 6700                       		beq.s	@loc_15E3C
00018C66 5568 003A                  		subq.w	#2,$3A(a0)
00018C6A                            
00018C6A                            	@loc_15E1E:
00018C6A 3028 003A                  		move.w	$3A(a0),d0
00018C6E 0828 0000 0022             		btst	#0,obStatus(a0)
00018C74 6700                       		beq.s	@noflip02
00018C76 4440                       		neg.w	d0
00018C78 0640 0080                  		addi.w	#$80,d0
00018C7C                            
00018C7C                            	@noflip02:
00018C7C 3228 0034                  		move.w	sto_origX(a0),d1
00018C80 9240                       		sub.w	d0,d1
00018C82 3141 0008                  		move.w	d1,obX(a0)
00018C86 4E75                       		rts	
00018C88                            ; ===========================================================================
00018C88                            
00018C88                            @loc_15E3C:
00018C88 5328 0028                  		subq.b	#1,obSubtype(a0)
00018C8C 4228 0038                  		clr.b	sto_active(a0)
00018C90 45F8 FC00                  		lea	(v_objstate).w,a2
00018C94 7000                       		moveq	#0,d0
00018C96 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C9A 67CE                       		beq.s	@loc_15E1E
00018C9C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018CA2 60C6                       		bra.s	@loc_15E1E
00018CA4                            ; ===========================================================================
00018CA4                            
00018CA4                            @type03:
00018CA4 4A28 0038                  		tst.b	sto_active(a0)
00018CA8 6600                       		bne.s	@isactive03
00018CAA 4A68 003A                  		tst.w	$3A(a0)
00018CAE 6700                       		beq.s	@loc_15E6A
00018CB0 5368 003A                  		subq.w	#1,$3A(a0)
00018CB4 6000                       		bra.s	@loc_15E8E
00018CB6                            ; ===========================================================================
00018CB6                            
00018CB6                            @loc_15E6A:
00018CB6 5368 0036                  		subq.w	#1,$36(a0)
00018CBA 6A00                       		bpl.s	@loc_15E8E
00018CBC 317C 003C 0036             		move.w	#$3C,$36(a0)
00018CC2 117C 0001 0038             		move.b	#1,sto_active(a0)
00018CC8                            
00018CC8                            @isactive03:
00018CC8 5068 003A                  		addq.w	#8,$3A(a0)
00018CCC 3028 003A                  		move.w	$3A(a0),d0
00018CD0 B068 003C                  		cmp.w	$3C(a0),d0
00018CD4 6600                       		bne.s	@loc_15E8E
00018CD6 4228 0038                  		clr.b	sto_active(a0)
00018CDA                            
00018CDA                            @loc_15E8E:
00018CDA 3028 003A                  		move.w	$3A(a0),d0
00018CDE 0828 0000 0022             		btst	#0,obStatus(a0)
00018CE4 6700                       		beq.s	@noflip03
00018CE6 4440                       		neg.w	d0
00018CE8 0640 0038                  		addi.w	#$38,d0
00018CEC                            
00018CEC                            	@noflip03:
00018CEC 3228 0030                  		move.w	sto_origY(a0),d1
00018CF0 D240                       		add.w	d0,d1
00018CF2 3141 000C                  		move.w	d1,obY(a0)
00018CF6 4E75                       		rts	
00018CF8                            ; ===========================================================================
00018CF8                            
00018CF8                            @type04:
00018CF8 4A28 0038                  		tst.b	sto_active(a0)
00018CFC 6600                       		bne.s	@isactive04
00018CFE 4A68 003A                  		tst.w	$3A(a0)
00018D02 6700                       		beq.s	@loc_15EBE
00018D04 5168 003A                  		subq.w	#8,$3A(a0)
00018D08 6000                       		bra.s	@loc_15EF0
00018D0A                            ; ===========================================================================
00018D0A                            
00018D0A                            @loc_15EBE:
00018D0A 5368 0036                  		subq.w	#1,$36(a0)
00018D0E 6A00                       		bpl.s	@loc_15EF0
00018D10 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D16 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D1C                            
00018D1C                            @isactive04:
00018D1C 3028 003A                  		move.w	$3A(a0),d0
00018D20 B068 003C                  		cmp.w	$3C(a0),d0
00018D24 6700                       		beq.s	@loc_15EE0
00018D26 5068 003A                  		addq.w	#8,$3A(a0)
00018D2A 6000                       		bra.s	@loc_15EF0
00018D2C                            ; ===========================================================================
00018D2C                            
00018D2C                            @loc_15EE0:
00018D2C 5368 0036                  		subq.w	#1,$36(a0)
00018D30 6A00                       		bpl.s	@loc_15EF0
00018D32 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D38 4228 0038                  		clr.b	sto_active(a0)
00018D3C                            
00018D3C                            @loc_15EF0:
00018D3C 3028 003A                  		move.w	$3A(a0),d0
00018D40 0828 0000 0022             		btst	#0,obStatus(a0)
00018D46 6700                       		beq.s	@noflip04
00018D48 4440                       		neg.w	d0
00018D4A 0640 0038                  		addi.w	#$38,d0
00018D4E                            
00018D4E                            	@noflip04:
00018D4E 3228 0030                  		move.w	sto_origY(a0),d1
00018D52 D240                       		add.w	d0,d1
00018D54 3141 000C                  		move.w	d1,obY(a0)
00018D58 4E75                       		rts	
00018D5A                            ; ===========================================================================
00018D5A                            
00018D5A                            @type05:
00018D5A 4A28 0038                  		tst.b	sto_active(a0)
00018D5E 6600                       		bne.s	@loc_15F3E
00018D60 45F8 F7E0                  		lea	(f_switch).w,a2
00018D64 7000                       		moveq	#0,d0
00018D66 1028 003E                  		move.b	$3E(a0),d0
00018D6A 0832 0000 0000             		btst	#0,(a2,d0.w)
00018D70 6700                       		beq.s	@locret_15F5C
00018D72 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D78 45F8 FC00                  		lea	(v_objstate).w,a2
00018D7C 7000                       		moveq	#0,d0
00018D7E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D82 6700                       		beq.s	@loc_15F3E
00018D84 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018D8A                            
00018D8A                            @loc_15F3E:
00018D8A 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018D92 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018D9A 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018DA0 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018DA6 6700                       		beq.s	@loc_15F5E
00018DA8                            
00018DA8                            @locret_15F5C:
00018DA8 4E75                       		rts	
00018DAA                            ; ===========================================================================
00018DAA                            
00018DAA                            @loc_15F5E:
00018DAA 4228 0028                  		clr.b	obSubtype(a0)
00018DAE 4228 0038                  		clr.b	sto_active(a0)
00018DB2 4E75                       		rts	
00018DB2 4E75                       		rts	
00018DB4                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018DB4                            ; ---------------------------------------------------------------------------
00018DB4                            ; Sprite mappings - stomper and	platforms (SBZ)
00018DB4                            ; ---------------------------------------------------------------------------
00018DB4                            Map_Stomp_internal:
00018DB4 0000                       		dc.w @door-Map_Stomp_internal
00018DB6 0000                       		dc.w @stomper-Map_Stomp_internal
00018DB8 0000                       		dc.w @stomper-Map_Stomp_internal
00018DBA 0000                       		dc.w @stomper-Map_Stomp_internal
00018DBC 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018DBE 04                         @door:		dc.b 4
00018DBF F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018DC4 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018DC9 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018DCE F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018DD3 08                         @stomper:	dc.b 8
00018DD4 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018DD9 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018DDE E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018DE3 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018DE8 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018DED 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018DF2 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018DF7 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018DFC 0E                         @bigdoor:	dc.b $E
00018DFD C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018E02 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018E07 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018E0C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018E11 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018E16 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018E1B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018E20 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018E25 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018E2A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018E2F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018E34 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018E39 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018E3E 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018E44 00                         		even
00018E44 00                         		even
00018E44                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018E44                            ; ---------------------------------------------------------------------------
00018E44                            ; Object 6C - vanishing	platforms (SBZ)
00018E44                            ; ---------------------------------------------------------------------------
00018E44                            
00018E44                            VanishPlatform:
00018E44 7000                       		moveq	#0,d0
00018E46 1028 0024                  		move.b	obRoutine(a0),d0
00018E4A 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018E4E 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018E52                            ; ===========================================================================
00018E52 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018E54 0000                       		dc.w VanP_Vanish-VanP_Index
00018E56 0000                       		dc.w VanP_Appear-VanP_Index
00018E58 0000                       		dc.w loc_16068-VanP_Index
00018E5A                            
00018E5A =00000030                  vanp_timer:	equ $30		; counter for time until event
00018E5A =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018E5A                            ; ===========================================================================
00018E5A                            
00018E5A                            VanP_Main:	; Routine 0
00018E5A 5C28 0024                  		addq.b	#6,obRoutine(a0)
00018E5E 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00018E66 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
00018E6C 0028 0004 0001             		ori.b	#4,obRender(a0)
00018E72 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018E78 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018E7E 7000                       		moveq	#0,d0
00018E80 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018E84 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018E88 5240                       		addq.w	#1,d0		; add 1
00018E8A EF48                       		lsl.w	#7,d0		; multiply by $80
00018E8C 3200                       		move.w	d0,d1
00018E8E 5340                       		subq.w	#1,d0
00018E90 3140 0030                  		move.w	d0,vanp_timer(a0)
00018E94 3140 0032                  		move.w	d0,vanp_timelen(a0)
00018E98 7000                       		moveq	#0,d0
00018E9A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018E9E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018EA2 0641 0080                  		addi.w	#$80,d1
00018EA6 C0C1                       		mulu.w	d1,d0
00018EA8 E088                       		lsr.l	#8,d0
00018EAA 3140 0036                  		move.w	d0,$36(a0)
00018EAE 5341                       		subq.w	#1,d1
00018EB0 3141 0038                  		move.w	d1,$38(a0)
00018EB4                            
00018EB4                            loc_16068:	; Routine 6
00018EB4 3038 FE04                  		move.w	(v_framecount).w,d0
00018EB8 9068 0036                  		sub.w	$36(a0),d0
00018EBC C068 0038                  		and.w	$38(a0),d0
00018EC0 6600                       		bne.s	@animate
00018EC2 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00018EC6 6000                       		bra.s	VanP_Vanish
00018EC8                            ; ===========================================================================
00018EC8                            
00018EC8                            @animate:
00018EC8 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018ECE 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
00018ED4 6000 879A                  		bra.w	RememberState
00018ED8                            ; ===========================================================================
00018ED8                            
00018ED8                            VanP_Vanish:	; Routine 2
00018ED8                            VanP_Appear:	; Routine 4
00018ED8 5368 0030                  		subq.w	#1,vanp_timer(a0)
00018EDC 6A00                       		bpl.s	@wait
00018EDE 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00018EE4 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00018EE8 6700                       		beq.s	@isvanishing	; if yes, branch
00018EEA 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00018EF0                            
00018EF0                            	@isvanishing:
00018EF0 0868 0000 001C             		bchg	#0,obAnim(a0)
00018EF6                            
00018EF6                            	@wait:
00018EF6 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018EFC 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
00018F02 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00018F08 6600                       		bne.s	@notsolid	; if yes, branch
00018F0A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00018F10 6600                       		bne.s	@loc_160D6
00018F12 7200                       		moveq	#0,d1
00018F14 1228 0014                  		move.b	obActWid(a0),d1
00018F18 4EB9 0000 8E08             		jsr	(PlatformObject).l
00018F1E 6000 8750                  		bra.w	RememberState
00018F22                            ; ===========================================================================
00018F22                            
00018F22                            @loc_160D6:
00018F22 7200                       		moveq	#0,d1
00018F24 1228 0014                  		move.b	obActWid(a0),d1
00018F28 4EB9 0000 8F7C             		jsr	(ExitPlatform).l
00018F2E 3428 0008                  		move.w	obX(a0),d2
00018F32 4EB9 0000 94E6             		jsr	(MvSonicOnPtfm2).l
00018F38 6000 8736                  		bra.w	RememberState
00018F3C                            ; ===========================================================================
00018F3C                            
00018F3C                            @notsolid:
00018F3C 0828 0003 0022             		btst	#3,obStatus(a0)
00018F42 6700                       		beq.s	@display
00018F44 43F8 D000                  		lea	(v_player).w,a1
00018F48 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018F4E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018F54 117C 0002 0024             		move.b	#2,obRoutine(a0)
00018F5A 4228 0025                  		clr.b	obSolid(a0)
00018F5E                            
00018F5E                            	@display:
00018F5E 6000 8710                  		bra.w	RememberState
00018F5E 6000 8710                  		bra.w	RememberState
00018F62                            		include	"_anim\SBZ Vanishing Platforms.asm"
00018F62                            ; ---------------------------------------------------------------------------
00018F62                            ; Animation script - vanishing platforms (SBZ)
00018F62                            ; ---------------------------------------------------------------------------
00018F62 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00018F64 0000                       		dc.w @appear-Ani_Van
00018F66 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00018F6E 00                         		even
00018F6E 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00018F76 00                         		even
00018F76 00                         		even
00018F76                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00018F76                            ; ---------------------------------------------------------------------------
00018F76                            ; Sprite mappings - vanishing platforms	(SBZ)
00018F76                            ; ---------------------------------------------------------------------------
00018F76                            Map_VanP_internal:
00018F76 0000                       		dc.w @whole-Map_VanP_internal
00018F78 0000                       		dc.w @half-Map_VanP_internal
00018F7A 0000                       		dc.w @quarter-Map_VanP_internal
00018F7C 0000                       		dc.w @gone-Map_VanP_internal
00018F7E 01                         @whole:		dc.b 1
00018F7F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00018F84 01                         @half:		dc.b 1
00018F85 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00018F8A 01                         @quarter:	dc.b 1
00018F8B F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00018F90 00                         @gone:		dc.b 0
00018F92 00                         		even
00018F92 00                         		even
00018F92                            		include	"_incObj\6E Electrocuter.asm"
00018F92                            ; ---------------------------------------------------------------------------
00018F92                            ; Object 6E - electrocution orbs (SBZ)
00018F92                            ; ---------------------------------------------------------------------------
00018F92                            
00018F92                            Electro:
00018F92 7000                       		moveq	#0,d0
00018F94 1028 0024                  		move.b	obRoutine(a0),d0
00018F98 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00018F9C 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00018FA0                            ; ===========================================================================
00018FA0 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00018FA2 0000                       		dc.w Elec_Shock-Elec_Index
00018FA4                            
00018FA4 =00000034                  elec_freq:	equ $34		; frequency
00018FA4                            ; ===========================================================================
00018FA4                            
00018FA4                            Elec_Main:	; Routine 0
00018FA4 5428 0024                  		addq.b	#2,obRoutine(a0)
00018FA8 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00018FB0 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00018FB6 0028 0004 0001             		ori.b	#4,obRender(a0)
00018FBC 117C 0028 0014             		move.b	#$28,obActWid(a0)
00018FC2 7000                       		moveq	#0,d0
00018FC4 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00018FC8 E948                       		lsl.w	#4,d0		; multiply by $10
00018FCA 5340                       		subq.w	#1,d0
00018FCC 3140 0034                  		move.w	d0,elec_freq(a0)
00018FD0                            
00018FD0                            Elec_Shock:	; Routine 2
00018FD0 3038 FE04                  		move.w	(v_framecount).w,d0
00018FD4 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00018FD8 6600                       		bne.s	@animate	; if not, branch
00018FDA                            
00018FDA 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00018FE0 4A28 0001                  		tst.b	obRender(a0)
00018FE4 6A00                       		bpl.s	@animate
00018FF0                            
00018FF0                            	@animate:
00018FF0 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00018FF6 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
00018FFC 117C 0000 0020             		move.b	#0,obColType(a0)
00019002 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019008 6600                       		bne.s	@display	; if not, branch
0001900A 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
00019010                            
00019010                            	@display:
00019010 6000 865E                  		bra.w	RememberState
00019010 6000 865E                  		bra.w	RememberState
00019014                            		include	"_anim\Electrocuter.asm"
00019014                            ; ---------------------------------------------------------------------------
00019014                            ; Animation script - electrocution orbs (SBZ)
00019014                            ; ---------------------------------------------------------------------------
00019014 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019016 0000                       		dc.w byte_161D0-Ani_Elec
00019018 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
0001901C 00                         		even
0001901C 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
0001902C                            		even
0001902C                            		even
0001902C                            Map_Elec:	include	"_maps\Electrocuter.asm"
0001902C                            ; --------------------------------------------------------------------------------
0001902C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001902C                            ; --------------------------------------------------------------------------------
0001902C                            
0001902C                            SME_KiF9w:	
0001902C 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019030 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019034 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019038 02                         SME_KiF9w_C:	dc.b 2	
00019039 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
0001903E 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019043 03                         SME_KiF9w_17:	dc.b 3	
00019044 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019049 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
0001904E 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019053 05                         SME_KiF9w_27:	dc.b 5	
00019054 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019059 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
0001905E 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019063 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019068 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
0001906D 04                         SME_KiF9w_41:	dc.b 4	
0001906E F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019073 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019078 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001907D F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019082 06                         SME_KiF9w_56:	dc.b 6	
00019083 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019088 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001908D F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019092 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019097 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
0001909C F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
000190A1 04                         SME_KiF9w_75:	dc.b 4	
000190A2 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000190A7 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000190AC F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
000190B1 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
000190B6                            		even
000190B6                            		even
000190B6                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
000190B6                            ; ---------------------------------------------------------------------------
000190B6                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000190B6                            ; ---------------------------------------------------------------------------
000190B6                            
000190B6                            SpinConvey:
000190B6 7000                       		moveq	#0,d0
000190B8 1028 0024                  		move.b	obRoutine(a0),d0
000190BC 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
000190C0 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
000190E0                            
000190E0                            SpinC_Display:
000190E0 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
000190E6                            ; ===========================================================================
000190E6                            
000190E6                            loc_1629A:
000190E6 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
000190EC 6600                       		bne.s	SpinC_Act1or2	; if not, branch
000190EE 0C40 FF80                  		cmpi.w	#-$80,d0
000190F2 64EC                       		bcc.s	SpinC_Display
000190F4                            
000190F4                            SpinC_Act1or2:
000190F4 1028 002F                  		move.b	$2F(a0),d0
000190F8 6A00                       		bpl.s	SpinC_Delete
000190FA 0240 007F                  		andi.w	#$7F,d0
000190FE 45F8 F7C1                  		lea	(v_obj63).w,a2
00019102 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019108                            
00019108                            SpinC_Delete:
00019108 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001910E                            ; ===========================================================================
0001910E 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00019110 0000                       		dc.w loc_163D8-SpinC_Index
00019112                            ; ===========================================================================
00019112                            
00019112                            SpinC_Main:	; Routine 0
00019112 1028 0028                  		move.b	obSubtype(a0),d0
00019116 6B00 0000                  		bmi.w	loc_16380
0001911A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001911E 217C 0001 8786 0004        		move.l	#Map_Spin,obMap(a0)
00019126 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
0001912C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019132 0028 0004 0001             		ori.b	#4,obRender(a0)
00019138 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001913E 7000                       		moveq	#0,d0
00019140 1028 0028                  		move.b	obSubtype(a0),d0
00019144 3200                       		move.w	d0,d1
00019146 E648                       		lsr.w	#3,d0
00019148 0240 001E                  		andi.w	#$1E,d0
0001914C 45FA 0000                  		lea	off_164A6(pc),a2
00019150 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019154 315A 0038                  		move.w	(a2)+,$38(a0)
00019158 315A 0030                  		move.w	(a2)+,$30(a0)
0001915C 214A 003C                  		move.l	a2,$3C(a0)
00019160 0241 000F                  		andi.w	#$F,d1
00019164 E549                       		lsl.w	#2,d1
00019166 1141 0038                  		move.b	d1,$38(a0)
0001916A 117C 0004 003A             		move.b	#4,$3A(a0)
00019170 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019174 6700                       		beq.s	loc_16356
00019176 117C 0001 003B             		move.b	#1,$3B(a0)
0001917C 4428 003A                  		neg.b	$3A(a0)
00019180 7200                       		moveq	#0,d1
00019182 1228 0038                  		move.b	$38(a0),d1
00019186 D228 003A                  		add.b	$3A(a0),d1
0001918A B228 0039                  		cmp.b	$39(a0),d1
0001918E 6500                       		bcs.s	loc_16352
00019190 1001                       		move.b	d1,d0
00019192 7200                       		moveq	#0,d1
00019194 4A00                       		tst.b	d0
00019196 6A00                       		bpl.s	loc_16352
00019198 1228 0039                  		move.b	$39(a0),d1
0001919C 5901                       		subq.b	#4,d1
0001919E                            
0001919E                            loc_16352:
0001919E 1141 0038                  		move.b	d1,$38(a0)
000191A2                            
000191A2                            loc_16356:
000191A2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000191A8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000191AE 4A41                       		tst.w	d1
000191B0 6600                       		bne.s	loc_1636C
000191B2 117C 0001 001C             		move.b	#1,obAnim(a0)
000191B8                            
000191B8                            loc_1636C:
000191B8 0C41 0008                  		cmpi.w	#8,d1
000191BC 6600                       		bne.s	loc_16378
000191BE 117C 0000 001C             		move.b	#0,obAnim(a0)
000191C4                            
000191C4                            loc_16378:
000191C4 6100 B522                  		bsr.w	LCon_ChangeDir
000191C8 6000 0000                  		bra.w	loc_163D8
000191CC                            ; ===========================================================================
000191CC                            
000191CC                            loc_16380:
000191CC 1140 002F                  		move.b	d0,$2F(a0)
000191D0 0240 007F                  		andi.w	#$7F,d0
000191D4 45F8 F7C1                  		lea	(v_obj63).w,a2
000191D8 08F2 0000 0000             		bset	#0,(a2,d0.w)
000191DE 6700                       		beq.s	loc_1639A
000191E0 4EF9 0000 F73A             		jmp	(DeleteObject).l
000191E6                            ; ===========================================================================
000191E6                            
000191E6                            loc_1639A:
000191E6 D040                       		add.w	d0,d0
000191E8 0240 001E                  		andi.w	#$1E,d0
000191EC 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
000191F0 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000191F6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000191FA 321A                       		move.w	(a2)+,d1
000191FC 2248                       		movea.l	a0,a1
000191FE 6000                       		bra.s	SpinC_LoadPform
00019200                            ; ===========================================================================
00019200                            
00019200                            SpinC_Loop:
00019200 4EB9 0000 FB86             		jsr	(FindFreeObj).l
00019206 6600                       		bne.s	loc_163D0
00019208                            
00019208                            SpinC_LoadPform:
00019208 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
0001920C 335A 0008                  		move.w	(a2)+,obX(a1)
00019210 335A 000C                  		move.w	(a2)+,obY(a1)
00019214 301A                       		move.w	(a2)+,d0
00019216 1340 0028                  		move.b	d0,obSubtype(a1)
0001921A                            
0001921A                            loc_163D0:
0001921A 51C9 FFE4                  		dbf	d1,SpinC_Loop
0001921E                            
0001921E 588F                       		addq.l	#4,sp
00019220 4E75                       		rts	
00019222                            ; ===========================================================================
00019222                            
00019222                            loc_163D8:	; Routine 2
00019222 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019228 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001922E 4A28 001A                  		tst.b	obFrame(a0)
00019232 6600                       		bne.s	loc_16404
00019234 3F28 0008                  		move.w	obX(a0),-(sp)
00019238 6100 0000                  		bsr.w	loc_16424
0001923C 323C 001B                  		move.w	#$1B,d1
00019240 343C 0007                  		move.w	#7,d2
00019244 3602                       		move.w	d2,d3
00019246 5243                       		addq.w	#1,d3
00019248 381F                       		move.w	(sp)+,d4
0001924A 6000 88BC                  		bra.w	SolidObject
0001924E                            ; ===========================================================================
0001924E                            
0001924E                            loc_16404:
0001924E 0828 0003 0022             		btst	#3,obStatus(a0)
00019254 6700                       		beq.s	loc_16420
00019256 43F8 D000                  		lea	(v_objspace).w,a1
0001925A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019260 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019266 4228 0025                  		clr.b	obSolid(a0)
0001926A                            
0001926A                            loc_16420:
0001926A 6000 0000                  		bra.w	loc_16424
0001926E                            
0001926E                            loc_16424:
0001926E 3028 0008                  		move.w	obX(a0),d0
00019272 B068 0034                  		cmp.w	$34(a0),d0
00019276 6600                       		bne.s	loc_16484
00019278 3028 000C                  		move.w	obY(a0),d0
0001927C B068 0036                  		cmp.w	$36(a0),d0
00019280 6600                       		bne.s	loc_16484
00019282 7200                       		moveq	#0,d1
00019284 1228 0038                  		move.b	$38(a0),d1
00019288 D228 003A                  		add.b	$3A(a0),d1
0001928C B228 0039                  		cmp.b	$39(a0),d1
00019290 6500                       		bcs.s	loc_16456
00019292 1001                       		move.b	d1,d0
00019294 7200                       		moveq	#0,d1
00019296 4A00                       		tst.b	d0
00019298 6A00                       		bpl.s	loc_16456
0001929A 1228 0039                  		move.b	$39(a0),d1
0001929E 5901                       		subq.b	#4,d1
000192A0                            
000192A0                            loc_16456:
000192A0 1141 0038                  		move.b	d1,$38(a0)
000192A4 2268 003C                  		movea.l	$3C(a0),a1
000192A8 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000192AE 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000192B4 4A41                       		tst.w	d1
000192B6 6600                       		bne.s	loc_16474
000192B8 117C 0001 001C             		move.b	#1,obAnim(a0)
000192BE                            
000192BE                            loc_16474:
000192BE 0C41 0008                  		cmpi.w	#8,d1
000192C2 6600                       		bne.s	loc_16480
000192C4 117C 0000 001C             		move.b	#0,obAnim(a0)
000192CA                            
000192CA                            loc_16480:
000192CA 6100 B41C                  		bsr.w	LCon_ChangeDir
000192CE                            
000192CE                            loc_16484:
000192CE 4EF9 0000 F6E6             		jmp	(SpeedToPos).l
000192CE 4EF9 0000 F6E6             		jmp	(SpeedToPos).l
000192D4                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
000192D4                            ; ---------------------------------------------------------------------------
000192D4                            ; Animation script - platform on conveyor belt (SBZ)
000192D4                            ; ---------------------------------------------------------------------------
000192D4 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
000192D6 0000                       		dc.w @still-Ani_SpinConvey
000192D8 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000192E5 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
000192EC 00                         		even
000192EC 0F00 FF                    @still:		dc.b $F, 0, afEnd
000192F0 00                         		even
000192F0 00                         		even
000192F0                            
000192F0 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000192F6 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000192FC 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00019310 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019324 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00019338 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001934C 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019360 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019374                            ; ===========================================================================
00019374                            
00019374                            		include	"_incObj\70 Girder Block.asm"
00019374                            ; ---------------------------------------------------------------------------
00019374                            ; Object 70 - large girder block (SBZ)
00019374                            ; ---------------------------------------------------------------------------
00019374                            
00019374                            Girder:
00019374 7000                       		moveq	#0,d0
00019376 1028 0024                  		move.b	obRoutine(a0),d0
0001937A 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001937E 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019382                            ; ===========================================================================
00019382 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019384 0000                       		dc.w Gird_Action-Gird_Index
00019386                            
00019386 =00000016                  gird_height:	equ $16
00019386 =00000032                  gird_origX:	equ $32		; original x-axis position
00019386 =00000030                  gird_origY:	equ $30		; original y-axis position
00019386 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019386 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019386 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019386                            ; ===========================================================================
00019386                            
00019386                            Gird_Main:	; Routine 0
00019386 5428 0024                  		addq.b	#2,obRoutine(a0)
0001938A 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019392 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019398 0028 0004 0001             		ori.b	#4,obRender(a0)
0001939E 317C 0200 0018             		move.w	#$200,obPriority(a0)
000193A4 117C 0060 0014             		move.b	#$60,obActWid(a0)
000193AA 117C 0018 0016             		move.b	#$18,gird_height(a0)
000193B0 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
000193B6 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
000193BC 6100 0000                  		bsr.w	Gird_ChgMove
000193C0                            
000193C0                            Gird_Action:	; Routine 2
000193C0 3F28 0008                  		move.w	obX(a0),-(sp)
000193C4 4A68 003A                  		tst.w	gird_delay(a0)
000193C8 6700                       		beq.s	@beginmove
000193CA 5368 003A                  		subq.w	#1,gird_delay(a0)
000193CE 6600                       		bne.s	@solid
000193D0                            
000193D0                            	@beginmove:
000193D0 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
000193D6 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
000193DA 6600                       		bne.s	@solid		; if time remains, branch
000193DC 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
000193E0                            
000193E0                            	@solid:
000193E0 381F                       		move.w	(sp)+,d4
000193E2 4A28 0001                  		tst.b	obRender(a0)
000193E6 6A00                       		bpl.s	@chkdel
000193E8 7200                       		moveq	#0,d1
000193EA 1228 0014                  		move.b	obActWid(a0),d1
000193EE 0641 000B                  		addi.w	#$B,d1
000193F2 7400                       		moveq	#0,d2
000193F4 1428 0016                  		move.b	gird_height(a0),d2
000193F8 3602                       		move.w	d2,d3
000193FA 5243                       		addq.w	#1,d3
000193FC 6100 870A                  		bsr.w	SolidObject
00019400                            
00019400                            	@chkdel:
0001941C 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00019422                            
00019422                            	@delete:
00019422 4EF9 0000 F73A             		jmp	(DeleteObject).l
00019428                            ; ===========================================================================
00019428                            
00019428                            Gird_ChgMove:
00019428 1028 0038                  		move.b	gird_set(a0),d0
0001942C 0240 0018                  		andi.w	#$18,d0
00019430 43F9 0000 0000             		lea	(@settings).l,a1
00019436 43F1 0000                  		lea	(a1,d0.w),a1
0001943A 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001943E 3159 0012                  		move.w	(a1)+,obVelY(a0)
00019442 3159 0034                  		move.w	(a1)+,gird_time(a0)
00019446 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001944A 317C 0007 003A             		move.w	#7,gird_delay(a0)
00019450 4E75                       		rts	
00019452                            ; ===========================================================================
00019452                            @settings:	;   x-speed, y-speed, duration
00019452 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001945A 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00019462 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001946A 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001946A 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019472                            Map_Gird:	include	"_maps\Girder Block.asm"
00019472                            ; ---------------------------------------------------------------------------
00019472                            ; Sprite mappings - large girder block (SBZ)
00019472                            ; ---------------------------------------------------------------------------
00019472                            Map_Gird_internal:
00019472 0000                       		dc.w @girder-Map_Gird_internal
00019474 0C                         @girder:	dc.b $C
00019475 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001947A 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001947F E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019484 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019489 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001948E 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019493 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019498 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001949D E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000194A2 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000194A7 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000194AC 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000194B2 00                         		even
000194B2 00                         		even
000194B2                            		include	"_incObj\72 Teleporter.asm"
000194B2                            ; ---------------------------------------------------------------------------
000194B2                            ; Object 72 - teleporter (SBZ)
000194B2                            ; ---------------------------------------------------------------------------
000194B2                            
000194B2                            Teleport:
000194B2 7000                       		moveq	#0,d0
000194B4 1028 0024                  		move.b	obRoutine(a0),d0
000194B8 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
000194BC 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
000194DC 4E75                       		rts	
000194DE                            
000194DE                            	@delete:
000194DE 4EF9 0000 F73A             		jmp	(DeleteObject).l
000194E4                            ; ===========================================================================
000194E4 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
000194E6 0000                       		dc.w loc_166C8-Tele_Index
000194E8 0000                       		dc.w loc_1675E-Tele_Index
000194EA 0000                       		dc.w loc_16798-Tele_Index
000194EC                            ; ===========================================================================
000194EC                            
000194EC                            Tele_Main:	; Routine 0
000194EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000194F0 1028 0028                  		move.b	obSubtype(a0),d0
000194F4 D040                       		add.w	d0,d0
000194F6 0240 001E                  		andi.w	#$1E,d0
000194FA 45FA 0000                  		lea	Tele_Data(pc),a2
000194FE D4F2 0000                  		adda.w	(a2,d0.w),a2
00019502 315A 003A                  		move.w	(a2)+,$3A(a0)
00019506 214A 003C                  		move.l	a2,$3C(a0)
0001950A 315A 0036                  		move.w	(a2)+,$36(a0)
0001950E 315A 0038                  		move.w	(a2)+,$38(a0)
00019512                            
00019512                            loc_166C8:	; Routine 2
00019512 43F8 D000                  		lea	(v_player).w,a1
00019516 3029 0008                  		move.w	obX(a1),d0
0001951A 9068 0008                  		sub.w	obX(a0),d0
0001951E 0828 0000 0022             		btst	#0,obStatus(a0)
00019524 6700                       		beq.s	loc_166E0
00019526 0640 000F                  		addi.w	#$F,d0
0001952A                            
0001952A                            loc_166E0:
0001952A 0C40 0010                  		cmpi.w	#$10,d0
0001952E 6400                       		bcc.s	locret_1675C
00019530 3229 000C                  		move.w	obY(a1),d1
00019534 9268 000C                  		sub.w	obY(a0),d1
00019538 0641 0020                  		addi.w	#$20,d1
0001953C 0C41 0040                  		cmpi.w	#$40,d1
00019540 6400                       		bcc.s	locret_1675C
00019542 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019546 6600                       		bne.s	locret_1675C
00019548 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001954E 6600                       		bne.s	loc_1670E
00019550 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
00019556 6500                       		bcs.s	locret_1675C
00019558                            
00019558                            loc_1670E:
00019558 5428 0024                  		addq.b	#2,obRoutine(a0)
0001955C 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00019562 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
00019568 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001956E 337C 0000 0010             		move.w	#0,obVelX(a1)
00019574 337C 0000 0012             		move.w	#0,obVelY(a1)
0001957A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019580 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019586 08E9 0001 0022             		bset	#1,obStatus(a1)
0001958C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019592 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019598 4228 0032                  		clr.b	$32(a0)
000195A6                            
000195A6                            locret_1675C:
000195A6 4E75                       		rts	
000195A8                            ; ===========================================================================
000195A8                            
000195A8                            loc_1675E:	; Routine 4
000195A8 43F8 D000                  		lea	(v_player).w,a1
000195AC 1028 0032                  		move.b	$32(a0),d0
000195B0 5428 0032                  		addq.b	#2,$32(a0)
000195B4 4EB9 0000 37AE             		jsr	(CalcSine).l
000195BA EA40                       		asr.w	#5,d0
000195BC 3428 000C                  		move.w	obY(a0),d2
000195C0 9440                       		sub.w	d0,d2
000195C2 3342 000C                  		move.w	d2,obY(a1)
000195C6 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000195CC 6600                       		bne.s	locret_16796
000195CE 6100 0000                  		bsr.w	sub_1681C
000195D2 5428 0024                  		addq.b	#2,obRoutine(a0)
000195E0                            
000195E0                            locret_16796:
000195E0 4E75                       		rts	
000195E2                            ; ===========================================================================
000195E2                            
000195E2                            loc_16798:	; Routine 6
000195E2 588F                       		addq.l	#4,sp
000195E4 43F8 D000                  		lea	(v_player).w,a1
000195E8 5328 002E                  		subq.b	#1,$2E(a0)
000195EC 6A00                       		bpl.s	loc_167DA
000195EE 3368 0036 0008             		move.w	$36(a0),obX(a1)
000195F4 3368 0038 000C             		move.w	$38(a0),obY(a1)
000195FA 7200                       		moveq	#0,d1
000195FC 1228 003A                  		move.b	$3A(a0),d1
00019600 5801                       		addq.b	#4,d1
00019602 B228 003B                  		cmp.b	$3B(a0),d1
00019606 6500                       		bcs.s	loc_167C2
00019608 7200                       		moveq	#0,d1
0001960A 6000                       		bra.s	loc_16800
0001960C                            ; ===========================================================================
0001960C                            
0001960C                            loc_167C2:
0001960C 1141 003A                  		move.b	d1,$3A(a0)
00019610 2468 003C                  		movea.l	$3C(a0),a2
00019614 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001961A 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00019620 6000 0000                  		bra.w	sub_1681C
00019624                            ; ===========================================================================
00019624                            
00019624                            loc_167DA:
00019624 2429 0008                  		move.l	obX(a1),d2
00019628 2629 000C                  		move.l	obY(a1),d3
0001962C 3029 0010                  		move.w	obVelX(a1),d0
00019630 48C0                       		ext.l	d0
00019632 E180                       		asl.l	#8,d0
00019634 D480                       		add.l	d0,d2
00019636 3029 0012                  		move.w	obVelY(a1),d0
0001963A 48C0                       		ext.l	d0
0001963C E180                       		asl.l	#8,d0
0001963E D680                       		add.l	d0,d3
00019640 2342 0008                  		move.l	d2,obX(a1)
00019644 2343 000C                  		move.l	d3,obY(a1)
00019648 4E75                       		rts	
0001964A                            ; ===========================================================================
0001964A                            
0001964A                            loc_16800:
0001964A 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
00019650 4228 0024                  		clr.b	obRoutine(a0)
00019654 4238 F7C8                  		clr.b	(f_lockmulti).w
00019658 337C 0000 0010             		move.w	#0,obVelX(a1)
0001965E 337C 0200 0012             		move.w	#$200,obVelY(a1)
00019664 4E75                       		rts	
00019666                            
00019666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019666                            
00019666                            
00019666                            sub_1681C:
00019666 7000                       		moveq	#0,d0
00019668 343C 1000                  		move.w	#$1000,d2
0001966C 3028 0036                  		move.w	$36(a0),d0
00019670 9069 0008                  		sub.w	obX(a1),d0
00019674 6C00                       		bge.s	loc_16830
00019676 4440                       		neg.w	d0
00019678 4442                       		neg.w	d2
0001967A                            
0001967A                            loc_16830:
0001967A 7200                       		moveq	#0,d1
0001967C 363C 1000                  		move.w	#$1000,d3
00019680 3228 0038                  		move.w	$38(a0),d1
00019684 9269 000C                  		sub.w	obY(a1),d1
00019688 6C00                       		bge.s	loc_16844
0001968A 4441                       		neg.w	d1
0001968C 4443                       		neg.w	d3
0001968E                            
0001968E                            loc_16844:
0001968E B240                       		cmp.w	d0,d1
00019690 6500                       		bcs.s	loc_1687A
00019692 7200                       		moveq	#0,d1
00019694 3228 0038                  		move.w	$38(a0),d1
00019698 9269 000C                  		sub.w	obY(a1),d1
0001969C 4841                       		swap	d1
0001969E 83C3                       		divs.w	d3,d1
000196A0 7000                       		moveq	#0,d0
000196A2 3028 0036                  		move.w	$36(a0),d0
000196A6 9069 0008                  		sub.w	obX(a1),d0
000196AA 6700                       		beq.s	loc_16866
000196AC 4840                       		swap	d0
000196AE 81C1                       		divs.w	d1,d0
000196B0                            
000196B0                            loc_16866:
000196B0 3340 0010                  		move.w	d0,obVelX(a1)
000196B4 3343 0012                  		move.w	d3,obVelY(a1)
000196B8 4A41                       		tst.w	d1
000196BA 6A00                       		bpl.s	loc_16874
000196BC 4441                       		neg.w	d1
000196BE                            
000196BE                            loc_16874:
000196BE 3141 002E                  		move.w	d1,$2E(a0)
000196C2 4E75                       		rts	
000196C4                            ; ===========================================================================
000196C4                            
000196C4                            loc_1687A:
000196C4 7000                       		moveq	#0,d0
000196C6 3028 0036                  		move.w	$36(a0),d0
000196CA 9069 0008                  		sub.w	obX(a1),d0
000196CE 4840                       		swap	d0
000196D0 81C2                       		divs.w	d2,d0
000196D2 7200                       		moveq	#0,d1
000196D4 3228 0038                  		move.w	$38(a0),d1
000196D8 9269 000C                  		sub.w	obY(a1),d1
000196DC 6700                       		beq.s	loc_16898
000196DE 4841                       		swap	d1
000196E0 83C0                       		divs.w	d0,d1
000196E2                            
000196E2                            loc_16898:
000196E2 3341 0012                  		move.w	d1,obVelY(a1)
000196E6 3342 0010                  		move.w	d2,obVelX(a1)
000196EA 4A40                       		tst.w	d0
000196EC 6A00                       		bpl.s	loc_168A6
000196EE 4440                       		neg.w	d0
000196F0                            
000196F0                            loc_168A6:
000196F0 3140 002E                  		move.w	d0,$2E(a0)
000196F4 4E75                       		rts	
000196F6                            ; End of function sub_1681C
000196F6                            
000196F6                            ; ===========================================================================
000196F6 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
000196FC 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019702 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019706 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001970C 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
00019712 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
00019718 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001971E 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019724 0884 0298 0894             		dc.w $884, $298, $894
0001972A 0270 0894 0190             		dc.w $270, $894, $190
00019730 0004 0894 0690             @type03:	dc.w 4,	$894, $690
00019736 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
0001973C 1184 0498 1158             		dc.w $1184, $498, $1158
00019742 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019748 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001974E 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019754 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
0001975A 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019760 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019766 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001976C 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019772 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019778 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019778 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001977E                            
0001977E                            		include	"_incObj\78 Caterkiller.asm"
0001977E                            ; ---------------------------------------------------------------------------
0001977E                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001977E                            ; ---------------------------------------------------------------------------
0001977E                            
0001977E                            Caterkiller:
0001977E 7000                       		moveq	#0,d0
00019780 1028 0024                  		move.b	obRoutine(a0),d0
00019784 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019788 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001978C                            ; ===========================================================================
0001978C 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001978E 0000                       		dc.w Cat_Head-Cat_Index
00019790 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019792 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019794 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019796 0000                       		dc.w Cat_Delete-Cat_Index
00019798 0000                       		dc.w loc_16CC0-Cat_Index
0001979A                            
0001979A =0000003C                  cat_parent:	equ $3C		; address of parent object
0001979A                            ; ===========================================================================
0001979A                            
0001979A                            locret_16950:
0001979A 4E75                       		rts	
0001979C                            ; ===========================================================================
0001979C                            
0001979C                            Cat_Main:	; Routine 0
0001979C 117C 0007 0016             		move.b	#7,obHeight(a0)
000197A2 117C 0008 0017             		move.b	#8,obWidth(a0)
000197A8 4EB9 0000 F6AE             		jsr	(ObjectFall).l
000197AE 4EB9 0001 7C64             		jsr	(ObjFloorDist).l
000197B4 4A41                       		tst.w	d1
000197B6 6AE2                       		bpl.s	locret_16950
000197B8 D368 000C                  		add.w	d1,obY(a0)
000197BC 4268 0012                  		clr.w	obVelY(a0)
000197C0 5428 0024                  		addq.b	#2,obRoutine(a0)
000197C4 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
000197CC 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
000197D2 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
000197D8 6700                       		beq.s	@isscrapbrain
000197DA 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
000197E0                            
000197E0                            	@isscrapbrain:
000197E0 0228 0003 0001             		andi.b	#3,obRender(a0)
000197E6 0028 0004 0001             		ori.b	#4,obRender(a0)
000197EC 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
000197F2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000197F8 117C 0008 0014             		move.b	#8,obActWid(a0)
000197FE 117C 000B 0020             		move.b	#$B,obColType(a0)
00019804 3428 0008                  		move.w	obX(a0),d2
00019808 7A0C                       		moveq	#$C,d5
0001980A 0828 0000 0022             		btst	#0,obStatus(a0)
00019810 6700                       		beq.s	@noflip
00019812 4445                       		neg.w	d5
00019814                            
00019814                            	@noflip:
00019814 1C3C 0004                  		move.b	#4,d6
00019818 7600                       		moveq	#0,d3
0001981A 7804                       		moveq	#4,d4
0001981C 2448                       		movea.l	a0,a2
0001981E 7202                       		moveq	#2,d1
00019820                            
00019820                            Cat_Loop:
00019820 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
00019826 6600 0000                  			bne.w	Cat_ChkGone
0001982A 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001982E 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019832 5406                       		addq.b	#2,d6		; alternate between the two
00019834 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001983A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019840 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019846 137C 0008 0014             		move.b	#8,obActWid(a1)
0001984C 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019852 D445                       		add.w	d5,d2
00019854 3342 0008                  		move.w	d2,obX(a1)
00019858 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001985E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019864 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
0001986A 137C 0008 001A             		move.b	#8,obFrame(a1)
00019870 234A 003C                  		move.l	a2,cat_parent(a1)
00019874 1344 003C                  		move.b	d4,cat_parent(a1)
00019878 5804                       		addq.b	#4,d4
0001987A 2449                       		movea.l	a1,a2
0001987C                            
0001987C                            	@fail:
0001987C 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019880                            
00019880 117C 0007 002A             		move.b	#7,$2A(a0)
00019886 4228 003C                  		clr.b	cat_parent(a0)
0001988A                            
0001988A                            Cat_Head:	; Routine 2
0001988A 4A28 0022                  		tst.b	obStatus(a0)
0001988E 6B00 0000                  		bmi.w	loc_16C96
00019892 7000                       		moveq	#0,d0
00019894 1028 0025                  		move.b	ob2ndRout(a0),d0
00019898 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
0001989C 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
000198A0 1228 002B                  		move.b	$2B(a0),d1
000198A4 6A00                       		bpl.s	@display
000198A6 43F9 0000 0000             		lea	(Ani_Cat).l,a1
000198AC 1028 0026                  		move.b	obAngle(a0),d0
000198B0 0240 007F                  		andi.w	#$7F,d0
000198B4 5828 0026                  		addq.b	#4,obAngle(a0)
000198B8 1031 0000                  		move.b	(a1,d0.w),d0
000198BC 6A00                       		bpl.s	@animate
000198BE 08A8 0007 002B             		bclr	#7,$2B(a0)
000198C4 6000                       		bra.s	@display
000198C6                            
000198C6                            	@animate:
000198C6 0201 0010                  		andi.b	#$10,d1
000198CA D001                       		add.b	d1,d0
000198CC 1140 001A                  		move.b	d0,obFrame(a0)
000198D0                            
000198D0                            	@display:
000198EE 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
000198F4                            
000198F4                            	Cat_ChkGone:
000198F4 45F8 FC00                  		lea	(v_objstate).w,a2
000198F8 7000                       		moveq	#0,d0
000198FA 1028 0023                  		move.b	obRespawnNo(a0),d0
000198FE 6700                       		beq.s	@delete
00019900 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019906                            
00019906                            	@delete:
00019906 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
0001990C 4E75                       		rts	
0001990E                            ; ===========================================================================
0001990E                            
0001990E                            Cat_Delete:	; Routine $A
0001990E 4EF9 0000 F73A             		jmp	(DeleteObject).l
00019914                            ; ===========================================================================
00019914 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019916 0000                       		dc.w loc_16B02-Cat_Index2
00019918                            ; ===========================================================================
00019918                            
00019918                            @wait:
00019918 5328 002A                  		subq.b	#1,$2A(a0)
0001991C 6B00                       		bmi.s	@move
0001991E 4E75                       		rts	
00019920                            ; ===========================================================================
00019920                            
00019920                            @move:
00019920 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019924 117C 0010 002A             		move.b	#$10,$2A(a0)
0001992A 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019930 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019936 0868 0004 002B             		bchg	#4,$2B(a0)
0001993C 6600                       		bne.s	loc_16AFC
0001993E 4268 0010                  		clr.w	obVelX(a0)
00019942 4468 001C                  		neg.w	obAnim(a0)
00019946                            
00019946                            loc_16AFC:
00019946 08E8 0007 002B             		bset	#7,$2B(a0)
0001994C                            
0001994C                            loc_16B02:
0001994C 5328 002A                  		subq.b	#1,$2A(a0)
00019950 6B00                       		bmi.s	@loc_16B5E
00019952 4A68 0010                  			tst.w	obVelX(a0)
00019956 6700                       			beq.s	@notmoving
00019958 2428 0008                  			move.l	obX(a0),d2
0001995C 2602                       			move.l	d2,d3
0001995E 3028 0010                  		move.w	obVelX(a0),d0
00019962 0828 0000 0022             		btst	#0,obStatus(a0)
00019968 6700                       		beq.s	@noflip
0001996A 4440                       		neg.w	d0
0001996C                            
0001996C                            	@noflip:
0001996C 48C0                       		ext.l	d0
0001996E E180                       		asl.l	#8,d0
00019970 D480                       		add.l	d0,d2
00019972 2142 0008                  		move.l	d2,obX(a0)
00019976 4843                       			swap	d3
00019978 B668 0008                  			cmp.w	obX(a0),d3
0001997C 6700                       			beq.s	@notmoving
0001997E 4EB9 0001 7C64             			jsr	(ObjFloorDist).l
00019984 0C41 FFF8                  			cmpi.w	#-8,d1
00019988 6D00                       			blt.s	@loc_16B70
0001998A 0C41 000C                  			cmpi.w	#$C,d1
0001998E 6C00                       			bge.s	@loc_16B70
00019990 D368 000C                  			add.w	d1,obY(a0)
00019994 7000                       		moveq	#0,d0
00019996 1028 003C                  		move.b	cat_parent(a0),d0
0001999A 5228 003C                  		addq.b	#1,cat_parent(a0)
0001999E 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
000199A4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000199A8                            
000199A8                            	@notmoving:
000199A8 4E75                       		rts	
000199AA                            ; ===========================================================================
000199AA                            
000199AA                            @loc_16B5E:
000199AA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000199AE 117C 0007 002A             		move.b	#7,$2A(a0)
000199B4 4268 0010                  			clr.w	obVelX(a0)
000199B8 4268 001C                  			clr.w	obAnim(a0)
000199BC 4E75                       		rts	
000199BE                            ; ===========================================================================
000199BE                            
000199BE                            @loc_16B70:
000199BE 7000                       			moveq	#0,d0
000199C0 1028 003C                  			move.b	cat_parent(a0),d0
000199C4 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
000199CA 4468 000A                  			neg.w	obX+2(a0)
000199CE 6700                       			beq.s	@loc_1730A
000199D0 0828 0000 0022             			btst	#0,obStatus(a0)
000199D6 6700                       			beq.s	@loc_1730A
000199D8 5368 0008                  			subq.w	#1,obX(a0)
000199DC 5228 003C                  			addq.b	#1,cat_parent(a0)
000199E0 7000                       			moveq	#0,d0
000199E2 1028 003C                  			move.b	cat_parent(a0),d0
000199E6 4230 002C                  			clr.b	$2C(a0,d0)
000199EA                            	@loc_1730A:
000199EA 0868 0000 0022             			bchg	#0,obStatus(a0)
000199F0 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
000199F6 5228 003C                  		addq.b	#1,cat_parent(a0)
000199FA 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019A00 4E75                       		rts	
00019A02                            ; ===========================================================================
00019A02                            
00019A02                            Cat_BodySeg2:	; Routine 6
00019A02 2268 003C                  		movea.l	cat_parent(a0),a1
00019A06 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019A0C 6A00                       		bpl.s	Cat_BodySeg1
00019A0E 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019A14 1028 0026                  		move.b	obAngle(a0),d0
00019A18 0240 007F                  		andi.w	#$7F,d0
00019A1C 5828 0026                  		addq.b	#4,obAngle(a0)
00019A20 4A31 0004                  		tst.b	4(a1,d0.w)
00019A24 6A00                       		bpl.s	Cat_AniBody
00019A26 5828 0026                  		addq.b	#4,obAngle(a0)
00019A2A                            
00019A2A                            Cat_AniBody:
00019A2A 1031 0000                  		move.b	(a1,d0.w),d0
00019A2E 5000                       		addq.b	#8,d0
00019A30 1140 001A                  		move.b	d0,obFrame(a0)
00019A34                            
00019A34                            Cat_BodySeg1:	; Routine 4, 8
00019A34 2268 003C                  		movea.l	cat_parent(a0),a1
00019A38 4A28 0022                  		tst.b	obStatus(a0)
00019A3C 6B00 0000                  		bmi.w	loc_16C90
00019A40 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019A46 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019A4C 6700 0000                  		beq.w	loc_16C64
00019A50 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019A56 3029 0010                  		move.w	obVelX(a1),d0
00019A5A D068 001C                  			add.w	obAnim(a0),d0
00019A5E 3140 0010                  		move.w	d0,obVelX(a0)
00019A62 2428 0008                  		move.l	obX(a0),d2
00019A66 2602                       		move.l	d2,d3
00019A68 3028 0010                  		move.w	obVelX(a0),d0
00019A6C 0828 0000 0022             		btst	#0,obStatus(a0)
00019A72 6700                       		beq.s	loc_16C0C
00019A74 4440                       		neg.w	d0
00019A76                            
00019A76                            loc_16C0C:
00019A76 48C0                       		ext.l	d0
00019A78 E180                       		asl.l	#8,d0
00019A7A D480                       		add.l	d0,d2
00019A7C 2142 0008                  		move.l	d2,obX(a0)
00019A80 4843                       		swap	d3
00019A82 B668 0008                  		cmp.w	obX(a0),d3
00019A86 6700                       		beq.s	loc_16C64
00019A88 7000                       		moveq	#0,d0
00019A8A 1028 003C                  		move.b	cat_parent(a0),d0
00019A8E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019A92 0C01 0080                  		cmpi.b	#$80,d1
00019A96 6600                       		bne.s	loc_16C50
00019A98 1181 002C                  			move.b	d1,$2C(a0,d0)
00019A9C 4468 000A                  			neg.w	obX+2(a0)
00019AA0 6700                       			beq.s	locj_173E4
00019AA2 0828 0000 0022             			btst	#0,obStatus(a0)
00019AA8 6700                       			beq.s	locj_173E4
00019AAA 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019AB0 6600                       			bne.s	locj_173E4
00019AB2 5368 0008                  			subq.w	#1,obX(a0)
00019AB6 5228 003C                  			addq.b	#1,cat_parent(a0)
00019ABA 7000                       			moveq	#0,d0
00019ABC 1028 003C                  			move.b	cat_parent(a0),d0
00019AC0 4230 002C                  			clr.b	$2C(a0,d0)
00019AC4                            	locj_173E4:
00019AC4 0868 0000 0022             		bchg	#0,obStatus(a0)
00019ACA 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019AD0 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AD4 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019ADA 6000                       		bra.s	loc_16C64
00019ADC                            ; ===========================================================================
00019ADC                            
00019ADC                            loc_16C50:
00019ADC 4881                       		ext.w	d1
00019ADE D368 000C                  		add.w	d1,obY(a0)
00019AE2 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AE6 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019AEC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019AF0                            
00019AF0                            loc_16C64:
00019AF0 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019AF6 6700                       		beq.s	loc_16C90
00019AF8 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019AFC 6700                       		beq.s	loc_16C7C
00019AFE 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019B04 6600                       		bne.s	loc_16C82
00019B06                            
00019B06                            loc_16C7C:
00019B06 4229 0020                  		clr.b    $20(a1)
00019B0A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019B10                            
00019B10                            loc_16C82:
00019B10 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00019B16                            
00019B16                            ; ===========================================================================
00019B16 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019B1E                            ; ===========================================================================
00019B1E                            
00019B1E                            loc_16C90:
00019B1E 08E9 0007 0022             		bset	#7,obStatus(a1)
00019B24                            
00019B24                            loc_16C96:
00019B24 7000                       		moveq	#0,d0
00019B26 1028 0024                  		move.b	obRoutine(a0),d0
00019B2A 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019B2E 0828 0000 0022             		btst	#0,obStatus(a0)
00019B34 6700                       		beq.s	loc_16CAA
00019B36 4440                       		neg.w	d0
00019B38                            
00019B38                            loc_16CAA:
00019B38 3140 0010                  		move.w	d0,obVelX(a0)
00019B3C 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019B42 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019B48 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019B4E                            
00019B4E                            loc_16CC0:	; Routine $C
00019B4E 4EB9 0000 F6AE             		jsr	(ObjectFall).l
00019B54 4A68 0012                  		tst.w	obVelY(a0)
00019B58 6B00                       		bmi.s	loc_16CE0
00019B5A 4EB9 0001 7C64             		jsr	(ObjFloorDist).l
00019B60 4A41                       		tst.w	d1
00019B62 6A00                       		bpl.s	loc_16CE0
00019B64 D368 000C                  		add.w	d1,obY(a0)
00019B68 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019B6E                            
00019B6E                            loc_16CE0:
00019B6E 4A28 0001                  		tst.b	obRender(a0)
00019B72 6A00 FD80                  		bpl.w	Cat_ChkGone
00019B76 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00019B76 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00019B7C                            		include	"_anim\Caterkiller.asm"
00019B7C                            ; ---------------------------------------------------------------------------
00019B7C                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019B7C                            ; ---------------------------------------------------------------------------
00019B7C 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019B8C 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019B9C 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019BAC 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019BBC 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019BCC 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019BDC 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019BEC 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019BFC                            		even
00019BFC                            		even
00019BFC                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019BFC                            ; ---------------------------------------------------------------------------
00019BFC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019BFC                            ; ---------------------------------------------------------------------------
00019BFC                            Map_Cat_internal:
00019BFC 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019BFE 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019C00 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019C02 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019C04 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019C06 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019C08 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019C0A 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019C0C 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019C0E 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019C10 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019C12 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019C14 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019C16 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019C18 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019C1A 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019C1C 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019C1E 0000                       		dc.w byte_16E04-Map_Cat_internal
00019C20 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019C22 0000                       		dc.w byte_16E10-Map_Cat_internal
00019C24 0000                       		dc.w byte_16E16-Map_Cat_internal
00019C26 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019C28 0000                       		dc.w byte_16E22-Map_Cat_internal
00019C2A 0000                       		dc.w byte_16E28-Map_Cat_internal
00019C2C 01                         byte_16D9E:	dc.b 1
00019C2D F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019C32 01                         byte_16DA4:	dc.b 1
00019C33 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019C38 01                         byte_16DAA:	dc.b 1
00019C39 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019C3E 01                         byte_16DB0:	dc.b 1
00019C3F EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019C44 01                         byte_16DB6:	dc.b 1
00019C45 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019C4A 01                         byte_16DBC:	dc.b 1
00019C4B ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019C50 01                         byte_16DC2:	dc.b 1
00019C51 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019C56 01                         byte_16DC8:	dc.b 1
00019C57 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019C5C 01                         byte_16DCE:	dc.b 1
00019C5D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019C62 01                         byte_16DD4:	dc.b 1
00019C63 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019C68 01                         byte_16DDA:	dc.b 1
00019C69 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019C6E 01                         byte_16DE0:	dc.b 1
00019C6F F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019C74 01                         byte_16DE6:	dc.b 1
00019C75 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019C7A 01                         byte_16DEC:	dc.b 1
00019C7B F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019C80 01                         byte_16DF2:	dc.b 1
00019C81 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019C86 01                         byte_16DF8:	dc.b 1
00019C87 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019C8C 01                         byte_16DFE:	dc.b 1
00019C8D F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019C92 01                         byte_16E04:	dc.b 1
00019C93 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019C98 01                         byte_16E0A:	dc.b 1
00019C99 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019C9E 01                         byte_16E10:	dc.b 1
00019C9F EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019CA4 01                         byte_16E16:	dc.b 1
00019CA5 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019CAA 01                         byte_16E1C:	dc.b 1
00019CAB ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019CB0 01                         byte_16E22:	dc.b 1
00019CB1 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019CB6 01                         byte_16E28:	dc.b 1
00019CB7 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019CBC                            		even
00019CBC                            		even
00019CBC                            
00019CBC                            		include	"_incObj\79 Lamppost.asm"
00019CBC                            ; ---------------------------------------------------------------------------
00019CBC                            ; Object 79 - lamppost
00019CBC                            ; ---------------------------------------------------------------------------
00019CBC                            
00019CBC                            Lamppost:
00019CBC 7000                       		moveq	#0,d0
00019CBE 1028 0024                  		move.b	obRoutine(a0),d0
00019CC2 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019CC6 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019CCA 4EF9 0001 1670             		jmp	(RememberState).l
00019CD0                            ; ===========================================================================
00019CD0 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019CD2 0000                       		dc.w Lamp_Blue-Lamp_Index
00019CD4 0000                       		dc.w Lamp_Finish-Lamp_Index
00019CD6 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019CD8                            
00019CD8 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019CD8 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019CD8 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019CD8                            ; ===========================================================================
00019CD8                            
00019CD8                            Lamp_Main:	; Routine 0
00019CD8 5428 0024                  		addq.b	#2,obRoutine(a0)
00019CDC 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019CE4 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019CEA 117C 0004 0001             		move.b	#4,obRender(a0)
00019CF0 117C 0008 0014             		move.b	#8,obActWid(a0)
00019CF6 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019CFC 45F8 FC00                  		lea	(v_objstate).w,a2
00019D00 7000                       		moveq	#0,d0
00019D02 1028 0023                  		move.b	obRespawnNo(a0),d0
00019D06 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019D0C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019D12 6600                       		bne.s	@red
00019D14 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019D18 0201 007F                  		andi.b	#$7F,d1
00019D1C 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019D20 0202 007F                  		andi.b	#$7F,d2
00019D24 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019D26 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019D28                            
00019D28                            @red:
00019D28 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019D2E 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019D34 117C 0003 001A             		move.b	#3,obFrame(a0)
00019D3A 4E75                       		rts	
00019D3C                            
00019D3C                            ; ===========================================================================
00019D3C                            
00019D3C                            Lamp_Blue:	; Routine 2
00019D3C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019D40 6600 0000                  		bne.w	@donothing	; if yes, branch
00019D44 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019D48 6B00 0000                  		bmi.w	@donothing
00019D4C 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019D50 0201 007F                  		andi.b	#$7F,d1
00019D54 1428 0028                  		move.b	obSubtype(a0),d2
00019D58 0202 007F                  		andi.b	#$7F,d2
00019D5C B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019D5E 6500                       		bcs.s	@chkhit		; if yes, branch
00019D60 45F8 FC00                  		lea	(v_objstate).w,a2
00019D64 7000                       		moveq	#0,d0
00019D66 1028 0023                  		move.b	obRespawnNo(a0),d0
00019D6A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019D70 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019D76 117C 0003 001A             		move.b	#3,obFrame(a0)
00019D7C 6000 0000                  		bra.w	@donothing
00019D80                            ; ===========================================================================
00019D80                            
00019D80                            @chkhit:
00019D80 3038 D008                  		move.w	(v_player+obX).w,d0
00019D84 9068 0008                  		sub.w	obX(a0),d0
00019D88 5040                       		addq.w	#8,d0
00019D8A 0C40 0010                  		cmpi.w	#$10,d0
00019D8E 6400 0000                  		bcc.w	@donothing
00019D92 3038 D00C                  		move.w	(v_player+obY).w,d0
00019D96 9068 000C                  		sub.w	obY(a0),d0
00019D9A 0640 0040                  		addi.w	#$40,d0
00019D9E 0C40 0068                  		cmpi.w	#$68,d0
00019DA2 6400                       		bcc.s	@donothing
00019DA4                            
00019DAE 5428 0024                  		addq.b	#2,obRoutine(a0)
00019DB2 4EB9 0000 FB86             		jsr	(FindFreeObj).l
00019DB8 6600                       		bne.s	@fail
00019DBA 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019DBE 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019DC4 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019DCA 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019DD0 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019DD6 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019DDE 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019DE4 137C 0004 0001             		move.b	#4,obRender(a1)
00019DEA 137C 0008 0014             		move.b	#8,obActWid(a1)
00019DF0 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019DF6 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019DFC 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019E02                            
00019E02                            	@fail:
00019E02 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019E08 6100 0000                  		bsr.w	Lamp_StoreInfo
00019E0C 45F8 FC00                  		lea	(v_objstate).w,a2
00019E10 7000                       		moveq	#0,d0
00019E12 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E16 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E1C                            
00019E1C                            	@donothing:
00019E1C 4E75                       		rts	
00019E1E                            ; ===========================================================================
00019E1E                            
00019E1E                            Lamp_Finish:	; Routine 4	
00019E1E 4E75                       		rts	
00019E20                            ; ===========================================================================
00019E20                            
00019E20                            Lamp_Twirl:	; Routine 6
00019E20 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019E24 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019E26 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019E2C                            
00019E2C                            	@continue:
00019E2C 1028 0026                  		move.b	obAngle(a0),d0
00019E30 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019E36 0400 0040                  		subi.b	#$40,d0
00019E3A 4EB9 0000 37AE             		jsr	(CalcSine).l
00019E40 C3FC 0C00                  		muls.w	#$C00,d1
00019E44 4841                       		swap	d1
00019E46 D268 0030                  		add.w	lamp_origX(a0),d1
00019E4A 3141 0008                  		move.w	d1,obX(a0)
00019E4E C1FC 0C00                  		muls.w	#$C00,d0
00019E52 4840                       		swap	d0
00019E54 D068 0032                  		add.w	lamp_origY(a0),d0
00019E58 3140 000C                  		move.w	d0,obY(a0)
00019E5C 4E75                       		rts	
00019E5E                            ; ===========================================================================
00019E5E                            ; ---------------------------------------------------------------------------
00019E5E                            ; Subroutine to	store information when you hit a lamppost
00019E5E                            ; ---------------------------------------------------------------------------
00019E5E                            
00019E5E                            Lamp_StoreInfo:
00019E5E 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00019E64 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00019E6A 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
00019E70 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
00019E76 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
00019E7C 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
00019E82 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
00019E88 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
00019E8E 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
00019E94 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
00019E9A 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
00019EA0 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
00019EA6 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
00019EAC 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
00019EB2 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
00019EB8 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
00019EBE 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
00019EC4 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
00019ECA 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
00019ED0 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
00019ED6 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
00019EDC 4E75                       		rts	
00019EDE                            
00019EDE                            ; ---------------------------------------------------------------------------
00019EDE                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019EDE                            ; ---------------------------------------------------------------------------
00019EDE                            
00019EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019EDE                            
00019EDE                            
00019EDE                            Lamp_LoadInfo:
00019EDE 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
00019EE4 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
00019EEA 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
00019EF0 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
00019EF6 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
00019EFC 4278 FE20                  		clr.w	(v_rings).w
00019F00 4238 FE1B                  		clr.b	(v_lifecount).w
00019F04 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
00019F0A 11FC 003B FE25             		move.b	#59,(v_timecent).w
00019F10 5338 FE24                  		subq.b	#1,(v_timesec).w
00019F14 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
00019F1A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019F20 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
00019F26 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
00019F2C 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
00019F32 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
00019F38 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
00019F3E 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
00019F44 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
00019F4A 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
00019F50 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
00019F56 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
00019F5C 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
00019F62 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
00019F68 6600                       		bne.s	@notlabyrinth	; if not, branch
00019F6A                            
00019F6A 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
00019F70 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019F76 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
00019F7C                            
00019F7C                            	@notlabyrinth:
00019F7C 4A38 FE30                  		tst.b	(v_lastlamp).w
00019F80 6A00                       		bpl.s	locret_170F6
00019F82 3038 FE32                  		move.w	($FFFFFE32).w,d0
00019F86 0440 00A0                  		subi.w	#$A0,d0
00019F8A 31C0 F728                  		move.w	d0,(v_limitleft2).w
00019F8E                            
00019F8E                            locret_170F6:
00019F8E 4E75                       		rts	
00019F8E 4E75                       		rts	
00019F90                            Map_Lamp:	include	"_maps\Lamppost.asm"
00019F90                            ; --------------------------------------------------------------------------------
00019F90                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019F90                            ; --------------------------------------------------------------------------------
00019F90                            
00019F90                            SME_JfaKr:	
00019F90 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
00019F94 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
00019F98 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
00019F9A 0A                         SME_JfaKr_A:	dc.b $A	
00019F9B E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
00019FA0 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
00019FA5 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
00019FAA D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
00019FAF F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
00019FB4 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
00019FB9 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
00019FBE 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
00019FC3 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
00019FC8 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
00019FCD 08                         SME_JfaKr_3D:	dc.b 8	
00019FCE E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
00019FD3 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
00019FD8 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
00019FDD F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
00019FE2 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
00019FE7 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
00019FEC 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
00019FF1 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
00019FF6 02                         SME_JfaKr_66:	dc.b 2	
00019FF7 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
00019FFC F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A001 0A                         SME_JfaKr_71:	dc.b $A	
0001A002 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A007 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A00C F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A011 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A016 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A01B 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A020 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A025 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A02A D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A02F D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A034 0A                         SME_JfaKr_A4:	dc.b $A	
0001A035 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A03A E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A03F F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A044 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A049 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A04E 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A053 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A058 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A05D D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A062 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A068 00                         		even
0001A068 00                         		even
0001A068                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A068                            ; ---------------------------------------------------------------------------
0001A068                            ; Object 7D - hidden points at the end of a level
0001A068                            ; ---------------------------------------------------------------------------
0001A068                            
0001A068                            HiddenBonus:
0001A068 7000                       		moveq	#0,d0
0001A06A 1028 0024                  		move.b	obRoutine(a0),d0
0001A06E 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A072 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A076                            ; ===========================================================================
0001A076 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A078 0000                       		dc.w Bonus_Display-Bonus_Index
0001A07A                            
0001A07A =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A07A                            ; ===========================================================================
0001A07A                            
0001A07A                            Bonus_Main:	; Routine 0
0001A07A 7410                       		moveq	#$10,d2
0001A07C 3602                       		move.w	d2,d3
0001A07E D643                       		add.w	d3,d3
0001A080 43F8 D000                  		lea	(v_player).w,a1
0001A084 3029 0008                  		move.w	obX(a1),d0
0001A088 9068 0008                  		sub.w	obX(a0),d0
0001A08C D042                       		add.w	d2,d0
0001A08E B043                       		cmp.w	d3,d0
0001A090 6400                       		bcc.s	bonu_chkdel
0001A092 3229 000C                  		move.w	obY(a1),d1
0001A096 9268 000C                  		sub.w	obY(a0),d1
0001A09A D242                       		add.w	d2,d1
0001A09C B243                       		cmp.w	d3,d1
0001A09E 6400                       		bcc.s	bonu_chkdel
0001A0A0 4A78 FE08                  		tst.w	(v_debuguse).w
0001A0A4 6600                       		bne.s	bonu_chkdel
0001A0A6 4A38 F7CD                  		tst.b	(f_bigring).w
0001A0AA 6600                       		bne.s	bonu_chkdel
0001A0AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A0B0 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A0B8 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A0BE 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A0C4 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A0CA 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A0D0 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A0D6 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A0E6 7000                       		moveq	#0,d0
0001A0E8 1028 0028                  		move.b	obSubtype(a0),d0
0001A0EC D040                       		add.w	d0,d0
0001A0EE 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A0F2 4EB9 0000 0000             		jsr	(AddPoints).l
0001A0F8                            
0001A0F8                            bonu_chkdel:
0001A114 4E75                       		rts	
0001A116                            
0001A116                            	@delete:
0001A116 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001A11C                            
0001A11C                            ; ===========================================================================
0001A11C 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A11E 03E8                       		dc.w 1000
0001A120 0064                       		dc.w 100
0001A122 000A                       		dc.w 10
0001A124                            ; ===========================================================================
0001A124                            
0001A124                            Bonus_Display:	; Routine 2
0001A124 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A128 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A146 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001A14C                            
0001A14C                            Bonus_Display_Delete:	
0001A14C 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001A14C 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001A152                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A152                            ; ---------------------------------------------------------------------------
0001A152                            ; Sprite mappings - hidden points at the end of	a level
0001A152                            ; ---------------------------------------------------------------------------
0001A152                            Map_Bonus_internal:
0001A152 0000                       		dc.w @blank-Map_Bonus_internal
0001A154 0000                       		dc.w @10000-Map_Bonus_internal
0001A156 0000                       		dc.w @1000-Map_Bonus_internal
0001A158 0000                       		dc.w @100-Map_Bonus_internal
0001A15A 00                         @blank:		dc.b 0
0001A15B 01                         @10000:		dc.b 1
0001A15C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A161 01                         @1000:		dc.b 1
0001A162 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A167 01                         @100:		dc.b 1
0001A168 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A16E 00                         		even
0001A16E 00                         		even
0001A16E                            
0001A16E                            		include	"_incObj\8A Credits.asm"
0001A16E                            ; ---------------------------------------------------------------------------
0001A16E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A16E                            ; ---------------------------------------------------------------------------
0001A16E                            
0001A16E                            CreditsText:
0001A16E 7000                       		moveq	#0,d0
0001A170 1028 0024                  		move.b	obRoutine(a0),d0
0001A174 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A178 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A17C                            ; ===========================================================================
0001A17C 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A17E 0000                       		dc.w Cred_Display-Cred_Index
0001A180                            ; ===========================================================================
0001A180                            
0001A180                            Cred_Main:	; Routine 0
0001A180 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A184 317C 0120 0008             		move.w	#$120,obX(a0)
0001A18A 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A190 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A198 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A19E 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A1A2 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A1A6 117C 0000 0001             		move.b	#0,obRender(a0)
0001A1AC 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A1B2                            
0001A1B2 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A1B8 6600                       		bne.s	Cred_Display	; if not, branch
0001A1BA                            
0001A1BA 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A1C0 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A1C6 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A1CA 6700                       		beq.s	Cred_Display	; if not, branch
0001A1CC 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A1D2 6600                       		bne.s	Cred_Display	; if not, branch
0001A1D4 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A1DA 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A1E0 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001A1E6                            ; ===========================================================================
0001A1E6                            
0001A1E6                            Cred_Display:	; Routine 2
0001A1E6 4EF9 0000 F6FA             		jmp	DisplaySprite
0001A1E6 4EF9 0000 F6FA             		jmp	DisplaySprite
0001A1EC                            Map_Cred:	include	"_maps\Credits.asm"
0001A1EC                            ; ---------------------------------------------------------------------------
0001A1EC                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A1EC                            ; ---------------------------------------------------------------------------
0001A1EC                            Map_Cred_internal:
0001A1EC 0000                       		dc.w @staff-Map_Cred_internal
0001A1EE 0000                       		dc.w @gameplan-Map_Cred_internal
0001A1F0 0000                       		dc.w @program-Map_Cred_internal
0001A1F2 0000                       		dc.w @character-Map_Cred_internal
0001A1F4 0000                       		dc.w @design-Map_Cred_internal
0001A1F6 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A1F8 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A1FA 0000                       		dc.w @thanks-Map_Cred_internal
0001A1FC 0000                       		dc.w @presentedby-Map_Cred_internal
0001A1FE 0000                       		dc.w @tryagain-Map_Cred_internal
0001A200 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A202 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A203 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A208 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A20D F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A212 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A217 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A21C F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A221 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A226 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A22B F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A230 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A235 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A23A F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A23F F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A244 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A249 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A24A 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A24F 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A254 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A259 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A25E 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A263 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A268 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A26D 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A272 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A277                            
0001A277 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A27C B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A281 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A286 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A28B B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A290 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A291 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A296 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A29B 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A2A0 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A2A5 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A2AA 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A2AF 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A2B4                            
0001A2B4 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A2B9 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A2BE B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A2C3 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A2C8 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A2CD B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A2D2 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A2D7 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A2DC                            
0001A2DC D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A2E1 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A2E6                            
0001A2E6 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A2EB D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A2F0 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A2F5 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A2FA D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A2FF D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A304                            
0001A304 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A309 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A30E F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A313 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A314 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A319 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A31E 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A323                            
0001A323 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A328 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A32D B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A332 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A337 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A33C 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A33D 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A342 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A347 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A34C 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A351 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A356 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A35B                            
0001A35B B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A360 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A365 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A36A B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A36F B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A374 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A375 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A37A 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A37F 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A384 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A389 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A38E 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A393 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A398 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A39D 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A3A2 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A3A7                            
0001A3A7 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A3AC B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A3B1 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A3B6 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A3BB B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A3C0 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A3C5 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A3CA B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A3CF                            
0001A3CF D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A3D4 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A3D9 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A3DE D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A3E3 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A3E8 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A3ED D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A3F2 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A3F7 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A3FC D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A401 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A402 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A407 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A40C D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A411 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A416 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A41B D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A420 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A425 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A42A D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A42F D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A434 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A439 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A43E 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A443 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A448 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A44D 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A452 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A457 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A45C 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A461 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A466 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A46B 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A470 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A475 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A476 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A47B 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A480 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A485 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A48A 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A48F 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A494 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A499 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A49E                            
0001A49E B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A4A3 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A4A8 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A4AD B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A4B2 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A4B7 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A4BC                            
0001A4BC D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A4C1 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A4C6 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A4CB 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A4CC 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A4D1 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A4D6 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A4DB 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A4E0 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A4E5 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A4EA 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A4EF 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A4F4 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A4F9                            
0001A4F9 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A4FE B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A503                            
0001A503 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A508 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A50D D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A512 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A517 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A51C 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A51D 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A522 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A527 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A52C 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A531 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A536 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A53B 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A540 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A545 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A546 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A54B E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A550 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A555 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A55A E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A55F E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A564                            
0001A564 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A569 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A56E 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A573 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A578 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A57D 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A582 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A587 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A58C                            		even
0001A58C                            		even
0001A58C                            
0001A58C                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A58C                            ; ---------------------------------------------------------------------------
0001A58C                            ; Object 3D - Eggman (GHZ)
0001A58C                            ; ---------------------------------------------------------------------------
0001A58C                            
0001A58C                            BossGreenHill:
0001A58C 7000                       		moveq	#0,d0
0001A58E 1028 0024                  		move.b	obRoutine(a0),d0
0001A592 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A596 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A59A                            ; ===========================================================================
0001A59A 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A59C 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A59E 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A5A0 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A5A2                            
0001A5A2 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A5A4 0401                       		dc.b 4,	1
0001A5A6 0607                       		dc.b 6,	7
0001A5A8                            ; ===========================================================================
0001A5A8                            
0001A5A8                            BGHZ_Main:	; Routine 0
0001A5A8 45F9 0001 A5A2             		lea	(BGHZ_ObjData).l,a2
0001A5AE 2248                       		movea.l	a0,a1
0001A5B0 7202                       		moveq	#2,d1
0001A5B2 6000                       		bra.s	BGHZ_LoadBoss
0001A5B4                            ; ===========================================================================
0001A5B4                            
0001A5B4                            BGHZ_Loop:
0001A5B4 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001A5BA 6600                       		bne.s	loc_17772
0001A5BC                            
0001A5BC                            BGHZ_LoadBoss:
0001A5BC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A5C0 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A5C4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A5CA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A5D0 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A5D8 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A5DE 137C 0004 0001             		move.b	#4,obRender(a1)
0001A5E4 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A5EA 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A5F0 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A5F4 2348 0034                  		move.l	a0,$34(a1)
0001A5F8 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A5FC                            
0001A5FC                            loc_17772:
0001A5FC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A602 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A608 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A60E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A614                            
0001A614                            
0001A614                            BGHZ_ShipMain:	; Routine 2
0001A614 7000                       		moveq	#0,d0
0001A616 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A61A 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A61E 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A622 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A628 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001A62E 1028 0022                  		move.b	obStatus(a0),d0
0001A632 0200 0003                  		andi.b	#3,d0
0001A636 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A63C 8128 0001                  		or.b	d0,obRender(a0)
0001A640 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001A646                            ; ===========================================================================
0001A646 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A648 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A64A 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A64C 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A64E 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A650 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A652 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A654                            ; ===========================================================================
0001A654                            
0001A654                            BGHZ_ShipStart:
0001A654 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A65A 6100 0000                  		bsr.w	BossMove
0001A65E 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A664 6600                       		bne.s	loc_177E6
0001A666 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A66C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A670                            
0001A670                            loc_177E6:
0001A670 1028 003F                  		move.b	$3F(a0),d0
0001A674 4EB9 0000 37AE             		jsr	(CalcSine).l
0001A67A EC40                       		asr.w	#6,d0
0001A67C D068 0038                  		add.w	$38(a0),d0
0001A680 3140 000C                  		move.w	d0,obY(a0)
0001A684 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A68A 5428 003F                  		addq.b	#2,$3F(a0)
0001A68E 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A694 6400                       		bcc.s	locret_1784A
0001A696 4A28 0022                  		tst.b	obStatus(a0)
0001A69A 6B00                       		bmi.s	loc_1784C
0001A69C 4A28 0020                  		tst.b	obColType(a0)
0001A6A0 6600                       		bne.s	locret_1784A
0001A6A2 4A28 003E                  		tst.b	$3E(a0)
0001A6A6 6600                       		bne.s	BGHZ_ShipFlash
0001A6A8 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A6B8                            
0001A6B8                            BGHZ_ShipFlash:
0001A6B8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A6BC 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A6BE 4A51                       		tst.w	(a1)
0001A6C0 6600                       		bne.s	loc_1783C
0001A6C2 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A6C6                            
0001A6C6                            loc_1783C:
0001A6C6 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A6C8 5328 003E                  		subq.b	#1,$3E(a0)
0001A6CC 6600                       		bne.s	locret_1784A
0001A6CE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A6D4                            
0001A6D4                            locret_1784A:
0001A6D4 4E75                       		rts	
0001A6D6                            ; ===========================================================================
0001A6D6                            
0001A6D6                            loc_1784C:
0001A6D6 7064                       		moveq	#100,d0
0001A6D8 6100 0000                  		bsr.w	AddPoints
0001A6DC 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A6E2 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A6E8 4E75                       		rts	
0001A6E8 4E75                       		rts	
0001A6EA                            
0001A6EA                            ; ---------------------------------------------------------------------------
0001A6EA                            ; Defeated boss	subroutine
0001A6EA                            ; ---------------------------------------------------------------------------
0001A6EA                            
0001A6EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A6EA                            
0001A6EA                            
0001A6EA                            BossDefeated:
0001A6EA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A6EE 0200 0007                  		andi.b	#7,d0
0001A6F2 6600                       		bne.s	locret_178A2
0001A6F4 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001A6FA 6600                       		bne.s	locret_178A2
0001A6FC 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A700 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A706 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A70C 4EB9 0000 3788             		jsr	(RandomNumber).l
0001A712 3200                       		move.w	d0,d1
0001A714 7200                       		moveq	#0,d1
0001A716 1200                       		move.b	d0,d1
0001A718 E409                       		lsr.b	#2,d1
0001A71A 0441 0020                  		subi.w	#$20,d1
0001A71E D369 0008                  		add.w	d1,obX(a1)
0001A722 E048                       		lsr.w	#8,d0
0001A724 E608                       		lsr.b	#3,d0
0001A726 D169 000C                  		add.w	d0,obY(a1)
0001A72A                            
0001A72A                            locret_178A2:
0001A72A 4E75                       		rts	
0001A72C                            ; End of function BossDefeated
0001A72C                            
0001A72C                            ; ---------------------------------------------------------------------------
0001A72C                            ; Subroutine to	move a boss
0001A72C                            ; ---------------------------------------------------------------------------
0001A72C                            
0001A72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A72C                            
0001A72C                            
0001A72C                            BossMove:
0001A72C 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A732 E188                       		lsl.l	#8,d0
0001A734 D1A8 0030                  		add.l	d0,$30(a0)
0001A738 E18A                       		lsl.l	#8,d2
0001A73A D5A8 0038                  		add.l	d2,$38(a0)
0001A73E 4E75                       		rts
0001A740                            ; End of function BossMove
0001A740                            
0001A740                            ; ===========================================================================
0001A740                            
0001A740                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A740                            
0001A740                            BGHZ_MakeBall:
0001A740 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A746 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A74C 6100 FFDE                  		bsr.w	BossMove
0001A750 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A756 6600                       		bne.s	loc_17916
0001A758 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A75E 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A764 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A768 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001A76E 6600                       		bne.s	loc_17910
0001A770 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A774 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A77A 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A780 2348 0034                  		move.l	a0,$34(a1)
0001A784                            
0001A784                            loc_17910:
0001A784 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A78A                            
0001A78A                            loc_17916:
0001A78A 6000 FEE4                  		bra.w	loc_177E6
0001A78E                            ; ===========================================================================
0001A78E                            
0001A78E                            BGHZ_ShipMove:
0001A78E 5368 003C                  		subq.w	#1,$3C(a0)
0001A792 6A00                       		bpl.s	BGHZ_Reverse
0001A794 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A798 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A79E 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A7A4 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A7AA 6600                       		bne.s	BGHZ_Reverse
0001A7AC 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A7B2 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A7B8                            
0001A7B8                            BGHZ_Reverse:
0001A7B8 0828 0000 0022             		btst	#0,obStatus(a0)
0001A7BE 6600                       		bne.s	loc_17950
0001A7C0 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A7C4                            
0001A7C4                            loc_17950:
0001A7C4 6000 FEAA                  		bra.w	loc_177E6
0001A7C8                            ; ===========================================================================
0001A7C8                            
0001A7C8                            loc_17954:
0001A7C8 5368 003C                  		subq.w	#1,$3C(a0)
0001A7CC 6B00                       		bmi.s	loc_17960
0001A7CE 6100 FF5C                  		bsr.w	BossMove
0001A7D2 6000                       		bra.s	loc_17976
0001A7D4                            ; ===========================================================================
0001A7D4                            
0001A7D4                            loc_17960:
0001A7D4 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A7DA 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A7E0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A7E4 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A7EA                            
0001A7EA                            loc_17976:
0001A7EA 6000 FE84                  		bra.w	loc_177E6
0001A7EE                            ; ===========================================================================
0001A7EE                            
0001A7EE                            loc_1797A:
0001A7EE 5368 003C                  		subq.w	#1,$3C(a0)
0001A7F2 6B00                       		bmi.s	loc_17984
0001A7F4 6000 FEF4                  		bra.w	BossDefeated
0001A7F8                            ; ===========================================================================
0001A7F8                            
0001A7F8                            loc_17984:
0001A7F8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A7FE 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A804 4268 0010                  		clr.w	obVelX(a0)
0001A808 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A80C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A812 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A816 6600                       		bne.s	locret_179AA
0001A818 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A81E                            
0001A81E                            locret_179AA:
0001A81E 4E75                       		rts	
0001A820                            ; ===========================================================================
0001A820                            
0001A820                            loc_179AC:
0001A820 5268 003C                  		addq.w	#1,$3C(a0)
0001A824 6700                       		beq.s	loc_179BC
0001A826 6A00                       		bpl.s	loc_179C2
0001A828 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A82E 6000                       		bra.s	loc_179EE
0001A830                            ; ===========================================================================
0001A830                            
0001A830                            loc_179BC:
0001A830 4268 0012                  		clr.w	obVelY(a0)
0001A834 6000                       		bra.s	loc_179EE
0001A836                            ; ===========================================================================
0001A836                            
0001A836                            loc_179C2:
0001A836 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A83C 6500                       		bcs.s	loc_179DA
0001A83E 6700                       		beq.s	loc_179E0
0001A840 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A846 6500                       		bcs.s	loc_179EE
0001A848 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A84C 6000                       		bra.s	loc_179EE
0001A84E                            ; ===========================================================================
0001A84E                            
0001A84E                            loc_179DA:
0001A84E 5168 0012                  		subq.w	#8,obVelY(a0)
0001A852 6000                       		bra.s	loc_179EE
0001A854                            ; ===========================================================================
0001A854                            
0001A854                            loc_179E0:
0001A854 4268 0012                          clr.w    obVelY(a0)
0001A858 4A38 FE2D                          tst.b     (v_invinc).w
0001A85C 6600                               bne.s   @boss_invinc
0001A85E 4A38 FE2E                          tst.b     (v_shoes).w
0001A862 6600                               bne.s   @boss_shoes
0001A864                            
0001A864 1038 F5C6                          move.b   (v_Saved_music),d0
0001A868 6000 0000                          bra.w      @boss_play
0001A86C                            
0001A86C                            @boss_invinc:
0001A86C 103C 0000                          move.b #bgm_Invincible,d0
0001A870                            
0001A870                            @boss_shoes:
0001A870 103C 0000                          move.b #bgm_Ending,d0
0001A874                            
0001A874                            @boss_play:
0001A874 4EB8 0FC6                          jsr PlaySound
0001A878                            
0001A878                            loc_179EE:
0001A878 6100 FEB2                  		bsr.w	BossMove
0001A87C 6000 FDF2                  		bra.w	loc_177E6
0001A880                            ; ===========================================================================
0001A880                            
0001A880                            loc_179F6:
0001A880 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A886 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A88C 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001A892 6700                       		beq.s	loc_17A10
0001A894 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A898 6000                       		bra.s	loc_17A16
0001A89A                            ; ===========================================================================
0001A89A                            
0001A89A                            loc_17A10:
0001A89A 4A28 0001                  		tst.b	obRender(a0)
0001A89E 6A00                       		bpl.s	BGHZ_ShipDel
0001A8A0                            
0001A8A0                            loc_17A16:
0001A8A0 6100 FE8A                  		bsr.w	BossMove
0001A8A4 6000 FDCA                  		bra.w	loc_177E6
0001A8A8                            ; ===========================================================================
0001A8A8                            
0001A8A8                            BGHZ_ShipDel:
0001A8A8 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001A8AE                            ; ===========================================================================
0001A8AE                            
0001A8AE                            BGHZ_FaceMain:	; Routine 4
0001A8AE 7000                       		moveq	#0,d0
0001A8B0 7201                       		moveq	#1,d1
0001A8B2 2268 0034                  		movea.l	$34(a0),a1
0001A8B6 1029 0025                  		move.b	ob2ndRout(a1),d0
0001A8BA 5900                       		subq.b	#4,d0
0001A8BC 6600                       		bne.s	loc_17A3E
0001A8BE 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001A8C4 6600                       		bne.s	loc_17A46
0001A8C6 7204                       		moveq	#4,d1
0001A8C8                            
0001A8C8                            loc_17A3E:
0001A8C8 5D00                       		subq.b	#6,d0
0001A8CA 6B00                       		bmi.s	loc_17A46
0001A8CC 720A                       		moveq	#$A,d1
0001A8CE 6000                       		bra.s	loc_17A5A
0001A8D0                            ; ===========================================================================
0001A8D0                            
0001A8D0                            loc_17A46:
0001A8D0 4A29 0020                  		tst.b	obColType(a1)
0001A8D4 6600                       		bne.s	loc_17A50
0001A8D6 7205                       		moveq	#5,d1
0001A8D8 6000                       		bra.s	loc_17A5A
0001A8DA                            ; ===========================================================================
0001A8DA                            
0001A8DA                            loc_17A50:
0001A8DA 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001A8E0 6500                       		bcs.s	loc_17A5A
0001A8E2 7204                       		moveq	#4,d1
0001A8E4                            
0001A8E4                            loc_17A5A:
0001A8E4 1141 001C                  		move.b	d1,obAnim(a0)
0001A8E8 5500                       		subq.b	#2,d0
0001A8EA 6600                       		bne.s	BGHZ_FaceDisp
0001A8EC 117C 0006 001C             		move.b	#6,obAnim(a0)
0001A8F2 4A28 0001                  		tst.b	obRender(a0)
0001A8F6 6A00                       		bpl.s	BGHZ_FaceDel
0001A8F8                            
0001A8F8                            BGHZ_FaceDisp:
0001A8F8 6000                       		bra.s	BGHZ_Display
0001A8FA                            ; ===========================================================================
0001A8FA                            
0001A8FA                            BGHZ_FaceDel:
0001A8FA 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001A900                            ; ===========================================================================
0001A900                            
0001A900                            BGHZ_FlameMain:	; Routine 6
0001A900 117C 0007 001C             		move.b	#7,obAnim(a0)
0001A906 2268 0034                  		movea.l	$34(a0),a1
0001A90A 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001A910 6600                       		bne.s	loc_17A96
0001A912 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001A918 4A28 0001                  		tst.b	obRender(a0)
0001A91C 6A00                       		bpl.s	BGHZ_FlameDel
0001A91E 6000                       		bra.s	BGHZ_FlameDisp
0001A920                            ; ===========================================================================
0001A920                            
0001A920                            loc_17A96:
0001A920 3029 0010                  		move.w	obVelX(a1),d0
0001A924 6700                       		beq.s	BGHZ_FlameDisp
0001A926 117C 0008 001C             		move.b	#8,obAnim(a0)
0001A92C                            
0001A92C                            BGHZ_FlameDisp:
0001A92C 6000                       		bra.s	BGHZ_Display
0001A92E                            ; ===========================================================================
0001A92E                            
0001A92E                            BGHZ_FlameDel:
0001A92E 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            BGHZ_Display:
0001A934 2268 0034                  		movea.l	$34(a0),a1
0001A938 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001A93E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001A944 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001A94A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A950 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001A956 1028 0022                  		move.b	obStatus(a0),d0
0001A95A 0200 0003                  		andi.b	#3,d0
0001A95E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A964 8128 0001                  		or.b	d0,obRender(a0)
0001A968 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001A968 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001A96E                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001A96E                            ; ---------------------------------------------------------------------------
0001A96E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001A96E                            ; ---------------------------------------------------------------------------
0001A96E                            
0001A96E                            BossBall:
0001A96E 7000                       		moveq	#0,d0
0001A970 1028 0024                  		move.b	obRoutine(a0),d0
0001A974 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001A978 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001A97C                            ; ===========================================================================
0001A97C 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001A97E 0000                       		dc.w GBall_Base-GBall_Index
0001A980 0000                       		dc.w GBall_Display2-GBall_Index
0001A982 0000                       		dc.w loc_17C68-GBall_Index
0001A984 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001A986                            ; ===========================================================================
0001A986                            
0001A986                            GBall_Main:	; Routine 0
0001A986 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A98A 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001A990 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001A996 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001A99E 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001A9A4 45E8 0028                  		lea	obSubtype(a0),a2
0001A9A8 14FC 0000                  		move.b	#0,(a2)+
0001A9AC 7205                       		moveq	#5,d1
0001A9AE 2248                       		movea.l	a0,a1
0001A9B0 6000                       		bra.s	loc_17B60
0001A9B2                            ; ===========================================================================
0001A9B2                            
0001A9B2                            GBall_MakeLinks:
0001A9B2 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001A9B8 6600                       		bne.s	GBall_MakeBall
0001A9BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A9C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A9C6 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001A9CA 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001A9D0 237C 0000 9600 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001A9D8 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001A9DE 137C 0001 001A             		move.b	#1,obFrame(a1)
0001A9E4 5228 0028                  		addq.b	#1,obSubtype(a0)
0001A9E8                            
0001A9E8                            loc_17B60:
0001A9E8 3A09                       		move.w	a1,d5
0001A9EA 0445 D000                  		subi.w	#$D000,d5
0001A9EE EC4D                       		lsr.w	#6,d5
0001A9F0 0245 007F                  		andi.w	#$7F,d5
0001A9F4 14C5                       		move.b	d5,(a2)+
0001A9F6 137C 0004 0001             		move.b	#4,obRender(a1)
0001A9FC 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AA02 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AA08 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AA0E 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AA12                            
0001AA12                            GBall_MakeBall:
0001AA12 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AA18 237C 0000 9B5C 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AA20 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AA26 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AA2C 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AA32 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AA38 4E75                       		rts	
0001AA3A                            ; ===========================================================================
0001AA3A                            
0001AA3A 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AA40                            
0001AA40                            ; ===========================================================================
0001AA40                            
0001AA40                            GBall_Base:	; Routine 2
0001AA40 47F9 0001 AA3A             		lea	(GBall_PosData).l,a3
0001AA46 45E8 0028                  		lea	obSubtype(a0),a2
0001AA4A 7C00                       		moveq	#0,d6
0001AA4C 1C1A                       		move.b	(a2)+,d6
0001AA4E                            
0001AA4E                            loc_17BC6:
0001AA4E 7800                       		moveq	#0,d4
0001AA50 181A                       		move.b	(a2)+,d4
0001AA52 ED4C                       		lsl.w	#6,d4
0001AA54 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AA5A 2244                       		movea.l	d4,a1
0001AA5C 101B                       		move.b	(a3)+,d0
0001AA5E B029 003C                  		cmp.b	$3C(a1),d0
0001AA62 6700                       		beq.s	loc_17BE0
0001AA64 5229 003C                  		addq.b	#1,$3C(a1)
0001AA68                            
0001AA68                            loc_17BE0:
0001AA68 51CE FFE4                  		dbf	d6,loc_17BC6
0001AA6C                            
0001AA6C B029 003C                  		cmp.b	$3C(a1),d0
0001AA70 6600                       		bne.s	loc_17BFA
0001AA72 2268 0034                  		movea.l	$34(a0),a1
0001AA76 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AA7C 6600                       		bne.s	loc_17BFA
0001AA7E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA82                            
0001AA82                            loc_17BFA:
0001AA82 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AA88 6700                       		beq.s	GBall_Display
0001AA8A 5268 0032                  		addq.w	#1,$32(a0)
0001AA8E                            
0001AA8E                            GBall_Display:
0001AA8E 6100 0000                  		bsr.w	sub_17C2A
0001AA92 1028 0026                  		move.b	obAngle(a0),d0
0001AA96 4EB9 0000 9572             		jsr	(Swing_Move2).l
0001AA9C 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001AAA2                            ; ===========================================================================
0001AAA2                            
0001AAA2                            GBall_Display2:	; Routine 4
0001AAA2 6100 0000                  		bsr.w	sub_17C2A
0001AAA6 4EB9 0000 9532             		jsr	(Obj48_Move).l
0001AAAC 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001AAB2                            
0001AAB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AAB2                            
0001AAB2                            
0001AAB2                            sub_17C2A:
0001AAB2 2268 0034                  		movea.l	$34(a0),a1
0001AAB6 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AABC 6400                       		bcc.s	loc_17C3C
0001AABE 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AAC4                            
0001AAC4                            loc_17C3C:
0001AAC4 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AACA 3029 000C                  		move.w	obY(a1),d0
0001AACE D068 0032                  		add.w	$32(a0),d0
0001AAD2 3140 0038                  		move.w	d0,$38(a0)
0001AAD6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AADC 4A29 0022                  		tst.b	obStatus(a1)
0001AAE0 6A00                       		bpl.s	locret_17C66
0001AAE2 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AAE6 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AAEC                            
0001AAEC                            locret_17C66:
0001AAEC 4E75                       		rts	
0001AAEE                            ; End of function sub_17C2A
0001AAEE                            
0001AAEE                            ; ===========================================================================
0001AAEE                            
0001AAEE                            loc_17C68:	; Routine 6
0001AAEE 2268 0034                  		movea.l	$34(a0),a1
0001AAF2 4A29 0022                  		tst.b	obStatus(a1)
0001AAF6 6A00                       		bpl.s	GBall_Display3
0001AAF8 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AAFC 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AB02                            
0001AB02                            GBall_Display3:
0001AB02 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001AB08                            ; ===========================================================================
0001AB08                            
0001AB08                            GBall_ChkVanish:; Routine 8
0001AB08 7000                       		moveq	#0,d0
0001AB0A 4A28 001A                  		tst.b	obFrame(a0)
0001AB0E 6600                       		bne.s	GBall_Vanish
0001AB10 5200                       		addq.b	#1,d0
0001AB12                            
0001AB12                            GBall_Vanish:
0001AB12 1140 001A                  		move.b	d0,obFrame(a0)
0001AB16 2268 0034                  		movea.l	$34(a0),a1
0001AB1A 4A29 0022                  		tst.b	obStatus(a1)
0001AB1E 6A00                       		bpl.s	GBall_Display4
0001AB20 117C 0000 0020             		move.b	#0,obColType(a0)
0001AB26 6100 FBC2                  		bsr.w	BossDefeated
0001AB2A 5328 003C                  		subq.b	#1,$3C(a0)
0001AB2E 6A00                       		bpl.s	GBall_Display4
0001AB30 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AB34 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AB3A                            
0001AB3A                            GBall_Display4:
0001AB3A 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001AB3A 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001AB40                            		include	"_anim\Eggman.asm"
0001AB40                            ; ---------------------------------------------------------------------------
0001AB40                            ; Animation script - Eggman (bosses)
0001AB40                            ; ---------------------------------------------------------------------------
0001AB40 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AB42 0000                       		dc.w @facenormal1-Ani_Eggman
0001AB44 0000                       		dc.w @facenormal2-Ani_Eggman
0001AB46 0000                       		dc.w @facenormal3-Ani_Eggman
0001AB48 0000                       		dc.w @facelaugh-Ani_Eggman
0001AB4A 0000                       		dc.w @facehit-Ani_Eggman
0001AB4C 0000                       		dc.w @facepanic-Ani_Eggman
0001AB4E 0000                       		dc.w @blank-Ani_Eggman
0001AB50 0000                       		dc.w @flame1-Ani_Eggman
0001AB52 0000                       		dc.w @flame2-Ani_Eggman
0001AB54 0000                       		dc.w @facedefeat-Ani_Eggman
0001AB56 0000                       		dc.w @escapeflame-Ani_Eggman
0001AB58 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AB5C 00                         		even
0001AB5C 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AB60                            		even
0001AB60 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AB64                            		even
0001AB64 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AB68                            		even
0001AB68 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AB6C                            		even
0001AB6C 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AB70                            		even
0001AB70 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AB74                            		even
0001AB74 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AB78 00                         		even
0001AB78 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AB7C                            		even
0001AB7C 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AB80                            		even
0001AB80 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AB84 00                         		even
0001AB84 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AB90 00                         		even
0001AB90 00                         		even
0001AB90                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AB90                            ; --------------------------------------------------------------------------------
0001AB90                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AB90                            ; --------------------------------------------------------------------------------
0001AB90                            
0001AB90                            SME_F_pyS:	
0001AB90 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AB94 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AB98 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AB9C 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001ABA0 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001ABA4 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001ABA8 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001ABAA 05                         SME_F_pyS_1A:	dc.b 5	
0001ABAB EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001ABB0 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001ABB5 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001ABBA 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001ABBF 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001ABC4 03                         SME_F_pyS_34:	dc.b 3	
0001ABC5 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ABCA EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001ABCF EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ABD4 03                         SME_F_pyS_44:	dc.b 3	
0001ABD5 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ABDA EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001ABDF EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ABE4 04                         SME_F_pyS_54:	dc.b 4	
0001ABE5 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001ABEA EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001ABEF EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001ABF4 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ABF9 04                         SME_F_pyS_69:	dc.b 4	
0001ABFA E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001ABFF EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AC04 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AC09 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC0E 04                         SME_F_pyS_7E:	dc.b 4	
0001AC0F E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AC14 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AC19 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AC1E EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC23 04                         SME_F_pyS_93:	dc.b 4	
0001AC24 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AC29 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC2E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AC33 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AC38 07                         SME_F_pyS_A8:	dc.b 7	
0001AC39 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AC3E E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AC43 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AC48 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AC4D F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AC52 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AC57 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AC5C 01                         SME_F_pyS_CC:	dc.b 1	
0001AC5D 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AC62 01                         SME_F_pyS_D2:	dc.b 1	
0001AC63 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AC68 00                         SME_F_pyS_D8:	dc.b 0	
0001AC69 02                         SME_F_pyS_D9:	dc.b 2	
0001AC6A 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AC6F 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AC74 02                         SME_F_pyS_E4:	dc.b 2	
0001AC75 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AC7A 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AC80 00                         		even
0001AC80 00                         		even
0001AC80                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AC80                            ; ---------------------------------------------------------------------------
0001AC80                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AC80                            ; ---------------------------------------------------------------------------
0001AC80                            Map_BossItems_internal:
0001AC80 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AC82 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AC84 0000                       		dc.w @cross-Map_BossItems_internal
0001AC86 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AC88 0000                       		dc.w @pipe-Map_BossItems_internal
0001AC8A 0000                       		dc.w @spike-Map_BossItems_internal
0001AC8C 0000                       		dc.w @legmask-Map_BossItems_internal
0001AC8E 0000                       		dc.w @legs-Map_BossItems_internal
0001AC90 01                         @chainanchor1:	dc.b 1
0001AC91 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AC96 02                         @chainanchor2:	dc.b 2
0001AC97 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AC9C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001ACA2 00                         		even
0001ACA2 01                         @cross:		dc.b 1
0001ACA3 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001ACA8 01                         @widepipe:	dc.b 1
0001ACA9 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001ACAE 01                         @pipe:		dc.b 1
0001ACAF 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001ACB4 04                         @spike:		dc.b 4
0001ACB5 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001ACBA F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001ACBF F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001ACC4 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001ACCA 00                         		even
0001ACCA 02                         @legmask:	dc.b 2
0001ACCB 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001ACD0 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001ACD6 00                         		even
0001ACD6 02                         @legs:		dc.b 2
0001ACD7 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001ACDC 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001ACE2 00                         		even
0001ACE2 00                         		even
0001ACE2                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001ACE2                            ; ---------------------------------------------------------------------------
0001ACE2                            ; Object 77 - Eggman (LZ)
0001ACE2                            ; ---------------------------------------------------------------------------
0001ACE2                            
0001ACE2                            BossLabyrinth:
0001ACE2 7000                       		moveq	#0,d0
0001ACE4 1028 0024                  		move.b	obRoutine(a0),d0
0001ACE8 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001ACEC 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001ACF0                            ; ===========================================================================
0001ACF0 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001ACF2 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001ACF4 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001ACF6 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001ACF8                            
0001ACF8 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001ACFA 0401                       		dc.b 4,	1
0001ACFC 0607                       		dc.b 6,	7
0001ACFE                            ; ===========================================================================
0001ACFE                            
0001ACFE                            Obj77_Main:	; Routine 0
0001ACFE 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AD04 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AD0A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AD10 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AD16 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AD1C 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AD22 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AD28 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AD2C 2248                       		movea.l	a0,a1
0001AD2E 7202                       		moveq	#2,d1
0001AD30 6000                       		bra.s	Obj77_LoadBoss
0001AD32                            ; ===========================================================================
0001AD32                            
0001AD32                            Obj77_Loop:
0001AD32 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001AD38 6600                       		bne.s	Obj77_ShipMain
0001AD3A 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AD3E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AD44 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AD4A                            
0001AD4A                            Obj77_LoadBoss:
0001AD4A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AD50 4229 0025                  		clr.b	ob2ndRout(a1)
0001AD54 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AD58 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AD5C 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AD62 237C 0001 AB90 0004        		move.l	#Map_Eggman,obMap(a1)
0001AD6A 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AD70 137C 0004 0001             		move.b	#4,obRender(a1)
0001AD76 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001AD7C 2348 0034                  		move.l	a0,$34(a1)
0001AD80 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001AD84                            
0001AD84                            Obj77_ShipMain:	; Routine 2
0001AD84 43F8 D000                  		lea	(v_player).w,a1
0001AD88 7000                       		moveq	#0,d0
0001AD8A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001AD8E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001AD92 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AD96 43F9 0001 AB40             		lea	(Ani_Eggman).l,a1
0001AD9C 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001ADA2 7003                       		moveq	#3,d0
0001ADA4 C028 0022                  		and.b	obStatus(a0),d0
0001ADA8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ADAE 8128 0001                  		or.b	d0,obRender(a0)
0001ADB2 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001ADB8                            ; ===========================================================================
0001ADB8 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001ADBC 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001ADC0 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001ADC4 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001ADC8                            ; ===========================================================================
0001ADC8                            
0001ADC8                            loc_17F1E:
0001ADC8 3029 0008                  		move.w	obX(a1),d0
0001ADCC 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001ADD0 6500                       		bcs.s	loc_17F38
0001ADD2 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001ADD8 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001ADDE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001ADE2                            
0001ADE2                            loc_17F38:
0001ADE2 6100 F948                  		bsr.w	BossMove
0001ADE6 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001ADEC 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001ADF2                            
0001ADF2                            loc_17F48:
0001ADF2 4A28 003D                  		tst.b	$3D(a0)
0001ADF6 6600                       		bne.s	loc_17F8E
0001ADF8 4A28 0022                  		tst.b	obStatus(a0)
0001ADFC 6B00                       		bmi.s	loc_17F92
0001ADFE 4A28 0020                  		tst.b	obColType(a0)
0001AE02 6600                       		bne.s	locret_17F8C
0001AE04 4A28 003E                  		tst.b	$3E(a0)
0001AE08 6600                       		bne.s	loc_17F70
0001AE0A 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AE1A                            
0001AE1A                            loc_17F70:
0001AE1A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AE1E 7000                       		moveq	#0,d0
0001AE20 4A51                       		tst.w	(a1)
0001AE22 6600                       		bne.s	loc_17F7E
0001AE24 303C 0EEE                  		move.w	#cWhite,d0
0001AE28                            
0001AE28                            loc_17F7E:
0001AE28 3280                       		move.w	d0,(a1)
0001AE2A 5328 003E                  		subq.b	#1,$3E(a0)
0001AE2E 6600                       		bne.s	locret_17F8C
0001AE30 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AE36                            
0001AE36                            locret_17F8C:
0001AE36 4E75                       		rts	
0001AE38                            ; ===========================================================================
0001AE38                            
0001AE38                            loc_17F8E:
0001AE38 6000 F8B0                  		bra.w	BossDefeated
0001AE3C                            ; ===========================================================================
0001AE3C                            
0001AE3C                            loc_17F92:
0001AE3C 7064                       		moveq	#100,d0
0001AE3E 6100 0000                  		bsr.w	AddPoints
0001AE42 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AE48 4E75                       		rts	
0001AE4A                            ; ===========================================================================
0001AE4A                            
0001AE4A                            loc_17FA0:
0001AE4A 70FE                       		moveq	#-2,d0
0001AE4C 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AE52 6500                       		bcs.s	loc_17FB6
0001AE54 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AE5A 4268 0010                  		clr.w	obVelX(a0)
0001AE5E 5240                       		addq.w	#1,d0
0001AE60                            
0001AE60                            loc_17FB6:
0001AE60 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001AE66 6E00                       		bgt.s	loc_17FCA
0001AE68 317C 0500 0038             		move.w	#$500,$38(a0)
0001AE6E 4268 0012                  		clr.w	obVelY(a0)
0001AE72 5240                       		addq.w	#1,d0
0001AE74                            
0001AE74                            loc_17FCA:
0001AE74 6600                       		bne.s	loc_17FDC
0001AE76 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AE7C 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001AE82 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AE86                            
0001AE86                            loc_17FDC:
0001AE86 6000 FF5A                  		bra.w	loc_17F38
0001AE8A                            ; ===========================================================================
0001AE8A                            
0001AE8A                            loc_17FE0:
0001AE8A 70FE                       		moveq	#-2,d0
0001AE8C 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001AE92 6500                       		bcs.s	loc_17FF6
0001AE94 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001AE9A 4268 0010                  		clr.w	obVelX(a0)
0001AE9E 5240                       		addq.w	#1,d0
0001AEA0                            
0001AEA0                            loc_17FF6:
0001AEA0 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001AEA6 6E00                       		bgt.s	loc_1800A
0001AEA8 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001AEAE 4268 0012                  		clr.w	obVelY(a0)
0001AEB2 5240                       		addq.w	#1,d0
0001AEB4                            
0001AEB4                            loc_1800A:
0001AEB4 6600                       		bne.s	loc_1801A
0001AEB6 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AEBC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEC0 4228 003F                  		clr.b	$3F(a0)
0001AEC4                            
0001AEC4                            loc_1801A:
0001AEC4 6000 FF1C                  		bra.w	loc_17F38
0001AEC8                            ; ===========================================================================
0001AEC8                            
0001AEC8                            loc_1801E:
0001AEC8 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001AECE 6E00                       		bgt.s	loc_1804E
0001AED0 317C 0100 0038             		move.w	#$100,$38(a0)
0001AED6 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AEDC 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001AEE2 4A28 003D                  		tst.b	$3D(a0)
0001AEE6 6700                       		beq.s	loc_18046
0001AEE8 E1E8 0010                  		asl	obVelX(a0)
0001AEEC E1E8 0012                  		asl	obVelY(a0)
0001AEF0                            
0001AEF0                            loc_18046:
0001AEF0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEF4 6000 FEEC                  		bra.w	loc_17F38
0001AEF8                            ; ===========================================================================
0001AEF8                            
0001AEF8                            loc_1804E:
0001AEF8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AEFE 5428 003F                  		addq.b	#2,$3F(a0)
0001AF02 1028 003F                  		move.b	$3F(a0),d0
0001AF06 4EB9 0000 37AE             		jsr	(CalcSine).l
0001AF0C 4A41                       		tst.w	d1
0001AF0E 6A00                       		bpl.s	loc_1806C
0001AF10 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AF16                            
0001AF16                            loc_1806C:
0001AF16 E840                       		asr.w	#4,d0
0001AF18 4840                       		swap	d0
0001AF1A 4240                       		clr.w	d0
0001AF1C D0A8 0030                  		add.l	$30(a0),d0
0001AF20 4840                       		swap	d0
0001AF22 3140 0008                  		move.w	d0,obX(a0)
0001AF26 3028 0012                  		move.w	obVelY(a0),d0
0001AF2A 3238 D00C                  		move.w	(v_player+obY).w,d1
0001AF2E 9268 000C                  		sub.w	obY(a0),d1
0001AF32 6500                       		bcs.s	loc_180A2
0001AF34 0441 0048                  		subi.w	#$48,d1
0001AF38 6500                       		bcs.s	loc_180A2
0001AF3A E240                       		asr.w	#1,d0
0001AF3C 0441 0028                  		subi.w	#$28,d1
0001AF40 6500                       		bcs.s	loc_180A2
0001AF42 E240                       		asr.w	#1,d0
0001AF44 0441 0028                  		subi.w	#$28,d1
0001AF48 6500                       		bcs.s	loc_180A2
0001AF4A 7000                       		moveq	#0,d0
0001AF4C                            
0001AF4C                            loc_180A2:
0001AF4C 48C0                       		ext.l	d0
0001AF4E E180                       		asl.l	#8,d0
0001AF50 4A28 003D                  		tst.b	$3D(a0)
0001AF54 6700                       		beq.s	loc_180AE
0001AF56 D080                       		add.l	d0,d0
0001AF58                            
0001AF58                            loc_180AE:
0001AF58 D1A8 0038                  		add.l	d0,$38(a0)
0001AF5C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AF62 6000 FE8E                  		bra.w	loc_17F48
0001AF66                            ; ===========================================================================
0001AF66                            
0001AF66                            loc_180BC:
0001AF66 70FE                       		moveq	#-2,d0
0001AF68 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001AF6E 6500                       		bcs.s	loc_180D2
0001AF70 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001AF76 4268 0010                  		clr.w	obVelX(a0)
0001AF7A 5240                       		addq.w	#1,d0
0001AF7C                            
0001AF7C                            loc_180D2:
0001AF7C 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001AF82 6E00                       		bgt.s	loc_180E6
0001AF84 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001AF8A 4268 0012                  		clr.w	obVelY(a0)
0001AF8E 5240                       		addq.w	#1,d0
0001AF90                            
0001AF90                            loc_180E6:
0001AF90 6600                       		bne.s	loc_180F2
0001AF92 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF96 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AF9C                            
0001AF9C                            loc_180F2:
0001AF9C 6000 FE44                  		bra.w	loc_17F38
0001AFA0                            ; ===========================================================================
0001AFA0                            
0001AFA0                            loc_180F6:
0001AFA0 4A28 003D                  		tst.b	$3D(a0)
0001AFA4 6600                       		bne.s	loc_18112
0001AFA6 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001AFAC 6D00                       		blt.s	loc_18126
0001AFAE 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001AFB4 6E00                       		bgt.s	loc_18126
0001AFB6 117C 0032 003C             		move.b	#$32,$3C(a0)
0001AFBC                            
0001AFBC                            loc_18112:
0001AFBC 4A38 FE2D                          tst.b     (v_invinc).w
0001AFC0 6600                               bne.s   @boss_invinc
0001AFC2                            
0001AFC2 1038 F5C6                          move.b   (v_Saved_music),d0
0001AFC6 6000 0000                          bra.w      @boss_play
0001AFCA                            
0001AFCA                            @boss_invinc:
0001AFCA 103C 0000                          move.b #bgm_Invincible,d0
0001AFCE                            
0001AFCE                            @boss_play:
0001AFCE 4EB8 0FC6                          jsr PlaySound
0001AFD2 4238 F7AA                          clr.b    (f_lockscreen).w
0001AFD6 08E8 0000 0022                     bset    #0,obStatus(a0)
0001AFDC 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001AFE0                            
0001AFE0                            loc_18126:
0001AFE0 6000 FE00                  		bra.w	loc_17F38
0001AFE4                            ; ===========================================================================
0001AFE4                            
0001AFE4                            loc_1812A:
0001AFE4 4A28 003D                  		tst.b	$3D(a0)
0001AFE8 6600                       		bne.s	loc_18136
0001AFEA 5328 003C                  		subq.b	#1,$3C(a0)
0001AFEE 6600                       		bne.s	loc_1814E
0001AFF0                            
0001AFF0                            loc_18136:
0001AFF0 4228 003C                  		clr.b	$3C(a0)
0001AFF4 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AFFA 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B000 4228 003D                  		clr.b	$3D(a0)
0001B004 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B008                            
0001B008                            loc_1814E:
0001B008 6000 FDD8                  		bra.w	loc_17F38
0001B00C                            ; ===========================================================================
0001B00C                            
0001B00C                            loc_18152:
0001B00C 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B012 6400                       		bcc.s	loc_18160
0001B014 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B018 6000                       		bra.s	loc_18166
0001B01A                            ; ===========================================================================
0001B01A                            
0001B01A                            loc_18160:
0001B01A 4A28 0001                  		tst.b	obRender(a0)
0001B01E 6A00                       		bpl.s	Obj77_ShipDel
0001B020                            
0001B020                            loc_18166:
0001B020 6000 FDC0                  		bra.w	loc_17F38
0001B024                            ; ===========================================================================
0001B024                            
0001B024                            Obj77_ShipDel:
0001B024 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B02A                            ; ===========================================================================
0001B02A                            
0001B02A                            Obj77_FaceMain:	; Routine 4
0001B02A 2268 0034                  		movea.l	$34(a0),a1
0001B02E 1011                       		move.b	(a1),d0
0001B030 B010                       		cmp.b	(a0),d0
0001B032 6600                       		bne.s	Obj77_FaceDel
0001B034 7000                       		moveq	#0,d0
0001B036 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B03A 7201                       		moveq	#1,d1
0001B03C 4A28 003D                  		tst.b	$3D(a0)
0001B040 6700                       		beq.s	loc_1818C
0001B042 720A                       		moveq	#$A,d1
0001B044 6000                       		bra.s	loc_181A0
0001B046                            ; ===========================================================================
0001B046                            
0001B046                            loc_1818C:
0001B046 4A29 0020                  		tst.b	obColType(a1)
0001B04A 6600                       		bne.s	loc_18196
0001B04C 7205                       		moveq	#5,d1
0001B04E 6000                       		bra.s	loc_181A0
0001B050                            ; ===========================================================================
0001B050                            
0001B050                            loc_18196:
0001B050 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B056 6500                       		bcs.s	loc_181A0
0001B058 7204                       		moveq	#4,d1
0001B05A                            
0001B05A                            loc_181A0:
0001B05A 1141 001C                  		move.b	d1,obAnim(a0)
0001B05E 0C00 000E                  		cmpi.b	#$E,d0
0001B062 6600                       		bne.s	loc_181B6
0001B064 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B06A 4A28 0001                  		tst.b	obRender(a0)
0001B06E 6A00                       		bpl.s	Obj77_FaceDel
0001B070                            
0001B070                            loc_181B6:
0001B070 6000                       		bra.s	Obj77_Display
0001B072                            ; ===========================================================================
0001B072                            
0001B072                            Obj77_FaceDel:
0001B072 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B078                            ; ===========================================================================
0001B078                            
0001B078                            Obj77_FlameMain:; Routine 6
0001B078 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B07E 2268 0034                  		movea.l	$34(a0),a1
0001B082 1011                       		move.b	(a1),d0
0001B084 B010                       		cmp.b	(a0),d0
0001B086 6600                       		bne.s	Obj77_FlameDel
0001B088 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B08E 6600                       		bne.s	loc_181F0
0001B090 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B096 4A28 0001                  		tst.b	1(a0)
0001B09A 6A00                       		bpl.s	Obj77_FlameDel
0001B09C 6000                       		bra.s	loc_181F0
0001B09E                            ; ===========================================================================
0001B09E 4A69 0010                  		tst.w	obVelX(a1)
0001B0A2 6700                       		beq.s	loc_181F0
0001B0A4 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B0AA                            
0001B0AA                            loc_181F0:
0001B0AA 6000                       		bra.s	Obj77_Display
0001B0AC                            ; ===========================================================================
0001B0AC                            
0001B0AC                            Obj77_FlameDel:
0001B0AC 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B0B2                            ; ===========================================================================
0001B0B2                            
0001B0B2                            Obj77_Display:
0001B0B2 43F9 0001 AB40             		lea	(Ani_Eggman).l,a1
0001B0B8 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001B0BE 2268 0034                  		movea.l	$34(a0),a1
0001B0C2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B0C8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B0CE 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B0D4 7003                       		moveq	#3,d0
0001B0D6 C028 0022                  		and.b	obStatus(a0),d0
0001B0DA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B0E0 8128 0001                  		or.b	d0,obRender(a0)
0001B0E4 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001B0E4 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001B0EA                            		include	"_incObj\73 Boss - Marble.asm"
0001B0EA                            ; ---------------------------------------------------------------------------
0001B0EA                            ; Object 73 - Eggman (MZ)
0001B0EA                            ; ---------------------------------------------------------------------------
0001B0EA                            
0001B0EA                            BossMarble:
0001B0EA 7000                       		moveq	#0,d0
0001B0EC 1028 0024                  		move.b	obRoutine(a0),d0
0001B0F0 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B0F4 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B0F8                            ; ===========================================================================
0001B0F8 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B0FA 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B0FC 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B0FE 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B100 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B102                            
0001B102 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B106 0401 0200                  		dc.b 4,	1, $02, $00
0001B10A 0607 0200                  		dc.b 6,	7, $02, $00
0001B10E 0800 0180                  		dc.b 8,	0, $01, $80
0001B112                            ; ===========================================================================
0001B112                            
0001B112                            Obj73_Main:	; Routine 0
0001B112 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B118 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B11E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B124 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B12A 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B12E 2248                       		movea.l	a0,a1
0001B130 7203                       		moveq	#3,d1
0001B132 6000                       		bra.s	Obj73_LoadBoss
0001B134                            ; ===========================================================================
0001B134                            
0001B134                            Obj73_Loop:
0001B134 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001B13A 6600                       		bne.s	Obj73_ShipMain
0001B13C 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B140 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B146 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B14C                            
0001B14C                            Obj73_LoadBoss:
0001B14C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B152 4229 0025                  		clr.b	ob2ndRout(a1)
0001B156 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B15A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B15E 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B162 237C 0001 AB90 0004        		move.l	#Map_Eggman,obMap(a1)
0001B16A 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B170 137C 0004 0001             		move.b	#4,obRender(a1)
0001B176 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B17C 2348 0034                  		move.l	a0,$34(a1)
0001B180 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B184                            
0001B184                            Obj73_ShipMain:	; Routine 2
0001B184 7000                       		moveq	#0,d0
0001B186 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B18A 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B18E 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B192 43F9 0001 AB40             		lea	(Ani_Eggman).l,a1
0001B198 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001B19E 7003                       		moveq	#3,d0
0001B1A0 C028 0022                  		and.b	obStatus(a0),d0
0001B1A4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B1AA 8128 0001                  		or.b	d0,obRender(a0)
0001B1AE 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001B1B4                            ; ===========================================================================
0001B1B4 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B1B6 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B1B8 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B1BA 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B1BC 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B1BE                            ; ===========================================================================
0001B1BE                            
0001B1BE                            loc_18302:
0001B1BE 1028 003F                  		move.b	$3F(a0),d0
0001B1C2 5428 003F                  		addq.b	#2,$3F(a0)
0001B1C6 4EB9 0000 37AE             		jsr	(CalcSine).l
0001B1CC E440                       		asr.w	#2,d0
0001B1CE 3140 0012                  		move.w	d0,obVelY(a0)
0001B1D2 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B1D8 6100 F552                  		bsr.w	BossMove
0001B1DC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B1E2 6600                       		bne.s	loc_18334
0001B1E4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B1E8 4228 0028                  		clr.b	obSubtype(a0)
0001B1EC 42A8 0010                  		clr.l	obVelX(a0)
0001B1F0                            
0001B1F0                            loc_18334:
0001B1F0 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B1F6 1140 0034                  		move.b	d0,$34(a0)
0001B1FA                            
0001B1FA                            loc_1833E:
0001B1FA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B200 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B206 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B20C 6400                       		bcc.s	locret_18390
0001B20E 4A28 0022                  		tst.b	obStatus(a0)
0001B212 6B00                       		bmi.s	loc_18392
0001B214 4A28 0020                  		tst.b	obColType(a0)
0001B218 6600                       		bne.s	locret_18390
0001B21A 4A28 003E                  		tst.b	$3E(a0)
0001B21E 6600                       		bne.s	loc_18374
0001B220 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B230                            
0001B230                            loc_18374:
0001B230 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B234 7000                       		moveq	#0,d0
0001B236 4A51                       		tst.w	(a1)
0001B238 6600                       		bne.s	loc_18382
0001B23A 303C 0EEE                  		move.w	#cWhite,d0
0001B23E                            
0001B23E                            loc_18382:
0001B23E 3280                       		move.w	d0,(a1)
0001B240 5328 003E                  		subq.b	#1,$3E(a0)
0001B244 6600                       		bne.s	locret_18390
0001B246 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B24C                            
0001B24C                            locret_18390:
0001B24C 4E75                       		rts	
0001B24E                            ; ===========================================================================
0001B24E                            
0001B24E                            loc_18392:
0001B24E 7064                       		moveq	#100,d0
0001B250 6100 0000                  		bsr.w	AddPoints
0001B254 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B25A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B260 4268 0010                  		clr.w	obVelX(a0)
0001B264 4E75                       		rts	
0001B266                            ; ===========================================================================
0001B266                            
0001B266                            loc_183AA:
0001B266 7000                       		moveq	#0,d0
0001B268 1028 0028                  		move.b	obSubtype(a0),d0
0001B26C 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B270 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B274 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B27A 6000 FF7E                  		bra.w	loc_1833E
0001B27E                            ; ===========================================================================
0001B27E 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B280 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B282 0000                       		dc.w loc_183CA-off_183C2
0001B284 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B286                            ; ===========================================================================
0001B286                            
0001B286                            loc_183CA:
0001B286 4A68 0010                  		tst.w	obVelX(a0)
0001B28A 6600                       		bne.s	loc_183FE
0001B28C 7040                       		moveq	#$40,d0
0001B28E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B294 6700                       		beq.s	loc_183E6
0001B296 6500                       		bcs.s	loc_183DE
0001B298 4440                       		neg.w	d0
0001B29A                            
0001B29A                            loc_183DE:
0001B29A 3140 0012                  		move.w	d0,obVelY(a0)
0001B29E 6000 F48C                  		bra.w	BossMove
0001B2A2                            ; ===========================================================================
0001B2A2                            
0001B2A2                            loc_183E6:
0001B2A2 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B2A8 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B2AE 0828 0000 0022             		btst	#0,obStatus(a0)
0001B2B4 6600                       		bne.s	loc_183FE
0001B2B6 4468 0010                  		neg.w	obVelX(a0)
0001B2BA                            
0001B2BA                            loc_183FE:
0001B2BA 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B2C0 6400                       		bcc.s	Obj73_MakeLava
0001B2C2 6100 F468                  		bsr.w	BossMove
0001B2C6 5968 0012                  		subq.w	#4,obVelY(a0)
0001B2CA                            
0001B2CA                            Obj73_MakeLava:
0001B2CA 5328 0034                  		subq.b	#1,$34(a0)
0001B2CE 6400                       		bcc.s	loc_1845C
0001B2D0 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001B2D6 6600                       		bne.s	loc_1844A
0001B2D8 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B2DC 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B2E2 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B2E8 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B2EE 80FC 0050                  		divu.w	#$50,d0
0001B2F2 4840                       		swap	d0
0001B2F4 0640 1878                  		addi.w	#$1878,d0
0001B2F8 3340 0008                  		move.w	d0,obX(a1)
0001B2FC EE09                       		lsr.b	#7,d1
0001B2FE 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B304                            
0001B304                            loc_1844A:
0001B304 4EB9 0000 3788             		jsr	(RandomNumber).l
0001B30A 0200 001F                  		andi.b	#$1F,d0
0001B30E 0600 0040                  		addi.b	#$40,d0
0001B312 1140 0034                  		move.b	d0,$34(a0)
0001B316                            
0001B316                            loc_1845C:
0001B316 0828 0000 0022             		btst	#0,obStatus(a0)
0001B31C 6700                       		beq.s	loc_18474
0001B31E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B324 6D00                       		blt.s	locret_1849C
0001B326 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B32C 6000                       		bra.s	loc_18482
0001B32E                            ; ===========================================================================
0001B32E                            
0001B32E                            loc_18474:
0001B32E 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B334 6E00                       		bgt.s	locret_1849C
0001B336 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B33C                            
0001B33C                            loc_18482:
0001B33C 4268 0010                  		clr.w	obVelX(a0)
0001B340 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B346 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B34C 6400                       		bcc.s	loc_18498
0001B34E 4468 0012                  		neg.w	obVelY(a0)
0001B352                            
0001B352                            loc_18498:
0001B352 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B356                            
0001B356                            locret_1849C:
0001B356 4E75                       		rts	
0001B358                            ; ===========================================================================
0001B358                            
0001B358                            Obj73_MakeLava2:
0001B358 6100 F3D2                  		bsr.w	BossMove
0001B35C 3028 0038                  		move.w	$38(a0),d0
0001B360 0440 022C                  		subi.w	#$22C,d0
0001B364 6E00                       		bgt.s	locret_184F4
0001B366 303C 022C                  		move.w	#$22C,d0
0001B36A 4A68 0012                  		tst.w	obVelY(a0)
0001B36E 6700                       		beq.s	loc_184EA
0001B370 4268 0012                  		clr.w	obVelY(a0)
0001B374 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B37A 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B380 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001B386 6600                       		bne.s	loc_184EA
0001B388 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B38E 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B394 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B39A 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B39E 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B3A4                            
0001B3A4                            loc_184EA:
0001B3A4 5368 003C                  		subq.w	#1,$3C(a0)
0001B3A8 6600                       		bne.s	locret_184F4
0001B3AA 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B3AE                            
0001B3AE                            locret_184F4:
0001B3AE 4E75                       		rts	
0001B3B0                            ; ===========================================================================
0001B3B0                            
0001B3B0                            loc_184F6:
0001B3B0 5368 003C                  		subq.w	#1,$3C(a0)
0001B3B4 6B00                       		bmi.s	loc_18500
0001B3B6 6000 F332                  		bra.w	BossDefeated
0001B3BA                            ; ===========================================================================
0001B3BA                            
0001B3BA                            loc_18500:
0001B3BA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B3C0 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B3C6 4268 0010                  		clr.w	obVelX(a0)
0001B3CA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B3CE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B3D4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B3D8 6600                       		bne.s	locret_1852A
0001B3DA 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B3E0 4268 0012                  		clr.w	obVelY(a0)
0001B3E4                            
0001B3E4                            locret_1852A:
0001B3E4 4E75                       		rts	
0001B3E6                            ; ===========================================================================
0001B3E6                            
0001B3E6                            loc_1852C:
0001B3E6 5268 003C                  		addq.w	#1,$3C(a0)
0001B3EA 6700                       		beq.s	loc_18544
0001B3EC 6A00                       		bpl.s	loc_1854E
0001B3EE 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B3F4 6400                       		bcc.s	loc_18544
0001B3F6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B3FC 6000                       		bra.s	loc_1857A
0001B3FE                            ; ===========================================================================
0001B3FE                            
0001B3FE                            loc_18544:
0001B3FE 4268 0012                  		clr.w	obVelY(a0)
0001B402 4268 003C                  		clr.w	$3C(a0)
0001B406 6000                       		bra.s	loc_1857A
0001B408                            ; ===========================================================================
0001B408                            
0001B408                            loc_1854E:
0001B408 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B40E 6500                       		bcs.s	loc_18566
0001B410 6700                       		beq.s	loc_1856C
0001B412 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B418 6500                       		bcs.s	loc_1857A
0001B41A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B41E 6000                       		bra.s	loc_1857A
0001B420                            ; ===========================================================================
0001B420                            
0001B420                            loc_18566:
0001B420 5168 0012                  		subq.w	#8,obVelY(a0)
0001B424 6000                       		bra.s	loc_1857A
0001B426                            ; ===========================================================================
0001B426                            
0001B426                            loc_1856C:
0001B426 4268 0012                  		clr.w	obVelY(a0)
0001B434                            
0001B434                            loc_1857A:
0001B434 6100 F2F6                  		bsr.w	BossMove
0001B438 6000 FDC0                  		bra.w	loc_1833E
0001B43C                            ; ===========================================================================
0001B43C                            
0001B43C                            loc_18582:
0001B43C 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B442 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B448 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B44E 6400                       		bcc.s	loc_1859C
0001B450 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B454 6000                       		bra.s	loc_185A2
0001B456                            ; ===========================================================================
0001B456                            
0001B456                            loc_1859C:
0001B456 4A28 0001                  		tst.b	obRender(a0)
0001B45A 6A00                       		bpl.s	Obj73_ShipDel
0001B45C                            
0001B45C                            loc_185A2:
0001B45C 6100 F2CE                  		bsr.w	BossMove
0001B460 6000 FD98                  		bra.w	loc_1833E
0001B464                            ; ===========================================================================
0001B464                            
0001B464                            Obj73_ShipDel:
0001B464 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B46A                            ; ===========================================================================
0001B46A                            
0001B46A                            Obj73_FaceMain:	; Routine 4
0001B46A 7000                       		moveq	#0,d0
0001B46C 7201                       		moveq	#1,d1
0001B46E 2268 0034                  		movea.l	$34(a0),a1
0001B472 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B476 5540                       		subq.w	#2,d0
0001B478 6600                       		bne.s	loc_185D2
0001B47A 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B480 6700                       		beq.s	loc_185DA
0001B482 4A69 0012                  		tst.w	obVelY(a1)
0001B486 6600                       		bne.s	loc_185DA
0001B488 7204                       		moveq	#4,d1
0001B48A 6000                       		bra.s	loc_185EE
0001B48C                            ; ===========================================================================
0001B48C                            
0001B48C                            loc_185D2:
0001B48C 5500                       		subq.b	#2,d0
0001B48E 6B00                       		bmi.s	loc_185DA
0001B490 720A                       		moveq	#$A,d1
0001B492 6000                       		bra.s	loc_185EE
0001B494                            ; ===========================================================================
0001B494                            
0001B494                            loc_185DA:
0001B494 4A29 0020                  		tst.b	obColType(a1)
0001B498 6600                       		bne.s	loc_185E4
0001B49A 7205                       		moveq	#5,d1
0001B49C 6000                       		bra.s	loc_185EE
0001B49E                            ; ===========================================================================
0001B49E                            
0001B49E                            loc_185E4:
0001B49E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B4A4 6500                       		bcs.s	loc_185EE
0001B4A6 7204                       		moveq	#4,d1
0001B4A8                            
0001B4A8                            loc_185EE:
0001B4A8 1141 001C                  		move.b	d1,obAnim(a0)
0001B4AC 5900                       		subq.b	#4,d0
0001B4AE 6600                       		bne.s	loc_18602
0001B4B0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B4B6 4A28 0001                  		tst.b	obRender(a0)
0001B4BA 6A00                       		bpl.s	Obj73_FaceDel
0001B4BC                            
0001B4BC                            loc_18602:
0001B4BC 6000                       		bra.s	Obj73_Display
0001B4BE                            ; ===========================================================================
0001B4BE                            
0001B4BE                            Obj73_FaceDel:
0001B4BE 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B4C4                            ; ===========================================================================
0001B4C4                            
0001B4C4                            Obj73_FlameMain:; Routine 6
0001B4C4 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B4CA 2268 0034                  		movea.l	$34(a0),a1
0001B4CE 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B4D4 6D00                       		blt.s	loc_1862A
0001B4D6 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B4DC 4A28 0001                  		tst.b	obRender(a0)
0001B4E0 6A00                       		bpl.s	Obj73_FlameDel
0001B4E2 6000                       		bra.s	loc_18636
0001B4E4                            ; ===========================================================================
0001B4E4                            
0001B4E4                            loc_1862A:
0001B4E4 4A69 0010                  		tst.w	obVelX(a1)
0001B4E8 6700                       		beq.s	loc_18636
0001B4EA 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B4F0                            
0001B4F0                            loc_18636:
0001B4F0 6000                       		bra.s	Obj73_Display
0001B4F2                            ; ===========================================================================
0001B4F2                            
0001B4F2                            Obj73_FlameDel:
0001B4F2 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B4F8                            ; ===========================================================================
0001B4F8                            
0001B4F8                            Obj73_Display:
0001B4F8 43F9 0001 AB40             		lea	(Ani_Eggman).l,a1
0001B4FE 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001B504                            
0001B504                            loc_1864A:
0001B504 2268 0034                  		movea.l	$34(a0),a1
0001B508 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B50E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B514 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B51A 7003                       		moveq	#3,d0
0001B51C C028 0022                  		and.b	obStatus(a0),d0
0001B520 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B526 8128 0001                  		or.b	d0,obRender(a0)
0001B52A 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001B530                            ; ===========================================================================
0001B530                            
0001B530                            Obj73_TubeMain:	; Routine 8
0001B530 2268 0034                  		movea.l	$34(a0),a1
0001B534 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B53A 6600                       		bne.s	loc_18688
0001B53C 4A28 0001                  		tst.b	obRender(a0)
0001B540 6A00                       		bpl.s	Obj73_TubeDel
0001B542                            
0001B542                            loc_18688:
0001B542 217C 0001 AC80 0004        		move.l	#Map_BossItems,obMap(a0)
0001B54A 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B550 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B556 60AC                       		bra.s	loc_1864A
0001B558                            ; ===========================================================================
0001B558                            
0001B558                            Obj73_TubeDel:
0001B558 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B558 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B55E                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B55E                            ; ---------------------------------------------------------------------------
0001B55E                            ; Object 74 - lava that	Eggman drops (MZ)
0001B55E                            ; ---------------------------------------------------------------------------
0001B55E                            
0001B55E                            BossFire:
0001B55E 7000                       		moveq	#0,d0
0001B560 1028 0024                  		move.b	obRoutine(a0),d0
0001B564 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B568 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B56C 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001B572                            ; ===========================================================================
0001B572 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B574 0000                       		dc.w Obj74_Action-Obj74_Index
0001B576 0000                       		dc.w loc_18886-Obj74_Index
0001B578 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B57A                            ; ===========================================================================
0001B57A                            
0001B57A                            Obj74_Main:	; Routine 0
0001B57A 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B580 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B586 217C 0000 D3F8 0004        		move.l	#Map_Fire,obMap(a0)
0001B58E 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B594 117C 0004 0001             		move.b	#4,obRender(a0)
0001B59A 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B5A0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B5A6 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B5AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B5B0 4A28 0028                  		tst.b	obSubtype(a0)
0001B5B4 6600                       		bne.s	loc_1870A
0001B5B6 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B5BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B5C0 6000 0000                  		bra.w	loc_18886
0001B5C4                            ; ===========================================================================
0001B5C4                            
0001B5C4                            loc_1870A:
0001B5C4 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B5D4                            
0001B5D4                            Obj74_Action:	; Routine 2
0001B5D4 7000                       		moveq	#0,d0
0001B5D6 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B5DA 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B5DE 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B5E2 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001B5E8 43F9 0001 05BE             		lea	(Ani_Fire).l,a1
0001B5EE 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001B5F4 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B5FA 6200                       		bhi.s	Obj74_Delete
0001B5FC 4E75                       		rts	
0001B5FE                            ; ===========================================================================
0001B5FE                            
0001B5FE                            Obj74_Delete:
0001B5FE 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B604                            ; ===========================================================================
0001B604 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B606 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B608 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B60A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B60C                            ; ===========================================================================
0001B60C                            
0001B60C                            Obj74_Drop:
0001B60C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B612 5328 0029                  		subq.b	#1,$29(a0)
0001B616 6A00                       		bpl.s	locret_18780
0001B618 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B61E 4228 0028                  		clr.b	obSubtype(a0)
0001B622 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B628 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B62E 6100 C634                  		bsr.w	ObjFloorDist
0001B632 4A41                       		tst.w	d1
0001B634 6A00                       		bpl.s	locret_18780
0001B636 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B63A                            
0001B63A                            locret_18780:
0001B63A 4E75                       		rts	
0001B63C                            ; ===========================================================================
0001B63C                            
0001B63C                            Obj74_MakeFlame:
0001B63C 5568 000C                  		subq.w	#2,obY(a0)
0001B640 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B646 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B64C 4268 0012                  		clr.w	obVelY(a0)
0001B650 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B656 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B65C 117C 0003 0029             		move.b	#3,$29(a0)
0001B662 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001B668 6600                       		bne.s	loc_187CA
0001B66A 47D1                       		lea	(a1),a3
0001B66C 45D0                       		lea	(a0),a2
0001B66E 7003                       		moveq	#3,d0
0001B670                            
0001B670                            Obj74_Loop:
0001B670 26DA                       		move.l	(a2)+,(a3)+
0001B672 26DA                       		move.l	(a2)+,(a3)+
0001B674 26DA                       		move.l	(a2)+,(a3)+
0001B676 26DA                       		move.l	(a2)+,(a3)+
0001B678 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B67C                            
0001B67C 4469 0010                  		neg.w	obVelX(a1)
0001B680 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B684                            
0001B684                            loc_187CA:
0001B684 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B688 4E75                       		rts	
0001B68A                            
0001B68A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B68A                            
0001B68A                            
0001B68A                            Obj74_Duplicate2:
0001B68A 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001B690 6600                       		bne.s	locret_187EE
0001B692 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B698 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B69E 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B6A2 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B6A8                            
0001B6A8                            locret_187EE:
0001B6A8 4E75                       		rts	
0001B6AA                            ; End of function Obj74_Duplicate2
0001B6AA                            
0001B6AA                            ; ===========================================================================
0001B6AA                            
0001B6AA                            Obj74_Duplicate:
0001B6AA 6100 C5B8                  		bsr.w	ObjFloorDist
0001B6AE 4A41                       		tst.w	d1
0001B6B0 6A00                       		bpl.s	loc_18826
0001B6B2 3028 0008                  		move.w	obX(a0),d0
0001B6B6 0C40 1940                  		cmpi.w	#$1940,d0
0001B6BA 6E00                       		bgt.s	loc_1882C
0001B6BC 3228 0030                  		move.w	$30(a0),d1
0001B6C0 B240                       		cmp.w	d0,d1
0001B6C2 6700                       		beq.s	loc_1881E
0001B6C4 0240 0010                  		andi.w	#$10,d0
0001B6C8 0241 0010                  		andi.w	#$10,d1
0001B6CC B240                       		cmp.w	d0,d1
0001B6CE 6700                       		beq.s	loc_1881E
0001B6D0 61B8                       		bsr.s	Obj74_Duplicate2
0001B6D2 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B6D8                            
0001B6D8                            loc_1881E:
0001B6D8 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B6DE 4E75                       		rts	
0001B6E0                            ; ===========================================================================
0001B6E0                            
0001B6E0                            loc_18826:
0001B6E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6E4 4E75                       		rts	
0001B6E6                            ; ===========================================================================
0001B6E6                            
0001B6E6                            loc_1882C:
0001B6E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B6EA 4E75                       		rts	
0001B6EC                            ; ===========================================================================
0001B6EC                            
0001B6EC                            Obj74_FallEdge:
0001B6EC 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B6F2 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B6F8 3028 0008                  		move.w	obX(a0),d0
0001B6FC 9068 0032                  		sub.w	$32(a0),d0
0001B700 6A00                       		bpl.s	loc_1884A
0001B702 4440                       		neg.w	d0
0001B704                            
0001B704                            loc_1884A:
0001B704 0C40 0012                  		cmpi.w	#$12,d0
0001B708 6600                       		bne.s	loc_18856
0001B70A 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B710                            
0001B710                            loc_18856:
0001B710 6100 C552                  		bsr.w	ObjFloorDist
0001B714 4A41                       		tst.w	d1
0001B716 6A00                       		bpl.s	locret_1887E
0001B718 5328 0029                  		subq.b	#1,$29(a0)
0001B71C 6700                       		beq.s	Obj74_Delete2
0001B71E 4268 0012                  		clr.w	obVelY(a0)
0001B722 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B728 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B72E 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B734 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B738                            
0001B738                            locret_1887E:
0001B738 4E75                       		rts	
0001B73A                            ; ===========================================================================
0001B73A                            
0001B73A                            Obj74_Delete2:
0001B73A 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B740                            ; ===========================================================================
0001B740                            
0001B740                            loc_18886:	; Routine 4
0001B740 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B746 5328 0029                  		subq.b	#1,$29(a0)
0001B74A 6600                       		bne.s	Obj74_Animate
0001B74C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B752 5968 000C                  		subq.w	#4,obY(a0)
0001B756 4228 0020                  		clr.b	obColType(a0)
0001B75A                            
0001B75A                            Obj74_Animate:
0001B75A 43F9 0001 05BE             		lea	(Ani_Fire).l,a1
0001B760 4EF9 0000 C7A6             		jmp	(AnimateSprite).l
0001B766                            ; ===========================================================================
0001B766                            
0001B766                            Obj74_Delete3:	; Routine 6
0001B766 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B766 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B76C                            
0001B76C                            	Obj7A_Delete:
0001B76C 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001B772                            
0001B772                            		include	"_incObj\7A Boss - Star Light.asm"
0001B772                            ; ---------------------------------------------------------------------------
0001B772                            ; Object 7A - Eggman (SLZ)
0001B772                            ; ---------------------------------------------------------------------------
0001B772                            
0001B772                            BossStarLight:
0001B772 7000                       		moveq	#0,d0
0001B774 1028 0024                  		move.b	obRoutine(a0),d0
0001B778 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B77C 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B780                            ; ===========================================================================
0001B780 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B782 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B784 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B786 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B788 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B78A                            
0001B78A 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B78E 0401 0200                  		dc.b 4,	1, $02, $00
0001B792 0607 0200                  		dc.b 6,	7, $02, $00
0001B796 0800 0180                  		dc.b 8,	0, $01, $80
0001B79A                            ; ===========================================================================
0001B79A                            
0001B79A                            Obj7A_Main:
0001B79A 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B7A0 317C 0228 000C             		move.w	#$228,obY(a0)
0001B7A6 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B7AC 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B7B2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B7B8 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B7BE 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B7C2 2248                       		movea.l	a0,a1
0001B7C4 7203                       		moveq	#3,d1
0001B7C6 6000                       		bra.s	Obj7A_LoadBoss
0001B7C8                            ; ===========================================================================
0001B7C8                            
0001B7C8                            Obj7A_Loop:
0001B7C8 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001B7CE 6600                       		bne.s	loc_1895C
0001B7D0 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B7D4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B7DA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B7E0                            
0001B7E0                            Obj7A_LoadBoss:
0001B7E0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B7E6 4229 0025                  		clr.b	ob2ndRout(a1)
0001B7EA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B7EE 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B7F2 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B7F6 237C 0001 AB90 0004        		move.l	#Map_Eggman,obMap(a1)
0001B7FE 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B804 137C 0004 0001             		move.b	#4,obRender(a1)
0001B80A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B810 2348 0034                  		move.l	a0,$34(a1)
0001B814 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B818                            
0001B818                            loc_1895C:
0001B818 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B81C 45E8 002A                  		lea	$2A(a0),a2
0001B820 705E                       		moveq	#$5E,d0
0001B822 723E                       		moveq	#$3E,d1
0001B824                            
0001B824                            loc_18968:
0001B824 B011                       		cmp.b	(a1),d0
0001B826 6600                       		bne.s	loc_18974
0001B828 4A29 0028                  		tst.b	obSubtype(a1)
0001B82C 6700                       		beq.s	loc_18974
0001B82E 34C9                       		move.w	a1,(a2)+
0001B830                            
0001B830                            loc_18974:
0001B830 D2FC 0040                  		adda.w	#$40,a1
0001B834 51C9 FFEE                  		dbf	d1,loc_18968
0001B838                            
0001B838                            Obj7A_ShipMain:	; Routine 2
0001B838 7000                       		moveq	#0,d0
0001B83A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B83E 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B842 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B846 43F9 0001 AB40             		lea	(Ani_Eggman).l,a1
0001B84C 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001B852 7003                       		moveq	#3,d0
0001B854 C028 0022                  		and.b	obStatus(a0),d0
0001B858 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B85E 8128 0001                  		or.b	d0,obRender(a0)
0001B862 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001B868                            ; ===========================================================================
0001B868 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001B86A 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001B86C 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001B86E 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001B870 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001B872 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001B874                            ; ===========================================================================
0001B874                            
0001B874                            loc_189B8:
0001B874 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B87A 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001B880 6400                       		bcc.s	loc_189CA
0001B882 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B886                            
0001B886                            loc_189CA:
0001B886 6100 EEA4                  		bsr.w	BossMove
0001B88A 1028 003F                  		move.b	$3F(a0),d0
0001B88E 5428 003F                  		addq.b	#2,$3F(a0)
0001B892 4EB9 0000 37AE             		jsr	(CalcSine).l
0001B898 EC40                       		asr.w	#6,d0
0001B89A D068 0038                  		add.w	$38(a0),d0
0001B89E 3140 000C                  		move.w	d0,obY(a0)
0001B8A2 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B8A8 6000                       		bra.s	loc_189FE
0001B8AA                            ; ===========================================================================
0001B8AA                            
0001B8AA                            loc_189EE:
0001B8AA 6100 EE80                  		bsr.w	BossMove
0001B8AE 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B8B4 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B8BA                            
0001B8BA                            loc_189FE:
0001B8BA 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001B8C0 6400                       		bcc.s	locret_18A44
0001B8C2 4A28 0022                  		tst.b	obStatus(a0)
0001B8C6 6B00                       		bmi.s	loc_18A46
0001B8C8 4A28 0020                  		tst.b	obColType(a0)
0001B8CC 6600                       		bne.s	locret_18A44
0001B8CE 4A28 003E                  		tst.b	$3E(a0)
0001B8D2 6600                       		bne.s	loc_18A28
0001B8D4 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B8E4                            
0001B8E4                            loc_18A28:
0001B8E4 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B8E8 7000                       		moveq	#0,d0
0001B8EA 4A51                       		tst.w	(a1)
0001B8EC 6600                       		bne.s	loc_18A36
0001B8EE 303C 0EEE                  		move.w	#cWhite,d0
0001B8F2                            
0001B8F2                            loc_18A36:
0001B8F2 3280                       		move.w	d0,(a1)
0001B8F4 5328 003E                  		subq.b	#1,$3E(a0)
0001B8F8 6600                       		bne.s	locret_18A44
0001B8FA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B900                            
0001B900                            locret_18A44:
0001B900 4E75                       		rts	
0001B902                            ; ===========================================================================
0001B902                            
0001B902                            loc_18A46:
0001B902 7064                       		moveq	#100,d0
0001B904 6100 0000                  		bsr.w	AddPoints
0001B908 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001B90E 117C 0078 003C             		move.b	#$78,$3C(a0)
0001B914 4268 0010                  		clr.w	obVelX(a0)
0001B918 4E75                       		rts	
0001B91A                            ; ===========================================================================
0001B91A                            
0001B91A                            loc_18A5E:
0001B91A 3028 0030                  		move.w	$30(a0),d0
0001B91E 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B924 0828 0000 0022             		btst	#0,obStatus(a0)
0001B92A 6600                       		bne.s	loc_18A7C
0001B92C 4468 0010                  		neg.w	obVelX(a0)
0001B930 0C40 2008                  		cmpi.w	#$2008,d0
0001B934 6E00                       		bgt.s	loc_18A88
0001B936 6000                       		bra.s	loc_18A82
0001B938                            ; ===========================================================================
0001B938                            
0001B938                            loc_18A7C:
0001B938 0C40 2138                  		cmpi.w	#$2138,d0
0001B93C 6D00                       		blt.s	loc_18A88
0001B93E                            
0001B93E                            loc_18A82:
0001B93E 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B944                            
0001B944                            loc_18A88:
0001B944 3028 0008                  		move.w	8(a0),d0
0001B948 72FF                       		moveq	#-1,d1
0001B94A 7402                       		moveq	#2,d2
0001B94C 45E8 002A                  		lea	$2A(a0),a2
0001B950 7828                       		moveq	#$28,d4
0001B952 4A68 0010                  		tst.w	obVelX(a0)
0001B956 6A00                       		bpl.s	loc_18A9E
0001B958 4444                       		neg.w	d4
0001B95A                            
0001B95A                            loc_18A9E:
0001B95A 321A                       		move.w	(a2)+,d1
0001B95C 2641                       		movea.l	d1,a3
0001B95E 082B 0003 0022             		btst	#3,obStatus(a3)
0001B964 6600                       		bne.s	loc_18AB4
0001B966 362B 0008                  		move.w	8(a3),d3
0001B96A D644                       		add.w	d4,d3
0001B96C 9640                       		sub.w	d0,d3
0001B96E 6700                       		beq.s	loc_18AC0
0001B970                            
0001B970                            loc_18AB4:
0001B970 51CA FFE8                  		dbf	d2,loc_18A9E
0001B974                            
0001B974 1142 0028                  		move.b	d2,obSubtype(a0)
0001B978 6000 FF0C                  		bra.w	loc_189CA
0001B97C                            ; ===========================================================================
0001B97C                            
0001B97C                            loc_18AC0:
0001B97C 1142 0028                  		move.b	d2,obSubtype(a0)
0001B980 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B984 117C 0028 003C             		move.b	#$28,$3C(a0)
0001B98A 6000 FEFA                  		bra.w	loc_189CA
0001B98E                            ; ===========================================================================
0001B98E                            
0001B98E                            Obj7A_MakeBall:
0001B98E 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001B994 6600                       		bne.s	loc_18B36
0001B996 70FF                       		moveq	#-1,d0
0001B998 1028 0028                  		move.b	obSubtype(a0),d0
0001B99C 4880                       		ext.w	d0
0001B99E 6B00                       		bmi.s	loc_18B40
0001B9A0 5540                       		subq.w	#2,d0
0001B9A2 4440                       		neg.w	d0
0001B9A4 D040                       		add.w	d0,d0
0001B9A6 43E8 002A                  		lea	$2A(a0),a1
0001B9AA 3031 0000                  		move.w	(a1,d0.w),d0
0001B9AE 2440                       		movea.l	d0,a2
0001B9B0 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B9B4 723E                       		moveq	#$3E,d1
0001B9B6                            
0001B9B6                            loc_18AFA:
0001B9B6 B0A9 003C                  		cmp.l	$3C(a1),d0
0001B9BA 6700                       		beq.s	loc_18B40
0001B9BC D2FC 0040                  		adda.w	#$40,a1
0001B9C0 51C9 FFF4                  		dbf	d1,loc_18AFA
0001B9C4                            
0001B9C4 2F08                       		move.l	a0,-(sp)
0001B9C6 41D2                       		lea	(a2),a0
0001B9C8 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001B9CE 205F                       		movea.l	(sp)+,a0
0001B9D0 6600                       		bne.s	loc_18B40
0001B9D2 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001B9D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B9DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B9E2 0669 0020 000C             		addi.w	#$20,obY(a1)
0001B9E8 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001B9EE 234A 003C                  		move.l	a2,$3C(a1)
0001B9F2                            
0001B9F2                            loc_18B36:
0001B9F2 5328 003C                  		subq.b	#1,$3C(a0)
0001B9F6 6700                       		beq.s	loc_18B40
0001B9F8 6000 FEC0                  		bra.w	loc_189FE
0001B9FC                            ; ===========================================================================
0001B9FC                            
0001B9FC                            loc_18B40:
0001B9FC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BA00 6000 FE84                  		bra.w	loc_189CA
0001BA04                            ; ===========================================================================
0001BA04                            
0001BA04                            loc_18B48:
0001BA04 5328 003C                  		subq.b	#1,$3C(a0)
0001BA08 6B00                       		bmi.s	loc_18B52
0001BA0A 6000 ECDE                  		bra.w	BossDefeated
0001BA0E                            ; ===========================================================================
0001BA0E                            
0001BA0E                            loc_18B52:
0001BA0E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA12 4268 0012                  		clr.w	obVelY(a0)
0001BA16 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BA1C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BA22 4268 0010                  		clr.w	obVelX(a0)
0001BA26 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BA2C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BA30 6600                       		bne.s	loc_18B7C
0001BA32 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BA38                            
0001BA38                            loc_18B7C:
0001BA38 6000 FE80                  		bra.w	loc_189FE
0001BA3C                            ; ===========================================================================
0001BA3C                            
0001BA3C                            loc_18B80:
0001BA3C 5228 003C                  		addq.b	#1,$3C(a0)
0001BA40 6700                       		beq.s	loc_18B90
0001BA42 6A00                       		bpl.s	loc_18B96
0001BA44 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BA4A 6000                       		bra.s	loc_18BC2
0001BA4C                            ; ===========================================================================
0001BA4C                            
0001BA4C                            loc_18B90:
0001BA4C 4268 0012                  		clr.w	obVelY(a0)
0001BA50 6000                       		bra.s	loc_18BC2
0001BA52                            ; ===========================================================================
0001BA52                            
0001BA52                            loc_18B96:
0001BA52 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BA58 6500                       		bcs.s	loc_18BAE
0001BA5A 6700                       		beq.s	loc_18BB4
0001BA5C 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BA62 6500                       		bcs.s	loc_18BC2
0001BA64 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA68 6000                       		bra.s	loc_18BC2
0001BA6A                            ; ===========================================================================
0001BA6A                            
0001BA6A                            loc_18BAE:
0001BA6A 5168 0012                  		subq.w	#8,obVelY(a0)
0001BA6E 6000                       		bra.s	loc_18BC2
0001BA70                            ; ===========================================================================
0001BA70                            
0001BA70                            loc_18BB4:
0001BA70 4268 0012                          	clr.w    obVelY(a0)
0001BA74 4A38 FE2D                          	tst.b     (v_invinc).w
0001BA78 6600                               	bne.s   @boss_invinc
0001BA7A                            
0001BA7A 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BA7E 6000 0000                          	bra.w      @boss_play
0001BA82                            
0001BA82                            	@boss_invinc:
0001BA82 103C 0000                          	move.b #bgm_Invincible,d0
0001BA86                            
0001BA86                            	@boss_play:
0001BA86 4EB8 0FC6                          	jsr PlaySound
0001BA8A                            
0001BA8A                            loc_18BC2:
0001BA8A 6000 FE1E                  		bra.w	loc_189EE
0001BA8E                            ; ===========================================================================
0001BA8E                            
0001BA8E                            loc_18BC6:
0001BA8E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BA94 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BA9A 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BAA0 6400                       		bcc.s	loc_18BE0
0001BAA2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BAA6 6000                       		bra.s	loc_18BE8
0001BAA8                            ; ===========================================================================
0001BAA8                            
0001BAA8                            loc_18BE0:
0001BAA8 4A28 0001                  		tst.b	obRender(a0)
0001BAAC 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BAB0                            
0001BAB0                            loc_18BE8:
0001BAB0 6100 EC7A                  		bsr.w	BossMove
0001BAB4 6000 FDD0                  		bra.w	loc_189CA
0001BAB8                            ; ===========================================================================
0001BAB8                            
0001BAB8                            Obj7A_FaceMain:	; Routine 4
0001BAB8 7000                       		moveq	#0,d0
0001BABA 7201                       		moveq	#1,d1
0001BABC 2268 0034                  		movea.l	$34(a0),a1
0001BAC0 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BAC4 0C00 0006                  		cmpi.b	#6,d0
0001BAC8 6B00                       		bmi.s	loc_18C06
0001BACA 720A                       		moveq	#$A,d1
0001BACC 6000                       		bra.s	loc_18C1A
0001BACE                            ; ===========================================================================
0001BACE                            
0001BACE                            loc_18C06:
0001BACE 4A29 0020                  		tst.b	obColType(a1)
0001BAD2 6600                       		bne.s	loc_18C10
0001BAD4 7205                       		moveq	#5,d1
0001BAD6 6000                       		bra.s	loc_18C1A
0001BAD8                            ; ===========================================================================
0001BAD8                            
0001BAD8                            loc_18C10:
0001BAD8 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BADE 6500                       		bcs.s	loc_18C1A
0001BAE0 7204                       		moveq	#4,d1
0001BAE2                            
0001BAE2                            loc_18C1A:
0001BAE2 1141 001C                  		move.b	d1,obAnim(a0)
0001BAE6 0C00 000A                  		cmpi.b	#$A,d0
0001BAEA 6600                       		bne.s	loc_18C32
0001BAEC 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BAF2 4A28 0001                  		tst.b	obRender(a0)
0001BAF6 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BAFA                            
0001BAFA                            loc_18C32:
0001BAFA 6000                       		bra.s	loc_18C6C
0001BAFC                            ; ===========================================================================
0001BAFC                            
0001BAFC                            Obj7A_FlameMain:; Routine 6
0001BAFC 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BB02 2268 0034                  		movea.l	$34(a0),a1
0001BB06 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BB0C 6600                       		bne.s	loc_18C56
0001BB0E 4A28 0001                  		tst.b	obRender(a0)
0001BB12 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BB16 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BB1C 6000                       		bra.s	loc_18C6C
0001BB1E                            ; ===========================================================================
0001BB1E                            
0001BB1E                            loc_18C56:
0001BB1E 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BB24 6E00                       		bgt.s	loc_18C6C
0001BB26 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BB2C 6D00                       		blt.s	loc_18C6C
0001BB2E 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BB34                            
0001BB34                            loc_18C6C:
0001BB34 43F9 0001 AB40             		lea	(Ani_Eggman).l,a1
0001BB3A 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001BB40                            
0001BB40                            loc_18C78:
0001BB40 2268 0034                  		movea.l	$34(a0),a1
0001BB44 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BB4A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BB50 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BB56 7003                       		moveq	#3,d0
0001BB58 C028 0022                  		and.b	obStatus(a0),d0
0001BB5C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BB62 8128 0001                  		or.b	d0,obRender(a0)
0001BB66 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001BB6C                            ; ===========================================================================
0001BB6C                            
0001BB6C                            Obj7A_TubeMain:	; Routine 8
0001BB6C 2268 0034                  		movea.l	$34(a0),a1
0001BB70 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BB76 6600                       		bne.s	loc_18CB8
0001BB78 4A28 0001                  		tst.b	obRender(a0)
0001BB7C 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BB80                            
0001BB80                            loc_18CB8:
0001BB80 217C 0001 AC80 0004        		move.l	#Map_BossItems,obMap(a0)
0001BB88 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BB8E 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BB94 60AA                       		bra.s	loc_18C78
0001BB94 60AA                       		bra.s	loc_18C78
0001BB96                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BB96                            ; ---------------------------------------------------------------------------
0001BB96                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BB96                            ; ---------------------------------------------------------------------------
0001BB96                            
0001BB96                            BossSpikeball:
0001BB96 7000                       		moveq	#0,d0
0001BB98 1028 0024                  		move.b	obRoutine(a0),d0
0001BB9C 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BBA0 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BBA4 3028 0030                  		move.w	$30(a0),d0
0001BBA8 0240 FF80                  		andi.w	#$FF80,d0
0001BBAC 3238 F700                  		move.w	(v_screenposx).w,d1
0001BBB0 0441 0080                  		subi.w	#$80,d1
0001BBB4 0241 FF80                  		andi.w	#$FF80,d1
0001BBB8 9041                       		sub.w	d1,d0
0001BBBA 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BBBE 0C40 0280                  		cmpi.w	#$280,d0
0001BBC2 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BBC6 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001BBCC                            ; ===========================================================================
0001BBCC 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BBCE 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BBD0 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BBD2 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BBD4 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BBD6 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BBD8                            ; ===========================================================================
0001BBD8                            
0001BBD8                            Obj7B_Main:	; Routine 0
0001BBD8 217C 0001 3B6E 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BBE0 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BBE6 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BBEC 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BBF2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BBF8 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BBFE 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BC04 2268 003C                  		movea.l	$3C(a0),a1
0001BC08 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BC0E 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BC14 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BC1A 3028 0008                  		move.w	obX(a0),d0
0001BC1E B069 0008                  		cmp.w	obX(a1),d0
0001BC22 6E00                       		bgt.s	loc_18D68
0001BC24 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BC2A 117C 0002 003A             		move.b	#2,$3A(a0)
0001BC30                            
0001BC30                            loc_18D68:
0001BC30 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BC34                            
0001BC34                            Obj7B_Fall:	; Routine 2
0001BC34 4EB9 0000 F6AE             		jsr	(ObjectFall).l
0001BC3A 2268 003C                  		movea.l	$3C(a0),a1
0001BC3E 45F9 0000 0000             		lea	(word_19018).l,a2
0001BC44 7000                       		moveq	#0,d0
0001BC46 1029 001A                  		move.b	obFrame(a1),d0
0001BC4A 3228 0008                  		move.w	8(a0),d1
0001BC4E 9268 0030                  		sub.w	$30(a0),d1
0001BC52 6400                       		bcc.s	loc_18D8E
0001BC54 5440                       		addq.w	#2,d0
0001BC56                            
0001BC56                            loc_18D8E:
0001BC56 D040                       		add.w	d0,d0
0001BC58 3228 0034                  		move.w	$34(a0),d1
0001BC5C D272 0000                  		add.w	(a2,d0.w),d1
0001BC60 B268 000C                  		cmp.w	obY(a0),d1
0001BC64 6E00                       		bgt.s	locret_18DC4
0001BC66 2268 003C                  		movea.l	$3C(a0),a1
0001BC6A 7202                       		moveq	#2,d1
0001BC6C 0828 0000 0022             		btst	#0,obStatus(a0)
0001BC72 6700                       		beq.s	loc_18DAE
0001BC74 7200                       		moveq	#0,d1
0001BC76                            
0001BC76                            loc_18DAE:
0001BC76 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BC7C 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BC82 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BC88 6000 0000                  		bra.w	loc_18FA2
0001BC8C                            ; ===========================================================================
0001BC8C                            
0001BC8C                            locret_18DC4:
0001BC8C 4E75                       		rts	
0001BC8E                            ; ===========================================================================
0001BC8E                            
0001BC8E                            loc_18DC6:	; Routine 4
0001BC8E 2268 003C                  		movea.l	$3C(a0),a1
0001BC92 7000                       		moveq	#0,d0
0001BC94 1028 003A                  		move.b	$3A(a0),d0
0001BC98 9029 003A                  		sub.b	$3A(a1),d0
0001BC9C 6700                       		beq.s	loc_18E2A
0001BC9E 6400                       		bcc.s	loc_18DDA
0001BCA0 4400                       		neg.b	d0
0001BCA2                            
0001BCA2                            loc_18DDA:
0001BCA2 323C F7E8                  		move.w	#-$818,d1
0001BCA6 343C FEEC                  		move.w	#-$114,d2
0001BCAA 0C00 0001                  		cmpi.b	#1,d0
0001BCAE 6700                       		beq.s	loc_18E00
0001BCB0 323C F6A0                  		move.w	#-$960,d1
0001BCB4 343C FF0C                  		move.w	#-$F4,d2
0001BCB8 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BCBE 6D00                       		blt.s	loc_18E00
0001BCC0 323C F5E0                  		move.w	#-$A20,d1
0001BCC4 343C FF80                  		move.w	#-$80,d2
0001BCC8                            
0001BCC8                            loc_18E00:
0001BCC8 3141 0012                  		move.w	d1,obVelY(a0)
0001BCCC 3142 0010                  		move.w	d2,obVelX(a0)
0001BCD0 3028 0008                  		move.w	obX(a0),d0
0001BCD4 9068 0030                  		sub.w	$30(a0),d0
0001BCD8 6400                       		bcc.s	loc_18E16
0001BCDA 4468 0010                  		neg.w	obVelX(a0)
0001BCDE                            
0001BCDE                            loc_18E16:
0001BCDE 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BCE4 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BCEA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BCEE 6000 0000                  		bra.w	loc_18EAA
0001BCF2                            ; ===========================================================================
0001BCF2                            
0001BCF2                            loc_18E2A:
0001BCF2 45F9 0000 0000             		lea	(word_19018).l,a2
0001BCF8 7000                       		moveq	#0,d0
0001BCFA 1029 001A                  		move.b	obFrame(a1),d0
0001BCFE 343C 0028                  		move.w	#$28,d2
0001BD02 3228 0008                  		move.w	obX(a0),d1
0001BD06 9268 0030                  		sub.w	$30(a0),d1
0001BD0A 6400                       		bcc.s	loc_18E48
0001BD0C 4442                       		neg.w	d2
0001BD0E 5440                       		addq.w	#2,d0
0001BD10                            
0001BD10                            loc_18E48:
0001BD10 D040                       		add.w	d0,d0
0001BD12 3228 0034                  		move.w	$34(a0),d1
0001BD16 D272 0000                  		add.w	(a2,d0.w),d1
0001BD1A 3141 000C                  		move.w	d1,obY(a0)
0001BD1E D468 0030                  		add.w	$30(a0),d2
0001BD22 3142 0008                  		move.w	d2,obX(a0)
0001BD26 4268 000E                  		clr.w	obY+2(a0)
0001BD2A 4268 000A                  		clr.w	obX+2(a0)
0001BD2E 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BD32 6600                       		bne.s	loc_18E7A
0001BD34 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BD3A 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BD40 4E75                       		rts	
0001BD42                            ; ===========================================================================
0001BD42                            
0001BD42                            loc_18E7A:
0001BD42 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BD48 6600                       		bne.s	loc_18E88
0001BD4A 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BD50                            
0001BD50                            loc_18E88:
0001BD50 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BD56 6600                       		bne.s	loc_18E96
0001BD58 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BD5E                            
0001BD5E                            loc_18E96:
0001BD5E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BD62 6E00                       		bgt.s	locret_18EA8
0001BD64 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BD6A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BD70                            
0001BD70                            locret_18EA8:
0001BD70 4E75                       		rts	
0001BD72                            ; ===========================================================================
0001BD72                            
0001BD72                            loc_18EAA:	; Routine 6
0001BD72 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BD76 707A                       		moveq	#id_BossStarLight,d0
0001BD78 7240                       		moveq	#$40,d1
0001BD7A 743E                       		moveq	#$3E,d2
0001BD7C                            
0001BD7C                            loc_18EB4:
0001BD7C B011                       		cmp.b	(a1),d0
0001BD7E 6700                       		beq.s	loc_18EC0
0001BD80 D2C1                       		adda.w	d1,a1
0001BD82 51CA FFF8                  		dbf	d2,loc_18EB4
0001BD86                            
0001BD86 6000                       		bra.s	loc_18F38
0001BD88                            ; ===========================================================================
0001BD88                            
0001BD88                            loc_18EC0:
0001BD88 3029 0008                  		move.w	obX(a1),d0
0001BD8C 3229 000C                  		move.w	obY(a1),d1
0001BD90 3428 0008                  		move.w	obX(a0),d2
0001BD94 3628 000C                  		move.w	obY(a0),d3
0001BD98 45FA 0000                  		lea	byte_19022(pc),a2
0001BD9C 47FA 0000                  		lea	byte_19026(pc),a3
0001BDA0 181A                       		move.b	(a2)+,d4
0001BDA2 4884                       		ext.w	d4
0001BDA4 D044                       		add.w	d4,d0
0001BDA6 181B                       		move.b	(a3)+,d4
0001BDA8 4884                       		ext.w	d4
0001BDAA D444                       		add.w	d4,d2
0001BDAC B440                       		cmp.w	d0,d2
0001BDAE 6500                       		bcs.s	loc_18F38
0001BDB0 181A                       		move.b	(a2)+,d4
0001BDB2 4884                       		ext.w	d4
0001BDB4 D044                       		add.w	d4,d0
0001BDB6 181B                       		move.b	(a3)+,d4
0001BDB8 4884                       		ext.w	d4
0001BDBA D444                       		add.w	d4,d2
0001BDBC B042                       		cmp.w	d2,d0
0001BDBE 6500                       		bcs.s	loc_18F38
0001BDC0 181A                       		move.b	(a2)+,d4
0001BDC2 4884                       		ext.w	d4
0001BDC4 D244                       		add.w	d4,d1
0001BDC6 181B                       		move.b	(a3)+,d4
0001BDC8 4884                       		ext.w	d4
0001BDCA D644                       		add.w	d4,d3
0001BDCC B641                       		cmp.w	d1,d3
0001BDCE 6500                       		bcs.s	loc_18F38
0001BDD0 181A                       		move.b	(a2)+,d4
0001BDD2 4884                       		ext.w	d4
0001BDD4 D244                       		add.w	d4,d1
0001BDD6 181B                       		move.b	(a3)+,d4
0001BDD8 4884                       		ext.w	d4
0001BDDA D644                       		add.w	d4,d3
0001BDDC B243                       		cmp.w	d3,d1
0001BDDE 6500                       		bcs.s	loc_18F38
0001BDE0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BDE4 4268 0028                  		clr.w	obSubtype(a0)
0001BDE8 4229 0020                  		clr.b	obColType(a1)
0001BDEC 5329 0021                  		subq.b	#1,obColProp(a1)
0001BDF0 6600                       		bne.s	loc_18F38
0001BDF2 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BDF8 4268 0010                  		clr.w	obVelX(a0)
0001BDFC 4268 0012                  		clr.w	obVelY(a0)
0001BE00                            
0001BE00                            loc_18F38:
0001BE00 4A68 0012                  		tst.w	obVelY(a0)
0001BE04 6A00                       		bpl.s	loc_18F5C
0001BE06 4EB9 0000 F6AE             		jsr	(ObjectFall).l
0001BE0C 3028 0034                  		move.w	$34(a0),d0
0001BE10 0440 002F                  		subi.w	#$2F,d0
0001BE14 B068 000C                  		cmp.w	obY(a0),d0
0001BE18 6E00                       		bgt.s	loc_18F58
0001BE1A 4EB9 0000 F6AE             		jsr	(ObjectFall).l
0001BE20                            
0001BE20                            loc_18F58:
0001BE20 6000 FF20                  		bra.w	loc_18E7A
0001BE24                            ; ===========================================================================
0001BE24                            
0001BE24                            loc_18F5C:
0001BE24 4EB9 0000 F6AE             		jsr	(ObjectFall).l
0001BE2A 2268 003C                  		movea.l	$3C(a0),a1
0001BE2E 45F9 0000 0000             		lea	(word_19018).l,a2
0001BE34 7000                       		moveq	#0,d0
0001BE36 1029 001A                  		move.b	obFrame(a1),d0
0001BE3A 3228 0008                  		move.w	obX(a0),d1
0001BE3E 9268 0030                  		sub.w	$30(a0),d1
0001BE42 6400                       		bcc.s	loc_18F7E
0001BE44 5440                       		addq.w	#2,d0
0001BE46                            
0001BE46                            loc_18F7E:
0001BE46 D040                       		add.w	d0,d0
0001BE48 3228 0034                  		move.w	$34(a0),d1
0001BE4C D272 0000                  		add.w	(a2,d0.w),d1
0001BE50 B268 000C                  		cmp.w	obY(a0),d1
0001BE54 6ECA                       		bgt.s	loc_18F58
0001BE56 2268 003C                  		movea.l	$3C(a0),a1
0001BE5A 7202                       		moveq	#2,d1
0001BE5C 4A68 0010                  		tst.w	obVelX(a0)
0001BE60 6B00                       		bmi.s	loc_18F9C
0001BE62 7200                       		moveq	#0,d1
0001BE64                            
0001BE64                            loc_18F9C:
0001BE64 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001BE6A                            
0001BE6A                            loc_18FA2:
0001BE6A 1341 003A                  		move.b	d1,$3A(a1)
0001BE6E 1141 003A                  		move.b	d1,$3A(a0)
0001BE72 B229 001A                  		cmp.b	obFrame(a1),d1
0001BE76 6700                       		beq.s	loc_19008
0001BE78 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001BE7E 6700                       		beq.s	loc_19008
0001BE80 4229 0025                  		clr.b	ob2ndRout(a1)
0001BE84 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001BE8A 45F8 D000                  		lea	(v_objspace).w,a2
0001BE8E 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001BE94 446A 0012                  		neg.w	obVelY(a2)
0001BE98 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001BE9E 6600                       		bne.s	loc_18FDC
0001BEA0 E0EA 0012                  		asr	obVelY(a2)
0001BEA4                            
0001BEA4                            loc_18FDC:
0001BEA4 08EA 0001 0022             		bset	#1,obStatus(a2)
0001BEAA 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001BEB0 422A 003C                  		clr.b	$3C(a2)
0001BEB4 2F08                       		move.l	a0,-(sp)
0001BEB6 41D2                       		lea	(a2),a0
0001BEB8 4EB9 0001 5D54             		jsr	(Sonic_ChkRoll).l
0001BEBE 205F                       		movea.l	(sp)+,a0
0001BEC0 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001BED0                            
0001BED0                            loc_19008:
0001BED0 4268 0010                  		clr.w	obVelX(a0)
0001BED4 4268 0012                  		clr.w	obVelY(a0)
0001BED8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BEDC 6000 FE64                  		bra.w	loc_18E7A
0001BEE0                            ; ===========================================================================
0001BEE0 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001BEEA                            		even
0001BEEA E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001BEEE                            		even
0001BEEE 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001BEF2                            		even
0001BEF2                            ; ===========================================================================
0001BEF2                            
0001BEF2                            Obj7B_Explode:	; Routine 8
0001BEF2 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001BEF6 4228 0024                  		clr.b	obRoutine(a0)
0001BEFA 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001BF00 6700                       		beq.s	Obj7B_MakeFrag
0001BF02 4E75                       		rts	
0001BF04                            ; ===========================================================================
0001BF04                            
0001BF04                            Obj7B_MakeFrag:
0001BF04 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001BF0A 7203                       		moveq	#3,d1
0001BF0C 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001BF10                            
0001BF10                            Obj7B_Loop:
0001BF10 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001BF16 6600                       		bne.s	loc_1909A
0001BF18 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001BF1C 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001BF22 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001BF2A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001BF30 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001BF36 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BF3C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BF42 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001BF46 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001BF4A 137C 0098 0020             		move.b	#$98,obColType(a1)
0001BF50 0029 0004 0001             		ori.b	#4,obRender(a1)
0001BF56 08E9 0007 0001             		bset	#7,obRender(a1)
0001BF5C 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001BF62                            
0001BF62                            loc_1909A:
0001BF62 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001BF66                            
0001BF66 4E75                       		rts	
0001BF68                            ; ===========================================================================
0001BF68 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001BF6C FF60 FDC0                  		dc.w -$A0, -$240
0001BF70 0100 FCC0                  		dc.w $100, -$340
0001BF74 00A0 FDC0                  		dc.w $A0, -$240
0001BF78                            ; ===========================================================================
0001BF78                            
0001BF78                            Obj7B_MoveFrag:	; Routine $A
0001BF78 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001BF7E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BF84 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001BF8A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BF90 7004                       		moveq	#4,d0
0001BF92 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001BF96 E448                       		lsr.w	#2,d0
0001BF98 1140 001A                  		move.b	d0,obFrame(a0)
0001BF9C 4A28 0001                  		tst.b	1(a0)
0001BFA0 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001BFA4 4E75                       		rts	
0001BFA4 4E75                       		rts	
0001BFA6                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001BFA6                            ; ---------------------------------------------------------------------------
0001BFA6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001BFA6                            ; ---------------------------------------------------------------------------
0001BFA6                            Map_BSBall_internal:
0001BFA6 0000                       		dc.w @fireball1-Map_BSBall_internal
0001BFA8 0000                       		dc.w @fireball2-Map_BSBall_internal
0001BFAA 01                         @fireball1:	dc.b 1
0001BFAB FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001BFB0 01                         @fireball2:	dc.b 1
0001BFB1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001BFB6                            		even
0001BFB6                            		even
0001BFB6                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001BFB6                            ; ---------------------------------------------------------------------------
0001BFB6                            ; Object 75 - Eggman (SYZ)
0001BFB6                            ; ---------------------------------------------------------------------------
0001BFB6                            
0001BFB6                            BossSpringYard:
0001BFB6 7000                       		moveq	#0,d0
0001BFB8 1028 0024                  		move.b	obRoutine(a0),d0
0001BFBC 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001BFC0 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001BFC4                            ; ===========================================================================
0001BFC4 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001BFC6 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001BFC8 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001BFCA 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001BFCC 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001BFCE                            
0001BFCE 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001BFD2 0401 0280                  		dc.b 4,	1, $02, $80
0001BFD6 0607 0280                  		dc.b 6,	7, $02, $80
0001BFDA 0800 0280                  		dc.b 8,	0, $02, $80
0001BFDE                            ; ===========================================================================
0001BFDE                            
0001BFDE                            Obj75_Main:	; Routine 0
0001BFDE 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001BFE4 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001BFEA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BFF0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BFF6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BFFC 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C002 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C006 2248                       		movea.l	a0,a1
0001C008 7203                       		moveq	#3,d1
0001C00A 6000                       		bra.s	Obj75_LoadBoss
0001C00C                            ; ===========================================================================
0001C00C                            
0001C00C                            Obj75_Loop:
0001C00C 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001C012 6600                       		bne.s	Obj75_ShipMain
0001C014 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C018 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C01E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C024                            
0001C024                            Obj75_LoadBoss:
0001C024 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C02A 4229 0025                  		clr.b	ob2ndRout(a1)
0001C02E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C032 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C036 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C03A 237C 0001 AB90 0004        		move.l	#Map_Eggman,obMap(a1)
0001C042 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C048 137C 0004 0001             		move.b	#4,obRender(a1)
0001C04E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C054 2348 0034                  		move.l	a0,$34(a1)
0001C058 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C05C                            
0001C05C                            Obj75_ShipMain:	; Routine 2
0001C05C 7000                       		moveq	#0,d0
0001C05E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C062 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C066 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C06A 43F9 0001 AB40             		lea	(Ani_Eggman).l,a1
0001C070 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001C076 7003                       		moveq	#3,d0
0001C078 C028 0022                  		and.b	obStatus(a0),d0
0001C07C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C082 8128 0001                  		or.b	d0,obRender(a0)
0001C086 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001C08C                            ; ===========================================================================
0001C08C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C090 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C094 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C098                            ; ===========================================================================
0001C098                            
0001C098                            loc_191CC:
0001C098 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C09E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C0A4 6400                       		bcc.s	loc_191DE
0001C0A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C0AA                            
0001C0AA                            loc_191DE:
0001C0AA 1028 003F                  		move.b	$3F(a0),d0
0001C0AE 5428 003F                  		addq.b	#2,$3F(a0)
0001C0B2 4EB9 0000 37AE             		jsr	(CalcSine).l
0001C0B8 E440                       		asr.w	#2,d0
0001C0BA 3140 0012                  		move.w	d0,obVelY(a0)
0001C0BE                            
0001C0BE                            loc_191F2:
0001C0BE 6100 E66C                  		bsr.w	BossMove
0001C0C2 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C0C8 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C0CE                            
0001C0CE                            loc_19202:
0001C0CE 3028 0008                  		move.w	8(a0),d0
0001C0D2 0440 2C00                  		subi.w	#$2C00,d0
0001C0D6 EA48                       		lsr.w	#5,d0
0001C0D8 1140 0034                  		move.b	d0,$34(a0)
0001C0DC 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C0E2 6400                       		bcc.s	locret_19256
0001C0E4 4A28 0022                  		tst.b	obStatus(a0)
0001C0E8 6B00                       		bmi.s	loc_19258
0001C0EA 4A28 0020                  		tst.b	obColType(a0)
0001C0EE 6600                       		bne.s	locret_19256
0001C0F0 4A28 003E                  		tst.b	$3E(a0)
0001C0F4 6600                       		bne.s	loc_1923A
0001C0F6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C106                            
0001C106                            loc_1923A:
0001C106 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C10A 7000                       		moveq	#0,d0
0001C10C 4A51                       		tst.w	(a1)
0001C10E 6600                       		bne.s	loc_19248
0001C110 303C 0EEE                  		move.w	#cWhite,d0
0001C114                            
0001C114                            loc_19248:
0001C114 3280                       		move.w	d0,(a1)
0001C116 5328 003E                  		subq.b	#1,$3E(a0)
0001C11A 6600                       		bne.s	locret_19256
0001C11C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C122                            
0001C122                            locret_19256:
0001C122 4E75                       		rts	
0001C124                            ; ===========================================================================
0001C124                            
0001C124                            loc_19258:
0001C124 7064                       		moveq	#100,d0
0001C126 6100 0000                  		bsr.w	AddPoints
0001C12A 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C130 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C136 4268 0010                  		clr.w	obVelX(a0)
0001C13A 4E75                       		rts	
0001C13C                            ; ===========================================================================
0001C13C                            
0001C13C                            loc_19270:
0001C13C 3028 0030                  		move.w	$30(a0),d0
0001C140 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C146 0828 0000 0022             		btst	#0,obStatus(a0)
0001C14C 6600                       		bne.s	loc_1928E
0001C14E 4468 0010                  		neg.w	obVelX(a0)
0001C152 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C156 6E00                       		bgt.s	loc_1929E
0001C158 6000                       		bra.s	loc_19294
0001C15A                            ; ===========================================================================
0001C15A                            
0001C15A                            loc_1928E:
0001C15A 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C15E 6D00                       		blt.s	loc_1929E
0001C160                            
0001C160                            loc_19294:
0001C160 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C166 4228 003D                  		clr.b	$3D(a0)
0001C16A                            
0001C16A                            loc_1929E:
0001C16A 0440 2C10                  		subi.w	#$2C10,d0
0001C16E 0240 001F                  		andi.w	#$1F,d0
0001C172 0440 001F                  		subi.w	#$1F,d0
0001C176 6A00                       		bpl.s	loc_192AE
0001C178 4440                       		neg.w	d0
0001C17A                            
0001C17A                            loc_192AE:
0001C17A 5340                       		subq.w	#1,d0
0001C17C 6E00                       		bgt.s	loc_192E8
0001C17E 4A28 003D                  		tst.b	$3D(a0)
0001C182 6600                       		bne.s	loc_192E8
0001C184 3238 D008                  		move.w	(v_player+obX).w,d1
0001C188 0441 2C00                  		subi.w	#$2C00,d1
0001C18C EA41                       		asr.w	#5,d1
0001C18E B228 0034                  		cmp.b	$34(a0),d1
0001C192 6600                       		bne.s	loc_192E8
0001C194 7000                       		moveq	#0,d0
0001C196 1028 0034                  		move.b	$34(a0),d0
0001C19A EB40                       		asl.w	#5,d0
0001C19C 0640 2C10                  		addi.w	#$2C10,d0
0001C1A0 3140 0030                  		move.w	d0,$30(a0)
0001C1A4 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C1A8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C1AC 4268 0028                  		clr.w	obSubtype(a0)
0001C1B0 4268 0010                  		clr.w	obVelX(a0)
0001C1B4                            
0001C1B4                            loc_192E8:
0001C1B4 6000 FEF4                  		bra.w	loc_191DE
0001C1B8                            ; ===========================================================================
0001C1B8                            
0001C1B8                            loc_192EC:
0001C1B8 7000                       		moveq	#0,d0
0001C1BA 1028 0028                  		move.b	obSubtype(a0),d0
0001C1BE 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C1C2 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C1C6                            ; ===========================================================================
0001C1C6 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C1C8 0000                       		dc.w loc_19348-off_192FA
0001C1CA 0000                       		dc.w loc_1938E-off_192FA
0001C1CC 0000                       		dc.w loc_193D0-off_192FA
0001C1CE                            ; ===========================================================================
0001C1CE                            
0001C1CE                            loc_19302:
0001C1CE 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C1D4 3028 0038                  		move.w	$38(a0),d0
0001C1D8 0C40 0556                  		cmpi.w	#$556,d0
0001C1DC 6500                       		bcs.s	loc_19344
0001C1DE 317C 0556 0038             		move.w	#$556,$38(a0)
0001C1E4 4268 003C                  		clr.w	$3C(a0)
0001C1E8 70FF                       		moveq	#-1,d0
0001C1EA 3028 0036                  		move.w	$36(a0),d0
0001C1EE 6700                       		beq.s	loc_1933C
0001C1F0 2240                       		movea.l	d0,a1
0001C1F2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C1F8 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C1FE 2348 0034                  		move.l	a0,$34(a1)
0001C202 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C208                            
0001C208                            loc_1933C:
0001C208 4268 0012                  		clr.w	obVelY(a0)
0001C20C 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C210                            
0001C210                            loc_19344:
0001C210 6000 FEAC                  		bra.w	loc_191F2
0001C214                            ; ===========================================================================
0001C214                            
0001C214                            loc_19348:
0001C214 5368 003C                  		subq.w	#1,$3C(a0)
0001C218 6A00                       		bpl.s	loc_19366
0001C21A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C21E 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C224 4A68 0036                  		tst.w	$36(a0)
0001C228 6600                       		bne.s	loc_19362
0001C22A E0E8 0012                  		asr	obVelY(a0)
0001C22E                            
0001C22E                            loc_19362:
0001C22E 7000                       		moveq	#0,d0
0001C230 6000                       		bra.s	loc_1937C
0001C232                            ; ===========================================================================
0001C232                            
0001C232                            loc_19366:
0001C232 7000                       		moveq	#0,d0
0001C234 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C23A 6E00                       		bgt.s	loc_1937C
0001C23C 7002                       		moveq	#2,d0
0001C23E 0828 0001 003D             		btst	#1,$3D(a0)
0001C244 6700                       		beq.s	loc_1937C
0001C246 4440                       		neg.w	d0
0001C248                            
0001C248                            loc_1937C:
0001C248 D068 0038                  		add.w	$38(a0),d0
0001C24C 3140 000C                  		move.w	d0,obY(a0)
0001C250 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C256 6000 FE76                  		bra.w	loc_19202
0001C25A                            ; ===========================================================================
0001C25A                            
0001C25A                            loc_1938E:
0001C25A 303C 04DA                  		move.w	#$4DA,d0
0001C25E 4A68 0036                  		tst.w	$36(a0)
0001C262 6700                       		beq.s	loc_1939C
0001C264 0440 0018                  		subi.w	#$18,d0
0001C268                            
0001C268                            loc_1939C:
0001C268 B068 0038                  		cmp.w	$38(a0),d0
0001C26C 6D00                       		blt.s	loc_193BE
0001C26E 317C 0008 003C             		move.w	#8,$3C(a0)
0001C274 4A68 0036                  		tst.w	$36(a0)
0001C278 6700                       		beq.s	loc_193B4
0001C27A 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C280                            
0001C280                            loc_193B4:
0001C280 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C284 4268 0012                  		clr.w	obVelY(a0)
0001C288 6000                       		bra.s	loc_193CC
0001C28A                            ; ===========================================================================
0001C28A                            
0001C28A                            loc_193BE:
0001C28A 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C290 6C00                       		bge.s	loc_193CC
0001C292 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C298                            
0001C298                            loc_193CC:
0001C298 6000 FE24                  		bra.w	loc_191F2
0001C29C                            ; ===========================================================================
0001C29C                            
0001C29C                            loc_193D0:
0001C29C 5368 003C                  		subq.w	#1,$3C(a0)
0001C2A0 6E00                       		bgt.s	loc_19406
0001C2A2 6B00                       		bmi.s	loc_193EE
0001C2A4 70FF                       		moveq	#-1,d0
0001C2A6 3028 0036                  		move.w	$36(a0),d0
0001C2AA 6700                       		beq.s	loc_193E8
0001C2AC 2240                       		movea.l	d0,a1
0001C2AE 137C 000A 0029             		move.b	#$A,$29(a1)
0001C2B4                            
0001C2B4                            loc_193E8:
0001C2B4 4268 0036                  		clr.w	$36(a0)
0001C2B8 6000                       		bra.s	loc_19406
0001C2BA                            ; ===========================================================================
0001C2BA                            
0001C2BA                            loc_193EE:
0001C2BA 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C2C0 6600                       		bne.s	loc_19406
0001C2C2 4228 0029                  		clr.b	$29(a0)
0001C2C6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C2CA 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C2D0 6000                       		bra.s	loc_19446
0001C2D2                            ; ===========================================================================
0001C2D2                            
0001C2D2                            loc_19406:
0001C2D2 7001                       		moveq	#1,d0
0001C2D4 4A68 0036                  		tst.w	$36(a0)
0001C2D8 6700                       		beq.s	loc_19410
0001C2DA 7002                       		moveq	#2,d0
0001C2DC                            
0001C2DC                            loc_19410:
0001C2DC 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C2E2 6700                       		beq.s	loc_19424
0001C2E4 6D00                       		blt.s	loc_1941C
0001C2E6 4440                       		neg.w	d0
0001C2E8                            
0001C2E8                            loc_1941C:
0001C2E8 4A68 0036                  		tst.w	$36(a0)
0001C2EC D168 0038                  		add.w	d0,$38(a0)
0001C2F0                            
0001C2F0                            loc_19424:
0001C2F0 7000                       		moveq	#0,d0
0001C2F2 4A68 0036                  		tst.w	$36(a0)
0001C2F6 6700                       		beq.s	loc_19438
0001C2F8 7002                       		moveq	#2,d0
0001C2FA 0828 0000 003D             		btst	#0,$3D(a0)
0001C300 6700                       		beq.s	loc_19438
0001C302 4440                       		neg.w	d0
0001C304                            
0001C304                            loc_19438:
0001C304 D068 0038                  		add.w	$38(a0),d0
0001C308 3140 000C                  		move.w	d0,obY(a0)
0001C30C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C312                            
0001C312                            loc_19446:
0001C312 6000 FDBA                  		bra.w	loc_19202
0001C316                            
0001C316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C316                            
0001C316                            
0001C316                            Obj75_FindBlocks:
0001C316 4268 0036                  		clr.w	$36(a0)
0001C31A 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C31E 703E                       		moveq	#$3E,d0
0001C320 7276                       		moveq	#$76,d1
0001C322 1428 0034                  		move.b	$34(a0),d2
0001C326                            
0001C326                            Obj75_FindLoop:
0001C326 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C328 6600                       		bne.s	loc_1946A	; if not, branch
0001C32A B429 0028                  		cmp.b	obSubtype(a1),d2
0001C32E 6600                       		bne.s	loc_1946A
0001C330 3149 0036                  		move.w	a1,$36(a0)
0001C334 6000                       		bra.s	locret_19472
0001C336                            ; ===========================================================================
0001C336                            
0001C336                            loc_1946A:
0001C336 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C33A 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C33E                            
0001C33E                            locret_19472:
0001C33E 4E75                       		rts	
0001C340                            ; End of function Obj75_FindBlocks
0001C340                            
0001C340                            ; ===========================================================================
0001C340                            
0001C340                            loc_19474:
0001C340 5368 003C                  		subq.w	#1,$3C(a0)
0001C344 6B00                       		bmi.s	loc_1947E
0001C346 6000 E3A2                  		bra.w	BossDefeated
0001C34A                            ; ===========================================================================
0001C34A                            
0001C34A                            loc_1947E:
0001C34A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C34E 4268 0012                  		clr.w	obVelY(a0)
0001C352 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C358 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C35E 4268 0010                  		clr.w	obVelX(a0)
0001C362 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C368 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C36C 6600                       		bne.s	loc_194A8
0001C36E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C374                            
0001C374                            loc_194A8:
0001C374 6000 FD58                  		bra.w	loc_19202
0001C378                            ; ===========================================================================
0001C378                            
0001C378                            loc_194AC:
0001C378 5268 003C                  		addq.w	#1,$3C(a0)
0001C37C 6700                       		beq.s	loc_194BC
0001C37E 6A00                       		bpl.s	loc_194C2
0001C380 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C386 6000                       		bra.s	loc_194EE
0001C388                            ; ===========================================================================
0001C388                            
0001C388                            loc_194BC:
0001C388 4268 0012                  		clr.w	obVelY(a0)
0001C38C 6000                       		bra.s	loc_194EE
0001C38E                            ; ===========================================================================
0001C38E                            
0001C38E                            loc_194C2:
0001C38E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C394 6500                       		bcs.s	loc_194DA
0001C396 6700                       		beq.s	loc_194E0
0001C398 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C39E 6500                       		bcs.s	loc_194EE
0001C3A0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C3A4 6000                       		bra.s	loc_194EE
0001C3A6                            ; ===========================================================================
0001C3A6                            
0001C3A6                            loc_194DA:
0001C3A6 5168 0012                  		subq.w	#8,obVelY(a0)
0001C3AA 6000                       		bra.s	loc_194EE
0001C3AC                            ; ===========================================================================
0001C3AC                            
0001C3AC                            loc_194E0:
0001C3AC 4268 0012                  		clr.w    obVelY(a0)
0001C3B0 4A38 FE2D                          	tst.b     (v_invinc).w
0001C3B4 6600                               	bne.s   @boss_invinc
0001C3B6                            
0001C3B6 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C3BA 6000 0000                          	bra.w      @boss_play
0001C3BE                            
0001C3BE                            @boss_invinc:
0001C3BE 103C 0000                          	move.b #bgm_Invincible,d0
0001C3C2                            
0001C3C2                            @boss_play:
0001C3C2 4EB8 0FC6                          	jsr PlaySound
0001C3C6                            
0001C3C6                            loc_194EE:
0001C3C6 6000 FCF6                  		bra.w	loc_191F2
0001C3CA                            ; ===========================================================================
0001C3CA                            
0001C3CA                            loc_194F2:
0001C3CA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C3D0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C3D6 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C3DC 6400                       		bcc.s	loc_1950C
0001C3DE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C3E2 6000                       		bra.s	loc_19512
0001C3E4                            ; ===========================================================================
0001C3E4                            
0001C3E4                            loc_1950C:
0001C3E4 4A28 0001                  		tst.b	obRender(a0)
0001C3E8 6A00                       		bpl.s	Obj75_ShipDelete
0001C3EA                            
0001C3EA                            loc_19512:
0001C3EA 6100 E340                  		bsr.w	BossMove
0001C3EE 6000 FCBA                  		bra.w	loc_191DE
0001C3F2                            ; ===========================================================================
0001C3F2                            
0001C3F2                            Obj75_ShipDelete:
0001C3F2 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001C3F8                            ; ===========================================================================
0001C3F8                            
0001C3F8                            Obj75_FaceMain:	; Routine 4
0001C3F8 7201                       		moveq	#1,d1
0001C3FA 2268 0034                  		movea.l	$34(a0),a1
0001C3FE 7000                       		moveq	#0,d0
0001C400 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C404 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C408 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C40C 1141 001C                  		move.b	d1,obAnim(a0)
0001C410 1010                       		move.b	(a0),d0
0001C412 B011                       		cmp.b	(a1),d0
0001C414 6600                       		bne.s	Obj75_FaceDelete
0001C416 6000                       		bra.s	loc_195BE
0001C418                            ; ===========================================================================
0001C418                            
0001C418                            Obj75_FaceDelete:
0001C418 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001C41E                            ; ===========================================================================
0001C41E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C422 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C426 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C42A                            ; ===========================================================================
0001C42A                            
0001C42A                            loc_19552:
0001C42A 720A                       		moveq	#$A,d1
0001C42C 4E75                       		rts	
0001C42E                            ; ===========================================================================
0001C42E                            
0001C42E                            loc_19556:
0001C42E 7206                       		moveq	#6,d1
0001C430 4E75                       		rts	
0001C432                            ; ===========================================================================
0001C432                            
0001C432                            loc_1955A:
0001C432 7000                       		moveq	#0,d0
0001C434 1029 0028                  		move.b	obSubtype(a1),d0
0001C438 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C43C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C440                            ; ===========================================================================
0001C440 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C444 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C448                            ; ===========================================================================
0001C448                            
0001C448                            loc_19570:
0001C448 6000                       		bra.s	loc_19574
0001C44A                            ; ===========================================================================
0001C44A                            
0001C44A                            loc_19572:
0001C44A 7206                       		moveq	#6,d1
0001C44C                            
0001C44C                            loc_19574:
0001C44C 4A29 0020                  		tst.b	obColType(a1)
0001C450 6600                       		bne.s	loc_1957E
0001C452 7205                       		moveq	#5,d1
0001C454 4E75                       		rts	
0001C456                            ; ===========================================================================
0001C456                            
0001C456                            loc_1957E:
0001C456 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C45C 6500                       		bcs.s	locret_19588
0001C45E 7204                       		moveq	#4,d1
0001C460                            
0001C460                            locret_19588:
0001C460 4E75                       		rts	
0001C462                            ; ===========================================================================
0001C462                            
0001C462                            Obj75_FlameMain:; Routine 6
0001C462 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C468 2268 0034                  		movea.l	$34(a0),a1
0001C46C 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C472 6600                       		bne.s	loc_195AA
0001C474 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C47A 4A28 0001                  		tst.b	1(a0)
0001C47E 6A00                       		bpl.s	Obj75_FlameDelete
0001C480 6000                       		bra.s	loc_195B6
0001C482                            ; ===========================================================================
0001C482                            
0001C482                            loc_195AA:
0001C482 4A69 0010                  		tst.w	obVelX(a1)
0001C486 6700                       		beq.s	loc_195B6
0001C488 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C48E                            
0001C48E                            loc_195B6:
0001C48E 6000                       		bra.s	loc_195BE
0001C490                            ; ===========================================================================
0001C490                            
0001C490                            Obj75_FlameDelete:
0001C490 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001C496                            ; ===========================================================================
0001C496                            
0001C496                            loc_195BE:
0001C496 43F9 0001 AB40             		lea	(Ani_Eggman).l,a1
0001C49C 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001C4A2 2268 0034                  		movea.l	$34(a0),a1
0001C4A6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C4AC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C4B2                            
0001C4B2                            loc_195DA:
0001C4B2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C4B8 7003                       		moveq	#3,d0
0001C4BA C028 0022                  		and.b	obStatus(a0),d0
0001C4BE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C4C4 8128 0001                  		or.b	d0,obRender(a0)
0001C4C8 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001C4CE                            ; ===========================================================================
0001C4CE                            
0001C4CE                            Obj75_SpikeMain:; Routine 8
0001C4CE 217C 0001 AC80 0004        		move.l	#Map_BossItems,obMap(a0)
0001C4D6 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C4DC 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C4E2 2268 0034                  		movea.l	$34(a0),a1
0001C4E6 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C4EC 6600                       		bne.s	loc_1961C
0001C4EE 4A28 0001                  		tst.b	obRender(a0)
0001C4F2 6A00                       		bpl.s	Obj75_SpikeDelete
0001C4F4                            
0001C4F4                            loc_1961C:
0001C4F4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C4FA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C500 3028 003C                  		move.w	$3C(a0),d0
0001C504 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C50A 6600                       		bne.s	loc_19652
0001C50C 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C512 6700                       		beq.s	loc_1964C
0001C514 4A29 0028                  		tst.b	obSubtype(a1)
0001C518 6600                       		bne.s	loc_19658
0001C51A 0C40 0094                  		cmpi.w	#$94,d0
0001C51E 6C00                       		bge.s	loc_19658
0001C520 5E40                       		addq.w	#7,d0
0001C522 6000                       		bra.s	loc_19658
0001C524                            ; ===========================================================================
0001C524                            
0001C524                            loc_1964C:
0001C524 4A69 003C                  		tst.w	$3C(a1)
0001C528 6A00                       		bpl.s	loc_19658
0001C52A                            
0001C52A                            loc_19652:
0001C52A 4A40                       		tst.w	d0
0001C52C 6F00                       		ble.s	loc_19658
0001C52E 5B40                       		subq.w	#5,d0
0001C530                            
0001C530                            loc_19658:
0001C530 3140 003C                  		move.w	d0,$3C(a0)
0001C534 E440                       		asr.w	#2,d0
0001C536 D168 000C                  		add.w	d0,obY(a0)
0001C53A 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C540 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C546 4228 0020                  		clr.b	obColType(a0)
0001C54A 2268 0034                  		movea.l	$34(a0),a1
0001C54E 4A29 0020                  		tst.b	obColType(a1)
0001C552 6700                       		beq.s	loc_19688
0001C554 4A29 0029                  		tst.b	$29(a1)
0001C558 6600                       		bne.s	loc_19688
0001C55A 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C560                            
0001C560                            loc_19688:
0001C560 6000 FF50                  		bra.w	loc_195DA
0001C564                            ; ===========================================================================
0001C564                            
0001C564                            Obj75_SpikeDelete:
0001C564 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001C564 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001C56A                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C56A                            ; ---------------------------------------------------------------------------
0001C56A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C56A                            ; ---------------------------------------------------------------------------
0001C56A                            
0001C56A                            BossBlock:
0001C56A 7000                       		moveq	#0,d0
0001C56C 1028 0024                  		move.b	obRoutine(a0),d0
0001C570 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C574 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C578                            ; ===========================================================================
0001C578 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C57A 0000                       		dc.w Obj76_Action-Obj76_Index
0001C57C 0000                       		dc.w loc_19762-Obj76_Index
0001C57E                            ; ===========================================================================
0001C57E                            
0001C57E                            Obj76_Main:	; Routine 0
0001C57E 7800                       		moveq	#0,d4
0001C580 3A3C 2C10                  		move.w	#$2C10,d5
0001C584 7C09                       		moveq	#9,d6
0001C586 43D0                       		lea	(a0),a1
0001C588 6000                       		bra.s	Obj76_MakeBlock
0001C58A                            ; ===========================================================================
0001C58A                            
0001C58A                            Obj76_Loop:
0001C58A 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001C590 6600                       		bne.s	Obj76_ExitLoop
0001C592                            
0001C592                            Obj76_MakeBlock:
0001C592 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C596 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C59E 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C5A4 137C 0004 0001             		move.b	#4,obRender(a1)
0001C5AA 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C5B0 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C5B6 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C5BC 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C5C0 337C 0582 000C             		move.w	#$582,obY(a1)
0001C5C6 3344 0028                  		move.w	d4,obSubtype(a1)
0001C5CA 0644 0101                  		addi.w	#$101,d4
0001C5CE 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C5D2 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C5D6 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C5DA                            
0001C5DA                            Obj76_ExitLoop:
0001C5DA 4E75                       		rts	
0001C5DC                            ; ===========================================================================
0001C5DC                            
0001C5DC                            Obj76_Action:	; Routine 2
0001C5DC 1028 0029                  		move.b	$29(a0),d0
0001C5E0 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C5E4 6700                       		beq.s	Obj76_Solid
0001C5E6 4A00                       		tst.b	d0
0001C5E8 6B00                       		bmi.s	loc_19718
0001C5EA                            
0001C5EA                            loc_19712:
0001C5EA 6100 0000                  		bsr.w	Obj76_Break
0001C5EE 6000                       		bra.s	Obj76_Display
0001C5F0                            ; ===========================================================================
0001C5F0                            
0001C5F0                            loc_19718:
0001C5F0 2268 0034                  		movea.l	$34(a0),a1
0001C5F4 4A29 0021                  		tst.b	obColProp(a1)
0001C5F8 67F0                       		beq.s	loc_19712
0001C5FA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C600 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C606 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C60C B2C8                       		cmpa.w	a0,a1
0001C60E 6500                       		bcs.s	Obj76_Display
0001C610 3029 0012                  		move.w	obVelY(a1),d0
0001C614 48C0                       		ext.l	d0
0001C616 E080                       		asr.l	#8,d0
0001C618 D168 000C                  		add.w	d0,obY(a0)
0001C61C 6000                       		bra.s	Obj76_Display
0001C61E                            ; ===========================================================================
0001C61E                            
0001C61E                            Obj76_Solid:
0001C61E 323C 001B                  		move.w	#$1B,d1
0001C622 343C 0010                  		move.w	#$10,d2
0001C626 363C 0011                  		move.w	#$11,d3
0001C62A 3828 0008                  		move.w	obX(a0),d4
0001C62E 4EB9 0001 1B08             		jsr	(SolidObject).l
0001C634                            
0001C634                            Obj76_Display:
0001C634 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001C63A                            ; ===========================================================================
0001C63A                            
0001C63A                            loc_19762:	; Routine 4
0001C63A 4A28 0001                  		tst.b	obRender(a0)
0001C63E 6A00                       		bpl.s	Obj76_Delete
0001C640 4EB9 0000 F6AE             		jsr	(ObjectFall).l
0001C646 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001C64C                            ; ===========================================================================
0001C64C                            
0001C64C                            Obj76_Delete:
0001C64C 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001C652                            
0001C652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C652                            
0001C652                            
0001C652                            Obj76_Break:
0001C652 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C656 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C65A 7801                       		moveq	#1,d4
0001C65C 7203                       		moveq	#3,d1
0001C65E 7438                       		moveq	#$38,d2
0001C660 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C664 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C66A 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C670 43D0                       		lea	(a0),a1
0001C672 6000                       		bra.s	Obj76_MakeFrag
0001C674                            ; ===========================================================================
0001C674                            
0001C674                            Obj76_LoopFrag:
0001C674 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001C67A 6600                       		bne.s	loc_197D4
0001C67C                            
0001C67C                            Obj76_MakeFrag:
0001C67C 45D0                       		lea	(a0),a2
0001C67E 47D1                       		lea	(a1),a3
0001C680 7603                       		moveq	#3,d3
0001C682                            
0001C682                            loc_197AA:
0001C682 26DA                       		move.l	(a2)+,(a3)+
0001C684 26DA                       		move.l	(a2)+,(a3)+
0001C686 26DA                       		move.l	(a2)+,(a3)+
0001C688 26DA                       		move.l	(a2)+,(a3)+
0001C68A 51CB FFF6                  		dbf	d3,loc_197AA
0001C68E                            
0001C68E 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C692 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C696 361D                       		move.w	(a5)+,d3
0001C698 D769 0008                  		add.w	d3,obX(a1)
0001C69C 361D                       		move.w	(a5)+,d3
0001C69E D769 000C                  		add.w	d3,obY(a1)
0001C6A2 1344 001A                  		move.b	d4,obFrame(a1)
0001C6A6 5244                       		addq.w	#1,d4
0001C6A8 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C6AC                            
0001C6AC                            loc_197D4:
0001C6B6                            ; End of function Obj76_Break
0001C6B6                            
0001C6B6                            ; ===========================================================================
0001C6B6 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C6BA 0180 FE00                  		dc.w $180, -$200
0001C6BE FF00 FF00                  		dc.w -$100, -$100
0001C6C2 0100 FF00                  		dc.w $100, -$100
0001C6C6 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C6CA 0010 0000                  		dc.w $10, 0
0001C6CE 0000 0010                  		dc.w 0,	$10
0001C6D2 0010 0010                  		dc.w $10, $10
0001C6D2 0010 0010                  		dc.w $10, $10
0001C6D6                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C6D6                            ; ---------------------------------------------------------------------------
0001C6D6                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C6D6                            ; ---------------------------------------------------------------------------
0001C6D6                            Map_BossBlock_internal:
0001C6D6 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C6D8 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C6DA 0000                       		dc.w @topright-Map_BossBlock_internal
0001C6DC 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C6DE 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C6E0 02                         @wholeblock:	dc.b 2
0001C6E1 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C6E6 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C6EB 00                         		dc.b 0
0001C6EC 01                         @topleft:	dc.b 1
0001C6ED F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C6F2 01                         @topright:	dc.b 1
0001C6F3 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C6F8 01                         @bottomleft:	dc.b 1
0001C6F9 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C6FE 01                         @bottomright:	dc.b 1
0001C6FF F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C704                            		even
0001C704                            		even
0001C704                            
0001C704                            loc_1982C:
0001C704 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001C70A                            
0001C70A                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C70A                            ; ---------------------------------------------------------------------------
0001C70A                            ; Object 82 - Eggman (SBZ2)
0001C70A                            ; ---------------------------------------------------------------------------
0001C70A                            
0001C70A                            ScrapEggman:
0001C70A 7000                       		moveq	#0,d0
0001C70C 1028 0024                  		move.b	obRoutine(a0),d0
0001C710 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C714 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C718                            ; ===========================================================================
0001C718 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C71A 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C71C 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C71E                            
0001C71E 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C721 0400 03                    		dc.b 4,	0, 3
0001C724                            ; ===========================================================================
0001C724                            
0001C724                            SEgg_Main:	; Routine 0
0001C724 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C728 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C72E 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C734 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C73A 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C740 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C746 4228 0025                  		clr.b	ob2ndRout(a0)
0001C74A 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C74E 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C752 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C756 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C75E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C764 117C 0004 0001             		move.b	#4,obRender(a0)
0001C76A 08E8 0007 0001             		bset	#7,obRender(a0)
0001C770 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C776 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001C77C 6600                       		bne.s	SEgg_Eggman
0001C77E 2348 0034                  		move.l	a0,$34(a1)
0001C782 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C786 337C 2130 0008             		move.w	#$2130,obX(a1)
0001C78C 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001C792 4228 0025                  		clr.b	ob2ndRout(a0)
0001C796 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C79A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C79E 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C7A2 237C 0000 DF28 0004        		move.l	#Map_But,obMap(a1)
0001C7AA 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C7B0 137C 0004 0001             		move.b	#4,obRender(a1)
0001C7B6 08E9 0007 0001             		bset	#7,obRender(a1)
0001C7BC 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C7C2 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C7C8                            
0001C7C8                            SEgg_Eggman:	; Routine 2
0001C7C8 7000                       		moveq	#0,d0
0001C7CA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C7CE 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C7D2 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C7D6 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C7DA 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001C7E0 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001C7E6                            ; ===========================================================================
0001C7E6 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C7E8 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C7EA 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C7EC 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C7EE                            ; ===========================================================================
0001C7EE                            
0001C7EE                            SEgg_ChkSonic:
0001C7EE 3028 0008                  		move.w	obX(a0),d0
0001C7F2 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C7F6 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C7FA 6400                       		bcc.s	loc_19934	; if not, branch
0001C7FC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C800 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C806 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C80C                            
0001C80C                            loc_19934:
0001C80C 4EF9 0000 F6E6             		jmp	(SpeedToPos).l
0001C812                            ; ===========================================================================
0001C812                            
0001C812                            SEgg_PreLeap:
0001C812 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C816 6600                       		bne.s	loc_19954	; if time remains, branch
0001C818 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C81C 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C822 5868 000C                  		addq.w	#4,obY(a0)
0001C826 317C 000F 003C             		move.w	#15,$3C(a0)
0001C82C                            
0001C82C                            loc_19954:
0001C82C 60DE                       		bra.s	loc_19934
0001C82E                            ; ===========================================================================
0001C82E                            
0001C82E                            SEgg_Leap:
0001C82E 5368 003C                  		subq.w	#1,$3C(a0)
0001C832 6E00                       		bgt.s	loc_199D0
0001C834 6600                       		bne.s	loc_1996A
0001C836 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C83C 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C842                            
0001C842                            loc_1996A:
0001C842 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001C848 6E00                       		bgt.s	loc_19976
0001C84A 4268 0010                  		clr.w	obVelX(a0)
0001C84E                            
0001C84E                            loc_19976:
0001C84E 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C854 4A68 0012                  		tst.w	obVelY(a0)
0001C858 6B00                       		bmi.s	SEgg_FindBlocks
0001C85A 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001C860 6500                       		bcs.s	SEgg_FindBlocks
0001C862 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001C868 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001C86E 6500                       		bcs.s	SEgg_FindBlocks
0001C870 317C 059B 000C             		move.w	#$59B,obY(a0)
0001C876 4268 0012                  		clr.w	obVelY(a0)
0001C87A                            
0001C87A                            SEgg_FindBlocks:
0001C87A 3028 0010                  		move.w	obVelX(a0),d0
0001C87E 8068 0012                  		or.w	obVelY(a0),d0
0001C882 6600                       		bne.s	loc_199D0
0001C884 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001C888 703E                       		moveq	#$3E,d0
0001C88A 7240                       		moveq	#$40,d1
0001C88C                            
0001C88C                            SEgg_FindLoop:	
0001C88C D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001C88E 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001C892 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001C896                            
0001C896 6600                       		bne.s	loc_199D0
0001C898 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001C89E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8A2 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C8A8                            
0001C8A8                            loc_199D0:
0001C8A8 6000 FF62                  		bra.w	loc_19934
0001C8AC                            ; ===========================================================================
0001C8AC                            
0001C8AC                            SEgg_Switch:	; Routine 4
0001C8AC 7000                       		moveq	#0,d0
0001C8AE 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C8B2 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001C8B6 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001C8BA                            ; ===========================================================================
0001C8BA 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001C8BC 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001C8BE                            ; ===========================================================================
0001C8BE                            
0001C8BE                            loc_199E6:
0001C8BE 2268 0034                  		movea.l	$34(a0),a1
0001C8C2 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001C8C8 6600                       		bne.s	SEgg_SwDisplay
0001C8CA 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C8D0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8D4                            
0001C8D4                            SEgg_SwDisplay:
0001C8D4 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001C8D4 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001C8DA                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001C8DA                            ; ---------------------------------------------------------------------------
0001C8DA                            ; Animation script - Eggman (SBZ2)
0001C8DA                            ; ---------------------------------------------------------------------------
0001C8DA 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001C8DC 0000                       		dc.w @laugh-Ani_SEgg
0001C8DE 0000                       		dc.w @jump1-Ani_SEgg
0001C8E0 0000                       		dc.w @intube-Ani_SEgg
0001C8E2 0000                       		dc.w @running-Ani_SEgg
0001C8E4 0000                       		dc.w @jump2-Ani_SEgg
0001C8E6 0000                       		dc.w @starjump-Ani_SEgg
0001C8E8 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001C8EC 00                         		even
0001C8EC 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001C8F0 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001C8F8 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001C8FC 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001C902 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001C908 00                         		even
0001C908 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001C90C 00                         		even
0001C90C 00                         		even
0001C90C                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001C90C                            ; ---------------------------------------------------------------------------
0001C90C                            ; Sprite mappings - Eggman (SBZ2)
0001C90C                            ; ---------------------------------------------------------------------------
0001C90C                            Map_SEgg_internal:
0001C90C 0000                       		dc.w @stand-Map_SEgg_internal
0001C90E 0000                       		dc.w @laugh1-Map_SEgg_internal
0001C910 0000                       		dc.w @laugh2-Map_SEgg_internal
0001C912 0000                       		dc.w @jump1-Map_SEgg_internal
0001C914 0000                       		dc.w @jump2-Map_SEgg_internal
0001C916 0000                       		dc.w @surprise-Map_SEgg_internal
0001C918 0000                       		dc.w @starjump-Map_SEgg_internal
0001C91A 0000                       		dc.w @running1-Map_SEgg_internal
0001C91C 0000                       		dc.w @running2-Map_SEgg_internal
0001C91E 0000                       		dc.w @intube-Map_SEgg_internal
0001C920 0000                       		dc.w @cockpit-Map_SEgg_internal
0001C922 03                         @stand:		dc.b 3
0001C923 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001C928 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C92D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C932 04                         @laugh1:	dc.b 4
0001C933 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001C938 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C93D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C942 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001C947 00                         		dc.b 0
0001C948 04                         @laugh2:	dc.b 4
0001C949 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001C94E E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001C953 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001C958 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001C95D 00                         		dc.b 0
0001C95E 04                         @jump1:		dc.b 4
0001C95F F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001C964 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001C969 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001C96E EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001C973 00                         		dc.b 0
0001C974 04                         @jump2:		dc.b 4
0001C975 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C97A F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001C97F 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001C984 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C989 00                         		dc.b 0
0001C98A 04                         @surprise:	dc.b 4
0001C98B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001C990 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001C995 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C99A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001C99F 00                         		dc.b 0
0001C9A0 07                         @starjump:	dc.b 7
0001C9A1 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001C9A6 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001C9AB 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001C9B0 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001C9B5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C9BA F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001C9BF F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001C9C4 05                         @running1:	dc.b 5
0001C9C5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001C9CA F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001C9CF 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001C9D4 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001C9D9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001C9DE 06                         @running2:	dc.b 6
0001C9DF EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001C9E4 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001C9E9 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001C9EE 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001C9F3 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001C9F8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001C9FD 00                         		dc.b 0
0001C9FE 08                         @intube:	dc.b 8
0001C9FF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CA04 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CA09 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CA0E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CA13 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CA18 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CA1D 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CA22 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CA27 03                         @cockpit:	dc.b 3
0001CA28 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CA2D F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CA32 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CA38 00                         		even
0001CA38 00                         		even
0001CA38                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CA38                            ; ---------------------------------------------------------------------------
0001CA38                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CA38                            ; ---------------------------------------------------------------------------
0001CA38                            
0001CA38                            FalseFloor:
0001CA38 7000                       		moveq	#0,d0
0001CA3A 1028 0024                  		move.b	obRoutine(a0),d0
0001CA3E 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CA42 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CA46                            ; ===========================================================================
0001CA46 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CA48 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CA4A 0000                       		dc.w loc_19C36-FFloor_Index
0001CA4C 0000                       		dc.w loc_19C62-FFloor_Index
0001CA4E 0000                       		dc.w loc_19C72-FFloor_Index
0001CA50 0000                       		dc.w loc_19C80-FFloor_Index
0001CA52                            ; ===========================================================================
0001CA52                            
0001CA52                            FFloor_Main:	; Routine 0
0001CA52 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CA58 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CA5E 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CA64 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CA6A 117C 0004 0001             		move.b	#4,obRender(a0)
0001CA70 08E8 0007 0001             		bset	#7,obRender(a0)
0001CA76 7800                       		moveq	#0,d4
0001CA78 3A3C 2010                  		move.w	#$2010,d5
0001CA7C 7C07                       		moveq	#7,d6
0001CA7E 45E8 0030                  		lea	$30(a0),a2
0001CA82                            
0001CA82                            FFloor_MakeBlock:
0001CA82 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001CA88 6600                       		bne.s	FFloor_ExitMake
0001CA8A 34C9                       		move.w	a1,(a2)+
0001CA8C 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CA90 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CA98 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CA9E 137C 0004 0001             		move.b	#4,obRender(a1)
0001CAA4 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CAAA 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CAB0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CAB6 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CABA 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CAC0 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CAC4 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CACA 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CACE                            
0001CACE                            FFloor_ExitMake:
0001CACE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CAD2 4E75                       		rts	
0001CAD4                            ; ===========================================================================
0001CAD4                            
0001CAD4                            FFloor_ChkBreak:; Routine 2
0001CAD4 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CADA 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CADC 4228 001A                  		clr.b	obFrame(a0)
0001CAE0 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CAE4                            
0001CAE4                            FFloor_Solid:
0001CAE4 7000                       		moveq	#0,d0
0001CAE6 1028 001A                  		move.b	obFrame(a0),d0
0001CAEA 4400                       		neg.b	d0
0001CAEC 4880                       		ext.w	d0
0001CAEE 5040                       		addq.w	#8,d0
0001CAF0 E940                       		asl.w	#4,d0
0001CAF2 383C 2100                  		move.w	#$2100,d4
0001CAF6 9840                       		sub.w	d0,d4
0001CAF8 1140 0014                  		move.b	d0,obActWid(a0)
0001CAFC 3144 0008                  		move.w	d4,obX(a0)
0001CB00 720B                       		moveq	#$B,d1
0001CB02 D240                       		add.w	d0,d1
0001CB04 7410                       		moveq	#$10,d2
0001CB06 7611                       		moveq	#$11,d3
0001CB08 4EF9 0001 1B08             		jmp	(SolidObject).l
0001CB0E                            ; ===========================================================================
0001CB0E                            
0001CB0E                            loc_19C36:	; Routine 4
0001CB0E 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CB14 6400                       		bcc.s	FFloor_Solid2
0001CB16 70FF                       		moveq	#-1,d0
0001CB18 1028 001A                  		move.b	obFrame(a0),d0
0001CB1C 4880                       		ext.w	d0
0001CB1E D040                       		add.w	d0,d0
0001CB20 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CB24 2240                       		movea.l	d0,a1
0001CB26 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CB2C 5228 001A                  		addq.b	#1,obFrame(a0)
0001CB30 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CB36 6700                       		beq.s	loc_19C62
0001CB38                            
0001CB38                            FFloor_Solid2:
0001CB38 60AA                       		bra.s	FFloor_Solid
0001CB3A                            ; ===========================================================================
0001CB3A                            
0001CB3A                            loc_19C62:	; Routine 6
0001CB3A 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CB40 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CB46 6000 FBBC                  		bra.w	loc_1982C
0001CB4A                            ; ===========================================================================
0001CB4A                            
0001CB4A                            loc_19C72:	; Routine 8
0001CB4A 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CB50 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CB52 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001CB58                            ; ===========================================================================
0001CB58                            
0001CB58                            loc_19C80:	; Routine $A
0001CB58 4A28 0001                  		tst.b	obRender(a0)
0001CB5C 6A00 FBA6                  		bpl.w	loc_1982C
0001CB60 4EB9 0000 F6AE             		jsr	(ObjectFall).l
0001CB66 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001CB6C                            ; ===========================================================================
0001CB6C                            
0001CB6C                            FFloor_Break:
0001CB6C 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CB70 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CB74 7801                       		moveq	#1,d4
0001CB76 7203                       		moveq	#3,d1
0001CB78 7438                       		moveq	#$38,d2
0001CB7A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CB7E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CB84 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CB8A 43D0                       		lea	(a0),a1
0001CB8C 6000                       		bra.s	FFloor_MakeFrag
0001CB8E                            ; ===========================================================================
0001CB8E                            
0001CB8E                            FFloor_LoopFrag:
0001CB8E 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001CB94 6600                       		bne.s	FFloor_BreakSnd
0001CB96                            
0001CB96                            FFloor_MakeFrag:
0001CB96 45D0                       		lea	(a0),a2
0001CB98 47D1                       		lea	(a1),a3
0001CB9A 7603                       		moveq	#3,d3
0001CB9C                            
0001CB9C                            loc_19CC4:
0001CB9C 26DA                       		move.l	(a2)+,(a3)+
0001CB9E 26DA                       		move.l	(a2)+,(a3)+
0001CBA0 26DA                       		move.l	(a2)+,(a3)+
0001CBA2 26DA                       		move.l	(a2)+,(a3)+
0001CBA4 51CB FFF6                  		dbf	d3,loc_19CC4
0001CBA8                            
0001CBA8 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CBAC 361D                       		move.w	(a5)+,d3
0001CBAE D769 0008                  		add.w	d3,obX(a1)
0001CBB2 361D                       		move.w	(a5)+,d3
0001CBB4 D769 000C                  		add.w	d3,obY(a1)
0001CBB8 1344 001A                  		move.b	d4,obFrame(a1)
0001CBBC 5244                       		addq.w	#1,d4
0001CBBE 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CBC2                            
0001CBC2                            FFloor_BreakSnd:
0001CBCC 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001CBD2                            ; ===========================================================================
0001CBD2 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CBD6 0120 00C0                  		dc.w $120, $C0
0001CBDA FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CBDE 0010 0000                  		dc.w $10, 0
0001CBE2 0000 0010                  		dc.w 0,	$10
0001CBE6 0010 0010                  		dc.w $10, $10
0001CBE6 0010 0010                  		dc.w $10, $10
0001CBEA                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CBEA                            ; ---------------------------------------------------------------------------
0001CBEA                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CBEA                            ; ---------------------------------------------------------------------------
0001CBEA                            Map_FFloor_internal:
0001CBEA 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CBEC 0000                       		dc.w @topleft-Map_FFloor_internal
0001CBEE 0000                       		dc.w @topright-Map_FFloor_internal
0001CBF0 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CBF2 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CBF4 01                         @wholeblock:	dc.b 1
0001CBF5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CBFA 02                         @topleft:	dc.b 2
0001CBFB F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CC00 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CC05 00                         		dc.b 0
0001CC06 02                         @topright:	dc.b 2
0001CC07 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CC0C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CC11 00                         		dc.b 0
0001CC12 02                         @bottomleft:	dc.b 2
0001CC13 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CC18 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CC1D 00                         		dc.b 0
0001CC1E 02                         @bottomright:	dc.b 2
0001CC1F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CC24 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CC2A 00                         		even
0001CC2A 00                         		even
0001CC2A                            		include	"_incObj\85 Boss - Final.asm"
0001CC2A                            ; ---------------------------------------------------------------------------
0001CC2A                            ; Object 85 - Eggman (FZ)
0001CC2A                            ; ---------------------------------------------------------------------------
0001CC2A                            
0001CC2A                            Obj85_Delete:
0001CC2A 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001CC30                            ; ===========================================================================
0001CC30                            
0001CC30                            BossFinal:
0001CC30 7000                       		moveq	#0,d0
0001CC32 1028 0024                  		move.b	obRoutine(a0),d0
0001CC36 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CC3A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CC3E                            ; ===========================================================================
0001CC3E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CC40 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CC42 0000                       		dc.w loc_1A38E-Obj85_Index
0001CC44 0000                       		dc.w loc_1A346-Obj85_Index
0001CC46 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CC48 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CC4A 0000                       		dc.w loc_1A264-Obj85_Index
0001CC4C                            
0001CC4C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CC52 0001 C90C                  		dc.l Map_SEgg		; mappings pointer
0001CC56 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CC5C 0000 0000                  		dc.l Map_EggCyl
0001CC60 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CC66 0000 0000                  		dc.l Map_FZLegs
0001CC6A 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CC70 0001 C90C                  		dc.l Map_SEgg
0001CC74 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CC7A 0001 AB90                  		dc.l Map_Eggman
0001CC7E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CC84 0001 AB90                  		dc.l Map_Eggman
0001CC88                            
0001CC88                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CC88 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CC8E 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CC94 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CC9A 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CCA0 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CCA6 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CCAC                            ; ===========================================================================
0001CCAC                            
0001CCAC                            Obj85_Main:	; Routine 0
0001CCAC 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CCB0 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CCB4 2248                       		movea.l	a0,a1
0001CCB6 7205                       		moveq	#5,d1
0001CCB8 6000                       		bra.s	Obj85_LoadBoss
0001CCBA                            ; ===========================================================================
0001CCBA                            
0001CCBA                            Obj85_Loop:
0001CCBA 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001CCC0 6600                       		bne.s	loc_19E20
0001CCC2                            
0001CCC2                            Obj85_LoadBoss:
0001CCC2 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CCC6 335A 0008                  		move.w	(a2)+,obX(a1)
0001CCCA 335A 000C                  		move.w	(a2)+,obY(a1)
0001CCCE 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CCD2 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CCD6 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CCDA 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CCDE 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CCE2 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CCE6 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CCEA 137C 0004 0001             		move.b	#4,obRender(a1)
0001CCF0 08E8 0007 0001             		bset	#7,obRender(a0)
0001CCF6 2348 0034                  		move.l	a0,$34(a1)
0001CCFA 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CCFE                            
0001CCFE                            loc_19E20:
0001CCFE 45E8 0036                  		lea	$36(a0),a2
0001CD02 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001CD08 6600                       		bne.s	loc_19E5A
0001CD0A 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CD0E 3489                       		move.w	a1,(a2)
0001CD10 2348 0034                  		move.l	a0,$34(a1)
0001CD14 45E8 0038                  		lea	$38(a0),a2
0001CD18 7400                       		moveq	#0,d2
0001CD1A 7203                       		moveq	#3,d1
0001CD1C                            
0001CD1C                            loc_19E3E:
0001CD1C 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001CD22 6600                       		bne.s	loc_19E5A
0001CD24 34C9                       		move.w	a1,(a2)+
0001CD26 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CD2A 2348 0034                  		move.l	a0,$34(a1)
0001CD2E 1342 0028                  		move.b	d2,obSubtype(a1)
0001CD32 5442                       		addq.w	#2,d2
0001CD34 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CD38                            
0001CD38                            loc_19E5A:
0001CD38 317C 0000 0034             		move.w	#0,$34(a0)
0001CD3E 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CD44 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CD4A                            
0001CD4A                            Obj85_Eggman:	; Routine 2
0001CD4A 7000                       		moveq	#0,d0
0001CD4C 1028 0034                  		move.b	$34(a0),d0
0001CD50 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CD54 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CD58 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001CD5E                            ; ===========================================================================
0001CD5E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CD62 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CD66 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CD6A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CD6E                            ; ===========================================================================
0001CD6E                            
0001CD6E                            loc_19E90:
0001CD6E 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CD72 6600                       		bne.s	loc_19EA2
0001CD74 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CD7A 6500                       		bcs.s	loc_19EA2
0001CD7C 5428 0034                  		addq.b	#2,$34(a0)
0001CD80                            
0001CD80                            loc_19EA2:
0001CD80 52B8 F636                  		addq.l	#1,(v_random).w
0001CD84 4E75                       		rts	
0001CD86                            ; ===========================================================================
0001CD86                            
0001CD86                            loc_19EA8:
0001CD86 4A68 0030                  		tst.w	$30(a0)
0001CD8A 6A00                       		bpl.s	loc_19F10
0001CD8C 4268 0030                  		clr.w	$30(a0)
0001CD90 4EB9 0000 3788             		jsr	(RandomNumber).l
0001CD96 0240 000C                  		andi.w	#$C,d0
0001CD9A 3200                       		move.w	d0,d1
0001CD9C 5441                       		addq.w	#2,d1
0001CD9E 4A80                       		tst.l	d0
0001CDA0 6A00                       		bpl.s	loc_19EC6
0001CDA2 C340                       		exg	d1,d0
0001CDA4                            
0001CDA4                            loc_19EC6:
0001CDA4 43FA 0000                  		lea	word_19FD6(pc),a1
0001CDA8 3031 0000                  		move.w	(a1,d0.w),d0
0001CDAC 3231 1000                  		move.w	(a1,d1.w),d1
0001CDB0 3140 0030                  		move.w	d0,$30(a0)
0001CDB4 74FF                       		moveq	#-1,d2
0001CDB6 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CDBA 2242                       		movea.l	d2,a1
0001CDBC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CDC2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CDC8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CDCC 2242                       		movea.l	d2,a1
0001CDCE 137C 0001 0029             		move.b	#1,$29(a1)
0001CDD4 337C 0000 0030             		move.w	#0,$30(a1)
0001CDDA 317C 0001 0032             		move.w	#1,$32(a0)
0001CDE0 4228 0035                  		clr.b	$35(a0)
0001CDEE                            
0001CDEE                            loc_19F10:
0001CDEE 4A68 0032                  		tst.w	$32(a0)
0001CDF2 6B00 0000                  		bmi.w	loc_19FA6
0001CDF6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CDFC 3038 D008                  		move.w	(v_player+obX).w,d0
0001CE00 9068 0008                  		sub.w	obX(a0),d0
0001CE04 6500                       		bcs.s	loc_19F2E
0001CE06 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CE0C                            
0001CE0C                            loc_19F2E:
0001CE0C 323C 002B                  		move.w	#$2B,d1
0001CE10 343C 0014                  		move.w	#$14,d2
0001CE14 363C 0014                  		move.w	#$14,d3
0001CE18 3828 0008                  		move.w	obX(a0),d4
0001CE1C 4EB9 0001 1B08             		jsr	(SolidObject).l
0001CE22 4A44                       		tst.w	d4
0001CE24 6E00                       		bgt.s	loc_19F50
0001CE26                            
0001CE26                            loc_19F48:
0001CE26 4A28 0035                  		tst.b	$35(a0)
0001CE2A 6600                       		bne.s	loc_19F88
0001CE2C 6000                       		bra.s	loc_19F96
0001CE2E                            ; ===========================================================================
0001CE2E                            
0001CE2E                            loc_19F50:
0001CE2E 5E78 F636                  		addq.w	#7,(v_random).w
0001CE32 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CE38 66EC                       		bne.s	loc_19F48
0001CE3A 303C 0300                  		move.w	#$300,d0
0001CE3E 0828 0000 0022             		btst	#0,obStatus(a0)
0001CE44 6600                       		bne.s	loc_19F6A
0001CE46 4440                       		neg.w	d0
0001CE48                            
0001CE48                            loc_19F6A:
0001CE48 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CE4C 4A28 0035                  		tst.b	$35(a0)
0001CE50 6600                       		bne.s	loc_19F88
0001CE52 5328 0021                  		subq.b	#1,obColProp(a0)
0001CE56 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CE5C 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001CE62                            
0001CE62                            loc_19F88:
0001CE62 5328 0035                  		subq.b	#1,$35(a0)
0001CE66 6700                       		beq.s	loc_19F96
0001CE68 117C 0003 001C             		move.b	#3,obAnim(a0)
0001CE6E 6000                       		bra.s	loc_19F9C
0001CE70                            ; ===========================================================================
0001CE70                            
0001CE70                            loc_19F96:
0001CE70 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CE76                            
0001CE76                            loc_19F9C:
0001CE76 43FA FA62                  		lea	Ani_SEgg(pc),a1
0001CE7A 4EF9 0000 C7A6             		jmp	(AnimateSprite).l
0001CE80                            ; ===========================================================================
0001CE80                            
0001CE80                            loc_19FA6:
0001CE80 4A28 0021                  		tst.b	obColProp(a0)
0001CE84 6700                       		beq.s	loc_19FBC
0001CE86 5428 0034                  		addq.b	#2,$34(a0)
0001CE8A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CE90 4268 0032                  		clr.w	$32(a0)
0001CE94 4E75                       		rts	
0001CE96                            ; ===========================================================================
0001CE96                            
0001CE96                            loc_19FBC:
0001CE96 7064                       			moveq	#100,d0
0001CE98 6100 0000                  			bsr.w	AddPoints
0001CE9C 117C 0006 0034             		move.b	#6,$34(a0)
0001CEA2 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001CEA8 317C 053C 000C             		move.w	#$53C,obY(a0)
0001CEAE 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001CEB4 4E75                       		rts	
0001CEB6                            ; ===========================================================================
0001CEB6 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001CEC6                            ; ===========================================================================
0001CEC6                            
0001CEC6                            loc_19FE6:
0001CEC6 70FF                       		moveq	#-1,d0
0001CEC8 3028 0036                  		move.w	$36(a0),d0
0001CECC 2240                       		movea.l	d0,a1
0001CECE 4A68 0030                  		tst.w	$30(a0)
0001CED2 6A00                       		bpl.s	loc_1A000
0001CED4 4268 0030                  		clr.w	$30(a0)
0001CED8 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CEDE 6100                       		bsr.s	loc_1A020
0001CEE0                            
0001CEE0                            loc_1A000:
0001CEE0 700F                       		moveq	#$F,d0
0001CEE2 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CEE6 6600                       		bne.s	loc_1A00A
0001CEE8 6100                       		bsr.s	loc_1A020
0001CEEA                            
0001CEEA                            loc_1A00A:
0001CEEA 4A68 0032                  		tst.w	$32(a0)
0001CEEE 6700                       		beq.s	locret_1A01E
0001CEF0 5528 0034                  		subq.b	#2,$34(a0)
0001CEF4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CEFA 4268 0032                  		clr.w	$32(a0)
0001CEFE                            
0001CEFE                            locret_1A01E:
0001CEFE 4E75                       		rts	
0001CF00                            ; ===========================================================================
0001CF00                            
0001CF00                            loc_1A020:
0001CF0A                            ; ===========================================================================
0001CF0A                            
0001CF0A                            loc_1A02A:
0001CF0A 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001CF10 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CF16 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001CF1C 117C 0006 001A             		move.b	#6,obFrame(a0)
0001CF22 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CF28 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001CF2E 6500                       		bcs.s	loc_1A070
0001CF30 317C 059C 000C             		move.w	#$59C,obY(a0)
0001CF36 5428 0034                  		addq.b	#2,$34(a0)
0001CF3A 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001CF40 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001CF46 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001CF4C 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001CF50                            
0001CF50                            loc_1A070:
0001CF50 6000 0000                  		bra.w	loc_1A166
0001CF54                            ; ===========================================================================
0001CF54                            
0001CF54                            loc_1A074:
0001CF54 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CF5A 117C 0004 001C             		move.b	#4,obAnim(a0)
0001CF60 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001CF66 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001CF6C 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001CF72 6500                       		bcs.s	loc_1A09A
0001CF74 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001CF7A                            
0001CF7A                            loc_1A09A:
0001CF7A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001CF80 3028 0008                  		move.w	obX(a0),d0
0001CF84 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CF88 6A00                       		bpl.s	loc_1A0B4
0001CF8A 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001CF90 6000 0000                  		bra.w	loc_1A0F2
0001CF94                            ; ===========================================================================
0001CF94                            
0001CF94                            loc_1A0B4:
0001CF94 0440 0070                  		subi.w	#$70,d0
0001CF98 6500                       		bcs.s	loc_1A0F2
0001CF9A 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001CFA0 5140                       		subq.w	#8,d0
0001CFA2 6500                       		bcs.s	loc_1A0F2
0001CFA4 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001CFAA 5140                       		subq.w	#8,d0
0001CFAC 6500                       		bcs.s	loc_1A0F2
0001CFAE 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CFB4 5140                       		subq.w	#8,d0
0001CFB6 6500                       		bcs.s	loc_1A0F2
0001CFB8 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CFBE 5140                       		subq.w	#8,d0
0001CFC0 6500                       		bcs.s	loc_1A0F2
0001CFC2 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001CFC8 0440 0038                  		subi.w	#$38,d0
0001CFCC 6500                       		bcs.s	loc_1A0F2
0001CFCE 4268 0010                  		clr.w	obVelX(a0)
0001CFD2                            
0001CFD2                            loc_1A0F2:
0001CFD2 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001CFD8 6500                       		bcs.s	loc_1A110
0001CFDA 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001CFE0 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001CFE6 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001CFEC 5428 0034                  		addq.b	#2,$34(a0)
0001CFF0                            
0001CFF0                            loc_1A110:
0001CFF0 6000                       		bra.s	loc_1A15C
0001CFF2                            ; ===========================================================================
0001CFF2                            
0001CFF2                            loc_1A112:
0001CFF2 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001CFF8 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001CFFE 6500                       		bcs.s	loc_1A124
0001D000 4268 0010                  		clr.w	obVelX(a0)
0001D004                            
0001D004                            loc_1A124:
0001D004 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D00A 4A68 0012                  		tst.w	obVelY(a0)
0001D00E 6B00                       		bmi.s	loc_1A142
0001D010 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D016 6500                       		bcs.s	loc_1A142
0001D018 317C 0592 000C             		move.w	#$592,obY(a0)
0001D01E 4268 0012                  		clr.w	obVelY(a0)
0001D022                            
0001D022                            loc_1A142:
0001D022 3028 0010                  		move.w	obVelX(a0),d0
0001D026 8068 0012                  		or.w	obVelY(a0),d0
0001D02A 6600                       		bne.s	loc_1A15C
0001D02C 5428 0034                  		addq.b	#2,$34(a0)
0001D030 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D036 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D03C                            
0001D03C                            loc_1A15C:
0001D03C 43FA F89C                  		lea	Ani_SEgg(pc),a1
0001D040 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001D046                            
0001D046                            loc_1A166:
0001D046 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D04C 6C00                       		bge.s	loc_1A172
0001D04E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D052                            
0001D052                            loc_1A172:
0001D052 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D058 6C00                       		bge.s	locret_1A190
0001D05A 323C 001B                  		move.w	#$1B,d1
0001D05E 343C 0070                  		move.w	#$70,d2
0001D062 363C 0071                  		move.w	#$71,d3
0001D066 3828 0008                  		move.w	obX(a0),d4
0001D06A 4EF9 0001 1B08             		jmp	(SolidObject).l
0001D070                            ; ===========================================================================
0001D070                            
0001D070                            locret_1A190:
0001D070 4E75                       		rts	
0001D072                            ; ===========================================================================
0001D072                            
0001D072                            loc_1A192:
0001D072 217C 0001 AB90 0004        		move.l	#Map_Eggman,obMap(a0)
0001D07A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D080 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D086 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D08C 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001D092 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D098 6400                       		bcc.s	loc_1A1D0
0001D09A 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D0A0 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D0A6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D0AC 5428 0034                  		addq.b	#2,$34(a0)
0001D0B0                            
0001D0B0                            loc_1A1D0:
0001D0B0 6000 FF8A                  		bra.w	loc_1A15C
0001D0B4                            ; ===========================================================================
0001D0B4                            
0001D0B4                            loc_1A1D4:
0001D0B4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0BA 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001D0C0 4A68 0030                  		tst.w	$30(a0)
0001D0C4 6600                       		bne.s	loc_1A1FC
0001D0C6 4A28 0020                  		tst.b	obColType(a0)
0001D0CA 6600                       		bne.s	loc_1A216
0001D0CC 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D0D2 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D0D8                            
0001D0D8                            loc_1A1FC:
0001D0D8 5368 0030                  		subq.w	#1,$30(a0)
0001D0DC 6600                       		bne.s	loc_1A216
0001D0DE 4A28 0022                  		tst.b	obStatus(a0)
0001D0E2 6A00                       		bpl.s	loc_1A210
0001D0E4 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D0EA 6000                       		bra.s	loc_1A216
0001D0EC                            ; ===========================================================================
0001D0EC                            
0001D0EC                            loc_1A210:
0001D0EC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D0F2                            
0001D0F2                            loc_1A216:
0001D0F2 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D0F8 6D00                       		blt.s	loc_1A23A
0001D0FA 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D100 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D106 4278 D020                  		clr.w	(v_player+obInertia).w
0001D10A 4A68 0012                  		tst.w	obVelY(a0)
0001D10E 6A00                       		bpl.s	loc_1A248
0001D110 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D116                            
0001D116                            loc_1A23A:
0001D116 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D11C 6D00                       		blt.s	loc_1A248
0001D11E 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D124                            
0001D124                            loc_1A248:
0001D124 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D12A 6500                       		bcs.s	loc_1A260
0001D12C 4A28 0001                  		tst.b	obRender(a0)
0001D130 6B00                       		bmi.s	loc_1A260
0001D132 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D138 6000 FAF0                  		bra.w	Obj85_Delete
0001D13C                            ; ===========================================================================
0001D13C                            
0001D13C                            loc_1A260:
0001D13C 6000 FEFE                  		bra.w	loc_1A15C
0001D140                            ; ===========================================================================
0001D140                            
0001D140                            loc_1A264:	; Routine 4
0001D140 2268 0034                  		movea.l	$34(a0),a1
0001D144 1011                       		move.b	(a1),d0
0001D146 B010                       		cmp.b	(a0),d0
0001D148 6600 FAE0                  		bne.w	Obj85_Delete
0001D14C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D152 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D158 6C00                       		bge.s	loc_1A280
0001D15A 6000                       		bra.s	loc_1A2A6
0001D15C                            ; ===========================================================================
0001D15C                            
0001D15C                            loc_1A280:
0001D15C 4A69 0010                  		tst.w	obVelX(a1)
0001D160 6700                       		beq.s	loc_1A28C
0001D162 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D168                            
0001D168                            loc_1A28C:
0001D168 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001D16C 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001D172                            
0001D172                            loc_1A296:
0001D172 2268 0034                  		movea.l	$34(a0),a1
0001D176 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D17C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D182                            
0001D182                            loc_1A2A6:
0001D182 2268 0034                  		movea.l	$34(a0),a1
0001D186 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D18C 7003                       		moveq	#3,d0
0001D18E C028 0022                  		and.b	obStatus(a0),d0
0001D192 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D198 8128 0001                  		or.b	d0,obRender(a0)
0001D19C 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001D1A2                            ; ===========================================================================
0001D1A2                            
0001D1A2                            loc_1A2C6:	; Routine 6
0001D1A2 2268 0034                  		movea.l	$34(a0),a1
0001D1A6 1011                       		move.b	(a1),d0
0001D1A8 B010                       		cmp.b	(a0),d0
0001D1AA 6600 FA7E                  		bne.w	Obj85_Delete
0001D1AE 0CA9 0001 AB90 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D1B6 6700                       		beq.s	loc_1A2E4
0001D1B8 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D1BE 60C2                       		bra.s	loc_1A2A6
0001D1C0                            ; ===========================================================================
0001D1C0                            
0001D1C0                            loc_1A2E4:
0001D1C0 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D1C6 4A29 0021                  		tst.b	obColProp(a1)
0001D1CA 6F00                       		ble.s	loc_1A312
0001D1CC 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D1D2 217C 0001 AB90 0004        		move.l	#Map_Eggman,obMap(a0)
0001D1DA 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D1E0 43FA D95E                  		lea	Ani_Eggman(pc),a1
0001D1E4 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001D1EA 6000 FF86                  		bra.w	loc_1A296
0001D1EE                            ; ===========================================================================
0001D1EE                            
0001D1EE                            loc_1A312:
0001D1EE 4A28 0001                  		tst.b	1(a0)
0001D1F2 6A00 FA36                  		bpl.w	Obj85_Delete
0001D1F6 6100 D4F2                  		bsr.w	BossDefeated
0001D1FA 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D200 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D206 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D20E 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D214 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D218 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001D21E 6000 FF52                  		bra.w	loc_1A296
0001D222                            ; ===========================================================================
0001D222                            
0001D222                            loc_1A346:	; Routine 8
0001D222 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D228 2268 0034                  		movea.l	$34(a0),a1
0001D22C 0CA9 0001 AB90 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D234 6700                       		beq.s	loc_1A35E
0001D236 6000 FF4A                  		bra.w	loc_1A2A6
0001D23A                            ; ===========================================================================
0001D23A                            
0001D23A                            loc_1A35E:
0001D23A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D240 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D246 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D24A 6600                       		bne.s	loc_1A376
0001D24C 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D252                            
0001D252                            loc_1A376:
0001D252 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D256 6E00                       		bgt.s	loc_1A38A
0001D258 5228 001A                  		addq.b	#1,obFrame(a0)
0001D25C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D262 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D266                            
0001D266                            loc_1A38A:
0001D266 6000 FF0A                  		bra.w	loc_1A296
0001D26A                            ; ===========================================================================
0001D26A                            
0001D26A                            loc_1A38E:	; Routine $A
0001D26A 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D270 3038 D008                  		move.w	(v_player+obX).w,d0
0001D274 9068 0008                  		sub.w	obX(a0),d0
0001D278 6500                       		bcs.s	loc_1A3A6
0001D27A 4A28 0001                  		tst.b	obRender(a0)
0001D27E 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D282                            
0001D282                            loc_1A3A6:
0001D282 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001D288                            ; ===========================================================================
0001D288                            
0001D288                            loc_1A3AC:	; Routine $C
0001D288 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D28E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D294 2268 0034                  		movea.l	$34(a0),a1
0001D298 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D29E 6600                       		bne.s	loc_1A3D0
0001D2A0 0CA9 0001 AB90 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D2A8 6700 F980                  		beq.w	Obj85_Delete
0001D2AC                            
0001D2AC                            loc_1A3D0:
0001D2AC 6000 FED4                  		bra.w	loc_1A2A6
0001D2B0                            		
0001D2B0                            BossModeMusic:
0001D2B0 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D2B6 6600 0000                  		bne.w	NormalMode
0001D2BA 4EF9 0000 0000             		jmp	PinchMode
0001D2C0                            
0001D2C0                            NormalMode:
0001D2C0 303C 00AC                  		move.w	#$AC,d0
0001D2C4 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001D2CA 4E75                       		rts
0001D2CC                            
0001D2CC                            PinchMode:
0001D2CC 303C 0094                  		move.w	#$94,d0
0001D2D0 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001D2D6 303C 00E2                  		move.w	#$E2,d0
0001D2DA 4EB9 0000 0FC6             		jsr	(PlaySound).l
0001D2E0 4E75                       		rts		
0001D2E0 4E75                       		rts		
0001D2E2                            		include	"_anim\FZ Eggman in Ship.asm"
0001D2E2                            ; ---------------------------------------------------------------------------
0001D2E2                            ; Animation script - Eggman (FZ)
0001D2E2                            ; ---------------------------------------------------------------------------
0001D2E2 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D2E4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D2E8                            		even
0001D2E8                            		even
0001D2E8                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D2E8                            ; ---------------------------------------------------------------------------
0001D2E8                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D2E8                            ; ---------------------------------------------------------------------------
0001D2E8                            Map_FZDamaged_internal:
0001D2E8 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D2EA 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D2EC 06                         @damage1:	dc.b 6
0001D2ED E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D2F2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D2F7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D2FC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D301 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D306 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D30B 06                         @damage2:	dc.b 6
0001D30C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D311 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D316 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D31B FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D320 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D325 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D32A                            		even
0001D32A                            		even
0001D32A                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A                            Map_FZLegs_internal:
0001D32A 0000                       		dc.w @extended-Map_FZLegs_internal
0001D32C 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D32E 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D330 02                         @extended:	dc.b 2
0001D331 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D336 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D33B 03                         @halfway:	dc.b 3
0001D33C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D341 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D346 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D34B 02                         @retracted:	dc.b 2
0001D34C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D351 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D356                            		even
0001D356                            		even
0001D356                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D356                            ; ---------------------------------------------------------------------------
0001D356                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D356                            ; ---------------------------------------------------------------------------
0001D356                            
0001D356                            Obj84_Delete:
0001D356 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001D35C                            ; ===========================================================================
0001D35C                            
0001D35C                            EggmanCylinder:
0001D35C 7000                       		moveq	#0,d0
0001D35E 1028 0024                  		move.b	obRoutine(a0),d0
0001D362 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D366 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D36A                            ; ===========================================================================
0001D36A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D36C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D36E 0000                       		dc.w loc_1A57E-Obj84_Index
0001D370                            
0001D370 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D374 2550 0620                  		dc.w $2550, $620
0001D378 2490 04C0                  		dc.w $2490, $4C0
0001D37C 2510 04C0                  		dc.w $2510, $4C0
0001D380                            ; ===========================================================================
0001D380                            
0001D380                            Obj84_Main:	; Routine
0001D380 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D384 7000                       		moveq	#0,d0
0001D386 1028 0028                  		move.b	obSubtype(a0),d0
0001D38A D040                       		add.w	d0,d0
0001D38C D2C0                       		adda.w	d0,a1
0001D38E 117C 0004 0001             		move.b	#4,obRender(a0)
0001D394 08E8 0007 0001             		bset	#7,obRender(a0)
0001D39A 08E8 0004 0001             		bset	#4,obRender(a0)
0001D3A0 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D3A6 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D3AE 3159 0008                  		move.w	(a1)+,obX(a0)
0001D3B2 3151 000C                  		move.w	(a1),obY(a0)
0001D3B6 3159 0038                  		move.w	(a1)+,$38(a0)
0001D3BA 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D3C0 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D3C6 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D3CC 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D3D2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D3D8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3DC                            
0001D3DC                            loc_1A4CE:	; Routine 2
0001D3DC 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D3E2 6F00                       		ble.s	loc_1A4DC
0001D3E4 08E8 0001 0001             		bset	#1,obRender(a0)
0001D3EA                            
0001D3EA                            loc_1A4DC:
0001D3EA 42A8 003C                  		clr.l	$3C(a0)
0001D3EE 4A28 0029                  		tst.b	$29(a0)
0001D3F2 6700                       		beq.s	loc_1A4EA
0001D3F4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D3F8                            
0001D3F8                            loc_1A4EA:
0001D3F8 2028 003C                  		move.l	$3C(a0),d0
0001D3FC 2228 0038                  		move.l	$38(a0),d1
0001D400 D280                       		add.l	d0,d1
0001D402 4841                       		swap	d1
0001D404 3141 000C                  		move.w	d1,obY(a0)
0001D408 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D40E 6600                       		bne.s	loc_1A524
0001D410 4A68 0030                  		tst.w	$30(a0)
0001D414 6A00                       		bpl.s	loc_1A524
0001D416 70F6                       		moveq	#-$A,d0
0001D418 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D41E 6F00                       		ble.s	loc_1A514
0001D420 700E                       		moveq	#$E,d0
0001D422                            
0001D422                            loc_1A514:
0001D422 D240                       		add.w	d0,d1
0001D424 2268 0034                  		movea.l	$34(a0),a1
0001D428 3341 000C                  		move.w	d1,obY(a1)
0001D42C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D432                            
0001D432                            loc_1A524:
0001D432 323C 002B                  		move.w	#$2B,d1
0001D436 343C 0060                  		move.w	#$60,d2
0001D43A 363C 0061                  		move.w	#$61,d3
0001D43E 3828 0008                  		move.w	obX(a0),d4
0001D442 4EB9 0001 1B08             		jsr	(SolidObject).l
0001D448 7000                       		moveq	#0,d0
0001D44A 3228 003C                  		move.w	$3C(a0),d1
0001D44E 6A00                       		bpl.s	loc_1A550
0001D450 4441                       		neg.w	d1
0001D452 5141                       		subq.w	#8,d1
0001D454 6500                       		bcs.s	loc_1A55C
0001D456 5200                       		addq.b	#1,d0
0001D458 E841                       		asr.w	#4,d1
0001D45A D041                       		add.w	d1,d0
0001D45C 6000                       		bra.s	loc_1A55C
0001D45E                            ; ===========================================================================
0001D45E                            
0001D45E                            loc_1A550:
0001D45E 0441 0027                  		subi.w	#$27,d1
0001D462 6500                       		bcs.s	loc_1A55C
0001D464 5200                       		addq.b	#1,d0
0001D466 E841                       		asr.w	#4,d1
0001D468 D041                       		add.w	d1,d0
0001D46A                            
0001D46A                            loc_1A55C:
0001D46A 1140 001A                  		move.b	d0,obFrame(a0)
0001D46E 3038 D008                  		move.w	(v_player+obX).w,d0
0001D472 9068 0008                  		sub.w	obX(a0),d0
0001D476 6B00                       		bmi.s	loc_1A578
0001D478 0440 0140                  		subi.w	#$140,d0
0001D47C 6B00                       		bmi.s	loc_1A578
0001D47E 4A28 0001                  		tst.b	obRender(a0)
0001D482 6A00 FED2                  		bpl.w	Obj84_Delete
0001D486                            
0001D486                            loc_1A578:
0001D486 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001D48C                            ; ===========================================================================
0001D48C                            
0001D48C                            loc_1A57E:	; Routine 4
0001D48C 7000                       		moveq	#0,d0
0001D48E 1028 0028                  		move.b	obSubtype(a0),d0
0001D492 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D496 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D49A 6000 FF5C                  		bra.w	loc_1A4EA
0001D49E                            ; ===========================================================================
0001D49E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D4A0 0000                       		dc.w loc_1A598-off_1A590
0001D4A2 0000                       		dc.w loc_1A604-off_1A590
0001D4A4 0000                       		dc.w loc_1A604-off_1A590
0001D4A6                            ; ===========================================================================
0001D4A6                            
0001D4A6                            loc_1A598:
0001D4A6 4A28 0029                  		tst.b	$29(a0)
0001D4AA 6600                       		bne.s	loc_1A5D4
0001D4AC 2268 0034                  		movea.l	$34(a0),a1
0001D4B0 4A29 0021                  		tst.b	obColProp(a1)
0001D4B4 6600                       		bne.s	loc_1A5B4
0001D4B6 6100 D232                  		bsr.w	BossDefeated
0001D4BA 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D4C2                            
0001D4C2                            loc_1A5B4:
0001D4C2 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D4CA 6400                       		bcc.s	locret_1A602
0001D4CC 42A8 003C                  		clr.l	$3C(a0)
0001D4D0 2268 0034                  		movea.l	$34(a0),a1
0001D4D4 5369 0032                  		subq.w	#1,$32(a1)
0001D4D8 4269 0030                  		clr.w	$30(a1)
0001D4DC 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D4E0 4E75                       		rts	
0001D4E2                            ; ===========================================================================
0001D4E2                            
0001D4E2                            loc_1A5D4:
0001D4E2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D4E8 6C00                       		bge.s	loc_1A5E4
0001D4EA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D4F2                            
0001D4F2                            loc_1A5E4:
0001D4F2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D4FA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D500 6E00                       		bgt.s	locret_1A602
0001D502 4268 003E                  		clr.w	$3E(a0)
0001D506 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D50C 4228 0029                  		clr.b	$29(a0)
0001D510                            
0001D510                            locret_1A602:
0001D510 4E75                       		rts	
0001D512                            ; ===========================================================================
0001D512                            
0001D512                            loc_1A604:
0001D512 08E8 0001 0001             		bset	#1,obRender(a0)
0001D518 4A28 0029                  		tst.b	$29(a0)
0001D51C 6600                       		bne.s	loc_1A646
0001D51E 2268 0034                  		movea.l	$34(a0),a1
0001D522 4A29 0021                  		tst.b	obColProp(a1)
0001D526 6600                       		bne.s	loc_1A626
0001D528 6100 D1C0                  		bsr.w	BossDefeated
0001D52C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D534                            
0001D534                            loc_1A626:
0001D534 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D53C 6400                       		bcc.s	locret_1A674
0001D53E 42A8 003C                  		clr.l	$3C(a0)
0001D542 2268 0034                  		movea.l	$34(a0),a1
0001D546 5369 0032                  		subq.w	#1,$32(a1)
0001D54A 4269 0030                  		clr.w	$30(a1)
0001D54E 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D552 4E75                       		rts	
0001D554                            ; ===========================================================================
0001D554                            
0001D554                            loc_1A646:
0001D554 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D55A 6D00                       		blt.s	loc_1A656
0001D55C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D564                            
0001D564                            loc_1A656:
0001D564 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D56C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D572 6D00                       		blt.s	locret_1A674
0001D574 4268 003E                  		clr.w	$3E(a0)
0001D578 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D57E 4228 0029                  		clr.b	$29(a0)
0001D582                            
0001D582                            locret_1A674:
0001D582 4E75                       		rts	
0001D582 4E75                       		rts	
0001D584                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D584                            ; --------------------------------------------------------------------------------
0001D584                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D584                            ; --------------------------------------------------------------------------------
0001D584                            
0001D584                            SME_SCUpI:	
0001D584 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D588 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D58C 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D590 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D594 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D598 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D59C 06                         SME_SCUpI_18:	dc.b 6	
0001D59D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D5A2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D5A7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D5AC B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D5B1 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D5B6 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D5BB 08                         SME_SCUpI_37:	dc.b 8	
0001D5BC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D5C1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D5C6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D5CB B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D5D0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D5D5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D5DA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D5DF A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D5E4 0A                         SME_SCUpI_60:	dc.b $A	
0001D5E5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D5EA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D5EF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D5F4 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D5F9 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D5FE D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D603 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D608 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D60D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D612 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D617 0C                         SME_SCUpI_93:	dc.b $C	
0001D618 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D61D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D622 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D627 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D62C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D631 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D636 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D63B F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D640 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D645 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D64A 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D64F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D654 0D                         SME_SCUpI_D0:	dc.b $D	
0001D655 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D65A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D65F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D664 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D669 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D66E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D673 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D678 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D67D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D682 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D687 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D68C 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D691 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D696 0E                         SME_SCUpI_112:	dc.b $E	
0001D697 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D69C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6A1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6A6 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6AB B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6B0 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6B5 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6BA F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D6BF F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D6C4 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D6C9 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D6CE 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D6D3 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D6D8 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6DD 0E                         SME_SCUpI_159:	dc.b $E	
0001D6DE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6E3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6E8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6ED B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6F2 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6F7 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6FC D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D701 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D706 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D70B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D710 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D715 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D71A 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D71F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D724 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D725 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D72A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D72F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D734 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D739 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D73E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D743 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D748 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D74D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D752 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D757 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D75C 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D761 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D766 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D76B 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D76C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D771 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D776 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D77B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D780 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D785 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D78A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D78F F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D794 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D799 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D79E 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7A3 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7A8 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7AD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7B2 0E                         SME_SCUpI_22E:	dc.b $E	
0001D7B3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7B8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7BD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7C2 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7C7 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7CC D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7D1 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7D6 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7DB F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7E0 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7E5 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7EA 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7EF 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7F4 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7F9 0E                         SME_SCUpI_275:	dc.b $E	
0001D7FA A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7FF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D804 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D809 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D80E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D813 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D818 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D81D F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D822 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D827 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D82C 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D831 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D836 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D83B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D840 02                         SME_SCUpI_2BC:	dc.b 2	
0001D841 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D846 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D84C 00                         		even
0001D84C 00                         		even
0001D84C                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D84C                            ; ---------------------------------------------------------------------------
0001D84C                            ; Object 86 - energy balls (FZ)
0001D84C                            ; ---------------------------------------------------------------------------
0001D84C                            
0001D84C                            BossPlasma:
0001D84C 7000                       		moveq	#0,d0
0001D84E 1028 0024                  		move.b	obRoutine(a0),d0
0001D852 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D856 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D85A                            ; ===========================================================================
0001D85A 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D85C 0000                       		dc.w Obj86_Generator-Obj86_Index
0001D85E 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001D860 0000                       		dc.w loc_1A962-Obj86_Index
0001D862 0000                       		dc.w loc_1A982-Obj86_Index
0001D864                            ; ===========================================================================
0001D864                            
0001D864                            Obj86_Main:	; Routine 0
0001D864 317C 2588 0008             		move.w	#$2588,obX(a0)
0001D86A 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D870 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D876 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001D87E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D884 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D88A 117C 0008 0017             		move.b	#8,obWidth(a0)
0001D890 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D896 117C 0004 0001             		move.b	#4,obRender(a0)
0001D89C 08E8 0007 0001             		bset	#7,obRender(a0)
0001D8A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D8A6                            
0001D8A6                            Obj86_Generator:; Routine 2
0001D8A6 2268 0034                  		movea.l	$34(a0),a1
0001D8AA 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001D8B0 6600                       		bne.s	loc_1A850
0001D8B2 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001D8B6 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001D8BC 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001D8C2                            ; ===========================================================================
0001D8C2                            
0001D8C2                            loc_1A850:
0001D8C2 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D8C8 4A28 0029                  		tst.b	$29(a0)
0001D8CC 6700                       		beq.s	loc_1A86C
0001D8CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D8D2 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D8D8 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001D8DE                            
0001D8DE                            loc_1A86C:
0001D8DE 323C 0013                  		move.w	#$13,d1
0001D8E2 343C 0008                  		move.w	#8,d2
0001D8E6 363C 0011                  		move.w	#$11,d3
0001D8EA 3828 0008                  		move.w	obX(a0),d4
0001D8EE 4EB9 0001 1B08             		jsr	(SolidObject).l
0001D8F4 3038 D008                  		move.w	(v_player+obX).w,d0
0001D8F8 9068 0008                  		sub.w	obX(a0),d0
0001D8FC 6B00                       		bmi.s	loc_1A89A
0001D8FE 0440 0140                  		subi.w	#$140,d0
0001D902 6B00                       		bmi.s	loc_1A89A
0001D904 4A28 0001                  		tst.b	obRender(a0)
0001D908 6A00 FA4C                  		bpl.w	Obj84_Delete
0001D90C                            
0001D90C                            loc_1A89A:
0001D90C 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001D910 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001D916 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001D91C                            ; ===========================================================================
0001D91C                            
0001D91C                            Obj86_MakeBalls:; Routine 4
0001D91C 4A28 0029                  		tst.b	$29(a0)
0001D920 6700 0000                  		beq.w	loc_1A954
0001D924 4228 0029                  		clr.b	$29(a0)
0001D928 D068 0030                  		add.w	$30(a0),d0
0001D92C 0240 001E                  		andi.w	#$1E,d0
0001D930 D4C0                       		adda.w	d0,a2
0001D932 5868 0030                  		addq.w	#4,$30(a0)
0001D936 4268 0032                  		clr.w	$32(a0)
0001D93A 7403                       		moveq	#3,d2
0001D93C                            
0001D93C                            Obj86_Loop:
0001D93C 4EB9 0000 FB9C             		jsr	(FindNextFreeObj).l
0001D942 6600 0000                  		bne.w	loc_1A954
0001D946 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001D94A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D950 337C 053C 000C             		move.w	#$53C,obY(a1)
0001D956 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001D95C 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001D962 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001D96A 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001D970 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001D976 137C 0000 0020             		move.b	#0,obColType(a1)
0001D97C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001D982 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001D988 137C 0004 0001             		move.b	#4,obRender(a1)
0001D98E 08E9 0007 0001             		bset	#7,obRender(a1)
0001D994 2348 0034                  		move.l	a0,$34(a1)
0001D998 4EB9 0000 3788             		jsr	(RandomNumber).l
0001D99E 3228 0032                  		move.w	$32(a0),d1
0001D9A2 C3FC FFB1                  		muls.w	#-$4F,d1
0001D9A6 0641 2578                  		addi.w	#$2578,d1
0001D9AA 0240 001F                  		andi.w	#$1F,d0
0001D9AE 0440 0010                  		subi.w	#$10,d0
0001D9B2 D041                       		add.w	d1,d0
0001D9B4 3340 0030                  		move.w	d0,$30(a1)
0001D9B8 5268 0032                  		addq.w	#1,$32(a0)
0001D9BC 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001D9C2 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001D9C6                            
0001D9C6                            loc_1A954:
0001D9C6 4A68 0032                  		tst.w	$32(a0)
0001D9CA 6600                       		bne.s	loc_1A95E
0001D9CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D9D0                            
0001D9D0                            loc_1A95E:
0001D9D0 6000 FF0C                  		bra.w	loc_1A86C
0001D9D4                            ; ===========================================================================
0001D9D4                            
0001D9D4                            loc_1A962:	; Routine 6
0001D9D4 117C 0002 001C             		move.b	#2,obAnim(a0)
0001D9DA 4A68 0038                  		tst.w	$38(a0)
0001D9DE 6600                       		bne.s	loc_1A97E
0001D9E0 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001D9E6 2268 0034                  		movea.l	$34(a0),a1
0001D9EA 337C FFFF 0032             		move.w	#-1,$32(a1)
0001D9F0                            
0001D9F0                            loc_1A97E:
0001D9F0 6000 FEEC                  		bra.w	loc_1A86C
0001D9F4                            ; ===========================================================================
0001D9F4                            
0001D9F4                            loc_1A982:	; Routine 8
0001D9F4 7000                       		moveq	#0,d0
0001D9F6 1028 0025                  		move.b	ob2ndRout(a0),d0
0001D9FA 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001D9FE 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DA02 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DA06 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001DA0C 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001DA12                            ; ===========================================================================
0001DA12 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DA14 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DA16 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DA18                            ; ===========================================================================
0001DA18                            
0001DA18                            loc_1A9A6:
0001DA18 3028 0030                  		move.w	$30(a0),d0
0001DA1C 9068 0008                  		sub.w	obX(a0),d0
0001DA20 E940                       		asl.w	#4,d0
0001DA22 3140 0010                  		move.w	d0,obVelX(a0)
0001DA26 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DA2C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DA30 4E75                       		rts	
0001DA32                            ; ===========================================================================
0001DA32                            
0001DA32                            loc_1A9C0:
0001DA32 4A68 0010                  		tst.w	obVelX(a0)
0001DA36 6700                       		beq.s	loc_1A9E6
0001DA38 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001DA3E 3028 0008                  		move.w	obX(a0),d0
0001DA42 9068 0030                  		sub.w	$30(a0),d0
0001DA46 6400                       		bcc.s	loc_1A9E6
0001DA48 4268 0010                  		clr.w	obVelX(a0)
0001DA4C D168 0008                  		add.w	d0,obX(a0)
0001DA50 2268 0034                  		movea.l	$34(a0),a1
0001DA54 5369 0032                  		subq.w	#1,$32(a1)
0001DA58                            
0001DA58                            loc_1A9E6:
0001DA58 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DA5E 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DA62 6600                       		bne.s	locret_1AA1C
0001DA64 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DA68 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DA6E 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DA74 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DA7A 7000                       		moveq	#0,d0
0001DA7C 3038 D008                  		move.w	(v_player+obX).w,d0
0001DA80 9068 0008                  		sub.w	obX(a0),d0
0001DA84 3140 0010                  		move.w	d0,obVelX(a0)
0001DA88 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DA8E                            
0001DA8E                            locret_1AA1C:
0001DA8E 4E75                       		rts	
0001DA90                            ; ===========================================================================
0001DA90                            
0001DA90                            loc_1AA1E:
0001DA90 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001DA96 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DA9C 6400                       		bcc.s	loc_1AA34
0001DA9E 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DAA2 6700                       		beq.s	loc_1AA34
0001DAA4 4E75                       		rts	
0001DAA6                            ; ===========================================================================
0001DAA6                            
0001DAA6                            loc_1AA34:
0001DAA6 2268 0034                  		movea.l	$34(a0),a1
0001DAAA 5369 0038                  		subq.w	#1,$38(a1)
0001DAAE 6000 F8A6                  		bra.w	Obj84_Delete
0001DAAE 6000 F8A6                  		bra.w	Obj84_Delete
0001DAB2                            		include	"_anim\Plasma Ball Launcher.asm"
0001DAB2                            ; ---------------------------------------------------------------------------
0001DAB2                            ; Animation script - energy ball launcher (FZ)
0001DAB2                            ; ---------------------------------------------------------------------------
0001DAB2 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DAB4 0000                       		dc.w @redsparking-Ani_PLaunch
0001DAB6 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DAB8 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DABC 00                         		even
0001DABC 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DAC2                            		even
0001DAC2 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DAC8                            		even
0001DAC8                            		even
0001DAC8                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DAC8                            ; ---------------------------------------------------------------------------
0001DAC8                            ; Sprite mappings - energy ball	launcher (FZ)
0001DAC8                            ; ---------------------------------------------------------------------------
0001DAC8                            Map_PLaunch_internal:
0001DAC8 0000                       		dc.w @red-Map_PLaunch_internal
0001DACA 0000                       		dc.w @white-Map_PLaunch_internal
0001DACC 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DACE 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DAD0 01                         @red:		dc.b 1
0001DAD1 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DAD6 01                         @white:		dc.b 1
0001DAD7 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DADC 01                         @sparking1:	dc.b 1
0001DADD F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DAE2 01                         @sparking2:	dc.b 1
0001DAE3 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DAE8                            		even
0001DAE8                            		even
0001DAE8                            		include	"_anim\Plasma Balls.asm"
0001DAE8                            ; ---------------------------------------------------------------------------
0001DAE8                            ; Animation script - energy balls (FZ)
0001DAE8                            ; ---------------------------------------------------------------------------
0001DAE8 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DAEA 0000                       		dc.w @short-Ani_Plasma
0001DAEC 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DAFB 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DB0A 0A05 FF                    		dc.b $A, 5, afEnd
0001DB0E 00                         		even
0001DB0E 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DB18                            		even
0001DB18                            		even
0001DB18                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DB18                            ; ---------------------------------------------------------------------------
0001DB18                            ; Sprite mappings - energy balls (FZ)
0001DB18                            ; ---------------------------------------------------------------------------
0001DB18                            Map_Plasma_internal:
0001DB18 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DB1A 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DB1C 0000                       		dc.w @white1-Map_Plasma_internal
0001DB1E 0000                       		dc.w @white2-Map_Plasma_internal
0001DB20 0000                       		dc.w @white3-Map_Plasma_internal
0001DB22 0000                       		dc.w @white4-Map_Plasma_internal
0001DB24 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DB26 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DB28 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DB2A 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DB2C 0000                       		dc.w @blank-Map_Plasma_internal
0001DB2E 02                         @fuzzy1:	dc.b 2
0001DB2F F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DB34 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DB39 02                         @fuzzy2:	dc.b 2
0001DB3A F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DB3F F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DB44 02                         @white1:	dc.b 2
0001DB45 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DB4A 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DB4F 02                         @white2:	dc.b 2
0001DB50 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DB55 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DB5A 02                         @white3:	dc.b 2
0001DB5B F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DB60 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DB65 02                         @white4:	dc.b 2
0001DB66 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DB6B F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DB70 01                         @fuzzy3:	dc.b 1
0001DB71 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DB76 01                         @fuzzy4:	dc.b 1
0001DB77 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DB7C 02                         @fuzzy5:	dc.b 2
0001DB7D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DB82 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DB87 02                         @fuzzy6:	dc.b 2
0001DB88 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DB8D F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DB92 00                         @blank:		dc.b 0
0001DB94 00                         		even
0001DB94 00                         		even
0001DB94                            
0001DB94                            		include	"_incObj\3E Prison Capsule.asm"
0001DB94                            ; ---------------------------------------------------------------------------
0001DB94                            ; Object 3E - prison capsule
0001DB94                            ; ---------------------------------------------------------------------------
0001DB94                            
0001DB94                            Prison:
0001DB94 7000                       		moveq	#0,d0
0001DB96 1028 0024                  		move.b	obRoutine(a0),d0
0001DB9A 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DB9E 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DBBE 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001DBC4                            
0001DBC4                            	@delete:
0001DBC4 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001DBCA                            ; ===========================================================================
0001DBCA 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DBCC 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DBCE 0000                       		dc.w Pri_Switched-Pri_Index
0001DBD0 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBD2 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBD4 0000                       		dc.w Pri_Explosion-Pri_Index
0001DBD6 0000                       		dc.w Pri_Animals-Pri_Index
0001DBD8 0000                       		dc.w Pri_EndAct-Pri_Index
0001DBDA                            
0001DBDA =00000030                  pri_origY:	equ $30		; original y-axis position
0001DBDA                            
0001DBDA 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DBDE 040C 0501                  		dc.b 4,	$C, 5, 1
0001DBE2 0610 0403                  		dc.b 6,	$10, 4,	3
0001DBE6 0810 0305                  		dc.b 8,	$10, 3,	5
0001DBEA                            ; ===========================================================================
0001DBEA                            
0001DBEA                            Pri_Main:	; Routine 0
0001DBEA 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DBF2 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DBF8 117C 0004 0001             		move.b	#4,obRender(a0)
0001DBFE 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DC04 7000                       		moveq	#0,d0
0001DC06 1028 0028                  		move.b	obSubtype(a0),d0
0001DC0A E548                       		lsl.w	#2,d0
0001DC0C 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DC10 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DC14 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DC18 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DC1C 3028 0018                  		move.w obPriority(a0),d0 
0001DC20 E248                       		lsr.w #1,d0 
0001DC22 0240 0380                  		andi.w #$380,d0 
0001DC26 3140 0018                  		move.w d0,obPriority(a0)		
0001DC2A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DC2E 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DC32 6600                       		bne.s	@not02		; if not, branch
0001DC34                            
0001DC34 117C 0006 0020             		move.b	#6,obColType(a0)
0001DC3A 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DC40                            
0001DC40                            	@not02:
0001DC40 4E75                       		rts	
0001DC42                            ; ===========================================================================
0001DC42                            
0001DC42                            Pri_BodyMain:	; Routine 2
0001DC42 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DC48 6700                       		beq.s	@chkopened
0001DC4A 323C 002B                  		move.w	#$2B,d1
0001DC4E 343C 0018                  		move.w	#$18,d2
0001DC52 363C 0018                  		move.w	#$18,d3
0001DC56 3828 0008                  		move.w	obX(a0),d4
0001DC5A 4EF9 0001 1B08             		jmp	(SolidObject).l
0001DC60                            ; ===========================================================================
0001DC60                            
0001DC60                            @chkopened:
0001DC60 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DC64 6700                       		beq.s	@open		; if yes, branch
0001DC66 4228 0025                  		clr.b	ob2ndRout(a0)
0001DC6A 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DC70 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DC76                            
0001DC76                            	@open:
0001DC76 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DC7C 4E75                       		rts	
0001DC7E                            ; ===========================================================================
0001DC7E                            
0001DC7E                            Pri_Switched:	; Routine 4
0001DC7E 323C 0017                  		move.w	#$17,d1
0001DC82 343C 0008                  		move.w	#8,d2
0001DC86 363C 0008                  		move.w	#8,d3
0001DC8A 3828 0008                  		move.w	obX(a0),d4
0001DC8E 4EB9 0001 1B08             		jsr	(SolidObject).l
0001DC94 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DC9A 4EB9 0000 C7A6             		jsr	(AnimateSprite).l
0001DCA0 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DCA6 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DCAA 6700                       		beq.s	@open2		; if yes, branch
0001DCAC                            
0001DCAC 5068 000C                  		addq.w	#8,obY(a0)
0001DCB0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DCB6 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DCBC 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DCC0 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DCC4 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DCCA 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DCD0 4228 0025                  		clr.b	ob2ndRout(a0)
0001DCD4 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DCDA 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DCE0                            
0001DCE0                            	@open2:
0001DCE0 4E75                       		rts	
0001DCE2                            ; ===========================================================================
0001DCE2                            
0001DCE2                            Pri_Explosion:	; Routine 6, 8, $A
0001DCE2 7007                       		moveq	#7,d0
0001DCE4 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DCE8 6600                       		bne.s	@noexplosion
0001DCEA 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001DCF0 6600                       		bne.s	@noexplosion
0001DCF2 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DCF6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DCFC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DD02 4EB9 0000 3788             		jsr	(RandomNumber).l
0001DD08 7200                       		moveq	#0,d1
0001DD0A 1200                       		move.b	d0,d1
0001DD0C E409                       		lsr.b	#2,d1
0001DD0E 0441 0020                  		subi.w	#$20,d1
0001DD12 D369 0008                  		add.w	d1,obX(a1)
0001DD16 E048                       		lsr.w	#8,d0
0001DD18 E608                       		lsr.b	#3,d0
0001DD1A D169 000C                  		add.w	d0,obY(a1)
0001DD1E                            
0001DD1E                            	@noexplosion:
0001DD1E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DD22 6700                       		beq.s	@makeanimal
0001DD24 4E75                       		rts	
0001DD26                            ; ===========================================================================
0001DD26                            
0001DD26                            @makeanimal:
0001DD26 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DD2C 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DD32 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DD38 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DD3E 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DD44 7C07                       		moveq	#7,d6
0001DD46 3A3C 009A                  		move.w	#$9A,d5
0001DD4A 78E4                       		moveq	#-$1C,d4
0001DD4C                            
0001DD4C                            	@loop:
0001DD4C 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001DD52 6600                       		bne.s	@fail
0001DD54 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DD58 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DD5E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DD64 D969 0008                  		add.w	d4,obX(a1)
0001DD68 5E44                       		addq.w	#7,d4
0001DD6A 3345 0036                  		move.w	d5,$36(a1)
0001DD6E 5145                       		subq.w	#8,d5
0001DD70 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DD74                            
0001DD74                            	@fail:
0001DD74 4E75                       		rts	
0001DD76                            ; ===========================================================================
0001DD76                            
0001DD76                            Pri_Animals:	; Routine $C
0001DD76 7007                       		moveq	#7,d0
0001DD78 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DD7C 6600                       		bne.s	@noanimal
0001DD7E 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001DD84 6600                       		bne.s	@noanimal
0001DD86 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DD8A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DD90 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DD96 4EB9 0000 3788             		jsr	(RandomNumber).l
0001DD9C 0240 001F                  		andi.w	#$1F,d0
0001DDA0 5D40                       		subq.w	#6,d0
0001DDA2 4A41                       		tst.w	d1
0001DDA4 6A00                       		bpl.s	@ispositive
0001DDA6 4440                       		neg.w	d0
0001DDA8                            
0001DDA8                            	@ispositive:
0001DDA8 D169 0008                  		add.w	d0,obX(a1)
0001DDAC 337C 000C 0036             		move.w	#$C,$36(a1)
0001DDB2                            
0001DDB2                            	@noanimal:
0001DDB2 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DDB6 6600                       		bne.s	@wait
0001DDB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DDBC 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DDC2                            
0001DDC2                            	@wait:
0001DDC2 4E75                       		rts	
0001DDC4                            ; ===========================================================================
0001DDC4                            
0001DDC4                            Pri_EndAct:	; Routine $E
0001DDC4 703E                       		moveq	#$3E,d0
0001DDC6 7228                       		moveq	#id_Animals,d1
0001DDC8 7440                       		moveq	#$40,d2
0001DDCA 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DDCE                            
0001DDCE                            	@findanimal:
0001DDCE B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DDD0 6700                       		beq.s	@found		; if yes, branch
0001DDD2 D2C2                       		adda.w	d2,a1		; next object RAM
0001DDD4 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DDD8                            
0001DDD8 4EB9 0001 0E2A             		jsr	(GotThroughAct1).l
0001DDDE 4EF9 0000 F73A             		jmp	(DeleteObject).l
0001DDE4                            
0001DDE4                            	@found:
0001DDE4 4E75                       		rts	
0001DDE4 4E75                       		rts	
0001DDE6                            		include	"_anim\Prison Capsule.asm"
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6                            ; Animation script - prison capsule
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DDE8 0000                       		dc.w @switchflash-Ani_Pri
0001DDEA 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DDEE                            		even
0001DDEE                            		even
0001DDEE                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DDEE                            ; ---------------------------------------------------------------------------
0001DDEE                            ; Sprite mappings - prison capsule
0001DDEE                            ; ---------------------------------------------------------------------------
0001DDEE                            Map_Pri_internal:
0001DDEE 0000                       		dc.w @capsule-Map_Pri_internal
0001DDF0 0000                       		dc.w @switch1-Map_Pri_internal
0001DDF2 0000                       		dc.w @broken-Map_Pri_internal
0001DDF4 0000                       		dc.w @switch2-Map_Pri_internal
0001DDF6 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DDF8 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DDFA 0000                       		dc.w @blank-Map_Pri_internal
0001DDFC 07                         @capsule:	dc.b 7
0001DDFD E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DE02 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DE07 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DE0C F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DE11 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DE16 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DE1B 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DE20 01                         @switch1:	dc.b 1
0001DE21 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DE26 06                         @broken:	dc.b 6
0001DE27 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DE2C 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DE31 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DE36 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DE3B 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DE40 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DE45 01                         @switch2:	dc.b 1
0001DE46 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DE4B 02                         @unusedthing1:	dc.b 2
0001DE4C E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DE51 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DE56 01                         @unusedthing2:	dc.b 1
0001DE57 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DE5C 00                         @blank:		dc.b 0
0001DE5E 00                         		even
0001DE5E 00                         		even
0001DE5E                            
0001DE5E                            		include	"_incObj\sub ReactToItem.asm"
0001DE5E                            ; ---------------------------------------------------------------------------
0001DE5E                            ; Subroutine to react to obColType(a0)
0001DE5E                            ; ---------------------------------------------------------------------------
0001DE5E                            
0001DE5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE5E                            
0001DE5E                            
0001DE5E                            ReactToItem:
0001DE5E 4E71                       		nop	
0001DE60 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001DE64 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001DE68 5142                       		subq.w	#8,d2
0001DE6A 7A00                       		moveq	#0,d5
0001DE6C 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001DE70 5705                       		subq.b	#3,d5
0001DE72 9645                       		sub.w	d5,d3
0001DE74 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001DE7A 6600                       		bne.s	@notducking	; if not, branch
0001DE7C 0643 000C                  		addi.w	#$C,d3
0001DE80 7A0A                       		moveq	#$A,d5
0001DE82                            
0001DE82                            	@notducking:
0001DE82 383C 0010                  		move.w	#$10,d4
0001DE86 DA45                       		add.w	d5,d5
0001DE88 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001DE8C 3C3C 005F                  		move.w	#$5F,d6
0001DE90                            
0001DE90                            @loop:
0001DE90 4A29 0001                  		tst.b	obRender(a1)
0001DE94 6A00                       		bpl.s	@next
0001DE96 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001DE9A 6600                       		bne.s	@proximity	; if nonzero, branch
0001DE9C                            
0001DE9C                            	@next:
0001DE9C 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001DEA0 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001DEA4                            
0001DEA4 7000                       		moveq	#0,d0
0001DEA6 4E75                       		rts	
0001DEA8                            ; ===========================================================================
0001DEA8                            @sizes:		;   width, height
0001DEA8 1414                       		dc.b  $14, $14		; $01
0001DEAA 0C14                       		dc.b   $C, $14		; $02
0001DEAC 140C                       		dc.b  $14,  $C		; $03
0001DEAE 0410                       		dc.b	4, $10		; $04
0001DEB0 0C12                       		dc.b   $C, $12		; $05
0001DEB2 1010                       		dc.b  $10, $10		; $06
0001DEB4 0606                       		dc.b	6,   6		; $07
0001DEB6 180C                       		dc.b  $18,  $C		; $08
0001DEB8 0C10                       		dc.b   $C, $10		; $09
0001DEBA 100C                       		dc.b  $10,  $C		; $0A
0001DEBC 0808                       		dc.b	8,   8		; $0B
0001DEBE 1410                       		dc.b  $14, $10		; $0C
0001DEC0 1408                       		dc.b  $14,   8		; $0D
0001DEC2 0E0E                       		dc.b   $E,  $E		; $0E
0001DEC4 1818                       		dc.b  $18, $18		; $0F
0001DEC6 2810                       		dc.b  $28, $10		; $10
0001DEC8 1018                       		dc.b  $10, $18		; $11
0001DECA 0810                       		dc.b	8, $10		; $12
0001DECC 2070                       		dc.b  $20, $70		; $13
0001DECE 4020                       		dc.b  $40, $20		; $14
0001DED0 8020                       		dc.b  $80, $20		; $15
0001DED2 2020                       		dc.b  $20, $20		; $16
0001DED4 0808                       		dc.b	8,   8		; $17
0001DED6 0404                       		dc.b	4,   4		; $18
0001DED8 2008                       		dc.b  $20,   8		; $19
0001DEDA 0C0C                       		dc.b   $C,  $C		; $1A
0001DEDC 0804                       		dc.b	8,   4		; $1B
0001DEDE 1804                       		dc.b  $18,   4		; $1C
0001DEE0 2804                       		dc.b  $28,   4		; $1D
0001DEE2 0408                       		dc.b	4,   8		; $1E
0001DEE4 0418                       		dc.b	4, $18		; $1F
0001DEE6 0428                       		dc.b	4, $28		; $20
0001DEE8 0420                       		dc.b	4, $20		; $21
0001DEEA 1818                       		dc.b  $18, $18		; $22
0001DEEC 0C18                       		dc.b   $C, $18		; $23
0001DEEE 4808                       		dc.b  $48,   8		; $24
0001DEF0                            ; ===========================================================================
0001DEF0                            
0001DEF0                            @proximity:
0001DEF0 0240 003F                  		andi.w	#$3F,d0
0001DEF4 D040                       		add.w	d0,d0
0001DEF6 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001DEFA 7200                       		moveq	#0,d1
0001DEFC 121A                       		move.b	(a2)+,d1
0001DEFE 3029 0008                  		move.w	obX(a1),d0
0001DF02 9041                       		sub.w	d1,d0
0001DF04 9042                       		sub.w	d2,d0
0001DF06 6400                       		bcc.s	@outsidex	; branch if not touching
0001DF08 D241                       		add.w	d1,d1
0001DF0A D041                       		add.w	d1,d0
0001DF0C 6500                       		bcs.s	@withinx	; branch if touching
0001DF0E 6000 FF8C                  		bra.w	@next
0001DF12                            ; ===========================================================================
0001DF12                            
0001DF12                            @outsidex:
0001DF12 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DF16 B044                       		cmp.w	d4,d0
0001DF18 6200 FF82                  		bhi.w	@next
0001DF1C                            
0001DF1C                            @withinx:
0001DF1C 7200                       		moveq	#0,d1
0001DF1E 121A                       		move.b	(a2)+,d1
0001DF20 3029 000C                  		move.w	obY(a1),d0
0001DF24 9041                       		sub.w	d1,d0
0001DF26 9043                       		sub.w	d3,d0
0001DF28 6400                       		bcc.s	@outsidey	; branch if not touching
0001DF2A D241                       		add.w	d1,d1
0001DF2C D240                       		add.w	d0,d1
0001DF2E 6500                       		bcs.s	@withiny	; branch if touching
0001DF30 6000 FF6A                  		bra.w	@next
0001DF34                            
0001DF34                            ; ===========================================================================
0001DF34                            
0001DF34                            @outsidey:
0001DF34 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001DF38 B045                       		cmp.w	d5,d0
0001DF3A 6200 FF60                  		bhi.w	@next
0001DF3E                            
0001DF3E                            @withiny:
0001DF3E                            	@chktype:
0001DF3E 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001DF44 6600 0000                          	bne	NotGHZReact  ;TIS
0001DF48 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001DF4C 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001DF50 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF54 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001DF58 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF5C 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001DF60 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001DF64                            NotGHZReact:                      ;TIS
0001DF64 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001DF68 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001DF6C 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001DF70 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001DF74 6700 0000                  		beq.w	React_Special	; if yes, branch
0001DF78 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001DF7A 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001DF7E                            
0001DF7E                            ; obColType is $40-$7F (powerups)
0001DF7E                            
0001DF7E 1029 0020                  		move.b	obColType(a1),d0
0001DF82 0200 003F                  		andi.b	#$3F,d0
0001DF86 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001DF8A 6700                       		beq.s	React_Monitor	; if yes, branch
0001DF8C 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001DF92 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001DF96 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001DF9A                            
0001DF9A                            	@invincible:
0001DF9A 4E75                       		rts	
0001DF9C                            ; ===========================================================================
0001DF9C                            
0001DF9C                            React_Monitor:
0001DF9C 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001DFA0 6A00                       		bpl.s	@movingdown	; if not, branch
0001DFA2                            
0001DFA2 3028 000C                  		move.w	obY(a0),d0
0001DFA6 0440 0010                  		subi.w	#$10,d0
0001DFAA B069 000C                  		cmp.w	obY(a1),d0
0001DFAE 6500                       		bcs.s	@donothing
0001DFB0 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001DFB4 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001DFBA 4A29 0025                  		tst.b	ob2ndRout(a1)
0001DFBE 6600                       		bne.s	@donothing
0001DFC0 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001DFC4 4E75                       		rts	
0001DFC6                            ; ===========================================================================
0001DFC6                            
0001DFC6                            @movingdown:
0001DFC6 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001DFCC 6600                       		bne.s	@donothing
0001DFCE 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001DFD2 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001DFD6                            
0001DFD6                            	@donothing:
0001DFD6 4E75                       		rts	
0001DFD8                            ; ===========================================================================
0001DFD8                            
0001DFD8                            React_Enemy:
0001DFD8 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001DFDC 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001DFDE 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001DFE4 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001DFE8 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001DFEE 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001DFF2                            
0001DFF2                            	@donthurtsonic:
0001DFF2 4A29 0021                  		tst.b	obColProp(a1)
0001DFF6 6700                       		beq.s	breakenemy
0001DFF8                            
0001DFF8 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001DFFC 4468 0012                  		neg.w	obVelY(a0)
0001E000 E0E8 0010                  		asr	obVelX(a0)
0001E004 E0E8 0012                  		asr	obVelY(a0)
0001E008 137C 0000 0020             		move.b	#0,obColType(a1)
0001E00E 5329 0021                  		subq.b	#1,obColProp(a1)
0001E012 6600                       		bne.s	@flagnotclear
0001E014 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E01A                            
0001E01A                            	@flagnotclear:
0001E01A 4E75                       		rts	
0001E01C                            ; ===========================================================================
0001E01C                            
0001E01C                            breakenemy:
0001E01C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E022 7000                       		moveq	#0,d0
0001E024 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E028 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E02C 0C40 0006                  		cmpi.w	#6,d0
0001E030 6500                       		bcs.s	@bonusokay
0001E032 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E034                            
0001E034                            	@bonusokay:
0001E034 3340 003E                  		move.w	d0,$3E(a1)
0001E038 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E03C 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E042 6500                       		bcs.s	@lessthan16	; if not, branch
0001E044 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E048 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E04E                            
0001E04E                            	@lessthan16:
0001E04E 6100 0000                  		bsr.w	AddPoints
0001E052 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E056 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E05C 4A68 0012                  		tst.w	obVelY(a0)
0001E060 6B00                       		bmi.s	@bouncedown
0001E062 3028 000C                  		move.w	obY(a0),d0
0001E066 B069 000C                  		cmp.w	obY(a1),d0
0001E06A 6400                       		bcc.s	@bounceup
0001E06C 4468 0012                  		neg.w	obVelY(a0)
0001E070 4E75                       		rts	
0001E072                            ; ===========================================================================
0001E072                            
0001E072                            	@bouncedown:
0001E072 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E078 4E75                       		rts	
0001E07A                            
0001E07A                            	@bounceup:
0001E07A 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E080 4E75                       		rts	
0001E082                            
0001E082 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E08A                            
0001E08A                            ; ===========================================================================
0001E08A                            
0001E08A                            React_Caterkiller:
0001E08A 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E090                            
0001E090                            React_ChkHurt:
0001E090 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E094 6700                       		beq.s	notinvincible	; if not, branch
0001E096                            
0001E096                            	isflashing:
0001E096 70FF                       		moveq	#-1,d0
0001E098 4E75                       		rts	
0001E09A                            ; ===========================================================================
0001E09A                            
0001E09A                            	notinvincible:
0001E09A 4E71                       		nop	
0001E09C 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E0A0 66F4                       		bne.s	isflashing	; if yes, branch
0001E0A2 2449                       		movea.l	a1,a2
0001E0A4                            
0001E0A4                            ; End of function ReactToItem
0001E0A4                            ; continue straight to HurtSonic
0001E0A4                            
0001E0A4                            ; ---------------------------------------------------------------------------
0001E0A4                            ; Hurting Sonic	subroutine
0001E0A4                            ; ---------------------------------------------------------------------------
0001E0A4                            
0001E0A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0A4                            
0001E0A4                            
0001E0A4                            HurtSonic:
0001E0A4 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E0A8 6600                       		bne.s	@hasshield	; if yes, branch
0001E0AA 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E0AE 6600                       		bne.s	@hasshield	; if yes, branch
0001E0B0 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E0B4 6600                       		bne.s	@hasshield	; if yes, branch
0001E0B6 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E0BA 6600                       		bne.s	@hasshield	; if yes, branch
0001E0BC 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E0C0 6700 0000                  		beq.w	@norings	; if not, branch
0001E0C4                            
0001E0C4 4EB9 0000 FB86             		jsr	(FindFreeObj).l
0001E0CA 6600                       		bne.s	@hasshield
0001E0CC 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E0D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E0D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E0DC                            
0001E0DC                            	@hasshield:
0001E0DC 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E0E2 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E0E4 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E0E8 6700 FFAC                  		beq.w	isflashing
0001E0EC 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E0F0 6700 FFA4                  		beq.w	isflashing
0001E0F4                            
0001E0F4                            	@hasrshield:
0001E0F4 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E0FA 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E0FC 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E100 6700 FF94                  		beq.w 	isflashing
0001E104 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E108 6700 FF8C                  		beq.w 	isflashing
0001E10C 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E110 6700 FF84                  		beq.w 	isflashing
0001E114 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E118 6700 FF7C                  		beq.w 	isflashing
0001E11C 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E120 6700 FF74                  		beq.w 	isflashing
0001E124 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E128 6700 FF6C                  		beq.w 	isflashing
0001E12C 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E130 6700 FF64                  		beq.w 	isflashing
0001E134 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E138 6700 FF5C                  		beq.w 	isflashing
0001E13C                            
0001E13C                            	@hasspshield:
0001E13C 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E142 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E144 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E148 6700 FF4C                  		beq.w 	isflashing
0001E14C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E150 6700 FF44                  		beq.w 	isflashing
0001E154 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E158 6700 FF3C                  		beq.w 	isflashing
0001E15C 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E160 6700 FF34                  		beq.w 	isflashing
0001E164 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E168 6700 FF2C                  		beq.w 	isflashing
0001E16C 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E170 6700 FF24                  		beq.w 	isflashing
0001E174 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E178 6700 FF1C                  		beq.w 	isflashing
0001E17C 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E180 6700 FF14                  		beq.w 	isflashing
0001E184 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E188 6700 FF0C                  		beq.w 	isflashing
0001E18C 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E190 6700 FE8A                  		beq.w 	breakenemy
0001E194 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E198 6700 FE82                  		beq.w 	breakenemy
0001E19C 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E1A0 6700 FE7A                  		beq.w 	breakenemy
0001E1A4 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E1A8 6700 FE72                  		beq.w 	breakenemy
0001E1AC 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E1B0 6700 FE6A                  		beq.w 	breakenemy
0001E1B4                            
0001E1B4                            
0001E1B4                            	@hurtcont:
0001E1B4 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E1BA 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E1C0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E1C6                            		
0001E1C6 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E1CC 6700                       		beq.s	@hurtcont2	;if not, branch
0001E1CE 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E1D2                            		
0001E1D2                            	@hurtcont2:
0001E1D2 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E1D8 4EB9 0001 6146             		jsr		Sonic_ResetOnFloor
0001E1DE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E1E4 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E1EA 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E1F0 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E1F6 6700                       		beq.s	@isdry		; if not, branch
0001E1F8                            
0001E1F8 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E1FE 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E204                            
0001E204                            	@isdry:
0001E204 3028 0008                  		move.w	obX(a0),d0
0001E208 B06A 0008                  		cmp.w	obX(a2),d0
0001E20C 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E20E 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E212                            
0001E212                            	@isleft:
0001E212 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E218 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E21E 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E224 317C 0120 0030             		move.w	#$120,$30(a0)
0001E22A 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E22E 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E230 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E234 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E236 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E23C 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E242 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E248 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E24C 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E250 6600                       		bne.s	@sound		; if not, branch
0001E252 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E256 6600                       		bne.s	@sound		; if not, branch
0001E258 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E25C                            
0001E25C                            	@sound:
0001E25C 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001E262 70FF                       		moveq	#-1,d0
0001E264 4E75                       		rts	
0001E266                            
0001E266                            	@hurtelec:
0001E266 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E26C 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E272 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E276 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E27A 66E0                       		bne.s	@sound		; if not, branch
0001E27C 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E280 66DA                       		bne.s	@sound		; if not, branch
0001E282 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E286                            ; ===========================================================================
0001E286                            
0001E286                            @norings:
0001E286 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E28A 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E28E                            
0001E28E                            ; ---------------------------------------------------------------------------
0001E28E                            ; Subroutine to	kill Sonic
0001E28E                            ; ---------------------------------------------------------------------------
0001E28E                            
0001E28E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E28E                            
0001E28E                            
0001E28E                            KillSonic:
0001E28E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E292 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E296 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E29C 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E2A2 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E2A8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E2AE 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E2B4 4EB9 0001 6146             		jsr		Sonic_ResetOnFloor
0001E2BA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E2C0 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E2C6 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E2CC 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E2D2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E2D8 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E2DC 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E2DE 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E2E2 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E2E4 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E2EA 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E2F0 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E2F4 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E2F8 6600                       		bne.s	@sound
0001E2FA 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E2FE                            
0001E2FE                            	@sound:
0001E2FE 4EB9 0000 0FCC             		jsr	(PlaySound_Special).l
0001E304                            
0001E304                            	@dontdie:
0001E304 70FF                       		moveq	#-1,d0
0001E306 4E75                       		rts	
0001E308                            ; End of function KillSonic
0001E308                            Kill_Lava:	
0001E308 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E30E 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E314 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E318 4EB9 0000 0FCC                 jsr		(PlaySound_Special).l
0001E31E                            
0001E31E                            
0001E31E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E31E                            
0001E31E                            
0001E31E                            React_Special:
0001E31E 1229 0020                  		move.b	obColType(a1),d1
0001E322 0201 003F                  		andi.b	#$3F,d1
0001E326 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E32A 6700                       		beq.s	@caterkiller	; if yes, branch
0001E32C 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E330 6700                       		beq.s	@yadrin		; if yes, branch
0001E332 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E336 6700                       		beq.s	@D7orE1		; if yes, branch
0001E338 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E33C 6700                       		beq.s	@D7orE1		; if yes, branch
0001E33E 4E75                       		rts	
0001E340                            ; ===========================================================================
0001E340                            
0001E340                            @caterkiller:
0001E340 6000 FD48                  		bra.w	React_Caterkiller
0001E344                            ; ===========================================================================
0001E344                            
0001E344                            @yadrin:
0001E344 9A40                       		sub.w	d0,d5
0001E346 0C45 0008                  		cmpi.w	#8,d5
0001E34A 6400                       		bcc.s	@normalenemy
0001E34C 3029 0008                  		move.w	obX(a1),d0
0001E350 5940                       		subq.w	#4,d0
0001E352 0829 0000 0022             		btst	#0,obStatus(a1)
0001E358 6700                       		beq.s	@noflip
0001E35A 0440 0010                  		subi.w	#$10,d0
0001E35E                            
0001E35E                            	@noflip:
0001E35E 9042                       		sub.w	d2,d0
0001E360 6400                       		bcc.s	@loc_1B13C
0001E362 0640 0018                  		addi.w	#$18,d0
0001E366 6500                       		bcs.s	@loc_1B140
0001E368 6000                       		bra.s	@normalenemy
0001E36A                            ; ===========================================================================
0001E36A                            
0001E36A                            	@loc_1B13C:
0001E36A B044                       		cmp.w	d4,d0
0001E36C 6200                       		bhi.s	@normalenemy
0001E36E                            
0001E36E                            	@loc_1B140:
0001E36E 6000 FD20                  		bra.w	React_ChkHurt
0001E372                            ; ===========================================================================
0001E372                            
0001E372                            	@normalenemy:
0001E372 6000 FC64                  		bra.w	React_Enemy
0001E376                            ; ===========================================================================
0001E376                            
0001E376                            @D7orE1:
0001E376 5229 0021                  		addq.b	#1,obColProp(a1)
0001E37A 4E75                       		rts	
0001E37C                            ; End of function React_Special
0001E37C                            
0001E37C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E37C                            
0001E37C                            React_ChkWaterTag:
0001E37C 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E382 6600 0000                  		bne	NotWaterTag
0001E386 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E38C                            	NotWaterTag:
0001E38C 4E75                       		rts
0001E38E                            
0001E38E                            React_WaterTag:
0001E38E 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E394 6700 0000                  		beq	SkipWaterTag
0001E398 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E39E                            	SkipWaterTag:
0001E39E 4E75                       		rts
0001E39E 4E75                       		rts
0001E3A0                            
0001E3A0                            ; ---------------------------------------------------------------------------
0001E3A0                            ; Subroutine to	show the special stage layout
0001E3A0                            ; ---------------------------------------------------------------------------
0001E3A0                            
0001E3A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3A0                            
0001E3A0                            
0001E3A0                            SS_ShowLayout:
0001E3A0 6100 0000                  		bsr.w	SS_AniWallsRings
0001E3A4 6100 0000                  		bsr.w	SS_AniItems
0001E3A8 3F05                       		move.w	d5,-(sp)
0001E3AA 43F8 8000                  		lea	($FFFF8000).w,a1
0001E3AE 1038 F780                  		move.b	(v_ssangle).w,d0
0001E3B2 0200 00FC                  		andi.b	#$FC,d0
0001E3B6 4EB9 0000 37AE             		jsr	(CalcSine).l
0001E3BC 3800                       		move.w	d0,d4
0001E3BE 3A01                       		move.w	d1,d5
0001E3C0 C9FC 0018                  		muls.w	#$18,d4
0001E3C4 CBFC 0018                  		muls.w	#$18,d5
0001E3C8 7400                       		moveq	#0,d2
0001E3CA 3438 F700                  		move.w	(v_screenposx).w,d2
0001E3CE 84FC 0018                  		divu.w	#$18,d2
0001E3D2 4842                       		swap	d2
0001E3D4 4442                       		neg.w	d2
0001E3D6 0642 FF4C                  		addi.w	#-$B4,d2
0001E3DA 7600                       		moveq	#0,d3
0001E3DC 3638 F704                  		move.w	(v_screenposy).w,d3
0001E3E0 86FC 0018                  		divu.w	#$18,d3
0001E3E4 4843                       		swap	d3
0001E3E6 4443                       		neg.w	d3
0001E3E8 0643 FF4C                  		addi.w	#-$B4,d3
0001E3EC 3E3C 000F                  		move.w	#$F,d7
0001E3F0                            
0001E3F0                            loc_1B19E:
0001E3F0 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E3F4 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E3F8 4440                       		neg.w	d0
0001E3FA C3C2                       		muls.w	d2,d1
0001E3FC C1C3                       		muls.w	d3,d0
0001E3FE 2C00                       		move.l	d0,d6
0001E400 DC81                       		add.l	d1,d6
0001E402 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E406 C1C2                       		muls.w	d2,d0
0001E408 C3C3                       		muls.w	d3,d1
0001E40A D280                       		add.l	d0,d1
0001E40C 2406                       		move.l	d6,d2
0001E40E 3C3C 000F                  		move.w	#$F,d6
0001E412                            
0001E412                            loc_1B1C0:
0001E412 2002                       		move.l	d2,d0
0001E414 E080                       		asr.l	#8,d0
0001E416 32C0                       		move.w	d0,(a1)+
0001E418 2001                       		move.l	d1,d0
0001E41A E080                       		asr.l	#8,d0
0001E41C 32C0                       		move.w	d0,(a1)+
0001E41E D485                       		add.l	d5,d2
0001E420 D284                       		add.l	d4,d1
0001E422 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E426                            
0001E426 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E42A 0643 0018                  		addi.w	#$18,d3
0001E42E 51CF FFC0                  		dbf	d7,loc_1B19E
0001E432                            
0001E432 3A1F                       		move.w	(sp)+,d5
0001E434 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E43A 7000                       		moveq	#0,d0
0001E43C 3038 F704                  		move.w	(v_screenposy).w,d0
0001E440 80FC 0018                  		divu.w	#$18,d0
0001E444 C0FC 0080                  		mulu.w	#$80,d0
0001E448 D1C0                       		adda.l	d0,a0
0001E44A 7000                       		moveq	#0,d0
0001E44C 3038 F700                  		move.w	(v_screenposx).w,d0
0001E450 80FC 0018                  		divu.w	#$18,d0
0001E454 D0C0                       		adda.w	d0,a0
0001E456 49F8 8000                  		lea	($FFFF8000).w,a4
0001E45A 3E3C 000F                  		move.w	#$F,d7
0001E45E                            
0001E45E                            loc_1B20C:
0001E45E 3C3C 000F                  		move.w	#$F,d6
0001E462                            
0001E462                            loc_1B210:
0001E462 7000                       		moveq	#0,d0
0001E464 1018                       		move.b	(a0)+,d0
0001E466 6700                       		beq.s	loc_1B268
0001E468 0C00 004E                  		cmpi.b	#$4E,d0
0001E46C 6200                       		bhi.s	loc_1B268
0001E46E 3614                       		move.w	(a4),d3
0001E470 0643 0120                  		addi.w	#$120,d3
0001E474 0C43 0070                  		cmpi.w	#$70,d3
0001E478 6500                       		blo.s	loc_1B268
0001E47A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E47E 6400                       		bhs.s	loc_1B268
0001E480 342C 0002                  		move.w	2(a4),d2
0001E484 0642 00F0                  		addi.w	#$F0,d2
0001E488 0C42 0070                  		cmpi.w	#$70,d2
0001E48C 6500                       		blo.s	loc_1B268
0001E48E 0C42 0170                  		cmpi.w	#$170,d2
0001E492 6400                       		bhs.s	loc_1B268
0001E494 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E49A E748                       		lsl.w	#3,d0
0001E49C 4BF5 0000                  		lea	(a5,d0.w),a5
0001E4A0 225D                       		movea.l	(a5)+,a1
0001E4A2 321D                       		move.w	(a5)+,d1
0001E4A4 D241                       		add.w	d1,d1
0001E4A6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E4AA 365D                       		movea.w	(a5)+,a3
0001E4AC 7200                       		moveq	#0,d1
0001E4AE 1219                       		move.b	(a1)+,d1
0001E4B0 5301                       		subq.b	#1,d1
0001E4B2 6B00                       		bmi.s	loc_1B268
0001E4B4 4EB9 0000 F85E             		jsr	(BuildSpr_Normal).l
0001E4BA                            
0001E4BA                            loc_1B268:
0001E4BA 584C                       		addq.w	#4,a4
0001E4BC 51CE FFA4                  		dbf	d6,loc_1B210
0001E4C0                            
0001E4C0 41E8 0070                  		lea	$70(a0),a0
0001E4C4 51CF FF98                  		dbf	d7,loc_1B20C
0001E4C8                            
0001E4C8 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E4CC 0C05 0050                  		cmpi.b	#$50,d5
0001E4D0 6700                       		beq.s	loc_1B288
0001E4D2 24BC 0000 0000             		move.l	#0,(a2)
0001E4D8 4E75                       		rts	
0001E4DA                            ; ===========================================================================
0001E4DA                            
0001E4DA                            loc_1B288:
0001E4DA 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E4E0 4E75                       		rts	
0001E4E2                            ; End of function SS_ShowLayout
0001E4E2                            
0001E4E2                            ; ---------------------------------------------------------------------------
0001E4E2                            ; Subroutine to	animate	walls and rings	in the special stage
0001E4E2                            ; ---------------------------------------------------------------------------
0001E4E2                            
0001E4E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4E2                            
0001E4E2                            
0001E4E2                            SS_AniWallsRings:
0001E4E2 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E4E8 7000                       		moveq	#0,d0
0001E4EA 1038 F780                  		move.b	(v_ssangle).w,d0
0001E4EE E408                       		lsr.b	#2,d0
0001E4F0 0240 000F                  		andi.w	#$F,d0
0001E4F4 7223                       		moveq	#$23,d1
0001E4F6                            
0001E4F6                            loc_1B2A4:
0001E4F6 3280                       		move.w	d0,(a1)
0001E4F8 5049                       		addq.w	#8,a1
0001E4FA 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E4FE                            
0001E4FE 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E504 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E508 6A00                       		bpl.s	loc_1B2C8
0001E50A 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E510 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E514 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E51A                            
0001E51A                            loc_1B2C8:
0001E51A 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E520 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E524 6A00                       		bpl.s	loc_1B2E4
0001E526 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E52C 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E530 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E536                            
0001E536                            loc_1B2E4:
0001E536 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E53A 1340 0138                  		move.b	d0,$138(a1)
0001E53E 1340 0160                  		move.b	d0,$160(a1)
0001E542 1340 0148                  		move.b	d0,$148(a1)
0001E546 1340 0150                  		move.b	d0,$150(a1)
0001E54A 1340 01D8                  		move.b	d0,$1D8(a1)
0001E54E 1340 01E0                  		move.b	d0,$1E0(a1)
0001E552 1340 01E8                  		move.b	d0,$1E8(a1)
0001E556 1340 01F0                  		move.b	d0,$1F0(a1)
0001E55A 1340 01F8                  		move.b	d0,$1F8(a1)
0001E55E 1340 0200                  		move.b	d0,$200(a1)
0001E562 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E566 6A00                       		bpl.s	loc_1B326
0001E568 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E56E 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E572 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E578                            
0001E578                            loc_1B326:
0001E578 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E57C 1340 0168                  		move.b	d0,$168(a1)
0001E580 1340 0170                  		move.b	d0,$170(a1)
0001E584 1340 0178                  		move.b	d0,$178(a1)
0001E588 1340 0180                  		move.b	d0,$180(a1)
0001E58C 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E590 6A00                       		bpl.s	loc_1B350
0001E592 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E598 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E59C 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E5A2                            
0001E5A2                            loc_1B350:
0001E5A2 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E5A8 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E5AE 7000                       		moveq	#0,d0
0001E5B0 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E5B4 D040                       		add.w	d0,d0
0001E5B6 41F0 0000                  		lea	(a0,d0.w),a0
0001E5BA 3290                       		move.w	(a0),(a1)
0001E5BC 3368 0002 0008             		move.w	2(a0),8(a1)
0001E5C2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E5C8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E5CE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E5D4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E5DA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E5E0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E5E6 D0FC 0020                  		adda.w	#$20,a0
0001E5EA D2FC 0048                  		adda.w	#$48,a1
0001E5EE 3290                       		move.w	(a0),(a1)
0001E5F0 3368 0002 0008             		move.w	2(a0),8(a1)
0001E5F6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E5FC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E602 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E608 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E60E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E614 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E61A D0FC 0020                  		adda.w	#$20,a0
0001E61E D2FC 0048                  		adda.w	#$48,a1
0001E622 3290                       		move.w	(a0),(a1)
0001E624 3368 0002 0008             		move.w	2(a0),8(a1)
0001E62A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E630 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E636 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E63C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E642 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E648 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E64E D0FC 0020                  		adda.w	#$20,a0
0001E652 D2FC 0048                  		adda.w	#$48,a1
0001E656 3290                       		move.w	(a0),(a1)
0001E658 3368 0002 0008             		move.w	2(a0),8(a1)
0001E65E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E664 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E66A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E670 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E676 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E67C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E682 D0FC 0020                  		adda.w	#$20,a0
0001E686 D2FC 0048                  		adda.w	#$48,a1
0001E68A 4E75                       		rts	
0001E68C                            ; End of function SS_AniWallsRings
0001E68C                            
0001E68C                            ; ===========================================================================
0001E68C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E69C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E6AC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E6BC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E6CC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E6DC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E6EC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E6FC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E70C                            ; ---------------------------------------------------------------------------
0001E70C                            ; Subroutine to	remove items when you collect them in the special stage
0001E70C                            ; ---------------------------------------------------------------------------
0001E70C                            
0001E70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E70C                            
0001E70C                            
0001E70C                            SS_RemoveCollectedItem:
0001E70C 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E712 303C 001F                  		move.w	#$1F,d0
0001E716                            
0001E716                            loc_1B4C4:
0001E716 4A12                       		tst.b	(a2)
0001E718 6700                       		beq.s	locret_1B4CE
0001E71A 504A                       		addq.w	#8,a2
0001E71C 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E720                            
0001E720                            locret_1B4CE:
0001E720 4E75                       		rts	
0001E722                            ; End of function SS_RemoveCollectedItem
0001E722                            
0001E722                            ; ---------------------------------------------------------------------------
0001E722                            ; Subroutine to	animate	special	stage items when you touch them
0001E722                            ; ---------------------------------------------------------------------------
0001E722                            
0001E722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E722                            
0001E722                            
0001E722                            SS_AniItems:
0001E722 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E728 3E3C 001F                  		move.w	#$1F,d7
0001E72C                            
0001E72C                            loc_1B4DA:
0001E72C 7000                       		moveq	#0,d0
0001E72E 1010                       		move.b	(a0),d0
0001E730 6700                       		beq.s	loc_1B4E8
0001E732 E548                       		lsl.w	#2,d0
0001E734 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E738 4E91                       		jsr	(a1)
0001E73A                            
0001E73A                            loc_1B4E8:
0001E73A 5048                       		addq.w	#8,a0
0001E73C                            
0001E73C                            loc_1B4EA:
0001E73C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E740                            
0001E740 4E75                       		rts	
0001E742                            ; End of function SS_AniItems
0001E742                            
0001E742                            ; ===========================================================================
0001E742 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E746 0000 0000                  		dc.l SS_AniBumper
0001E74A 0000 0000                  		dc.l SS_Ani1Up
0001E74E 0000 0000                  		dc.l SS_AniReverse
0001E752 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E756 0000 0000                  		dc.l SS_AniGlassBlock
0001E75A                            ; ===========================================================================
0001E75A                            
0001E75A                            SS_AniRingSparks:
0001E75A 5328 0002                  		subq.b	#1,2(a0)
0001E75E 6A00                       		bpl.s	locret_1B530
0001E760 117C 0005 0002             		move.b	#5,2(a0)
0001E766 7000                       		moveq	#0,d0
0001E768 1028 0003                  		move.b	3(a0),d0
0001E76C 5228 0003                  		addq.b	#1,3(a0)
0001E770 2268 0004                  		movea.l	4(a0),a1
0001E774 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E778 1280                       		move.b	d0,(a1)
0001E77A 6600                       		bne.s	locret_1B530
0001E77C 4290                       		clr.l	(a0)
0001E77E 42A8 0004                  		clr.l	4(a0)
0001E782                            
0001E782                            locret_1B530:
0001E782 4E75                       		rts	
0001E784                            ; ===========================================================================
0001E784 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E78A                            ; ===========================================================================
0001E78A                            
0001E78A                            SS_AniBumper:
0001E78A 5328 0002                  		subq.b	#1,2(a0)
0001E78E 6A00                       		bpl.s	locret_1B566
0001E790 117C 0007 0002             		move.b	#7,2(a0)
0001E796 7000                       		moveq	#0,d0
0001E798 1028 0003                  		move.b	3(a0),d0
0001E79C 5228 0003                  		addq.b	#1,3(a0)
0001E7A0 2268 0004                  		movea.l	4(a0),a1
0001E7A4 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E7A8 6600                       		bne.s	loc_1B564
0001E7AA 4290                       		clr.l	(a0)
0001E7AC 42A8 0004                  		clr.l	4(a0)
0001E7B0 12BC 0025                  		move.b	#$25,(a1)
0001E7B4 4E75                       		rts	
0001E7B6                            ; ===========================================================================
0001E7B6                            
0001E7B6                            loc_1B564:
0001E7B6 1280                       		move.b	d0,(a1)
0001E7B8                            
0001E7B8                            locret_1B566:
0001E7B8 4E75                       		rts	
0001E7BA                            ; ===========================================================================
0001E7BA 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E7C0                            ; ===========================================================================
0001E7C0                            
0001E7C0                            SS_Ani1Up:
0001E7C0 5328 0002                  		subq.b	#1,2(a0)
0001E7C4 6A00                       		bpl.s	locret_1B596
0001E7C6 117C 0005 0002             		move.b	#5,2(a0)
0001E7CC 7000                       		moveq	#0,d0
0001E7CE 1028 0003                  		move.b	3(a0),d0
0001E7D2 5228 0003                  		addq.b	#1,3(a0)
0001E7D6 2268 0004                  		movea.l	4(a0),a1
0001E7DA 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E7DE 1280                       		move.b	d0,(a1)
0001E7E0 6600                       		bne.s	locret_1B596
0001E7E2 4290                       		clr.l	(a0)
0001E7E4 42A8 0004                  		clr.l	4(a0)
0001E7E8                            
0001E7E8                            locret_1B596:
0001E7E8 4E75                       		rts	
0001E7EA                            ; ===========================================================================
0001E7EA 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E7F0                            ; ===========================================================================
0001E7F0                            
0001E7F0                            SS_AniReverse:
0001E7F0 5328 0002                  		subq.b	#1,2(a0)
0001E7F4 6A00                       		bpl.s	locret_1B5CC
0001E7F6 117C 0007 0002             		move.b	#7,2(a0)
0001E7FC 7000                       		moveq	#0,d0
0001E7FE 1028 0003                  		move.b	3(a0),d0
0001E802 5228 0003                  		addq.b	#1,3(a0)
0001E806 2268 0004                  		movea.l	4(a0),a1
0001E80A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E80E 6600                       		bne.s	loc_1B5CA
0001E810 4290                       		clr.l	(a0)
0001E812 42A8 0004                  		clr.l	4(a0)
0001E816 12BC 002B                  		move.b	#$2B,(a1)
0001E81A 4E75                       		rts	
0001E81C                            ; ===========================================================================
0001E81C                            
0001E81C                            loc_1B5CA:
0001E81C 1280                       		move.b	d0,(a1)
0001E81E                            
0001E81E                            locret_1B5CC:
0001E81E 4E75                       		rts	
0001E820                            ; ===========================================================================
0001E820 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E826                            ; ===========================================================================
0001E826                            
0001E826                            SS_AniEmeraldSparks:
0001E826 5328 0002                  		subq.b	#1,2(a0)
0001E82A 6A00                       		bpl.s	locret_1B60C
0001E82C 117C 0005 0002             		move.b	#5,2(a0)
0001E832 7000                       		moveq	#0,d0
0001E834 1028 0003                  		move.b	3(a0),d0
0001E838 5228 0003                  		addq.b	#1,3(a0)
0001E83C 2268 0004                  		movea.l	4(a0),a1
0001E840 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E844 1280                       		move.b	d0,(a1)
0001E846 6600                       		bne.s	locret_1B60C
0001E848 4290                       		clr.l	(a0)
0001E84A 42A8 0004                  		clr.l	4(a0)
0001E84E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E85E                            
0001E85E                            locret_1B60C:
0001E85E 4E75                       		rts	
0001E860                            ; ===========================================================================
0001E860 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001E866                            ; ===========================================================================
0001E866                            
0001E866                            SS_AniGlassBlock:
0001E866 5328 0002                  		subq.b	#1,2(a0)
0001E86A 6A00                       		bpl.s	locret_1B640
0001E86C 117C 0001 0002             		move.b	#1,2(a0)
0001E872 7000                       		moveq	#0,d0
0001E874 1028 0003                  		move.b	3(a0),d0
0001E878 5228 0003                  		addq.b	#1,3(a0)
0001E87C 2268 0004                  		movea.l	4(a0),a1
0001E880 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001E884 1280                       		move.b	d0,(a1)
0001E886 6600                       		bne.s	locret_1B640
0001E888 12A8 0004                  		move.b	4(a0),(a1)
0001E88C 4290                       		clr.l	(a0)
0001E88E 42A8 0004                  		clr.l	4(a0)
0001E892                            
0001E892                            locret_1B640:
0001E892 4E75                       		rts	
0001E894                            ; ===========================================================================
0001E894 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001E89E                            
0001E89E                            ; ---------------------------------------------------------------------------
0001E89E                            ; Special stage	layout pointers
0001E89E                            ; ---------------------------------------------------------------------------
0001E89E                            SS_LayoutIndex:
0001E89E 0000 0000                  		dc.l SS_1
0001E8A2 0000 0000                  		dc.l SS_2
0001E8A6 0000 0000                  		dc.l SS_3
0001E8AA 0000 0000                  		dc.l SS_4
0001E8AE 0000 0000                  		dc.l SS_5
0001E8B2 0000 0000                  		dc.l SS_6
0001E8B6                            		even
0001E8B6                            
0001E8B6                            ; ---------------------------------------------------------------------------
0001E8B6                            ; Special stage start locations
0001E8B6                            ; ---------------------------------------------------------------------------
0001E8B6                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001E8B6                            ; ---------------------------------------------------------------------------
0001E8B6                            ; Special stage start locations
0001E8B6                            ; ---------------------------------------------------------------------------
0001E8B6                            
0001E8B6                            		incbin	"startpos\ss1.bin"
0001E8BA                            		incbin	"startpos\ss2.bin"
0001E8BE                            		incbin	"startpos\ss3.bin"
0001E8C2                            		incbin	"startpos\ss4.bin"
0001E8C6                            		incbin	"startpos\ss5.bin"
0001E8CA                            		incbin	"startpos\ss6.bin"
0001E8CE                            		even
0001E8CE                            		even
0001E8CE                            
0001E8CE                            ; ---------------------------------------------------------------------------
0001E8CE                            ; Subroutine to	load special stage layout
0001E8CE                            ; ---------------------------------------------------------------------------
0001E8CE                            
0001E8CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8CE                            
0001E8CE                            
0001E8CE                            SS_Load:
0001E8CE 7000                       		moveq	#0,d0
0001E8D0 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001E8D4 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001E8D8 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001E8DE 6500                       		blo.s	SS_ChkEmldNum
0001E8E0 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001E8E6                            
0001E8E6                            SS_ChkEmldNum:
0001E8E6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001E8EC 6700                       		beq.s	SS_LoadData	; if yes, branch
0001E8EE 7200                       		moveq	#0,d1
0001E8F0 1238 FE57                  		move.b	(v_emeralds).w,d1
0001E8F4 5301                       		subq.b	#1,d1
0001E8F6 6500                       		blo.s	SS_LoadData
0001E8F8 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001E8FC                            
0001E8FC                            SS_ChkEmldLoop:	
0001E8FC B033 1000                  		cmp.b	(a3,d1.w),d0
0001E900 6600                       		bne.s	SS_ChkEmldRepeat
0001E902 60CA                       		bra.s	SS_Load
0001E904                            ; ===========================================================================
0001E904                            
0001E904                            SS_ChkEmldRepeat:
0001E904 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001E908                            
0001E908                            SS_LoadData:
0001E908 E548                       		lsl.w	#2,d0
0001E90A 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001E90E 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001E912 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001E916 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001E91A 43F9 00FF 4000             		lea	($FF4000).l,a1
0001E920 303C 0000                  		move.w	#0,d0
0001E924 4EB9 0000 1604             		jsr	(EniDec).l
0001E92A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001E930 303C 0FFF                  		move.w	#$FFF,d0
0001E934                            
0001E934                            SS_ClrRAM3:
0001E934 4299                       		clr.l	(a1)+
0001E936 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001E93A                            
0001E93A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001E940 41F9 00FF 4000             		lea	($FF4000).l,a0
0001E946 723F                       		moveq	#$3F,d1
0001E948                            
0001E948                            loc_1B6F6:
0001E948 743F                       		moveq	#$3F,d2
0001E94A                            
0001E94A                            loc_1B6F8:
0001E94A 12D8                       		move.b	(a0)+,(a1)+
0001E94C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001E950                            
0001E950 43E9 0040                  		lea	$40(a1),a1
0001E954 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001E958                            
0001E958 43F9 00FF 4008             		lea	($FF4008).l,a1
0001E95E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001E964 724D                       		moveq	#$4D,d1
0001E966                            
0001E966                            loc_1B714:
0001E966 22D8                       		move.l	(a0)+,(a1)+
0001E968 32FC 0000                  		move.w	#0,(a1)+
0001E96C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001E972 32D8                       		move.w	(a0)+,(a1)+
0001E974 51C9 FFF0                  		dbf	d1,loc_1B714
0001E978                            
0001E978 43F9 00FF 4400             		lea	($FF4400).l,a1
0001E97E 323C 003F                  		move.w	#$3F,d1
0001E982                            
0001E982                            loc_1B730:
0001E982                            
0001E982 4299                       		clr.l	(a1)+
0001E984 51C9 FFFC                  		dbf	d1,loc_1B730
0001E988                            
0001E988 4E75                       		rts	
0001E98A                            ; End of function SS_Load
0001E98A                            
0001E98A                            ; ===========================================================================
0001E98A                            
0001E98A                            SS_MapIndex:
0001E98A                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001E98A                            ; ---------------------------------------------------------------------------
0001E98A                            ; Special stage	mappings and VRAM pointers
0001E98A                            ; ---------------------------------------------------------------------------
0001E98A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001E98E 0142                       	dc.w $142		; VRAM setting
0001E990 0000 0000                  	dc.l Map_SSWalls
0001E994 0142                       	dc.w $142
0001E996 0000 0000                  	dc.l Map_SSWalls
0001E99A 0142                       	dc.w $142
0001E99C 0000 0000                  	dc.l Map_SSWalls
0001E9A0 0142                       	dc.w $142
0001E9A2 0000 0000                  	dc.l Map_SSWalls
0001E9A6 0142                       	dc.w $142
0001E9A8 0000 0000                  	dc.l Map_SSWalls
0001E9AC 0142                       	dc.w $142
0001E9AE 0000 0000                  	dc.l Map_SSWalls
0001E9B2 0142                       	dc.w $142
0001E9B4 0000 0000                  	dc.l Map_SSWalls
0001E9B8 0142                       	dc.w $142
0001E9BA 0000 0000                  	dc.l Map_SSWalls
0001E9BE 0142                       	dc.w $142
0001E9C0 0000 0000                  	dc.l Map_SSWalls
0001E9C4 2142                       	dc.w $2142
0001E9C6 0000 0000                  	dc.l Map_SSWalls
0001E9CA 2142                       	dc.w $2142
0001E9CC 0000 0000                  	dc.l Map_SSWalls
0001E9D0 2142                       	dc.w $2142
0001E9D2 0000 0000                  	dc.l Map_SSWalls
0001E9D6 2142                       	dc.w $2142
0001E9D8 0000 0000                  	dc.l Map_SSWalls
0001E9DC 2142                       	dc.w $2142
0001E9DE 0000 0000                  	dc.l Map_SSWalls
0001E9E2 2142                       	dc.w $2142
0001E9E4 0000 0000                  	dc.l Map_SSWalls
0001E9E8 2142                       	dc.w $2142
0001E9EA 0000 0000                  	dc.l Map_SSWalls
0001E9EE 2142                       	dc.w $2142
0001E9F0 0000 0000                  	dc.l Map_SSWalls
0001E9F4 2142                       	dc.w $2142
0001E9F6 0000 0000                  	dc.l Map_SSWalls
0001E9FA 4142                       	dc.w $4142
0001E9FC 0000 0000                  	dc.l Map_SSWalls
0001EA00 4142                       	dc.w $4142
0001EA02 0000 0000                  	dc.l Map_SSWalls
0001EA06 4142                       	dc.w $4142
0001EA08 0000 0000                  	dc.l Map_SSWalls
0001EA0C 4142                       	dc.w $4142
0001EA0E 0000 0000                  	dc.l Map_SSWalls
0001EA12 4142                       	dc.w $4142
0001EA14 0000 0000                  	dc.l Map_SSWalls
0001EA18 4142                       	dc.w $4142
0001EA1A 0000 0000                  	dc.l Map_SSWalls
0001EA1E 4142                       	dc.w $4142
0001EA20 0000 0000                  	dc.l Map_SSWalls
0001EA24 4142                       	dc.w $4142
0001EA26 0000 0000                  	dc.l Map_SSWalls
0001EA2A 4142                       	dc.w $4142
0001EA2C 0000 0000                  	dc.l Map_SSWalls
0001EA30 6142                       	dc.w $6142
0001EA32 0000 0000                  	dc.l Map_SSWalls
0001EA36 6142                       	dc.w $6142
0001EA38 0000 0000                  	dc.l Map_SSWalls
0001EA3C 6142                       	dc.w $6142
0001EA3E 0000 0000                  	dc.l Map_SSWalls
0001EA42 6142                       	dc.w $6142
0001EA44 0000 0000                  	dc.l Map_SSWalls
0001EA48 6142                       	dc.w $6142
0001EA4A 0000 0000                  	dc.l Map_SSWalls
0001EA4E 6142                       	dc.w $6142
0001EA50 0000 0000                  	dc.l Map_SSWalls
0001EA54 6142                       	dc.w $6142
0001EA56 0000 0000                  	dc.l Map_SSWalls
0001EA5A 6142                       	dc.w $6142
0001EA5C 0000 0000                  	dc.l Map_SSWalls
0001EA60 6142                       	dc.w $6142
0001EA62 0001 0C1E                  	dc.l Map_Bump
0001EA66 023B                       	dc.w $23B
0001EA68 0000 0000                  	dc.l Map_SS_R
0001EA6C 0570                       	dc.w $570
0001EA6E 0000 0000                  	dc.l Map_SS_R
0001EA72 0251                       	dc.w $251
0001EA74 0000 0000                  	dc.l Map_SS_R
0001EA78 0370                       	dc.w $370
0001EA7A 0000 0000                  	dc.l Map_SS_Up
0001EA7E 0263                       	dc.w $263
0001EA80 0000 0000                  	dc.l Map_SS_Down
0001EA84 0263                       	dc.w $263
0001EA86 0000 0000                  	dc.l Map_SS_R
0001EA8A 22F0                       	dc.w $22F0
0001EA8C 0000 0000                  	dc.l Map_SS_Glass
0001EA90 0470                       	dc.w $470
0001EA92 0000 0000                  	dc.l Map_SS_Glass
0001EA96 05F0                       	dc.w $5F0
0001EA98 0000 0000                  	dc.l Map_SS_Glass
0001EA9C 65F0                       	dc.w $65F0
0001EA9E 0000 0000                  	dc.l Map_SS_Glass
0001EAA2 25F0                       	dc.w $25F0
0001EAA4 0000 0000                  	dc.l Map_SS_Glass
0001EAA8 45F0                       	dc.w $45F0
0001EAAA 0000 0000                  	dc.l Map_SS_R
0001EAAE 02F0                       	dc.w $2F0
0001EAB0 0101 0C1E                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EAB4 023B                       	dc.w $23B
0001EAB6 0201 0C1E                  	dc.l Map_Bump+$2000000
0001EABA 023B                       	dc.w $23B
0001EABC 0000 0000                  	dc.l Map_SS_R
0001EAC0 0797                       	dc.w $797
0001EAC2 0000 0000                  	dc.l Map_SS_R
0001EAC6 07A0                       	dc.w $7A0
0001EAC8 0000 0000                  	dc.l Map_SS_R
0001EACC 07A9                       	dc.w $7A9
0001EACE 0000 0000                  	dc.l Map_SS_R
0001EAD2 0797                       	dc.w $797
0001EAD4 0000 0000                  	dc.l Map_SS_R
0001EAD8 07A0                       	dc.w $7A0
0001EADA 0000 0000                  	dc.l Map_SS_R
0001EADE 07A9                       	dc.w $7A9
0001EAE0 0000 BD56                  	dc.l Map_Ring
0001EAE4 2798                       	dc.w $2798
0001EAE6 0000 0000                  	dc.l Map_SS_Chaos3
0001EAEA 0770                       	dc.w $770
0001EAEC 0000 0000                  	dc.l Map_SS_Chaos3
0001EAF0 2770                       	dc.w $2770
0001EAF2 0000 0000                  	dc.l Map_SS_Chaos3
0001EAF6 4770                       	dc.w $4770
0001EAF8 0000 0000                  	dc.l Map_SS_Chaos3
0001EAFC 6770                       	dc.w $6770
0001EAFE 0000 0000                  	dc.l Map_SS_Chaos1
0001EB02 0770                       	dc.w $770
0001EB04 0000 0000                  	dc.l Map_SS_Chaos2
0001EB08 0770                       	dc.w $770
0001EB0A 0000 0000                  	dc.l Map_SS_R
0001EB0E 04F0                       	dc.w $4F0
0001EB10 0400 BD56                  	dc.l Map_Ring+$4000000
0001EB14 2798                       	dc.w $2798
0001EB16 0500 BD56                  	dc.l Map_Ring+$5000000
0001EB1A 2798                       	dc.w $2798
0001EB1C 0600 BD56                  	dc.l Map_Ring+$6000000
0001EB20 2798                       	dc.w $2798
0001EB22 0700 BD56                  	dc.l Map_Ring+$7000000
0001EB26 2798                       	dc.w $2798
0001EB28 0000 0000                  	dc.l Map_SS_Glass
0001EB2C 23F0                       	dc.w $23F0
0001EB2E 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EB32 23F0                       	dc.w $23F0
0001EB34 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EB38 23F0                       	dc.w $23F0
0001EB3A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EB3E 23F0                       	dc.w $23F0
0001EB40 0000 0000                  	dc.l Map_SS_R+$2000000
0001EB44 04F0                       	dc.w $4F0
0001EB46 0000 0000                  	dc.l Map_SS_Glass
0001EB4A 05F0                       	dc.w $5F0
0001EB4C 0000 0000                  	dc.l Map_SS_Glass
0001EB50 65F0                       	dc.w $65F0
0001EB52 0000 0000                  	dc.l Map_SS_Glass
0001EB56 25F0                       	dc.w $25F0
0001EB58 0000 0000                  	dc.l Map_SS_Glass
0001EB5C 45F0                       	dc.w $45F0
0001EB5C 45F0                       	dc.w $45F0
0001EB5E                            
0001EB5E                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EB5E                            ; ---------------------------------------------------------------------------
0001EB5E                            ; Sprite mappings - special stage "R" block
0001EB5E                            ; ---------------------------------------------------------------------------
0001EB5E                            Map_SS_R_internal:
0001EB5E 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EB60 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EB62 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EB64 01                         byte_1B912:	dc.b 1
0001EB65 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EB6A 01                         byte_1B918:	dc.b 1
0001EB6B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EB70 00                         byte_1B91E:	dc.b 0
0001EB72 00                         		even
0001EB72 00                         		even
0001EB72                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EB72                            ; ---------------------------------------------------------------------------
0001EB72                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EB72                            ; ---------------------------------------------------------------------------
0001EB72                            Map_SS_Glass_internal:
0001EB72 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EB74 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EB76 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EB78 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EB7A 01                         byte_1B928:	dc.b 1
0001EB7B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EB80 01                         byte_1B92E:	dc.b 1
0001EB81 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EB86 01                         byte_1B934:	dc.b 1
0001EB87 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EB8C 01                         byte_1B93A:	dc.b 1
0001EB8D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EB92                            		even
0001EB92                            		even
0001EB92                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EB92                            ; ---------------------------------------------------------------------------
0001EB92                            ; Sprite mappings - special stage "UP" block
0001EB92                            ; ---------------------------------------------------------------------------
0001EB92                            Map_SS_Up_internal:
0001EB92 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EB94 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EB96 01                         byte_1B944:	dc.b 1
0001EB97 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EB9C 01                         byte_1B94A:	dc.b 1
0001EB9D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EBA2                            		even
0001EBA2                            		even
0001EBA2                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EBA2                            ; ---------------------------------------------------------------------------
0001EBA2                            ; Sprite mappings - special stage "DOWN" block
0001EBA2                            ; ---------------------------------------------------------------------------
0001EBA2                            Map_SS_Down_internal:
0001EBA2 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EBA4 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EBA6 01                         byte_1B954:	dc.b 1
0001EBA7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EBAC 01                         byte_1B95A:	dc.b 1
0001EBAD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EBB2                            		even
0001EBB2                            		even
0001EBB2                            		include	"_maps\SS Chaos Emeralds.asm"
0001EBB2                            ; ---------------------------------------------------------------------------
0001EBB2                            ; Sprite mappings - special stage chaos	emeralds
0001EBB2                            ; ---------------------------------------------------------------------------
0001EBB2 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EBB4 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EBB6 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EBB8 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EBBA 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EBBC 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EBBE 01                         byte_1B96C:	dc.b 1
0001EBBF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EBC4 01                         byte_1B972:	dc.b 1
0001EBC5 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EBCA 01                         byte_1B978:	dc.b 1
0001EBCB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EBD0 01                         byte_1B97E:	dc.b 1
0001EBD1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EBD6                            		even
0001EBD6                            		even
0001EBD6                            
0001EBD6                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EBD6                            ; ---------------------------------------------------------------------------
0001EBD6                            ; Object 09 - Sonic (special stage)
0001EBD6                            ; ---------------------------------------------------------------------------
0001EBD6                            
0001EBD6                            SonicSpecial:
0001EBD6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EBDA 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EBDC 6100 0000                  		bsr.w	SS_FixCamera
0001EBE0 6000 0000                  		bra.w	DebugMode
0001EBE4                            ; ===========================================================================
0001EBE4                            
0001EBE4                            Obj09_Normal:
0001EBE4 7000                       		moveq	#0,d0
0001EBE6 1028 0024                  		move.b	obRoutine(a0),d0
0001EBEA 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EBEE 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EBF2                            ; ===========================================================================
0001EBF2 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EBF4 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EBF6 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EBF8 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EBFA                            ; ===========================================================================
0001EBFA                            
0001EBFA                            Obj09_Main:	; Routine 0
0001EBFA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EBFE 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EC04 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EC0A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EC12 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EC18 117C 0004 0001             		move.b	#4,obRender(a0)
0001EC1E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EC24 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EC2A 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EC30 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EC36                            
0001EC36                            Obj09_ChkDebug:	; Routine 2
0001EC36 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EC3A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EC3C 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EC42 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EC44 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EC4A                            
0001EC4A                            Obj09_NoDebug:
0001EC4A 117C 0000 0030             		move.b	#0,$30(a0)
0001EC50 7000                       		moveq	#0,d0
0001EC52 1028 0022                  		move.b	obStatus(a0),d0
0001EC56 0240 0002                  		andi.w	#2,d0
0001EC5A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EC5E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EC62 4EB9 0001 66F8             		jsr	(Sonic_LoadGfx).l
0001EC68 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001EC6E                            ; ===========================================================================
0001EC6E 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EC70 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EC72                            ; ===========================================================================
0001EC72                            
0001EC72                            Obj09_OnWall:
0001EC72 6100 0000                  		bsr.w	Obj09_Jump
0001EC76 6100 0000                  		bsr.w	Obj09_Move
0001EC7A 6100 0000                  		bsr.w	Obj09_Fall
0001EC7E 6000                       		bra.s	Obj09_Display
0001EC80                            ; ===========================================================================
0001EC80                            
0001EC80                            Obj09_InAir:
0001EC80 6100 0000                  		bsr.w	nullsub_2
0001EC84 6100 0000                  		bsr.w	Obj09_Move
0001EC88 6100 0000                  		bsr.w	Obj09_Fall
0001EC8C                            
0001EC8C                            Obj09_Display:
0001EC8C 6100 0000                  		bsr.w	Obj09_ChkItems
0001EC90 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EC94 4EB9 0000 F6E6             		jsr	(SpeedToPos).l
0001EC9A 6100 0000                  		bsr.w	SS_FixCamera
0001EC9E 3038 F780                  		move.w	(v_ssangle).w,d0
0001ECA2 D078 F782                  		add.w	(v_ssrotate).w,d0
0001ECA6 31C0 F780                  		move.w	d0,(v_ssangle).w
0001ECAA 4EB9 0001 6360             		jsr	(Sonic_Animate).l
0001ECB0 4E75                       		rts	
0001ECB2                            
0001ECB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECB2                            
0001ECB2                            
0001ECB2                            Obj09_Move:
0001ECB2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001ECB8 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001ECBA 6100 0000                  		bsr.w	Obj09_MoveLeft
0001ECBE                            
0001ECBE                            Obj09_ChkRight:
0001ECBE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001ECC4 6700                       		beq.s	loc_1BA78	; if not, branch
0001ECC6 6100 0000                  		bsr.w	Obj09_MoveRight
0001ECCA                            
0001ECCA                            loc_1BA78:
0001ECCA 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001ECCE 0200 000C                  		andi.b	#btnL+btnR,d0
0001ECD2 6600                       		bne.s	loc_1BAA8
0001ECD4 3028 0020                  		move.w	obInertia(a0),d0
0001ECD8 6700                       		beq.s	loc_1BAA8
0001ECDA 6B00                       		bmi.s	loc_1BA9A
0001ECDC 0440 000C                  		subi.w	#$C,d0
0001ECE0 6400                       		bcc.s	loc_1BA94
0001ECE2 303C 0000                  		move.w	#0,d0
0001ECE6                            
0001ECE6                            loc_1BA94:
0001ECE6 3140 0020                  		move.w	d0,obInertia(a0)
0001ECEA 6000                       		bra.s	loc_1BAA8
0001ECEC                            ; ===========================================================================
0001ECEC                            
0001ECEC                            loc_1BA9A:
0001ECEC 0640 000C                  		addi.w	#$C,d0
0001ECF0 6400                       		bcc.s	loc_1BAA4
0001ECF2 303C 0000                  		move.w	#0,d0
0001ECF6                            
0001ECF6                            loc_1BAA4:
0001ECF6 3140 0020                  		move.w	d0,obInertia(a0)
0001ECFA                            
0001ECFA                            loc_1BAA8:
0001ECFA 1038 F780                  		move.b	(v_ssangle).w,d0
0001ECFE 0600 0020                  		addi.b	#$20,d0
0001ED02 0200 00C0                  		andi.b	#$C0,d0
0001ED06 4400                       		neg.b	d0
0001ED08 4EB9 0000 37AE             		jsr	(CalcSine).l
0001ED0E C3E8 0020                  		muls.w	obInertia(a0),d1
0001ED12 D3A8 0008                  		add.l	d1,obX(a0)
0001ED16 C1E8 0020                  		muls.w	obInertia(a0),d0
0001ED1A D1A8 000C                  		add.l	d0,obY(a0)
0001ED1E 48E7 C000                  		movem.l	d0-d1,-(sp)
0001ED22 2428 000C                  		move.l	obY(a0),d2
0001ED26 2628 0008                  		move.l	obX(a0),d3
0001ED2A 6100 0000                  		bsr.w	sub_1BCE8
0001ED2E 6700                       		beq.s	loc_1BAF2
0001ED30 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001ED34 93A8 0008                  		sub.l	d1,obX(a0)
0001ED38 91A8 000C                  		sub.l	d0,obY(a0)
0001ED3C 317C 0000 0020             		move.w	#0,obInertia(a0)
0001ED42 4E75                       		rts	
0001ED44                            ; ===========================================================================
0001ED44                            
0001ED44                            loc_1BAF2:
0001ED44 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001ED48 4E75                       		rts	
0001ED4A                            ; End of function Obj09_Move
0001ED4A                            
0001ED4A                            
0001ED4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED4A                            
0001ED4A                            
0001ED4A                            Obj09_MoveLeft:
0001ED4A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001ED50 3028 0020                  		move.w	obInertia(a0),d0
0001ED54 6700                       		beq.s	loc_1BB06
0001ED56 6A00                       		bpl.s	loc_1BB1A
0001ED58                            
0001ED58                            loc_1BB06:
0001ED58 0440 000C                  		subi.w	#$C,d0
0001ED5C 0C40 F800                  		cmpi.w	#-$800,d0
0001ED60 6E00                       		bgt.s	loc_1BB14
0001ED62 303C F800                  		move.w	#-$800,d0
0001ED66                            
0001ED66                            loc_1BB14:
0001ED66 3140 0020                  		move.w	d0,obInertia(a0)
0001ED6A 4E75                       		rts	
0001ED6C                            ; ===========================================================================
0001ED6C                            
0001ED6C                            loc_1BB1A:
0001ED6C 0440 0040                  		subi.w	#$40,d0
0001ED70 6400                       		bcc.s	loc_1BB22
0001ED72 4E71                       		nop	
0001ED74                            
0001ED74                            loc_1BB22:
0001ED74 3140 0020                  		move.w	d0,obInertia(a0)
0001ED78 4E75                       		rts	
0001ED7A                            ; End of function Obj09_MoveLeft
0001ED7A                            
0001ED7A                            
0001ED7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ED7A                            
0001ED7A                            
0001ED7A                            Obj09_MoveRight:
0001ED7A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001ED80 3028 0020                  		move.w	obInertia(a0),d0
0001ED84 6B00                       		bmi.s	loc_1BB48
0001ED86 0640 000C                  		addi.w	#$C,d0
0001ED8A 0C40 0800                  		cmpi.w	#$800,d0
0001ED8E 6D00                       		blt.s	loc_1BB42
0001ED90 303C 0800                  		move.w	#$800,d0
0001ED94                            
0001ED94                            loc_1BB42:
0001ED94 3140 0020                  		move.w	d0,obInertia(a0)
0001ED98 6000                       		bra.s	locret_1BB54
0001ED9A                            ; ===========================================================================
0001ED9A                            
0001ED9A                            loc_1BB48:
0001ED9A 0640 0040                  		addi.w	#$40,d0
0001ED9E 6400                       		bcc.s	loc_1BB50
0001EDA0 4E71                       		nop	
0001EDA2                            
0001EDA2                            loc_1BB50:
0001EDA2 3140 0020                  		move.w	d0,obInertia(a0)
0001EDA6                            
0001EDA6                            locret_1BB54:
0001EDA6 4E75                       		rts	
0001EDA8                            ; End of function Obj09_MoveRight
0001EDA8                            
0001EDA8                            
0001EDA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDA8                            
0001EDA8                            
0001EDA8                            Obj09_Jump:
0001EDA8 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001EDAC 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001EDB0 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001EDB2 1038 F780                  		move.b	(v_ssangle).w,d0
0001EDB6 0200 00FC                  		andi.b	#$FC,d0
0001EDBA 4400                       		neg.b	d0
0001EDBC 0400 0040                  		subi.b	#$40,d0
0001EDC0 4EB9 0000 37AE             		jsr	(CalcSine).l
0001EDC6 C3FC 0680                  		muls.w	#$680,d1
0001EDCA E081                       		asr.l	#8,d1
0001EDCC 3141 0010                  		move.w	d1,obVelX(a0)
0001EDD0 C1FC 0680                  		muls.w	#$680,d0
0001EDD4 E080                       		asr.l	#8,d0
0001EDD6 3140 0012                  		move.w	d0,obVelY(a0)
0001EDDA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EDEA                            
0001EDEA                            Obj09_NoJump:
0001EDEA 4E75                       		rts	
0001EDEC                            ; End of function Obj09_Jump
0001EDEC                            
0001EDEC                            
0001EDEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDEC                            
0001EDEC                            
0001EDEC                            nullsub_2:
0001EDEC 4E75                       		rts	
0001EDEE                            ; End of function nullsub_2
0001EDEE                            
0001EDEE                            ; ===========================================================================
0001EDEE                            ; ---------------------------------------------------------------------------
0001EDEE                            ; unused subroutine to limit Sonic's upward vertical speed
0001EDEE                            ; ---------------------------------------------------------------------------
0001EDEE 323C FC00                  		move.w	#-$400,d1
0001EDF2 B268 0012                  		cmp.w	obVelY(a0),d1
0001EDF6 6F00                       		ble.s	locret_1BBB4
0001EDF8 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EDFC 0200 0070                  		andi.b	#btnABC,d0
0001EE00 6600                       		bne.s	locret_1BBB4
0001EE02 3141 0012                  		move.w	d1,obVelY(a0)
0001EE06                            
0001EE06                            locret_1BBB4:
0001EE06 4E75                       		rts	
0001EE08                            ; ---------------------------------------------------------------------------
0001EE08                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EE08                            ; ---------------------------------------------------------------------------
0001EE08                            
0001EE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE08                            
0001EE08                            
0001EE08                            SS_FixCamera:
0001EE08 3428 000C                  		move.w	obY(a0),d2
0001EE0C 3628 0008                  		move.w	obX(a0),d3
0001EE10 3038 F700                  		move.w	(v_screenposx).w,d0
0001EE14 0443 00A0                  		subi.w	#$A0,d3
0001EE18 6500                       		bcs.s	loc_1BBCE
0001EE1A 9043                       		sub.w	d3,d0
0001EE1C 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EE20                            
0001EE20                            loc_1BBCE:
0001EE20 3038 F704                  		move.w	(v_screenposy).w,d0
0001EE24 0442 0070                  		subi.w	#$70,d2
0001EE28 6500                       		bcs.s	locret_1BBDE
0001EE2A 9042                       		sub.w	d2,d0
0001EE2C 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EE30                            
0001EE30                            locret_1BBDE:
0001EE30 4E75                       		rts	
0001EE32                            ; End of function SS_FixCamera
0001EE32                            
0001EE32                            ; ===========================================================================
0001EE32                            
0001EE32                            Obj09_ExitStage:
0001EE32 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EE38 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EE3E 6600                       		bne.s	loc_1BBF4
0001EE40 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EE46                            
0001EE46                            loc_1BBF4:
0001EE46 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EE4C 6D00                       		blt.s	loc_1BC12
0001EE4E 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EE54 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EE5A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EE5E 317C 003C 0038             		move.w	#$3C,$38(a0)
0001EE64                            
0001EE64                            loc_1BC12:
0001EE64 3038 F780                  		move.w	(v_ssangle).w,d0
0001EE68 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EE6C 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EE70 4EB9 0001 6360             		jsr	(Sonic_Animate).l
0001EE76 4EB9 0001 66F8             		jsr	(Sonic_LoadGfx).l
0001EE7C 6100 FF8A                  		bsr.w	SS_FixCamera
0001EE80 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001EE86                            ; ===========================================================================
0001EE86                            
0001EE86                            Obj09_Exit2:
0001EE86 5368 0038                  		subq.w	#1,$38(a0)
0001EE8A 6600                       		bne.s	loc_1BC40
0001EE8C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EE92                            
0001EE92                            loc_1BC40:
0001EE92 4EB9 0001 6360             		jsr	(Sonic_Animate).l
0001EE98 4EB9 0001 66F8             		jsr	(Sonic_LoadGfx).l
0001EE9E 6100 FF68                  		bsr.w	SS_FixCamera
0001EEA2 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
0001EEA8                            
0001EEA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEA8                            
0001EEA8                            
0001EEA8                            Obj09_Fall:
0001EEA8 2428 000C                  		move.l	obY(a0),d2
0001EEAC 2628 0008                  		move.l	obX(a0),d3
0001EEB0 1038 F780                  		move.b	(v_ssangle).w,d0
0001EEB4 0200 00FC                  		andi.b	#$FC,d0
0001EEB8 4EB9 0000 37AE             		jsr	(CalcSine).l
0001EEBE 3828 0010                  		move.w	obVelX(a0),d4
0001EEC2 48C4                       		ext.l	d4
0001EEC4 E184                       		asl.l	#8,d4
0001EEC6 C1FC 002A                  		muls.w	#$2A,d0
0001EECA D084                       		add.l	d4,d0
0001EECC 3828 0012                  		move.w	obVelY(a0),d4
0001EED0 48C4                       		ext.l	d4
0001EED2 E184                       		asl.l	#8,d4
0001EED4 C3FC 002A                  		muls.w	#$2A,d1
0001EED8 D284                       		add.l	d4,d1
0001EEDA D680                       		add.l	d0,d3
0001EEDC 6100 0000                  		bsr.w	sub_1BCE8
0001EEE0 6700                       		beq.s	loc_1BCB0
0001EEE2 9680                       		sub.l	d0,d3
0001EEE4 7000                       		moveq	#0,d0
0001EEE6 3140 0010                  		move.w	d0,obVelX(a0)
0001EEEA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EEF0 D481                       		add.l	d1,d2
0001EEF2 6100 0000                  		bsr.w	sub_1BCE8
0001EEF6 6700                       		beq.s	loc_1BCC6
0001EEF8 9481                       		sub.l	d1,d2
0001EEFA 7200                       		moveq	#0,d1
0001EEFC 3141 0012                  		move.w	d1,obVelY(a0)
0001EF00 4E75                       		rts	
0001EF02                            ; ===========================================================================
0001EF02                            
0001EF02                            loc_1BCB0:
0001EF02 D481                       		add.l	d1,d2
0001EF04 6100 0000                  		bsr.w	sub_1BCE8
0001EF08 6700                       		beq.s	loc_1BCD4
0001EF0A 9481                       		sub.l	d1,d2
0001EF0C 7200                       		moveq	#0,d1
0001EF0E 3141 0012                  		move.w	d1,obVelY(a0)
0001EF12 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001EF18                            
0001EF18                            loc_1BCC6:
0001EF18 E080                       		asr.l	#8,d0
0001EF1A E081                       		asr.l	#8,d1
0001EF1C 3140 0010                  		move.w	d0,obVelX(a0)
0001EF20 3141 0012                  		move.w	d1,obVelY(a0)
0001EF24 4E75                       		rts	
0001EF26                            ; ===========================================================================
0001EF26                            
0001EF26                            loc_1BCD4:
0001EF26 E080                       		asr.l	#8,d0
0001EF28 E081                       		asr.l	#8,d1
0001EF2A 3140 0010                  		move.w	d0,obVelX(a0)
0001EF2E 3141 0012                  		move.w	d1,obVelY(a0)
0001EF32 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EF38 4E75                       		rts	
0001EF3A                            ; End of function Obj09_Fall
0001EF3A                            
0001EF3A                            
0001EF3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF3A                            
0001EF3A                            
0001EF3A                            sub_1BCE8:
0001EF3A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EF40 7800                       		moveq	#0,d4
0001EF42 4842                       		swap	d2
0001EF44 3802                       		move.w	d2,d4
0001EF46 4842                       		swap	d2
0001EF48 0644 0044                  		addi.w	#$44,d4
0001EF4C 88FC 0018                  		divu.w	#$18,d4
0001EF50 C8FC 0080                  		mulu.w	#$80,d4
0001EF54 D3C4                       		adda.l	d4,a1
0001EF56 7800                       		moveq	#0,d4
0001EF58 4843                       		swap	d3
0001EF5A 3803                       		move.w	d3,d4
0001EF5C 4843                       		swap	d3
0001EF5E 0644 0014                  		addi.w	#$14,d4
0001EF62 88FC 0018                  		divu.w	#$18,d4
0001EF66 D2C4                       		adda.w	d4,a1
0001EF68 7A00                       		moveq	#0,d5
0001EF6A 1819                       		move.b	(a1)+,d4
0001EF6C 6100                       		bsr.s	sub_1BD30
0001EF6E 1819                       		move.b	(a1)+,d4
0001EF70 6100                       		bsr.s	sub_1BD30
0001EF72 D2FC 007E                  		adda.w	#$7E,a1
0001EF76 1819                       		move.b	(a1)+,d4
0001EF78 6100                       		bsr.s	sub_1BD30
0001EF7A 1819                       		move.b	(a1)+,d4
0001EF7C 6100                       		bsr.s	sub_1BD30
0001EF7E 4A05                       		tst.b	d5
0001EF80 4E75                       		rts	
0001EF82                            ; End of function sub_1BCE8
0001EF82                            
0001EF82                            
0001EF82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF82                            
0001EF82                            
0001EF82                            sub_1BD30:
0001EF82 6700                       		beq.s	locret_1BD44
0001EF84 0C04 0028                  		cmpi.b	#$28,d4
0001EF88 6700                       		beq.s	locret_1BD44
0001EF8A 0C04 003A                  		cmpi.b	#$3A,d4
0001EF8E 6500                       		bcs.s	loc_1BD46
0001EF90 0C04 004B                  		cmpi.b	#$4B,d4
0001EF94 6400                       		bcc.s	loc_1BD46
0001EF96                            
0001EF96                            locret_1BD44:
0001EF96 4E75                       		rts	
0001EF98                            ; ===========================================================================
0001EF98                            
0001EF98                            loc_1BD46:
0001EF98 1144 0030                  		move.b	d4,$30(a0)
0001EF9C 2149 0032                  		move.l	a1,$32(a0)
0001EFA0 7AFF                       		moveq	#-1,d5
0001EFA2 4E75                       		rts	
0001EFA4                            ; End of function sub_1BD30
0001EFA4                            
0001EFA4                            
0001EFA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFA4                            
0001EFA4                            
0001EFA4                            Obj09_ChkItems:
0001EFA4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EFAA 7800                       		moveq	#0,d4
0001EFAC 3828 000C                  		move.w	obY(a0),d4
0001EFB0 0644 0050                  		addi.w	#$50,d4
0001EFB4 88FC 0018                  		divu.w	#$18,d4
0001EFB8 C8FC 0080                  		mulu.w	#$80,d4
0001EFBC D3C4                       		adda.l	d4,a1
0001EFBE 7800                       		moveq	#0,d4
0001EFC0 3828 0008                  		move.w	obX(a0),d4
0001EFC4 0644 0020                  		addi.w	#$20,d4
0001EFC8 88FC 0018                  		divu.w	#$18,d4
0001EFCC D2C4                       		adda.w	d4,a1
0001EFCE 1811                       		move.b	(a1),d4
0001EFD0 6600                       		bne.s	Obj09_ChkCont
0001EFD2 4A28 003A                  		tst.b	$3A(a0)
0001EFD6 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001EFDA 7800                       		moveq	#0,d4
0001EFDC 4E75                       		rts	
0001EFDE                            ; ===========================================================================
0001EFDE                            
0001EFDE                            Obj09_ChkCont:
0001EFDE 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001EFE2 6600                       		bne.s	Obj09_Chk1Up
0001EFE4 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001EFE8 6600                       		bne.s	Obj09_GetCont
0001EFEA 14BC 0001                  		move.b	#1,(a2)
0001EFEE 2549 0004                  		move.l	a1,4(a2)
0001EFF2                            
0001EFF2                            Obj09_GetCont:
0001EFF2 4EB9 0000 B8BE             		jsr	(CollectRing).l
0001EFF8 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001EFFE 6500                       		bcs.s	Obj09_NoCont
0001F000 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F006 6600                       		bne.s	Obj09_NoCont
0001F008 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F016                            
0001F016                            Obj09_NoCont:
0001F016 7800                       		moveq	#0,d4
0001F018 4E75                       		rts	
0001F01A                            ; ===========================================================================
0001F01A                            
0001F01A                            Obj09_Chk1Up:
0001F01A 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F01E 6600                       		bne.s	Obj09_ChkEmer
0001F020 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F024 6600                       		bne.s	Obj09_Get1Up
0001F026 14BC 0003                  		move.b	#3,(a2)
0001F02A 2549 0004                  		move.l	a1,4(a2)
0001F02E                            
0001F02E                            Obj09_Get1Up:
0001F02E 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F032 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F040 7800                       		moveq	#0,d4
0001F042 4E75                       		rts	
0001F044                            ; ===========================================================================
0001F044                            
0001F044                            Obj09_ChkEmer:
0001F044 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F048 6500                       		bcs.s	Obj09_ChkGhost
0001F04A 0C04 0040                  		cmpi.b	#$40,d4
0001F04E 6200                       		bhi.s	Obj09_ChkGhost
0001F050 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F054 6600                       		bne.s	Obj09_GetEmer
0001F056 14BC 0005                  		move.b	#5,(a2)
0001F05A 2549 0004                  		move.l	a1,4(a2)
0001F05E                            
0001F05E                            Obj09_GetEmer:
0001F05E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F064 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F066 0404 003B                  		subi.b	#$3B,d4
0001F06A 7000                       		moveq	#0,d0
0001F06C 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F070 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F074 1584 0000                  		move.b	d4,(a2,d0.w)
0001F078 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F07C                            
0001F07C                            Obj09_NoEmer:
0001F086 7800                       		moveq	#0,d4
0001F088 4E75                       		rts	
0001F08A                            ; ===========================================================================
0001F08A                            
0001F08A                            Obj09_ChkGhost:
0001F08A 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F08E 6600                       		bne.s	Obj09_ChkGhostTag
0001F090 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F096                            
0001F096                            Obj09_ChkGhostTag:
0001F096 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F09A 6600                       		bne.s	Obj09_NoGhost
0001F09C 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F0A2 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F0A4 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F0AA                            
0001F0AA                            Obj09_NoGhost:
0001F0AA 78FF                       		moveq	#-1,d4
0001F0AC 4E75                       		rts	
0001F0AE                            ; ===========================================================================
0001F0AE                            
0001F0AE                            Obj09_MakeGhostSolid:
0001F0AE 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F0B4 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F0B6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F0BC 723F                       		moveq	#$3F,d1
0001F0BE                            
0001F0BE                            Obj09_GhostLoop2:
0001F0BE 743F                       		moveq	#$3F,d2
0001F0C0                            
0001F0C0                            Obj09_GhostLoop:
0001F0C0 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F0C4 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F0C6 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F0CA                            
0001F0CA                            Obj09_NoReplace:
0001F0CA 5249                       		addq.w	#1,a1
0001F0CC 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F0D0 43E9 0040                  		lea	$40(a1),a1
0001F0D4 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F0D8                            
0001F0D8                            Obj09_GhostNotSolid:
0001F0D8 4228 003A                  		clr.b	$3A(a0)
0001F0DC 7800                       		moveq	#0,d4
0001F0DE 4E75                       		rts	
0001F0E0                            ; End of function Obj09_ChkItems
0001F0E0                            
0001F0E0                            
0001F0E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0E0                            
0001F0E0                            
0001F0E0                            Obj09_ChkItems2:
0001F0E0 1028 0030                  		move.b	$30(a0),d0
0001F0E4 6600                       		bne.s	Obj09_ChkBumper
0001F0E6 5328 0036                  		subq.b	#1,$36(a0)
0001F0EA 6A00                       		bpl.s	loc_1BEA0
0001F0EC 117C 0000 0036             		move.b	#0,$36(a0)
0001F0F2                            
0001F0F2                            loc_1BEA0:
0001F0F2 5328 0037                  		subq.b	#1,$37(a0)
0001F0F6 6A00                       		bpl.s	locret_1BEAC
0001F0F8 117C 0000 0037             		move.b	#0,$37(a0)
0001F0FE                            
0001F0FE                            locret_1BEAC:
0001F0FE 4E75                       		rts	
0001F100                            ; ===========================================================================
0001F100                            
0001F100                            Obj09_ChkBumper:
0001F100 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F104 6600                       		bne.s	Obj09_GOAL
0001F106 2228 0032                  		move.l	$32(a0),d1
0001F10A 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F110 3401                       		move.w	d1,d2
0001F112 0241 007F                  		andi.w	#$7F,d1
0001F116 C2FC 0018                  		mulu.w	#$18,d1
0001F11A 0441 0014                  		subi.w	#$14,d1
0001F11E EE4A                       		lsr.w	#7,d2
0001F120 0242 007F                  		andi.w	#$7F,d2
0001F124 C4FC 0018                  		mulu.w	#$18,d2
0001F128 0442 0044                  		subi.w	#$44,d2
0001F12C 9268 0008                  		sub.w	obX(a0),d1
0001F130 9468 000C                  		sub.w	obY(a0),d2
0001F134 4EB9 0000 3A40             		jsr	(CalcAngle).l
0001F13A 4EB9 0000 37AE             		jsr	(CalcSine).l
0001F140 C3FC F900                  		muls.w	#-$700,d1
0001F144 E081                       		asr.l	#8,d1
0001F146 3141 0010                  		move.w	d1,obVelX(a0)
0001F14A C1FC F900                  		muls.w	#-$700,d0
0001F14E E080                       		asr.l	#8,d0
0001F150 3140 0012                  		move.w	d0,obVelY(a0)
0001F154 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F15A 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F15E 6600                       		bne.s	Obj09_BumpSnd
0001F160 14BC 0002                  		move.b	#2,(a2)
0001F164 2028 0032                  		move.l	$32(a0),d0
0001F168 5380                       		subq.l	#1,d0
0001F16A 2540 0004                  		move.l	d0,4(a2)
0001F16E                            
0001F16E                            Obj09_BumpSnd:
0001F178                            ; ===========================================================================
0001F178                            
0001F178                            Obj09_GOAL:
0001F178 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F17C 6600                       		bne.s	Obj09_UPblock
0001F17E 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F18C 4E75                       		rts	
0001F18E                            ; ===========================================================================
0001F18E                            
0001F18E                            Obj09_UPblock:
0001F18E 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F192 6600                       		bne.s	Obj09_DOWNblock
0001F194 4A28 0036                  		tst.b	$36(a0)
0001F198 6600 0000                  		bne.w	Obj09_NoGlass
0001F19C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F1A2 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F1A8 6700                       		beq.s	Obj09_UPsnd
0001F1AA E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F1AE 2268 0032                  		movea.l	$32(a0),a1
0001F1B2 5389                       		subq.l	#1,a1
0001F1B4 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F1B8                            
0001F1B8                            Obj09_UPsnd:
0001F1C2                            ; ===========================================================================
0001F1C2                            
0001F1C2                            Obj09_DOWNblock:
0001F1C2 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F1C6 6600                       		bne.s	Obj09_Rblock
0001F1C8 4A28 0036                  		tst.b	$36(a0)
0001F1CC 6600 0000                  		bne.w	Obj09_NoGlass
0001F1D0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F1D6 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F1DC 6600                       		bne.s	Obj09_DOWNsnd
0001F1DE E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F1E2 2268 0032                  		movea.l	$32(a0),a1
0001F1E6 5389                       		subq.l	#1,a1
0001F1E8 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F1EC                            
0001F1EC                            Obj09_DOWNsnd:
0001F1F6                            ; ===========================================================================
0001F1F6                            
0001F1F6                            Obj09_Rblock:
0001F1F6 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F1FA 6600                       		bne.s	Obj09_ChkGlass
0001F1FC 4A28 0037                  		tst.b	$37(a0)
0001F200 6600 0000                  		bne.w	Obj09_NoGlass
0001F204 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F20A 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F20E 6600                       		bne.s	Obj09_RevStage
0001F210 14BC 0004                  		move.b	#4,(a2)
0001F214 2028 0032                  		move.l	$32(a0),d0
0001F218 5380                       		subq.l	#1,d0
0001F21A 2540 0004                  		move.l	d0,4(a2)
0001F21E                            
0001F21E                            Obj09_RevStage:
0001F21E 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F22C                            ; ===========================================================================
0001F22C                            
0001F22C                            Obj09_ChkGlass:
0001F22C 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F230 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F232 0C00 002E                  		cmpi.b	#$2E,d0
0001F236 6700                       		beq.s	Obj09_Glass
0001F238 0C00 002F                  		cmpi.b	#$2F,d0
0001F23C 6700                       		beq.s	Obj09_Glass
0001F23E 0C00 0030                  		cmpi.b	#$30,d0
0001F242 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F244                            
0001F244                            Obj09_Glass:
0001F244 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F248 6600                       		bne.s	Obj09_GlassSnd
0001F24A 14BC 0006                  		move.b	#6,(a2)
0001F24E 2268 0032                  		movea.l	$32(a0),a1
0001F252 5389                       		subq.l	#1,a1
0001F254 2549 0004                  		move.l	a1,4(a2)
0001F258 1011                       		move.b	(a1),d0
0001F25A 5200                       		addq.b	#1,d0		; change glass type when touched
0001F25C 0C00 0030                  		cmpi.b	#$30,d0
0001F260 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F262 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F264                            
0001F264                            Obj09_GlassUpdate:
0001F264 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F268                            
0001F268                            Obj09_GlassSnd:
0001F272                            ; ===========================================================================
0001F272                            
0001F272                            Obj09_NoGlass:
0001F272 4E75                       		rts	
0001F274                            ; End of function Obj09_ChkItems2
0001F274                            ; End of function Obj09_ChkItems2
0001F274                            
0001F274                            		include	"_incObj\10.asm"
0001F274                            ; ---------------------------------------------------------------------------
0001F274                            ; Object 10 - After-Image
0001F274                            ; ---------------------------------------------------------------------------
0001F274                            
0001F274                            Obj10:
0001F274 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F27A 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F27E                            
0001F27E 7000                             moveq   #0,d0
0001F280 1028 0024                        move.b   obRoutine(a0),d0
0001F284 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F288 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F28C                            
0001F28C                            ; ===========================================================================
0001F28C                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F28C                            ; ===========================================================================
0001F28C                            Afterimage_Index:
0001F28C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F28E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F290 0000                             dc.w NoAfterImage-Afterimage_Index
0001F292 0000                             dc.w AfterimageStart-Afterimage_Index
0001F294 0000                             dc.w NoAfterImage-Afterimage_Index
0001F296 0000                             dc.w NoAfterImage-Afterimage_Index
0001F298 0000                             dc.w NoAfterImage-Afterimage_Index
0001F29A 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F29C 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F29E                            ; ===========================================================================
0001F29E                            NoAfterImage:
0001F29E 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F2A2 4E75                             rts
0001F2A4                            ; ===========================================================================
0001F2A4                            AfterimageStart:
0001F2A4 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F2AA 6000                             bra.s   Afterimage_Show
0001F2AC                            ; ===========================================================================
0001F2AC                            AfterimageLPrio:
0001F2AC 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F2B0                            ; ===========================================================================
0001F2B0                            Afterimage_Show:
0001F2B0 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F2B4 4EB9 0000 3788                   jsr   (RandomNumber).l         ; get a random number
0001F2BA 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F2BE 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F2C0 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F2C2                            
0001F2C2                            AfterimageException:
0001F2C2 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F2C8 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F2CE 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F2D4 4EF9 0000 F6FA                   jmp   DisplaySprite
0001F2DA                            ; ===========================================================================
0001F2DA                            AfterimageEnd:
0001F2DA 4EF9 0000 F73A                   jmp   DeleteObject
0001F2DA 4EF9 0000 F73A                   jmp   DeleteObject
0001F2E0                            
0001F2E0                            		include	"_inc\AnimateLevelGfx.asm"
0001F2E0                            ; ---------------------------------------------------------------------------
0001F2E0                            ; Subroutine to	animate	level graphics
0001F2E0                            ; ---------------------------------------------------------------------------
0001F2E0                            
0001F2E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2E0                            
0001F2E0                            
0001F2E0                            AnimateLevelGfx:
0001F2E0                            		;tst.w	(f_pause).w	; is the game paused?
0001F2E0                            		;bne.s	@ispaused	; if yes, branch
0001F2E0 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F2E6 6100 0000                  		bsr.w	AniArt_GiantRing
0001F2EA 7000                       		moveq	#0,d0
0001F2EC 1038 FE10                  		move.b	(v_zone).w,d0
0001F2F0 D040                       		add.w	d0,d0
0001F2F2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F2F6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F2FA                            
0001F2FA                            	@ispaused:
0001F2FA 4E75                       		rts	
0001F2FC                            
0001F2FC                            ; ===========================================================================
0001F2FC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F300 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F304 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F308 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F30A                            ; ===========================================================================
0001F30A                            ; ---------------------------------------------------------------------------
0001F30A                            ; Animated pattern routine - Green Hill
0001F30A                            ; ---------------------------------------------------------------------------
0001F30A                            
0001F30A                            AniArt_GHZ:
0001F30A                            
0001F30A                            AniArt_GHZ_Waterfall:
0001F30A                            
0001F30A =00000008                  @size:		equ 8	; number of tiles per frame
0001F30A                            
0001F30A 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F30E 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F310                            
0001F310 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F316 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F31C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F320 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F324 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F328 6700                       		beq.s	@isframe0	; branch if frame 0
0001F32A 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F32E                            
0001F32E                            	@isframe0:
0001F338 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F33C 6000 0000                  		bra.w	LoadTiles
0001F340                            ; ===========================================================================
0001F340                            
0001F340                            AniArt_GHZ_Bigflower:
0001F340                            
0001F340 =00000010                  @size:		equ 16	; number of tiles per frame
0001F340                            
0001F340 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F344 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F346                            
0001F346 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F34C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F352 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F356 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F35A 0240 0001                  		andi.w	#1,d0
0001F35E 6700                       		beq.s	@isframe0
0001F360 43E9 0200                  		lea	@size*$20(a1),a1
0001F364                            
0001F364                            	@isframe0:
0001F36E 323C 000F                  		move.w	#@size-1,d1
0001F372 6000 0000                  		bra.w	LoadTiles
0001F376                            ; ===========================================================================
0001F376                            
0001F376                            AniArt_GHZ_Smallflower:
0001F376                            
0001F376 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F376                            
0001F376 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F37A 6A00                       		bpl.s	@end
0001F37C                            
0001F37C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F382 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F386 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F38A 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F38E 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F392 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F396 6600                       		bne.s	@isframe1	; if not, branch
0001F398 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F39E                            
0001F39E                            	@isframe1:
0001F39E EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F3A0 3200                       		move.w	d0,d1
0001F3A2 D040                       		add.w	d0,d0
0001F3A4 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F3B0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F3B6 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F3BA 323C 000B                  		move.w	#@size-1,d1
0001F3BE 6100 0000                  		bsr.w	LoadTiles
0001F3C2                            
0001F3C2                            @end:
0001F3C2 4E75                       		rts	
0001F3C4                            
0001F3C4 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F3C8                            ; ===========================================================================
0001F3C8                            ; ---------------------------------------------------------------------------
0001F3C8                            ; Animated pattern routine - Marble
0001F3C8                            ; ---------------------------------------------------------------------------
0001F3C8                            
0001F3C8                            AniArt_MZ:
0001F3C8                            
0001F3C8                            AniArt_MZ_Lava:
0001F3C8                            
0001F3C8 =00000008                  @size:		equ 8	; number of tiles per frame
0001F3C8                            
0001F3C8 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F3CC 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F3CE                            
0001F3CE 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F3D4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F3DA 7000                       		moveq	#0,d0
0001F3DC 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F3E0 5200                       		addq.b	#1,d0		; increment frame counter
0001F3E2 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F3E6 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F3E8 7000                       		moveq	#0,d0
0001F3EA                            
0001F3EA                            	@frame01or2:
0001F3EA 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F3EE C0FC 0100                  		mulu.w	#@size*$20,d0
0001F3F2 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F3FE 323C 0007                  		move.w	#@size-1,d1
0001F402 6100 0000                  		bsr.w	LoadTiles
0001F406                            
0001F406                            AniArt_MZ_Magma:
0001F406 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F40A 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F40C                            		
0001F40C 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F412 7000                       		moveq	#0,d0
0001F414 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F418 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F41E EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F420 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F42C 7600                       		moveq	#0,d3
0001F42E 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F432 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F436 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F43A 343C 0003                  		move.w	#3,d2
0001F43E                            
0001F43E                            	@loop:
0001F43E 3003                       		move.w	d3,d0
0001F440 D040                       		add.w	d0,d0
0001F442 0240 001E                  		andi.w	#$1E,d0
0001F446 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F44C 3033 0000                  		move.w	(a3,d0.w),d0
0001F450 47F3 0000                  		lea	(a3,d0.w),a3
0001F454 224C                       		movea.l	a4,a1
0001F456 323C 001F                  		move.w	#$1F,d1
0001F45A 4E93                       		jsr	(a3)
0001F45C 5843                       		addq.w	#4,d3
0001F45E 51CA FFDE                  		dbf	d2,@loop
0001F462 4E75                       		rts	
0001F464                            ; ===========================================================================
0001F464                            
0001F464                            AniArt_MZ_Torch:
0001F464                            
0001F464 =00000006                  @size:		equ 6	; number of tiles per frame
0001F464                            
0001F464 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F468 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F46C                            		
0001F46C 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F472 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F478 7000                       		moveq	#0,d0
0001F47A 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F47E 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F482 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F488 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F48C D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F498 323C 0005                  		move.w	#@size-1,d1
0001F49C 6000 0000                  		bra.w	LoadTiles
0001F4A0                            
0001F4A0                            @end:
0001F4A0 4E75                       		rts	
0001F4A2                            ; ===========================================================================
0001F4A2                            ; ---------------------------------------------------------------------------
0001F4A2                            ; Animated pattern routine - Scrap Brain
0001F4A2                            ; ---------------------------------------------------------------------------
0001F4A2                            
0001F4A2                            AniArt_SBZ:
0001F4A2                            
0001F4A2 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F4A2                            
0001F4A2 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F4A6 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F4A8                            		
0001F4A8 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F4AC 6000                       		bra.s	@chk_smokepuff2
0001F4AE                            ; ===========================================================================
0001F4AE                            
0001F4AE                            @smokepuff:
0001F4AE 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F4B2 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F4B4                            		
0001F4B4 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F4BA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F4CA 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F4CE 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F4D2 0240 0007                  		andi.w	#7,d0
0001F4D6 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F4D8 5340                       		subq.w	#1,d0
0001F4DA C0FC 0180                  		mulu.w	#@size*$20,d0
0001F4DE 43F1 0000                  		lea	(a1,d0.w),a1
0001F4E2 323C 000B                  		move.w	#@size-1,d1
0001F4E6 6000 0000                  		bra.w	LoadTiles
0001F4EA                            ; ===========================================================================
0001F4EA                            
0001F4EA                            @untilnextpuff:
0001F4EA 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F4F0                            
0001F4F0                            @clearsky:
0001F4F0 323C 0005                  		move.w	#(@size/2)-1,d1
0001F4F4 6100 0000                  		bsr.w	LoadTiles
0001F4F8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F4FE 323C 0005                  		move.w	#(@size/2)-1,d1
0001F502 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F506                            ; ===========================================================================
0001F506                            
0001F506                            @chk_smokepuff2:
0001F506 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F50A 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F50C                            		
0001F50C 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F510 6000                       		bra.s	@end
0001F512                            ; ===========================================================================
0001F512                            
0001F512                            @smokepuff2:
0001F512 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F516 6A00                       		bpl.s	@end		; branch if not 0
0001F518                            		
0001F518 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F51E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F52E 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F532 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F536 0240 0007                  		andi.w	#7,d0
0001F53A 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F53C 5340                       		subq.w	#1,d0
0001F53E C0FC 0180                  		mulu.w	#@size*$20,d0
0001F542 43F1 0000                  		lea	(a1,d0.w),a1
0001F546 323C 000B                  		move.w	#@size-1,d1
0001F54A 6000 0000                  		bra.w	LoadTiles
0001F54E                            ; ===========================================================================
0001F54E                            
0001F54E                            @untilnextpuff2:
0001F54E 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F554 609A                       		bra.s	@clearsky
0001F556                            ; ===========================================================================
0001F556                            
0001F556                            @end:
0001F556 4E75                       		rts	
0001F558                            ; ===========================================================================
0001F558                            ; ---------------------------------------------------------------------------
0001F558                            ; Animated pattern routine - ending sequence
0001F558                            ; ---------------------------------------------------------------------------
0001F558                            
0001F558                            AniArt_Ending:
0001F558                            
0001F558                            AniArt_Ending_BigFlower:
0001F558                            
0001F558 =00000010                  @size:		equ 16	; number of tiles per frame
0001F558                            
0001F558 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F55C 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F55E                            		
0001F55E 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F564 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F56A 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F56E 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F572 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F576 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F57A 6700                       		beq.s	@isframe0	; branch if frame 0
0001F57C 43E9 0200                  		lea	@size*$20(a1),a1
0001F580 45EA 0200                  		lea	@size*$20(a2),a2
0001F584                            
0001F584                            	@isframe0:
0001F58E 323C 000F                  		move.w	#@size-1,d1
0001F592 6100 0000                  		bsr.w	LoadTiles
0001F596 224A                       		movea.l	a2,a1
0001F5A2 323C 000F                  		move.w	#@size-1,d1
0001F5A6 6000 0000                  		bra.w	LoadTiles
0001F5AA                            ; ===========================================================================
0001F5AA                            
0001F5AA                            AniArt_Ending_SmallFlower:
0001F5AA                            
0001F5AA =0000000C                  @size:		equ 12	; number of tiles per frame
0001F5AA                            
0001F5AA 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F5AE 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F5B0                            		
0001F5B0 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F5B6 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F5BA 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F5BE 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F5C2 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F5C6 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F5C8 3200                       		move.w	d0,d1
0001F5CA D040                       		add.w	d0,d0
0001F5CC D041                       		add.w	d1,d0		; multiply by 3
0001F5D8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F5DE 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F5E2 323C 000B                  		move.w	#@size-1,d1
0001F5E6 6000 0000                  		bra.w	LoadTiles
0001F5EA                            ; ===========================================================================
0001F5EA 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F5F2                            ; ===========================================================================
0001F5F2                            
0001F5F2                            AniArt_Ending_Flower3:
0001F5F2                            
0001F5F2 =00000010                  @size:		equ 16	; number of tiles per frame
0001F5F2                            
0001F5F2 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F5F6 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F5F8                            		
0001F5F8 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F5FE 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F602 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F606 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F60A 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F60E E148                       		lsl.w	#8,d0		; multiply by $100
0001F610 D040                       		add.w	d0,d0		; multiply by 2
0001F61C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F620 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F624 323C 000F                  		move.w	#@size-1,d1
0001F628 6000 0000                  		bra.w	LoadTiles
0001F62C                            ; ===========================================================================
0001F62C 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F630                            ; ===========================================================================
0001F630                            
0001F630                            AniArt_Ending_Flower4:
0001F630                            
0001F630 =00000010                  @size:		equ 16	; number of tiles per frame
0001F630                            
0001F630 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F634 6A00                       		bpl.s	@end		; branch if not 0
0001F636                            		
0001F636 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F63C 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F640 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F644 0240 0003                  		andi.w	#3,d0
0001F648 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F64C E148                       		lsl.w	#8,d0		; multiply by $100
0001F64E D040                       		add.w	d0,d0		; multiply by 2
0001F65A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F65E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F662 323C 000F                  		move.w	#@size-1,d1
0001F666 6000 0000                  		bra.w	LoadTiles
0001F66A                            ; ===========================================================================
0001F66A                            
0001F66A                            @end:
0001F66A 4E75                       		rts	
0001F66C                            ; ===========================================================================
0001F66C                            
0001F66C                            AniArt_none:
0001F66C 4E75                       		rts	
0001F66E                            
0001F66E                            ; ---------------------------------------------------------------------------
0001F66E                            ; Subroutine to	transfer graphics to VRAM
0001F66E                            
0001F66E                            ; input:
0001F66E                            ;	a1 = source address
0001F66E                            ;	a6 = vdp_data_port ($C00000)
0001F66E                            ;	d1 = number of tiles to load (minus one)
0001F66E                            ; ---------------------------------------------------------------------------
0001F66E                            
0001F66E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F66E                            
0001F66E                            
0001F66E                            LoadTiles:
0001F66E 2C99                       		move.l	(a1)+,(a6)
0001F670 2C99                       		move.l	(a1)+,(a6)
0001F672 2C99                       		move.l	(a1)+,(a6)
0001F674 2C99                       		move.l	(a1)+,(a6)
0001F676 2C99                       		move.l	(a1)+,(a6)
0001F678 2C99                       		move.l	(a1)+,(a6)
0001F67A 2C99                       		move.l	(a1)+,(a6)
0001F67C 2C99                       		move.l	(a1)+,(a6)
0001F67E 51C9 FFEE                  		dbf	d1,LoadTiles
0001F682 4E75                       		rts	
0001F684                            ; End of function LoadTiles
0001F684                            
0001F684                            ; ===========================================================================
0001F684                            ; ---------------------------------------------------------------------------
0001F684                            ; Animated pattern routine - more Marble Zone
0001F684                            ; ---------------------------------------------------------------------------
0001F684 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F688 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F68C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F690 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F694 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F698 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F69C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F6A0 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F6A4                            ; ===========================================================================
0001F6A4                            
0001F6A4                            loc_1C3EE:
0001F6A4 2C91                       		move.l	(a1),(a6)
0001F6A6 43E9 0010                  		lea	$10(a1),a1
0001F6AA 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F6AE 4E75                       		rts	
0001F6B0                            ; ===========================================================================
0001F6B0                            
0001F6B0                            loc_1C3FA:
0001F6B0 2029 0002                  		move.l	2(a1),d0
0001F6B4 1029 0001                  		move.b	1(a1),d0
0001F6B8 E098                       		ror.l	#8,d0
0001F6BA 2C80                       		move.l	d0,(a6)
0001F6BC 43E9 0010                  		lea	$10(a1),a1
0001F6C0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F6C4 4E75                       		rts	
0001F6C6                            ; ===========================================================================
0001F6C6                            
0001F6C6                            loc_1C410:
0001F6C6 2CA9 0002                  		move.l	2(a1),(a6)
0001F6CA 43E9 0010                  		lea	$10(a1),a1
0001F6CE 51C9 FFF6                  		dbf	d1,loc_1C410
0001F6D2 4E75                       		rts	
0001F6D4                            ; ===========================================================================
0001F6D4                            
0001F6D4                            loc_1C41E:
0001F6D4 2029 0004                  		move.l	4(a1),d0
0001F6D8 1029 0003                  		move.b	3(a1),d0
0001F6DC E098                       		ror.l	#8,d0
0001F6DE 2C80                       		move.l	d0,(a6)
0001F6E0 43E9 0010                  		lea	$10(a1),a1
0001F6E4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F6E8 4E75                       		rts	
0001F6EA                            ; ===========================================================================
0001F6EA                            
0001F6EA                            loc_1C434:
0001F6EA 2CA9 0004                  		move.l	4(a1),(a6)
0001F6EE 43E9 0010                  		lea	$10(a1),a1
0001F6F2 51C9 FFF6                  		dbf	d1,loc_1C434
0001F6F6 4E75                       		rts	
0001F6F8                            ; ===========================================================================
0001F6F8                            
0001F6F8                            loc_1C442:
0001F6F8 2029 0006                  		move.l	6(a1),d0
0001F6FC 1029 0005                  		move.b	5(a1),d0
0001F700 E098                       		ror.l	#8,d0
0001F702 2C80                       		move.l	d0,(a6)
0001F704 43E9 0010                  		lea	$10(a1),a1
0001F708 51C9 FFEE                  		dbf	d1,loc_1C442
0001F70C 4E75                       		rts	
0001F70E                            ; ===========================================================================
0001F70E                            
0001F70E                            loc_1C458:
0001F70E 2CA9 0006                  		move.l	6(a1),(a6)
0001F712 43E9 0010                  		lea	$10(a1),a1
0001F716 51C9 FFF6                  		dbf	d1,loc_1C458
0001F71A 4E75                       		rts	
0001F71C                            ; ===========================================================================
0001F71C                            
0001F71C                            loc_1C466:
0001F71C 2029 0008                  		move.l	8(a1),d0
0001F720 1029 0007                  		move.b	7(a1),d0
0001F724 E098                       		ror.l	#8,d0
0001F726 2C80                       		move.l	d0,(a6)
0001F728 43E9 0010                  		lea	$10(a1),a1
0001F72C 51C9 FFEE                  		dbf	d1,loc_1C466
0001F730 4E75                       		rts	
0001F732                            ; ===========================================================================
0001F732                            
0001F732                            loc_1C47C:
0001F732 2CA9 0008                  		move.l	8(a1),(a6)
0001F736 43E9 0010                  		lea	$10(a1),a1
0001F73A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F73E 4E75                       		rts	
0001F740                            ; ===========================================================================
0001F740                            
0001F740                            loc_1C48A:
0001F740 2029 000A                  		move.l	$A(a1),d0
0001F744 1029 0009                  		move.b	9(a1),d0
0001F748 E098                       		ror.l	#8,d0
0001F74A 2C80                       		move.l	d0,(a6)
0001F74C 43E9 0010                  		lea	$10(a1),a1
0001F750 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F754 4E75                       		rts	
0001F756                            ; ===========================================================================
0001F756                            
0001F756                            loc_1C4A0:
0001F756 2CA9 000A                  		move.l	$A(a1),(a6)
0001F75A 43E9 0010                  		lea	$10(a1),a1
0001F75E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F762 4E75                       		rts	
0001F764                            ; ===========================================================================
0001F764                            
0001F764                            loc_1C4AE:
0001F764 2029 000C                  		move.l	$C(a1),d0
0001F768 1029 000B                  		move.b	$B(a1),d0
0001F76C E098                       		ror.l	#8,d0
0001F76E 2C80                       		move.l	d0,(a6)
0001F770 43E9 0010                  		lea	$10(a1),a1
0001F774 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F778 4E75                       		rts	
0001F77A                            ; ===========================================================================
0001F77A                            
0001F77A                            loc_1C4C4:
0001F77A 2CA9 000C                  		move.l	$C(a1),(a6)
0001F77E 43E9 0010                  		lea	$10(a1),a1
0001F782 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F786 4E75                       		rts	
0001F788                            ; ===========================================================================
0001F788                            
0001F788                            loc_1C4D2:
0001F788 2029 000C                  		move.l	$C(a1),d0
0001F78C E198                       		rol.l	#8,d0
0001F78E 1011                       		move.b	0(a1),d0
0001F790 2C80                       		move.l	d0,(a6)
0001F792 43E9 0010                  		lea	$10(a1),a1
0001F796 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F79A 4E75                       		rts	
0001F79C                            ; ===========================================================================
0001F79C                            
0001F79C                            loc_1C4E8:
0001F79C 3CA9 000E                  		move.w	$E(a1),(a6)
0001F7A0 3C91                       		move.w	0(a1),(a6)
0001F7A2 43E9 0010                  		lea	$10(a1),a1
0001F7A6 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F7AA 4E75                       		rts	
0001F7AC                            ; ===========================================================================
0001F7AC                            
0001F7AC                            loc_1C4FA:
0001F7AC 2011                       		move.l	0(a1),d0
0001F7AE 1029 000F                  		move.b	$F(a1),d0
0001F7B2 E098                       		ror.l	#8,d0
0001F7B4 2C80                       		move.l	d0,(a6)
0001F7B6 43E9 0010                  		lea	$10(a1),a1
0001F7BA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F7BE 4E75                       		rts	
0001F7C0                            
0001F7C0                            ; ---------------------------------------------------------------------------
0001F7C0                            ; Animated pattern routine - giant ring
0001F7C0                            ; ---------------------------------------------------------------------------
0001F7C0                            
0001F7C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F7C0                            
0001F7C0                            
0001F7C0                            AniArt_GiantRing:
0001F7C0                            
0001F7C0 =0000000E                  @size:		equ 14
0001F7C0                            
0001F7C0 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F7C4 6600                       		bne.s	@loadTiles		; If so, get to work
0001F7C6 4E75                       		rts	
0001F7C8                            ; ===========================================================================
0001F7C8                            ; loc_1C518:
0001F7C8                            @loadTiles:
0001F7C8 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F7CE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F7D4 7000                       		moveq	#0,d0
0001F7D6 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F7DA 43F1 0000                  		lea	(a1,d0.w),a1
0001F7DE                            		; Turn VRAM address into VDP command
0001F7DE 0640 8000                  		addi.w	#$8000,d0
0001F7E2 E588                       		lsl.l	#2,d0
0001F7E4 E448                       		lsr.w	#2,d0
0001F7E6 0040 4000                  		ori.w	#$4000,d0
0001F7EA 4840                       		swap	d0
0001F7EC                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F7EC 2D40 0004                  		move.l	d0,4(a6)
0001F7F0                            
0001F7F0 323C 000D                  		move.w	#@size-1,d1
0001F7F4 6000 FE78                  		bra.w	LoadTiles
0001F7F8                            
0001F7F8                            ; End of function AniArt_GiantRing
0001F7F8                            ; End of function AniArt_GiantRing
0001F7F8                            
0001F7F8                            		include	"_incObj\21 HUD.asm"
0001F7F8                            ; ---------------------------------------------------------------------------
0001F7F8                            ; Object 21 - SCORE, TIME, RINGS
0001F7F8                            ; ---------------------------------------------------------------------------
0001F7F8                            
0001F7F8                            HUD:
0001F7F8 7000                       		moveq	#0,d0
0001F7FA 1028 0024                  		move.b	obRoutine(a0),d0
0001F7FE 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F802 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F806                            ; ===========================================================================
0001F806 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F808 0000                       		dc.w HUD_Flash-HUD_Index
0001F80A                            ; ===========================================================================
0001F80A                            
0001F80A                            HUD_Main:	; Routine 0
0001F80A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F80E 317C 0090 0008             		move.w	#$90,obX(a0)
0001F814 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F81A 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F822 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F828 117C 0000 0001             		move.b	#0,obRender(a0)
0001F82E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F834                            
0001F834                            HUD_Flash:	; Routine 2
0001F834 7000                       		moveq	#0,d0
0001F836 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F83C 6600                       		bne.s	@display
0001F83E 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F842 6600                       		bne.s	@norings	; if so, branch
0001F844 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F846                            ; ===========================================================================
0001F846                            
0001F846                            @norings:
0001F846 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F84C 6600                       		bne.s	@display	; if not, branch
0001F84E 5440                       		addq.w	#2,d0		; make time counter flash red
0001F850                            
0001F850                            	@display:
0001F850 1140 001A                  		move.b	d0,obFrame(a0)
0001F854 4EF9 0000 F6FA             		jmp	DisplaySprite
0001F854 4EF9 0000 F6FA             		jmp	DisplaySprite
0001F85A                            Map_HUD:	include	"_maps\HUD.asm"
0001F85A                            ; ---------------------------------------------------------------------------
0001F85A                            ; Sprite mappings - SCORE, TIME, RINGS
0001F85A                            ; ---------------------------------------------------------------------------
0001F85A                            Map_HUD_internal:
0001F85A 0000                       		dc.w @allyellow-Map_HUD_internal
0001F85C 0000                       		dc.w @ringred-Map_HUD_internal
0001F85E 0000                       		dc.w @timered-Map_HUD_internal
0001F860 0000                       		dc.w @allred-Map_HUD_internal
0001F862 0A                         @allyellow:	dc.b $A
0001F863 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F868 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F86D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F872 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F877 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F87C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F881 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F886 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F88B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F890 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F895 00                         		dc.b 0
0001F896 0A                         @ringred:	dc.b $A
0001F897 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F89C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F8A1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F8A6 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F8AB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F8B0 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F8B5 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F8BA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F8BF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F8C4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F8C9 00                         		dc.b 0
0001F8CA 0A                         @timered:	dc.b $A
0001F8CB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F8D0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F8D5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F8DA 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F8DF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F8E4 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F8E9 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F8EE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F8F3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F8F8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F8FD 00                         		dc.b 0
0001F8FE 0A                         @allred:	dc.b $A
0001F8FF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F904 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F909 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F90E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F913 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F918 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F91D A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F922 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F927 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F92C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F932 00                         		even
0001F932 00                         		even
0001F932                            
0001F932                            ; ---------------------------------------------------------------------------
0001F932                            ; Add points subroutine
0001F932                            ; ---------------------------------------------------------------------------
0001F932                            
0001F932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F932                            
0001F932                            
0001F932                            AddPoints:
0001F932 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001F938                            
0001F938                            
0001F938 47F8 FE26                  			lea     (v_score).w,a3
0001F93C D193                       			add.l   d0,(a3)
0001F93E 223C 000F 423F             			move.l  #999999,d1
0001F944 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001F946 6200                       			bhi.s   @belowmax ; if yes, branch
0001F948 2681                       			move.l  d1,(a3) ; reset score to 999999
0001F94A                            		@belowmax:
0001F94A 2013                       			move.l  (a3),d0
0001F94C B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001F950 6500                       			blo.s   @noextralife ; if not, branch
0001F952                            
0001F952 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001F95A 4A38 FFF8                  			tst.b   (v_megadrive).w
0001F95E 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001F960 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001F964 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001F972                            
0001F972                            @locret_1C6B6:
0001F972                            @noextralife:
0001F972 4E75                       		rts	
0001F974                            ; End of function AddPoints
0001F974                            
0001F974                            		include	"_inc\HUD_Update.asm"
0001F974                            ; ---------------------------------------------------------------------------
0001F974                            ; Subroutine to	update the HUD
0001F974                            ; ---------------------------------------------------------------------------
0001F974                            
0001F974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F974                            
0001F974                            hudVRAM:	macro loc
0001F974                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001F974                            		endm
0001F974                            
0001F974                            
0001F974                            HUD_Update:
0001F974 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001F978 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001F97C 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001F980 6700                       		beq.s	@chkrings	; if not, branch
0001F982                            
0001F982 4238 FE1F                  		clr.b	(f_scorecount).w
0001F986 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001F98C 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001F990 6100 0000                  		bsr.w	Hud_Score
0001F994                            
0001F994                            	@chkrings:
0001F994 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001F998 6700                       		beq.s	@chktime	; if not, branch
0001F99A 6A00                       		bpl.s	@notzero
0001F99C 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001F9A0                            
0001F9A0                            	@notzero:
0001F9A0 4238 FE1D                  		clr.b	(f_ringcount).w
0001F9A4 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001F9AA 7200                       		moveq	#0,d1
0001F9AC 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001F9B0 6100 0000                  		bsr.w	Hud_Rings
0001F9B4                            
0001F9B4                            	@chktime:
0001F9B4 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001F9B8 6700                       		beq.s	@chklives	; if not, branch
0001F9BA 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001F9BE 6600                       		bne.s	@chklives	; if yes, branch
0001F9C0 43F8 FE22                  		lea	(v_time).w,a1
0001F9C4 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001F9CA 6700                       		beq.s	TimeOver	; if yes, branch
0001F9CC                            
0001F9CC 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001F9CE 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001F9D2 6500                       		bcs.s	@chklives
0001F9D4 12BC 0000                  		move.b	#0,(a1)
0001F9D8 5221                       		addq.b	#1,-(a1)	; increment second counter
0001F9DA 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001F9DE 6500                       		bcs.s	@updatetime
0001F9E0 12BC 0000                  		move.b	#0,(a1)
0001F9E4 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001F9E6 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001F9EA 6500                       		bcs.s	@updatetime
0001F9EC 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001F9F0                            
0001F9F0                            	@updatetime:
0001F9F0 203C 5E40 0003             		hudVRAM	$DE40
0001F9F6 7200                       		moveq	#0,d1
0001F9F8 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001F9FC 6100 0000                  		bsr.w	Hud_Mins
0001FA00 203C 5EC0 0003             		hudVRAM	$DEC0
0001FA06 7200                       		moveq	#0,d1
0001FA08 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FA0C 6100 0000                  		bsr.w	Hud_Secs
0001FA10                            
0001FA10                            	@chklives:
0001FA10 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FA14 6700                       		beq.s	@chkbonus	; if not, branch
0001FA16 4238 FE1C                  		clr.b	(f_lifecount).w
0001FA1A 6100 0000                  		bsr.w	Hud_Lives
0001FA1E                            
0001FA1E                            	@chkbonus:
0001FA1E 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FA22 6700                       		beq.s	@finish		; if not, branch
0001FA24 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FA32 7200                       		moveq	#0,d1
0001FA34 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FA38 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FA3C 7200                       		moveq	#0,d1
0001FA3E 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FA42 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FA46                            
0001FA46                            	@finish:
0001FA46 4E75                       		rts	
0001FA48                            ; ===========================================================================
0001FA48                            
0001FA48                            TimeOver:
0001FA48 4238 FE1E                  		clr.b	(f_timecount).w
0001FA4C 41F8 D000                  		lea	(v_player).w,a0
0001FA50 2448                       		movea.l	a0,a2
0001FA52 6100 E83A                  		bsr.w	KillSonic
0001FA56 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FA5C 4E75                       		rts	
0001FA5E                            ; ===========================================================================
0001FA5E                            
0001FA5E                            HudDebug:
0001FA5E 6100 0000                  		bsr.w	HudDb_XY
0001FA62 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FA66 6700                       		beq.s	@objcounter	; if not, branch
0001FA68 6A00                       		bpl.s	@notzero
0001FA6A 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FA6E                            
0001FA6E                            	@notzero:
0001FA6E 4238 FE1D                  		clr.b	(f_ringcount).w
0001FA72 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FA78 7200                       		moveq	#0,d1
0001FA7A 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FA7E 6100 0000                  		bsr.w	Hud_Rings
0001FA82                            
0001FA82                            	@objcounter:
0001FA82 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FA88 7200                       		moveq	#0,d1
0001FA8A 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FA8E 6100 0000                  		bsr.w	Hud_Secs
0001FA92 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FA96 6700                       		beq.s	@chkbonus	; if not, branch
0001FA98 4238 FE1C                  		clr.b	(f_lifecount).w
0001FA9C 6100 0000                  		bsr.w	Hud_Lives
0001FAA0                            
0001FAA0                            	@chkbonus:
0001FAA0 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FAA4 6700                       		beq.s	@finish		; if not, branch
0001FAA6 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FAB4 7200                       		moveq	#0,d1
0001FAB6 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FABA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FABE 7200                       		moveq	#0,d1
0001FAC0 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FAC4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FAC8                            
0001FAC8                            	@finish:
0001FAC8 4E75                       		rts	
0001FACA                            ; End of function HUD_Update
0001FACA                            
0001FACA                            ; ---------------------------------------------------------------------------
0001FACA                            ; Subroutine to	load "0" on the	HUD
0001FACA                            ; ---------------------------------------------------------------------------
0001FACA                            
0001FACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FACA                            
0001FACA                            
0001FACA                            Hud_LoadZero:
0001FAD4 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FAD8 343C 0002                  		move.w	#2,d2
0001FADC 6000                       		bra.s	loc_1C83E
0001FADE                            ; End of function Hud_LoadZero
0001FADE                            
0001FADE                            ; ---------------------------------------------------------------------------
0001FADE                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FADE                            ; ---------------------------------------------------------------------------
0001FADE                            
0001FADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FADE                            
0001FADE                            
0001FADE                            Hud_Base:
0001FADE 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FAE4 6100 0000                  		bsr.w	Hud_Lives
0001FAF2 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FAF6 343C 000E                  		move.w	#$E,d2
0001FAFA                            
0001FAFA                            loc_1C83E:
0001FAFA 43FA 0000                  		lea	Art_Hud(pc),a1
0001FAFE                            
0001FAFE                            loc_1C842:
0001FAFE 323C 000F                  		move.w	#$F,d1
0001FB02 101A                       		move.b	(a2)+,d0
0001FB04 6B00                       		bmi.s	loc_1C85E
0001FB06 4880                       		ext.w	d0
0001FB08 EB48                       		lsl.w	#5,d0
0001FB0A 47F1 0000                  		lea	(a1,d0.w),a3
0001FB0E                            
0001FB0E                            loc_1C852:
0001FB0E 2C9B                       		move.l	(a3)+,(a6)
0001FB10 51C9 FFFC                  		dbf	d1,loc_1C852
0001FB14                            
0001FB14                            loc_1C858:
0001FB14 51CA FFE8                  		dbf	d2,loc_1C842
0001FB18                            
0001FB18 4E75                       		rts	
0001FB1A                            ; ===========================================================================
0001FB1A                            
0001FB1A                            loc_1C85E:
0001FB1A 2CBC 0000 0000             		move.l	#0,(a6)
0001FB20 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FB24                            
0001FB24 60EE                       		bra.s	loc_1C858
0001FB26                            ; End of function Hud_Base
0001FB26                            
0001FB26                            ; ===========================================================================
0001FB26 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FB32 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FB36                            ; ---------------------------------------------------------------------------
0001FB36                            ; Subroutine to	load debug mode	numbers	patterns
0001FB36                            ; ---------------------------------------------------------------------------
0001FB36                            
0001FB36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB36                            
0001FB36                            
0001FB36                            HudDb_XY:
0001FB40 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FB44 4841                       		swap	d1
0001FB46 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FB4A 6100                       		bsr.s	HudDb_XY2
0001FB4C 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FB50 4841                       		swap	d1
0001FB52 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FB56                            ; End of function HudDb_XY
0001FB56                            
0001FB56                            
0001FB56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB56                            
0001FB56                            
0001FB56                            HudDb_XY2:
0001FB56 7C07                       		moveq	#7,d6
0001FB58 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FB5E                            
0001FB5E                            HudDb_XYLoop:
0001FB5E E959                       		rol.w	#4,d1
0001FB60 3401                       		move.w	d1,d2
0001FB62 0242 000F                  		andi.w	#$F,d2
0001FB66 0C42 000A                  		cmpi.w	#$A,d2
0001FB6A 6500                       		bcs.s	loc_1C8B2
0001FB6C 5E42                       		addq.w	#7,d2
0001FB6E                            
0001FB6E                            loc_1C8B2:
0001FB6E EB4A                       		lsl.w	#5,d2
0001FB70 47F1 2000                  		lea	(a1,d2.w),a3
0001FB74 2C9B                       		move.l	(a3)+,(a6)
0001FB76 2C9B                       		move.l	(a3)+,(a6)
0001FB78 2C9B                       		move.l	(a3)+,(a6)
0001FB7A 2C9B                       		move.l	(a3)+,(a6)
0001FB7C 2C9B                       		move.l	(a3)+,(a6)
0001FB7E 2C9B                       		move.l	(a3)+,(a6)
0001FB80 2C9B                       		move.l	(a3)+,(a6)
0001FB82 2C9B                       		move.l	(a3)+,(a6)
0001FB84 4841                       		swap	d1
0001FB86 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FB8A                            
0001FB8A 4E75                       		rts	
0001FB8C                            ; End of function HudDb_XY2
0001FB8C                            
0001FB8C                            ; ---------------------------------------------------------------------------
0001FB8C                            ; Subroutine to	load rings numbers patterns
0001FB8C                            ; ---------------------------------------------------------------------------
0001FB8C                            
0001FB8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB8C                            
0001FB8C                            
0001FB8C                            Hud_Rings:
0001FB8C 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FB92 7C02                       		moveq	#2,d6
0001FB94 6000                       		bra.s	Hud_LoadArt
0001FB96                            ; End of function Hud_Rings
0001FB96                            
0001FB96                            ; ---------------------------------------------------------------------------
0001FB96                            ; Subroutine to	load score numbers patterns
0001FB96                            ; ---------------------------------------------------------------------------
0001FB96                            
0001FB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB96                            
0001FB96                            
0001FB96                            Hud_Score:
0001FB96 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FB9C 7C05                       		moveq	#5,d6
0001FB9E                            
0001FB9E                            Hud_LoadArt:
0001FB9E 7800                       		moveq	#0,d4
0001FBA0 43FA 0000                  		lea	Art_Hud(pc),a1
0001FBA4                            
0001FBA4                            Hud_ScoreLoop:
0001FBA4 7400                       		moveq	#0,d2
0001FBA6 261A                       		move.l	(a2)+,d3
0001FBA8                            
0001FBA8                            loc_1C8EC:
0001FBA8 9283                       		sub.l	d3,d1
0001FBAA 6500                       		bcs.s	loc_1C8F4
0001FBAC 5242                       		addq.w	#1,d2
0001FBAE 60F8                       		bra.s	loc_1C8EC
0001FBB0                            ; ===========================================================================
0001FBB0                            
0001FBB0                            loc_1C8F4:
0001FBB0 D283                       		add.l	d3,d1
0001FBB2 4A42                       		tst.w	d2
0001FBB4 6700                       		beq.s	loc_1C8FE
0001FBB6 383C 0001                  		move.w	#1,d4
0001FBBA                            
0001FBBA                            loc_1C8FE:
0001FBBA 4A44                       		tst.w	d4
0001FBBC 6700                       		beq.s	loc_1C92C
0001FBBE ED4A                       		lsl.w	#6,d2
0001FBC0 2D40 0004                  		move.l	d0,4(a6)
0001FBC4 47F1 2000                  		lea	(a1,d2.w),a3
0001FBC8 2C9B                       		move.l	(a3)+,(a6)
0001FBCA 2C9B                       		move.l	(a3)+,(a6)
0001FBCC 2C9B                       		move.l	(a3)+,(a6)
0001FBCE 2C9B                       		move.l	(a3)+,(a6)
0001FBD0 2C9B                       		move.l	(a3)+,(a6)
0001FBD2 2C9B                       		move.l	(a3)+,(a6)
0001FBD4 2C9B                       		move.l	(a3)+,(a6)
0001FBD6 2C9B                       		move.l	(a3)+,(a6)
0001FBD8 2C9B                       		move.l	(a3)+,(a6)
0001FBDA 2C9B                       		move.l	(a3)+,(a6)
0001FBDC 2C9B                       		move.l	(a3)+,(a6)
0001FBDE 2C9B                       		move.l	(a3)+,(a6)
0001FBE0 2C9B                       		move.l	(a3)+,(a6)
0001FBE2 2C9B                       		move.l	(a3)+,(a6)
0001FBE4 2C9B                       		move.l	(a3)+,(a6)
0001FBE6 2C9B                       		move.l	(a3)+,(a6)
0001FBE8                            
0001FBE8                            loc_1C92C:
0001FBE8 0680 0040 0000             		addi.l	#$400000,d0
0001FBEE 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FBF2                            
0001FBF2 4E75                       		rts	
0001FBF4                            
0001FBF4                            ; End of function Hud_Score
0001FBF4                            ; End of function Hud_Score
0001FBF4                            
0001FBF4                            ; ---------------------------------------------------------------------------
0001FBF4                            ; Subroutine to	load countdown numbers on the continue screen
0001FBF4                            ; ---------------------------------------------------------------------------
0001FBF4                            
0001FBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBF4                            
0001FBF4                            
0001FBF4                            ContScrCounter:
0001FBFE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FC04 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FC0A 7C01                       		moveq	#1,d6
0001FC0C 7800                       		moveq	#0,d4
0001FC0E 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FC12                            
0001FC12                            ContScr_Loop:
0001FC12 7400                       		moveq	#0,d2
0001FC14 261A                       		move.l	(a2)+,d3
0001FC16                            
0001FC16                            loc_1C95A:
0001FC16 9283                       		sub.l	d3,d1
0001FC18 6500                       		blo.s	loc_1C962
0001FC1A 5242                       		addq.w	#1,d2
0001FC1C 60F8                       		bra.s	loc_1C95A
0001FC1E                            ; ===========================================================================
0001FC1E                            
0001FC1E                            loc_1C962:
0001FC1E D283                       		add.l	d3,d1
0001FC20 ED4A                       		lsl.w	#6,d2
0001FC22 47F1 2000                  		lea	(a1,d2.w),a3
0001FC26 2C9B                       		move.l	(a3)+,(a6)
0001FC28 2C9B                       		move.l	(a3)+,(a6)
0001FC2A 2C9B                       		move.l	(a3)+,(a6)
0001FC2C 2C9B                       		move.l	(a3)+,(a6)
0001FC2E 2C9B                       		move.l	(a3)+,(a6)
0001FC30 2C9B                       		move.l	(a3)+,(a6)
0001FC32 2C9B                       		move.l	(a3)+,(a6)
0001FC34 2C9B                       		move.l	(a3)+,(a6)
0001FC36 2C9B                       		move.l	(a3)+,(a6)
0001FC38 2C9B                       		move.l	(a3)+,(a6)
0001FC3A 2C9B                       		move.l	(a3)+,(a6)
0001FC3C 2C9B                       		move.l	(a3)+,(a6)
0001FC3E 2C9B                       		move.l	(a3)+,(a6)
0001FC40 2C9B                       		move.l	(a3)+,(a6)
0001FC42 2C9B                       		move.l	(a3)+,(a6)
0001FC44 2C9B                       		move.l	(a3)+,(a6)
0001FC46 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FC4A                            
0001FC4A 4E75                       		rts	
0001FC4C                            ; End of function ContScrCounter
0001FC4C                            
0001FC4C                            ; ===========================================================================
0001FC4C                            
0001FC4C                            		include	"_inc\HUD (part 2).asm"
0001FC4C                            ; ---------------------------------------------------------------------------
0001FC4C                            ; HUD counter sizes
0001FC4C                            ; ---------------------------------------------------------------------------
0001FC4C 0001 86A0                  Hud_100000:	dc.l 100000
0001FC50 0000 2710                  Hud_10000:	dc.l 10000
0001FC54 0000 03E8                  Hud_1000:	dc.l 1000
0001FC58 0000 0064                  Hud_100:	dc.l 100
0001FC5C 0000 000A                  Hud_10:		dc.l 10
0001FC60 0000 0001                  Hud_1:		dc.l 1
0001FC64                            
0001FC64                            ; ---------------------------------------------------------------------------
0001FC64                            ; Subroutine to	load time numbers patterns
0001FC64                            ; ---------------------------------------------------------------------------
0001FC64                            
0001FC64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC64                            
0001FC64                            
0001FC64                            Hud_Mins:
0001FC64 45F9 0001 FC60             		lea	(Hud_1).l,a2
0001FC6A 7C00                       		moveq	#0,d6
0001FC6C 6000                       		bra.s	loc_1C9BA
0001FC6E                            ; End of function Hud_Mins
0001FC6E                            
0001FC6E                            
0001FC6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC6E                            
0001FC6E                            
0001FC6E                            Hud_Secs:
0001FC6E 45F9 0001 FC5C             		lea	(Hud_10).l,a2
0001FC74 7C01                       		moveq	#1,d6
0001FC76                            
0001FC76                            loc_1C9BA:
0001FC76 7800                       		moveq	#0,d4
0001FC78 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC7C                            
0001FC7C                            Hud_TimeLoop:
0001FC7C 7400                       		moveq	#0,d2
0001FC7E 261A                       		move.l	(a2)+,d3
0001FC80                            
0001FC80                            loc_1C9C4:
0001FC80 9283                       		sub.l	d3,d1
0001FC82 6500                       		bcs.s	loc_1C9CC
0001FC84 5242                       		addq.w	#1,d2
0001FC86 60F8                       		bra.s	loc_1C9C4
0001FC88                            ; ===========================================================================
0001FC88                            
0001FC88                            loc_1C9CC:
0001FC88 D283                       		add.l	d3,d1
0001FC8A 4A42                       		tst.w	d2
0001FC8C 6700                       		beq.s	loc_1C9D6
0001FC8E 383C 0001                  		move.w	#1,d4
0001FC92                            
0001FC92                            loc_1C9D6:
0001FC92 ED4A                       		lsl.w	#6,d2
0001FC94 2D40 0004                  		move.l	d0,4(a6)
0001FC98 47F1 2000                  		lea	(a1,d2.w),a3
0001FC9C 2C9B                       		move.l	(a3)+,(a6)
0001FC9E 2C9B                       		move.l	(a3)+,(a6)
0001FCA0 2C9B                       		move.l	(a3)+,(a6)
0001FCA2 2C9B                       		move.l	(a3)+,(a6)
0001FCA4 2C9B                       		move.l	(a3)+,(a6)
0001FCA6 2C9B                       		move.l	(a3)+,(a6)
0001FCA8 2C9B                       		move.l	(a3)+,(a6)
0001FCAA 2C9B                       		move.l	(a3)+,(a6)
0001FCAC 2C9B                       		move.l	(a3)+,(a6)
0001FCAE 2C9B                       		move.l	(a3)+,(a6)
0001FCB0 2C9B                       		move.l	(a3)+,(a6)
0001FCB2 2C9B                       		move.l	(a3)+,(a6)
0001FCB4 2C9B                       		move.l	(a3)+,(a6)
0001FCB6 2C9B                       		move.l	(a3)+,(a6)
0001FCB8 2C9B                       		move.l	(a3)+,(a6)
0001FCBA 2C9B                       		move.l	(a3)+,(a6)
0001FCBC 0680 0040 0000             		addi.l	#$400000,d0
0001FCC2 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FCC6                            
0001FCC6 4E75                       		rts	
0001FCC8                            ; End of function Hud_Secs
0001FCC8                            
0001FCC8                            ; ---------------------------------------------------------------------------
0001FCC8                            ; Subroutine to	load time/ring bonus numbers patterns
0001FCC8                            ; ---------------------------------------------------------------------------
0001FCC8                            
0001FCC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCC8                            
0001FCC8                            
0001FCC8                            Hud_TimeRingBonus:
0001FCC8 45F9 0001 FC54             		lea	(Hud_1000).l,a2
0001FCCE 7C03                       		moveq	#3,d6
0001FCD0 7800                       		moveq	#0,d4
0001FCD2 43FA 0000                  		lea	Art_Hud(pc),a1
0001FCD6                            
0001FCD6                            Hud_BonusLoop:
0001FCD6 7400                       		moveq	#0,d2
0001FCD8 261A                       		move.l	(a2)+,d3
0001FCDA                            
0001FCDA                            loc_1CA1E:
0001FCDA 9283                       		sub.l	d3,d1
0001FCDC 6500                       		bcs.s	loc_1CA26
0001FCDE 5242                       		addq.w	#1,d2
0001FCE0 60F8                       		bra.s	loc_1CA1E
0001FCE2                            ; ===========================================================================
0001FCE2                            
0001FCE2                            loc_1CA26:
0001FCE2 D283                       		add.l	d3,d1
0001FCE4 4A42                       		tst.w	d2
0001FCE6 6700                       		beq.s	loc_1CA30
0001FCE8 383C 0001                  		move.w	#1,d4
0001FCEC                            
0001FCEC                            loc_1CA30:
0001FCEC 4A44                       		tst.w	d4
0001FCEE 6700                       		beq.s	Hud_ClrBonus
0001FCF0 ED4A                       		lsl.w	#6,d2
0001FCF2 47F1 2000                  		lea	(a1,d2.w),a3
0001FCF6 2C9B                       		move.l	(a3)+,(a6)
0001FCF8 2C9B                       		move.l	(a3)+,(a6)
0001FCFA 2C9B                       		move.l	(a3)+,(a6)
0001FCFC 2C9B                       		move.l	(a3)+,(a6)
0001FCFE 2C9B                       		move.l	(a3)+,(a6)
0001FD00 2C9B                       		move.l	(a3)+,(a6)
0001FD02 2C9B                       		move.l	(a3)+,(a6)
0001FD04 2C9B                       		move.l	(a3)+,(a6)
0001FD06 2C9B                       		move.l	(a3)+,(a6)
0001FD08 2C9B                       		move.l	(a3)+,(a6)
0001FD0A 2C9B                       		move.l	(a3)+,(a6)
0001FD0C 2C9B                       		move.l	(a3)+,(a6)
0001FD0E 2C9B                       		move.l	(a3)+,(a6)
0001FD10 2C9B                       		move.l	(a3)+,(a6)
0001FD12 2C9B                       		move.l	(a3)+,(a6)
0001FD14 2C9B                       		move.l	(a3)+,(a6)
0001FD16                            
0001FD16                            loc_1CA5A:
0001FD16 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FD1A                            
0001FD1A 4E75                       		rts	
0001FD1C                            ; ===========================================================================
0001FD1C                            
0001FD1C                            Hud_ClrBonus:
0001FD1C 7A0F                       		moveq	#$F,d5
0001FD1E                            
0001FD1E                            Hud_ClrBonusLoop:
0001FD1E 2CBC 0000 0000             		move.l	#0,(a6)
0001FD24 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FD28                            
0001FD28 60EC                       		bra.s	loc_1CA5A
0001FD2A                            ; End of function Hud_TimeRingBonus
0001FD2A                            
0001FD2A                            ; ---------------------------------------------------------------------------
0001FD2A                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FD2A                            ; ---------------------------------------------------------------------------
0001FD2A                            
0001FD2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD2A                            
0001FD2A                            
0001FD2A                            Hud_Lives:
0001FD2A 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FD30 7200                       		moveq	#0,d1
0001FD32 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FD36 45F9 0001 FC5C             		lea	(Hud_10).l,a2
0001FD3C 7C01                       		moveq	#1,d6
0001FD3E 7800                       		moveq	#0,d4
0001FD40 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FD44                            
0001FD44                            Hud_LivesLoop:
0001FD44 2D40 0004                  		move.l	d0,4(a6)
0001FD48 7400                       		moveq	#0,d2
0001FD4A 261A                       		move.l	(a2)+,d3
0001FD4C                            
0001FD4C                            loc_1CA90:
0001FD4C 9283                       		sub.l	d3,d1
0001FD4E 6500                       		bcs.s	loc_1CA98
0001FD50 5242                       		addq.w	#1,d2
0001FD52 60F8                       		bra.s	loc_1CA90
0001FD54                            ; ===========================================================================
0001FD54                            
0001FD54                            loc_1CA98:
0001FD54 D283                       		add.l	d3,d1
0001FD56 4A42                       		tst.w	d2
0001FD58 6700                       		beq.s	loc_1CAA2
0001FD5A 383C 0001                  		move.w	#1,d4
0001FD5E                            
0001FD5E                            loc_1CAA2:
0001FD5E 4A44                       		tst.w	d4
0001FD60 6700                       		beq.s	Hud_ClrLives
0001FD62                            
0001FD62                            loc_1CAA6:
0001FD62 EB4A                       		lsl.w	#5,d2
0001FD64 47F1 2000                  		lea	(a1,d2.w),a3
0001FD68 2C9B                       		move.l	(a3)+,(a6)
0001FD6A 2C9B                       		move.l	(a3)+,(a6)
0001FD6C 2C9B                       		move.l	(a3)+,(a6)
0001FD6E 2C9B                       		move.l	(a3)+,(a6)
0001FD70 2C9B                       		move.l	(a3)+,(a6)
0001FD72 2C9B                       		move.l	(a3)+,(a6)
0001FD74 2C9B                       		move.l	(a3)+,(a6)
0001FD76 2C9B                       		move.l	(a3)+,(a6)
0001FD78                            
0001FD78                            loc_1CABC:
0001FD78 0680 0040 0000             		addi.l	#$400000,d0
0001FD7E 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FD82                            
0001FD82 4E75                       		rts	
0001FD84                            ; ===========================================================================
0001FD84                            
0001FD84                            Hud_ClrLives:
0001FD84 4A46                       		tst.w	d6
0001FD86 67DA                       		beq.s	loc_1CAA6
0001FD88 7A07                       		moveq	#7,d5
0001FD8A                            
0001FD8A                            Hud_ClrLivesLoop:
0001FD8A 2CBC 0000 0000             		move.l	#0,(a6)
0001FD90 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FD94 60E2                       		bra.s	loc_1CABC
0001FD96                            ; End of function Hud_Lives
0001FD96                            ; End of function Hud_Lives
0001FD96                            
0001FD96                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020096                            		even
00020096                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
000201D6                            		even
000201D6                            
000201D6                            		include	"_incObj\DebugMode.asm"
000201D6                            ; ---------------------------------------------------------------------------
000201D6                            ; When debug mode is currently in use
000201D6                            ; ---------------------------------------------------------------------------
000201D6                            
000201D6                            DebugMode:
000201D6 7000                       		moveq	#0,d0
000201D8 1038 FE08                  		move.b	(v_debuguse).w,d0
000201DC 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
000201E0 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
000201E4                            ; ===========================================================================
000201E4 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
000201E6 0000                       		dc.w Debug_Action-Debug_Index
000201E8                            ; ===========================================================================
000201E8                            
000201E8                            Debug_Main:	; Routine 0
000201E8 5438 FE08                  		addq.b	#2,(v_debuguse).w
000201EC 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
000201F2 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
000201F8 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
000201FE 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020204 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0002020A 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020210 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00020216 117C 0000 001A             		move.b	#0,obFrame(a0)
0002021C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00020222 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00020228 6600                       		bne.s	@islevel	; if not, branch
0002022A                            
0002022A 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00020230 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
00020236 7006                       		moveq	#6,d0		; use 6th debug	item list
00020238 6000                       		bra.s	@selectlist
0002023A                            ; ===========================================================================
0002023A                            
0002023A                            @islevel:
0002023A 7000                       		moveq	#0,d0
0002023C 1038 FE10                  		move.b	(v_zone).w,d0
00020240                            
00020240                            @selectlist:
00020240 45F9 0000 0000             		lea	(DebugList).l,a2
00020246 D040                       		add.w	d0,d0
00020248 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002024C 3C1A                       		move.w	(a2)+,d6
0002024E BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00020252 6200                       		bhi.s	@noreset	; if not, branch
00020254 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
0002025A                            
0002025A                            	@noreset:
0002025A 6100 0000                  		bsr.w	Debug_ShowItem
0002025E 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020264 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
0002026A                            
0002026A                            Debug_Action:	; Routine 2
0002026A 7006                       		moveq	#6,d0
0002026C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020272 6700                       		beq.s	@isntlevel
00020274                            
00020274 7000                       		moveq	#0,d0
00020276 1038 FE10                  		move.b	(v_zone).w,d0
0002027A                            
0002027A                            	@isntlevel:
0002027A 45F9 0000 0000             		lea	(DebugList).l,a2
00020280 D040                       		add.w	d0,d0
00020282 D4F2 0000                  		adda.w	(a2,d0.w),a2
00020286 3C1A                       		move.w	(a2)+,d6
00020288 6100 0000                  		bsr.w	Debug_Control
0002028C 4EF9 0000 F6FA             		jmp	(DisplaySprite).l
00020292                            
00020292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020292                            
00020292                            
00020292                            Debug_Control:
00020292 7800                       		moveq	#0,d4
00020294 323C 0001                  		move.w	#1,d1
00020298 1838 F605                  		move.b	(v_jpadpress1).w,d4
0002029C 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
000202A0 6600                       		bne.s	@dirpressed	; if yes, branch
000202A2                            
000202A2 1038 F604                  		move.b	(v_jpadhold1).w,d0
000202A6 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
000202AA 6600                       		bne.s	@dirheld	; if yes, branch
000202AC                            
000202AC 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000202B2 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
000202B8 6000 0000                  		bra.w	Debug_ChgItem
000202BC                            ; ===========================================================================
000202BC                            
000202BC                            @dirheld:
000202BC 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
000202C0 6600                       		bne.s	loc_1D01C
000202C2 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
000202C8 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
000202CC 6600                       		bne.s	@dirpressed
000202CE 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
000202D4                            
000202D4                            @dirpressed:
000202D4 1838 F604                  		move.b	(v_jpadhold1).w,d4
000202D8                            
000202D8                            loc_1D01C:
000202D8 7200                       		moveq	#0,d1
000202DA 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000202DE 5241                       		addq.w	#1,d1
000202E0 4841                       		swap	d1
000202E2 E881                       		asr.l	#4,d1
000202E4 2428 000C                  		move.l	obY(a0),d2
000202E8 2628 0008                  		move.l	obX(a0),d3
000202EC 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000202F0 6700                       		beq.s	loc_1D03C	; if not, branch
000202F2 9481                       		sub.l	d1,d2
000202F4 6400                       		bcc.s	loc_1D03C
000202F6 7400                       		moveq	#0,d2
000202F8                            
000202F8                            loc_1D03C:
000202F8 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000202FC 6700                       		beq.s	loc_1D052	; if not, branch
000202FE D481                       		add.l	d1,d2
00020300 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00020306 6500                       		bcs.s	loc_1D052
00020308 243C 07FF 0000             		move.l	#$7FF0000,d2
0002030E                            
0002030E                            loc_1D052:
0002030E 0804 0002                  		btst	#bitL,d4
00020312 6700                       		beq.s	loc_1D05E
00020314 9681                       		sub.l	d1,d3
00020316 6400                       		bcc.s	loc_1D05E
00020318 7600                       		moveq	#0,d3
0002031A                            
0002031A                            loc_1D05E:
0002031A 0804 0003                  		btst	#bitR,d4
0002031E 6700                       		beq.s	loc_1D066
00020320 D681                       		add.l	d1,d3
00020322                            
00020322                            loc_1D066:
00020322 2142 000C                  		move.l	d2,obY(a0)
00020326 2143 0008                  		move.l	d3,obX(a0)
0002032A                            
0002032A                            Debug_ChgItem:
0002032A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00020330 6700                       		beq.s	@createitem	; if not, branch
00020332 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020338 6700                       		beq.s	@nextitem	; if not, branch
0002033A 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
0002033E 6400                       		bcc.s	@display
00020340 DD38 FE06                  		add.b	d6,(v_debugitem).w
00020344 6000                       		bra.s	@display
00020346                            ; ===========================================================================
00020346                            
00020346                            @nextitem:
00020346 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
0002034C 6700                       		beq.s	@createitem	; if not, branch
0002034E 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00020352 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
00020356 6200                       		bhi.s	@display
00020358 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
0002035E                            
0002035E                            	@display:
0002035E 6000 0000                  		bra.w	Debug_ShowItem
00020362                            ; ===========================================================================
00020362                            
00020362                            @createitem:
00020362 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020368 6700                       		beq.s	@backtonormal	; if not, branch
0002036A 4EB9 0000 FB86             		jsr	(FindFreeObj).l
00020370 6600                       		bne.s	@backtonormal
00020372 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020378 3368 000C 000C             		move.w	obY(a0),obY(a1)
0002037E 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020382 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00020388 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
0002038E 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020394 7000                       		moveq	#0,d0
00020396 1038 FE06                  		move.b	(v_debugitem).w,d0
0002039A E748                       		lsl.w	#3,d0
0002039C 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
000203A2 4E75                       		rts	
000203A4                            ; ===========================================================================
000203A4                            
000203A4                            @backtonormal:
000203A4 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
000203AA 6700                       		beq.s	@stayindebug	; if not, branch
000203AC 7000                       		moveq	#0,d0
000203AE 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
000203B2 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000203BA 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000203C0 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000203C4 3140 000A                  		move.w	d0,obX+2(a0)
000203C8 3140 000E                  		move.w	d0,obY+2(a0)
000203CC 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
000203D2 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
000203D8 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000203DE 6600                       		bne.s	@stayindebug	; if not, branch
000203E0                            
000203E0 4278 F780                  		clr.w	(v_ssangle).w
000203E4 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000203EA 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000203F2 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000203F8 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000203FE 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020404 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0002040A                            
0002040A                            	@stayindebug:
0002040A 4E75                       		rts	
0002040C                            ; End of function Debug_Control
0002040C                            
0002040C                            
0002040C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002040C                            
0002040C                            
0002040C                            Debug_ShowItem:
0002040C 7000                       		moveq	#0,d0
0002040E 1038 FE06                  		move.b	(v_debugitem).w,d0
00020412 E748                       		lsl.w	#3,d0
00020414 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
0002041A 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00020420 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
00020426 4E75                       		rts	
00020428                            ; End of function Debug_ShowItem
00020428                            ; End of function Debug_ShowItem
00020428                            		include	"_inc\DebugList.asm"
00020428                            ; ---------------------------------------------------------------------------
00020428                            ; Debug	mode item lists
00020428                            ; ---------------------------------------------------------------------------
00020428                            DebugList:
00020428 0000                       	dc.w @GHZ-DebugList
0002042A 0000                       	dc.w @LZ-DebugList
0002042C 0000                       	dc.w @MZ-DebugList
0002042E 0000                       	dc.w @SLZ-DebugList
00020430 0000                       	dc.w @SYZ-DebugList
00020432 0000                       	dc.w @SBZ-DebugList
00020434 0000                       	dc.w @Ending-DebugList
00020436                            
00020436                            dbug:	macro map,object,subtype,frame,vram
00020436                            	dc.l map+(object<<24)
00020436                            	dc.b subtype,frame
00020436                            	dc.w vram
00020436                            	endm
00020436                            
00020436                            @GHZ:
00020436 0000                       	dc.w (@GHZend-@GHZ-2)/8
00020438                            
00020438                            ;		mappings	object		subtype	frame	VRAM setting
00020438 2500 BD56 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00020440 2600 C51C 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020448 1F00 B136 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020450 2200 B5C0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020458 2B00 CC58 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00020460 3600 F0A4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020468 1800 9AF0 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020470 3B00 F1CA 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00020478 4001 1762 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020480 4100 FE18 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020488 4201 003E 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020490 4401 034C 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00020498 7901 9F90 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000204A0 4B00 BDA6 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
000204A8 7D01 A152 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
000204B0                            	@GHZend:
000204B0                            
000204B0                            @LZ:
000204B0 0000                       	dc.w (@LZend-@LZ-2)/8
000204B2                            
000204B2                            ;		mappings	object		subtype	frame	VRAM setting
000204B2 2500 BD56 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000204BA 2600 C51C 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000204C2 4100 FE18 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000204CA 2C00 CCFE 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
000204D2 2D00 CEEA 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
000204DA 1601 4116 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000204E2 1601 4116 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000204EA 3300 E368 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000204F2 3200 DF28 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000204FA 3600 F0A4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020502 5201 21EC 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
0002050A 6101 433E 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
00020512 6101 433E 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
0002051A 6101 433E 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
00020522 6201 4492 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
0002052A 6101 433E 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
00020532 6101 433E 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
0002053A 6301 47F4 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00020542 6001 4060 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
0002054A 6401 4B42 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00020552 6501 4CCA 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
0002055A 6501 4CCA 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00020562 0B01 34AC 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
0002056A 0C01 357C 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020572 7901 9F90 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002057A                            	@LZend:
0002057A                            
0002057A                            @MZ:
0002057A 0000                       	dc.w (@MZend-@MZ-2)/8
0002057C                            
0002057C                            ;		mappings	object		subtype	frame	VRAM setting
0002057C 2500 BD56 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020584 2600 C51C 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002058C 2200 B5C0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020594 3600 F0A4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002059C 4100 FE18 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000205A4 1300 D3F8 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
000205AC 4601 09FC 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
000205B4 6E01 902C 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000205BC 6A01 89E4 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000205C4 3300 E368 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
000205CC 1E00 A84E 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000205D4 5101 1F20 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000205DC 5201 2196 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000205E4 5300 A132 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000205EC 5401 12C8 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000205F4 5501 238A 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000205FC 7801 9BFC 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020604 7901 9F90 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002060C                            	@MZend:
0002060C                            
0002060C                            @SLZ:
0002060C 0000                       	dc.w (@SLZend-@SLZ-2)/8
0002060E                            
0002060E                            ;		mappings	object		subtype	frame	VRAM setting
0002060E 2500 BD56 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020616 2600 C51C 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002061E 5901 2ED4 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
00020626 5300 A132 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
0002062E 1800 9B4E 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
00020636 5A01 300E 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
0002063E 5B01 31C6 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
00020646 5D01 379A 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
0002064E 5E01 3B2C 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
00020656 4100 FE18 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002065E 1300 D3F8 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
00020666 1C00 A250 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
0002066E 5F01 3DAA 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020676 6001 4060 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
0002067E 7901 9F90 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020686                            	@SLZend:
00020686                            
00020686                            @SYZ:
00020686 0000                       	dc.w (@SYZend-@SYZ-2)/8
00020688                            
00020688                            ;		mappings	object		subtype	frame	VRAM setting
00020688 2500 BD56 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020690 2600 C51C 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020698 3600 F0A4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206A0 4100 FE18 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000206A8 4301 029E 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
000206B0 1201 0A7A 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
000206B8 4701 0C1E 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
000206C0 1F00 B136 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000206C8 2200 B5C0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206D0 5001 19F2 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
000206D8 1800 9B3C 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000206E0 5601 2894 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000206E8 3200 DF28 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000206F0 7801 9BFC 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000206F8 7901 9F90 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020700                            	@SYZend:
00020700                            
00020700                            @SBZ:
00020700 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020702                            
00020702                            ;		mappings	object		subtype	frame	VRAM setting
00020702 2500 BD56 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002070A 2600 C51C 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020712 5F01 3DAA 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002071A 6001 4060 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00020722 7801 9BFC 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
0002072A 1501 2C30 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00020732 6701 84D2 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
0002073A 5201 2196 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00020742 3200 DF28 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002074A 6901 872C 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00020752 6901 8786 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
0002075A 6A01 89E4 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020762 5300 A132 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
0002076A 5201 2196 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020772 6B01 8DB4 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
0002077A 2A00 A3E0 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020782 6B01 8DB4 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
0002078A 6A01 89E4 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020792 6B01 8DB4 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
0002079A 6A01 89E4 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
000207A2 6B01 8DB4 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
000207AA 6C01 8F76 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
000207B2 6D01 06EE 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
000207BA 6D01 06EE 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
000207C2 6E01 902C 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000207CA 7001 9472 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
000207D2 7101 3640 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
000207DA 1E00 A84E 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000207E2 7901 9F90 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000207EA                            	@SBZend:
000207EA                            
000207EA                            @Ending:
000207EA 0000                       	dc.w (@Endingend-@Ending-2)/8
000207EC                            
000207EC                            ;		mappings	object		subtype	frame	VRAM setting
000207EC 2500 BD56 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207F4 2500 BD56 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
000207FC                            	@Endingend:
000207FC                            
000207FC                            	even
000207FC                            	even
000207FC                            		include	"_inc\LevelHeaders.asm"
000207FC                            ; ---------------------------------------------------------------------------
000207FC                            ; Level Headers
000207FC                            ; ---------------------------------------------------------------------------
000207FC                            
000207FC                            LevelHeaders:
000207FC                            
000207FC                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
000207FC                            	dc.l (plc1<<24)+lvlgfx
000207FC                            	dc.l (plc2<<24)+sixteen
000207FC                            	dc.l twofivesix
000207FC                            	dc.b 0, music, pal, pal
000207FC                            	endm
000207FC                            
000207FC                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
000207FC                            ; music (unused), palette (unused), palette
000207FC                            
000207FC                            ;		1st PLC				2nd PLC				256x256 data			palette
000207FC                            ;				level gfx*			16x16 data			music*
000207FC                            
000207FC 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
0002080C 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
0002081C 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
0002082C 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
0002083C 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
0002084C 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
0002085C 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
0002086C                            	even
0002086C                            
0002086C                            ;	* music and level gfx are actually set elsewhere, so these values are useless
0002086C                            ;	* music and level gfx are actually set elsewhere, so these values are useless
0002086C                            		include	"_inc\Pattern Load Cues.asm"
0002086C                            ; ---------------------------------------------------------------------------
0002086C                            ; Pattern load cues
0002086C                            ; ---------------------------------------------------------------------------
0002086C                            ArtLoadCues:
0002086C                            
0002086C 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
0002086E 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020870 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020872 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020874                            PLC_Levels:
00020874 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020876 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020878 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
0002087A 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
0002087C 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
0002087E 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020880 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020882 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020884 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020886 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020888 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
0002088A 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
0002088C 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
0002088E 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020890 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020892 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020894 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020896                            PLC_Animals:
00020896 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020898 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
0002089A 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
0002089C 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
0002089E 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
000208A0 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
000208A2 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
000208A4 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
000208A6 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
000208A8 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
000208AA 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
000208AC 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
000208AE                            
000208AE                            plcm:	macro gfx,vram
000208AE                            	dc.l gfx
000208AE                            	dc.w vram
000208AE                            	endm
000208AE                            
000208AE                            ; ---------------------------------------------------------------------------
000208AE                            ; Pattern load cues - standard block 1
000208AE                            ; ---------------------------------------------------------------------------
000208AE 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
000208B0 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
000208B6 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
000208BC 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
000208C2 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
000208C8 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
000208CE                            	PLC_Mainend:
000208CE                            ; ---------------------------------------------------------------------------
000208CE                            ; Pattern load cues - standard block 2
000208CE                            ; ---------------------------------------------------------------------------
000208CE 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
000208D0 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
000208D6                            	PLC_Main2end:
000208D6                            ; ---------------------------------------------------------------------------
000208D6                            ; Pattern load cues - explosion
000208D6                            ; ---------------------------------------------------------------------------
000208D6 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
000208D8 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
000208DE                            	PLC_Explodeend:
000208DE                            ; ---------------------------------------------------------------------------
000208DE                            ; Pattern load cues - game/time	over
000208DE                            ; ---------------------------------------------------------------------------
000208DE 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
000208E0 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000208E6                            	PLC_GameOverend:
000208E6                            ; ---------------------------------------------------------------------------
000208E6                            ; Pattern load cues - Green Hill
000208E6                            ; ---------------------------------------------------------------------------
000208E6 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000208E8 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
000208EE 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
000208F4 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
000208FA 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020900 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020906 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
0002090C 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020912 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020918 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
0002091E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020924 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0002092A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020930                            
00020930 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020932 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020938 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
0002093E 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020944 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
0002094A 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020950 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020956                            	PLC_GHZ2end:
00020956                            ; ---------------------------------------------------------------------------
00020956                            ; Pattern load cues - Labyrinth
00020956                            ; ---------------------------------------------------------------------------
00020956 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020958 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
0002095E                            		;plcm	Nem_LzBlock1, $3C00	; block
0002095E                            		;plcm	Nem_LzBlock2, $3E00	; blocks
0002095E                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
0002095E 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020964 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
0002096A 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020970 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020976 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
0002097C 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020982 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020988 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
0002098E                            
0002098E 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020990 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020996 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
0002099C 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
000209A2 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
000209A8 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
000209AE 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
000209B4 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
000209BA 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
000209C0 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
000209C6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
000209CC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
000209D2 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
000209D8                            	PLC_LZ2end:
000209D8                            ; ---------------------------------------------------------------------------
000209D8                            ; Pattern load cues - Marble
000209D8                            ; ---------------------------------------------------------------------------
000209D8 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
000209DA 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
000209E0 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
000209E6 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
000209EC 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
000209F2 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
000209F8 0000 0000 8000             		plcm	Nem_Bomb, $8000
000209FE 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020A04 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020A0A 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020A10 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020A16                            
00020A16 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020A18 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020A1E 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020A24                            		;plcm	Nem_MzSwitch, $A260	; switch
00020A24 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A2A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A30 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A36 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020A3C 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020A42                            	PLC_MZ2end:
00020A42                            ; ---------------------------------------------------------------------------
00020A42                            ; Pattern load cues - Star Light
00020A42                            ; ---------------------------------------------------------------------------
00020A42 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020A44 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020A4A 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020A50 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020A56 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020A5C 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020A62 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020A68 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020A6E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A74 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A7A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A80                            
00020A80 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020A82 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020A88 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020A8E 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020A94 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020A9A 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020AA0 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020AA6                            	PLC_SLZ2end:
00020AA6                            ; ---------------------------------------------------------------------------
00020AA6                            ; Pattern load cues - Spring Yard
00020AA6                            ; ---------------------------------------------------------------------------
00020AA6 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020AA8 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020AAE                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020AAE                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020AAE 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020AB4 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020ABA 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020AC0 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020AC6 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020ACC 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020AD2                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020AD2                            
00020AD2 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020AD4                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020AD4 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020ADA 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020AE0 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020AE6                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020AE6 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020AEC                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020AEC 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020AF2 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020AF8 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020AFE 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B04                            	PLC_SYZ2end:
00020B04                            ; ---------------------------------------------------------------------------
00020B04                            ; Pattern load cues - Scrap Brain
00020B04                            ; ---------------------------------------------------------------------------
00020B04 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020B06 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020B0C 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020B12                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020B12                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020B12                            		;plcm	Nem_Girder, $5E00	; girder
00020B12 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020B18 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020B1E                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020B1E 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020B24 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020B2A 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020B30 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020B36                            
00020B36 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020B38                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020B38 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020B3E 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020B44                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020B44 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020B4A 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020B50 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020B56 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020B5C 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020B62 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B68 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B6E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B74                            	PLC_SBZ2end:
00020B74                            ; ---------------------------------------------------------------------------
00020B74                            ; Pattern load cues - title card
00020B74                            ; ---------------------------------------------------------------------------
00020B74 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020B76 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020B7C                            	PLC_TitleCardend:
00020B7C                            ; ---------------------------------------------------------------------------
00020B7C                            ; Pattern load cues - act 3 boss
00020B7C                            ; ---------------------------------------------------------------------------
00020B7C 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020B7E 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020B84 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020B8A 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020B90 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020B96 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020B9C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020BA2                            	PLC_Bossend:
00020BA2                            ; ---------------------------------------------------------------------------
00020BA2                            ; Pattern load cues - act 1/2 signpost
00020BA2                            ; ---------------------------------------------------------------------------
00020BA2 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020BA4 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020BAA 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020BB0 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020BB6                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020BB6                            	PLC_Signpostend:
00020BB6                            ; ---------------------------------------------------------------------------
00020BB6                            ; Pattern load cues - beta special stage warp effect
00020BB6                            ; ---------------------------------------------------------------------------
00020BB6                            PLC_Warp:
00020BB6                            	PLC_Warpend:
00020BB6                            ; ---------------------------------------------------------------------------
00020BB6                            ; Pattern load cues - special stage
00020BB6                            ; ---------------------------------------------------------------------------
00020BB6 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020BB8 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020BBE 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020BC4 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020BCA 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020BD0 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020BD6 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020BDC 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020BE2 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020BE8 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020BEE 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020BF4 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020BFA 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020C00 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020C06 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020C0C                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020C0C                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020C0C                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020C0C                            	PLC_SpeStageend:
00020C0C                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020C0C                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020C0C                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020C0C                            ; ---------------------------------------------------------------------------
00020C0C                            ; Pattern load cues - GHZ animals
00020C0C                            ; ---------------------------------------------------------------------------
00020C0C 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020C0E 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020C14 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020C1A                            	PLC_GHZAnimalsend:
00020C1A                            ; ---------------------------------------------------------------------------
00020C1A                            ; Pattern load cues - LZ animals
00020C1A                            ; ---------------------------------------------------------------------------
00020C1A 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020C1C 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020C22 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020C28                            	PLC_LZAnimalsend:
00020C28                            ; ---------------------------------------------------------------------------
00020C28                            ; Pattern load cues - MZ animals
00020C28                            ; ---------------------------------------------------------------------------
00020C28 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020C2A 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020C30 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020C36                            	PLC_MZAnimalsend:
00020C36                            ; ---------------------------------------------------------------------------
00020C36                            ; Pattern load cues - SLZ animals
00020C36                            ; ---------------------------------------------------------------------------
00020C36 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020C38 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020C3E 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020C44                            	PLC_SLZAnimalsend:
00020C44                            ; ---------------------------------------------------------------------------
00020C44                            ; Pattern load cues - SYZ animals
00020C44                            ; ---------------------------------------------------------------------------
00020C44 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020C46 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020C4C 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020C52                            	PLC_SYZAnimalsend:
00020C52                            ; ---------------------------------------------------------------------------
00020C52                            ; Pattern load cues - SBZ animals
00020C52                            ; ---------------------------------------------------------------------------
00020C52 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020C54 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020C5A 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020C60                            	PLC_SBZAnimalsend:
00020C60                            ; ---------------------------------------------------------------------------
00020C60                            ; Pattern load cues - special stage results screen
00020C60                            ; ---------------------------------------------------------------------------
00020C60 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020C62 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020C68 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020C6E                            	PLC_SpeStResultend:
00020C6E                            ; ---------------------------------------------------------------------------
00020C6E                            ; Pattern load cues - ending sequence
00020C6E                            ; ---------------------------------------------------------------------------
00020C6E 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020C70 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020C76 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020C7C 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020C82                            		;plcm	Nem_EndFlower, $7400	; flowers
00020C82 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020C88 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020C8E 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020C94 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020C9A 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020CA0 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020CA6 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020CAC 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020CB2 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020CB8 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020CBE                            	PLC_Endingend:
00020CBE                            ; ---------------------------------------------------------------------------
00020CBE                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020CBE                            ; ---------------------------------------------------------------------------
00020CBE 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020CC0 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020CC6 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020CCC 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020CD2                            	PLC_TryAgainend:
00020CD2                            ; ---------------------------------------------------------------------------
00020CD2                            ; Pattern load cues - Eggman on SBZ 2
00020CD2                            ; ---------------------------------------------------------------------------
00020CD2 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020CD4 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020CDA 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020CE0 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020CE6                            	PLC_EggmanSBZ2end:
00020CE6                            ; ---------------------------------------------------------------------------
00020CE6                            ; Pattern load cues - final boss
00020CE6                            ; ---------------------------------------------------------------------------
00020CE6 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020CE8 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020CEE 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020CF4 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020CFA 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020D00 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020D06                            	PLC_FZBossend:
00020D06                            ; ---------------------------------------------------------------------------
00020D06                            ; Pattern load cues - Eggman
00020D06                            ; ---------------------------------------------------------------------------
00020D06 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020D08 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020D0E 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020D14 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020D1A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D20 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D26 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020D2C                            	PLC_Eggend:
00020D2C                            		even
00020D2C                            ; ---------------------------------------------------------------------------
00020D2C                            ; Pattern load cue IDs
00020D2C                            ; ---------------------------------------------------------------------------
00020D2C =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020D2C =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020D2C =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020D2C =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020D2C =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020D2C =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020D2C =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020D2C =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020D2C =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020D2C =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020D2C =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020D2C =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020D2C =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020D2C =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020D2C =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020D2C =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020D2C =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020D2C =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020D2C =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020D2C =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020D2C =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020D2C =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020D2C =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020D2C =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020D2C =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020D2C =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020D2C =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020D2C =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020D2C =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020D2C =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020D2C =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020D2C =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020D2C =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020D2C =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020D2C                            
00020E00                            			dcb.b	$300,$FF
00021100                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021570                            			even
00021570                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002166C                            			even
0002166C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002174C                            		even
0002174C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022BB8                            		even
00022BB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024652                            		even
00024652                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024686                            		even
00024686                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
000248B6                            		even		
000248B6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024974                            		even
00024974                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00024E1C                            		even
00024E1C                            
00024E1C                            Map_Sonic:	include	"_maps\Sonic.asm"
00024E1C                            ; --------------------------------------------------------------------------------
00024E1C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00024E1C                            ; --------------------------------------------------------------------------------
00024E1C                            
00024E1C                            SME_Lx_Kl:	
00024E1C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00024E20 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00024E24 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00024E28 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
00024E2C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00024E30 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00024E34 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00024E38 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
00024E3C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00024E40 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00024E44 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00024E48 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
00024E4C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00024E50 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00024E54 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00024E58 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
00024E5C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00024E60 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00024E64 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00024E68 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
00024E6C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00024E70 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00024E74 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00024E78 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
00024E7C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00024E80 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00024E84 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00024E88 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
00024E8C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00024E90 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00024E94 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00024E98 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
00024E9C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
00024EA0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
00024EA4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
00024EA8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
00024EAC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
00024EB0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
00024EB4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
00024EB8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
00024EBC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
00024EC0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
00024EC4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
00024EC8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
00024ECC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
00024ED0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
00024ED4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
00024ED8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
00024EDC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
00024EE0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
00024EE4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
00024EE8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
00024EEC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
00024EF0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
00024EF4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
00024EF8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
00024EFC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00024F00 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00024F04 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00024F08 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
00024F0C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00024F10 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00024F14 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00024F18 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
00024F1C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00024F20 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00024F24 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00024F28 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
00024F2C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00024F30 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00024F34 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00024F38 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
00024F3C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00024F40 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00024F44 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00024F48 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
00024F4C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00024F50 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00024F54 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00024F58 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
00024F5C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
00024F5E 00                         SME_Lx_Kl_142:	dc.b 0	
00024F5F 04                         SME_Lx_Kl_143:	dc.b 4	
00024F60 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F65 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00024F6A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00024F6F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024F74 09                         SME_Lx_Kl_158:	dc.b 9	
00024F75 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F7A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024F7F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024F84 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024F89 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024F8E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024F93 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00024F98 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00024F9D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00024FA2 0A                         SME_Lx_Kl_186:	dc.b $A	
00024FA3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024FA8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024FAD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024FB2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024FB7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024FBC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024FC1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00024FC6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00024FCB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00024FD0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00024FD5 04                         SME_Lx_Kl_1B9:	dc.b 4	
00024FD6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00024FDB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024FE0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00024FE5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024FEA 03                         SME_Lx_Kl_1CE:	dc.b 3	
00024FEB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FF0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FF5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024FFA 03                         SME_Lx_Kl_1DE:	dc.b 3	
00024FFB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025000 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025005 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002500A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002500B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025010 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025015 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002501A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002501F 02                         SME_Lx_Kl_203:	dc.b 2	
00025020 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025025 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002502A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002502B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025030 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025035 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002503A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002503B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025040 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025045 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002504A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002504B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025050 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025055 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002505A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002505B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025060 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025065 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002506A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002506F 03                         SME_Lx_Kl_253:	dc.b 3	
00025070 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025075 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002507A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002507F 07                         SME_Lx_Kl_263:	dc.b 7	
00025080 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025085 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002508A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002508F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025094 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025099 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002509E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000250A3 05                         SME_Lx_Kl_287:	dc.b 5	
000250A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000250A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000250AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000250B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000250B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000250BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000250BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000250C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000250C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000250C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000250CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000250D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000250D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000250D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000250DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000250E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000250E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000250ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000250EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000250F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000250F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000250F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000250FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025103 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025108 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025109 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002510E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025113 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025118 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002511D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025122 05                         SME_Lx_Kl_306:	dc.b 5	
00025123 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025128 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002512D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025132 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025137 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002513C 06                         SME_Lx_Kl_320:	dc.b 6	
0002513D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025142 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025147 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002514C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025151 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025156 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002515B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002515C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025161 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025166 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002516B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025170 03                         SME_Lx_Kl_354:	dc.b 3	
00025171 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025176 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002517B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025180 05                         SME_Lx_Kl_364:	dc.b 5	
00025181 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025186 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002518B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025190 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025195 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002519A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002519B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000251A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000251A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000251AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000251AF 03                         SME_Lx_Kl_393:	dc.b 3	
000251B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000251B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000251BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000251BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000251C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000251C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000251CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000251CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000251D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000251D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000251DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000251DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000251E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000251E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000251EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000251EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000251F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000251F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000251FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000251FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025204 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025205 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002520A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002520F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025214 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025219 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002521E 04                         SME_Lx_Kl_402:	dc.b 4	
0002521F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025224 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025229 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002522E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025233 02                         SME_Lx_Kl_417:	dc.b 2	
00025234 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025239 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002523E 03                         SME_Lx_Kl_422:	dc.b 3	
0002523F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025244 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025249 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002524E 03                         SME_Lx_Kl_432:	dc.b 3	
0002524F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025254 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025259 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002525E 06                         SME_Lx_Kl_442:	dc.b 6	
0002525F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025264 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025269 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002526E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025273 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025278 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002527D 06                         SME_Lx_Kl_461:	dc.b 6	
0002527E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025283 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025288 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002528D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025292 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025297 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002529C 04                         SME_Lx_Kl_480:	dc.b 4	
0002529D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000252A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000252A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000252AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000252B1 03                         SME_Lx_Kl_495:	dc.b 3	
000252B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000252B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000252BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000252C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000252C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000252C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000252CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000252D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000252D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000252DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000252DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000252E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000252E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000252EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000252F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000252F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000252F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000252FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025300 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025301 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025306 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002530B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025310 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025315 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002531A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002531B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025320 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025325 02                         SME_Lx_Kl_509:	dc.b 2	
00025326 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002532B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025330 02                         SME_Lx_Kl_514:	dc.b 2	
00025331 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025336 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002533B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002533C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025341 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025346 02                         SME_Lx_Kl_52A:	dc.b 2	
00025347 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002534C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025351 02                         SME_Lx_Kl_535:	dc.b 2	
00025352 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025357 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002535C 02                         SME_Lx_Kl_540:	dc.b 2	
0002535D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025362 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025367 02                         SME_Lx_Kl_54B:	dc.b 2	
00025368 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002536D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025372 04                         SME_Lx_Kl_556:	dc.b 4	
00025373 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025378 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002537D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025382 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025387 03                         SME_Lx_Kl_56B:	dc.b 3	
00025388 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002538D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025392 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025397 03                         SME_Lx_Kl_57B:	dc.b 3	
00025398 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002539D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000253A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000253AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000253B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000253B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000253CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000253D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000253D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000253DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000253ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000253F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000253FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025402 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025407 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025408 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002540D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025412 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025413 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025418 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002541D 02                         SME_Lx_Kl_601:	dc.b 2	
0002541E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025423 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025428 02                         SME_Lx_Kl_60C:	dc.b 2	
00025429 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002542E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025433 02                         SME_Lx_Kl_617:	dc.b 2	
00025434 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025439 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002543E 02                         SME_Lx_Kl_622:	dc.b 2	
0002543F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025444 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025449 02                         SME_Lx_Kl_62D:	dc.b 2	
0002544A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002544F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025454 04                         SME_Lx_Kl_638:	dc.b 4	
00025455 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002545A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002545F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025464 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025469 03                         SME_Lx_Kl_64D:	dc.b 3	
0002546A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002546F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025474 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025479 02                         SME_Lx_Kl_65D:	dc.b 2	
0002547A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002547F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025484 03                         SME_Lx_Kl_668:	dc.b 3	
00025485 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002548A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002548F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025494 04                         SME_Lx_Kl_678:	dc.b 4	
00025495 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002549A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002549F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000254A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000254A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000254AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000254AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000254B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000254B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000254BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000254BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000254C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000254C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000254CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000254CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000254D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000254D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000254E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000254F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000254FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000254FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025504 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025509 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002550E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025513 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025518 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002551D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025522 09                         SME_Lx_Kl_706:	dc.b 9	
00025523 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025528 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002552D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025532 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025537 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002553C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025541 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025546 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002554B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025550 03                         SME_Lx_Kl_734:	dc.b 3	
00025551 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025556 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002555B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025560 03                         SME_Lx_Kl_744:	dc.b 3	
00025561 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025566 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002556B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025570 03                         SME_Lx_Kl_754:	dc.b 3	
00025571 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025576 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002557B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025580 05                         SME_Lx_Kl_764:	dc.b 5	
00025581 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025586 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002558B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025590 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025595 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002559A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002559B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000255A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000255A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000255AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000255AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000255B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000255B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000255BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000255BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000255C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000255C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000255CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000255CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000255D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000255DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000255DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000255E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000255E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000255EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000255F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000255F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000255FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025603 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025604 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025609 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
0002560E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025613 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025618 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025619 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
0002561E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025623 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025628 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
0002562D 04                         SME_Lx_Kl_811:	dc.b 4	
0002562E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025633 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025638 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002563D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025642 01                         SME_Lx_Kl_826:	dc.b 1	
00025643 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025648 01                         SME_Lx_Kl_82C:	dc.b 1	
00025649 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002564E 01                         SME_Lx_Kl_832:	dc.b 1	
0002564F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025654 01                         SME_Lx_Kl_838:	dc.b 1	
00025655 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002565A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002565B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025660 01                         SME_Lx_Kl_844:	dc.b 1	
00025661 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025666 01                         SME_Lx_Kl_84A:	dc.b 1	
00025667 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002566C 03                         SME_Lx_Kl_850:	dc.b 3	
0002566D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025672 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025677 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002567C 01                         SME_Lx_Kl_860:	dc.b 1	
0002567D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025682 02                         SME_Lx_Kl_866:	dc.b 2	
00025683 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025688 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002568D 01                         SME_Lx_Kl_871:	dc.b 1	
0002568E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025693 02                         SME_Lx_Kl_877:	dc.b 2	
00025694 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025699 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002569E 01                         SME_Lx_Kl_882:	dc.b 1	
0002569F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000256A4 04                         SME_Lx_Kl_888:	dc.b 4	
000256A5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000256AA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000256AF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000256B4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000256B9 07                         SME_Lx_Kl_89D:	dc.b 7	
000256BA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000256BF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000256C4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000256C9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000256CE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000256D3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000256D8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000256DD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000256DE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000256E3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000256E8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000256ED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000256F2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000256F7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000256F8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000256FD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025702 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025707 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025708 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002570D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025712 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025713 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025718 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
0002571D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025722 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025727 04                         SME_Lx_Kl_90B:	dc.b 4	
00025728 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
0002572D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025732 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025737 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002573C 04                         SME_Lx_Kl_920:	dc.b 4	
0002573D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025742 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025747 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002574C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025751 09                         SME_Lx_Kl_935:	dc.b 9	
00025752 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025757 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002575C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025761 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025766 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002576B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025770 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025775 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002577A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002577F 03                         SME_Lx_Kl_963:	dc.b 3	
00025780 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025785 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002578A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002578F 03                         SME_Lx_Kl_973:	dc.b 3	
00025790 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025795 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002579A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002579F 02                         SME_Lx_Kl_983:	dc.b 2	
000257A0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
000257A5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
000257AA 00                         SME_Lx_Kl_98E:	dc.b 0	
000257AB 08                         SME_Lx_Kl_98F:	dc.b 8	
000257AC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257B1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000257B6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000257BB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000257C0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000257C5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000257CA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000257CF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000257D4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000257D5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257DA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000257DF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000257E4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000257E9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000257EE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000257F3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000257F8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000257F9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257FE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025803 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025808 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
0002580D 03                         SME_Lx_Kl_9F1:	dc.b 3	
0002580E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025813 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025818 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
0002581D 03                         SME_Lx_Kl_A01:	dc.b 3	
0002581E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025823 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025828 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
0002582D 03                         SME_Lx_Kl_A11:	dc.b 3	
0002582E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025833 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025838 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
0002583D 02                         SME_Lx_Kl_A21:	dc.b 2	
0002583E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025843 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025848 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025849 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002584E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025853 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025858 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025859 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002585E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025863 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025868 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025869 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
0002586E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025873 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025878 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025879 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002587E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025883 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025888 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025889 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
0002588E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025893 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025898 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
0002589D 08                         SME_Lx_Kl_A81:	dc.b 8	
0002589E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
000258A3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
000258A8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
000258AD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
000258B2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
000258B7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
000258BC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
000258C1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
000258C6 04                         SME_Lx_Kl_AAA:	dc.b 4	
000258C7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000258CC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258D1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258D6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258DB 04                         SME_Lx_Kl_ABF:	dc.b 4	
000258DC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000258E1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258E6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258EB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258F0 05                         SME_Lx_Kl_AD4:	dc.b 5	
000258F1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000258F6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000258FB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025900 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025905 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
0002590A 05                         SME_Lx_Kl_AEE:	dc.b 5	
0002590B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025910 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025915 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
0002591A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
0002591F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025924 02                         SME_Lx_Kl_B08:	dc.b 2	
00025925 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
0002592A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002592F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025930 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025935 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
0002593A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002593F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025944 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025949 03                         SME_Lx_Kl_B2D:	dc.b 3	
0002594A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002594F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025954 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025959 05                         SME_Lx_Kl_B3D:	dc.b 5	
0002595A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002595F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025964 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025969 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
0002596E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025973 02                         SME_Lx_Kl_B57:	dc.b 2	
00025974 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025979 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002597E 03                         SME_Lx_Kl_B62:	dc.b 3	
0002597F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025984 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025989 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002598E 03                         SME_Lx_Kl_B72:	dc.b 3	
0002598F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025994 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025999 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002599E 03                         SME_Lx_Kl_B82:	dc.b 3	
0002599F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
000259A4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
000259A9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
000259AE 02                         SME_Lx_Kl_B92:	dc.b 2	
000259AF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000259B4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
000259B9 03                         SME_Lx_Kl_B9D:	dc.b 3	
000259BA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
000259BF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
000259C4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
000259C9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
000259CA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000259CF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000259D4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000259D9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000259DE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000259E3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000259E8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000259ED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000259F2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000259F7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000259FC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025A01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025A02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025A07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025A0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025A11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025A16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025A1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025A20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025A21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025A26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025A2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025A30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025A31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025A36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025A3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025A40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025A45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025A4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025A4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025A54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025A55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025A5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025A5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025A60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025A6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025A74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025A75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025A7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025A85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025A8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025A94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025A95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025A9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025A9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025AA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025AA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025AAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025AB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025AB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025ABB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025ABC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025AC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025AC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025AC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025ACC                            		even
00025ACC                            		even
00025ACC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025ACC                            ; --------------------------------------------------------------------------------
00025ACC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025ACC                            
00025ACC                            SME_vJmm3:	
00025ACC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025AD0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025AD4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025AD8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025ADC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025AE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025AE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025AE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025AEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025AF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025AF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025AF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025AFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025B00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025B04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025B08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025B0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025B10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025B14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025B18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025B1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025B20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025B24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025B28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025B2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025B30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025B34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025B38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025B3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025B40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025B44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025B48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025B4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025B50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025B54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025B58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025B5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025B60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025B64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025B68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025B6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025B70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025B74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025B78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025B7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025B80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025B84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025B88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025B8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025B90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025B94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025B98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025B9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025BA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025BA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025BA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025BAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025BB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025BB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025BB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025BBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025BC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025BC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025BC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025BCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025BD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025BD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025BD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025BDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025BE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025BE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025BE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025BEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025BF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025BF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025BF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025BFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025C00 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025C04 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025C08 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025C0C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025C0E 00                         SME_vJmm3_142:	dc.b 0	
00025C0F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025C18 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025C2B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025C40 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025C49 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025C50 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025C57 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025C60 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025C65 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025C6C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025C73 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025C7A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025C83 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025C8A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025C99 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025CA4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025CAB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025CB2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025CBB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025CC0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025CC7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025CD2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025CDD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025CEA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025CF3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025CFA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025D05 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025D0E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025D15 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025D20 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025D29 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025D2E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025D33 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025D3E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025D47 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025D4C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025D53 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025D5A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025D67 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025D74 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025D7D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025D84 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025D8F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025D98 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025D9F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025DAA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025DAF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025DB4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025DB9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025DBE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025DC3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025DC8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025DCD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025DD2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025DDB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025DE2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025DE9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025DF0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025DF9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00025E00 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00025E07 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
00025E0E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00025E13 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00025E18 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
00025E1D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00025E22 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00025E27 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
00025E2C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00025E31 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00025E36 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00025E3F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00025E46 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
00025E4B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00025E52 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00025E5B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00025E62 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00025E67 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00025E6E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00025E75 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00025E7C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00025E8F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00025EA2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00025EA9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00025EB0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00025EB7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00025EC2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00025EC9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00025ED0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00025EDB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00025EE6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
00025EEF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
00025EF8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00025F01 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
00025F0A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
00025F0D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00025F10 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00025F13 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00025F16 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00025F19 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
00025F1C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
00025F1F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00025F26 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00025F29 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
00025F2E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00025F31 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00025F36 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00025F39 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00025F42 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00025F51 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00025F5C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00025F63 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00025F68 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00025F71 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00025F7A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00025F83 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00025F96 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00025F9D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00025FA4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
00025FA9 00                         SME_vJmm3_4DD:	dc.b 0	
00025FAA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00025FBB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00025FCA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00025FD3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025FDA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FE1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FE8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
00025FEB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FF2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FF9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026000 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026007 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026010 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026021 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002602A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026033 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002603E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026049 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002604E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026059 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026060 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002606B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026070 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026077 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002607E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026085 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002608A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026091 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000260A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000260B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000260BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000260CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000260D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000260D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000260E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000260E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000260F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000260F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000260F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000260F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000260FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026100 00                         		even
00026100 00                         		even
00026100                            
00026100                            ; ---------------------------------------------------------------------------
00026100                            ; Uncompressed graphics	- Sonic
00026100                            ; ---------------------------------------------------------------------------
00026100                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C700                            		even
0003C700                            ; ---------------------------------------------------------------------------
0003C700                            ; Compressed graphics - various
0003C700                            ; ---------------------------------------------------------------------------
0003C700                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CA60                            		even
0003CA60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CDC0                            		even
0003CDC0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D120                            		even
0003D120                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D480                            		even
0003D480                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003D900                            		even
0003D900                            
0003D900                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003D900                            ; ---------------------------------------------------------------------------
0003D900                            ; Sprite mappings - walls of the special stage
0003D900                            ; ---------------------------------------------------------------------------
0003D900                            Map_SSWalls_internal:
0003D900 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003D902 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003D904 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003D906 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003D908 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003D90A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003D90C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003D90E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003D910 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003D912 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003D914 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003D916 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003D918 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003D91A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003D91C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003D91E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003D920 01                         byte_2C584:	dc.b 1
0003D921 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003D926 01                         byte_2C58A:	dc.b 1
0003D927 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003D92C 01                         byte_2C590:	dc.b 1
0003D92D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003D932 01                         byte_2C596:	dc.b 1
0003D933 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003D938 01                         byte_2C59C:	dc.b 1
0003D939 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003D93E 01                         byte_2C5A2:	dc.b 1
0003D93F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003D944 01                         byte_2C5A8:	dc.b 1
0003D945 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003D94A 01                         byte_2C5AE:	dc.b 1
0003D94B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003D950 01                         byte_2C5B4:	dc.b 1
0003D951 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003D956 01                         byte_2C5BA:	dc.b 1
0003D957 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003D95C 01                         byte_2C5C0:	dc.b 1
0003D95D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003D962 01                         byte_2C5C6:	dc.b 1
0003D963 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003D968 01                         byte_2C5CC:	dc.b 1
0003D969 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003D96E 01                         byte_2C5D2:	dc.b 1
0003D96F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003D974 01                         byte_2C5D8:	dc.b 1
0003D975 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003D97A 01                         byte_2C5DE:	dc.b 1
0003D97B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003D980                            		even
0003D980                            		even
0003D980                            
0003D980                            ; ---------------------------------------------------------------------------
0003D980                            ; Compressed graphics - special stage
0003D980                            ; ---------------------------------------------------------------------------
0003D980                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E2B8                            		even
0003E2B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E3EC                            		even
0003E3EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F07C                            		even
0003F07C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F37C                            		even
0003F37C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003F870                            		even
0003F870                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003F95E                            		even
0003F95E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FA2E                            		even
0003FA2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FB24                            		even
0003FB24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FB82                            		even
0003FB82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FC14                            		even
0003FC14                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FCD6                            		even
0003FCD6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FDA4                            		even
0003FDA4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
0003FE70                            		even
0003FE70                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0003FF38                            		even
0003FF38                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040002                            		even
00040002                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000400D2                            		even
000400D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000402C6                            		even
000402C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004042E                            		even
0004042E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000404DE                            		even
000404DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000405B8                            		even
000405B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004063C                            		even
0004063C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
000407BA                            		even
000407BA                            ; ---------------------------------------------------------------------------
000407BA                            ; Compressed graphics - GHZ stuff
000407BA                            ; ---------------------------------------------------------------------------
000407BA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
0004081C                            		even
0004081C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040936                            		even
00040936                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040A54                            		even
00040A54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040A9C                            		even
00040A9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040C3A                            		even
00040C3A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040CB6                            		even
00040CB6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00040ECA                            		even
00040ECA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00040FF6                            		even
00040FF6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004114A                            		even
0004114A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000411FA                            		even
000411FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004125A                            		even
0004125A                            ; ---------------------------------------------------------------------------
0004125A                            ; Compressed graphics - LZ stuff
0004125A                            ; ---------------------------------------------------------------------------
0004125A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041332                            		even
00041332                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041B26                            		even
00041B26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041CB8 00                         		even
00041CB8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00041E22                            		even
00041E22                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042462 00                         		even
00042462                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042504 00                         		even
00042504                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042588                            		even
00042588                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000426E4                            		even
000426E4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004276A                            		even
0004276A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000428D8                            		even
000428D8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042DBA                            		even
00042DBA                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00042F2A                            		even
00042F2A                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000431E2                            		even
000431E2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043328                            		even
00043328                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043452                            		even
00043452                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000435D8 00                         		even
000435D8                            ; ---------------------------------------------------------------------------
000435D8                            ; Compressed graphics - MZ stuff
000435D8                            ; ---------------------------------------------------------------------------
000435D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043866                            		even
00043866                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043924                            		even
00043924                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000439FC                            		even
000439FC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043A50                            		even
00043A50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043D6E 00                         		even
00043D6E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044684                            		even
00044684                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
0004481A                            		even
0004481A                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
000448A2                            		even
000448A2                            ; ---------------------------------------------------------------------------
000448A2                            ; Compressed graphics - SLZ stuff
000448A2                            ; ---------------------------------------------------------------------------
000448A2                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044ADE                            		even
00044ADE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044C24                            		even
00044C24                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00044E68                            		even
00044E68                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00044F04 00                         		even
00044F04                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00044FE6                            		even
00044FE6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
000451C8                            		even
000451C8                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000452D4                            		even
000452D4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045378                            		even
00045378                            ; ---------------------------------------------------------------------------
00045378                            ; Compressed graphics - SYZ stuff
00045378                            ; ---------------------------------------------------------------------------
00045378                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00045508                            		even
00045508                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004556A                            		even
0004556A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004563A 00                         		even
0004563A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
000458C8                            		even
000458C8                            ; ---------------------------------------------------------------------------
000458C8                            ; Compressed graphics - SBZ stuff
000458C8                            ; ---------------------------------------------------------------------------
000458C8                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
0004591C                            		even
0004591C                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045BB8                            		even
00045BB8                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045DA8                            		even
00045DA8                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00045F46                            		even
00045F46                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046276                            		even
00046276                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046454                            		even
00046454                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
000464AC                            		even
000464AC                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004665E 00                         		even
0004665E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004675C                            		even
0004675C                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
000468EA                            		even
000468EA                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046984                            		even
00046984                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
000469DC                            		even
000469DC                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046AD8                            		even
00046AD8                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046BEE                            		even
00046BEE                            ; ---------------------------------------------------------------------------
00046BEE                            ; Compressed graphics - enemies
00046BEE                            ; ---------------------------------------------------------------------------
00046BEE                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00047036 00                         		even
00047036                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
00047526 00                         		even
00047526                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0004780A 00                         		even
0004780A                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047B7E 00                         		even
00047B7E                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047D66                            		even
00047D66                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048494 00                         		even
00048494                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0004871C 00                         		even
0004871C                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
000489B8 00                         		even
000489B8                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00048F8C                            		even
00048F8C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0004921E                            		even
0004921E                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049868 00                         		even
00049868                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049CA4                            		even
00049CA4                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
00049FB2 00                         		even
00049FB2                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A212                            		even
0004A212                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A510                            		even
0004A510                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A73C 00                         		even
0004A73C                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004A8CA                            		even
0004A8CA                            ; ---------------------------------------------------------------------------
0004A8CA                            ; Compressed graphics - various
0004A8CA                            ; ---------------------------------------------------------------------------
0004A8CA                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004AF18 00                         		even
0004AF18                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B090 00                         		even
0004B090                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B1B4                            		even
0004B1B4                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B308 00                         		even
0004B308                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B7B2                            		even
0004B7B2                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004BE26                            		even
0004BE26                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004BEC0 00                         		even
0004BEC0                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C052                            		even
0004C052                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C170 00                         		even
0004C170                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C25C                            		even
0004C25C                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C7D4 00                         		even
0004C7D4                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004C8BE                            		even
0004C8BE                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CA32                            		even
0004CA32                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CDBA 00                         		even
0004CDBA                            ; ---------------------------------------------------------------------------
0004CDBA                            ; Compressed graphics - continue screen
0004CDBA                            ; ---------------------------------------------------------------------------
0004CDBA                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D06A                            		even
0004D06A                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D2A4                            		even
0004D2A4                            ; ---------------------------------------------------------------------------
0004D2A4                            ; Compressed graphics - animals
0004D2A4                            ; ---------------------------------------------------------------------------
0004D2A4                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D3FC                            		even
0004D3FC                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D558                            		even
0004D558                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D6D4                            		even
0004D6D4                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D7F0                            		even
0004D7F0                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004D96A                            		even
0004D96A                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DAA4                            		even
0004DAA4                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DC00                            		even
0004DC00                            ; ---------------------------------------------------------------------------
0004DC00                            ; Compressed graphics - primary patterns and block mappings
0004DC00                            ; ---------------------------------------------------------------------------
0004DC00                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E602                            		even
0004E602                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0004FEAA                            		even
0004FEAA                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0005143A                            		even
0005143A                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053824                            		even
00053824                            Blk16_TS:	incbin	"map16\TS.bin"
00053AA8                            		even
00053AA8                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054BE6                            		even
00054BE6                            Blk256_TS:	incbin	"map256\TS.bin"
00055794                            		even
00055794                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056A10                            		even
00056A10                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
00059EE2                            		even
00059EE2                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D3A0                            		even
0005D3A0                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DB8E                            		even
0005DB8E                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00060626                            		even
00060626                            		incbin	"map256\MZ (JP1).bin"
000625D0                            		even
000625D0                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062C52                            		even
00062C52                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
000666BC                            		even
000666BC                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068AC6                            		even
00068AC6                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0006964C                            		even
0006964C                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CA3C                            		even
0006CA3C                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DDEC                            		even
0006DDEC                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006E9E6                            		even
0006E9E6                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00071228                            		even
00071228                            		incbin	"map256\SBZ (JP1).bin"
00071DB4                            		even
00071DB4                            ; ---------------------------------------------------------------------------
00071DB4                            ; Compressed graphics - bosses and ending sequence
00071DB4                            ; ---------------------------------------------------------------------------
00071DB4                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00072630 00                         		even
00072630                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
0007291A                            		even
0007291A                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0007319E                            		even
0007319E                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
000739CA                            		even
000739CA                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074198 00                         		even
00074198                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00074718                            		even
00074718                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00074838                            		even
00074838                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074A40 00                         		even
00074A40                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075C1E                            		even
00075C1E                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00076562                            		even
00076562                            		even
00076562                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076AF2                            		even
00076AF2                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076D7A                            		even
00076D7A                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00077378                            		even
00077378                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00077600                            		even
00077600                            
00077600 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00077640                            ; ---------------------------------------------------------------------------
00077640                            ; Collision data
00077640                            ; ---------------------------------------------------------------------------
00077640                            AngleMap:	incbin	"collide\Angle Map.bin"
00077740                            		even
00077740                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
00078740                            		even
00078740                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
00079740                            		even
00079740                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
000798FE 00                         		even
000798FE                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079BBC                            		even
00079BBC                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079D36 00                         		even
00079D36                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
00079F2A                            		even
00079F2A                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A116 00                         		even
0007A116                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A2E6 00                         		even
0007A2E6                            ; ---------------------------------------------------------------------------
0007A2E6                            ; Special Stage layouts
0007A2E6                            ; ---------------------------------------------------------------------------
0007A2E6                            SS_1:		incbin	"sslayout\1.bin"
0007A560                            		even
0007A560                            SS_2:		incbin	"sslayout\2.bin"
0007A972                            		even
0007A972                            SS_3:		incbin	"sslayout\3.bin"
0007ACCE                            		even
0007ACCE                            SS_4:		incbin	"sslayout\4.bin"
0007B1A8                            		even
0007B1A8                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B658                            			even
0007B658                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007B94A                            		even
0007B94A                            ; ---------------------------------------------------------------------------
0007B94A                            ; Animated uncompressed graphics
0007B94A                            ; ---------------------------------------------------------------------------
0007B94A                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007BB4A                            		even
0007BB4A                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007BF4A                            		even
0007BF4A                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C3CA                            		even
0007C3CA                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C6CA                            		even
0007C6CA                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CCCA                            		even
0007CCCA                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007CFCA                            		even
0007CFCA                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DA4A                            		even
0007DA4A                            
0007DA4A                            ; ---------------------------------------------------------------------------
0007DA4A                            ; Level	layout index
0007DA4A                            ; ---------------------------------------------------------------------------
0007DA4A                            Level_Index:
0007DA4A                            		; GHZ
0007DA4A 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DA50 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DA56 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DA5C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DA62                            		; LZ
0007DA62 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DA68 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DA6E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DA74 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DA7A                            		; MZ
0007DA7A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DA80 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DA86 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DA8C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DA92                            		; SLZ
0007DA92 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DA98 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DA9E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DAA4 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DAAA                            		; SYZ
0007DAAA 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DAB0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DAB6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DABC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DAC2                            		; SBZ
0007DAC2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DAC8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DACE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DAD4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DADA                            		; Ending
0007DADA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DAE0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DAE6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DAEC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DAF2                            
0007DAF2                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DD24                            		even
0007DD24 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DD28                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007DE4A                            		even
0007DE4A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007DE4E                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E0D0                            		even
0007E0D0                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E112                            		even
0007E112 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E116 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E11A                            
0007E11A                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E1DC                            		even
0007E1DC                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E2DE                            		even
0007E2DE 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E2E2                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E37C                            		even
0007E37C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E380                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E49A                            		even
0007E49A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E49E                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E558                            		even
0007E558 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E55C                            
0007E55C                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E64E                            		even
0007E64E                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E770                            		even
0007E770                            Level_MZ2:	incbin	"levels\mz2.bin"
0007E862                            		even
0007E862                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007E984                            		even
0007E984 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007E988                            Level_MZ3:	incbin	"levels\mz3.bin"
0007E9FA                            		even
0007E9FA                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007EB1C                            		even
0007EB1C 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007EB20 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007EB24                            
0007EB24                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007EC36                            		even
0007EC36                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007ECB0                            		even
0007ECB0                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007EDA0                            		even
0007EDA0                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007EEBA                            		even
0007EEBA 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007EEBE                            
0007EEBE                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007EFC2                            		even
0007EFC2                            		incbin	"levels\syzbg (JP1).bin"
0007EFFC                            		even
0007EFFC 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F000                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F104                            		even
0007F104 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F108                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F262 00                         		even
0007F262 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F266 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F26A                            
0007F26A                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F38C                            		even
0007F38C                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F3CA                            		even
0007F3CA                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F50C                            		even
0007F50C                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F676                            		even
0007F676 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F67A 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F67E                            Level_End:	incbin	"levels\ending.bin"
0007F6AE 00                         		even
0007F6AE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F6B2                            
0007F6B2                            
0007F6B2                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000802F2                            		even
000802F2                            
00080300                            
00080300                            ; ---------------------------------------------------------------------------
00080300                            ; Sprite locations index
00080300                            ; ---------------------------------------------------------------------------
00080300                            ObjPos_Index:
00080300                            		; GHZ
00080300 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080304 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080308 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008030C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080310                            		; LZ
00080310 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080314 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080318 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008031C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080320                            		; MZ
00080320 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080324 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080328 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008032C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080330                            		; SLZ
00080330 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080334 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080338 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008033C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080340                            		; SYZ
00080340 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080344 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080348 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008034C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080350                            		; SBZ
00080350 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080354 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080358 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008035C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080360                            		; Ending
00080360 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080364 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080368 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008036C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080370                            		; --- Put extra object data here. ---
00080370                            ObjPosLZPlatform_Index:
00080370 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080374 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080378 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008037C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080380                            ObjPosSBZPlatform_Index:
00080380 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080384 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080388 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008038C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080390 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080396                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
000809F6                            		even
000809F6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00080E46                            		even
00080E46                            		incbin	"objpos\ghz3 (JP1).bin"
00081056                            		even
00081056                            		incbin	"objpos\lz1 (JP1).bin"
0008108C                            		even
0008108C                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000813CE                            		even
000813CE                            		incbin	"objpos\lz3 (JP1).bin"
00081992                            		even
00081992                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082022                            		even
00082022                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00082054                            		even
00082054                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00082086                            		even
00082086                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000820B8                            		even
000820B8                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000820EA                            		even
000820EA                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082134                            		even
00082134                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00082172                            		even
00082172                            		incbin	"objpos\mz1 (JP1).bin"
00082754                            		even
00082754                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082B32                            		even
00082B32                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082D84                            		even
00082D84                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
000832B8                            		even
000832B8                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00083726                            		even
00083726                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00083D08                            		even
00083D08                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083D62                            		even
00083D62                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083D8C                            		even
00083D8C                            		incbin	"objpos\syz3 (JP1).bin"
00083DBC                            		even
00083DBC                            		incbin	"objpos\sbz1 (JP1).bin"
00083E04                            		even
00083E04                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00083E2E                            		even
00083E2E                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00083E6A                            		even
00083E6A                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00083E9C                            		even
00083E9C                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00083ECE                            		even
00083ECE                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00083F00                            		even
00083F00                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00083F32                            		even
00083F32                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00083F64                            		even
00083F64                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00083F9C                            		even
00083F9C                            ObjPos_End:	incbin	"objpos\ending.bin"
000840F8                            		even
000840F8 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000840FE                            
000840FE                            		dcb.b $63C,$FF
0008473A                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
0008473A                            
0008473A                            SoundDriver:	include "s1.sounddriver.asm"
0008473A                            ; ---------------------------------------------------------------------------
0008473A                            ; Modified (early?) SMPS 68k Type 1b
0008473A                            ; ---------------------------------------------------------------------------
0008473A                            ; Go_SoundTypes:
0008473A 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
0008473E                            ; Go_SoundD0:
0008473E 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084742 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00084746 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
0008474A                            ; off_719A0:
0008474A 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
0008474E 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00084752                            ; ---------------------------------------------------------------------------
00084752                            ; PSG instruments used in music
00084752                            ; ---------------------------------------------------------------------------
00084752                            PSG_Index:
00084752 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
0008475E 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008476A 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084776                            PSG1:		incbin	"sound/psg/psg1.bin"
0008478D                            PSG2:		incbin	"sound/psg/psg2.bin"
00084794                            PSG3:		incbin	"sound/psg/psg3.bin"
000847A5                            PSG4:		incbin	"sound/psg/psg4.bin"
000847B0                            PSG6:		incbin	"sound/psg/psg6.bin"
000847BF                            PSG5:		incbin	"sound/psg/psg5.bin"
000847E9                            PSG7:		incbin	"sound/psg/psg7.bin"
00084805                            PSG8:		incbin	"sound/psg/psg8.bin"
0008482D                            PSG9:		incbin	"sound/psg/psg9.bin"
0008483E                            ; ---------------------------------------------------------------------------
0008483E                            ; New tempos for songs during speed shoes
0008483E                            ; ---------------------------------------------------------------------------
0008483E                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
0008483E                            ; tempos while speed shoes are active. If you don't want that, you should add
0008483E                            ; their "correct" sped-up main tempos to the list.
0008483E                            ; byte_71A94:
0008483E                            SpeedUpIndex:
0008483E 07                         		dc.b 7		; GHZ
0008483F 72                         		dc.b $72	; LZ
00084840 73                         		dc.b $73	; MZ
00084841 26                         		dc.b $26	; SLZ
00084842 15                         		dc.b $15	; SYZ
00084843 08                         		dc.b 8		; SBZ
00084844 FF                         		dc.b $FF	; Invincibility
00084845 05                         		dc.b 5		; Extra Life
00084846                            		;dc.b ?		; Special Stage
00084846                            		;dc.b ?		; Title Screen
00084846                            		;dc.b ?		; Ending
00084846                            		;dc.b ?		; Boss
00084846                            		;dc.b ?		; FZ
00084846                            		;dc.b ?		; Sonic Got Through
00084846                            		;dc.b ?		; Game Over
00084846                            		;dc.b ?		; Continue Screen
00084846                            		;dc.b ?		; Credits
00084846                            		;dc.b ?		; Drowning
00084846                            		;dc.b ?		; Get Emerald
00084846                            
00084846                            ; ---------------------------------------------------------------------------
00084846                            ; Music	Pointers
00084846                            ; ---------------------------------------------------------------------------
00084846                            MusicIndex:
00084846 0000 0000                  ptr_mus81:	dc.l Music81
0008484A 0000 0000                  ptr_mus82:	dc.l Music82
0008484E 0000 0000                  ptr_mus83:	dc.l Music83
00084852 0000 0000                  ptr_mus84:	dc.l Music84
00084856 0000 0000                  ptr_mus85:	dc.l Music85
0008485A 0000 0000                  ptr_mus86:	dc.l Music86
0008485E 0000 0000                  ptr_mus87:	dc.l Music87
00084862 0000 0000                  ptr_mus88:	dc.l Music88
00084866 0000 0000                  ptr_mus89:	dc.l Music89
0008486A 0000 0000                  ptr_mus8A:	dc.l Music8A
0008486E 0000 0000                  ptr_mus8B:	dc.l Music8B
00084872 0000 0000                  ptr_mus8C:	dc.l Music8C
00084876 0000 0000                  ptr_mus8D:	dc.l Music8D
0008487A 0000 0000                  ptr_mus8E:	dc.l Music8E
0008487E 0000 0000                  ptr_mus8F:	dc.l Music8F
00084882 0000 0000                  ptr_mus90:	dc.l Music90
00084886 0000 0000                  ptr_mus91:	dc.l Music91
0008488A 0000 0000                  ptr_mus92:	dc.l Music92
0008488E 0000 0000                  ptr_mus93:	dc.l Music93
00084892 0000 0000                  ptr_mus94:	dc.l Music94
00084896 0000 0000                  ptr_mus95:	dc.l Music95
0008489A 0000 0000                  ptr_mus96:	dc.l Music96
0008489E 0000 0000                  ptr_mus97:	dc.l Music97
000848A2 0000 0000                  ptr_mus98:	dc.l Music98
000848A6                            ptr_musend
000848A6                            ; ---------------------------------------------------------------------------
000848A6                            ; Priority of sound. New music or SFX must have a priority higher than or equal
000848A6                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
000848A6                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
000848A6                            ; any music or SFX can override it (as long as it can override whatever was
000848A6                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
000848A6                            ; will only override special SFX and music will only override music.
000848A6                            ; ---------------------------------------------------------------------------
000848A6                            ; SoundTypes:
000848A6                            SoundPriorities:
000848A6 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
000848B5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000848C5 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000848D5 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000848E5 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000848F5 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084905 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
0008490A                            
0008490A                            ; ---------------------------------------------------------------------------
0008490A                            ; Subroutine to update music more than once per frame
0008490A                            ; (Called by horizontal & vert. interrupts)
0008490A                            ; ---------------------------------------------------------------------------
0008490A                            
0008490A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008490A                            
0008490A                            ; sub_71B4C:
0008490A                            UpdateMusic:
0008490A 33FC 0100 00A1 1100        		stopZ80
00084912 4E71                       		nop	
00084914 4E71                       		nop	
00084916 4E71                       		nop	
00084918                            ; loc_71B5A:
00084918                            @updateloop:
00084918 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00084920 66F6                       		bne.s	@updateloop			; If so, wait
00084922                            
00084922 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
0008492A 6700                       		beq.s	@driverinput			; Branch if yes
0008492C 33FC 0000 00A1 1100        		startZ80
00084934 4E71                       		nop	
00084936 4E71                       		nop	
00084938 4E71                       		nop	
0008493A 4E71                       		nop	
0008493C 4E71                       		nop	
0008493E 60CA                       		bra.s	UpdateMusic
00084940                            ; ===========================================================================
00084940                            ; loc_71B82:
00084940                            @driverinput:
00084940 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00084946 422E 000E                  		clr.b	f_voice_selector(a6)
0008494A 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
0008494E 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00084952 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084956 6600                       		bne.s	@skipdelay
00084958 4EBA 0000                  		jsr	TempoWait(pc)
0008495C                            ; loc_71B9E:
0008495C                            @skipdelay:
0008495C 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00084960 6700                       		beq.s	@skipfadeout
00084962 4EBA 0000                  		jsr	DoFadeOut(pc)
00084966                            ; loc_71BA8:
00084966                            @skipfadeout:
00084966 4A2E 0024                  		tst.b	f_fadein_flag(a6)
0008496A 6700                       		beq.s	@skipfadein
0008496C 4EBA 0000                  		jsr	DoFadeIn(pc)
00084970                            ; loc_71BB2:
00084970                            @skipfadein:
00084970                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00084970 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084974 6700                       		beq.s	@nosndinput		; if not, branch
00084976 4EBA 0000                  		jsr	CycleSoundQueue(pc)
0008497A                            ; loc_71BBC:
0008497A                            @nosndinput:
0008497A 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00084980 6700                       		beq.s	@nonewsound		; If yes, branch
00084982 4EBA 0000                  		jsr	PlaySoundID(pc)
00084986                            ; loc_71BC8:
00084986                            @nonewsound:
00084986 4A38 C901                  		tst.b	($FFFFC901).w
0008498A 6700                       		beq.s	@cont
0008498C 5338 C901                  		subq.b	#1,($FFFFC901).w
00084990                            		
00084990                            @cont:
00084990 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084994 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084996 6A00                       		bpl.s	@dacdone		; Branch if not
00084998 4EBA 0000                  		jsr	DACUpdateTrack(pc)
0008499C                            ; loc_71BD4:
0008499C                            @dacdone:
0008499C 422E 0008                  		clr.b	f_updating_dac(a6)
000849A0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000849A2                            ; loc_71BDA:
000849A2                            @bgmfmloop:
000849A2 DAFC 0030                  		adda.w	#TrackSz,a5
000849A6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849A8 6A00                       		bpl.s	@bgmfmnext		; Branch if not
000849AA 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000849AE                            ; loc_71BE6:
000849AE                            @bgmfmnext:
000849AE 51CF FFF2                  		dbf	d7,@bgmfmloop
000849B2                            
000849B2 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
000849B4                            ; loc_71BEC:
000849B4                            @bgmpsgloop:
000849B4 DAFC 0030                  		adda.w	#TrackSz,a5
000849B8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849BA 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
000849BC 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000849C0                            ; loc_71BF8:
000849C0                            @bgmpsgnext:
000849C0 51CF FFF2                  		dbf	d7,@bgmpsgloop
000849C4                            
000849C4 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
000849CA 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
000849CC                            ; loc_71C04:
000849CC                            @sfxfmloop:
000849CC DAFC 0030                  		adda.w	#TrackSz,a5
000849D0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849D2 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000849D4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000849D8                            ; loc_71C10:
000849D8                            @sfxfmnext:
000849D8 51CF FFF2                  		dbf	d7,@sfxfmloop
000849DC                            
000849DC 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
000849DE                            ; loc_71C16:
000849DE                            @sfxpsgloop:
000849DE DAFC 0030                  		adda.w	#TrackSz,a5
000849E2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849E4 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
000849E6 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000849EA                            ; loc_71C22:
000849EA                            @sfxpsgnext:
000849EA 51CF FFF2                  		dbf	d7,@sfxpsgloop
000849EE                            		
000849EE 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
000849F4 DAFC 0030                  		adda.w	#TrackSz,a5
000849F8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000849FA 6A00                       		bpl.s	@specfmdone		; Branch if not
000849FC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084A00                            ; loc_71C38:
00084A00                            @specfmdone:
00084A00 DAFC 0030                  		adda.w	#TrackSz,a5
00084A04 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084A06 6A00                       		bpl.s	DoStartZ80		; Branch if not
00084A08 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084A0C                            ; loc_71C44:
00084A0C                            DoStartZ80:
00084A0C 33FC 0000 00A1 1100        		startZ80
00084A14 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00084A1A 6700                       		beq.s @end ; if not, branch
00084A1C 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00084A22 6600                       		bne.s @end ; if not, branch
00084A24 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00084A2A 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00084A2E                            
00084A2E                            	@end:
00084A2E 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084A32 4E75                       		rts
00084A34                            ; End of function UpdateMusic
00084A34                            
00084A34                            
00084A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A34                            
00084A34                            ; sub_71C4E: UpdateDAC:
00084A34                            DACUpdateTrack:
00084A34 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084A38 6600                       		bne.s	@locret				; Return if not
00084A3A 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084A40                            ;DACDoNext:
00084A40 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084A44                            ; loc_71C5E:
00084A44                            @sampleloop:
00084A44 7A00                       		moveq	#0,d5
00084A46 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084A48 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084A4C 6500                       		blo.s	@notcoord	; Branch if not
00084A4E 4EBA 0000                  		jsr	CoordFlag(pc)
00084A52 60F0                       		bra.s	@sampleloop
00084A54                            ; ===========================================================================
00084A54                            ; loc_71C6E:
00084A54                            @notcoord:
00084A54 4A05                       		tst.b	d5			; Is it a sample?
00084A56 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084A58 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084A5C 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084A5E 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084A60 534C                       		subq.w	#1,a4			; Put byte back
00084A62 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084A68 6000                       		bra.s	@gotsampleduration
00084A6A                            ; ===========================================================================
00084A6A                            ; loc_71C84:
00084A6A                            @gotduration:
00084A6A 4EBA 0000                  		jsr	SetDuration(pc)
00084A6E                            ; loc_71C88:
00084A6E                            @gotsampleduration:
00084A6E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084A72 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084A76 6600                       		bne.s	@locret			; Return if yes
00084A78 7000                       		moveq	#0,d0
00084A7A 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084A7E 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084A82 6700                       		beq.s	@locret			; Return if yes
00084A84 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084A88 6600                       		bne.s	@timpani		; Various timpani
00084A8A 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084A90                            ; locret_71CAA:
00084A90                            @locret:
00084A90 4E75                       		rts	
00084A92                            ; ===========================================================================
00084A92                            ; loc_71CAC:
00084A92                            @timpani:
00084A92 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084A96 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084A9A                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084A9A                            		; use this value from then on.
00084A9A 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084AA0 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084AA8 4E75                       		rts	
00084AAA                            ; End of function DACUpdateTrack
00084AAA                            
00084AAA                            ; ===========================================================================
00084AAA                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084AAA                            ; Also, $8C-$8D are so slow you may want to skip them.
00084AAA                            ; byte_71CC4:
00084AAA 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084AB0                            
00084AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084AB0                            
00084AB0                            ; sub_71CCA:
00084AB0                            FMUpdateTrack:
00084AB0 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084AB4 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084AB6 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084ABA 4EBA 0000                  		jsr	FMDoNext(pc)
00084ABE 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084AC2 6000 0000                  		bra.w	FMNoteOn
00084AC6                            ; ===========================================================================
00084AC6                            ; loc_71CE0:
00084AC6                            @notegoing:
00084AC6 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084ACA 4EBA 0000                  		jsr	DoModulation(pc)
00084ACE 6000 0000                  		bra.w	FMUpdateFreq
00084AD2                            ; End of function FMUpdateTrack
00084AD2                            
00084AD2                            
00084AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084AD2                            
00084AD2                            ; sub_71CEC:
00084AD2                            FMDoNext:
00084AD2 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084AD6 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084ADA                            ; loc_71CF4:
00084ADA                            @noteloop:
00084ADA 7A00                       		moveq	#0,d5
00084ADC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084ADE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084AE2 6500                       		blo.s	@gotnote	; Branch if not
00084AE4 4EBA 0000                  		jsr	CoordFlag(pc)
00084AE8 60F0                       		bra.s	@noteloop
00084AEA                            ; ===========================================================================
00084AEA                            ; loc_71D04:
00084AEA                            @gotnote:
00084AEA 4EBA 0000                  		jsr	FMNoteOff(pc)
00084AEE 4A05                       		tst.b	d5		; Is this a note?
00084AF0 6A00                       		bpl.s	@gotduration	; Branch if not
00084AF2 4EBA 0000                  		jsr	FMSetFreq(pc)
00084AF6 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084AF8 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084AFA 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084AFC 6000 0000                  		bra.w	FinishTrackUpdate
00084B00                            ; ===========================================================================
00084B00                            ; loc_71D1A:
00084B00                            @gotduration:
00084B00 4EBA 0000                  		jsr	SetDuration(pc)
00084B04 6000 0000                  		bra.w	FinishTrackUpdate
00084B08                            ; End of function FMDoNext
00084B08                            
00084B08                            
00084B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B08                            
00084B08                            ; sub_71D22:
00084B08                            FMSetFreq:
00084B08 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084B0C 6700                       		beq.s	TrackSetRest
00084B0E DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084B12 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084B16 E34D                       		lsl.w	#1,d5
00084B18 41FA 0000                  		lea	FMFrequencies(pc),a0
00084B1C 3C30 5000                  		move.w	(a0,d5.w),d6
00084B20 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084B24 4E75                       		rts	
00084B26                            ; End of function FMSetFreq
00084B26                            
00084B26                            
00084B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B26                            
00084B26                            ; sub_71D40:
00084B26                            SetDuration:
00084B26 1005                       		move.b	d5,d0
00084B28 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084B2C                            ; loc_71D46:
00084B2C                            @multloop:
00084B2C 5301                       		subq.b	#1,d1
00084B2E 6700                       		beq.s	@donemult
00084B30 D005                       		add.b	d5,d0
00084B32 60F8                       		bra.s	@multloop
00084B34                            ; ===========================================================================
00084B34                            ; loc_71D4E:
00084B34                            @donemult:
00084B34 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084B38 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084B3C 4E75                       		rts	
00084B3E                            ; End of function SetDuration
00084B3E                            
00084B3E                            ; ===========================================================================
00084B3E                            ; loc_71D58:
00084B3E                            TrackSetRest:
00084B3E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084B42 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084B46                            
00084B46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B46                            
00084B46                            ; sub_71D60:
00084B46                            FinishTrackUpdate:
00084B46 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084B4A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084B50 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084B54 6600                       		bne.s	@locret				; If so, branch
00084B56 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084B5C 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084B60 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084B64 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084B66 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084B6A 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084B6E 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084B72 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084B76 1018                       		move.b	(a0)+,d0			; Get steps
00084B78 E208                       		lsr.b	#1,d0				; Halve them
00084B7A 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084B7E 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084B82                            ; locret_71D9C:
00084B82                            @locret:
00084B82 4E75                       		rts	
00084B84                            ; End of function FinishTrackUpdate
00084B84                            
00084B84                            
00084B84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B84                            
00084B84                            ; sub_71D9E: NoteFillUpdate
00084B84                            NoteTimeoutUpdate:
00084B84 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084B88 6700                       		beq.s	@locret
00084B8A 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084B8E 6600                       		bne.s	@locret				; Return if it hasn't expired
00084B90 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084B94 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084B98 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084B9C 4EBA 0000                  		jsr	FMNoteOff(pc)
00084BA0 584F                       		addq.w	#4,sp				; Do not return to caller
00084BA2 4E75                       		rts	
00084BA4                            ; ===========================================================================
00084BA4                            ; loc_71DBE:
00084BA4                            @psgnoteoff:
00084BA4 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084BA8 584F                       		addq.w	#4,sp		; Do not return to caller
00084BAA                            ; locret_71DC4:
00084BAA                            @locret:
00084BAA 4E75                       		rts	
00084BAC                            ; End of function NoteTimeoutUpdate
00084BAC                            
00084BAC                            
00084BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084BAC                            
00084BAC                            ; sub_71DC6:
00084BAC                            DoModulation:
00084BAC 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084BAE 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084BB2 6700                       		beq.s	@locret				; Return if not
00084BB4 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084BB8 6700                       		beq.s	@waitdone			; If yes, branch
00084BBA 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084BBE 4E75                       		rts	
00084BC0                            ; ===========================================================================
00084BC0                            ; loc_71DDA:
00084BC0                            @waitdone:
00084BC0 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084BC4 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084BC6 4E75                       		rts	
00084BC8                            ; ===========================================================================
00084BC8                            ; loc_71DE2:
00084BC8                            @updatemodulation:
00084BC8 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084BCC 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084BD2 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084BD6 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084BD8 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084BDE 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084BE2 4E75                       		rts	
00084BE4                            ; ===========================================================================
00084BE4                            ; loc_71DFE:
00084BE4                            @calcfreq:
00084BE4 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084BE8 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084BEC 4886                       		ext.w	d6
00084BEE DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084BF2 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084BF6 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084BFA 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084BFC                            ; locret_71E16:
00084BFC                            @locret:
00084BFC 4E75                       		rts	
00084BFE                            ; End of function DoModulation
00084BFE                            
00084BFE                            
00084BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084BFE                            
00084BFE                            ; sub_71E18:
00084BFE                            FMPrepareNote:
00084BFE 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084C02 6600                       		bne.s	locret_71E48		; Return if so
00084C04 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00084C08 6700                       		beq.s	FMSetRest		; Branch if zero
00084C0A                            ; loc_71E24:
00084C0A                            FMUpdateFreq:
00084C0A 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084C0E 4880                       		ext.w	d0
00084C10 DC40                       		add.w	d0,d6			; Add note frequency
00084C12 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084C16 6600                       		bne.s	locret_71E48		; Return if so
00084C18 3206                       		move.w	d6,d1
00084C1A E049                       		lsr.w	#8,d1
00084C1C 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084C20 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084C24 1206                       		move.b	d6,d1
00084C26 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00084C2A 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084C2E                            ; locret_71E48:
00084C2E                            locret_71E48:
00084C2E 4E75                       		rts	
00084C30                            ; ===========================================================================
00084C30                            ; loc_71E4A:
00084C30                            FMSetRest:
00084C30 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084C34 4E75                       		rts	
00084C36                            ; End of function FMPrepareNote
00084C36                            
00084C36                            ; ===========================================================================
00084C36                            ; loc_71E50:
00084C36                            PauseMusic:
00084C36 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00084C38 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084C3E 6700 0000                  		beq.w	@unpausedallfm
00084C42 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00084C48 7602                       		moveq	#2,d3
00084C4A 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084C4E 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084C50                            ; loc_71E6A:
00084C50                            @killpanloop:
00084C50 4EBA 0000                  		jsr	WriteFMI(pc)
00084C54 4EBA 0000                  		jsr	WriteFMII(pc)
00084C58 5200                       		addq.b	#1,d0
00084C5A 51CB FFF4                  		dbf	d3,@killpanloop
00084C5E                            
00084C5E 7602                       		moveq	#2,d3
00084C60 7028                       		moveq	#$28,d0		; Key on/off register
00084C62                            ; loc_71E7C:
00084C62                            @noteoffloop:
00084C62 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084C64 4EBA 0000                  		jsr	WriteFMI(pc)
00084C68 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084C6A 4EBA 0000                  		jsr	WriteFMI(pc)
00084C6E 51CB FFF2                  		dbf	d3,@noteoffloop
00084C72                            
00084C72 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084C76 6000 FD94                  		bra.w	DoStartZ80
00084C7A                            ; ===========================================================================
00084C7A                            ; loc_71E94:
00084C7A                            @unpausemusic:
00084C7A 422E 0003                  		clr.b	f_pausemusic(a6)
00084C7E 7630                       		moveq	#TrackSz,d3
00084C80 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084C84 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084C86                            ; loc_71EA0:
00084C86                            @bgmfmloop:
00084C86 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084C8A 6700                       		beq.s	@bgmfmnext		; Branch if not
00084C8C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084C90 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084C92 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084C96 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084C9A 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084C9E                            ; loc_71EB8:
00084C9E                            @bgmfmnext:
00084C9E DAC3                       		adda.w	d3,a5
00084CA0 51CC FFE4                  		dbf	d4,@bgmfmloop
00084CA4                            
00084CA4 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084CA8 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084CAA                            ; loc_71EC4:
00084CAA                            @sfxfmloop:
00084CAA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084CAE 6700                       		beq.s	@sfxfmnext		; Branch if not
00084CB0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084CB4 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084CB6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084CBA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084CBE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084CC2                            ; loc_71EDC:
00084CC2                            @sfxfmnext:
00084CC2 DAC3                       		adda.w	d3,a5
00084CC4 51CC FFE4                  		dbf	d4,@sfxfmloop
00084CC8                            
00084CC8 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084CCC 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084CD0 6700                       		beq.s	@unpausedallfm		; Branch if not
00084CD2 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084CD6 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084CD8 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084CDC 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084CE0 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084CE4                            ; loc_71EFE:
00084CE4                            @unpausedallfm:
00084CE4 6000 FD26                  		bra.w	DoStartZ80
00084CE8                            
00084CE8                            ; ---------------------------------------------------------------------------
00084CE8                            ; Subroutine to	play a sound or	music track
00084CE8                            ; ---------------------------------------------------------------------------
00084CE8                            
00084CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084CE8                            
00084CE8                            ; Sound_Play:
00084CE8                            CycleSoundQueue:
00084CE8 2079 0008 473A             		movea.l	(Go_SoundPriorities).l,a0
00084CEE 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084CF2 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084CF4 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084CF6                            ; loc_71F12:
00084CF6                            @inputloop:
00084CF6 1011                       		move.b	(a1),d0			; move track number to d0
00084CF8 1200                       		move.b	d0,d1
00084CFA 4219                       		clr.b	(a1)+			; Clear entry
00084CFC 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084D00 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084D02 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00084D08 6700                       		beq.s	@havesound		; If yes, branch
00084D0A 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084D0E 6000                       		bra.s	@nextinput
00084D10                            ; ===========================================================================
00084D10                            ; loc_71F2C:
00084D10                            @havesound:
00084D10 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084D14 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00084D18 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084D1A 6500                       		blo.s	@nextinput		; Branch if yes
00084D1C 1602                       		move.b	d2,d3			; Store new priority
00084D1E 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084D22                            ; loc_71F3E:
00084D22                            @nextinput:
00084D22 51CC FFD2                  		dbf	d4,@inputloop
00084D26                            
00084D26 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00084D28 6B00                       		bmi.s	@locret
00084D2A 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084D2C                            ; locret_71F4A:
00084D2C                            @locret:
00084D2C 4E75                       		rts	
00084D2E                            ; End of function CycleSoundQueue
00084D2E                            
00084D2E                            
00084D2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D2E                            
00084D2E                            ; Sound_ChkValue:
00084D2E                            PlaySoundID:
00084D2E 7E00                       		moveq	#0,d7
00084D30 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084D34 6700 0000                  		beq.w	StopAllSound
00084D38 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00084D3A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084D40                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084D40                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084D40                            		; See LevSel_NoCheat for more.
00084D40 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084D44 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00084D48 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084D4C 6500 0000                  		blo.w	@locret			; Return if yes
00084D50 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084D54 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00084D58 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084D5C 6500 0000                  		blo.w	@locret			; Return if yes
00084D60 0C07 00D1                  		cmpi.b	#$D1,d7
00084D64 6500 0000                  		bcs.w	Sound_PlaySpecial
00084D68 0C07 00DF                  		cmp.b	#$DF,d7
00084D6C 6F00 0000                  		ble.w	Sound_D1toDF
00084D70 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00084D74 6500 0000                  		blo.w	@locret			; Return if yes
00084D78 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00084D7C 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00084D7E                            ; locret_71F8C:
00084D7E                            @locret:
00084D7E 4E75                       		rts	
00084D80                            ; ===========================================================================
00084D80                            
00084D80                            Sound_E0toE4:
00084D80 0407 00E0                  		subi.b	#flg__First,d7
00084D84 E54F                       		lsl.w	#2,d7
00084D86 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084D8A                            ; ===========================================================================
00084D8A                            
00084D8A                            Sound_ExIndex:
00084D8A 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084D8E 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084D92 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00084D96 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084D9A 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084D9E                            ptr_flgend
00084D9E                            ; ===========================================================================
00084D9E                            ; ---------------------------------------------------------------------------
00084D9E                            ; Play "Say-gaa" PCM sound
00084D9E                            ; ---------------------------------------------------------------------------
00084D9E                            ; Sound_E1: PlaySega:
00084D9E                            PlaySegaSound:
00084D9E 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00084DA6 33FC 0000 00A1 1100        		startZ80
00084DAE 323C 0011                  		move.w	#$11,d1
00084DB2                            ; loc_71FC0:
00084DB2                            @busyloop_outer:
00084DB2 303C FFFF                  		move.w	#-1,d0
00084DB6                            ; loc_71FC4:
00084DB6                            @busyloop:
00084DB6 4E71                       		nop	
00084DB8 51C8 FFFC                  		dbf	d0,@busyloop
00084DBC                            
00084DBC 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084DC0                            
00084DC0 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084DC2 4E75                       		rts	
00084DC4                            ; ===========================================================================
00084DC4                            ; ---------------------------------------------------------------------------
00084DC4                            ; Play music track $81-$9F
00084DC4                            ; ---------------------------------------------------------------------------
00084DC4                            ; Sound_81to9F:
00084DC4                            Sound_PlayBGM:
00084DC4 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00084DC8 6600                       		bne.s	@bgmnot1up		; if not, branch
00084DCA 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084DCE 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084DD2 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00084DD6 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00084DD8                            ; loc_71FE6:
00084DD8                            @clearsfxloop:
00084DD8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084DDC DAFC 0030                  		adda.w	#TrackSz,a5
00084DE0 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084DE4                            
00084DE4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084DE8 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084DEA                            ; loc_71FF8:
00084DEA                            @cleartrackplayloop:
00084DEA 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084DEE DAFC 0030                  		adda.w	#TrackSz,a5
00084DF2 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00084DF6                            
00084DF6 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084DF8 204E                       		movea.l	a6,a0
00084DFA 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084DFE 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00084E02                            ; loc_72012:
00084E02                            @backupramloop:
00084E02 22D8                       		move.l	(a0)+,(a1)+
00084E04 51C8 FFFC                  		dbf	d0,@backupramloop
00084E08                            
00084E08 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00084E0E 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00084E10 6000                       		bra.s	@bgm_loadMusic
00084E12                            ; ===========================================================================
00084E12                            ; loc_72024:
00084E12                            @bgmnot1up:
00084E12 422E 0027                  		clr.b	f_1up_playing(a6)
00084E16 422E 0026                  		clr.b	v_fadein_counter(a6)
00084E1A                            ; loc_7202C:
00084E1A                            @bgm_loadMusic:
00084E1A 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00084E1E 2879 0008 474A             		movea.l	(Go_SpeedUpIndex).l,a4
00084E24 0407 0081                  		subi.b	#bgm__First,d7
00084E28 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00084E2E 2879 0008 4742             		movea.l	(Go_MusicIndex).l,a4
00084E34 E54F                       		lsl.w	#2,d7
00084E36 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00084E3A 7000                       		moveq	#0,d0
00084E3C 3014                       		move.w	(a4),d0			; load voice pointer
00084E3E D08C                       		add.l	a4,d0			; It is a relative pointer
00084E40 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00084E44 102C 0005                  		move.b	5(a4),d0		; load tempo
00084E48 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00084E4C                            		;tst.b	f_speedup(a6)
00084E4C                            		;beq.s	@nospeedshoes
00084E4C                            		;move.b	v_speeduptempo(a6),d0
00084E4C                            ; loc_72068:
00084E4C                            ;@nospeedshoes:
00084E4C 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00084E50 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00084E54 7200                       		moveq	#0,d1
00084E56 264C                       		movea.l	a4,a3
00084E58 5C4C                       		addq.w	#6,a4			; Point past header
00084E5A 7E00                       		moveq	#0,d7
00084E5C 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00084E60 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00084E64 5307                       		subq.b	#1,d7
00084E66 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00084E6A 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00084E6E 7C30                       		moveq	#TrackSz,d6
00084E70 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00084E74 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00084E78 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00084E7C                            ; loc_72098:
00084E7C                            @bmg_fmloadloop:
00084E7C 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084E80 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084E84 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084E88 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084E8C 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00084E90 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084E94 7000                       		moveq	#0,d0
00084E96 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00084E98 D08B                       		add.l	a3,d0				; Relative pointer
00084E9A 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084E9E 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00084EA2 D2C6                       		adda.w	d6,a1
00084EA4 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00084EA8                            		
00084EA8 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00084EAE 6600                       		bne.s	@silencefm6
00084EB0 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00084EB2 7200                       		moveq	#0,d1		; Disable DAC
00084EB4 4EBA 0000                  		jsr	WriteFMI(pc)
00084EB8 6000 0000                  		bra.w	@bgm_fmdone
00084EBC                            ; ===========================================================================
00084EBC                            ; loc_720D8:
00084EBC                            @silencefm6:
00084EBC 7028                       		moveq	#$28,d0		; Key on/off register
00084EBE 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00084EC0 4EBA 0000                  		jsr	WriteFMI(pc)
00084EC4 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00084EC8 727F                       		moveq	#$7F,d1		; Total silence
00084ECA 4EBA 0000                  		jsr	WriteFMII(pc)
00084ECE 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00084ED2 727F                       		moveq	#$7F,d1		; Total silence
00084ED4 4EBA 0000                  		jsr	WriteFMII(pc)
00084ED8 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00084EDC 727F                       		moveq	#$7F,d1		; Total silence
00084EDE 4EBA 0000                  		jsr	WriteFMII(pc)
00084EE2 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00084EE6 727F                       		moveq	#$7F,d1		; Total silence
00084EE8 4EBA 0000                  		jsr	WriteFMII(pc)
00084EEC 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00084EF0 123C 00C0                  		move.b	#$C0,d1		; Stereo
00084EF4 4EBA 0000                  		jsr	WriteFMII(pc)
00084EF8                            ; loc_72114:
00084EF8                            @bgm_fmdone:
00084EF8 7E00                       		moveq	#0,d7
00084EFA 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00084EFE 6700                       		beq.s	@bgm_psgdone	; branch if zero
00084F00 5307                       		subq.b	#1,d7
00084F02 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00084F06 45FA 0000                  		lea	PSGInitBytes(pc),a2
00084F0A                            ; loc_72126:
00084F0A                            @bgm_psgloadloop:
00084F0A 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084F0E 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084F12 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084F16 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084F1A 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084F1E 7000                       		moveq	#0,d0
00084F20 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00084F22 D08B                       		add.l	a3,d0				; Relative pointer
00084F24 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084F28 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00084F2C 101C                       		move.b	(a4)+,d0			; load redundant byte
00084F2E 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00084F32 D2C6                       		adda.w	d6,a1
00084F34 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00084F38                            ; loc_72154:
00084F38                            @bgm_psgdone:
00084F38 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00084F3C 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00084F3E                            ; loc_7215A:
00084F3E                            @sfxstoploop:
00084F3E 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00084F40 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00084F44 7000                       		moveq	#0,d0
00084F46 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00084F4A 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00084F4C 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00084F4E E508                       		lsl.b	#2,d0			; Convert to index
00084F50 6000                       		bra.s	@gotchannelindex
00084F52                            ; ===========================================================================
00084F52                            ; loc_7216E:
00084F52                            @sfxpsgchannel:
00084F52 E608                       		lsr.b	#3,d0		; Convert to index
00084F54                            ; loc_72170:
00084F54                            @gotchannelindex:
00084F54 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00084F58 2070 0000                  		movea.l	(a0,d0.w),a0
00084F5C 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00084F60                            ; loc_7217C:
00084F60                            @sfxnext:
00084F60 D2C6                       		adda.w	d6,a1
00084F62 51CF FFDA                  		dbf	d7,@sfxstoploop
00084F66                            
00084F66 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084F6A 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00084F6C 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084F72                            ; loc_7218E:
00084F72                            @checkspecialpsg:
00084F72 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084F76 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00084F78 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084F7E                            ; loc_7219A:
00084F7E                            @sendfmnoteoff:
00084F7E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084F82 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00084F84                            ; loc_721A0:
00084F84                            @fmnoteoffloop:
00084F84 4EBA 0000                  		jsr	FMNoteOff(pc)
00084F88 DAC6                       		adda.w	d6,a5
00084F8A 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00084F8E 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00084F90                            ; loc_721AC:
00084F90                            @psgnoteoffloop:
00084F90 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084F94 DAC6                       		adda.w	d6,a5
00084F96 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00084F9A                            ; loc_721B6:
00084F9A                            @locdblret:
00084F9A 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00084F9C 4E75                       		rts	
00084F9E                            ; ===========================================================================
00084F9E                            ; byte_721BA:
00084F9E 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00084FA6 00                         		even
00084FA6                            ; byte_721C2:
00084FA6 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00084FAA 00                         		even
00084FAA                            ; ===========================================================================
00084FAA                            ; ---------------------------------------------------------------------------
00084FAA                            ; Play Spin Dash sound effect
00084FAA                            ; ---------------------------------------------------------------------------
00084FAA                            Sound_D1toDF:
00084FAA 4A2E 0027                  		tst.b	$27(a6)
00084FAE 6600 0000                  		bne.w	loc_722C6
00084FB2 4A2E 0004                  		tst.b	4(a6)
00084FB6 6600 0000                  		bne.w	loc_722C6
00084FBA 4A2E 0024                  		tst.b	$24(a6)
00084FBE 6600 0000                  		bne.w	loc_722C6
00084FC2 4238 C900                  		clr.b	($FFFFC900).w
00084FC6 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00084FCA 6600                       		bne.s	@cont3	; if not, branch
00084FCC 3F00                       		move.w	d0,-(sp)
00084FCE 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00084FD2 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00084FD6 6600                       		bne.s	@cont1		; if it is, branch
00084FD8 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00084FDC                            		
00084FDC                            @cont1:
00084FDC 5200                       		addq.b	#1,d0
00084FDE 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00084FE2 6400                       		bcc.s	@cont2		; if it has, branch
00084FE4 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00084FE8                            		
00084FE8                            @cont2:
00084FE8 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00084FEE 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00084FF4 301F                       		move.w	(sp)+,d0
00084FF6                            		
00084FF6                            @cont3:	
00084FF6 2079 0008 4746             		movea.l	(Go_SoundIndex).l,a0
00084FFC 0407 00A0                  		sub.b	#$A0,d7
00085000 6000                       		bra.s	SoundEffects_Common
00085002                            ; ---------------------------------------------------------------------------
00085002                            ; Play normal sound effect
00085002                            ; ---------------------------------------------------------------------------
00085002                            ; Sound_A0toCF:
00085002                            Sound_PlaySFX:
00085002 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085006 6600 0000                  		bne.w	loc_722C6		; Exit is it is
0008500A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008500E 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00085012 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085016 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008501A 4238 C900                  		clr.b	($FFFFC900).w
0008501E 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00085022 6600                       		bne.s	Sound_notB5		; if not, branch
00085024 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00085028 6600                       		bne.s	loc_721EE		; Branch if not
0008502A 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
0008502E                            
0008502E                            loc_721EE:
0008502E 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00085034                            
00085034                            Sound_notB5:
00085034 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00085038 6600                       		bne.s	Sound_notA7		; if not, branch
0008503A 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
0008503E 6600 0000                  		bne.w	locret_722C4			; Return if not
00085042 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00085048                            		
00085048                            Sound_notA7:
00085048 2079 0008 4746             		movea.l	(Go_SoundIndex).l,a0
0008504E 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00085052                            
00085052                            SoundEffects_Common:		
00085052 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00085054 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00085058 224B                       		movea.l	a3,a1
0008505A 7200                       		moveq	#0,d1
0008505C 3219                       		move.w	(a1)+,d1		; Voice pointer
0008505E D28B                       		add.l	a3,d1			; Relative pointer
00085060 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00085062                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00085062                            		; index entry is above $3F will cause a crash. This is actually the same way that
00085062                            		; this bug is fixed in Ristar's driver.
00085062 7E00                       		moveq	#0,d7	
00085064 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00085066 5307                       		subq.b	#1,d7
00085068 7C30                       		moveq	#TrackSz,d6
0008506A                            
0008506A                            loc_72228:
0008506A 7600                       		moveq	#0,d3
0008506C 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00085070 1803                       		move.b	d3,d4
00085072 6B00                       		bmi.s	loc_72244	; Branch if PSG
00085074 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00085076 E54B                       		lsl.w	#2,d3
00085078 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0008507C 2A75 3000                  		movea.l	(a5,d3.w),a5
00085080 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00085084 6000                       		bra.s	loc_7226E
00085086                            ; ===========================================================================
00085086                            
00085086                            loc_72244:
00085086 E64B                       		lsr.w	#3,d3
00085088 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0008508C 2A75 3000                  		movea.l	(a5,d3.w),a5
00085090 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00085094 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00085098 6600                       		bne.s	loc_7226E	; Branch if not
0008509A 1004                       		move.b	d4,d0
0008509C 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000850A0 13C0 00C0 0011             		move.b	d0,(psg_input).l
000850A6 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000850AA 13C0 00C0 0011             		move.b	d0,(psg_input).l
000850B0                            
000850B0                            loc_7226E:
000850B0 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
000850B4 2A75 3000                  		movea.l	(a5,d3.w),a5
000850B8 244D                       		movea.l	a5,a2
000850BA 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000850BC                            
000850BC                            loc_72276:
000850BC 429A                       		clr.l	(a2)+
000850BE 51C8 FFFC                  		dbf	d0,loc_72276
000850C2                            
000850C2 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000850C4 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000850C8 7000                       		moveq	#0,d0
000850CA 3019                       		move.w	(a1)+,d0			; Track data pointer
000850CC D08B                       		add.l	a3,d0				; Relative pointer
000850CE 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000850D2 3B59 0008                  		move.w	(a1)+,8(a5)
000850D6 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
000850DA 6700                       		beq.s	@cont		; if not, branch
000850DC 3F00                       		move.w	d0,-(sp)
000850DE 1038 C902                  		move.b	($FFFFC902).w,d0
000850E2 D12D 0008                  		add.b	d0,8(a5)
000850E6 301F                       		move.w	(sp)+,d0
000850E8                            		
000850E8                            @cont:
000850E8 1B7C 0001 000E             		move.b	#1,$E(a5)
000850EE 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000850F2 4A04                       		tst.b	d4				; Is this a PSG channel?
000850F4 6B00                       		bmi.s	loc_722A8		; Branch if yes
000850F6 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000850FC 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00085100                            
00085100                            loc_722A8:
00085100 51CF FF68                  		dbf	d7,loc_72228
00085104                            
00085104 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085108 6A00                       		bpl.s	loc_722B8				; Branch if not
0008510A 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085110                            
00085110                            loc_722B8:
00085110 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00085114 6A00                       		bpl.s	locret_722C4						; Branch if not
00085116 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008511C                            
0008511C                            locret_722C4:
0008511C 4E75                       		rts	
0008511E                            ; ===========================================================================
0008511E                            
0008511E                            loc_722C6:
0008511E 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00085120 4E75                       		rts	
00085122                            ; ===========================================================================
00085122                            ; ---------------------------------------------------------------------------
00085122                            ; RAM addresses for FM and PSG channel variables used by the SFX
00085122                            ; ---------------------------------------------------------------------------
00085122                            ; dword_722CC: BGMChannelRAM:
00085122                            SFX_BGMChannelRAM:
00085122 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00085126 0000 0000                  		dc.l 0
0008512A 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0008512E 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00085132 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00085136 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
0008513A 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
0008513E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00085142                            ; dword_722EC: SFXChannelRAM:
00085142                            SFX_SFXChannelRAM:
00085142 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00085146 0000 0000                  		dc.l 0
0008514A 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008514E 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00085152 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00085156 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
0008515A 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
0008515E 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00085162                            ; ===========================================================================
00085162                            ; ---------------------------------------------------------------------------
00085162                            ; Play GHZ waterfall sound
00085162                            ; ---------------------------------------------------------------------------
00085162                            ; Sound_D0toDF:
00085162                            Sound_PlaySpecial:
00085162 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085166 6600 0000                  		bne.w	@locret			; Return if so
0008516A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008516E 6600 0000                  		bne.w	@locret			; Exit if it is
00085172 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085176 6600 0000                  		bne.w	@locret			; Exit if it is
0008517A 2079 0008 473E             		movea.l	(Go_SpecSoundIndex).l,a0
00085180 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00085184 E54F                       		lsl.w	#2,d7
00085186 2670 7000                  		movea.l	(a0,d7.w),a3
0008518A 224B                       		movea.l	a3,a1
0008518C 7000                       		moveq	#0,d0
0008518E 3019                       		move.w	(a1)+,d0			; Voice pointer
00085190 D08B                       		add.l	a3,d0				; Relative pointer
00085192 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00085196 1A19                       		move.b	(a1)+,d5			; Dividing timing
00085198                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00085198                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00085198 7E00                       		moveq	#0,d7	
0008519A 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
0008519C 5307                       		subq.b	#1,d7
0008519E 7C30                       		moveq	#TrackSz,d6
000851A0                            ; loc_72348:
000851A0                            @sfxloadloop:
000851A0 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000851A4 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000851A6 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000851AC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000851B0 6000                       		bra.s	@sfxinitpsg
000851B2                            ; ===========================================================================
000851B2                            ; loc_7235A:
000851B2                            @sfxoverridepsg:
000851B2 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000851B8 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000851BC                            ; loc_72364:
000851BC                            @sfxinitpsg:
000851BC 244D                       		movea.l	a5,a2
000851BE 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000851C0                            ; loc_72368:
000851C0                            @clearsfxtrackram:
000851C0 429A                       		clr.l	(a2)+
000851C2 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000851C6                            
000851C6 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000851C8 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
000851CC 7000                       		moveq	#0,d0
000851CE 3019                       		move.w	(a1)+,d0			; Track data pointer
000851D0 D08B                       		add.l	a3,d0				; Relative pointer
000851D2 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000851D6 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
000851DA 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
000851E0 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000851E4 4A04                       		tst.b	d4				; Is this a PSG channel?
000851E6 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
000851E8 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000851EE                            ; loc_72396:
000851EE                            @sfxpsginitdone:
000851EE 51CF FFB0                  		dbf	d7,@sfxloadloop
000851F2                            
000851F2 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
000851F6 6A00                       		bpl.s	@doneoverride					; Branch if not
000851F8 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000851FE                            ; loc_723A6:
000851FE                            @doneoverride:
000851FE 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00085202 6A00                       		bpl.s	@locret						; Branch if not
00085204 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008520A 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
0008520E 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085214 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00085218 13C4 00C0 0011             		move.b	d4,(psg_input).l
0008521E                            ; locret_723C6:
0008521E                            @locret:
0008521E 4E75                       		rts	
00085220                            ; End of function PlaySoundID
00085220                            
00085220                            ; ===========================================================================
00085220                            ; ---------------------------------------------------------------------------
00085220                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00085220                            ; ---------------------------------------------------------------------------
00085220                            ; The first block would have been used for overriding the music tracks
00085220                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00085220                            ; The third block would be used to set up the Special SFX
00085220                            ; The second block, however, is for the SFX tracks, which have a higher priority
00085220                            ; and would be checked for if they're currently playing
00085220                            ; If they are, then the third block would be used again, this time to mark
00085220                            ; the new tracks as 'currently playing'
00085220                            
00085220                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00085220                            
00085220                            ; BGMFM4PSG3RAM:
00085220                            ;SpecSFX_BGMChannelRAM:
00085220 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085224 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00085228                            ; SFXFM4PSG3RAM:
00085228                            ;SpecSFX_SFXChannelRAM:
00085228 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008522C 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00085230                            ; SpecialSFXFM4PSG3RAM:
00085230                            ;SpecSFX_SpecSFXChannelRAM:
00085230 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00085234 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00085238                            
00085238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085238                            
00085238                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00085238                            StopSFX:
00085238 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008523A 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0008523E 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00085240                            ; loc_723EA:
00085240                            @trackloop:
00085240 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00085242 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00085246 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0008524A 7600                       		moveq	#0,d3
0008524C 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00085250 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00085252 4EBA 0000                  		jsr	FMNoteOff(pc)
00085256 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
0008525A 6600                       		bne.s	@getfmpointer					; Branch if not
0008525C 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085260 6A00                       		bpl.s	@getfmpointer					; Branch if not
00085262                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00085262                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00085262                            		; is playing its sound!
00085262 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085266 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
0008526A 6000                       		bra.s	@gotfmpointer
0008526C                            ; ===========================================================================
0008526C                            ; loc_72416:
0008526C                            @getfmpointer:
0008526C 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
0008526E E50B                       		lsl.b	#2,d3
00085270 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00085274 264D                       		movea.l	a5,a3
00085276 2A70 3000                  		movea.l	(a0,d3.w),a5
0008527A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
0008527E                            ; loc_72428:
0008527E                            @gotfmpointer:
0008527E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085282 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085286 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008528A 4EBA 0000                  		jsr	SetVoice(pc)
0008528E 2A4B                       		movea.l	a3,a5
00085290 6000                       		bra.s	@nexttrack
00085292                            ; ===========================================================================
00085292                            ; loc_7243C:
00085292                            @trackpsg:
00085292 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085296 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
0008529A 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
0008529E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000852A0 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
000852A4 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000852A6 E60B                       		lsr.b	#3,d3
000852A8 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
000852AC 2070 3000                  		movea.l	(a0,d3.w),a0
000852B0                            ; loc_7245A:
000852B0                            @gotpsgpointer:
000852B0 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000852B4 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000852B8 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
000852BE 6600                       		bne.s	@nexttrack			; Branch if not
000852C0 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
000852C8                            ; loc_72472:
000852C8                            @nexttrack:
000852C8 DAFC 0030                  		adda.w	#TrackSz,a5
000852CC 51CF FF72                  		dbf	d7,@trackloop
000852D0                            
000852D0 4E75                       		rts	
000852D2                            ; End of function StopSFX
000852D2                            
000852D2                            
000852D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000852D2                            
000852D2                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
000852D2                            StopSpecialSFX:
000852D2 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000852D6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000852D8 6A00                       		bpl.s	@fadedfm		; Branch if not
000852DA 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000852DE 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000852E2 6600                       		bne.s	@fadedfm		; Branch if not
000852E4 4EBA 0000                  		jsr	SendFMNoteOff(pc)
000852E8 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000852EC 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000852F0 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000852F4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000852F6 6A00                       		bpl.s	@fadedfm		; Branch if not
000852F8 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000852FC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085300 4EBA 0000                  		jsr	SetVoice(pc)
00085304                            ; loc_724AE:
00085304                            @fadedfm:
00085304 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085308 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008530A 6A00                       		bpl.s	@fadedpsg		; Branch if not
0008530C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085310 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085314 6600                       		bne.s	@fadedpsg		; Return if not
00085316 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
0008531A 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
0008531E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085322 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085326 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085328 6A00                       		bpl.s	@fadedpsg		; Return if not
0008532A 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00085330 6600                       		bne.s	@fadedpsg			; Return if not
00085332 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
0008533A                            ; locret_724E4:
0008533A                            @fadedpsg:
0008533A 4E75                       		rts	
0008533C                            ; End of function StopSpecialSFX
0008533C                            
0008533C                            ; ===========================================================================
0008533C                            ; ---------------------------------------------------------------------------
0008533C                            ; Fade out music
0008533C                            ; ---------------------------------------------------------------------------
0008533C                            ; Sound_E0:
0008533C                            FadeOutMusic:
0008533C 4EBA FEFA                  		jsr	StopSFX(pc)
00085340 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00085344 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
0008534A 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00085350 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00085354 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00085358 4E75                       		rts	
0008535A                            
0008535A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008535A                            
0008535A                            ; sub_72504:
0008535A                            DoFadeOut:
0008535A 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
0008535E 6700                       		beq.s	@continuefade		; Branch if yes
00085360 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00085364 4E75                       		rts	
00085366                            ; ===========================================================================
00085366                            ; loc_72510:
00085366                            @continuefade:
00085366 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
0008536A 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
0008536E 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00085374 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085378 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008537A                            ; loc_72524:
0008537A                            @fmloop:
0008537A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008537C 6A00                       		bpl.s	@nextfm			; Branch if not
0008537E 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00085382 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00085384 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085388 6000                       		bra.s	@nextfm
0008538A                            ; ===========================================================================
0008538A                            ; loc_72534:
0008538A                            @sendfmtl:
0008538A 4EBA 0000                  		jsr	SendVoiceTL(pc)
0008538E                            ; loc_72538:
0008538E                            @nextfm:
0008538E DAFC 0030                  		adda.w	#TrackSz,a5
00085392 51CF FFE6                  		dbf	d7,@fmloop
00085396                            
00085396 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085398                            ; loc_72542:
00085398                            @psgloop:
00085398 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008539A 6A00                       		bpl.s	@nextpsg		; branch if not
0008539C 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000853A0 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
000853A6 6500                       		blo.s	@sendpsgvol		; Branch if not
000853A8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000853AC 6000                       		bra.s	@nextpsg
000853AE                            ; ===========================================================================
000853AE                            ; loc_72558:
000853AE                            @sendpsgvol:
000853AE 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
000853B2 4EBA 0000                  		jsr	SetPSGVolume(pc)
000853B6                            ; loc_72560:
000853B6                            @nextpsg:
000853B6 DAFC 0030                  		adda.w	#TrackSz,a5
000853BA 51CF FFDC                  		dbf	d7,@psgloop
000853BE                            
000853BE 4E75                       		rts	
000853C0                            ; End of function DoFadeOut
000853C0                            
000853C0                            
000853C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000853C0                            
000853C0                            ; sub_7256A:
000853C0                            FMSilenceAll:
000853C0 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
000853C2 7028                       		moveq	#$28,d0		; FM key on/off register
000853C4                            ; loc_7256E:
000853C4                            @noteoffloop:
000853C4 1203                       		move.b	d3,d1
000853C6 4EBA 0000                  		jsr	WriteFMI(pc)
000853CA 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
000853CC 4EBA 0000                  		jsr	WriteFMI(pc)
000853D0 51CB FFF2                  		dbf	d3,@noteoffloop
000853D4                            
000853D4 7040                       		moveq	#$40,d0		; Set TL on FM channels...
000853D6 727F                       		moveq	#$7F,d1		; ... to total attenuation...
000853D8 7802                       		moveq	#2,d4		; ... for all 3 channels...
000853DA                            ; loc_72584:
000853DA                            @channelloop:
000853DA 7603                       		moveq	#3,d3		; ... for all operators on each channel...
000853DC                            ; loc_72586:
000853DC                            @channeltlloop:
000853DC 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
000853E0 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
000853E4 5840                       		addq.w	#4,d0		; Next TL operator
000853E6 51CB FFF4                  		dbf	d3,@channeltlloop
000853EA                            
000853EA 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
000853EE 51CC FFEA                  		dbf	d4,@channelloop
000853F2                            
000853F2 4E75                       		rts	
000853F4                            ; End of function FMSilenceAll
000853F4                            
000853F4                            ; ===========================================================================
000853F4                            ; ---------------------------------------------------------------------------
000853F4                            ; Stop music
000853F4                            ; ---------------------------------------------------------------------------
000853F4                            ; Sound_E4: StopSoundAndMusic:
000853F4                            StopAllSound:
000853F4 702B                       		moveq	#$2B,d0		; Enable/disable DAC
000853F6 123C 0080                  		move.b	#$80,d1		; Enable DAC
000853FA 4EBA 0000                  		jsr	WriteFMI(pc)
000853FE 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00085400 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00085402 4EBA 0000                  		jsr	WriteFMI(pc)
00085406 204E                       		movea.l	a6,a0
00085408                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00085408                            		; Remove the '-$10' to fix this.
00085408 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
0008540C                            ; loc_725B6:
0008540C                            @clearramloop:
0008540C 4298                       		clr.l	(a0)+
0008540E 51C8 FFFC                  		dbf	d0,@clearramloop
00085412                            
00085412 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085418 4EBA FFA6                  		jsr	FMSilenceAll(pc)
0008541C 6000 0000                  		bra.w	PSGSilenceAll
00085420                            
00085420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085420                            
00085420                            ; sub_725CA:
00085420                            InitMusicPlayback:
00085420 204E                       		movea.l	a6,a0
00085422                            		; Save several values
00085422 1216                       		move.b	v_sndprio(a6),d1
00085424 142E 0027                  		move.b	f_1up_playing(a6),d2
00085428 162E 002A                  		move.b	f_speedup(a6),d3
0008542C 182E 0026                  		move.b	v_fadein_counter(a6),d4
00085430                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00085430 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00085434 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00085438                            ; loc_725E4:
00085438                            @clearramloop:
00085438 4298                       		clr.l	(a0)+
0008543A 51C8 FFFC                  		dbf	d0,@clearramloop
0008543E                            
0008543E                            		; Restore the values saved above
0008543E 1C81                       		move.b	d1,v_sndprio(a6)
00085440 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00085444 1D43 002A                  		move.b	d3,f_speedup(a6)
00085448 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
0008544C 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00085450 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085456                            		; DANGER! This silences ALL channels, even the ones being used
00085456                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00085456                            		; doesn't affect SFX channels, either.
00085456                            		; This should be replaced with an 'rts'.
00085456 4EBA FF68                  		jsr	FMSilenceAll(pc)
0008545A 6000 0000                  		bra.w	PSGSilenceAll
0008545E                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
0008545E                            		; don't do a very good job of setting up the music tracks.
0008545E                            		; Tracks that aren't defined in a music file's header don't have
0008545E                            		; their channels defined, meaning @sendfmnoteoff won't silence
0008545E                            		; hardware properly. In combination with removing the above
0008545E                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
0008545E                            		; notes.
0008545E                            		; To fix this, I suggest using this code, instead of an 'rts':
0008545E                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
0008545E                            		;lea	FMDACInitBytes(pc),a2
0008545E                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
0008545E                            		;bsr.s	@writeloop
0008545E                            		;lea	PSGInitBytes(pc),a2
0008545E                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
0008545E                            
0008545E                            ;@writeloop:
0008545E                            		;move.b	(a2)+,(a1)		; Write track's channel byte
0008545E                            		;lea	TrackSz(a1),a1		; Next track
0008545E                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
0008545E                            
0008545E                            		;rts
0008545E                            	
0008545E                            ; End of function InitMusicPlayback
0008545E                            
0008545E                            
0008545E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008545E                            
0008545E                            ; sub_7260C:
0008545E                            TempoWait:
0008545E 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00085464 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00085468 7030                       		moveq	#TrackSz,d0
0008546A 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0008546C                            ; loc_7261A:
0008546C                            @tempoloop:
0008546C 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0008546E D0C0                       		adda.w	d0,a0	; Advance to next track
00085470 51C9 FFFA                  		dbf	d1,@tempoloop
00085474                            
00085474 4E75                       		rts	
00085476                            ; End of function TempoWait
00085476                            
00085476                            ; ===========================================================================
00085476                            ; ---------------------------------------------------------------------------
00085476                            ; Speed	up music
00085476                            ; ---------------------------------------------------------------------------
00085476                            ; Sound_E2:
00085476                            SpeedUpMusic:
00085476 4A2E 0027                  		tst.b	f_1up_playing(a6)
0008547A 6600                       		bne.s	@speedup_1up
0008547C 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00085482 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00085488 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0008548E 4E75                       		rts	
00085490                            ; ===========================================================================
00085490                            ; loc_7263E:
00085490                            @speedup_1up:
00085490 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085496 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0008549C 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
000854A2 4E75                       		rts	
000854A4                            ; ===========================================================================
000854A4                            ; ---------------------------------------------------------------------------
000854A4                            ; Change music back to normal speed
000854A4                            ; ---------------------------------------------------------------------------
000854A4                            ; Sound_E3:
000854A4                            SlowDownMusic:
000854A4 4A2E 0027                  		tst.b	f_1up_playing(a6)
000854A8 6600                       		bne.s	@slowdown_1up
000854AA 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
000854B0 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
000854B6 422E 002A                  		clr.b	f_speedup(a6)
000854BA 4E75                       		rts	
000854BC                            ; ===========================================================================
000854BC                            ; loc_7266A:
000854BC                            @slowdown_1up:
000854BC 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
000854C2 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000854C8 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
000854CC 4E75                       		rts	
000854CE                            
000854CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000854CE                            
000854CE                            ; sub_7267C:
000854CE                            DoFadeIn:
000854CE 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
000854D2 6700                       		beq.s	@continuefade		; Branch if yes
000854D4 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
000854D8 4E75                       		rts	
000854DA                            ; ===========================================================================
000854DA                            ; loc_72688:
000854DA                            @continuefade:
000854DA 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
000854DE 6700                       		beq.s	@fadedone		; Branch if yes
000854E0 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
000854E4 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
000854EA 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000854EE 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000854F0                            ; loc_7269E:
000854F0                            @fmloop:
000854F0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000854F2 6A00                       		bpl.s	@nextfm			; Branch if not
000854F4 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000854F8 4EBA 0000                  		jsr	SendVoiceTL(pc)
000854FC                            ; loc_726AA:
000854FC                            @nextfm:
000854FC DAFC 0030                  		adda.w	#TrackSz,a5
00085500 51CF FFEE                  		dbf	d7,@fmloop
00085504 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00085506                            ; loc_726B4:
00085506                            @psgloop:
00085506 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085508 6A00                       		bpl.s	@nextpsg		; Branch if not
0008550A 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0008550E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00085512 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00085516 6500                       		blo.s	@sendpsgvol		; Branch if yes
00085518 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
0008551A                            ; loc_726C8:
0008551A                            @sendpsgvol:
0008551A 4EBA 0000                  		jsr	SetPSGVolume(pc)
0008551E                            ; loc_726CC:
0008551E                            @nextpsg:
0008551E DAFC 0030                  		adda.w	#TrackSz,a5
00085522 51CF FFE2                  		dbf	d7,@psgloop
00085526 4E75                       		rts	
00085528                            ; ===========================================================================
00085528                            ; loc_726D6:
00085528                            @fadedone:
00085528 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
0008552E 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00085532 4E75                       		rts	
00085534                            ; End of function DoFadeIn
00085534                            
00085534                            ; ===========================================================================
00085534                            ; loc_726E2:
00085534                            FMNoteOn:
00085534 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00085538 6600                       		bne.s	@locret		; Return if so
0008553A 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0008553E 6600                       		bne.s	@locret		; Return if so
00085540 7028                       		moveq	#$28,d0		; Note on/off register
00085542 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00085546 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0008554A 6000 0000                  		bra.w	WriteFMI
0008554E                            ; ===========================================================================
0008554E                            ; locret_726FC:
0008554E                            @locret:
0008554E 4E75                       		rts	
00085550                            
00085550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085550                            
00085550                            ; sub_726FE:
00085550                            FMNoteOff:
00085550 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00085554 6600                       		bne.s	locret_72714	; Return if yes
00085556 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008555A 6600                       		bne.s	locret_72714	; Return if yes
0008555C                            ; loc_7270A:
0008555C                            SendFMNoteOff:
0008555C 7028                       		moveq	#$28,d0		; Note on/off register
0008555E 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00085562 6000 0000                  		bra.w	WriteFMI
00085566                            ; ===========================================================================
00085566                            
00085566                            locret_72714:
00085566 4E75                       		rts	
00085568                            ; End of function FMNoteOff
00085568                            
00085568                            ; ===========================================================================
00085568                            ; loc_72716:
00085568                            WriteFMIorIIMain:
00085568 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0008556C 6600                       		bne.s	@locret		; Return if yes
0008556E 6000 0000                  		bra.w	WriteFMIorII
00085572                            ; ===========================================================================
00085572                            ; locret_72720:
00085572                            @locret:
00085572 4E75                       		rts	
00085574                            
00085574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085574                            
00085574                            ; sub_72722:
00085574                            WriteFMIorII:
00085574 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
0008557A 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0008557C D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00085580                            ; End of function WriteFMIorII
00085580                            
00085580                            
00085580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085580                            
00085580                            ; The reason I think this is an *early* SMPS 68k Type 1b
00085580                            ; is because this subroutine is the one from Type 1a:
00085580                            ; other Type 1b drivers have a newer, optimised version.
00085580                            ; The driver itself is Type 1b, with this odd exception.
00085580                            
00085580                            ; sub_7272E:
00085580                            WriteFMI:
00085580 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085586 0802 0007                  		btst	#7,d2		; Is FM busy?
0008558A 66F4                       		bne.s	WriteFMI	; Loop if so
0008558C 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00085592 4E71                       		nop	
00085594 4E71                       		nop	
00085596 4E71                       		nop	
00085598                            ; loc_72746:
00085598                            @waitloop:
00085598 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008559E 0802 0007                  		btst	#7,d2		; Is FM busy?
000855A2 66F4                       		bne.s	@waitloop	; Loop if so
000855A4                            
000855A4 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000855AA 4E75                       		rts	
000855AC                            ; End of function WriteFMI
000855AC                            
000855AC                            ; ===========================================================================
000855AC                            ; loc_7275A:
000855AC                            WriteFMIIPart:
000855AC 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
000855B0 0882 0002                  		bclr	#2,d2			; Clear chip toggle
000855B4 D002                       		add.b	d2,d0			; Add in to destination register
000855B6                            
000855B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855B6                            
000855B6                            ; sub_72764:
000855B6                            WriteFMII:
000855B6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000855BC 0802 0007                  		btst	#7,d2		; Is FM busy?
000855C0 66F4                       		bne.s	WriteFMII	; Loop if so
000855C2 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000855C8 4E71                       		nop	
000855CA 4E71                       		nop	
000855CC 4E71                       		nop	
000855CE                            ; loc_7277C:
000855CE                            @waitloop:
000855CE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000855D4 0802 0007                  		btst	#7,d2		; Is FM busy?
000855D8 66F4                       		bne.s	@waitloop	; Loop if so
000855DA                            
000855DA 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000855E0 4E75                       		rts	
000855E2                            ; End of function WriteFMII
000855E2                            
000855E2                            ; ===========================================================================
000855E2                            ; ---------------------------------------------------------------------------
000855E2                            ; FM Note Values: b-0 to a#8
000855E2                            ; ---------------------------------------------------------------------------
000855E2                            ; word_72790: FM_Notes:
000855E2                            FMFrequencies:
000855E2 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000855FA 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00085612 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0008562A 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085642 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
0008565A 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00085672 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
0008568A 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000856A2                            
000856A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856A2                            
000856A2                            ; sub_72850:
000856A2                            PSGUpdateTrack:
000856A2 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000856A6 6600                       		bne.s	@notegoing
000856A8 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000856AC 4EBA 0000                  		jsr	PSGDoNext(pc)
000856B0 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000856B4 6000 0000                  		bra.w	PSGDoVolFX
000856B8                            ; ===========================================================================
000856B8                            ; loc_72866:
000856B8                            @notegoing:
000856B8 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
000856BC 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000856C0 4EBA F4EA                  		jsr	DoModulation(pc)
000856C4 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000856C8 4E75                       		rts
000856CA                            ; End of function PSGUpdateTrack
000856CA                            
000856CA                            
000856CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856CA                            
000856CA                            ; sub_72878:
000856CA                            PSGDoNext:
000856CA 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000856CE 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000856D2                            ; loc_72880:
000856D2                            @noteloop:
000856D2 7A00                       		moveq	#0,d5
000856D4 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000856D6 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000856DA 6500                       		blo.s	@gotnote	; Branch if not
000856DC 4EBA 0000                  		jsr	CoordFlag(pc)
000856E0 60F0                       		bra.s	@noteloop
000856E2                            ; ===========================================================================
000856E2                            ; loc_72890:
000856E2                            @gotnote:
000856E2 4A05                       		tst.b	d5		; Is it a note?
000856E4 6A00                       		bpl.s	@gotduration	; Branch if not
000856E6 4EBA 0000                  		jsr	PSGSetFreq(pc)
000856EA 1A1C                       		move.b	(a4)+,d5	; Get another byte
000856EC 4A05                       		tst.b	d5		; Is it a duration?
000856EE 6A00                       		bpl.s	@gotduration	; Branch if yes
000856F0 534C                       		subq.w	#1,a4		; Put byte back
000856F2 6000 F452                  		bra.w	FinishTrackUpdate
000856F6                            ; ===========================================================================
000856F6                            ; loc_728A4:
000856F6                            @gotduration:
000856F6 4EBA F42E                  		jsr	SetDuration(pc)
000856FA 6000 F44A                  		bra.w	FinishTrackUpdate
000856FE                            ; End of function PSGDoNext
000856FE                            
000856FE                            
000856FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856FE                            
000856FE                            ; sub_728AC:
000856FE                            PSGSetFreq:
000856FE 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00085702 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00085704 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00085708 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
0008570C E34D                       		lsl.w	#1,d5
0008570E 41FA 0000                  		lea	PSGFrequencies(pc),a0
00085712 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00085718 6000 F42C                  		bra.w	FinishTrackUpdate
0008571C                            ; ===========================================================================
0008571C                            ; loc_728CA:
0008571C                            @restpsg:
0008571C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085720 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00085726 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
0008572A 6000 0000                  		bra.w	PSGNoteOff
0008572E                            ; End of function PSGSetFreq
0008572E                            
0008572E                            
0008572E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008572E                            
0008572E                            ; sub_728DC:
0008572E                            PSGDoNoteOn:
0008572E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085732 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085734                            ; End of function PSGDoNoteOn
00085734                            
00085734                            
00085734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085734                            
00085734                            ; sub_728E2:
00085734                            PSGUpdateFreq:
00085734 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00085738 4880                       		ext.w	d0
0008573A DC40                       		add.w	d0,d6		; Add to frequency
0008573C 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085740 6600                       		bne.s	@locret		; Return if yes
00085742 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085746 6600                       		bne.s	@locret		; Return if yes
00085748 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
0008574C 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00085750 6600                       		bne.s	@notnoise	; Branch if not
00085752 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00085756                            ; loc_72904:
00085756                            @notnoise:
00085756 3206                       		move.w	d6,d1
00085758 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0008575C 8001                       		or.b	d1,d0		; Latch tone data to channel
0008575E E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00085760 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085764 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008576A 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085770                            ; locret_7291E:
00085770                            @locret:
00085770 4E75                       		rts	
00085772                            ; End of function PSGUpdateFreq
00085772                            
00085772                            ; ===========================================================================
00085772                            ; loc_72920:
00085772                            PSGSetRest:
00085772 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085776 4E75                       		rts	
00085778                            
00085778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085778                            
00085778                            ; sub_72926:
00085778                            PSGUpdateVolFX:
00085778 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0008577C 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00085780                            ; loc_7292E:
00085780                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00085780 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00085784 7000                       		moveq	#0,d0
00085786 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
0008578A 6700                       		beq.s	SetPSGVolume
0008578C 2079 0008 474E             		movea.l	(Go_PSGIndex).l,a0
00085792 5340                       		subq.w	#1,d0
00085794 E548                       		lsl.w	#2,d0
00085796 2070 0000                  		movea.l	(a0,d0.w),a0
0008579A 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0008579E 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000857A2 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000857A6 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000857AA 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
000857AC 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
000857B0 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
000857B2                            ; loc_72960:
000857B2                            @gotflutter:
000857B2 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
000857B4 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
000857B8 6500                       		blo.s	SetPSGVolume	; Branch if not
000857BA 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
000857BC                            ; End of function PSGUpdateVolFX
000857BC                            
000857BC                            
000857BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857BC                            
000857BC                            ; sub_7296A:
000857BC                            SetPSGVolume:
000857BC 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000857C0 6600                       		bne.s	locret_7298A	; Return if so
000857C2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000857C6 6600                       		bne.s	locret_7298A	; Return if so
000857C8 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
000857CC 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000857CE                            ; loc_7297C:
000857CE                            PSGSendVolume:
000857CE 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000857D2 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000857D6 13C6 00C0 0011             		move.b	d6,(psg_input).l
000857DC                            
000857DC                            locret_7298A:
000857DC 4E75                       		rts	
000857DE                            ; ===========================================================================
000857DE                            ; loc_7298C: PSGCheckNoteFill:
000857DE                            PSGCheckNoteTimeout:
000857DE 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
000857E2 67EA                       		beq.s	PSGSendVolume			; Branch if not
000857E4 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
000857E8 66E4                       		bne.s	PSGSendVolume			; Branch if not
000857EA 4E75                       		rts	
000857EC                            ; End of function SetPSGVolume
000857EC                            
000857EC                            ; ===========================================================================
000857EC                            ; loc_7299A: FlutterDone:
000857EC                            VolEnvHold:
000857EC 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
000857F0 4E75                       		rts	
000857F2                            
000857F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857F2                            
000857F2                            ; sub_729A0:
000857F2                            PSGNoteOff:
000857F2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000857F6 6600                       		bne.s	locret_729B4	; Return if so
000857F8                            ; loc_729A6:
000857F8                            SendPSGNoteOff:
000857F8 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000857FC 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085800 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085806                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00085806                            		; risk of music accidentally playing noise because it can't detect if
00085806                            		; the PSG4/noise channel needs muting on track initialisation.
00085806                            		; S&K's driver fixes it by doing this:
00085806 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
0008580A 6600                       		bne.s	locret_729B4
0008580C 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00085814                            
00085814                            locret_729B4:
00085814 4E75                       		rts	
00085816                            ; End of function PSGNoteOff
00085816                            
00085816                            
00085816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085816                            
00085816                            ; sub_729B6:
00085816                            PSGSilenceAll:
00085816 41F9 00C0 0011             		lea	(psg_input).l,a0
0008581C 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085820 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00085824 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00085828 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
0008582C 4E75                       		rts	
0008582E                            ; End of function PSGSilenceAll
0008582E                            
0008582E                            ; ===========================================================================
0008582E                            ; word_729CE:
0008582E                            PSGFrequencies:
0008582E 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
0008583E 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
0008584E 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
0008585E 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
0008586E 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
0008587E 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
0008588E 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
0008589E 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
000858AE 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
000858BA                            
000858BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858BA                            
000858BA                            ; sub_72A5A:
000858BA                            CoordFlag:
000858BA 0445 00E0                  		subi.w	#$E0,d5
000858BE E54D                       		lsl.w	#2,d5
000858C0 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
000858C4                            ; End of function CoordFlag
000858C4                            
000858C4                            ; ===========================================================================
000858C4                            ; loc_72A64:
000858C4                            coordflagLookup:
000858C4 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000858C8                            ; ===========================================================================
000858C8 6000 0000                  		bra.w	cfDetune		; $E1
000858CC                            ; ===========================================================================
000858CC 6000 0000                  		bra.w	cfSetCommunication	; $E2
000858D0                            ; ===========================================================================
000858D0 6000 0000                  		bra.w	cfJumpReturn		; $E3
000858D4                            ; ===========================================================================
000858D4 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
000858D8                            ; ===========================================================================
000858D8 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
000858DC                            ; ===========================================================================
000858DC 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
000858E0                            ; ===========================================================================
000858E0 6000 0000                  		bra.w	cfHoldNote		; $E7
000858E4                            ; ===========================================================================
000858E4 6000 0000                  		bra.w	cfNoteTimeout		; $E8
000858E8                            ; ===========================================================================
000858E8 6000 0000                  		bra.w	cfChangeTransposition	; $E9
000858EC                            ; ===========================================================================
000858EC 6000 0000                  		bra.w	cfSetTempo		; $EA
000858F0                            ; ===========================================================================
000858F0 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
000858F4                            ; ===========================================================================
000858F4 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
000858F8                            ; ===========================================================================
000858F8 6000 0000                  		bra.w	cfClearPush		; $ED
000858FC                            ; ===========================================================================
000858FC 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085900                            ; ===========================================================================
00085900 6000 0000                  		bra.w	cfSetVoice		; $EF
00085904                            ; ===========================================================================
00085904 6000 0000                  		bra.w	cfModulation		; $F0
00085908                            ; ===========================================================================
00085908 6000 0000                  		bra.w	cfEnableModulation	; $F1
0008590C                            ; ===========================================================================
0008590C 6000 0000                  		bra.w	cfStopTrack		; $F2
00085910                            ; ===========================================================================
00085910 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00085914                            ; ===========================================================================
00085914 6000 0000                  		bra.w	cfDisableModulation	; $F4
00085918                            ; ===========================================================================
00085918 6000 0000                  		bra.w	cfSetPSGTone		; $F5
0008591C                            ; ===========================================================================
0008591C 6000 0000                  		bra.w	cfJumpTo		; $F6
00085920                            ; ===========================================================================
00085920 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00085924                            ; ===========================================================================
00085924 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00085928                            ; ===========================================================================
00085928 6000 0000                  		bra.w	cfOpF9			; $F9
0008592C                            ; ===========================================================================
0008592C                            ; loc_72ACC:
0008592C                            cfPanningAMSFMS:
0008592C 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
0008592E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085932 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085934 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085938 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0008593C 8200                       		or.b	d0,d1			; Mask in new value
0008593E 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085942 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085946 6000 FC20                  		bra.w	WriteFMIorIIMain
0008594A                            ; ===========================================================================
0008594A                            
0008594A                            locret_72AEA:
0008594A 4E75                       		rts	
0008594C                            ; ===========================================================================
0008594C                            ; loc_72AEC: cfAlterNotes:
0008594C                            cfDetune:
0008594C 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085950 4E75                       		rts	
00085952                            ; ===========================================================================
00085952                            ; loc_72AF2: cfUnknown1:
00085952                            cfSetCommunication:
00085952 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085956 4E75                       		rts	
00085958                            ; ===========================================================================
00085958                            ; loc_72AF8:
00085958                            cfJumpReturn:
00085958 7000                       		moveq	#0,d0
0008595A 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
0008595E 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085962 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
0008596A 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
0008596C 5800                       		addq.b	#4,d0			; Actually 'pop' value
0008596E 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085972 4E75                       		rts	
00085974                            ; ===========================================================================
00085974                            ; loc_72B14:
00085974                            cfFadeInToPrevious:
00085974 204E                       		movea.l	a6,a0
00085976 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
0008597A 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
0008597E                            ; loc_72B1E:
0008597E                            @restoreramloop:
0008597E 20D9                       		move.l	(a1)+,(a0)+
00085980 51C8 FFFC                  		dbf	d0,@restoreramloop
00085984                            
00085984 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
0008598A 264D                       		movea.l	a5,a3
0008598C 1C3C 0028                  		move.b	#$28,d6
00085990 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085994 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085996 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0008599A                            ; loc_72B3A:
0008599A                            @fmloop:
0008599A 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0008599E 6700                       		beq.s	@nextfm		; Branch if not
000859A0 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000859A4 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
000859A8 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000859AC 6600                       		bne.s	@nextfm		; Branch if yes
000859AE 7000                       		moveq	#0,d0
000859B0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
000859B4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000859B8 4EBA 0000                  		jsr	SetVoice(pc)
000859BC                            ; loc_72B5C:
000859BC                            @nextfm:
000859BC DAFC 0030                  		adda.w	#TrackSz,a5
000859C0 51CF FFD8                  		dbf	d7,@fmloop
000859C4                            
000859C4 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000859C6                            ; loc_72B66:
000859C6                            @psgloop:
000859C6 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000859CA 6700                       		beq.s	@nextpsg	; Branch if not
000859CC 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000859D0 4EBA FE20                  		jsr	PSGNoteOff(pc)
000859D4 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
000859D8                            ; loc_72B78:
000859D8                            @nextpsg:
000859D8 DAFC 0030                  		adda.w	#TrackSz,a5
000859DC 51CF FFE8                  		dbf	d7,@psgloop
000859E0                            		
000859E0 2A4B                       		movea.l	a3,a5
000859E2 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
000859E8 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
000859EE 422E 0027                  		clr.b	f_1up_playing(a6)
000859F2 33FC 0000 00A1 1100        		startZ80
000859FA 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
000859FC 4E75                       		rts	
000859FE                            ; ===========================================================================
000859FE                            ; loc_72B9E:
000859FE                            cfSetTempoDivider:
000859FE 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00085A02 4E75                       		rts	
00085A04                            ; ===========================================================================
00085A04                            ; loc_72BA4: cfSetVolume:
00085A04                            cfChangeFMVolume:
00085A04 101C                       		move.b	(a4)+,d0		; Get parameter
00085A06 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085A0A 6000 0000                  		bra.w	SendVoiceTL
00085A0E                            ; ===========================================================================
00085A0E                            ; loc_72BAE: cfPreventAttack:
00085A0E                            cfHoldNote:
00085A0E 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00085A12 4E75                       		rts	
00085A14                            ; ===========================================================================
00085A14                            ; loc_72BB4: cfNoteFill
00085A14                            cfNoteTimeout:
00085A14 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085A18 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085A1C 4E75                       		rts	
00085A1E                            ; ===========================================================================
00085A1E                            ; loc_72BBE: cfAddKey:
00085A1E                            cfChangeTransposition:
00085A1E 101C                       		move.b	(a4)+,d0		; Get parameter
00085A20 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00085A24 4E75                       		rts	
00085A26                            ; ===========================================================================
00085A26                            ; loc_72BC6:
00085A26                            cfSetTempo:
00085A26 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085A2A 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085A2E 4E75                       		rts	
00085A30                            ; ===========================================================================
00085A30                            ; loc_72BD0: cfSetTempoMod:
00085A30                            cfSetTempoDividerAll:
00085A30 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085A34 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085A36 7230                       		moveq	#TrackSz,d1
00085A38 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085A3A                            ; loc_72BDA:
00085A3A                            @trackloop:
00085A3A 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085A3E D0C1                       		adda.w	d1,a0
00085A40 51CA FFF8                  		dbf	d2,@trackloop
00085A44                            
00085A44 4E75                       		rts	
00085A46                            ; ===========================================================================
00085A46                            ; loc_72BE6: cfChangeVolume:
00085A46                            cfChangePSGVolume:
00085A46 101C                       		move.b	(a4)+,d0		; Get volume change
00085A48 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085A4C 4E75                       		rts	
00085A4E                            ; ===========================================================================
00085A4E                            ; loc_72BEE:
00085A4E                            cfClearPush:
00085A4E 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085A52 4E75                       		rts	
00085A54                            ; ===========================================================================
00085A54                            ; loc_72BF4:
00085A54                            cfStopSpecialFM4:
00085A54 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085A58 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085A5C 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085A60 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085A64 6B00                       		bmi.s	@locexit					; Branch if yes
00085A66 264D                       		movea.l	a5,a3
00085A68 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085A6C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085A70 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085A74 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085A78 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085A7C 4EBA 0000                  		jsr	SetVoice(pc)
00085A80 2A4B                       		movea.l	a3,a5
00085A82                            ; loc_72C22:
00085A82                            @locexit:
00085A82 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085A84 4E75                       		rts	
00085A86                            ; ===========================================================================
00085A86                            ; loc_72C26:
00085A86                            cfSetVoice:
00085A86 7000                       		moveq	#0,d0
00085A88 101C                       		move.b	(a4)+,d0		; Get new voice
00085A8A 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085A8E 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085A92 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085A96 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085A9A 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085A9E 6700                       		beq.s	SetVoice		; If yes, branch
00085AA0 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085AA4 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085AA8 6B00                       		bmi.s	SetVoice		; If yes, branch
00085AAA 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085AAE                            
00085AAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085AAE                            
00085AAE                            ; sub_72C4E:
00085AAE                            SetVoice:
00085AAE 5340                       		subq.w	#1,d0
00085AB0 6B00                       		bmi.s	@havevoiceptr
00085AB2 323C 0019                  		move.w	#25,d1
00085AB6                            ; loc_72C56:
00085AB6                            @voicemultiply:
00085AB6 D2C1                       		adda.w	d1,a1
00085AB8 51C8 FFFC                  		dbf	d0,@voicemultiply
00085ABC                            ; loc_72C5C:
00085ABC                            @havevoiceptr:
00085ABC 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085ABE 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085AC2 1801                       		move.b	d1,d4
00085AC4 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085AC8 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085ACC 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085AD0 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085AD2                            ; loc_72C72:
00085AD2                            @sendvoiceloop:
00085AD2 101A                       		move.b	(a2)+,d0
00085AD4 1219                       		move.b	(a1)+,d1
00085AD6 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085ADA 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085ADE                            
00085ADE 7A03                       		moveq	#3,d5
00085AE0 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085AE4 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085AE8 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085AEC                            ; loc_72C8C:
00085AEC                            @sendtlloop:
00085AEC 101A                       		move.b	(a2)+,d0
00085AEE 1219                       		move.b	(a1)+,d1
00085AF0 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085AF2 6400                       		bcc.s	@sendtl		; Branch if not
00085AF4 D203                       		add.b	d3,d1		; Include additional attenuation
00085AF6                            ; loc_72C96:
00085AF6                            @sendtl:
00085AF6 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085AFA 51CD FFF0                  		dbf	d5,@sendtlloop
00085AFE                            		
00085AFE 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085B02 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085B06 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085B0A                            
00085B0A                            locret_72CAA:
00085B0A 4E75                       		rts	
00085B0C                            ; End of function SetVoice
00085B0C                            
00085B0C                            ; ===========================================================================
00085B0C                            ; byte_72CAC:
00085B0C 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085B14                            
00085B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B14                            
00085B14                            ; sub_72CB4:
00085B14                            SendVoiceTL:
00085B14 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085B18 6600                       		bne.s	@locret		; Return if so
00085B1A 7000                       		moveq	#0,d0
00085B1C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085B20 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085B24 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085B28 6700                       		beq.s	@gotvoiceptr
00085B2A                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085B2A                            		; of a6!
00085B2A 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085B2E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085B32 6B00                       		bmi.s	@gotvoiceptr
00085B34 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085B38                            ; loc_72CD8:
00085B38                            @gotvoiceptr:
00085B38 5340                       		subq.w	#1,d0
00085B3A 6B00                       		bmi.s	@gotvoice
00085B3C 323C 0019                  		move.w	#25,d1
00085B40                            ; loc_72CE0:
00085B40                            @voicemultiply:
00085B40 D2C1                       		adda.w	d1,a1
00085B42 51C8 FFFC                  		dbf	d0,@voicemultiply
00085B46                            ; loc_72CE6:
00085B46                            @gotvoice:
00085B46 D2FC 0015                  		adda.w	#21,a1				; Want TL
00085B4A 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085B4E 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085B52 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085B56 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085B5A 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085B5E 6B00                       		bmi.s	@locret				; If negative, stop
00085B60 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085B62                            ; loc_72D02:
00085B62                            @sendtlloop:
00085B62 101A                       		move.b	(a2)+,d0
00085B64 1219                       		move.b	(a1)+,d1
00085B66 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085B68 6400                       		bcc.s	@senttl		; Branch if not
00085B6A D203                       		add.b	d3,d1		; Include additional attenuation
00085B6C 6500                       		bcs.s	@senttl		; Branch on overflow
00085B6E 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085B72                            ; loc_72D12:
00085B72                            @senttl:
00085B72 51CD FFEE                  		dbf	d5,@sendtlloop
00085B76                            ; locret_72D16:
00085B76                            @locret:
00085B76 4E75                       		rts	
00085B78                            ; End of function SendVoiceTL
00085B78                            
00085B78                            ; ===========================================================================
00085B78                            ; byte_72D18:
00085B78                            FMInstrumentOperatorTable:
00085B78 30                         		dc.b  $30		; Detune/multiple operator 1
00085B79 38                         		dc.b  $38		; Detune/multiple operator 3
00085B7A 34                         		dc.b  $34		; Detune/multiple operator 2
00085B7B 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085B7C 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085B7D 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085B7E 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085B7F 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085B80 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085B81 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085B82 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085B83 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085B84 70                         		dc.b  $70		; Secondary decay rate operator 1
00085B85 78                         		dc.b  $78		; Secondary decay rate operator 3
00085B86 74                         		dc.b  $74		; Secondary decay rate operator 2
00085B87 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085B88 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085B89 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085B8A 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085B8B 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085B8C                            FMInstrumentOperatorTable_End
00085B8C                            ; byte_72D2C:
00085B8C                            FMInstrumentTLTable:
00085B8C 40                         		dc.b  $40		; Total level operator 1
00085B8D 48                         		dc.b  $48		; Total level operator 3
00085B8E 44                         		dc.b  $44		; Total level operator 2
00085B8F 4C                         		dc.b  $4C		; Total level operator 4
00085B90                            FMInstrumentTLTable_End
00085B90                            ; ===========================================================================
00085B90                            ; loc_72D30:
00085B90                            cfModulation:
00085B90 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085B94 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085B98 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085B9C 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085BA0 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085BA4 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085BA6 E208                       		lsr.b	#1,d0				; ... divided by 2...
00085BA8 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085BAC 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085BB0 4E75                       		rts	
00085BB2                            ; ===========================================================================
00085BB2                            ; loc_72D52:
00085BB2                            cfEnableModulation:
00085BB2 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085BB6 4E75                       		rts	
00085BB8                            ; ===========================================================================
00085BB8                            ; loc_72D58:
00085BB8                            cfStopTrack:
00085BB8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085BBC 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085BC0 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085BC4 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085BC6 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085BCA 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00085BCE 4EBA F980                  		jsr	FMNoteOff(pc)
00085BD2 6000                       		bra.s	@stoppedchannel
00085BD4                            ; ===========================================================================
00085BD4                            ; loc_72D74:
00085BD4                            @stoppsg:
00085BD4 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085BD8                            ; loc_72D78:
00085BD8                            @stoppedchannel:
00085BD8 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085BDC 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085BE0 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085BE2 7000                       		moveq	#0,d0
00085BE4 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085BE8 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085BEA 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085BEE 264D                       		movea.l	a5,a3
00085BF0 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085BF4 6600                       		bne.s	@getpointer		; Branch if not
00085BF6 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085BFA 6A00                       		bpl.s	@getpointer		; Branch if not
00085BFC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085C00 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00085C04 6000                       		bra.s	@gotpointer
00085C06                            ; ===========================================================================
00085C06                            ; loc_72DA8:
00085C06                            @getpointer:
00085C06 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085C08 E508                       		lsl.b	#2,d0
00085C0A 2A70 0000                  		movea.l	(a0,d0.w),a5
00085C0E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085C10 6A00                       		bpl.s	@novoiceupd		; Branch if not
00085C12 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00085C16                            ; loc_72DB8:
00085C16                            @gotpointer:
00085C16 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085C1A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085C1E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085C22 4EBA FE8A                  		jsr	SetVoice(pc)
00085C26                            ; loc_72DC8:
00085C26                            @novoiceupd:
00085C26 2A4B                       		movea.l	a3,a5
00085C28 6000                       		bra.s	@locexit
00085C2A                            ; ===========================================================================
00085C2A                            ; loc_72DCC:
00085C2A                            @getpsgptr:
00085C2A 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085C2E 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085C30 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085C32 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00085C36 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085C38 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085C3C 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085C3E                            ; loc_72DE0:
00085C3E                            @getchannelptr:
00085C3E 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085C42 E608                       		lsr.b	#3,d0
00085C44 2070 0000                  		movea.l	(a0,d0.w),a0
00085C48                            ; loc_72DEA:
00085C48                            @gotchannelptr:
00085C48 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085C4C 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085C50 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00085C56 6600                       		bne.s	@locexit			; Branch if not
00085C58 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085C60                            ; loc_72E02:
00085C60                            @locexit:
00085C60 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085C62 4E75                       		rts	
00085C64                            ; ===========================================================================
00085C64                            ; loc_72E06:
00085C64                            cfSetPSGNoise:
00085C64 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085C6A 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085C6E 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085C72 6600                       		bne.s	@locret				; Return if yes
00085C74 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085C7C                            ; locret_72E1E:
00085C7C                            @locret:
00085C7C 4E75                       		rts	
00085C7E                            ; ===========================================================================
00085C7E                            ; loc_72E20:
00085C7E                            cfDisableModulation:
00085C7E 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085C82 4E75                       		rts	
00085C84                            ; ===========================================================================
00085C84                            ; loc_72E26:
00085C84                            cfSetPSGTone:
00085C84 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085C88 4E75                       		rts	
00085C8A                            ; ===========================================================================
00085C8A                            ; loc_72E2C:
00085C8A                            cfJumpTo:
00085C8A 101C                       		move.b	(a4)+,d0	; High byte of offset
00085C8C E148                       		lsl.w	#8,d0		; Shift it into place
00085C8E 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085C90 D8C0                       		adda.w	d0,a4		; Add to current position
00085C92 534C                       		subq.w	#1,a4		; Put back one byte
00085C94 4E75                       		rts	
00085C96                            ; ===========================================================================
00085C96                            ; loc_72E38:
00085C96                            cfRepeatAtPos:
00085C96 7000                       		moveq	#0,d0
00085C98 101C                       		move.b	(a4)+,d0			; Loop index
00085C9A 121C                       		move.b	(a4)+,d1			; Repeat count
00085C9C 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085CA0 6600                       		bne.s	@loopexists			; Branch if yes
00085CA2 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085CA6                            ; loc_72E48:
00085CA6                            @loopexists:
00085CA6 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085CAA 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085CAC 544C                       		addq.w	#2,a4				; Skip target address
00085CAE 4E75                       		rts	
00085CB0                            ; ===========================================================================
00085CB0                            ; loc_72E52:
00085CB0                            cfJumpToGosub:
00085CB0 7000                       		moveq	#0,d0
00085CB2 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085CB6 5900                       		subq.b	#4,d0				; Add space for another target
00085CB8 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085CBC 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085CC0 60C8                       		bra.s	cfJumpTo
00085CC2                            ; ===========================================================================
00085CC2                            ; loc_72E64:
00085CC2                            cfOpF9:
00085CC2 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085CC6 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085CCA 4EBA F8B4                  		jsr	WriteFMI(pc)
00085CCE 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085CD2 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085CD6 6000 F8A8                  		bra.w	WriteFMI
00085CDA                            ; ===========================================================================
00085CDA                            
00085CDA                            Kos_Z80:
00085CDA                            		incbin	"sound\z80.bin", 0, $15
00085CEF 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085CF0                            		incbin	"sound\z80.bin", $16, 6
00085CF6 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085CF7                            		incbin	"sound\z80.bin", $1D, $93
00085D8A 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085D8C                            		incbin	"sound\z80.bin", $B2, 1
00085D8D 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085D8F                            		incbin	"sound\z80.bin", $B5, $16AB
00087430                            		even
00087430                            
00087430                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00088754 00                         		even
00088754                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
00089FDC                            		even
00089FDC                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
0009195C 00                         		even
0009195C                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
00093170 00                         		even
00093170                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00093F16                            		even
00093F16                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000952CE                            		even
000952CE                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095BC6 00                         		even
00095BC6                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095BC6                            extralifejingle_Header:
00095BC6                            	smpsHeaderStartSong 1
00095BC8 0703                       	smpsHeaderChan      $07, $03
00095BCA 0100                       	smpsHeaderTempo     $01, $00
00095BCC                            
00095BD0 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095BD4 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095BD8 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095BDC 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095BE0 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095BE4 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095BFA                            
00095BFA                            ; DAC Data
00095BFA                            extralifejingle_DAC:
00095BFA 807F 55                    	dc.b	nRst, $7F, $55
00095BFD E4                         	smpsFade
00095BFE                            ; PSG1 Data
00095BFE                            extralifejingle_PSG1:
00095BFE                            ; PSG2 Data
00095BFE                            extralifejingle_PSG2:
00095BFE                            ; PSG3 Data
00095BFE                            extralifejingle_PSG3:
00095BFE F2                         	smpsStop
00095BFF                            
00095BFF                            ; FM1 Data
00095BFF                            extralifejingle_FM1:
00095BFF EF00                       	smpsSetvoice        $00
00095C01 E616                       	smpsAlterVol        $16
00095C03 E0C0                       	smpsPan             panCenter, $00
00095C05 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095C11 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
00095C15 F2                         	smpsStop
00095C16                            
00095C16                            ; FM2 Data
00095C16                            extralifejingle_FM2:
00095C16 EF01                       	smpsSetvoice        $01
00095C18 E616                       	smpsAlterVol        $16
00095C1A E0C0                       	smpsPan             panCenter, $00
00095C1C B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095C28 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095C2C F2                         	smpsStop
00095C2D                            
00095C2D                            ; FM3 Data
00095C2D                            extralifejingle_FM3:
00095C2D EF01                       	smpsSetvoice        $01
00095C2F E616                       	smpsAlterVol        $16
00095C31 E0C0                       	smpsPan             panCenter, $00
00095C33 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095C3F B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095C43 F2                         	smpsStop
00095C44                            
00095C44                            ; FM4 Data
00095C44                            extralifejingle_FM4:
00095C44 EF02                       	smpsSetvoice        $02
00095C46 E0C0                       	smpsPan             panCenter, $00
00095C48 8001                       	dc.b	nRst, $01
00095C4A E616                       	smpsAlterVol        $16
00095C4C BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095C58 C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095C5C F2                         	smpsStop
00095C5D                            
00095C5D                            ; FM5 Data
00095C5D                            extralifejingle_FM5:
00095C5D EF03                       	smpsSetvoice        $03
00095C5F E602                       	smpsAlterVol        $02
00095C61 E0C0                       	smpsPan             panCenter, $00
00095C63 8001                       	dc.b	nRst, $01
00095C65 EF05                       	smpsSetvoice        $05
00095C67 E60A                       	smpsAlterVol        $0A
00095C69 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095C75 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095C81 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095C8D C1C4 80                    	dc.b	nE5, nG5, nRst
00095C90 F2                         	smpsStop
00095C91                            
00095C91                            ; FM6 Data
00095C91                            extralifejingle_FM6:
00095C91 EF04                       	smpsSetvoice        $04
00095C93 E607                       	smpsAlterVol        $07
00095C95 E0C0                       	smpsPan             panCenter, $00
00095C97 8001                       	dc.b	nRst, $01
00095C99 EF06                       	smpsSetvoice        $06
00095C9B E6F9                       	smpsAlterVol        $F9
00095C9D A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095CA4 F2                         	smpsStop
00095CA5                            
00095CA5                            extralifejingle_Voices:
00095CA5                            ;	Voice $00
00095CA5                            ;	$3A
00095CA5                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095CA5                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095CA5                            	smpsVcAlgorithm     $02
00095CA5                            	smpsVcFeedback      $07
00095CA5                            	smpsVcUnusedBits    $00
00095CA5                            	smpsVcDetune        $03, $07, $07, $03
00095CA5                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095CA5                            	smpsVcRateScale     $00, $00, $00, $00
00095CA5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095CA5                            	smpsVcAmpMod        $00, $00, $00, $00
00095CA5                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095CA5                            	smpsVcDecayRate2    $00, $00, $00, $00
00095CA5                            	smpsVcDecayLevel    $00, $00, $00, $00
00095CA5                            	smpsVcReleaseRate   $05, $03, $03, $03
00095CBE                            
00095CBE                            ;	Voice $01
00095CBE                            ;	$3A
00095CBE                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095CBE                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095CBE                            	smpsVcAlgorithm     $02
00095CBE                            	smpsVcFeedback      $07
00095CBE                            	smpsVcUnusedBits    $00
00095CBE                            	smpsVcDetune        $03, $07, $07, $03
00095CBE                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095CBE                            	smpsVcRateScale     $00, $00, $00, $00
00095CBE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095CBE                            	smpsVcAmpMod        $00, $00, $00, $00
00095CBE                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095CBE                            	smpsVcDecayRate2    $00, $00, $00, $00
00095CBE                            	smpsVcDecayLevel    $00, $00, $00, $00
00095CBE                            	smpsVcReleaseRate   $05, $03, $03, $03
00095CD7                            
00095CD7                            ;	Voice $02
00095CD7                            ;	$3A
00095CD7                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095CD7                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095CD7                            	smpsVcAlgorithm     $02
00095CD7                            	smpsVcFeedback      $07
00095CD7                            	smpsVcUnusedBits    $00
00095CD7                            	smpsVcDetune        $03, $07, $07, $03
00095CD7                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095CD7                            	smpsVcRateScale     $00, $00, $00, $00
00095CD7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095CD7                            	smpsVcAmpMod        $00, $00, $00, $00
00095CD7                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095CD7                            	smpsVcDecayRate2    $00, $00, $00, $00
00095CD7                            	smpsVcDecayLevel    $00, $00, $00, $00
00095CD7                            	smpsVcReleaseRate   $05, $03, $03, $03
00095CF0                            
00095CF0                            ;	Voice $03
00095CF0                            ;	$00
00095CF0                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095CF0                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095CF0                            	smpsVcAlgorithm     $00
00095CF0                            	smpsVcFeedback      $00
00095CF0                            	smpsVcUnusedBits    $00
00095CF0                            	smpsVcDetune        $00, $00, $00, $00
00095CF0                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095CF0                            	smpsVcRateScale     $00, $00, $00, $00
00095CF0                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095CF0                            	smpsVcAmpMod        $00, $00, $00, $00
00095CF0                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095CF0                            	smpsVcDecayRate2    $00, $00, $00, $00
00095CF0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095CF0                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095D09                            
00095D09                            ;	Voice $04
00095D09                            ;	$03
00095D09                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095D09                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095D09                            	smpsVcAlgorithm     $03
00095D09                            	smpsVcFeedback      $00
00095D09                            	smpsVcUnusedBits    $00
00095D09                            	smpsVcDetune        $03, $04, $04, $06
00095D09                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095D09                            	smpsVcRateScale     $00, $00, $00, $00
00095D09                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095D09                            	smpsVcAmpMod        $00, $00, $00, $00
00095D09                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095D09                            	smpsVcDecayRate2    $06, $04, $00, $01
00095D09                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095D09                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095D22                            
00095D22                            ;	Voice $05
00095D22                            ;	$34
00095D22                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095D22                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095D22                            	smpsVcAlgorithm     $04
00095D22                            	smpsVcFeedback      $06
00095D22                            	smpsVcUnusedBits    $00
00095D22                            	smpsVcDetune        $07, $00, $07, $03
00095D22                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095D22                            	smpsVcRateScale     $00, $01, $00, $02
00095D22                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095D22                            	smpsVcAmpMod        $00, $00, $00, $00
00095D22                            	smpsVcDecayRate1    $08, $07, $07, $14
00095D22                            	smpsVcDecayRate2    $00, $00, $00, $00
00095D22                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095D22                            	smpsVcReleaseRate   $07, $07, $04, $06
00095D3B                            
00095D3B                            ;	Voice $06
00095D3B                            ;	$30
00095D3B                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095D3B                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095D3B                            	smpsVcAlgorithm     $00
00095D3B                            	smpsVcFeedback      $06
00095D3B                            	smpsVcUnusedBits    $00
00095D3B                            	smpsVcDetune        $00, $00, $00, $00
00095D3B                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095D3B                            	smpsVcRateScale     $01, $00, $00, $02
00095D3B                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095D3B                            	smpsVcAmpMod        $00, $00, $00, $00
00095D3B                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095D3B                            	smpsVcDecayRate2    $08, $05, $18, $08
00095D3B                            	smpsVcDecayLevel    $01, $00, $00, $06
00095D3B                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00095D54                            
00095D54                            
00095D54                            		even
00095D54                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000965AC 00                         		even
000965AC                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096ACC                            		even
00096ACC                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096D8E 00                         		even
00096D8E                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097BE6                            		even
00097BE6                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00097E32 00                         		even
00097E32                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00098168 00                         		even
00098168                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00098314 00                         		even
00098314                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
00098522 00                         		even
00098522                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
00098806 00                         		even
00098806                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00098F36 00                         		even
00098F36                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00099004                            		even
00099004                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
00099472 00                         		even
00099472                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
00099F68                            		even
00099F68                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AB4A                            		even
0009AB4A                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009BE50 00                         		even
0009BE50                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009BE50                            PasswordEntry_Header:
0009BE50                            	smpsHeaderStartSong 3
0009BE52 0603                       	smpsHeaderChan      $06, $03
0009BE54 0105                       	smpsHeaderTempo     $01, $05
0009BE56                            
0009BE5A 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009BE5E 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009BE62 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009BE66 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009BE6A 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009BE80                            
0009BE80                            ; FM1 Data
0009BE80                            PasswordEntry_FM1:
0009BE80 EF00                       	smpsSetvoice        $00
0009BE87                            
0009BE87                            PasswordEntry_Jump00:
0009BE87 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009BE93 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009BE9F C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009BEAB C918 CB                    	dc.b	nC6, $18, nD6
0009BEAE F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009BEB1                            
0009BEB1                            ; FM2 Data
0009BEB1                            PasswordEntry_FM2:
0009BEB1 EF01                       	smpsSetvoice        $01
0009BEB3                            
0009BEB3                            PasswordEntry_Jump03:
0009BEB3 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009BEBF AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009BECB AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009BED7 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009BEE1 F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009BEE4                            
0009BEE4                            ; FM3 Data
0009BEE4                            PasswordEntry_FM3:
0009BEE4 E080                       	smpsPan             panLeft, $00
0009BEE6 EF02                       	smpsSetvoice        $02
0009BEE8                            
0009BEE8                            PasswordEntry_Jump02:
0009BEE8 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009BEF4 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009BF00 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009BF0C C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009BF18 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009BF24 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009BF30 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009BF3C C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009BF48 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009BF54 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BF60 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BF68 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009BF6B                            
0009BF6B                            ; FM4 Data
0009BF6B                            PasswordEntry_FM4:
0009BF6B E040                       	smpsPan             panRight, $00
0009BF6D EF02                       	smpsSetvoice        $02
0009BF6F                            
0009BF6F                            PasswordEntry_Jump01:
0009BF6F C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009BF7B BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009BF87 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009BF93 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009BF9F BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009BFAB BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009BFB7 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BFC3 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009BFCF BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009BFDB BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BFE7 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BFEF F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009BFF2                            
0009BFF2                            ; FM5 Data
0009BFF2                            PasswordEntry_FM5:
0009BFF2 EF00                       	smpsSetvoice        $00
0009BFF4 E1FB                       	smpsAlterNote       $FB
0009BFF6 800C                       	dc.b	nRst, $0C
0009BFF8 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009BFFB                            
0009BFFB                            ; PSG1 Data
0009BFFB                            PasswordEntry_PSG1:
0009BFFB C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C007 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009C013 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C01F CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009C02B C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009C037 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009C043 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009C047 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009C04A                            
0009C04A                            ; PSG2 Data
0009C04A                            PasswordEntry_PSG2:
0009C04A E1FF                       	smpsAlterNote       $FF
0009C04C 800C                       	dc.b	nRst, $0C
0009C04E F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009C051                            
0009C051                            ; PSG3 Data
0009C051                            PasswordEntry_PSG3:
0009C051 F502                       	smpsPSGvoice        fTone_02
0009C053 F3E7                       	smpsPSGform         $E7
0009C055 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C061 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C06D C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C074 F503                       	smpsPSGvoice        fTone_03
0009C076 C5                         	dc.b	nAb5
0009C077 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C07A                            
0009C07A                            ; DAC Data
0009C07A                            PasswordEntry_DAC:
0009C07A 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C086 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C08E F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C093 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C09F 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C0A7                            
0009C0A7                            PasswordEntry_Loop00:
0009C0A7 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C0B3 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C0BB F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C0C0 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C0CC 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C0D6 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C0D9                            
0009C0D9                            PasswordEntry_Voices:
0009C0D9                            ;	Voice $00
0009C0D9                            ;	$04
0009C0D9                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C0D9                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C0D9                            	smpsVcAlgorithm     $04
0009C0D9                            	smpsVcFeedback      $00
0009C0D9                            	smpsVcUnusedBits    $00
0009C0D9                            	smpsVcDetune        $00, $00, $00, $00
0009C0D9                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C0D9                            	smpsVcRateScale     $00, $00, $00, $00
0009C0D9                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C0D9                            	smpsVcAmpMod        $00, $00, $00, $00
0009C0D9                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C0D9                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C0D9                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C0D9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C0F2                            
0009C0F2                            ;	Voice $01
0009C0F2                            ;	$39
0009C0F2                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C0F2                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C0F2                            	smpsVcAlgorithm     $01
0009C0F2                            	smpsVcFeedback      $07
0009C0F2                            	smpsVcUnusedBits    $00
0009C0F2                            	smpsVcDetune        $00, $04, $06, $00
0009C0F2                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C0F2                            	smpsVcRateScale     $01, $01, $01, $00
0009C0F2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C0F2                            	smpsVcAmpMod        $00, $00, $00, $00
0009C0F2                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C0F2                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C0F2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C0F2                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C10B                            
0009C10B                            ;	Voice $02
0009C10B                            ;	$2C
0009C10B                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C10B                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C10B                            	smpsVcAlgorithm     $04
0009C10B                            	smpsVcFeedback      $05
0009C10B                            	smpsVcUnusedBits    $00
0009C10B                            	smpsVcDetune        $00, $02, $00, $04
0009C10B                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C10B                            	smpsVcRateScale     $00, $00, $00, $00
0009C10B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C10B                            	smpsVcAmpMod        $00, $00, $00, $00
0009C10B                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C10B                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C10B                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C10B                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C124                            
0009C124                            
0009C124                            		even		
0009C124                            ; ---------------------------------------------------------------------------
0009C124                            ; Sound	effect pointers
0009C124                            ; ---------------------------------------------------------------------------
0009C124                            SoundIndex:
0009C124 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009C128 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009C12C 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009C130 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009C134 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009C138 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009C13C 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009C140 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009C144 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009C148 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009C14C 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009C150 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009C154 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009C158 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009C15C 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009C160 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009C164 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009C168 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009C16C 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009C170 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009C174 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009C178 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009C17C 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009C180 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009C184 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009C188 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009C18C 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009C190 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009C194 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009C198 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009C19C 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009C1A0 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009C1A4 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009C1A8 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009C1AC 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009C1B0 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009C1B4 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009C1B8 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009C1BC 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009C1C0 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009C1C4 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009C1C8 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009C1CC 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009C1D0 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009C1D4 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009C1D8 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009C1DC 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009C1E0 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009C1E4                            ptr_sndend
0009C1E4                            ; ---------------------------------------------------------------------------
0009C1E4                            ; Special sound effect pointers
0009C1E4                            ; ---------------------------------------------------------------------------
0009C1E4                            SpecSoundIndex:
0009C1E4 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009C1E8 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009C1EC 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009C1F0 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009C1F4 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009C1F8 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009C1FC                            ptr_specend
0009C1FC                            SoundA0:	include	"sound/sfx/Jump.asm"
0009C1FC                            SndA0_Jump_Header:
0009C1FC                            	smpsHeaderStartSong 1
0009C1FE 01                         	smpsHeaderTempoSFX  $01
0009C1FF 01                         	smpsHeaderChanSFX   $01
0009C200                            
0009C206                            
0009C206                            ; PSG2 Data
0009C206                            SndA0_Jump_PSG2:
0009C206 F500                       	smpsPSGvoice        $00
0009C208 9E05                       	dc.b	nF2, $05
0009C20F A315                       	dc.b	nBb2, $15
0009C211 F2                         	smpsStop
0009C212                            
0009C212                            ; Song seems to not use any FM voices
0009C212                            SndA0_Jump_Voices:
0009C212                            SndA0_Jump_Voices:
0009C212                            		even
0009C212                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009C23C                            		even
0009C23C                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009C23C                            SndDF_Header:
0009C23C                            	smpsHeaderStartSong 3
0009C23E 01                         	smpsHeaderTempoSFX  $01
0009C23F 01                         	smpsHeaderChanSFX   $01
0009C240                            
0009C246                            
0009C246                            ; FM5 Data
0009C246                            SndDF_FM5:
0009C246 EF00                       	smpsSetvoice        $00
0009C248                            
0009C248                            SndDF_Loop00:
0009C248 F800 00                    	smpsCall            SndDF_Call00
0009C24B E905                       	smpsAlterPitch $05
0009C24D E608                       	smpsFMAlterVol      $08
0009C24F F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009C254 E9EC                       	smpsAlterPitch $EC
0009C256 E6E0                       	smpsFMAlterVol      $E0
0009C258 F2                         	smpsStop
0009C259                            
0009C259                            SndDF_Call00:
0009C259 9902                       	dc.b	nC2, $02
0009C25B E901                       	smpsAlterPitch $01
0009C25D F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009C262 E9F6                       	smpsAlterPitch $F6
0009C264 E3                         	smpsReturn
0009C265                            
0009C265                            SndDF_Voices:
0009C265                            ;	Voice $00
0009C265                            ;	$07
0009C265                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009C265                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009C265                            	smpsVcAlgorithm     $07
0009C265                            	smpsVcFeedback      $00
0009C265                            	smpsVcUnusedBits    $00
0009C265                            	smpsVcDetune        $00, $00, $00, $00
0009C265                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009C265                            	smpsVcRateScale     $00, $00, $00, $00
0009C265                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009C265                            	smpsVcAmpMod        $00, $00, $00, $00
0009C265                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C265                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C265                            	smpsVcDecayLevel    $01, $01, $01, $01
0009C265                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C27E                            		even
0009C27E                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009C2B0                            		even
0009C2B0                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009C2F4 00                         		even
0009C2F4                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009C2F4                            SndD2_Header:
0009C2F4                            	smpsHeaderStartSong 3
0009C2F6 01                         	smpsHeaderTempoSFX  $01
0009C2F7 01                         	smpsHeaderChanSFX   $01
0009C2F8                            
0009C2FE                            
0009C2FE                            ; FM4 Data
0009C2FE                            SndD2_FM4:
0009C2FE EF00                       	smpsSetvoice        $00
0009C305 C645                       	dc.b	nA5, $45
0009C307 F2                         	smpsStop
0009C308                            
0009C308                            SndD2_Voices:
0009C308                            ;	Voice $00
0009C308                            ;	$04
0009C308                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C308                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009C308                            	smpsVcAlgorithm     $04
0009C308                            	smpsVcFeedback      $00
0009C308                            	smpsVcUnusedBits    $00
0009C308                            	smpsVcDetune        $04, $00, $00, $02
0009C308                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009C308                            	smpsVcRateScale     $00, $00, $00, $00
0009C308                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C308                            	smpsVcAmpMod        $00, $00, $00, $00
0009C308                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C308                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C308                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C308                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C322 00                         		even
0009C322                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009C352                            		even
0009C352                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009C382                            		even
0009C382                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009C3B6                            		even
0009C3B6                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009C3C8                            		even
0009C3C8                            SoundAA:	include	"sound/sfx/Splash.asm"
0009C3C8                            SndA2_Header:
0009C3C8                            	smpsHeaderStartSong 3
0009C3CA 01                         	smpsHeaderTempoSFX  $01
0009C3CB 02                         	smpsHeaderChanSFX   $02
0009C3CC                            
0009C3D8                            
0009C3D8                            ; FM3 Data
0009C3D8                            SndA2_FM3:
0009C3D8 EF00                       	smpsSetvoice        $00
0009C3DF 8106                       	dc.b	nC0, $06
0009C3E1                            
0009C3E1                            SndA2_Loop00:
0009C3E1 810E                       	dc.b	nC0, $0E
0009C3E3 E60E                       	smpsAlterVol      $0E
0009C3E5 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009C3EA F2                         	smpsStop
0009C3EB                            
0009C3EB                            ; FM4 Data
0009C3EB                            SndA2_FM4:
0009C3EB EF01                       	smpsSetvoice        $01
0009C3ED A606 14                    	dc.b	nCs3, $06, $14
0009C3F0 F2                         	smpsStop
0009C3F1                            
0009C3F1                            SndA2_Voices:
0009C3F1                            ;	Voice $00
0009C3F1                            ;	$F9
0009C3F1                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009C3F1                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009C3F1                            	smpsVcAlgorithm     $01
0009C3F1                            	smpsVcFeedback      $07
0009C3F1                            	smpsVcUnusedBits    $03
0009C3F1                            	smpsVcDetune        $03, $01, $03, $02
0009C3F1                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C3F1                            	smpsVcRateScale     $00, $00, $00, $00
0009C3F1                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009C3F1                            	smpsVcAmpMod        $00, $00, $00, $00
0009C3F1                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C3F1                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C3F1                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C3F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C40A                            
0009C40A                            ;	Voice $01
0009C40A                            ;	$00
0009C40A                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009C40A                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009C40A                            	smpsVcAlgorithm     $00
0009C40A                            	smpsVcFeedback      $00
0009C40A                            	smpsVcUnusedBits    $00
0009C40A                            	smpsVcDetune        $00, $00, $00, $00
0009C40A                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009C40A                            	smpsVcRateScale     $00, $00, $03, $03
0009C40A                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009C40A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C40A                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009C40A                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009C40A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C40A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C424 00                         		even
0009C424                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009C424                            Sound_3E_Header:
0009C424                            	smpsHeaderStartSong 3
0009C426 01                         	smpsHeaderTempoSFX  $01
0009C427 01                         	smpsHeaderChanSFX   $01
0009C428                            
0009C42E                            
0009C42E                            ; FM5 Data
0009C42E                            Sound_3E_3F_40_41_FM5:
0009C42E EF00                       	smpsSetvoice        $00
0009C430 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C435 F2                         	smpsStop
0009C436                            
0009C436                            Sound_3E_Voices:
0009C436                            ;	Voice $00
0009C436                            ;	$0C
0009C436                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009C436                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009C436                            	smpsVcAlgorithm     $04
0009C436                            	smpsVcFeedback      $01
0009C436                            	smpsVcUnusedBits    $00
0009C436                            	smpsVcDetune        $03, $03, $02, $00
0009C436                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C436                            	smpsVcRateScale     $00, $00, $00, $00
0009C436                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009C436                            	smpsVcAmpMod        $00, $00, $00, $00
0009C436                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009C436                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009C436                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009C436                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C44F                            
0009C44F                            
0009C450 00                         		even
0009C450                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009C484                            		even
0009C484                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009C4BA                            		even
0009C4BA                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009C4BA                            Sound_70_Header:
0009C4BA                            	smpsHeaderStartSong 3
0009C4BC 01                         	smpsHeaderTempoSFX  $01
0009C4BD 02                         	smpsHeaderChanSFX   $02
0009C4BE                            
0009C4CA                            
0009C4CA                            ; FM5 Data
0009C4CA                            Sound_70_FM5:
0009C4CA EF00                       	smpsSetvoice        $00
0009C4CC 8001                       	dc.b	nRst, $01
0009C4D3 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009C4D7 F2                         	smpsStop
0009C4D8                            
0009C4D8                            ; PSG3 Data
0009C4D8                            Sound_70_PSG3:
0009C4D8 F500                       	smpsPSGvoice        sTone_0D
0009C4DA 800B                       	dc.b	nRst, $0B
0009C4DC F3E7                       	smpsPSGform         $E7
0009C4DE C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009C4E1                            
0009C4E1                            Sound_70_Loop00:
0009C4E1 02                         	dc.b	$02
0009C4E2 EC01                       	smpsPSGAlterVol     $01
0009C4E4 E7                         	dc.b	smpsNoAttack
0009C4E5 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C4EA F2                         	smpsStop
0009C4EB                            
0009C4EB                            Sound_70_Voices:
0009C4EB                            ;	Voice $00
0009C4EB                            ;	$FA
0009C4EB                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C4EB                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C4EB                            	smpsVcAlgorithm     $02
0009C4EB                            	smpsVcFeedback      $07
0009C4EB                            	smpsVcUnusedBits    $03
0009C4EB                            	smpsVcDetune        $00, $00, $00, $00
0009C4EB                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C4EB                            	smpsVcRateScale     $00, $00, $00, $00
0009C4EB                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C4EB                            	smpsVcAmpMod        $00, $00, $00, $00
0009C4EB                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C4EB                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C4EB                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C4EB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C504                            
0009C504                            
0009C504                            		even
0009C504                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C532                            		even
0009C532                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C564                            		even
0009C564                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C590                            		even
0009C590                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C5E0                            		even
0009C5E0                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C62A                            		even
0009C62A                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C686                            		even
0009C686                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C6B4                            		even
0009C6B4                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C6B4                            SpikesSFX_Header:
0009C6B4                            	smpsHeaderStartSong 3
0009C6B6 01                         	smpsHeaderTempoSFX  $01
0009C6B7 02                         	smpsHeaderChanSFX   $02
0009C6B8                            
0009C6C4                            
0009C6C4                            ; FM6 Data
0009C6C4                            SndB7_FM4:
0009C6C4 EF01                       	smpsSetvoice        $01
0009C6CB B105                       	dc.b	nC4, $05
0009C6CD F1                         	smpsModOn
0009C6CE E10A                       	smpsAlterNote       $0A
0009C6D0 E601                       	smpsAlterVol        $01
0009C6D2 F2                         	smpsStop
0009C6D3                            
0009C6D3                            ; FM5 Data
0009C6D3                            SndB7_FM5:
0009C6D3 8005                       	dc.b	nRst, $05			 
0009C6D5 EF00                       	smpsSetvoice        $00
0009C6D7 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C6DD F2                         	smpsStop
0009C6DE                            
0009C6DE                            SndB7_Voices:
0009C6DE                            ;	Voice $00
0009C6DE                            ;	$34
0009C6DE                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C6DE                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C6DE                            	smpsVcAlgorithm     $04
0009C6DE                            	smpsVcFeedback      $06
0009C6DE                            	smpsVcUnusedBits    $00
0009C6DE                            	smpsVcDetune        $0D, $00, $00, $00
0009C6DE                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C6DE                            	smpsVcRateScale     $00, $00, $00, $00
0009C6DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C6DE                            	smpsVcAmpMod        $00, $00, $00, $00
0009C6DE                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C6DE                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C6DE                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C6DE                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C6F7                            
0009C6F7                            ;	Voice $01
0009C6F7                            ;	$FA
0009C6F7                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C6F7                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C6F7                            	smpsVcAlgorithm     $02
0009C6F7                            	smpsVcFeedback      $07
0009C6F7                            	smpsVcUnusedBits    $03
0009C6F7                            	smpsVcDetune        $03, $01, $03, $02
0009C6F7                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C6F7                            	smpsVcRateScale     $00, $00, $00, $00
0009C6F7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C6F7                            	smpsVcAmpMod        $00, $00, $00, $00
0009C6F7                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C6F7                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C6F7                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C6F7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C710                            		even
0009C710                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009C74C                            		even
0009C74C                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009C74C                            SndBD_Header:
0009C74C                            	smpsHeaderStartSong 3
0009C74E 01                         	smpsHeaderTempoSFX  $01
0009C74F 01                         	smpsHeaderChanSFX   $01
0009C750                            
0009C756                            
0009C756                            ; FM6 Data
0009C756                            SndBD_FM3:
0009C756 EF00                       	smpsSetvoice        $00
0009C758                            
0009C758                            SndBD_Loop00:
0009C758 C009                       	dc.b	nEb5, $09
0009C75A F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009C75F F2                         	smpsStop
0009C760                            
0009C760                            SndBD_Voices:
0009C760                            ;	Voice $00
0009C760                            ;	$02
0009C760                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009C760                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009C760                            	smpsVcAlgorithm     $02
0009C760                            	smpsVcFeedback      $00
0009C760                            	smpsVcUnusedBits    $00
0009C760                            	smpsVcDetune        $00, $02, $05, $00
0009C760                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009C760                            	smpsVcRateScale     $00, $00, $00, $00
0009C760                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009C760                            	smpsVcAmpMod        $00, $00, $00, $00
0009C760                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009C760                            	smpsVcDecayRate2    $00, $00, $00, $01
0009C760                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C760                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C77A 00                         		even
0009C77A                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009C77A                            Sound_59_Header:
0009C77A                            	smpsHeaderStartSong 3
0009C77C 01                         	smpsHeaderTempoSFX  $01
0009C77D 04                         	smpsHeaderChanSFX   $04
0009C77E                            
0009C796                            
0009C796                            ; FM3 Data
0009C796                            Sound_59_FM3:
0009C796 E040                       	smpsPan             panRight, $00
0009C798 8002                       	dc.b	nRst, $02
0009C79A F600 00                    	smpsJump            Sound_59_FM4
0009C79D                            
0009C79D                            ; FM5 Data
0009C79D                            Sound_59_FM5:
0009C79D E080                       	smpsPan             panLeft, $00
0009C79F 8001                       	dc.b	nRst, $01
0009C7A1                            
0009C7A1                            ; FM4 Data
0009C7A1                            Sound_59_FM4:
0009C7A1 EF00                       	smpsSetvoice        $00
0009C7A8 8110                       	dc.b	nC0, $10
0009C7AA F2                         	smpsStop
0009C7AB                            
0009C7AB                            ; PSG3 Data
0009C7AB                            Sound_59_PSG3:
0009C7B0 F3E7                       	smpsPSGform         $E7
0009C7B2                            
0009C7B2                            Sound_59_Loop00:
0009C7B2 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009C7B5 EC03                       	smpsPSGAlterVol     $03
0009C7B7 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009C7BC F2                         	smpsStop
0009C7BD                            
0009C7BD                            Sound_59_Voices:
0009C7BD                            ;	Voice $00
0009C7BD                            ;	$F9
0009C7BD                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C7BD                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C7BD                            	smpsVcAlgorithm     $01
0009C7BD                            	smpsVcFeedback      $07
0009C7BD                            	smpsVcUnusedBits    $03
0009C7BD                            	smpsVcDetune        $03, $01, $03, $02
0009C7BD                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C7BD                            	smpsVcRateScale     $00, $00, $00, $00
0009C7BD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C7BD                            	smpsVcAmpMod        $00, $00, $00, $00
0009C7BD                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C7BD                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C7BD                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C7BD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C7D6                            
0009C7D6                            
0009C7D6                            		even
0009C7D6                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009C7FE                            		even
0009C7FE                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009C82A                            		even
0009C82A                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009C82A                            Sound_B6_Header:
0009C82A                            	smpsHeaderStartSong 3
0009C82C 01                         	smpsHeaderTempoSFX  $01
0009C82D 02                         	smpsHeaderChanSFX   $02
0009C82E                            
0009C83A                            
0009C83A                            ; FM5 Data
0009C83A                            Sound_B6_FM5:
0009C83A EF00                       	smpsSetvoice        $00
0009C841 CD0F                       	dc.b	nE6, $0F
0009C843 F2                         	smpsStop
0009C844                            
0009C844                            ; PSG3 Data
0009C844                            Sound_B6_PSG3:
0009C844 F507                       	smpsPSGvoice        sTone_1D
0009C846 8006                       	dc.b	nRst, $06
0009C84D F3E7                       	smpsPSGform         $E7
0009C84F CD4F                       	dc.b	nE6, $4F
0009C851 F2                         	smpsStop
0009C852                            
0009C852                            Sound_B6_Voices:
0009C852                            ;	Voice $00
0009C852                            ;	$3D
0009C852                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009C852                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009C852                            	smpsVcAlgorithm     $05
0009C852                            	smpsVcFeedback      $07
0009C852                            	smpsVcUnusedBits    $00
0009C852                            	smpsVcDetune        $00, $00, $00, $00
0009C852                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009C852                            	smpsVcRateScale     $00, $00, $00, $00
0009C852                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C852                            	smpsVcAmpMod        $00, $00, $00, $00
0009C852                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009C852                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C852                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C852                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C86B                            
0009C86B                            
0009C86C 00                         		even
0009C86C                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009C8C0                            		even
0009C8C0                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009C8FA                            		even
0009C8FA                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009C96C                            		even
0009C96C                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009C99A                            		even
0009C99A                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009C9D4                            		even
0009C9D4                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009C9D4                            SndC1_Header:
0009C9D4                            	smpsHeaderStartSong 3
0009C9D6 01                         	smpsHeaderTempoSFX  $01
0009C9D7 01                         	smpsHeaderChanSFX   $01
0009C9D8                            
0009C9DE                            
0009C9DE                            ; FM4 Data
0009C9DE                            SndC1_FM4:
0009C9DE EF00                       	smpsSetvoice        $00
0009C9E0 D506 40                    	dc.b	nC7, $06, $40
0009C9E3 F2                         	smpsStop
0009C9E4                            
0009C9E4                            SndC1_Voices:
0009C9E4                            ;	Voice $00
0009C9E4                            ;	$38
0009C9E4                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009C9E4                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009C9E4                            	smpsVcAlgorithm     $00
0009C9E4                            	smpsVcFeedback      $07
0009C9E4                            	smpsVcUnusedBits    $00
0009C9E4                            	smpsVcDetune        $00, $00, $00, $00
0009C9E4                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009C9E4                            	smpsVcRateScale     $00, $00, $00, $00
0009C9E4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C9E4                            	smpsVcAmpMod        $00, $00, $00, $00
0009C9E4                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009C9E4                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C9E4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C9E4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C9FE 00                         		even
0009C9FE                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009CA78                            		even
0009CA78                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009CAA0                            		even
0009CAA0                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009CAA0                            Sound_B0_Header:
0009CAA0                            	smpsHeaderStartSong 3
0009CAA2 01                         	smpsHeaderTempoSFX  $01
0009CAA3 03                         	smpsHeaderChanSFX   $03
0009CAA4                            
0009CAB6                            
0009CAB6                            ; FM5 Data
0009CAB6                            Sound_B0_FM5:
0009CAB6 EF00                       	smpsSetvoice        $00
0009CAB8 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009CABE F2                         	smpsStop
0009CABF                            
0009CABF                            ; FM4 Data
0009CABF                            Sound_B0_FM4:
0009CABF EF01                       	smpsSetvoice        $01
0009CAC1 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009CAC5 F2                         	smpsStop
0009CAC6                            
0009CAC6                            ; FM3 Data
0009CAC6                            Sound_B0_FM3:
0009CAC6 EF02                       	smpsSetvoice        $02
0009CAC8 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009CACF F2                         	smpsStop
0009CAD0                            
0009CAD0                            Sound_B0_Voices:
0009CAD0                            ;	Voice $00
0009CAD0                            ;	$3B
0009CAD0                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009CAD0                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009CAD0                            	smpsVcAlgorithm     $03
0009CAD0                            	smpsVcFeedback      $07
0009CAD0                            	smpsVcUnusedBits    $00
0009CAD0                            	smpsVcDetune        $00, $00, $00, $00
0009CAD0                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009CAD0                            	smpsVcRateScale     $02, $00, $00, $00
0009CAD0                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009CAD0                            	smpsVcAmpMod        $00, $00, $00, $00
0009CAD0                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009CAD0                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CAD0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CAD0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CAE9                            
0009CAE9                            ;	Voice $01
0009CAE9                            ;	$04
0009CAE9                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009CAE9                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009CAE9                            	smpsVcAlgorithm     $04
0009CAE9                            	smpsVcFeedback      $00
0009CAE9                            	smpsVcUnusedBits    $00
0009CAE9                            	smpsVcDetune        $04, $07, $07, $03
0009CAE9                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009CAE9                            	smpsVcRateScale     $00, $00, $00, $00
0009CAE9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CAE9                            	smpsVcAmpMod        $00, $00, $00, $00
0009CAE9                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009CAE9                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009CAE9                            	smpsVcDecayLevel    $00, $01, $00, $01
0009CAE9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB02                            
0009CB02                            ;	Voice $02
0009CB02                            ;	$3C
0009CB02                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009CB02                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009CB02                            	smpsVcAlgorithm     $04
0009CB02                            	smpsVcFeedback      $07
0009CB02                            	smpsVcUnusedBits    $00
0009CB02                            	smpsVcDetune        $00, $00, $00, $00
0009CB02                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009CB02                            	smpsVcRateScale     $00, $00, $00, $00
0009CB02                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009CB02                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB02                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009CB02                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009CB02                            	smpsVcDecayLevel    $02, $09, $09, $01
0009CB02                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB1B                            
0009CB1B                            
0009CB1C 00                         		even
0009CB1C                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009CB5E                            		even
0009CB5E                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009CB8C                            		even
0009CB8C                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009CB9E                            		even
0009CB9E                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009CBCC                            		even
0009CBCC                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009CBFA                            		even
0009CBFA                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009CC46                            		even
0009CC46                            SoundCC:	include	"sound/sfx/Spring.asm"
0009CC46                            Spring_Header:
0009CC46                            	smpsHeaderStartSong 1
0009CC48 01                         	smpsHeaderTempoSFX  $01
0009CC49 01                         	smpsHeaderChanSFX   $01
0009CC4A                            
0009CC50                            
0009CC50                            ; FM6 Data
0009CC50                            Spring_FM6:
0009CC50 EF00                       	smpsSetvoice        $00
0009CC52 8001                       	dc.b	nRst, $01
0009CC59 B006                       	dc.b	nB3, $06
0009CC5B F4                         	smpsModOff
0009CC5C EF01                       	smpsSetvoice        $01
0009CC5E                            
0009CC5E                            Spring_Loop00:
0009CC5E BD02                       	dc.b	nC5, $02
0009CC60 E601                       	smpsAlterVol      $01
0009CC62 E7                         	dc.b	smpsNoAttack
0009CC63 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009CC68 F2                         	smpsStop
0009CC69                            
0009CC69                            Spring_Voices:
0009CC69                            ;	Voice $00
0009CC69                            ;	$20
0009CC69                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CC69                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009CC69                            	smpsVcAlgorithm     $00
0009CC69                            	smpsVcFeedback      $04
0009CC69                            	smpsVcUnusedBits    $00
0009CC69                            	smpsVcDetune        $03, $03, $03, $03
0009CC69                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CC69                            	smpsVcRateScale     $02, $02, $03, $03
0009CC69                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CC69                            	smpsVcAmpMod        $00, $00, $00, $00
0009CC69                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CC69                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CC69                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CC69                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CC82                            
0009CC82                            ;	Voice $01
0009CC82                            ;	$20
0009CC82                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009CC82                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009CC82                            	smpsVcAlgorithm     $00
0009CC82                            	smpsVcFeedback      $04
0009CC82                            	smpsVcUnusedBits    $00
0009CC82                            	smpsVcDetune        $03, $03, $03, $03
0009CC82                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009CC82                            	smpsVcRateScale     $02, $02, $02, $02
0009CC82                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CC82                            	smpsVcAmpMod        $00, $00, $00, $00
0009CC82                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CC82                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CC82                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CC82                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CC9C 00                         		even
0009CC9C                            SoundCD:	include	"sound/sfx/Beep.asm"
0009CC9C                            Snd99_Header:
0009CC9C                            	smpsHeaderStartSong 3
0009CC9E 01                         	smpsHeaderTempoSFX  $01
0009CC9F 01                         	smpsHeaderChanSFX   $01
0009CCA0                            
0009CCA6                            
0009CCA6                            ; FM4 Data
0009CCA6                            Snd99_FM4:
0009CCA6 EF00                       	smpsSetvoice        $00
0009CCA8 B502                       	dc.b	nE4, $02
0009CCAA F2                         	smpsStop
0009CCAB                            
0009CCAB                            Snd99_Voices:
0009CCAB                            ;	Voice $00
0009CCAB                            ;	$07
0009CCAB                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CCAB                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009CCAB                            	smpsVcAlgorithm     $07
0009CCAB                            	smpsVcFeedback      $00
0009CCAB                            	smpsVcUnusedBits    $00
0009CCAB                            	smpsVcDetune        $00, $00, $00, $00
0009CCAB                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009CCAB                            	smpsVcRateScale     $00, $00, $00, $00
0009CCAB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CCAB                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCAB                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CCAB                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CCAB                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CCAB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CCC4                            		even
0009CCC4                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009CCF2                            		even
0009CCF2                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009CCF2                            SignpostCD_Header:
0009CCF2                            	smpsHeaderStartSong 3
0009CCF4 01                         	smpsHeaderTempoSFX  $01
0009CCF5 02                         	smpsHeaderChanSFX   $02
0009CCF6                            
0009CD02                            
0009CD02                            ; FM5 Data
0009CD02                            Snd9D_FM5:
0009CD02 8004                       	dc.b	nRst, $04
0009CD04                            
0009CD04                            ; FM4 Data
0009CD04                            Snd9D_FM4:
0009CD04 EF00                       	smpsSetvoice        $00
0009CD06                            
0009CD06                            Snd9D_Loop00:
0009CD06 B405                       	dc.b	nEb4, $05
0009CD08 E604                       	smpsFMAlterVol      $04
0009CD0A F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009CD0F F2                         	smpsStop
0009CD10                            
0009CD10                            Snd9D_Voices:
0009CD10                            ;	Voice $00
0009CD10                            ;	$F4
0009CD10                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009CD10                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009CD10                            	smpsVcAlgorithm     $04
0009CD10                            	smpsVcFeedback      $06
0009CD10                            	smpsVcUnusedBits    $03
0009CD10                            	smpsVcDetune        $00, $00, $00, $00
0009CD10                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009CD10                            	smpsVcRateScale     $00, $00, $00, $00
0009CD10                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CD10                            	smpsVcAmpMod        $00, $00, $00, $00
0009CD10                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009CD10                            	smpsVcDecayRate2    $08, $05, $00, $00
0009CD10                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009CD10                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD2A 00                         		even
0009CD2A                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009CD64                            		even
0009CD64                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009CD64                            Sound_41_Header:
0009CD64                            	smpsHeaderStartSong 3
0009CD66 01                         	smpsHeaderTempoSFX  $01
0009CD67 01                         	smpsHeaderChanSFX   $01
0009CD68                            
0009CD6E                            	
0009CD6E                            Sound41_FM5:
0009CD6E EF00                       	smpsSetvoice        $00
0009CD70 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009CD75 F2                         	smpsStop
0009CD76                            
0009CD76                            Sound_41_Voices:
0009CD76                            ;	Voice $00
0009CD76                            ;	$36
0009CD76                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CD76                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009CD76                            	smpsVcAlgorithm     $06
0009CD76                            	smpsVcFeedback      $06
0009CD76                            	smpsVcUnusedBits    $00
0009CD76                            	smpsVcDetune        $00, $00, $01, $00
0009CD76                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009CD76                            	smpsVcRateScale     $00, $00, $00, $00
0009CD76                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CD76                            	smpsVcAmpMod        $00, $00, $00, $00
0009CD76                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CD76                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009CD76                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CD76                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD8F                            
0009CD8F                            
0009CD90 00                         		even
0009CD90                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009CD90                            Snd9B_Header:
0009CD90                            	smpsHeaderStartSong 3
0009CD92 01                         	smpsHeaderTempoSFX  $01
0009CD93 01                         	smpsHeaderChanSFX   $01
0009CD94                            
0009CD9A                            
0009CD9A                            ; FM5 Data
0009CD9A                            Snd9B_FM5:
0009CD9A EF00                       	smpsSetvoice        $00
0009CD9C 8001                       	dc.b	nRst, $01
0009CDA3 CA25                       	dc.b	nCs6, $25
0009CDA5 F4                         	smpsModOff
0009CDA6                            
0009CDA6                            Snd9B_Loop00:
0009CDA6 E7                         	dc.b	smpsNoAttack
0009CDA7 E601                       	smpsFMAlterVol      $01
0009CDA9 D102                       	dc.b	nAb6, $02
0009CDAB F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009CDB0 F2                         	smpsStop
0009CDB1                            
0009CDB1                            Snd9B_Voices:
0009CDB1                            ;	Voice $00
0009CDB1                            ;	$3C
0009CDB1                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009CDB1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009CDB1                            	smpsVcAlgorithm     $04
0009CDB1                            	smpsVcFeedback      $07
0009CDB1                            	smpsVcUnusedBits    $00
0009CDB1                            	smpsVcDetune        $00, $00, $04, $00
0009CDB1                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009CDB1                            	smpsVcRateScale     $00, $00, $00, $00
0009CDB1                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009CDB1                            	smpsVcAmpMod        $00, $00, $00, $00
0009CDB1                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009CDB1                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CDB1                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CDB1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CDCA                            
0009CDCA                            
0009CDCA                            		even		
0009CDCA                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009CE62                            		even
0009CE62                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009CE6E                            		even				
0009CE6E                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009CEAA                            		even			
0009CEAA                            		; Don't let Sega sample cross $8000-byte boundary
0009CEAA                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 0FCC                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 1EFE                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 0EFC                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 107A                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 107A                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 1604                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 1604                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 1604                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 21A8                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 0FCC                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 377C                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 1E58                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 377C                  		jsr	WaitForVBla				
000A6ACA 46FC 2700                  		move	#$2700,sr
000A6ACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6AD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADA 46FC 2300                  		move	#$2300,sr
000A6ADE 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE4 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AEE                            
000A6AEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF0 60CE                       		bra.s	OptionScreen_Main
000A6AF2                            ; ===========================================================================
000A6AF2                            ; loc_909A:
000A6AF2                            OptionScreen_Select:
000A6AF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AF6 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AF8 7000                       		moveq	#0,d0
000A6AFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000A6B00 4E75                       		rts
000A6B02                            ; ===========================================================================
000A6B02                            ; loc_90B6:
000A6B02                            OptionScreen_Select_Not1P:
000A6B02 5300                       		subq.b	#1,d0
000A6B04 6600                       		bne.s	OptionScreen_Select_Other
000A6B06 60B8                       		bra.s	OptionScreen_Main
000A6B08                            ; ===========================================================================
000A6B08                            ; loc_90D8:
000A6B08                            OptionScreen_Select_Other:
000A6B08 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B0E 4E75                       		rts
000A6B10                            
000A6B10                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B10                            
000A6B10                            ;sub_90E0:
000A6B10                            OptionScreen_Controls:
000A6B10 7400                       		moveq	#0,d2
000A6B12 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B16 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B1A 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B1E 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B20 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B22 6400                       		bcc.s	Option_Controls_Down
000A6B24 143C 0002                  		move.b	#2,d2
000A6B28                            
000A6B28                            Option_Controls_Down:
000A6B28 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B2C 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B2E 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B30 0C02 0003                  		cmpi.b	#3,d2
000A6B34 6500                       		blo.s	Option_Controls_Refresh
000A6B36 7400                       		moveq	#0,d2
000A6B38                            
000A6B38                            Option_Controls_Refresh:
000A6B38 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B3C E54A                       		lsl.w	#2,d2
000A6B3E 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B42 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B46 3411                       		move.w	(a1),d2
000A6B48 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B4C 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B4E 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B50 6400                       		bcc.s	Option_Controls_Right
000A6B52 1403                       		move.b	d3,d2
000A6B54                            
000A6B54                            Option_Controls_Right:
000A6B54 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B58 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B5A 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B5C B403                       		cmp.b	d3,d2
000A6B5E 6300                       		bls.s	Option_Controls_Button_A
000A6B60 7400                       		moveq	#0,d2
000A6B62                            
000A6B62                            Option_Controls_Button_A:
000A6B62 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B66 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B68 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B6C B403                       		cmp.b	d3,d2
000A6B6E 6300                       		bls.s	Option_Controls_Refresh2
000A6B70 7400                       		moveq	#0,d2
000A6B72                            
000A6B72                            Option_Controls_Refresh2:
000A6B72 3282                       		move.w	d2,(a1)
000A6B74                            
000A6B74                            Option_Controls_NoMove:
000A6B74 4E75                       		rts
000A6B76                            ; End of function OptionScreen_Controls
000A6B76                            
000A6B76                            ; ===========================================================================
000A6B76                            ; word_917A:
000A6B76                            OptionScreen_Choices:
000A6B76 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B7A 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6B7E 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6B82                            		even
000A6B82                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B82                            
000A6B82                            
000A6B82                            OptionScreen_DrawSelected:
000A6B82 6100 0000                  		bsr.w	loc_9268
000A6B86 7200                       		moveq	#0,d1
000A6B88 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6B8C E749                       		lsl.w	#3,d1
000A6B8E 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6B94 47F3 1000                  		lea	(a3,d1.w),a3
000A6B98 303C 6000                  		move.w	#$6000,d0
000A6B9C 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BA2 225B                       		movea.l	(a3)+,a1
000A6BA4 6100 FE80                  		bsr.w	MenuScreenTextToRAM
000A6BA8 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BAE 7200                       		moveq	#0,d1
000A6BB0 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BB6 6700                       		beq.s	loc_9186
000A6BB8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BBC E549                       		lsl.w	#2,d1
000A6BBE 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BC2 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BC6 3211                       		move.w	(a1),d1
000A6BC8 E549                       		lsl.w	#2,d1
000A6BCA                            
000A6BCA                            loc_9186:		
000A6BCA 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BCE 6100 FE56                  		bsr.w	MenuScreenTextToRAM
000A6BD2                            		;cmpi.b	#2,(Options_menu_box).w
000A6BD2                            		;bne.s	loc2_9186
000A6BD2                            		;lea	($FFFF00C2).l,a2
000A6BD2                            		;bsr.w	loc_9296
000A6BD2                            
000A6BD2                            loc2_9186:		
000A6BD2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BD8 201B                       		move.l	(a3)+,d0
000A6BDA 7215                       		moveq	#$15,d1
000A6BDC 7407                       		moveq	#7,d2
000A6BDE 4EF8 1050                  		jmp	TilemapToVRAM
000A6BE2                            ; ===========================================================================
000A6BE2                            
000A6BE2                            OptionScreen_DrawUnselected:
000A6BE2 6100 0000                  		bsr.w	loc_9268
000A6BE6 7200                       		moveq	#0,d1
000A6BE8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BEC E749                       		lsl.w	#3,d1
000A6BEE 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BF4 47F3 1000                  		lea	(a3,d1.w),a3
000A6BF8 7000                       		moveq	#0,d0
000A6BFA 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C00 225B                       		movea.l	(a3)+,a1
000A6C02 6100 FE22                  		bsr.w	MenuScreenTextToRAM
000A6C06 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C0C 7200                       		moveq	#0,d1
000A6C0E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C14 6700                       		beq.s	loc2_91F8
000A6C16 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C1A E549                       		lsl.w	#2,d1
000A6C1C 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C20 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C24 3211                       		move.w	(a1),d1
000A6C26 E549                       		lsl.w	#2,d1
000A6C28                            
000A6C28                            loc2_91F8		
000A6C28 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C2C 6100 FDF8                  		bsr.w	MenuScreenTextToRAM
000A6C30                            		;cmpi.b	#2,(Options_menu_box).w
000A6C30                            		;bne.s	loc3_91F8
000A6C30                            		;lea	($FFFF0222).l,a2
000A6C30                            		;bsr.w	loc_9296
000A6C30                            
000A6C30                            loc3_91F8		
000A6C30 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C36 201B                       		move.l	(a3)+,d0
000A6C38 7215                       		moveq	#$15,d1
000A6C3A 7407                       		moveq	#7,d2
000A6C3C 4EF8 1050                  		jmp	TilemapToVRAM
000A6C40                            ; ===========================================================================
000A6C40                            
000A6C40                            loc_9268:
000A6C40 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C46 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C4A 6A00                       		bpl.s	loc2_9268
000A6C4C 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C52                            
000A6C52                            loc2_9268:
000A6C52 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C56 6700                       		beq.s	loc3_9268
000A6C58 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C5E                            
000A6C5E                            loc3_9268:
000A6C5E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C64 6600                       		bne.s	loc4_9268		; rts
000A6C66 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C6C                            
000A6C6C                            loc4_9268:
000A6C6C 4E75                       		rts
000A6C6E                            ; ===========================================================================
000A6C6E                            
000A6C6E                            loc_9296:
000A6C6E 4E75                       		rts
000A6C70                            
000A6C70                            Dynamic_Menu:
000A6C70 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C74                            
000A6C74                            loc_3FF30:
000A6C74 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C76                            
000A6C76                            loc_3FF32:
000A6C76 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C78 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C7A 7000                       	moveq	#0,d0
000A6C7C 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6C80 B02A 0006                  	cmp.b	6(a2),d0
000A6C84 6500                       	blo.s	loc_3FF48
000A6C86 7000                       	moveq	#0,d0
000A6C88 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6C8C                            
000A6C8C                            loc_3FF48:
000A6C8C 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6C90 1692                       	move.b	(a2),(a3)	; set timer
000A6C92 6A00                       	bpl.s	loc_3FF56
000A6C94 D040                       	add.w	d0,d0
000A6C96 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6C9A                            
000A6C9A                            loc_3FF56:
000A6C9A 1032 0008                  	move.b	8(a2,d0.w),d0
000A6C9E EB48                       	lsl.w	#5,d0
000A6CA0 342A 0004                  	move.w	4(a2),d2
000A6CA4 2212                       	move.l	(a2),d1
000A6CA6 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CAC D280                       	add.l	d0,d1
000A6CAE 7600                       	moveq	#0,d3
000A6CB0 162A 0007                  	move.b	7(a2),d3
000A6CB4 E94B                       	lsl.w	#4,d3
000A6CB6 4EB9 0000 11A2             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CBC                            
000A6CBC                            loc_3FF78:
000A6CBC 102A 0006                  	move.b	6(a2),d0
000A6CC0 4A12                       	tst.b	(a2)
000A6CC2 6A00                       	bpl.s	loc_3FF82
000A6CC4 D000                       	add.b	d0,d0
000A6CC6                            
000A6CC6                            loc_3FF82:
000A6CC6 5200                       	addq.b	#1,d0
000A6CC8 0240 00FE                  	andi.w	#$FE,d0
000A6CCC 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CD0 544B                       	addq.w	#2,a3
000A6CD2 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CD6 4E75                       	rts
000A6CD8                            ; ------------------------------------------------------------------------
000A6CD8                            ; MENU ANIMATION SCRIPT
000A6CD8                            ; ------------------------------------------------------------------------
000A6CD8                            ;word_87C6:
000A6CD8                            Anim_SonicMilesBG:
000A6CD8 0000                       	dc.w   0
000A6CDA                            ; Sonic/Miles animated background
000A6CDA 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6CDE 0020                       	dc.w $20
000A6CE0 06                         	dc.b 6
000A6CE1 0A                         	dc.b $A
000A6CE2 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6CE4 0A05                       	dc.b  $A,  5	; 2
000A6CE6 1405                       	dc.b $14,  5	; 4
000A6CE8 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6CEA 1405                       	dc.b $14,  5	; 8
000A6CEC 0A05                       	dc.b  $A,  5	; 10	
000A6CEE                            ; ===========================================================================
000A6CEE                            ; off_92BA:
000A6CEE                            OptScrBoxData:
000A6CEE                            
000A6CEE 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6CF2 4192                       		dc.w $4192
000A6CF4 0003                       		dc.w 3
000A6CF6 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6CFA 4592                       		dc.w $4592
000A6CFC 0003                       		dc.w 3
000A6CFE 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D02 4992                       		dc.w $4992
000A6D04 0003                       		dc.w 3
000A6D06                            
000A6D06                            off_92D2:
000A6D06 0000 0000                  		dc.l TextOptScr_Default
000A6D0A 0000 0000                  		dc.l TextOptScr_Original
000A6D0E 0000 0000                  		dc.l TextOptScr_Beta
000A6D12 0000 0000                  		dc.l TextOptScr_Midnight
000A6D16 0000 0000                  		dc.l TextOptScr_C2
000A6D1A 0000 0000                  		dc.l TextOptScr_Clackers
000A6D1E 0000 0000                  		dc.l TextOptScr_RHS
000A6D22 0000 0000                  		dc.l TextOptScr_Socket
000A6D26 0000 0000                  		dc.l TextOptScr_Cringe
000A6D2A 0000 0000                  		dc.l TextOptScr_Dark		
000A6D2E                            off_92DE:
000A6D2E 0000 0000                  		dc.l TextOptScr_Default
000A6D32 0000 0000                  		dc.l TextOptScr_Original
000A6D36 0000 0000                  		dc.l TextOptScr_Beta
000A6D3A 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3E 0000 0000                  		dc.l TextOptScr_C2
000A6D42 0000 0000                  		dc.l TextOptScr_Clackers
000A6D46 0000 0000                  		dc.l TextOptScr_RHS
000A6D4A 0000 0000                  		dc.l TextOptScr_Socket
000A6D4E 0000 0000                  		dc.l TextOptScr_Cringe
000A6D52 0000 0000                  		dc.l TextOptScr_Dark	
000A6D56                            off_92EA:
000A6D56 0000 0000                  		dc.l TextOptScr_On
000A6D5A 0000 0000                  		dc.l TextOptScr_Off
000A6D5E                            off_92F2:
000A6D5E 0000 0000                  		dc.l TextOptScr_Null
000A6D62 0000 0000                  		dc.l TextOptScr_Null2
000A6D66                            ; ===========================================================================
000A6D66                            
000A6E85                            ; ============================================================================
000A6E85                            
000A6E85                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A7386 00                         		even
000A7386                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7532                            		even
000A7532                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7A9C                            		even
000A7A9C                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B1C                            		even
000A7B1C                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B48                            		even
000A7B48                            		even
000A7B48                            
000A7B48                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253CC                                        even
001253CC                            
001253CC                            Art_Dust:	incbin	artunc\spindust.bin
00126D0C                            
00126D0C                            ; ===============================================================
00126D0C                            ; ---------------------------------------------------------------
00126D0C                            ; Error handling module
00126D0C                            ; ---------------------------------------------------------------
00126D0C                             
00126D0C 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D10 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D1A 01                                 dc.b    1               ; extended stack frame
00126D1C 00                                 even
00126D1C                             
00126D1C 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D20 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D2E 01                                 dc.b    1               ; extended stack frame
00126D30 00                                 even
00126D30                             
00126D30 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D34 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D48 00                                 dc.b    0               ; extended stack frame
00126D4A 00                                 even
00126D4A                             
00126D4A 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D4E 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D5A 00                                 dc.b    0               ; extended stack frame
00126D5C 00                                 even
00126D5C                             
00126D5C 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D60 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D70 00                                 dc.b    0               ; extended stack frame
00126D72 00                                 even
00126D72                             
00126D72 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D76 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126D88 00                                 dc.b    0               ; extended stack frame
00126D8A 00                                 even
00126D8A                             
00126D8A 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126D8E 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DA2 00                                 dc.b    0               ; extended stack frame
00126DA4 00                                 even
00126DA4                             
00126DA4 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DA8 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DAE 00                                 dc.b    0               ; extended stack frame
00126DB0 00                                 even
00126DB0                             
00126DB0 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DB4 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DC7 00                                 dc.b    0               ; extended stack frame
00126DC8                                    even
00126DC8                             
00126DC8 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DCC 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126DDF 00                                 dc.b    0               ; extended stack frame
00126DE0                                    even
00126DE0                             
00126DE0 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126DE4 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126DF4 00                                 dc.b    0               ; extended stack frame
00126DF6 00                                 even
00126DF6                             
00126DF6                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275DA                            
001275DA                            ; end of 'ROM'
001275DA                            		even
001275DA                            EndOfRom:
001275DA                            
001275DA                            
