00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000                            ; Ring managers-related stuff
00000000 =000001FF                  Max_Rings:	equ 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space:	equ (Max_Rings+1)*2
00000000                            
00000000 =FFFF8300                  Ring_Positions:	equ $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM:	equ Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM:	equ Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM:	equ Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left:		equ Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine:		equ Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  v_level_started_flag:		equ Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table:		equ Ring_Positions+Rings_Space+$E
00000000 =FFFF870E                  Ring_consumption_table:		equ Ring_Positions+Rings_Space+$E
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                                include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 7400                       		moveq	#0,d2
00001D20 7000                       		moveq	#0,d0
00001D22 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D26 D040                       		add.w	d0,d0
00001D28 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D2C 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D30                            ; End of function PaletteCycle
00001D30                            
00001D30                            ; ===========================================================================
00001D30                            ; ---------------------------------------------------------------------------
00001D30                            ; Palette cycling routines
00001D30                            ; ---------------------------------------------------------------------------
00001D30 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D32 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D34 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D36 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D38 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D3C 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D3E                            
00001D3E                            
00001D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D3E                            
00001D3E                            
00001D3E                            PCycle_Title:
00001D3E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D44 6000                       		bra.s	PCycGHZ_Go
00001D46                            ; ===========================================================================
00001D46                            
00001D46                            PCycle_GHZ:
00001D46 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D4C                            
00001D4C                            PCycGHZ_Go:
00001D4C 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D50 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D52                            
00001D52 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D58 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D5C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D60 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D64 E748                       		lsl.w	#3,d0
00001D66 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D72                            
00001D72                            PCycGHZ_Skip:
00001D72 4E75                       		rts	
00001D74                            ; End of function PCycle_GHZ
00001D74                            
00001D74                            
00001D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D74                            
00001D74                            
00001D74                            PCycle_LZ:
00001D74                            ; Waterfalls
00001D74 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D78 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7A                            
00001D7A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D80 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D84 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D88 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D8C E748                       		lsl.w	#3,d0
00001D8E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D94 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D9C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA2                            
00001DA2                            	PCycLZ_NotSBZ3:
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DAE 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DB6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            PCycLZ_Skip1:
00001DBA                            ; Conveyor belts
00001DBA                            		;move.w	(v_framecount).w,d0
00001DBA                            		;andi.w	#7,d0
00001DBA                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBA                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBA                            		;moveq	#1,d1
00001DBA                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBA                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBA                            		;neg.w	d1
00001DBA                            
00001DBA                            	;PCycLZ_NoRev:
00001DBA                            		;move.w	(v_pal_buffer).w,d0
00001DBA                            		;andi.w	#3,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;cmpi.w	#3,d0
00001DBA                            		;bcs.s	loc_1A0A
00001DBA                            		;move.w	d0,d1
00001DBA                            		;moveq	#0,d0
00001DBA                            		;tst.w	d1
00001DBA                            		;bpl.s	loc_1A0A
00001DBA                            		;moveq	#2,d0
00001DBA                            
00001DBA                            ;loc_1A0A:
00001DBA                            		;move.w	d0,(v_pal_buffer).w
00001DBA                            		;add.w	d0,d0
00001DBA                            		;move.w	d0,d1
00001DBA                            		;add.w	d0,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;lea	(Pal_LZCyc2).l,a0
00001DBA                            		;lea	(v_pal_dry+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            		;lea	(Pal_LZCyc3).l,a0
00001DBA                            		;lea	(v_pal_water+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            ;PCycLZ_Skip2:
00001DBA 4E75                       		rts	
00001DBC                            ; End of function PCycle_LZ
00001DBC                            
00001DBC                            ; ===========================================================================
00001DBC 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC4                            ; ===========================================================================
00001DC4                            
00001DC4                            PCycle_MZ:
00001DC4 4E75                       		rts	
00001DC6                            
00001DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC6                            
00001DC6                            
00001DC6                            PalCycle_SLZ:
00001DC6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCA 6A00                       		bpl.s	locret_1A80
00001DCC 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DD6 5240                       		addq.w	#1,d0
00001DD8 0C40 0006                  		cmpi.w	#6,d0
00001DDC 6500                       		bcs.s	loc_1A60
00001DDE 7000                       		moveq	#0,d0
00001DE0                            
00001DE0                            loc_1A60:
00001DE0 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE4 3200                       		move.w	d0,d1
00001DE6 D241                       		add.w	d1,d1
00001DE8 D041                       		add.w	d1,d0
00001DEA D040                       		add.w	d0,d0
00001DEC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DF6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E00                            
00001E00                            locret_1A80:
00001E00 4E75                       		rts	
00001E02                            ; End of function PalCycle_SLZ
00001E02                            
00001E02                            
00001E02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E02                            
00001E02                            
00001E02                            PalCycle_SYZ:
00001E02 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E06 6A00                       		bpl.s	locret_1AC6
00001E08 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E0E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E12 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E16 0240 0003                  		andi.w	#3,d0
00001E1A E548                       		lsl.w	#2,d0
00001E1C 3200                       		move.w	d0,d1
00001E1E D040                       		add.w	d0,d0
00001E20 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E26 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E2E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E32 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E38 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E3C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E40 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E46                            
00001E46                            locret_1AC6:
00001E46 4E75                       		rts	
00001E48                            ; End of function PalCycle_SYZ
00001E48                            
00001E48                            
00001E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E48                            
00001E48                            
00001E48                            PalCycle_SBZ:
00001E48 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E4E 4A38 FE11                  		tst.b	(v_act).w
00001E52 6700                       		beq.s	loc_1ADA
00001E54 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5A                            
00001E5A                            loc_1ADA:
00001E5A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E5E 321A                       		move.w	(a2)+,d1
00001E60                            
00001E60                            loc_1AE0:
00001E60 5311                       		subq.b	#1,(a1)
00001E62 6B00                       		bmi.s	loc_1AEA
00001E64 5489                       		addq.l	#2,a1
00001E66 5C8A                       		addq.l	#6,a2
00001E68 6000                       		bra.s	loc_1B06
00001E6A                            ; ===========================================================================
00001E6A                            
00001E6A                            loc_1AEA:
00001E6A 12DA                       		move.b	(a2)+,(a1)+
00001E6C 1011                       		move.b	(a1),d0
00001E6E 5200                       		addq.b	#1,d0
00001E70 B01A                       		cmp.b	(a2)+,d0
00001E72 6500                       		bcs.s	loc_1AF6
00001E74 7000                       		moveq	#0,d0
00001E76                            
00001E76                            loc_1AF6:
00001E76 12C0                       		move.b	d0,(a1)+
00001E78 0240 000F                  		andi.w	#$F,d0
00001E7C D040                       		add.w	d0,d0
00001E7E 305A                       		movea.w	(a2)+,a0
00001E80 365A                       		movea.w	(a2)+,a3
00001E82 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E86                            
00001E86                            loc_1B06:
00001E86 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E8E 6A00                       		bpl.s	locret_1B64
00001E90 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E96 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E9C 4A38 FE11                  		tst.b	(v_act).w
00001EA0 6700                       		beq.s	loc_1B2E
00001EA2 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EA8 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EAE                            
00001EAE                            loc_1B2E:
00001EAE 72FF                       		moveq	#-1,d1
00001EB0 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB4 6700                       		beq.s	loc_1B38
00001EB6 4441                       		neg.w	d1
00001EB8                            
00001EB8                            loc_1B38:
00001EB8 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EBC 0240 0003                  		andi.w	#3,d0
00001EC0 D041                       		add.w	d1,d0
00001EC2 0C40 0003                  		cmpi.w	#3,d0
00001EC6 6500                       		bcs.s	loc_1B52
00001EC8 3200                       		move.w	d0,d1
00001ECA 7000                       		moveq	#0,d0
00001ECC 4A41                       		tst.w	d1
00001ECE 6A00                       		bpl.s	loc_1B52
00001ED0 7002                       		moveq	#2,d0
00001ED2                            
00001ED2                            loc_1B52:
00001ED2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001ED6 D040                       		add.w	d0,d0
00001ED8 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EDC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE4                            
00001EE4                            locret_1B64:
00001EE4 4E75                       		rts	
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            
00001EE6                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001F06                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001F26                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001F46                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F58                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F6A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001FD2                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FF6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00002016                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00002026                            
00002026                            		include	"_inc\SBZ Palette Scripts.asm"
00002026                            ; ---------------------------------------------------------------------------
00002026                            ; Scrap Brain Zone palette cycling script
00002026                            ; ---------------------------------------------------------------------------
00002026                            
00002026                            mSBZp:	macro duration,colors,paladdress,ramaddress
00002026                            	dc.b duration, colors
00002026                            	dc.w paladdress, ramaddress
00002026                            	endm
00002026                            
00002026                            ; duration in frames, number of colors, palette address, RAM address
00002026                            
00002026                            Pal_SBZCycList1:
00002026 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00002028 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000202E 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002034 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
0000203A 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00002040 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002046 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
0000204C 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002052 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002058 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000205E                            end_SBZCycList1:
0000205E                            	even
0000205E                            
0000205E                            Pal_SBZCycList2:
0000205E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002060 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002066 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000206C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002072 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002078 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000207E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002084 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000208A                            end_SBZCycList2:
0000208A                            	even
0000208A                            	even
0000208A                            
0000208A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000209A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
000020AA                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
000020BA                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
000020C6                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
000020D6                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
000020E6                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00002106                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002110                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00002120                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
0000212C                            ; ---------------------------------------------------------------------------
0000212C                            ; Subroutine to	fade in from black
0000212C                            ; ---------------------------------------------------------------------------
0000212C                            
0000212C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212C                            
0000212C                            
0000212C                            PaletteFadeIn:
0000212C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00002132                            
00002132                            PalFadeIn_Alt:				; start position and size are already set
00002132 7000                       		moveq	#0,d0
00002134 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002138 1038 F626                  		move.b	(v_pfade_start).w,d0
0000213C D0C0                       		adda.w	d0,a0
0000213E 7200                       		moveq	#cBlack,d1
00002140 1038 F627                  		move.b	(v_pfade_size).w,d0
00002144                            
00002144                            	@fill:
00002144 30C1                       		move.w	d1,(a0)+
00002146 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
0000214A                            
0000214A 383C 0015                  		move.w	#$15,d4
0000214E                            
0000214E                            	@mainloop:
0000214E 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002154 6100 0000                  		bsr.w	WaitForVBla
00002158 6100                       		bsr.s	FadeIn_FromBlack
0000215A 6100 F64A                  		bsr.w	RunPLC
0000215E 51CC FFEE                  		dbf	d4,@mainloop
00002162 4E75                       		rts	
00002164                            ; End of function PaletteFadeIn
00002164                            
00002164                            
00002164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002164                            
00002164                            
00002164                            FadeIn_FromBlack:
00002164 7000                       		moveq	#0,d0
00002166 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000216A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000216E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002172 D0C0                       		adda.w	d0,a0
00002174 D2C0                       		adda.w	d0,a1
00002176 1038 F627                  		move.b	(v_pfade_size).w,d0
0000217A                            
0000217A                            	@addcolour:
0000217A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000217C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002180                            
00002180 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002186 6600                       		bne.s	@exit		; if not, branch
00002188                            
00002188 7000                       		moveq	#0,d0
0000218A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000218E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002192 1038 F626                  		move.b	(v_pfade_start).w,d0
00002196 D0C0                       		adda.w	d0,a0
00002198 D2C0                       		adda.w	d0,a1
0000219A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000219E                            
0000219E                            	@addcolour2:
0000219E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
000021A0 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
000021A4                            
000021A4                            @exit:
000021A4 4E75                       		rts	
000021A6                            ; End of function FadeIn_FromBlack
000021A6                            
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            FadeIn_AddColour:
000021A6                            @addblue:
000021A6 3419                       		move.w	(a1)+,d2
000021A8 3610                       		move.w	(a0),d3
000021AA B642                       		cmp.w	d2,d3		; is colour already at threshold level?
000021AC 6700                       		beq.s	@next		; if yes, branch
000021AE 3203                       		move.w	d3,d1
000021B0 0641 0200                  		addi.w	#$200,d1	; increase blue	value
000021B4 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
000021B6 6200                       		bhi.s	@addgreen	; if yes, branch
000021B8 30C1                       		move.w	d1,(a0)+	; update palette
000021BA 4E75                       		rts	
000021BC                            ; ===========================================================================
000021BC                            
000021BC                            @addgreen:
000021BC 3203                       		move.w	d3,d1
000021BE 0641 0020                  		addi.w	#$20,d1		; increase green value
000021C2 B242                       		cmp.w	d2,d1
000021C4 6200                       		bhi.s	@addred
000021C6 30C1                       		move.w	d1,(a0)+	; update palette
000021C8 4E75                       		rts	
000021CA                            ; ===========================================================================
000021CA                            
000021CA                            @addred:
000021CA 5458                       		addq.w	#2,(a0)+	; increase red value
000021CC 4E75                       		rts	
000021CE                            ; ===========================================================================
000021CE                            
000021CE                            @next:
000021CE 5448                       		addq.w	#2,a0		; next colour
000021D0 4E75                       		rts	
000021D2                            ; End of function FadeIn_AddColour
000021D2                            
000021D2                            
000021D2                            ; ---------------------------------------------------------------------------
000021D2                            ; Subroutine to fade out to black
000021D2                            ; ---------------------------------------------------------------------------
000021D2                            
000021D2                            
000021D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D2                            
000021D2                            
000021D2                            PaletteFadeOut:
000021D2 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000021D8 383C 0015                  		move.w	#$15,d4
000021DC                            
000021DC                            	@mainloop:
000021DC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000021E2 6100 0000                  		bsr.w	WaitForVBla
000021E6 6100                       		bsr.s	FadeOut_ToBlack
000021E8 6100 F5BC                  		bsr.w	RunPLC
000021EC 51CC FFEE                  		dbf	d4,@mainloop
000021F0 4E75                       		rts	
000021F2                            ; End of function PaletteFadeOut
000021F2                            
000021F2                            
000021F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F2                            
000021F2                            
000021F2                            FadeOut_ToBlack:
000021F2 7000                       		moveq	#0,d0
000021F4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021F8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021FC D0C0                       		adda.w	d0,a0
000021FE 1038 F627                  		move.b	(v_pfade_size).w,d0
00002202                            
00002202                            	@decolour:
00002202 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00002204 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002208                            
00002208 7000                       		moveq	#0,d0
0000220A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000220E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002212 D0C0                       		adda.w	d0,a0
00002214 1038 F627                  		move.b	(v_pfade_size).w,d0
00002218                            
00002218                            	@decolour2:
00002218 6100                       		bsr.s	FadeOut_DecColour
0000221A 51C8 FFFC                  		dbf	d0,@decolour2
0000221E 4E75                       		rts	
00002220                            ; End of function FadeOut_ToBlack
00002220                            
00002220                            
00002220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002220                            
00002220                            
00002220                            FadeOut_DecColour:
00002220                            @dered:
00002220 3410                       		move.w	(a0),d2
00002222 6700                       		beq.s	@next
00002224 3202                       		move.w	d2,d1
00002226 0241 000E                  		andi.w	#$E,d1
0000222A 6700                       		beq.s	@degreen
0000222C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000222E 4E75                       		rts	
00002230                            ; ===========================================================================
00002230                            
00002230                            @degreen:
00002230 3202                       		move.w	d2,d1
00002232 0241 00E0                  		andi.w	#$E0,d1
00002236 6700                       		beq.s	@deblue
00002238 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000223C 4E75                       		rts	
0000223E                            ; ===========================================================================
0000223E                            
0000223E                            @deblue:
0000223E 3202                       		move.w	d2,d1
00002240 0241 0E00                  		andi.w	#$E00,d1
00002244 6700                       		beq.s	@next
00002246 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
0000224A 4E75                       		rts	
0000224C                            ; ===========================================================================
0000224C                            
0000224C                            @next:
0000224C 5448                       		addq.w	#2,a0
0000224E 4E75                       		rts	
00002250                            ; End of function FadeOut_DecColour
00002250                            
00002250                            ; ---------------------------------------------------------------------------
00002250                            ; Subroutine to	fade in from white (Special Stage)
00002250                            ; ---------------------------------------------------------------------------
00002250                            
00002250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002250                            
00002250                            
00002250                            PaletteWhiteIn:
00002250 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002256 7000                       		moveq	#0,d0
00002258 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000225C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002260 D0C0                       		adda.w	d0,a0
00002262 323C 0EEE                  		move.w	#cWhite,d1
00002266 1038 F627                  		move.b	(v_pfade_size).w,d0
0000226A                            
0000226A                            	@fill:
0000226A 30C1                       		move.w	d1,(a0)+
0000226C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002270                            
00002270 383C 0015                  		move.w	#$15,d4
00002274                            
00002274                            	@mainloop:
00002274 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000227A 6100 0000                  		bsr.w	WaitForVBla
0000227E 6100                       		bsr.s	WhiteIn_FromWhite
00002280 6100 F524                  		bsr.w	RunPLC
00002284 51CC FFEE                  		dbf	d4,@mainloop
00002288 4E75                       		rts	
0000228A                            ; End of function PaletteWhiteIn
0000228A                            
0000228A                            
0000228A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000228A                            
0000228A                            
0000228A                            WhiteIn_FromWhite:
0000228A 7000                       		moveq	#0,d0
0000228C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002290 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002294 1038 F626                  		move.b	(v_pfade_start).w,d0
00002298 D0C0                       		adda.w	d0,a0
0000229A D2C0                       		adda.w	d0,a1
0000229C 1038 F627                  		move.b	(v_pfade_size).w,d0
000022A0                            
000022A0                            	@decolour:
000022A0 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
000022A2 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000022A6                            
000022A6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
000022AC 6600                       		bne.s	@exit		; if not, branch
000022AE 7000                       		moveq	#0,d0
000022B0 41F8 FA80                  		lea	(v_pal_water).w,a0
000022B4 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
000022B8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022BC D0C0                       		adda.w	d0,a0
000022BE D2C0                       		adda.w	d0,a1
000022C0 1038 F627                  		move.b	(v_pfade_size).w,d0
000022C4                            
000022C4                            	@decolour2:
000022C4 6100                       		bsr.s	WhiteIn_DecColour
000022C6 51C8 FFFC                  		dbf	d0,@decolour2
000022CA                            
000022CA                            	@exit:
000022CA 4E75                       		rts	
000022CC                            ; End of function WhiteIn_FromWhite
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteIn_DecColour:
000022CC                            @deblue:
000022CC 3419                       		move.w	(a1)+,d2
000022CE 3610                       		move.w	(a0),d3
000022D0 B642                       		cmp.w	d2,d3
000022D2 6700                       		beq.s	@next
000022D4 3203                       		move.w	d3,d1
000022D6 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000022DA 6500                       		blo.s	@degreen
000022DC B242                       		cmp.w	d2,d1
000022DE 6500                       		blo.s	@degreen
000022E0 30C1                       		move.w	d1,(a0)+
000022E2 4E75                       		rts	
000022E4                            ; ===========================================================================
000022E4                            
000022E4                            @degreen:
000022E4 3203                       		move.w	d3,d1
000022E6 0441 0020                  		subi.w	#$20,d1		; decrease green value
000022EA 6500                       		blo.s	@dered
000022EC B242                       		cmp.w	d2,d1
000022EE 6500                       		blo.s	@dered
000022F0 30C1                       		move.w	d1,(a0)+
000022F2 4E75                       		rts	
000022F4                            ; ===========================================================================
000022F4                            
000022F4                            @dered:
000022F4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022F6 4E75                       		rts	
000022F8                            ; ===========================================================================
000022F8                            
000022F8                            @next:
000022F8 5448                       		addq.w	#2,a0
000022FA 4E75                       		rts	
000022FC                            ; End of function WhiteIn_DecColour
000022FC                            
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            ; Subroutine to fade to white (Special Stage)
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            PaletteWhiteOut:
000022FC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002302 383C 0015                  		move.w	#$15,d4
00002306                            
00002306                            	@mainloop:
00002306 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000230C 6100 0000                  		bsr.w	WaitForVBla
00002310 6100                       		bsr.s	WhiteOut_ToWhite
00002312 6100 F492                  		bsr.w	RunPLC
00002316 51CC FFEE                  		dbf	d4,@mainloop
0000231A 4E75                       		rts	
0000231C                            ; End of function PaletteWhiteOut
0000231C                            
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            WhiteOut_ToWhite:
0000231C 7000                       		moveq	#0,d0
0000231E 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002322 1038 F626                  		move.b	(v_pfade_start).w,d0
00002326 D0C0                       		adda.w	d0,a0
00002328 1038 F627                  		move.b	(v_pfade_size).w,d0
0000232C                            
0000232C                            	@addcolour:
0000232C 6100                       		bsr.s	WhiteOut_AddColour
0000232E 51C8 FFFC                  		dbf	d0,@addcolour
00002332                            
00002332 7000                       		moveq	#0,d0
00002334 41F8 FA80                  		lea	(v_pal_water).w,a0
00002338 1038 F626                  		move.b	(v_pfade_start).w,d0
0000233C D0C0                       		adda.w	d0,a0
0000233E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002342                            
00002342                            	@addcolour2:
00002342 6100                       		bsr.s	WhiteOut_AddColour
00002344 51C8 FFFC                  		dbf	d0,@addcolour2
00002348 4E75                       		rts	
0000234A                            ; End of function WhiteOut_ToWhite
0000234A                            
0000234A                            
0000234A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234A                            
0000234A                            
0000234A                            WhiteOut_AddColour:
0000234A                            @addred:
0000234A 3410                       		move.w	(a0),d2
0000234C 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002350 6700                       		beq.s	@next
00002352 3202                       		move.w	d2,d1
00002354 0241 000E                  		andi.w	#$E,d1
00002358 0C41 000E                  		cmpi.w	#cRed,d1
0000235C 6700                       		beq.s	@addgreen
0000235E 5458                       		addq.w	#2,(a0)+	; increase red value
00002360 4E75                       		rts	
00002362                            ; ===========================================================================
00002362                            
00002362                            @addgreen:
00002362 3202                       		move.w	d2,d1
00002364 0241 00E0                  		andi.w	#$E0,d1
00002368 0C41 00E0                  		cmpi.w	#cGreen,d1
0000236C 6700                       		beq.s	@addblue
0000236E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002372 4E75                       		rts	
00002374                            ; ===========================================================================
00002374                            
00002374                            @addblue:
00002374 3202                       		move.w	d2,d1
00002376 0241 0E00                  		andi.w	#$E00,d1
0000237A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000237E 6700                       		beq.s	@next
00002380 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002384 4E75                       		rts	
00002386                            ; ===========================================================================
00002386                            
00002386                            @next:
00002386 5448                       		addq.w	#2,a0
00002388 4E75                       		rts	
0000238A                            ; End of function WhiteOut_AddColour
0000238A                            
0000238A                            ; ---------------------------------------------------------------------------
0000238A                            ; Palette cycling routine - Sega logo
0000238A                            ; ---------------------------------------------------------------------------
0000238A                            
0000238A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000238A                            
0000238A                            
0000238A                            PalCycle_Sega:
0000238A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000238E 6600                       		bne.s	loc_206A
00002390 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002394 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000239A 7205                       		moveq	#5,d1
0000239C 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023A0                            
000023A0                            loc_2020:
000023A0 6A00                       		bpl.s	loc_202A
000023A2 5448                       		addq.w	#2,a0
000023A4 5341                       		subq.w	#1,d1
000023A6 5440                       		addq.w	#2,d0
000023A8 60F6                       		bra.s	loc_2020
000023AA                            ; ===========================================================================
000023AA                            
000023AA                            loc_202A:
000023AA 3400                       		move.w	d0,d2
000023AC 0242 001E                  		andi.w	#$1E,d2
000023B0 6600                       		bne.s	loc_2034
000023B2 5440                       		addq.w	#2,d0
000023B4                            
000023B4                            loc_2034:
000023B4 0C40 0060                  		cmpi.w	#$60,d0
000023B8 6400                       		bhs.s	loc_203E
000023BA 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000023BE                            
000023BE                            loc_203E:
000023BE 5440                       		addq.w	#2,d0
000023C0 51C9 FFE8                  		dbf	d1,loc_202A
000023C4                            
000023C4 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023C8 5440                       		addq.w	#2,d0
000023CA 3400                       		move.w	d0,d2
000023CC 0242 001E                  		andi.w	#$1E,d2
000023D0 6600                       		bne.s	loc_2054
000023D2 5440                       		addq.w	#2,d0
000023D4                            
000023D4                            loc_2054:
000023D4 0C40 0064                  		cmpi.w	#$64,d0
000023D8 6D00                       		blt.s	loc_2062
000023DA 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
000023E0 70F4                       		moveq	#-$C,d0
000023E2                            
000023E2                            loc_2062:
000023E2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023E6 7001                       		moveq	#1,d0
000023E8 4E75                       		rts	
000023EA                            ; ===========================================================================
000023EA                            
000023EA                            loc_206A:
000023EA 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000023EE 6A00                       		bpl.s	loc_20BC
000023F0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023F6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023FA 0640 000C                  		addi.w	#$C,d0
000023FE 0C40 0030                  		cmpi.w	#$30,d0
00002402 6500                       		blo.s	loc_2088
00002404 7000                       		moveq	#0,d0
00002406 4E75                       		rts	
00002408                            ; ===========================================================================
00002408                            
00002408                            loc_2088:
00002408 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000240C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002412 41F0 0000                  		lea	(a0,d0.w),a0
00002416 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
0000241A 22D8                       		move.l	(a0)+,(a1)+
0000241C 22D8                       		move.l	(a0)+,(a1)+
0000241E 3298                       		move.w	(a0)+,(a1)
00002420 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002424 7000                       		moveq	#0,d0
00002426 722C                       		moveq	#$2C,d1
00002428                            
00002428                            loc_20A8:
00002428 3400                       		move.w	d0,d2
0000242A 0242 001E                  		andi.w	#$1E,d2
0000242E 6600                       		bne.s	loc_20B2
00002430 5440                       		addq.w	#2,d0
00002432                            
00002432                            loc_20B2:
00002432 3390 0000                  		move.w	(a0),(a1,d0.w)
00002436 5440                       		addq.w	#2,d0
00002438 51C9 FFEE                  		dbf	d1,loc_20A8
0000243C                            
0000243C                            loc_20BC:
0000243C 7001                       		moveq	#1,d0
0000243E 4E75                       		rts	
00002440                            ; End of function PalCycle_Sega
00002440                            
00002440                            ; ===========================================================================
00002440                            
00002440                            Pal_Sega1:	incbin	"palette\Sega1.bin"
0000244C                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000247C                            
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            ; Subroutines to load palettes
0000247C                            
0000247C                            ; input:
0000247C                            ;	d0 = index number for palette
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            
0000247C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000247C                            
0000247C                            
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            ; Subroutines to load pallets
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            
0000247C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000247C                            
0000247C                            PalLoad1:
0000247C 1238 FE11                  		move.b ($FFFFFE11),d1
00002480 43F9 0000 0000             		lea (PalPointers).l,a1
00002486 0C01 0000                  		cmp.b #0,d1
0000248A 6700 0000                  		beq.w PalLoad1_Continue
0000248E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002494 0C01 0001                  		cmp.b #1,d1
00002498 6700 0000                  		beq.w PalLoad1_Continue
0000249C 43F9 0000 0000             		lea (PalPointers3).l,a1
000024A2                            
000024A2                            PalLoad1_Continue:
000024A2 E748                       		lsl.w #3,d0
000024A4 D2C0                       		adda.w d0,a1
000024A6 2459                       		movea.l (a1)+,a2
000024A8 3659                       		movea.w (a1)+,a3
000024AA D6FC 0080                  		adda.w #$80,a3
000024AE 3E19                       		move.w (a1)+,d7
000024B0                            
000024B0                            loc_2110:
000024B0 26DA                       		move.l (a2)+,(a3)+
000024B2 51CF FFFC                  		dbf d7,loc_2110
000024B6 4E75                       		rts
000024B8                             ; End of function PalLoad1
000024B8                            
000024B8                            
000024B8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024B8                            
000024B8                            PalLoad2:
000024B8 1238 FE11                  		move.b ($FFFFFE11),d1
000024BC 43F9 0000 0000             		lea (PalPointers).l,a1
000024C2 0C01 0000                  		cmp.b #0,d1
000024C6 6700 0000                  		beq.w PalLoad2_Continue
000024CA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024D0 0C01 0001                  		cmp.b #1,d1
000024D4 6700 0000                  		beq.w PalLoad2_Continue
000024D8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024DE                            
000024DE                            
000024DE                            PalLoad2_Continue:
000024DE E748                       		lsl.w #3,d0
000024E0 D2C0                       		adda.w d0,a1
000024E2 2459                       		movea.l (a1)+,a2
000024E4 3659                       		movea.w (a1)+,a3
000024E6 3E19                       		move.w (a1)+,d7
000024E8                            
000024E8                            loc_2128:
000024E8 26DA                       		move.l (a2)+,(a3)+
000024EA 51CF FFFC                  		dbf d7,loc_2128
000024EE 4E75                       		rts
000024F0                            ; End of function PalLoad2
000024F0                            
000024F0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024F0                            
000024F0                            
000024F0                            PalLoad_Loop: ;Quick load - TIS
000024F0                                    
000024F0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024F2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024F6 4E75                               rts
000024F8                            
000024F8                            ; ---------------------------------------------------------------------------
000024F8                            ; Underwater pallet loading subroutine
000024F8                            ; ---------------------------------------------------------------------------
000024F8                            
000024F8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024F8                            
000024F8                            PalLoad3_Water:
000024F8 1238 FE11                  		move.b ($FFFFFE11),d1
000024FC 43F9 0000 0000             		lea (PalPointers).l,a1
00002502 0C01 0000                  		cmp.b #0,d1
00002506 6700 0000                  		beq.w PalLoad3_Continue
0000250A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002510 0C01 0001                  		cmp.b #1,d1
00002514 6700 0000                  		beq.w PalLoad3_Continue
00002518 43F9 0000 0000             		lea (PalPointers3).l,a1
0000251E                            
0000251E                            PalLoad3_Continue:
0000251E E748                       		lsl.w #3,d0
00002520 D2C0                       		adda.w d0,a1
00002522 2459                       		movea.l (a1)+,a2
00002524 3659                       		movea.w (a1)+,a3
00002526 96FC 0080                  		suba.w #$80,a3
0000252A 3E19                       		move.w (a1)+,d7
0000252C                            
0000252C                            loc_2144:
0000252C 26DA                       		move.l (a2)+,(a3)+
0000252E 51CF FFFC                  		dbf d7,loc_2144
00002532 4E75                       		rts
00002534                            ; End of function PalLoad3_Water
00002534                            
00002534                            
00002534                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002534                            
00002534                            
00002534                            PalLoad4_Water:
00002534 1238 FE11                  		move.b ($FFFFFE11),d1
00002538 43F9 0000 0000             		lea (PalPointers).l,a1
0000253E 0C01 0000                  		cmp.b #0,d1
00002542 6700 0000                  		beq.w PalLoad4_Continue
00002546 43F9 0000 0000             		lea (PalPointers2).l,a1
0000254C 0C01 0001                  		cmp.b #1,d1
00002550 6700 0000                  		beq.w PalLoad4_Continue
00002554 43F9 0000 0000             		lea (PalPointers3).l,a1
0000255A                            
0000255A                            PalLoad4_Continue:
0000255A E748                       		lsl.w #3,d0
0000255C D2C0                       		adda.w d0,a1
0000255E 2459                       		movea.l (a1)+,a2
00002560 3659                       		movea.w (a1)+,a3
00002562 96FC 0100                  		suba.w #$100,a3
00002566 3E19                       		move.w (a1)+,d7
00002568                            loc_2160:
00002568 26DA                       		move.l (a2)+,(a3)+
0000256A 51CF FFFC                  		dbf d7,loc_2160
0000256E 4E75                       		rts
00002570                             ; End of function PalLoad4_Water
00002570                            
00002570                            ; ===========================================================================
00002570                            
00002570                            		include	"_inc\Palette Pointers.asm"
00002570                            ; ---------------------------------------------------------------------------
00002570                            ; Palette pointers
00002570                            ; ---------------------------------------------------------------------------
00002570                            
00002570                            palp:	macro paladdress,ramaddress,colors
00002570                            	dc.l paladdress
00002570                            	dc.w ramaddress, (colors>>1)-1
00002570                            	endm
00002570                            
00002570                            PalPointers:
00002570                            
00002570                            ; palette address, RAM address, colors
00002570                            
00002570 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002578 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002580 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002588 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002590                            Pal_Levels:
00002590 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002598 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
000025A0 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
000025A8 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
000025B0 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
000025B8 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000025C0 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000025C8 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000025D0 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000025D8 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000025E0 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000025E8 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025F8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002600 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002608 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002610 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002618 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002620 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
00002628 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002630 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
00002638 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002640 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
00002648 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002650 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002658 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002660 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002668 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002670 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002678 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002680 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002688 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002690 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002698 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000026A0 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000026A8 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000026B0 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000026B8 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000026C0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000026C8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000026D0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
000026D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
000026E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
000026E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
000026F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
000026F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002700 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002708 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002710                            			even
00002710                            
00002710                            PalPointers2:
00002710                            
00002710                            ; palette address, RAM address, colors
00002710                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002710 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002718 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002720 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002728 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002730                            Pal_Levels_2:
00002730 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002738 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
00002740 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
00002748 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
00002750 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
00002758 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002760 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002768 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002770 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002778 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002780 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002788 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002790 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002798 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000027A0 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000027A8 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
000027B0 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000027B8 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000027C0 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000027C8 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000027D0 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000027D8 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000027E0 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000027E8 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000027F0 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000027F8 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002800 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002808 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002810 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002818 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002820 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002828 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002830 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002838 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002840 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002848 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002850 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002858 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002860 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002868 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002870 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002878 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002880 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002888 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002890 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002898 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
000028A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
000028A8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
000028B0                            			even
000028B0                            			
000028B0                            PalPointers3:
000028B0                            			
000028B0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000028B0 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000028B8 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000028C0 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000028C8 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000028D0                            Pal_Levels_3:
000028D0 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
000028D8 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
000028E0 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
000028E8 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
000028F0 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
000028F8 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002900 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002908 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002910 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002918 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002920 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002928 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002930 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002938 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002940 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002948 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002950 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002958 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002960 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002968 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002970 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002978 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002980 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002988 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002990 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002998 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
000029A0 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000029A8 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000029B0 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000029B8 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
000029C0 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
000029C8 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
000029D0 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
000029D8 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000029E0 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000029E8 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000029F0 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000029F8 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002A00 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002A08 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002A10 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A18 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A20 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A28 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A30 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A38 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002A40 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002A48 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002A50                            			even
00002A50                            
00002A50                            
00002A50 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002A50 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002A50 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002A50 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002A50 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002A50 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002A50 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002A50 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002A50 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002A50 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002A50 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002A50 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002A50 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002A50 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002A50 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002A50 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002A50 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002A50 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002A50 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002A50 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002A50 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002A50 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002A50 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002A50 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002A50 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002A50 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002A50 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002A50 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002A50 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002A50 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002A50 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002A50 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002A50 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002A50 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002A50 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002A50 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002A50 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002A50 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002A50 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002A50 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002A50 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002A50 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002A50 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002A50 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002A50 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002A50 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002A50 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002A50 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002A50 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002A50 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002A50 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002A50 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002A50 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002A50 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002A50 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002A50 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002A50 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002A50 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002A50 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002A50 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002A50 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002A50 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002A50 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002A50 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002A50 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002A50 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002A50 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002A50                            		
00002A50                            		;include	"_inc\Palette Pointers2.asm"
00002A50                            		
00002A50                            		;include	"_inc\Palette Pointers3.asm"
00002A50                            		
00002A50                            
00002A50                            ; ---------------------------------------------------------------------------
00002A50                            ; Palette data
00002A50                            ; ---------------------------------------------------------------------------
00002A50                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002AD0                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002B50                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002BD0                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002BF0                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002C50                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002CB0                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002D10                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002D70                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002DD0                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002E30                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002EB0                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002F30                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002FB0                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00003010                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00003070                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
000030D0                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003130                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003190                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
000031F0                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
00003250                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
000032B0                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003310                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
00003370                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
000033D0                            Pal_Special:	incbin	"palette\Special Stage.bin"
00003450                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
000034B0                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003530                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
00003550                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
00003570                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003590                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003610                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
00003650                            Pal_Ending:	incbin	"palette\Ending.bin"
000036D0                            Pal_Options:	incbin	"palette\Options.bin"
00003750                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
00003770                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003790                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
000037B0                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
000037D0                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
000037F0                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003810                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003830                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
00003850                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
00003870                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
00003890                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000038B0                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
000038D0                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
000038F0                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003910                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003930                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003950                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
00003970                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003990                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000039B0                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
000039D0                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
000039F0                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003A10                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003A30                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003A50                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003A70                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003A90                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003AB0                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003AD0                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003AF0                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003B10                            ; ---------------------------------------------------------------------------
00003B10                            ; Subroutine to	wait for VBlank routines to complete
00003B10                            ; ---------------------------------------------------------------------------
00003B10                            
00003B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B10                            
00003B10                            
00003B10                            WaitForVBla:
00003B10 46FC 2300                  		enable_ints
00003B14                            
00003B14                            	@wait:
00003B14 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003B18 66FA                       		bne.s	@wait		; if not, branch
00003B1A 4E75                       		rts	
00003B1C                            ; End of function WaitForVBla
00003B1C                            
00003B1C                            		include	"_incObj\sub RandomNumber.asm"
00003B1C                            ; ---------------------------------------------------------------------------
00003B1C                            ; Subroutine to	generate a pseudo-random number	in d0
00003B1C                            ; ---------------------------------------------------------------------------
00003B1C                            
00003B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B1C                            
00003B1C                            
00003B1C                            RandomNumber:
00003B1C 2238 F636                  		move.l	(v_random).w,d1
00003B20 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003B22 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003B28                            
00003B28                            	@scramble:
00003B28 2001                       		move.l	d1,d0
00003B2A E581                       		asl.l	#2,d1
00003B2C D280                       		add.l	d0,d1
00003B2E E781                       		asl.l	#3,d1
00003B30 D280                       		add.l	d0,d1
00003B32 3001                       		move.w	d1,d0
00003B34 4841                       		swap	d1
00003B36 D041                       		add.w	d1,d0
00003B38 3200                       		move.w	d0,d1
00003B3A 4841                       		swap	d1
00003B3C 21C1 F636                  		move.l	d1,(v_random).w
00003B40 4E75                       		rts	
00003B40 4E75                       		rts	
00003B42                            		include	"_incObj\sub CalcSine.asm"
00003B42                            ; ---------------------------------------------------------------------------
00003B42                            ; Subroutine calculate a sine
00003B42                            
00003B42                            ; input:
00003B42                            ;	d0 = angle
00003B42                            
00003B42                            ; output:
00003B42                            ;	d0 = sine
00003B42                            ;	d1 = cosine
00003B42                            ; ---------------------------------------------------------------------------
00003B42                            
00003B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B42                            
00003B42                            
00003B42                            CalcSine:
00003B42 0240 00FF                          andi.w  #$FF,d0
00003B46 5040                               addq.w  #8,d0
00003B48 D040                               add.w   d0,d0
00003B4A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003B4E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003B52 4E75                               rts
00003B54                            ; End of function CalcSine
00003B54                            
00003B54                            ; ===========================================================================
00003B54                            
00003B54                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003DD4                            
00003DD4                            ; ===========================================================================
00003DD4                            ; ===========================================================================
00003DD4                            		include	"_incObj\sub CalcAngle.asm"
00003DD4                            ; ---------------------------------------------------------------------------
00003DD4                            ; Subroutine calculate an angle
00003DD4                            
00003DD4                            ; input:
00003DD4                            ;	d1 = x-axis distance
00003DD4                            ;	d2 = y-axis distance
00003DD4                            
00003DD4                            ; output:
00003DD4                            ;	d0 = angle
00003DD4                            ; ---------------------------------------------------------------------------
00003DD4                            
00003DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DD4                            
00003DD4                            
00003DD4                            CalcAngle:
00003DD4 48E7 1800                  		movem.l	d3-d4,-(sp)
00003DD8 7600                       		moveq	#0,d3
00003DDA 7800                       		moveq	#0,d4
00003DDC 3601                       		move.w	d1,d3
00003DDE 3802                       		move.w	d2,d4
00003DE0 8843                       		or.w	d3,d4
00003DE2 6700                       		beq.s	loc_2D04
00003DE4 3802                       		move.w	d2,d4
00003DE6 4A43                       		tst.w	d3
00003DE8 6A00 0000                  		bpl.w	loc_2CC2
00003DEC 4443                       		neg.w	d3
00003DEE                            
00003DEE                            loc_2CC2:
00003DEE 4A44                       		tst.w	d4
00003DF0 6A00 0000                  		bpl.w	loc_2CCA
00003DF4 4444                       		neg.w	d4
00003DF6                            
00003DF6                            loc_2CCA:
00003DF6 B843                       		cmp.w	d3,d4
00003DF8 6400 0000                  		bcc.w	loc_2CDC
00003DFC E18C                       		lsl.l	#8,d4
00003DFE 88C3                       		divu.w	d3,d4
00003E00 7000                       		moveq	#0,d0
00003E02 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003E06 6000                       		bra.s	loc_2CE6
00003E08                            ; ===========================================================================
00003E08                            
00003E08                            loc_2CDC:
00003E08 E18B                       		lsl.l	#8,d3
00003E0A 86C4                       		divu.w	d4,d3
00003E0C 7040                       		moveq	#$40,d0
00003E0E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003E12                            
00003E12                            loc_2CE6:
00003E12 4A41                       		tst.w	d1
00003E14 6A00 0000                  		bpl.w	loc_2CF2
00003E18 4440                       		neg.w	d0
00003E1A 0640 0080                  		addi.w	#$80,d0
00003E1E                            
00003E1E                            loc_2CF2:
00003E1E 4A42                       		tst.w	d2
00003E20 6A00 0000                  		bpl.w	loc_2CFE
00003E24 4440                       		neg.w	d0
00003E26 0640 0100                  		addi.w	#$100,d0
00003E2A                            
00003E2A                            loc_2CFE:
00003E2A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003E2E 4E75                       		rts	
00003E30                            ; ===========================================================================
00003E30                            
00003E30                            loc_2D04:
00003E30 303C 0040                  		move.w	#$40,d0
00003E34 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003E38 4E75                       		rts	
00003E3A                            ; End of function CalcAngle
00003E3A                            
00003E3A                            ; ===========================================================================
00003E3A                            
00003E3A                            Angle_Data:	incbin	"misc\angles.bin"
00003F3C                            
00003F3C                            ; ===========================================================================
00003F3C                            ; ===========================================================================
00003F3C                            
00003F3C                            ; ---------------------------------------------------------------------------
00003F3C                            ; Sega screen
00003F3C                            ; ---------------------------------------------------------------------------
00003F3C                            
00003F3C                            GM_Sega:
00003F44 6100 D852                  		bsr.w	ClearPLC
00003F48 6100 E288                  		bsr.w	PaletteFadeOut
00003F4C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F52 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003F56 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F5A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F5E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003F62 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003F66 4238 F64E                  		clr.b	(f_wtr_state).w
00003F6A 46FC 2700                  		disable_ints
00003F6E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F72 0200 00BF                  		andi.b	#$BF,d0
00003F76 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F7C 6100 D252                  		bsr.w	ClearScreen
00003F8A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003F90 6100 D3BC                  		bsr.w	NemDec
00003F94 43F9 00FF 0000             		lea	($FF0000).l,a1
00003F9A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003FA0 303C 0000                  		move.w	#0,d0
00003FA4 6100 D932                  		bsr.w	EniDec
00003FA8                            
00003FA8 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003FBC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003FD0                            
00003FD0 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003FD4 6B00                       			bmi.s   @loadpal
00003FD6 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003FEA                            
00003FEA                            	@loadpal:
00003FEA 7000                       		moveq	#palid_SegaBG,d0
00003FEC 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
00003FF0 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003FF6 7E3F                               moveq    #$3F,d7
00003FF8                             
00003FF8                                .loop:
00003FF8 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003FFC 51CF FFFA                          dbf        d7,.loop
00004000 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
00004004 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
0000400A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00004010 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00004016 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
0000401C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004020 0000 0040                  		ori.b	#$40,d0
00004024 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000402A                            
0000402A                            Sega_WaitPal:
0000402A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00004030 6100 FADE                  		bsr.w	WaitForVBla
00004034 6100 E354                  		bsr.w	PalCycle_Sega
00004038 66F0                       		bne.s	Sega_WaitPal
0000403A                            
00004042 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00004048 6100 FAC6                  		bsr.w	WaitForVBla
0000404C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004052                            
00004052                            Sega_WaitEnd:
00004052 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00004058 6100 FAB6                  		bsr.w	WaitForVBla
0000405C 4A78 F614                  		tst.w	(v_demolength).w
00004060 6700                       		beq.s	Sega_GotoTitle
00004062 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004068 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000406A                            
0000406A                            Sega_GotoTitle:
0000406A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004070 4E75                       		rts	
00004072                            ; ===========================================================================
00004072                            
00004072                            ; ---------------------------------------------------------------------------
00004072                            ; Title	screen
00004072                            ; ---------------------------------------------------------------------------
00004072                            
00004072                            GM_Title:
0000407A 6100 D71C                  		bsr.w	ClearPLC
0000407E 6100 E152                  		bsr.w	PaletteFadeOut
00004082 46FC 2700                  		disable_ints
00004086 6100 D1CE                  		bsr.w	SoundDriverLoad
0000408A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004090 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00004094 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004098 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000409C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000040A0 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
000040A4 3CBC 8B03                  		move.w	#$8B03,(a6)
000040A8 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
000040AC 4238 F64E                  		clr.b	(f_wtr_state).w
000040B0 6100 D11E                  		bsr.w	ClearScreen
000040B4                            		;jsr		SHC2022 
000040B4                            
000040B4 43F8 D000                  		lea	(v_objspace).w,a1
000040B8 7000                       		moveq	#0,d0
000040BA 323C 07FF                  		move.w	#$7FF,d1
000040BE                            
000040BE                            	Tit_ClrObj1:
000040BE 22C0                       		move.l	d0,(a1)+
000040C0 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
000040C4                            
000040CE 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000040D4 6100 D278                  		bsr.w	NemDec
000040E2 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000040E8 6100 D264                  		bsr.w	NemDec
000040EC 43F9 00FF 0000             		lea	($FF0000).l,a1
000040F2 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000040F8 303C 0000                  		move.w	#0,d0
000040FC 6100 D7DA                  		bsr.w	EniDec
00004100                            
00004100 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
00004114                            
00004114 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00004118 7000                       		moveq	#cBlack,d0
0000411A 323C 001F                  		move.w	#$1F,d1
0000411E                            
0000411E                            	Tit_ClrPal:
0000411E 22C0                       		move.l	d0,(a1)+
00004120 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
00004124                            
00004124 4EB9 0000 0000             		jsr		LoadPlayerPal
0000412A 6100 E350                  		bsr.w	PalLoad1
0000412E 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
00004134 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000413A 4EB9 0000 0000             		jsr	(BuildSprites).l
00004140 6100 DFEA                  		bsr.w	PaletteFadeIn
00004144 46FC 2700                  		disable_ints
00004152 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004158 6100 D1F4                  		bsr.w	NemDec
00004166 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000416C 6100 D1E0                  		bsr.w	NemDec
0000417A 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
00004180 6100 D1CC                  		bsr.w 	NemDec
00004184 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004192 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
00004198 323C 028F                  		move.w	#$28F,d1
0000419C                            
0000419C                            	Tit_LoadText:
0000419C 3C9D                       		move.w	(a5)+,(a6)
0000419E 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
000041A2                            
000041A2 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000041A8 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000041AE 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000041B4 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000041BA 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000041C0 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000041C6 6100 0000                  		bsr.w	LevelSizeLoad
000041CA 6100 0000                  		bsr.w	DeformLayers
000041CE 43F8 B000                  		lea	(v_16x16).w,a1
000041D2 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000041D8 303C 0000                  		move.w	#0,d0
000041DC 6100 D6FA                  		bsr.w	EniDec
000041E0 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000041E6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000041EC 6100 D868                  		bsr.w	KosDec
000041F0 6100 0000                  		bsr.w	LevelLayoutLoad
000041F4 6100 DFDC                  		bsr.w	PaletteFadeOut
000041F8 46FC 2700                  		disable_ints
000041FC 6100 CFD2                  		bsr.w	ClearScreen
00004200 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004206 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000420C 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00004210 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00004214 343C 6000                  		move.w	#$6000,d2
00004218 6100 0000                  		bsr.w	DrawChunks
0000421C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004222 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004228 303C 0000                  		move.w	#0,d0
0000422C 6100 D6AA                  		bsr.w	EniDec
00004230                            
00004230 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004244                            
0000424E 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004254 6100 D0F8                  		bsr.w	NemDec
00004258 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000425A 6100 E220                  		bsr.w	PalLoad1
00004266 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
0000426C 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00004272 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004276 7000                       		moveq	#0,d0
00004278 323C 0007                  		move.w	#7,d1
0000427C                            
0000427C                            	Tit_ClrObj2:
0000427C 22C0                       		move.l	d0,(a1)+
0000427E 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00004282                            
00004282 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004288 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
0000428E 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00004292                            
00004292 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004296 6A00                       			bpl.s   @isjap		; if yes, branch
00004298                            
00004298 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
0000429E 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000042A4                            	@isjap:
000042A4 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000042AA 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000042B0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000042B6 6100 0000                  		bsr.w	DeformLayers
000042BA 4EB9 0000 0000             		jsr	(BuildSprites).l
000042C0 7000                       		moveq	#plcid_Main,d0
000042C2 6100 D4A8                  		bsr.w	NewPLC
000042C6 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000042CC 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000042D2 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000042D6 0000 0040                  		ori.b	#$40,d0
000042DA 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000042E0 6100 DE4A                  		bsr.w	PaletteFadeIn
000042E4                            
000042E4                            Tit_MainLoop:
000042E4 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000042EA 6100 F824                  		bsr.w	WaitForVBla
000042EE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000042F4 6100 0000                  		bsr.w	DeformLayers
000042F8 4EB9 0000 0000             		jsr	(BuildSprites).l
000042FE 6100 DA3E                  		bsr.w	PCycle_Title
00004302 6100 D4A2                  		bsr.w	RunPLC
00004306 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000430A 5440                       		addq.w	#2,d0
0000430C 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00004310 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00004314 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004316                            
00004316 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
0000431C 4E75                       		rts	
0000431E                            ; ===========================================================================
0000431E                            
0000431E                            Tit_ChkRegion:
0000431E 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004322 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004324                            
00004324 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
0000432A 6000                       		bra.s	Tit_EnterCheat
0000432C                            
0000432C                            	Tit_RegionJap:
0000432C 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004332                            
00004332                            Tit_EnterCheat:
00004332 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004336 D0C0                       		adda.w	d0,a0
00004338 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
0000433C 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004340 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004342 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004344 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004348 4A00                       		tst.b	d0
0000434A 6600                       		bne.s	Tit_CountC
0000434C 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004350 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004354 E249                       		lsr.w	#1,d1
00004356 0241 0003                  		andi.w	#3,d1
0000435A 6700                       		beq.s	Tit_PlayRing
0000435C 4A38 FFF8                  		tst.b	(v_megadrive).w
00004360 6A00                       		bpl.s	Tit_PlayRing
00004362 7201                       		moveq	#1,d1
00004364 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004368                            
00004368                            	Tit_PlayRing:
00004368 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004376 6000                       		bra.s	Tit_CountC
00004378                            ; ===========================================================================
00004378                            
00004378                            Tit_ResetCheat:
00004378 4A00                       		tst.b	d0
0000437A 6700                       		beq.s	Tit_CountC
0000437C 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00004382 6700                       		beq.s	Tit_CountC
00004384 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
0000438A                            
0000438A                            Tit_CountC:
0000438A 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000438E 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004392 6700                       		beq.s	loc_3230	; if not, branch
00004394 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
00004398                            		
00004398                            loc_3230:
00004398 4A78 F614                  		tst.w	(v_demolength).w
0000439C 6700 0000                  		beq.w	GotoDemo
000043A0 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000043A6 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
000043AA                            
000043AA                            Tit_ChkLevSel:
000043AA 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000043AE 6700 0000                  		beq.w	@cont	; if not, play level
000043B2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000043B8 6700 0000                  		beq.w	@cont	; if not, play level
000043BC 6000 0000                  		bra.w	Tit_LevelSelect
000043C0                            
000043C0                            	@cont:		
000043C0 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
000043C6 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
000043CA 7400                       		moveq	#0,d2
000043CC 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
000043D0 D442                       		add.w	d2,d2            ; multiply by 2
000043D2 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
000043D6 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000043DA                            
000043DA                            ; ===========================================================================
000043DA                            Tit_Menu_Choice:
000043DA 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000043DC 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000043DE                            ; ===========================================================================
000043DE                            
000043DE                            Menu_Options:
000043DE 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
000043E4 4E75                       		rts
000043E6                            
000043E6                            Tit_LevelSelect:	
000043E6 7002                       		moveq	#palid_LevelSel,d0
000043E8 6100 E0CE                  		bsr.w	PalLoad2	; load level select palette
000043EC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000043F0 7000                       		moveq	#0,d0
000043F2 323C 00DF                  		move.w	#$DF,d1
000043F6                            
000043F6                            	Tit_ClrScroll1:
000043F6 22C0                       		move.l	d0,(a1)+
000043F8 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000043FC                            
000043FC 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
00004400 46FC 2700                  		disable_ints
00004404 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004414 323C 03FF                  		move.w	#$3FF,d1
00004418                            
00004418                            	Tit_ClrScroll2:
00004418 2C80                       		move.l	d0,(a6)
0000441A 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000441E                            
0000441E 6100 0000                  		bsr.w	LevSelTextLoad
00004422                            
00004422                            ; ---------------------------------------------------------------------------
00004422                            ; Level	Select
00004422                            ; ---------------------------------------------------------------------------
00004422                            
00004422                            LevelSelect:
00004422 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004428 6100 F6E6                  		bsr.w	WaitForVBla
0000442C 6100 0000                  		bsr.w	LevSelControls
00004430 6100 D374                  		bsr.w	RunPLC
00004434 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004438 66E8                       		bne.s	LevelSelect
0000443A 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
00004440 67E0                       		beq.s	LevelSelect	; if not, branch
00004442 3038 FF82                  		move.w	(v_levselitem).w,d0
00004446 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
0000444A 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000444C 3038 FF84                  		move.w	(v_levselsound).w,d0
00004450 0640 0080                  		addi.w	#$80,d0
00004454                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
00004454                            		;beq.s	LevSel_Ending	; if yes, branch
00004454                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
00004454                            		;beq.s	LevSel_Credits	; if yes, branch
00004454                            
00004454                            LevSel_PlaySnd:
00004454 6100 CE4A                  		bsr.w	PlaySound_Special
00004458 60C8                       		bra.s	LevelSelect
0000445A                            ; ===========================================================================
0000445A                            
0000445A                            LevSel_Ending:
0000445A 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004460 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
00004466 4E75                       		rts	
00004468                            ; ===========================================================================
00004468                            
00004468                            LevSel_Credits:
00004468 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
00004476 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
0000447C 4E75                       		rts	
0000447E                            ; ===========================================================================
0000447E                            
0000447E                            LevSel_Level_SS:
0000447E D040                       		add.w	d0,d0
00004480 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00004484 6B00 FF9C                  		bmi.w	LevelSelect
00004488 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
0000448C 6600                       		bne.s	LevSel_Level	; if not, branch
0000448E 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004494 4278 FE10                  		clr.w	(v_zone).w	; clear	level
00004498 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000449E 7000                       		moveq	#0,d0
000044A0 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044A4 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044A8 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044AC 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044B4 4E75                       		rts	
000044B6                            ; ===========================================================================
000044B6                            
000044B6                            LevSel_Level:
000044B6 0240 3FFF                  		andi.w	#$3FFF,d0
000044BA 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000044BE                            
000044BE                            PlayLevel:
000044BE 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000044C4 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000044CA 7000                       		moveq	#0,d0
000044CC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044D0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044D4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044D8 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000044DC 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000044E0 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000044E4 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000044E8 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000044EE 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044FE 4E75                       		rts	
00004500                            ; ===========================================================================
00004500                            ; ---------------------------------------------------------------------------
00004500                            ; Level	select - level pointers
00004500                            ; ---------------------------------------------------------------------------
00004500                            		; correct level order
00004500 0000                       		dc.b id_GHZ, 0
00004502 0001                       		dc.b id_GHZ, 1
00004504 0002                       		dc.b id_GHZ, 2
00004506 0200                       		dc.b id_MZ, 0
00004508 0201                       		dc.b id_MZ, 1
0000450A 0202                       		dc.b id_MZ, 2
0000450C 0400                       		dc.b id_SYZ, 0
0000450E 0401                       		dc.b id_SYZ, 1
00004510 0402                       		dc.b id_SYZ, 2
00004512 0100                       		dc.b id_LZ, 0
00004514 0101                       		dc.b id_LZ, 1
00004516 0102                       		dc.b id_LZ, 2
00004518 0300                       		dc.b id_SLZ, 0
0000451A 0301                       		dc.b id_SLZ, 1
0000451C 0302                       		dc.b id_SLZ, 2
0000451E 0500                       		dc.b id_SBZ, 0
00004520 0501                       		dc.b id_SBZ, 1
00004522 0103                       		dc.b id_LZ, 3
00004524 0502                       		dc.b id_SBZ, 2
00004526 0700                       		dc.b id_SS, 0		; Special Stage
00004528 8000                       		dc.w $8000		; Sound Test
0000452A                            		even
0000452A                            ; ---------------------------------------------------------------------------
0000452A                            ; Level	select codes
0000452A                            ; ---------------------------------------------------------------------------
0000452A 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004532                            		even
00004532                            
00004532 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
00004538                            		even
00004538                            ; ===========================================================================
00004538                            
00004538                            ; ---------------------------------------------------------------------------
00004538                            ; Demo mode
00004538                            ; ---------------------------------------------------------------------------
00004538                            
00004538                            GotoDemo:
00004538 31FC 001E F614             		move.w	#$1E,(v_demolength).w
0000453E                            
0000453E                            loc_33B6:
0000453E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004544 6100 F5CA                  		bsr.w	WaitForVBla
00004548 6100 0000                  		bsr.w	DeformLayers
0000454C 6100 D7D0                  		bsr.w	PaletteCycle
00004550 6100 D254                  		bsr.w	RunPLC
00004554 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004558 5440                       		addq.w	#2,d0
0000455A 31C0 D008                  		move.w	d0,(v_objspace+obX).w
0000455E 0C40 1C00                  		cmpi.w	#$1C00,d0
00004562 6500                       		blo.s	loc_33E4
00004564 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000456A 4E75                       		rts	
0000456C                            ; ===========================================================================
0000456C                            
0000456C                            loc_33E4:
0000456C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004572 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
00004576 4A78 F614                  		tst.w	(v_demolength).w
0000457A 6600 FFC2                  		bne.w	loc_33B6
00004586 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
0000458A 0240 0007                  		andi.w	#7,d0
0000458E D040                       		add.w	d0,d0
00004590 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004594 31C0 FE10                  		move.w	d0,(v_zone).w
00004598 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
0000459C 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
000045A2 6500                       		blo.s	loc_3422	; if yes, branch
000045A4 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000045AA                            
000045AA                            loc_3422:
000045AA 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000045B0 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000045B6 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000045BA 6600                       		bne.s	Demo_Level	; if not, branch
000045BC 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045C2 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000045C6 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000045CA                            
000045CA                            Demo_Level:
000045CA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045D0 7000                       		moveq	#0,d0
000045D2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045D6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045DA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045DE 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000045E6 4E75                       		rts	
000045E8                            ; ===========================================================================
000045E8                            ; ---------------------------------------------------------------------------
000045E8                            ; Levels used in demos
000045E8                            ; ---------------------------------------------------------------------------
000045E8                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000045F0                            		even
000045F0                            
000045F0                            ; ---------------------------------------------------------------------------
000045F0                            ; Subroutine to	change what you're selecting in the level select
000045F0                            ; ---------------------------------------------------------------------------
000045F0                            
000045F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045F0                            
000045F0                            
000045F0                            LevSelControls:
000045F0 1238 F605                  		move.b	(v_jpadpress1).w,d1
000045F4 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000045F8 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000045FA 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000045FE 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004600                            
00004600                            LevSel_UpDown:
00004600 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004606 1238 F604                  		move.b	(v_jpadhold1).w,d1
0000460A 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000460E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004610 3038 FF82                  		move.w	(v_levselitem).w,d0
00004614 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004618 6700                       		beq.s	LevSel_Down	; if not, branch
0000461A 5340                       		subq.w	#1,d0		; move up 1 selection
0000461C 6400                       		bhs.s	LevSel_Down
0000461E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004620                            
00004620                            LevSel_Down:
00004620 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004624 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004626 5240                       		addq.w	#1,d0		; move down 1 selection
00004628 0C40 0015                  		cmpi.w	#$15,d0
0000462C 6500                       		blo.s	LevSel_Refresh
0000462E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004630                            
00004630                            LevSel_Refresh:
00004630 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004634 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004638 4E75                       		rts	
0000463A                            ; ===========================================================================
0000463A                            
0000463A                            LevSel_SndTest:
0000463A 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004640 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004642 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004646 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
0000464A 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000464C 3038 FF84                  		move.w	(v_levselsound).w,d0
00004650 0801 0002                  		btst	#bitL,d1	; is left pressed?
00004654 6700                       		beq.s	LevSel_Right	; if not, branch
00004656 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004658 6400                       		bhs.s	LevSel_Right
0000465A 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
0000465C                            
0000465C                            LevSel_Right:
0000465C 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004660 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004662 5240                       		addq.w	#1,d0		; add 1	to sound test
00004664 0C40 0056                  		cmpi.w	#$56,d0
00004668 6500                       		blo.s	LevSel_Refresh2
0000466A 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
0000466C                            
0000466C                            LevSel_Refresh2:
0000466C 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004670 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004674                            
00004674                            LevSel_NoMove:
00004674 4E75                       		rts	
00004676                            ; End of function LevSelControls
00004676                            
00004676                            ; ---------------------------------------------------------------------------
00004676                            ; Subroutine to load level select text
00004676                            ; ---------------------------------------------------------------------------
00004676                            
00004676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004676                            
00004676                            
00004676                            LevSelTextLoad:
00004676                            
00004676 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
00004676                            					; $E210 is a VRAM address
00004676                            
00004676 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000467C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004682 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
00004688 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
0000468C 7214                       		moveq	#$14,d1		; number of lines of text
0000468E                            
0000468E                            	LevSel_DrawAll:
0000468E 2D44 0004                  		move.l	d4,4(a6)
00004692 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00004696 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
0000469C 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
000046A0                            
000046A0 7000                       		moveq	#0,d0
000046A2 3038 FF82                  		move.w	(v_levselitem).w,d0
000046A6 3200                       		move.w	d0,d1
000046A8 283C 6210 0003             		move.l	#textpos,d4
000046AE EF48                       		lsl.w	#7,d0
000046B0 4840                       		swap	d0
000046B2 D880                       		add.l	d0,d4
000046B4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000046BA E749                       		lsl.w	#3,d1
000046BC 3001                       		move.w	d1,d0
000046BE D241                       		add.w	d1,d1
000046C0 D240                       		add.w	d0,d1
000046C2 D2C1                       		adda.w	d1,a1
000046C4 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000046C8 2D44 0004                  		move.l	d4,4(a6)
000046CC 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000046D0 363C E680                  		move.w	#$E680,d3
000046D4 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000046DA 6600                       		bne.s	LevSel_DrawSnd
000046DC 363C C680                  		move.w	#$C680,d3
000046E0                            
000046E0                            LevSel_DrawSnd:
000046EA 3038 FF84                  		move.w	(v_levselsound).w,d0
000046EE 0640 0080                  		addi.w	#$80,d0
000046F2 1400                       		move.b	d0,d2
000046F4 E808                       		lsr.b	#4,d0
000046F6 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000046FA 1002                       		move.b	d2,d0
000046FC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
00004700 4E75                       		rts	
00004702                            ; End of function LevSelTextLoad
00004702                            
00004702                            
00004702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004702                            
00004702                            
00004702                            LevSel_ChgSnd:
00004702 0240 000F                  		andi.w	#$F,d0
00004706 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
0000470A 6500                       		blo.s	LevSel_Numb	; if not, branch
0000470C 5E00                       		addi.b	#7,d0		; use alpha characters
0000470E                            
0000470E                            	LevSel_Numb:
0000470E D043                       		add.w	d3,d0
00004710 3C80                       		move.w	d0,(a6)
00004712 4E75                       		rts	
00004714                            ; End of function LevSel_ChgSnd
00004714                            
00004714                            
00004714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004714                            
00004714                            
00004714                            LevSel_ChgLine:
00004714 7417                       		moveq	#$17,d2		; number of characters per line
00004716                            
00004716                            	LevSel_LineLoop:
00004716 7000                       		moveq	#0,d0
00004718 1019                       		move.b	(a1)+,d0	; get character
0000471A 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
0000471C 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004720 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004724 4E75                       		rts	
00004726                            
00004726                            
00004726                            	LevSel_CharOk:
00004726 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004728 3C80                       		move.w	d0,(a6)		; send to VRAM
0000472A 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000472E 4E75                       		rts	
00004730                            ; End of function LevSel_ChgLine
00004730                            
00004730                            ; ===========================================================================
00004730                            ; ---------------------------------------------------------------------------
00004730                            ; Level	select menu text
00004730                            ; ---------------------------------------------------------------------------
00004730                            		incbin	"misc\Level Select Text (JP1).bin"
00004928                            		even
00004928                            ; ---------------------------------------------------------------------------
00004928                            ; Music	playlist
00004928                            ; ---------------------------------------------------------------------------
00004928                            MusicList:
00004928 00                         			dc.b bgm_GHZ    ; GHZ1
00004929 00                                 	dc.b bgm_LZ    ; GHZ2
0000492A 00                                 	dc.b bgm_Seaside   ; GHZ3
0000492B 00                                 	dc.b bgm_LZ    ; GHZ4
0000492C 00                                 	dc.b bgm_Stop    ; LZ1
0000492D 00                                 	dc.b bgm_Stop   ; LZ2
0000492E 00                                 	dc.b bgm_Stop    ; LZ3
0000492F 00                                 	dc.b bgm_SBZ3    ; LZ4
00004930 00                                 	dc.b bgm_MZ    ; MZ1
00004931 00                                 	dc.b bgm_SBZ    ; MZ2
00004932 00                                 	dc.b bgm_RRZ2   ; MZ3
00004933 00                                 	dc.b bgm_SBZ    ; MZ4
00004934 00                                 	dc.b bgm_LZ    ; SLZ1
00004935 00                                 	dc.b bgm_LZ    ; SLZ2
00004936 00                                 	dc.b bgm_LZ    ; SLZ3
00004937 00                                 	dc.b bgm_LZ    ; SLZ4
00004938 00                                 	dc.b bgm_SYZ    ; SYZ1
00004939 00                                 	dc.b bgm_SLZ    ; SYZ2
0000493A 00                                 	dc.b bgm_SLZ    ; SYZ3
0000493B 00                                 	dc.b bgm_SLZ    ; SYZ4
0000493C 00                                 	dc.b bgm_SBZ    ; SBZ1
0000493D 00                                 	dc.b bgm_SBZ    ; SBZ2
0000493E 00                                 	dc.b bgm_FZ		; SBZ3
0000493F 00                                 	dc.b bgm_SBZ    ; SBZ4
00004940 00                                 	dc.b bgm_GHZ    ; GHZ1
00004941 00                                 	dc.b bgm_GHZ    ; GHZ1
00004942 00                                 	dc.b bgm_GHZ    ; GHZ1
00004943 00                                 	dc.b bgm_GHZ    ; GHZ1
00004944                                    	even
00004944                            ; ===========================================================================
00004944                            
00004944                            ; ---------------------------------------------------------------------------
00004944                            ; Level
00004944                            ; ---------------------------------------------------------------------------
00004944                            
00004944                            GM_Level:
00004944 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
0000494A                            
0000494A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004950 4A78 FFF0                  		tst.w	(f_demo).w
00004954 6B00                       		bmi.s	Level_NoMusicFade
0000495E                            
0000495E                            	Level_NoMusicFade:
0000495E 6100 CE38                  		bsr.w	ClearPLC
00004962 6100 D86E                  		bsr.w	PaletteFadeOut
00004966 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000496A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000496C 46FC 2700                  		disable_ints
0000497A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004980 6100 C9CC                  		bsr.w	NemDec
00004984 46FC 2300                  		enable_ints
00004988 7000                       		moveq	#0,d0
0000498A 1038 FE10                  		move.b	(v_zone).w,d0
0000498E E948                       		lsl.w	#4,d0
00004990 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004996 45F2 0000                  		lea	(a2,d0.w),a2
0000499A 7000                       		moveq	#0,d0
0000499C 1012                       		move.b	(a2),d0
0000499E 6700                       		beq.s	loc_37FC
000049A0 6100 CD98                  		bsr.w	AddPLC		; load level patterns
000049A4                            
000049A4                            loc_37FC:
000049A4 7000                       		moveq	#plcid_Main2,d0
000049A6 6100 CD92                  		bsr.w	AddPLC		; load standard	patterns
000049AA                            
000049AA                            Level_ClrRam:
000049AA 43F8 D000                  		lea	(v_objspace).w,a1
000049AE 7000                       		moveq	#0,d0
000049B0 323C 07FF                  		move.w	#$7FF,d1
000049B4                            
000049B4                            	Level_ClrObjRam:
000049B4 22C0                       		move.l	d0,(a1)+
000049B6 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000049BA                            
000049BA 43F8 F628                  		lea	($FFFFF628).w,a1
000049BE 7000                       		moveq	#0,d0
000049C0 323C 0015                  		move.w	#$15,d1
000049C4                            
000049C4                            	Level_ClrVars1:
000049C4 22C0                       		move.l	d0,(a1)+
000049C6 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
000049CA                            
000049CA 43F8 F700                  		lea	(v_screenposx).w,a1
000049CE 7000                       		moveq	#0,d0
000049D0 323C 003F                  		move.w	#$3F,d1
000049D4                            
000049D4                            	Level_ClrVars2:
000049D4 22C0                       		move.l	d0,(a1)+
000049D6 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000049DA                            
000049DA 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000049DE 7000                       		moveq	#0,d0
000049E0 323C 0047                  		move.w	#$47,d1
000049E4                            
000049E4                            	Level_ClrVars3:
000049E4 22C0                       		move.l	d0,(a1)+
000049E6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000049EA                            
000049EA 46FC 2700                  		disable_ints
000049EE 6100 C7E0                  		bsr.w	ClearScreen
000049F2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000049F8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000049FC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004A00 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004A04 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004A08 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004A0C 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004A10 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004A14 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004A1A 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004A1E 31FC C800 C8FC             		ResetDMAQueue	
00004A24 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A2A 6600                       		bne.s	Level_LoadPal	; if not, branch
00004A2C                            
00004A2C 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004A30 7000                       		moveq	#0,d0
00004A32 1038 FE11                  		move.b	(v_act).w,d0
00004A36 D040                       		add.w	d0,d0
00004A38 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004A3E 3031 0000                  		move.w	(a1,d0.w),d0
00004A42 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004A46 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004A4A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004A4E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004A52 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004A56 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004A5C                            
00004A5C                            Level_LoadPal:
00004A5C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004A62 46FC 2300                  		move	#$2300,sr
00004A66 4EB9 0000 0000             		jsr		LoadPlayerPal
00004A6C 6100 DA4A                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004A70 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004A76 6600                       		bne.s	Level_GetBgm	; if not, branch
00004A78 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004A7E 6100 DA78                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004A82 4A38 FE30                  		tst.b	($FFFFFE30).w
00004A86 6700                       		beq.s	Level_GetBgm
00004A88 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004A8E                            
00004A8E                            	Level_GetBgm:
00004A8E 4A78 FFF0                  		tst.w	(f_demo).w
00004A92 6B00                               	bmi.s	Level_SkipTtlCard
00004A94 7000                               	moveq	#0,d0
00004A96 3038 FE10                  		move.w	(v_zone).w,d0
00004A9A E418                       		ror.b	#2,d0
00004A9C EC48                       		lsr.w   #6,d0
00004A9E 43F9 0000 4928                     	lea	(MusicList).l,a1 ; load    music playlist
00004AA4 1031 0000                          	move.b	(a1,d0.w),d0
00004AA8 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004AAC 6100 C7EC                          	bsr.w	PlaySound    ; play music
00004AB0 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004AB6                            
00004AB6                            
00004AB6                            Level_TtlCardLoop:
00004AB6 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004ABC 6100 F052                  		bsr.w	WaitForVBla
00004AC0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004AC6 4EB9 0000 0000             		jsr	(BuildSprites).l
00004ACC 6100 CCD8                  		bsr.w	RunPLC
00004AD0 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004AD4 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004AD8 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004ADA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004ADE 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004AE0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004AE6                            
00004AE6                            	Level_SkipTtlCard:
00004AE6 4EB9 0000 0000             		jsr		LoadPlayerPal
00004AEC 6100 D98E                  		bsr.w	PalLoad1	; load Sonic's palette
00004AF0 6100 0000                  		bsr.w	LevelSizeLoad
00004AF4 6100 0000                  		bsr.w	DeformLayers
00004AF8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004AFE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004B02 6100 0000                  		bsr.w	LoadTilesFromStart
00004B06 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004B0C 6100 0000                  		bsr.w	ColIndexLoad
00004B10 6100 0000                  		bsr.w	LZWaterFeatures
00004B14 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004B1A 4A78 FFF0                  		tst.w	(f_demo).w
00004B1E 6B00                       		bmi.s	Level_ChkDebug
00004B20 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004B26                            
00004B26                            Level_ChkDebug:
00004B26 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004B2A 6700                       		beq.s	Level_ChkWater	; if not, branch
00004B2C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004B32 6700                       		beq.s	Level_ChkWater	; if not, branch
00004B34 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004B3A                            
00004B3A                            Level_ChkWater:
00004B3A 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004B40 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004B46 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B4C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004B4E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004B54 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004B5A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004B60 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004B66                            
00004B66                            Level_LoadObj:
00004B66 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004B6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B72 4EB9 0000 0000             		jsr	(BuildSprites).l
00004B78 7000                       		moveq	#0,d0
00004B7A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004B7E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004B80 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004B84 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004B88 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004B8C                            
00004B8C                            	Level_SkipClr:
00004B8C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004B90 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004B94 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004B98 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004B9C 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004BA0 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004BA4 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004BA8 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004BAC 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004BB0 31C0 FE02                  		move.w	d0,(f_restart).w
00004BB4 31C0 FE04                  		move.w	d0,(v_framecount).w
00004BB8 6100 0000                  		bsr.w	OscillateNumInit
00004BBC 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004BC2 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004BC8 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004BCE 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004BD4 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004BDA 7000                       		moveq	#0,d0
00004BDC 1038 FE10                  		move.b	(v_zone).w,d0
00004BE0 E548                       		lsl.w	#2,d0
00004BE2 2271 0000                  		movea.l	(a1,d0.w),a1
00004BE6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004BEA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004BEC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004BF2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004BF6 5340                       		subq.w	#1,d0
00004BF8 E548                       		lsl.w	#2,d0
00004BFA 2271 0000                  		movea.l	(a1,d0.w),a1
00004BFE                            
00004BFE                            Level_Demo:
00004BFE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004C04 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004C08 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004C0E 4A78 FFF0                  		tst.w	(f_demo).w
00004C12 6A00                       		bpl.s	Level_ChkWaterPal
00004C14 31FC 021C F614             		move.w	#540,(v_demolength).w
00004C1A 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004C20 6600                       		bne.s	Level_ChkWaterPal
00004C22 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004C28                            
00004C28                            Level_ChkWaterPal:
00004C28 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004C2E 6600                       		bne.s	Level_Delay	; if not, branch
00004C30 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004C32 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004C38 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004C3A 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004C3C                            
00004C3C                            	Level_WtrNotSbz:
00004C3C 6100 D8F6                  		bsr.w	PalLoad4_Water
00004C40                            
00004C40                            Level_Delay:
00004C40 323C 0003                  		move.w	#3,d1
00004C44                            
00004C44                            	Level_DelayLoop:
00004C44 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C4A 6100 EEC4                  		bsr.w	WaitForVBla
00004C4E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004C52                            
00004C52 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004C58 6100 D4D8                  		bsr.w	PalFadeIn_Alt
00004C5C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004C60 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004C62 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004C66 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004C6A 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004C6E 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004C72 6000                       		bra.s	Level_StartGame
00004C74                            ; ===========================================================================
00004C74                            
00004C74                            Level_ClrCardArt:
00004C74 7000                       		moveq	#plcid_Explode,d0
00004C76 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004C7C 7000                       		moveq	#0,d0
00004C7E 1038 FE10                  		move.b	(v_zone).w,d0
00004C82 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004C86 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004C8C                            
00004C8C                            Level_StartGame:
00004C8C 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004C92                            
00004C92                            ; ---------------------------------------------------------------------------
00004C92                            ; Main level loop (when	all title card and loading sequences are finished)
00004C92                            ; ---------------------------------------------------------------------------
00004C92                            
00004C92                            Level_MainLoop:
00004C92 6100 C618                  		bsr.w	PauseGame
00004C96 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C9C 6100 EE72                  		bsr.w	WaitForVBla
00004CA0 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004CA4 6100 0000                  		bsr.w	MoveSonicInDemo
00004CA8 6100 0000                  		bsr.w	LZWaterFeatures
00004CAC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004CB2 4A78 FE02                  			tst.w   (f_restart).w
00004CB6 6600 FC8C                  			bne     GM_Level
00004CBA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004CBE 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004CC0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004CC6 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004CC8                            
00004CC8                            	Level_DoScroll:
00004CC8 6100 0000                  		bsr.w	DeformLayers
00004CCC                            
00004CCC                            	Level_SkipScroll:
00004CCC 4EB9 0000 0000             		jsr	(BuildSprites).l
00004CD2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004CD8 6100 D044                  		bsr.w	PaletteCycle
00004CDC 6100 CAC8                  		bsr.w	RunPLC
00004CE0 6100 0000                  		bsr.w	OscillateNumDo
00004CE4 6100 0000                  		bsr.w	SynchroAnimate
00004CE8 6100 0000                  		bsr.w	SignpostArtLoad
00004CEC                            
00004CEC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004CF2 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004CF4 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004CFA 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004CFE 4E75                       		rts	
00004D00                            ; ===========================================================================
00004D00                            
00004D00                            Level_ChkDemo:
00004D00 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004D04 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004D06 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004D0A 6700                       		beq.s	Level_EndDemo	; if not, branch
00004D0C 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004D12 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004D16 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004D1C 4E75                       		rts	
00004D1E                            ; ===========================================================================
00004D1E                            
00004D1E                            Level_EndDemo:
00004D1E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004D24 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004D26 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004D2C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004D30 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004D32 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004D38                            
00004D38                            Level_FadeDemo:
00004D38 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004D3E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004D44 4278 F794                  		clr.w	(v_palchgspeed).w
00004D48                            
00004D48                            	Level_FDLoop:
00004D48 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004D4E 6100 EDC0                  		bsr.w	WaitForVBla
00004D52 6100 0000                  		bsr.w	MoveSonicInDemo
00004D56 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004D5C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004D62 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004D68 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004D6C 6A00                       		bpl.s	loc_3BC8
00004D6E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004D74 6100 D47C                  		bsr.w	FadeOut_ToBlack
00004D78                            
00004D78                            loc_3BC8:
00004D78 4A78 F614                  		tst.w	(v_demolength).w
00004D7C 66CA                       		bne.s	Level_FDLoop
00004D7E 4E75                       		rts	
00004D80                            ; ===========================================================================
00004D80                            
00004D80                            		include	"_inc\LZWaterFeatures.asm"
00004D80                            ; ---------------------------------------------------------------------------
00004D80                            ; Subroutine to	do special water effects in Labyrinth Zone
00004D80                            ; ---------------------------------------------------------------------------
00004D80                            
00004D80                            LZWaterFeatures:
00004D80 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004D86 6600                       		bne.s	@notlabyrinth	; if not, branch
00004D88 4A38 F744                  			tst.b   (f_nobgscroll).w
00004D8C 6600                       			bne.s	@setheight
00004D8E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004D94 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004D96                            
00004D96 6100 0000                  		bsr.w	LZWindTunnels
00004D9A 6100 0000                  		bsr.w	LZWaterSlides
00004D9E 6100 0000                  		bsr.w	LZDynamicWater
00004DA2                            
00004DA2                            @setheight:
00004DA2 4238 F64E                  		clr.b	(f_wtr_state).w
00004DA6 7000                       		moveq	#0,d0
00004DA8 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004DAC E248                       		lsr.w	#1,d0
00004DAE D078 F648                  		add.w	(v_waterpos2).w,d0
00004DB2 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004DB6 3038 F646                  		move.w	(v_waterpos1).w,d0
00004DBA 9078 F704                  		sub.w	(v_screenposy).w,d0
00004DBE 6400                       		bcc.s	@isbelow
00004DC0 4A40                       		tst.w	d0
00004DC2 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004DC4                            
00004DC4 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004DCA 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004DD0                            
00004DD0                            	@isbelow:
00004DD0 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004DD4 6500                       		bcs.s	@isvisible	; if yes, branch
00004DD6 303C 00DF                  		move.w	#223,d0
00004DDA                            
00004DDA                            	@isvisible:
00004DDA 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004DDE                            
00004DDE                            @notlabyrinth:
00004DDE 4E75                       		rts	
00004DE0                            ; ===========================================================================
00004DE0                            ; ---------------------------------------------------------------------------
00004DE0                            ; Initial water heights
00004DE0                            ; ---------------------------------------------------------------------------
00004DE0 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004DE2 0328                       		dc.w $328	; Labyrinth 2
00004DE4 0900                       		dc.w $900	; Labyrinth 3
00004DE6 0228                       		dc.w $228	; Scrap Brain 3
00004DE8                            		even
00004DE8                            ; ===========================================================================
00004DE8                            
00004DE8                            ; ---------------------------------------------------------------------------
00004DE8                            ; Labyrinth dynamic water routines
00004DE8                            ; ---------------------------------------------------------------------------
00004DE8                            
00004DE8                            LZDynamicWater:
00004DE8 7000                       		moveq	#0,d0
00004DEA 1038 FE11                  		move.b	(v_act).w,d0
00004DEE D040                       		add.w	d0,d0
00004DF0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004DF4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004DF8 7200                       		moveq	#0,d1
00004DFA 1238 F64C                  		move.b	(f_water).w,d1
00004DFE 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004E02 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004E06 6700                       		beq.s	@exit		; if water level is correct, branch
00004E08 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004E0A 4441                       		neg.w	d1		; set water to move up instead
00004E0C                            
00004E0C                            	@movewater:
00004E0C D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004E10                            
00004E10                            	@exit:
00004E10 4E75                       		rts	
00004E12                            ; ===========================================================================
00004E12 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004E14 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004E16 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004E18 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004E1A                            ; ===========================================================================
00004E1A                            
00004E1A                            DynWater_LZ1:
00004E1A 4E75                       		rts	
00004E1C                            ; ===========================================================================
00004E1C                            
00004E1C                            DynWater_LZ2:
00004E1C 3038 F700                  		move.w	(v_screenposx).w,d0
00004E20 323C 0328                  		move.w	#$328,d1
00004E24 0C40 0500                  		cmpi.w	#$500,d0
00004E28 6500                       		bcs.s	@setwater
00004E2A 323C 03C8                  		move.w	#$3C8,d1
00004E2E 0C40 0B00                  		cmpi.w	#$B00,d0
00004E32 6500                       		bcs.s	@setwater
00004E34 323C 0428                  		move.w	#$428,d1
00004E38                            
00004E38                            	@setwater:
00004E38 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E3C 4E75                       		rts	
00004E3E                            ; ===========================================================================
00004E3E                            
00004E3E                            DynWater_LZ3:
00004E3E 3038 F700                  		move.w	(v_screenposx).w,d0
00004E42 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004E46 6600                       		bne.s	@routine2
00004E48                            
00004E48 323C 0900                  		move.w	#$900,d1
00004E4C 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004E50 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004E52 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004E58 6500                       		bcs.s	@setwaterlz3
00004E5A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004E60 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004E62                            
00004E62 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004E66 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004E6C 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004E7A                            
00004E7A                            	@setwaterlz3:
00004E7A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E7E 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004E82 4E75                       		rts	
00004E84                            ; ===========================================================================
00004E84                            
00004E84                            @routine2:
00004E84 5302                       		subq.b	#1,d2
00004E86 6600                       		bne.s	@routine3
00004E88 323C 04C8                  		move.w	#$4C8,d1
00004E8C 0C40 0770                  		cmpi.w	#$770,d0
00004E90 6500                       		bcs.s	@setwater2
00004E92 323C 0308                  		move.w	#$308,d1
00004E96 0C40 1400                  		cmpi.w	#$1400,d0
00004E9A 6500                       		bcs.s	@setwater2
00004E9C 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004EA2 6700                       		beq.s	@sonicislow
00004EA4 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004EAA 6400                       		bcc.s	@sonicislow	; if yes, branch
00004EAC 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004EB2 6400                       		bcc.s	@setwater2
00004EB4                            
00004EB4                            @sonicislow:
00004EB4 323C 0508                  		move.w	#$508,d1
00004EB8 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004EBC 0C40 1770                  		cmpi.w	#$1770,d0
00004EC0 6500                       		bcs.s	@setwater2
00004EC2 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004EC8                            
00004EC8                            	@setwater2:
00004EC8 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004ECC 4E75                       		rts	
00004ECE                            ; ===========================================================================
00004ECE                            
00004ECE                            @routine3:
00004ECE 5302                       		subq.b	#1,d2
00004ED0 6600                       		bne.s	@routine4
00004ED2 323C 0508                  		move.w	#$508,d1
00004ED6 0C40 1860                  		cmpi.w	#$1860,d0
00004EDA 6500                       		bcs.s	@setwater3
00004EDC 323C 0188                  		move.w	#$188,d1
00004EE0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004EE4 6400                       		bcc.s	@loc_3DC6
00004EE6 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004EEA 6600                       		bne.s	@setwater3
00004EEC                            
00004EEC                            	@loc_3DC6:
00004EEC 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004EF2                            
00004EF2                            	@setwater3:
00004EF2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004EF6 4E75                       		rts	
00004EF8                            ; ===========================================================================
00004EF8                            
00004EF8                            @routine4:
00004EF8 5302                       		subq.b	#1,d2
00004EFA 6600                       		bne.s	@routine5
00004EFC 323C 0188                  		move.w	#$188,d1
00004F00 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004F04 6500                       		bcs.s	@setwater4
00004F06 323C 0900                  		move.w	#$900,d1
00004F0A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004F0E 6500                       		bcs.s	@setwater4
00004F10 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004F16 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004F1C 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004F22 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004F28 4E75                       		rts	
00004F2A                            ; ===========================================================================
00004F2A                            
00004F2A                            @setwater4:
00004F2A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F2E 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004F32 4E75                       		rts	
00004F34                            ; ===========================================================================
00004F34                            
00004F34                            @routine5:
00004F34 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004F38 6500                       		bcs.s	@dontset	; if not, branch
00004F3A 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004F40                            
00004F40                            	@dontset:
00004F40 4E75                       		rts	
00004F42                            ; ===========================================================================
00004F42                            
00004F42                            DynWater_SBZ3:
00004F42                            	;	move.w	#$228,d1
00004F42                            	;	cmpi.w	#$F00,(v_screenposx).w
00004F42                            	;	bcs.s	@setwater
00004F42                            	;	move.w	#$4C8,d1
00004F42                            
00004F42                            	;@setwater:
00004F42                            		;move.w	d1,(v_waterpos3).w
00004F42 4E75                       		rts
00004F44                            
00004F44                            ; ---------------------------------------------------------------------------
00004F44                            ; Labyrinth Zone "wind tunnels"	subroutine
00004F44                            ; ---------------------------------------------------------------------------
00004F44                            
00004F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F44                            
00004F44                            
00004F44                            LZWindTunnels:
00004F44 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004F48 6600 0000                  		bne.w	@quit	; if yes, branch
00004F4C 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004F52 7000                       		moveq	#0,d0
00004F54 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004F58 E748                       		lsl.w	#3,d0		; multiply by 8
00004F5A D4C0                       		adda.w	d0,a2		; add to address for data
00004F5C 7200                       		moveq	#0,d1
00004F5E 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004F62 6600                       		bne.s	@notact1	; if not, branch
00004F64 7201                       		moveq	#1,d1
00004F66 514A                       		subq.w	#8,a2		; use different data for act 1
00004F68                            
00004F68                            	@notact1:
00004F68 43F8 D000                  		lea	(v_player).w,a1
00004F6C                            
00004F6C                            @chksonic:
00004F6C 3029 0008                  		move.w	obX(a1),d0
00004F70 B052                       		cmp.w	(a2),d0
00004F72 6500 0000                  		bcs.w	@chknext
00004F76 B06A 0004                  		cmp.w	4(a2),d0
00004F7A 6400 0000                  		bcc.w	@chknext
00004F7E 3429 000C                  		move.w	obY(a1),d2
00004F82 B46A 0002                  		cmp.w	2(a2),d2
00004F86 6500                       		bcs.s	@chknext
00004F88 B46A 0006                  		cmp.w	6(a2),d2
00004F8C 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004F8E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F92 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004F96 6600                       		bne.s	@skipsound	; if not, branch
00004FA2                            
00004FA2                            	@skipsound:
00004FA2 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004FA6 6600 0000                  		bne.w	@quit	; if yes, branch
00004FAA 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004FB0 6400                       		bcc.s	@clrquit	; if yes, branch
00004FB2 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004FB8 0440 0080                  		subi.w	#$80,d0
00004FBC B052                       		cmp.w	(a2),d0
00004FBE 6400                       		bcc.s	@movesonic
00004FC0 7002                       		moveq	#2,d0
00004FC2 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004FC8 6600                       		bne.s	@notact2	; if not, branch
00004FCA 4440                       		neg.w	d0
00004FCC                            
00004FCC                            	@notact2:
00004FCC D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004FD0                            
00004FD0                            @movesonic:
00004FD0 5869 0008                  		addq.w	#4,obX(a1)
00004FD4 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004FDA 337C 0000 0012             		move.w	#0,obVelY(a1)
00004FE0 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004FE6 08E9 0001 0022             		bset	#1,obStatus(a1)
00004FEC 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004FF2 6700                       		beq.s	@down		; if not, branch
00004FF4 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004FF8                            
00004FF8                            	@down:
00004FF8 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004FFE 6700                       		beq.s	@end		; if not, branch
00005000 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00005004                            
00005004                            	@end:
00005004 4E75                       		rts	
00005006                            ; ===========================================================================
00005006                            
00005006                            @chknext:
00005006 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00005008 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
0000500C 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00005010 6700                       		beq.s	@quit		; if yes, branch
00005012 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00005018                            
00005018                            @clrquit:
00005018 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
0000501C                            
0000501C                            @quit:
0000501C 4E75                       		rts	
0000501E                            ; End of function LZWindTunnels
0000501E                            
0000501E                            ; ===========================================================================
0000501E                            
0000501E                            		;    left, top,  right, bottom boundaries
0000501E 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00005026 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
0000502E 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00005036 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
0000503E 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
00005046                            		even
00005046                            
00005046                            ; ---------------------------------------------------------------------------
00005046                            ; Labyrinth Zone water slide subroutine
00005046                            ; ---------------------------------------------------------------------------
00005046                            
00005046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005046                            
00005046                            
00005046                            LZWaterSlides:
00005046 43F8 D000                  		lea	(v_player).w,a1
0000504A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00005050 6600                       		bne.s	loc_3F6A	; if not, branch
00005052 3029 000C                  		move.w	obY(a1),d0
00005056 E248                       		lsr.w	#1,d0
00005058 0240 0380                  		andi.w	#$380,d0
0000505C 1229 0008                  		move.b	obX(a1),d1
00005060 0241 007F                  		andi.w	#$7F,d1
00005064 D041                       		add.w	d1,d0
00005066 45F8 A400                  		lea	(v_lvllayout).w,a2
0000506A 1032 0000                  		move.b	(a2,d0.w),d0
0000506E 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00005072 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00005074                            
00005074                            loc_3F62:
00005074 B022                       		cmp.b	-(a2),d0
00005076 57C9 FFFC                  		dbeq	d1,loc_3F62
0000507A 6700                       		beq.s	LZSlide_Move
0000507C                            
0000507C                            loc_3F6A:
0000507C 4A38 F7CA                  		tst.b	(f_jumponly).w
00005080 6700                       		beq.s	locret_3F7A
00005082 337C 0005 003E             		move.w	#5,$3E(a1)
00005088 4238 F7CA                  		clr.b	(f_jumponly).w
0000508C                            
0000508C                            locret_3F7A:
0000508C 4E75                       		rts	
0000508E                            ; ===========================================================================
0000508E                            
0000508E                            LZSlide_Move:
0000508E 0C41 0003                  		cmpi.w	#3,d1
00005092 6400                       		bcc.s	loc_3F84
00005094 4E71                       		nop	
00005096                            
00005096                            loc_3F84:
00005096 08A9 0000 0022             		bclr	#0,obStatus(a1)
0000509C 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
000050A0 1340 0020                  		move.b	d0,obInertia(a1)
000050A4 6A00                       		bpl.s	loc_3F9A
000050A6 08E9 0000 0022             		bset	#0,obStatus(a1)
000050AC                            
000050AC                            loc_3F9A:
000050AC 4229 0021                  		clr.b	obInertia+1(a1)
000050B0 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
000050B6 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
000050BC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000050C0 0200 001F                  		andi.b	#$1F,d0
000050C4 6600                       		bne.s	locret_3FBE
000050D0                            
000050D0                            locret_3FBE:
000050D0 4E75                       		rts	
000050D2                            ; End of function LZWaterSlides
000050D2                            
000050D2                            ; ===========================================================================
000050D2                            ; byte_3FC0:
000050D2                            Slide_Speeds:
000050D2 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
000050DA 00                         		even
000050DA                            
000050DA                            Slide_Chunks:
000050DA 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
000050DB                            ; byte_3FCF
000050DB                            Slide_Chunks_End
000050DC 00                         		even
000050DC 00                         		even
000050DC                            		include	"_inc\MoveSonicInDemo.asm"
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            ; Subroutine to	move Sonic in demo mode
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            
000050DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050DC                            
000050DC                            
000050DC                            MoveSonicInDemo:
000050DC 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000050E0 6600                       		bne.s	MDemo_On	; if yes, branch
000050E2 4E75                       		rts	
000050E4                            ; ===========================================================================
000050E4                            
000050E4                            ; This is an unused subroutine for recording a demo
000050E4                            
000050E4                            DemoRecorder:
000050E4 43F9 0008 0000             		lea	($80000).l,a1
000050EA 3038 F790                  		move.w	(v_btnpushtime1).w,d0
000050EE D2C0                       		adda.w	d0,a1
000050F0 1038 F604                  		move.b	(v_jpadhold1).w,d0
000050F4 B011                       		cmp.b	(a1),d0
000050F6 6600                       		bne.s	@next
000050F8 5229 0001                  		addq.b	#1,1(a1)
000050FC 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005102 6700                       		beq.s	@next
00005104 4E75                       		rts	
00005106                            
00005106                            	@next:
00005106 1340 0002                  		move.b	d0,2(a1)
0000510A 137C 0000 0003             		move.b	#0,3(a1)
00005110 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005114 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000511A 4E75                       		rts	
0000511C                            ; ===========================================================================
0000511C                            
0000511C                            MDemo_On:
0000511C 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005120 6A00                       		bpl.s	@dontquit	; if not, branch
00005122 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005126 6B00                       		bmi.s	@dontquit	; if yes, branch
00005128 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
0000512E                            
0000512E                            	@dontquit:
0000512E 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005134 7000                       		moveq	#0,d0
00005136 1038 FE10                  		move.b	(v_zone).w,d0
0000513A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005140 6600                       		bne.s	@notspecial	; if not, branch
00005142 7006                       		moveq	#6,d0		; use demo #6
00005144                            
00005144                            	@notspecial:
00005144 E548                       		lsl.w	#2,d0
00005146 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000514A 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000514E 6A00                       		bpl.s	@notcredits	; if not, branch
00005150 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005156 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000515A 5340                       		subq.w	#1,d0
0000515C E548                       		lsl.w	#2,d0
0000515E 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005162                            
00005162                            	@notcredits:
00005162 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005166 D2C0                       		adda.w	d0,a1
00005168 1011                       		move.b	(a1),d0
0000516A 41F8 F604                  		lea	(v_jpadhold1).w,a0
0000516E 1200                       		move.b	d0,d1
00005170 7400                       			moveq	#0,d2
00005172 B500                       		eor.b	d2,d0
00005174 10C1                       		move.b	d1,(a0)+
00005176 C001                       		and.b	d1,d0
00005178 10C0                       		move.b	d0,(a0)+
0000517A 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
0000517E 6400                       		bcc.s	@end
00005180 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005186 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000518A                            
0000518A                            	@end:
0000518A 4E75                       		rts	
0000518C                            ; End of function MoveSonicInDemo
0000518C                            
0000518C                            ; ===========================================================================
0000518C                            ; ---------------------------------------------------------------------------
0000518C                            ; Demo sequence	pointers
0000518C                            ; ---------------------------------------------------------------------------
0000518C 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005190 0000 0000                  		dc.l Demo_GHZ
00005194 0000 0000                  		dc.l Demo_MZ
00005198 0000 0000                  		dc.l Demo_MZ
0000519C 0000 0000                  		dc.l Demo_SYZ
000051A0 0000 0000                  		dc.l Demo_SYZ
000051A4 0000 0000                  		dc.l Demo_SS
000051A8 0000 0000                  		dc.l Demo_SS
000051AC                            
000051AC 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000051B0 0000 0000                  		dc.l Demo_EndMZ
000051B4 0000 0000                  		dc.l Demo_EndSYZ
000051B8 0000 0000                  		dc.l Demo_EndLZ
000051BC 0000 0000                  		dc.l Demo_EndSLZ
000051C0 0000 0000                  		dc.l Demo_EndSBZ1
000051C4 0000 0000                  		dc.l Demo_EndSBZ2
000051C8 0000 0000                  		dc.l Demo_EndGHZ2
000051CC                            
000051CC 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000051DC 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000051EC 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000051FC                            		even
000051FC                            		even
000051FC                            
000051FC                            ; ---------------------------------------------------------------------------
000051FC                            ; Collision index pointer loading subroutine
000051FC                            ; ---------------------------------------------------------------------------
000051FC                            
000051FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051FC                            
000051FC                            
000051FC                            ColIndexLoad:
000051FC 7000                       		moveq	#0,d0
000051FE 1038 FE10                  		move.b	(v_zone).w,d0
00005202 E548                       		lsl.w	#2,d0
00005204 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000520A 4E75                       		rts	
0000520C                            ; End of function ColIndexLoad
0000520C                            
0000520C                            ; ===========================================================================
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            ; Collision index pointers
0000520C                            ; ---------------------------------------------------------------------------
0000520C 0000 0000                  ColPointers:	dc.l Col_GHZ
00005210 0000 0000                  		dc.l Col_LZ
00005214 0000 0000                  		dc.l Col_MZ
00005218 0000 0000                  		dc.l Col_SLZ
0000521C 0000 0000                  		dc.l Col_SYZ
00005220 0000 0000                  		dc.l Col_SBZ
00005224                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005224                            
00005224                            		include	"_inc\Oscillatory Routines.asm"
00005224                            ; ---------------------------------------------------------------------------
00005224                            ; Oscillating number subroutines
00005224                            ; ---------------------------------------------------------------------------
00005224                            
00005224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005224                            
00005224                            ; Initialise the values
00005224                            
00005224                            OscillateNumInit:
00005224 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005228 45F9 0000 0000             		lea	(@baselines).l,a2
0000522E 7220                       		moveq	#$20,d1
00005230                            
00005230                            	@loop:
00005230 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005232 51C9 FFFC                  		dbf	d1,@loop
00005236 4E75                       		rts	
00005238                            
00005238                            
00005238                            ; ===========================================================================
00005238 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000523A 0080 0000                  		dc.w $80, 0
0000523E 0080 0000                  		dc.w $80, 0
00005242 0080 0000                  		dc.w $80, 0
00005246 0080 0000                  		dc.w $80, 0
0000524A 0080 0000                  		dc.w $80, 0
0000524E 0080 0000                  		dc.w $80, 0
00005252 0080 0000                  		dc.w $80, 0
00005256 0080 0000                  		dc.w $80, 0
0000525A 0080 0000                  		dc.w $80, 0
0000525E 50F0 011E                  		dc.w $50F0, $11E
00005262 2080 00B4                  		dc.w $2080, $B4
00005266 3080 010E                  		dc.w $3080, $10E
0000526A 5080 01C2                  		dc.w $5080, $1C2
0000526E 7080 0276                  		dc.w $7080, $276
00005272 0080 0000                  		dc.w $80, 0
00005276 0080 0000                  		dc.w $80, 0
0000527A                            		even
0000527A                            
0000527A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000527A                            
0000527A                            ; Oscillate values
0000527A                            
0000527A                            OscillateNumDo:
0000527A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005280 6400                       		bcc.s	@end		; if yes, branch
00005282 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005286 45F9 0000 0000             		lea	(@settings).l,a2
0000528C 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
0000528E 720F                       		moveq	#$F,d1
00005290                            
00005290                            @loop:
00005290 341A                       		move.w	(a2)+,d2	; get frequency
00005292 381A                       		move.w	(a2)+,d4	; get amplitude
00005294 0303                       		btst	d1,d3		; check oscillation direction
00005296 6600                       		bne.s	@down		; branch if 1
00005298                            
00005298                            	@up:
00005298 3029 0002                  		move.w	2(a1),d0	; get current rate
0000529C D042                       		add.w	d2,d0		; add frequency
0000529E 3340 0002                  		move.w	d0,2(a1)
000052A2 D151                       		add.w	d0,0(a1)	; add rate to value
000052A4 B811                       		cmp.b	0(a1),d4
000052A6 6200                       		bhi.s	@next
000052A8 03C3                       		bset	d1,d3
000052AA 6000                       		bra.s	@next
000052AC                            
000052AC                            	@down:
000052AC 3029 0002                  		move.w	2(a1),d0
000052B0 9042                       		sub.w	d2,d0
000052B2 3340 0002                  		move.w	d0,2(a1)
000052B6 D151                       		add.w	d0,0(a1)
000052B8 B811                       		cmp.b	0(a1),d4
000052BA 6300                       		bls.s	@next
000052BC 0383                       		bclr	d1,d3
000052BE                            
000052BE                            	@next:
000052BE 5849                       		addq.w	#4,a1
000052C0 51C9 FFCE                  		dbf	d1,@loop
000052C4 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000052C8                            
000052C8                            @end:
000052C8 4E75                       		rts	
000052CA                            ; End of function OscillateNumDo
000052CA                            
000052CA                            ; ===========================================================================
000052CA 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000052CE 0002 0018                  		dc.w 2,	$18
000052D2 0002 0020                  		dc.w 2,	$20
000052D6 0002 0030                  		dc.w 2,	$30
000052DA 0004 0020                  		dc.w 4,	$20
000052DE 0008 0008                  		dc.w 8,	8
000052E2 0008 0040                  		dc.w 8,	$40
000052E6 0004 0040                  		dc.w 4,	$40
000052EA 0002 0050                  		dc.w 2,	$50
000052EE 0002 0050                  		dc.w 2,	$50
000052F2 0002 0020                  		dc.w 2,	$20
000052F6 0003 0030                  		dc.w 3,	$30
000052FA 0005 0050                  		dc.w 5,	$50
000052FE 0007 0070                  		dc.w 7,	$70
00005302 0002 0010                  		dc.w 2,	$10
00005306 0002 0010                  		dc.w 2,	$10
0000530A                            		even
0000530A                            		even
0000530A                            
0000530A                            ; ---------------------------------------------------------------------------
0000530A                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000530A                            ; ---------------------------------------------------------------------------
0000530A                            
0000530A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000530A                            
0000530A                            
0000530A                            SynchroAnimate:
0000530A                            
0000530A                            ; Used for GHZ spiked log
0000530A                            Sync1:
0000530A 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
0000530E 6A00                       		bpl.s	Sync2		; if not, branch
00005310 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005316 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000531A 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005320                            
00005320                            ; Used for rings and giant rings
00005320                            Sync2:
00005320 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005324 6A00                       		bpl.s	Sync3
00005326 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0000532C 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005330 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005336                            
00005336                            ; Used for nothing
00005336                            Sync3:
00005336 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000533A 6A00                       		bpl.s	Sync4
0000533C 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005342 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005346 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
0000534C 6500                       		blo.s	Sync4
0000534E 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005354                            
00005354                            ; Used for bouncing rings
00005354                            Sync4:
00005354 4A38 FEC6                  		tst.b	(v_ani3_time).w
00005358 6700                       		beq.s	SyncEnd
0000535A 7000                       		moveq	#0,d0
0000535C 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005360 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005364 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00005368 EF58                       		rol.w	#7,d0
0000536A 0240 0003                  		andi.w	#3,d0
0000536E 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005372 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005376                            
00005376                            SyncEnd:
00005376 4E75                       		rts	
00005378                            ; End of function SynchroAnimate
00005378                            
00005378                            ; ---------------------------------------------------------------------------
00005378                            ; End-of-act signpost pattern loading subroutine
00005378                            ; ---------------------------------------------------------------------------
00005378                            
00005378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005378                            
00005378                            
00005378                            SignpostArtLoad:
00005378 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000537C 6600 0000                  		bne.w	@exit		; if yes, branch
00005380 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005386 6700                       		beq.s	@exit		; if yes, branch
00005388                            
00005388 3038 F700                  		move.w	(v_screenposx).w,d0
0000538C 3238 F72A                  		move.w	(v_limitright2).w,d1
00005390 0441 0100                  		subi.w	#$100,d1
00005394 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005396 6D00                       		blt.s	@exit		; if not, branch
00005398 4A38 FE1E                  		tst.b	(f_timecount).w
0000539C 6700                       		beq.s	@exit
0000539E B278 F728                  		cmp.w	(v_limitleft2).w,d1
000053A2 6700                       		beq.s	@exit
000053A4 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000053A8 7000                       		moveq	#plcid_Signpost,d0
000053AA 6000 C3C0                  		bra.w	NewPLC		; load signpost	patterns
000053AE                            
000053AE                            	@exit:
000053AE 4E75                       		rts	
000053B0                            ; End of function SignpostArtLoad
000053B0                            
000053B0                            ; ===========================================================================
000053B0                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005430                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005560                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000055E0                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000056E0                            ; ===========================================================================
000056E0                            
000056E0                            ; ---------------------------------------------------------------------------
000056E0                            ; Special Stage
000056E0                            ; ---------------------------------------------------------------------------
000056E0                            
000056E0                            GM_Special:
000056E8 6100 CC12                  		bsr.w	PaletteWhiteOut
000056EC 46FC 2700                  		disable_ints
000056F0 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000056F6 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000056FA 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000056FE 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005704 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
00005708 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000570C 0200 00BF                  		andi.b	#$BF,d0
00005710 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005716 6100 BAB8                  		bsr.w	ClearScreen
0000571A 46FC 2300                  		enable_ints
0000571E 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005740                            
00005740                            	SS_WaitForDMA:
00005740 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005742 0801 0001                  		btst	#1,d1		; is DMA running?
00005746 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
00005748 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
0000574C 6100 0000                  		bsr.w	SS_BGLoad
00005750 7000                       		moveq	#plcid_SpecialStage,d0
00005752 6100 C152                  		bsr.w	QuickPLC	; load special stage patterns
00005756                            
00005756 43F8 D000                  		lea	(v_objspace).w,a1
0000575A 7000                       		moveq	#0,d0
0000575C 323C 07FF                  		move.w	#$7FF,d1
00005760                            	SS_ClrObjRam:
00005760 22C0                       		move.l	d0,(a1)+
00005762 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005766                            
00005766 43F8 F700                  		lea	(v_screenposx).w,a1
0000576A 7000                       		moveq	#0,d0
0000576C 323C 003F                  		move.w	#$3F,d1
00005770                            	SS_ClrRam1:
00005770 22C0                       		move.l	d0,(a1)+
00005772 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005776                            
00005776 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000577A 7000                       		moveq	#0,d0
0000577C 323C 0027                  		move.w	#$27,d1
00005780                            	SS_ClrRam2:
00005780 22C0                       		move.l	d0,(a1)+
00005782 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005786                            
00005786 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000578A 7000                       		moveq	#0,d0
0000578C 323C 007F                  		move.w	#$7F,d1
00005790                            	SS_ClrNemRam:
00005790 22C0                       		move.l	d0,(a1)+
00005792 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005796                            
00005796 4238 F64E                  		clr.b	(f_wtr_state).w
0000579A 4278 FE02                  		clr.w	(f_restart).w
0000579E 700A                       		moveq	#palid_Special,d0
000057A0 6100 CCDA                  		bsr.w	PalLoad1	; load special stage palette
000057A4 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000057AA 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000057B2 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000057BA 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000057C0 6100 0000                  		bsr.w	PalCycle_SS
000057C4 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000057C8 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000057D6 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000057DC 43F9 0000 518C             		lea	(DemoDataPtr).l,a1
000057E2 7006                       		moveq	#6,d0
000057E4 E548                       		lsl.w	#2,d0
000057E6 2271 0000                  		movea.l	(a1,d0.w),a1
000057EA 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000057F0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000057F4 4278 FE20                  		clr.w	(v_rings).w
000057F8 4238 FE1B                  		clr.b	(v_lifecount).w
000057FC 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005802 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005808 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
0000580C 6700                       		beq.s	SS_NoDebug	; if not, branch
0000580E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005814 6700                       		beq.s	SS_NoDebug	; if not, branch
00005816 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000581C                            
0000581C                            	SS_NoDebug:
0000581C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005820 0000 0040                  		ori.b	#$40,d0
00005824 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000582A 6100 CA24                  		bsr.w	PaletteWhiteIn
0000582E                            
0000582E                            ; ---------------------------------------------------------------------------
0000582E                            ; Main Special Stage loop
0000582E                            ; ---------------------------------------------------------------------------
0000582E                            
0000582E                            SS_MainLoop:
0000582E 6100 BA7C                  		bsr.w	PauseGame
00005832 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
00005838 6100 E2D6                  		bsr.w	WaitForVBla
0000583C 6100 F89E                  		bsr.w	MoveSonicInDemo
00005840 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005846 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000584C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005852 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005858 6100 0000                  		bsr.w	SS_BGAnimate
0000585C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005860 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005862 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005866 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000586A                            
0000586A                            	SS_ChkEnd:
0000586A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005870 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005874                            
00005874 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005878 6600 0000                  		bne.w	SS_ToLevel
0000587C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005882 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005888 6500                       		blo.s	SS_Finish	; if not, branch
0000588A 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
0000588E                            
0000588E                            SS_Finish:
0000588E 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005894 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000589A 4278 F794                  		clr.w	(v_palchgspeed).w
0000589E                            
0000589E                            	SS_FinLoop:
0000589E 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000058A4 6100 E26A                  		bsr.w	WaitForVBla
000058A8 6100 F832                  		bsr.w	MoveSonicInDemo
000058AC 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000058B2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000058B8 4EB9 0000 0000             		jsr	(BuildSprites).l
000058BE 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000058C4 6100 0000                  		bsr.w	SS_BGAnimate
000058C8 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000058CC 6A00                       		bpl.s	loc_47D4
000058CE 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000058D4 6100 CA46                  		bsr.w	WhiteOut_ToWhite
000058D8                            
000058D8                            loc_47D4:
000058D8 4A78 F614                  		tst.w	(v_demolength).w
000058DC 66C0                       		bne.s	SS_FinLoop
000058DE                            
000058DE 46FC 2700                  		disable_ints
000058E2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000058E8 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000058EC 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000058F0 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000058F4 6100 B8DA                  		bsr.w	ClearScreen
00005902 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005908 6100 BA44                  		bsr.w	NemDec
0000590C 4EB9 0000 0000             		jsr	(Hud_Base).l
00005912 31FC C800 C8FC             		ResetDMAQueue	
00005918 46FC 2300                  		enable_ints
0000591C 7011                       		moveq	#palid_SSResult,d0
0000591E 6100 CB98                  		bsr.w	PalLoad2	; load results screen palette
00005922 7000                       		moveq	#plcid_Main,d0
00005924 6100 BE46                  		bsr.w	NewPLC
00005928 7000                       		moveq	#plcid_SSResult,d0
0000592A 6100 BE0E                  		bsr.w	AddPLC		; load results screen patterns
0000592E 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005934 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000593A 3038 FE20                  		move.w	(v_rings).w,d0
0000593E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005942 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005950                            
00005950 43F8 D000                  		lea	(v_objspace).w,a1
00005954 7000                       		moveq	#0,d0
00005956 323C 07FF                  		move.w	#$7FF,d1
0000595A                            	SS_EndClrObjRam:
0000595A 22C0                       		move.l	d0,(a1)+
0000595C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005960                            
00005960 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005966                            
00005966                            SS_NormalExit:
00005966 6100 B944                  		bsr.w	PauseGame
0000596A 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005970 6100 E19E                  		bsr.w	WaitForVBla
00005974 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000597A 4EB9 0000 0000             		jsr	(BuildSprites).l
00005980 6100 BE24                  		bsr.w	RunPLC
00005984 4A78 FE02                  		tst.w	(f_restart).w
00005988 67DC                       		beq.s	SS_NormalExit
0000598A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000598E 66D6                       		bne.s	SS_NormalExit
00005998 6100 C962                  		bsr.w	PaletteWhiteOut
0000599C 4E75                       		rts	
0000599E                            ; ===========================================================================
0000599E                            
0000599E                            SS_ToSegaScreen:
0000599E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000059A4 4E75                       		rts
000059A6                            
000059A6 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
000059AC 67F0                       		beq.s	SS_ToSegaScreen
000059AE 4E75                       		rts
000059B0                            
000059B0                            ; ---------------------------------------------------------------------------
000059B0                            ; Special stage	background loading subroutine
000059B0                            ; ---------------------------------------------------------------------------
000059B0                            
000059B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059B0                            
000059B0                            
000059B0                            SS_BGLoad:
000059B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000059B6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000059BC 303C 4051                  		move.w	#$4051,d0
000059C0 6100 BF16                  		bsr.w	EniDec
000059C4 263C 5000 0001             		move.l	#$50000001,d3
000059CA 45F9 00FF 0080             		lea	($FF0080).l,a2
000059D0 7E06                       		moveq	#6,d7
000059D2                            
000059D2                            loc_48BE:
000059D2 2003                       		move.l	d3,d0
000059D4 7C03                       		moveq	#3,d6
000059D6 7800                       		moveq	#0,d4
000059D8 0C47 0003                  		cmpi.w	#3,d7
000059DC 6400                       		bhs.s	loc_48CC
000059DE 7801                       		moveq	#1,d4
000059E0                            
000059E0                            loc_48CC:
000059E0 7A07                       		moveq	#7,d5
000059E2                            
000059E2                            loc_48CE:
000059E2 224A                       		movea.l	a2,a1
000059E4 0A04 0001                  		eori.b	#1,d4
000059E8 6600                       		bne.s	loc_48E2
000059EA 0C47 0006                  		cmpi.w	#6,d7
000059EE 6600                       		bne.s	loc_48F2
000059F0 43F9 00FF 0000             		lea	($FF0000).l,a1
000059F6                            
000059F6                            loc_48E2:
000059F6 48E7 F800                  		movem.l	d0-d4,-(sp)
000059FA 7207                       		moveq	#7,d1
000059FC 7407                       		moveq	#7,d2
000059FE 6100 B924                  		bsr.w	TilemapToVRAM
00005A02 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005A06                            
00005A06                            loc_48F2:
00005A06 0680 0010 0000             		addi.l	#$100000,d0
00005A0C 51CD FFD4                  		dbf	d5,loc_48CE
00005A10 0680 0380 0000             		addi.l	#$3800000,d0
00005A16 0A04 0001                  		eori.b	#1,d4
00005A1A 51CE FFC4                  		dbf	d6,loc_48CC
00005A1E 0683 1000 0000             		addi.l	#$10000000,d3
00005A24 6A00                       		bpl.s	loc_491C
00005A26 4843                       		swap	d3
00005A28 0683 0000 C000             		addi.l	#$C000,d3
00005A2E 4843                       		swap	d3
00005A30                            
00005A30                            loc_491C:
00005A30 D4FC 0080                  		adda.w	#$80,a2
00005A34 51CF FF9C                  		dbf	d7,loc_48BE
00005A38 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A3E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005A44 303C 4000                  		move.w	#$4000,d0
00005A48 6100 BE8E                  		bsr.w	EniDec
00005A4C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A52 203C 4000 0003             		move.l	#$40000003,d0
00005A58 723F                       		moveq	#$3F,d1
00005A5A 741F                       		moveq	#$1F,d2
00005A5C 6100 B8C6                  		bsr.w	TilemapToVRAM
00005A60 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A66 203C 5000 0003             		move.l	#$50000003,d0
00005A6C 723F                       		moveq	#$3F,d1
00005A6E 743F                       		moveq	#$3F,d2
00005A70 6100 B8B2                  		bsr.w	TilemapToVRAM
00005A74 4E75                       		rts	
00005A76                            ; End of function SS_BGLoad
00005A76                            
00005A76                            ; ---------------------------------------------------------------------------
00005A76                            ; Palette cycling routine - special stage
00005A76                            ; ---------------------------------------------------------------------------
00005A76                            
00005A76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A76                            
00005A76                            
00005A76                            PalCycle_SS:
00005A76 4A78 F63A                  		tst.w	(f_pause).w
00005A7A 6600                       		bne.s	locret_49E6
00005A7C 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005A80 6A00                       		bpl.s	locret_49E6
00005A82 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005A88 3038 F79A                  		move.w	(v_palss_num).w,d0
00005A8C 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005A90 0240 001F                  		andi.w	#$1F,d0
00005A94 E548                       		lsl.w	#2,d0
00005A96 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005A9C D0C0                       		adda.w	d0,a0
00005A9E 1018                       		move.b	(a0)+,d0
00005AA0 6A00                       		bpl.s	loc_4992
00005AA2 303C 01FF                  		move.w	#$1FF,d0
00005AA6                            
00005AA6                            loc_4992:
00005AA6 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005AAA 7000                       		moveq	#0,d0
00005AAC 1018                       		move.b	(a0)+,d0
00005AAE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005AB2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005AB8 43F1 0000                  		lea	(a1,d0.w),a1
00005ABC 303C 8200                  		move.w	#-$7E00,d0
00005AC0 1019                       		move.b	(a1)+,d0
00005AC2 3C80                       		move.w	d0,(a6)
00005AC4 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005AC8 303C 8400                  		move.w	#-$7C00,d0
00005ACC 1018                       		move.b	(a0)+,d0
00005ACE 3C80                       		move.w	d0,(a6)
00005AD0 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005ADA 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005AE2 7000                       		moveq	#0,d0
00005AE4 1018                       		move.b	(a0)+,d0
00005AE6 6B00                       		bmi.s	loc_49E8
00005AE8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005AEE D2C0                       		adda.w	d0,a1
00005AF0 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005AF4 24D9                       		move.l	(a1)+,(a2)+
00005AF6 24D9                       		move.l	(a1)+,(a2)+
00005AF8 24D9                       		move.l	(a1)+,(a2)+
00005AFA                            
00005AFA                            locret_49E6:
00005AFA 4E75                       		rts	
00005AFC                            ; ===========================================================================
00005AFC                            
00005AFC                            loc_49E8:
00005AFC 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005B00 0C40 008A                  		cmpi.w	#$8A,d0
00005B04 6500                       		blo.s	loc_49F4
00005B06 5241                       		addq.w	#1,d1
00005B08                            
00005B08                            loc_49F4:
00005B08 C2FC 002A                  		mulu.w	#$2A,d1
00005B0C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005B12 D2C1                       		adda.w	d1,a1
00005B14 0240 007F                  		andi.w	#$7F,d0
00005B18 0880 0000                  		bclr	#0,d0
00005B1C 6700                       		beq.s	loc_4A18
00005B1E 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005B22 24D1                       		move.l	(a1),(a2)+
00005B24 24E9 0004                  		move.l	4(a1),(a2)+
00005B28 24E9 0008                  		move.l	8(a1),(a2)+
00005B2C                            
00005B2C                            loc_4A18:
00005B2C D2FC 000C                  		adda.w	#$C,a1
00005B30 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005B34 0C40 000A                  		cmpi.w	#$A,d0
00005B38 6500                       		blo.s	loc_4A2E
00005B3A 0440 000A                  		subi.w	#$A,d0
00005B3E 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005B42                            
00005B42                            loc_4A2E:
00005B42 3200                       		move.w	d0,d1
00005B44 D040                       		add.w	d0,d0
00005B46 D041                       		add.w	d1,d0
00005B48 D2C0                       		adda.w	d0,a1
00005B4A 24D9                       		move.l	(a1)+,(a2)+
00005B4C 34D9                       		move.w	(a1)+,(a2)+
00005B4E 4E75                       		rts	
00005B50                            ; End of function PalCycle_SS
00005B50                            
00005B50                            ; ===========================================================================
00005B50 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005B60                            
00005B60 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005B70 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005B80 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005B90 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005BA0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005BB0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005BC0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005BD0                            		even
00005BD0 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005BDE                            		even
00005BDE                            
00005BDE                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005C26                            		even
00005C26                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005CF8                            		even
00005CF8                            
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            ; Subroutine to	make the special stage background animated
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            
00005CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005CF8                            
00005CF8                            
00005CF8                            SS_BGAnimate:
00005CF8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005CFC 6600                       		bne.s	loc_4BF6
00005CFE 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005D04 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005D0A                            
00005D0A                            loc_4BF6:
00005D0A 0C40 0008                  		cmpi.w	#8,d0
00005D0E 6400                       		bhs.s	loc_4C4E
00005D10 0C40 0006                  		cmpi.w	#6,d0
00005D14 6600                       		bne.s	loc_4C10
00005D16 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005D1A 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005D1E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005D24                            
00005D24                            loc_4C10:
00005D24 7000                       		moveq	#0,d0
00005D26 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005D2A 4440                       		neg.w	d0
00005D2C 4840                       		swap	d0
00005D2E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005D34 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005D38 7609                       		moveq	#9,d3
00005D3A                            
00005D3A                            loc_4C26:
00005D3A 302B 0002                  		move.w	2(a3),d0
00005D3E 6100 DE02                  		bsr.w	CalcSine
00005D42 7400                       		moveq	#0,d2
00005D44 1419                       		move.b	(a1)+,d2
00005D46 C1C2                       		muls.w	d2,d0
00005D48 E080                       		asr.l	#8,d0
00005D4A 36C0                       		move.w	d0,(a3)+
00005D4C 1419                       		move.b	(a1)+,d2
00005D4E 4882                       		ext.w	d2
00005D50 D55B                       		add.w	d2,(a3)+
00005D52 51CB FFE6                  		dbf	d3,loc_4C26
00005D56 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005D5A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005D60 6000                       		bra.s	loc_4C7E
00005D62                            ; ===========================================================================
00005D62                            
00005D62                            loc_4C4E:
00005D62 0C40 000C                  		cmpi.w	#$C,d0
00005D66 6600                       		bne.s	loc_4C74
00005D68 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005D6C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005D70 243C 0001 8000             		move.l	#$18000,d2
00005D76 7206                       		moveq	#6,d1
00005D78                            
00005D78                            loc_4C64:
00005D78 2013                       		move.l	(a3),d0
00005D7A 9082                       		sub.l	d2,d0
00005D7C 26C0                       		move.l	d0,(a3)+
00005D7E 0482 0000 2000             		subi.l	#$2000,d2
00005D84 51C9 FFF2                  		dbf	d1,loc_4C64
00005D88                            
00005D88                            loc_4C74:
00005D88 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005D8C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005D92                            
00005D92                            loc_4C7E:
00005D92 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005D96 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005D9A 4440                       		neg.w	d0
00005D9C 4840                       		swap	d0
00005D9E 7600                       		moveq	#0,d3
00005DA0 161A                       		move.b	(a2)+,d3
00005DA2 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005DA6 4442                       		neg.w	d2
00005DA8 0242 00FF                  		andi.w	#$FF,d2
00005DAC E54A                       		lsl.w	#2,d2
00005DAE                            
00005DAE                            loc_4C9A:
00005DAE 301B                       		move.w	(a3)+,d0
00005DB0 544B                       		addq.w	#2,a3
00005DB2 7200                       		moveq	#0,d1
00005DB4 121A                       		move.b	(a2)+,d1
00005DB6 5341                       		subq.w	#1,d1
00005DB8                            
00005DB8                            loc_4CA4:
00005DB8 2380 2000                  		move.l	d0,(a1,d2.w)
00005DBC 5842                       		addq.w	#4,d2
00005DBE 0242 03FC                  		andi.w	#$3FC,d2
00005DC2 51C9 FFF4                  		dbf	d1,loc_4CA4
00005DC6 51CB FFE6                  		dbf	d3,loc_4C9A
00005DCA 4E75                       		rts	
00005DCC                            ; End of function SS_BGAnimate
00005DCC                            
00005DCC                            ; ===========================================================================
00005DCC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005DD8                            		even
00005DD8 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005DE0                            		even
00005DE0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005DF4                            		even
00005DF4                            
00005DF4                            ; ===========================================================================
00005DF4                            
00005DF4                            ; ---------------------------------------------------------------------------
00005DF4                            ; Continue screen
00005DF4                            ; ---------------------------------------------------------------------------
00005DF4                            
00005DF4                            GM_Continue:
00005DF4 6100 C3DC                  		bsr.w	PaletteFadeOut
00005DF8 46FC 2700                  		disable_ints
00005DFC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005E00 0200 00BF                  		andi.b	#$BF,d0
00005E04 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005E0A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005E10 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005E14 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005E18 6100 B3B6                  		bsr.w	ClearScreen
00005E1C 31FC C800 C8FC             		ResetDMAQueue
00005E22 43F8 D000                  		lea	(v_objspace).w,a1
00005E26 7000                       		moveq	#0,d0
00005E28 323C 07FF                  		move.w	#$7FF,d1
00005E2C                            	Cont_ClrObjRam:
00005E2C 22C0                       		move.l	d0,(a1)+
00005E2E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005E32                            
00005E3C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005E42 6100 B50A                  		bsr.w	NemDec
00005E50 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005E56 6100 B4F6                  		bsr.w	NemDec
00005E64 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005E6A 6100 B4E2                  		bsr.w	NemDec
00005E6E 720A                       		moveq	#10,d1
00005E70 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005E76 7012                       		moveq	#palid_Continue,d0
00005E78 6100 C602                  		bsr.w	PalLoad1	; load continue	screen palette
00005E84 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005E8A 42B8 F700                  		clr.l	(v_screenposx).w
00005E8E 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005E96 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005E9C 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005EA2 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005EA8 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005EAE 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005EB4 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005EBA 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005EC0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005EC6 4EB9 0000 0000             		jsr	(BuildSprites).l
00005ECC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005ED0 0000 0040                  		ori.b	#$40,d0
00005ED4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005EDA 6100 C250                  		bsr.w	PaletteFadeIn
00005EDE                            
00005EDE                            ; ---------------------------------------------------------------------------
00005EDE                            ; Continue screen main loop
00005EDE                            ; ---------------------------------------------------------------------------
00005EDE                            
00005EDE                            Cont_MainLoop:
00005EDE 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005EE4 6100 DC2A                  		bsr.w	WaitForVBla
00005EE8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005EEE 6400                       		bhs.s	loc_4DF2
00005EF0 46FC 2700                  		disable_ints
00005EF4 3238 F614                  		move.w	(v_demolength).w,d1
00005EF8 82FC 003C                  		divu.w	#$3C,d1
00005EFC 0281 0000 000F             		andi.l	#$F,d1
00005F02 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005F08 46FC 2300                  		enable_ints
00005F0C                            
00005F0C                            loc_4DF2:
00005F0C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005F12 4EB9 0000 0000             		jsr	(BuildSprites).l
00005F18 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005F1E 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005F20 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005F26 64B6                       		bhs.s	Cont_MainLoop
00005F28 4A78 F614                  		tst.w	(v_demolength).w
00005F2C 6600 FFB0                  		bne.w	Cont_MainLoop
00005F30 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005F36 4E75                       		rts	
00005F38                            ; ===========================================================================
00005F38                            
00005F38                            Cont_GotoLevel:
00005F38 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005F3E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005F44 7000                       		moveq	#0,d0
00005F46 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005F4A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005F4E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005F52 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005F56 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005F5A 4E75                       		rts	
00005F5C                            ; ===========================================================================
00005F5C                            
00005F5C                            		include	"_incObj\80 Continue Screen Elements.asm"
00005F5C                            ; ---------------------------------------------------------------------------
00005F5C                            ; Object 80 - Continue screen elements
00005F5C                            ; ---------------------------------------------------------------------------
00005F5C                            
00005F5C                            ContScrItem:
00005F5C 7000                       		moveq	#0,d0
00005F5E 1028 0024                  		move.b	$24(a0),d0
00005F62 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005F66 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005F6A                            ; ===========================================================================
00005F6A 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005F6C 0000                       		dc.w CSI_Display-CSI_Index
00005F6E 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005F70 0000                       		dc.w CSI_ChkDel-CSI_Index
00005F72                            ; ===========================================================================
00005F72                            
00005F72                            CSI_Main:	; Routine 0
00005F72 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F76 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005F7E 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005F84 117C 0000 0001             		move.b	#0,obRender(a0)
00005F8A 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005F90 317C 0120 0008             		move.w	#$120,obX(a0)
00005F96 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005F9C 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005FA2                            
00005FA2                            CSI_Display:	; Routine 2
00005FA2 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005FA8                            ; ===========================================================================
00005FA8                            
00005FA8                            	CSI_MiniSonicPos:
00005FA8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005FBA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005FC6                            
00005FC6                            CSI_MakeMiniSonic:
00005FC6                            		; Routine 4
00005FC6 2248                       		movea.l	a0,a1
00005FC8 45F9 0000 5FA8             		lea	(CSI_MiniSonicPos).l,a2
00005FCE 7200                       		moveq	#0,d1
00005FD0 1238 FE18                  		move.b	(v_continues).w,d1
00005FD4 5501                       		subq.b	#2,d1
00005FD6 6400                       		bcc.s	CSI_MoreThan1
00005FD8 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005FDE                            
00005FDE                            	CSI_MoreThan1:
00005FDE 7601                       		moveq	#1,d3
00005FE0 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005FE4 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005FE6                            
00005FE6 7600                       		moveq	#0,d3
00005FE8 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005FEA                            
00005FEA                            	CSI_FewerThan16:
00005FEA 1401                       		move.b	d1,d2
00005FEC 0202 0001                  		andi.b	#1,d2
00005FF0                            
00005FF0                            CSI_MiniSonicLoop:
00005FF0 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005FF4 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005FF8 4A02                       		tst.b	d2		; do you have an even number of continues?
00005FFA 6700                       		beq.s	CSI_Even	; if yes, branch
00005FFC 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00006002                            
00006002                            	CSI_Even:
00006002 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00006008 137C 0006 001A             		move.b	#6,obFrame(a1)
0000600E 137C 0006 0024             		move.b	#6,obRoutine(a1)
00006014 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
0000601C 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00006022 137C 0000 0001             		move.b	#0,obRender(a1)
00006028 43E9 0040                  		lea	$40(a1),a1
0000602C 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00006030                            
00006030 43E9 FFC0                  		lea	-$40(a1),a1
00006034 1343 0028                  		move.b	d3,obSubtype(a1)
00006038                            
00006038                            CSI_ChkDel:	; Routine 6
00006038 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
0000603C 6700                       		beq.s	CSI_Animate	; if yes, branch
0000603E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00006044 6500                       		bcs.s	CSI_Animate	; if not, branch
00006046 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000604A 0200 0001                  		andi.b	#1,d0
0000604E 6600                       		bne.s	CSI_Animate
00006050 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00006054 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00006056 4E75                       		rts	
00006058                            
00006058                            CSI_Animate:
00006058 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000605C 0200 000F                  		andi.b	#$F,d0
00006060 6600                       		bne.s	CSI_Display2
00006062 0868 0000 001A             		bchg	#0,obFrame(a0)
00006068                            
00006068                            	CSI_Display2:
00006068 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000606E                            ; ===========================================================================
0000606E                            
0000606E                            CSI_Delete:
0000606E 4EF9 0000 0000             		jmp	(DeleteObject).l
0000606E 4EF9 0000 0000             		jmp	(DeleteObject).l
00006074                            		include	"_incObj\81 Continue Screen Sonic.asm"
00006074                            ; ---------------------------------------------------------------------------
00006074                            ; Object 81 - Sonic on the continue screen
00006074                            ; ---------------------------------------------------------------------------
00006074                            
00006074                            ContSonic:
00006074 7000                       		moveq	#0,d0
00006076 1028 0024                  		move.b	obRoutine(a0),d0
0000607A 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
0000607E 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00006082 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006088                            ; ===========================================================================
00006088 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
0000608A 0000                       		dc.w CSon_ChkLand-CSon_Index
0000608C 0000                       		dc.w CSon_Animate-CSon_Index
0000608E 0000                       		dc.w CSon_Run-CSon_Index
00006090                            ; ===========================================================================
00006090                            
00006090                            CSon_Main:	; Routine 0
00006090 5428 0024                  		addq.b	#2,obRoutine(a0)
00006094 317C 00A0 0008             		move.w	#$A0,obX(a0)
0000609A 317C 00C0 000C             		move.w	#$C0,obY(a0)
000060A0 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000060A8 317C 0780 0002             		move.w	#$780,obGfx(a0)
000060AE 117C 0004 0001             		move.b	#4,obRender(a0)
000060B4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000060BA 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
000060C0 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
000060C6                            
000060C6                            CSon_ChkLand:	; Routine 2
000060C6 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
000060CC 6600                       		bne.s	CSon_ShowFall	; if not, branch
000060CE                            
000060CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000060D2 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
000060D6 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
000060DE 317C 8500 0002             		move.w	#$8500,obGfx(a0)
000060E4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000060EA 6000                       		bra.s	CSon_Animate
000060EC                            
000060EC                            CSon_ShowFall:
000060EC 4EB9 0000 0000             		jsr	(SpeedToPos).l
000060F2 4EB9 0000 0000             		jsr	(Sonic_Animate).l
000060F8 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000060FE                            ; ===========================================================================
000060FE                            
000060FE                            CSon_Animate:	; Routine 4
000060FE 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006102 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00006104 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
0000610A 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006110                            
00006110                            CSon_GetUp:
00006110 5428 0024                  		addq.b	#2,obRoutine(a0)
00006114 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000611C 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006122 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00006128 4268 0020                  		clr.w	obInertia(a0)
0000612C 5168 000C                  		subq.w	#8,obY(a0)
00006138                            
00006138                            CSon_Run:	; Routine 6
00006138 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
0000613E 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006140 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006146 6000                       		bra.s	CSon_ShowRun
00006148                            
00006148                            CSon_AddInertia:
00006148 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
0000614E                            
0000614E                            CSon_ShowRun:
0000614E 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006154 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000615A 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000615A 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006160                            		include	"_anim\Continue Screen Sonic.asm"
00006160                            ; ---------------------------------------------------------------------------
00006160                            ; Animation script - Sonic on the continue screen
00006160                            ; ---------------------------------------------------------------------------
00006160 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006162 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
0000616C                            		even
0000616C                            		even
0000616C                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000616C                            ; --------------------------------------------------------------------------------
0000616C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000616C                            ; --------------------------------------------------------------------------------
0000616C                            
0000616C                            SME_phED7:	
0000616C 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00006170 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
00006174 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
00006178 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
0000617C 0B                         SME_phED7_10:	dc.b $B	
0000617D F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
00006182 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00006187 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
0000618C F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
00006191 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
00006196 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
0000619B F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
000061A0 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
000061A5 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
000061AA 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
000061AF 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
000061B4 03                         SME_phED7_48:	dc.b 3	
000061B5 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
000061BA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061BF F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061C4 03                         SME_phED7_58:	dc.b 3	
000061C5 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
000061CA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061CF F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061D4 03                         SME_phED7_68:	dc.b 3	
000061D5 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
000061DA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061DF F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061E4 02                         SME_phED7_78:	dc.b 2	
000061E5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
000061EA 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
000061EF 01                         SME_phED7_83:	dc.b 1	
000061F0 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
000061F5 01                         SME_phED7_89:	dc.b 1	
000061F6 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
000061FB 01                         SME_phED7_8F:	dc.b 1	
000061FC 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006202 00                         		even
00006202 00                         		even
00006202                            
00006202                            ; ===========================================================================
00006202                            ; ---------------------------------------------------------------------------
00006202                            ; Ending sequence in Green Hill	Zone
00006202                            ; ---------------------------------------------------------------------------
00006202                            
00006202                            GM_Ending:
0000620A 6100 BFC6                  		bsr.w	PaletteFadeOut
0000620E                            
0000620E 43F8 D000                  		lea	(v_objspace).w,a1
00006212 7000                       		moveq	#0,d0
00006214 323C 07FF                  		move.w	#$7FF,d1
00006218                            	End_ClrObjRam:
00006218 22C0                       		move.l	d0,(a1)+
0000621A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000621E                            
0000621E 43F8 F628                  		lea	($FFFFF628).w,a1
00006222 7000                       		moveq	#0,d0
00006224 323C 0015                  		move.w	#$15,d1
00006228                            	End_ClrRam1:
00006228 22C0                       		move.l	d0,(a1)+
0000622A 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
0000622E                            
0000622E 43F8 F700                  		lea	(v_screenposx).w,a1
00006232 7000                       		moveq	#0,d0
00006234 323C 003F                  		move.w	#$3F,d1
00006238                            	End_ClrRam2:
00006238 22C0                       		move.l	d0,(a1)+
0000623A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000623E                            
0000623E 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006242 7000                       		moveq	#0,d0
00006244 323C 0047                  		move.w	#$47,d1
00006248                            	End_ClrRam3:
00006248 22C0                       		move.l	d0,(a1)+
0000624A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000624E                            
0000624E 46FC 2700                  		disable_ints
00006252 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006256 0200 00BF                  		andi.b	#$BF,d0
0000625A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006260 6100 AF6E                  		bsr.w	ClearScreen
00006264 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000626A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000626E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006272 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006276 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000627A 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
0000627E 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006282 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006286 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000628C 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00006290 31FC 001E FE14             		move.w	#30,(v_air).w
00006296 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
0000629C 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000062A2 6700                       		beq.s	End_LoadData	; if yes, branch
000062A4 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000062AA                            
000062AA                            End_LoadData:
000062AA 7000                       		moveq	#plcid_Ending,d0
000062AC 6100 B5F8                  		bsr.w	QuickPLC	; load ending sequence patterns
000062B0 4EB9 0000 0000             		jsr	(Hud_Base).l
000062B6 6100 0000                  		bsr.w	LevelSizeLoad
000062BA 6100 0000                  		bsr.w	DeformLayers
000062BE 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000062C4 6100 0000                  		bsr.w	LevelDataLoad
000062C8 6100 0000                  		bsr.w	LoadTilesFromStart
000062CC 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000062D4 46FC 2300                  		enable_ints
000062D8 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000062DE 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000062E2 6100 B772                  		bsr.w	KosDec
000062E6 4EB9 0000 0000             		jsr		LoadPlayerPal
000062EC 6100 C18E                  		bsr.w	PalLoad1	; load Sonic's palette
000062F8 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000062FE 6700                       		beq.s	End_LoadSonic	; if not, branch
00006300 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00006306                            
00006306                            End_LoadSonic:
00006306 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0000630C 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006312 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00006318 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
0000631E 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
00006324 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000632A 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006330 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006336 4EB9 0000 0000             		jsr	(BuildSprites).l
0000633C 7000                       		moveq	#0,d0
0000633E 31C0 FE20                  		move.w	d0,(v_rings).w
00006342 21C0 FE22                  		move.l	d0,(v_time).w
00006346 11C0 FE1B                  		move.b	d0,(v_lifecount).w
0000634A 11C0 FE2C                  		move.b	d0,(v_shield).w
0000634E 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006352 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006356 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000635A 31C0 FE08                  		move.w	d0,(v_debuguse).w
0000635E 31C0 FE02                  		move.w	d0,(f_restart).w
00006362 31C0 FE04                  		move.w	d0,(v_framecount).w
00006366 6100 EEBC                  		bsr.w	OscillateNumInit
0000636A 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006370 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006376 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
0000637C 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006382 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006388 6100 D786                  		bsr.w	WaitForVBla
0000638C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006390 0000 0040                  		ori.b	#$40,d0
00006394 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000639A 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000063A0 6100 BD8A                  		bsr.w	PaletteFadeIn
000063A4                            
000063A4                            ; ---------------------------------------------------------------------------
000063A4                            ; Main ending sequence loop
000063A4                            ; ---------------------------------------------------------------------------
000063A4                            
000063A4                            End_MainLoop:
000063A4 6100 AF06                  		bsr.w	PauseGame
000063A8 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000063AE 6100 D760                  		bsr.w	WaitForVBla
000063B2 5278 FE04                  		addq.w	#1,(v_framecount).w
000063B6 6100 0000                  		bsr.w	End_MoveSonic
000063BA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000063C0 6100 0000                  		bsr.w	DeformLayers
000063C4 4EB9 0000 0000             		jsr	(BuildSprites).l
000063CA 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000063D0 6100 B94C                  		bsr.w	PaletteCycle
000063D4 6100 EEA4                  		bsr.w	OscillateNumDo
000063D8 6100 EF30                  		bsr.w	SynchroAnimate
000063DC 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000063E2 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000063E4                            
000063E4 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000063EA 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000063F0 4E75                       		rts	
000063F2                            ; ===========================================================================
000063F2                            
000063F2                            End_ChkEmerald:
000063F2 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000063F6 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
000063FA                            
000063FA 4278 FE02                  		clr.w	(f_restart).w
000063FE 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006404 4278 F794                  		clr.w	(v_palchgspeed).w
00006408                            
00006408                            	End_AllEmlds:
00006408 6100 AEA2                  		bsr.w	PauseGame
0000640C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006412 6100 D6FC                  		bsr.w	WaitForVBla
00006416 5278 FE04                  		addq.w	#1,(v_framecount).w
0000641A 6100 0000                  		bsr.w	End_MoveSonic
0000641E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006424 6100 0000                  		bsr.w	DeformLayers
00006428 4EB9 0000 0000             		jsr	(BuildSprites).l
0000642E 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006434 6100 EE44                  		bsr.w	OscillateNumDo
00006438 6100 EED0                  		bsr.w	SynchroAnimate
0000643C 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006440 6A00                       		bpl.s	End_SlowFade
00006442 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00006448 6100 BED2                  		bsr.w	WhiteOut_ToWhite
0000644C                            
0000644C                            	End_SlowFade:
0000644C 4A78 FE02                  		tst.w	(f_restart).w
00006450 6700 FFB6                  		beq.w	End_AllEmlds
00006454 4278 FE02                  		clr.w	(f_restart).w
00006458 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
0000645E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006464 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000646A 47F8 F700                  		lea	(v_screenposx).w,a3
0000646E 49F8 A400                  		lea	(v_lvllayout).w,a4
00006472 343C 4000                  		move.w	#$4000,d2
00006476 6100 0000                  		bsr.w	DrawChunks
0000647A 7015                       		moveq	#palid_Ending,d0
0000647C 6100 BFFE                  		bsr.w	PalLoad1	; load ending palette
00006480 6100 BDCE                  		bsr.w	PaletteWhiteIn
00006484 6000 FF1E                  		bra.w	End_MainLoop
00006488                            
00006488                            ; ---------------------------------------------------------------------------
00006488                            ; Subroutine controlling Sonic on the ending sequence
00006488                            ; ---------------------------------------------------------------------------
00006488                            
00006488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006488                            
00006488                            
00006488                            End_MoveSonic:
00006488 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000648C 6600                       		bne.s	End_MoveSon2
0000648E 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006494 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006496                            
00006496 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000649A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000064A0 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000064A6 4E75                       		rts	
000064A8                            ; ===========================================================================
000064A8                            
000064A8                            End_MoveSon2:
000064A8 5500                       		subq.b	#2,d0
000064AA 6600                       		bne.s	End_MoveSon3
000064AC 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000064B2 6500                       		blo.s	End_MoveSonExit	; if not, branch
000064B4                            
000064B4 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000064B8 7000                       		moveq	#0,d0
000064BA 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000064BE 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000064C2 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000064C6 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000064CC 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000064D2 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000064D8 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000064DE 4E75                       		rts	
000064E0                            ; ===========================================================================
000064E0                            
000064E0                            End_MoveSon3:
000064E0 5500                       		subq.b	#2,d0
000064E2 6600                       		bne.s	End_MoveSonExit
000064E4 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000064E8 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000064EE 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000064F4 4278 D024                  		clr.w	(v_player+obRoutine).w
000064F8                            
000064F8                            End_MoveSonExit:
000064F8 4E75                       		rts	
000064FA                            ; End of function End_MoveSonic
000064FA                            
000064FA                            ; ===========================================================================
000064FA                            
000064FA                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            ; Object 87 - Sonic on ending sequence
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            
000064FA                            EndSonic:
000064FA 7000                       		moveq	#0,d0
000064FC 1028 0025                  		move.b	ob2ndRout(a0),d0
00006500 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006504 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
00006508 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000650E                            ; ===========================================================================
0000650E 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006512 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006516 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000651A 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
0000651E 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006522                            
00006522 =00000030                  eson_time:	equ $30	; time to wait between events
00006522                            ; ===========================================================================
00006522                            
00006522                            ESon_Main:	; Routine 0
00006522 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006528 6700                       		beq.s	ESon_Main2	; if yes, branch
0000652A 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006530 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006536 4E75                       		rts	
00006538                            ; ===========================================================================
00006538                            
00006538                            ESon_Main2:
00006538 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000653C 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006544 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000654A 117C 0004 0001             		move.b	#4,obRender(a0)
00006550 4228 0022                  		clr.b	obStatus(a0)
00006554 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000655A 117C 0000 001A             		move.b	#0,obFrame(a0)
00006560 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006566                            
00006566                            ESon_MakeEmeralds:
00006566                            		; Routine 2
00006566 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000656A 6600                       		bne.s	ESon_Wait
0000656C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006570 317C 0001 001C             		move.w	#1,obAnim(a0)
00006576 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000657C                            
0000657C                            	ESon_Wait:
0000657C 4E75                       		rts	
0000657E                            ; ===========================================================================
0000657E                            
0000657E                            Obj87_LookUp:	; Routine 6
0000657E 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006586 6600                       		bne.s	locret_5480
00006588 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
0000658E 317C 005A 0030             		move.w	#90,eson_time(a0)
00006594 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006598                            
00006598                            locret_5480:
00006598 4E75                       		rts	
0000659A                            ; ===========================================================================
0000659A                            
0000659A                            Obj87_ClrObjRam:
0000659A                            		; Routine 8
0000659A 5368 0030                  		subq.w	#1,eson_time(a0)
0000659E 6600                       		bne.s	ESon_Wait2
000065A0 43F8 D400                  		lea	(v_objspace+$400).w,a1
000065A4 323C 00FF                  		move.w	#$FF,d1
000065A8                            
000065A8                            Obj87_ClrLoop:
000065A8 4299                       		clr.l	(a1)+
000065AA 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000065AE 31FC 0001 FE02             		move.w	#1,(f_restart).w
000065B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065B8 117C 0001 001C             		move.b	#1,obAnim(a0)
000065BE 317C 003C 0030             		move.w	#60,eson_time(a0)
000065C4                            
000065C4                            ESon_Wait2:
000065C4 4E75                       		rts	
000065C6                            ; ===========================================================================
000065C6                            
000065C6                            Obj87_MakeLogo:	; Routine $C
000065C6 5368 0030                  		subq.w	#1,eson_time(a0)
000065CA 6600                       		bne.s	ESon_Wait3
000065CC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065D0 317C 00B4 0030             		move.w	#180,eson_time(a0)
000065D6 117C 0002 001C             		move.b	#2,obAnim(a0)
000065DC 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000065E2                            
000065E2                            ESon_Wait3:
000065E2 4E75                       		rts	
000065E4                            ; ===========================================================================
000065E4                            
000065E4                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000065E4 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000065EA 4EF9 0000 0000             		jmp	(AnimateSprite).l
000065F0                            ; ===========================================================================
000065F0                            
000065F0                            Obj87_Leap:	; Routine $10
000065F0 5368 0030                  		subq.w	#1,eson_time(a0)
000065F4 6600                       		bne.s	ESon_Wait4
000065F6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065FA 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006602 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006608 117C 0004 0001             		move.b	#4,obRender(a0)
0000660E 4228 0022                  		clr.b	obStatus(a0)
00006612 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006618 117C 0005 001A             		move.b	#5,obFrame(a0)
0000661E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006624 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000662A 60B8                       		bra.s	Obj87_Animate
0000662C                            ; ===========================================================================
0000662C                            
0000662C                            ESon_Wait4:
0000662C 4E75                       		rts	
0000662C 4E75                       		rts	
0000662E                            		include "_anim\Ending Sequence Sonic.asm"
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            ; Animation script - Sonic on the ending sequence
0000662E                            ; ---------------------------------------------------------------------------
0000662E 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006630 0000                       		dc.w byte_552A-AniScript_ESon
00006632 0000                       		dc.w byte_5534-AniScript_ESon
00006634 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006642 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000664C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006654                            		even
00006654                            		even
00006654                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006654                            ; ---------------------------------------------------------------------------
00006654                            ; Object 88 - chaos emeralds on	the ending sequence
00006654                            ; ---------------------------------------------------------------------------
00006654                            
00006654                            EndChaos:
00006654 7000                       		moveq	#0,d0
00006656 1028 0024                  		move.b	obRoutine(a0),d0
0000665A 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
0000665E 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006662 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006668                            ; ===========================================================================
00006668 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000666A 0000                       		dc.w ECha_Move-ECha_Index
0000666C                            
0000666C =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000666C =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000666C =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000666C =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000666C                            ; ===========================================================================
0000666C                            
0000666C                            ECha_Main:	; Routine 0
0000666C 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006672 6700                       		beq.s	ECha_CreateEms
00006674 588F                       		addq.l	#4,sp
00006676 4E75                       		rts	
00006678                            ; ===========================================================================
00006678                            
00006678                            ECha_CreateEms:
00006678 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
0000667E 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006684 2248                       		movea.l	a0,a1
00006686 7600                       		moveq	#0,d3
00006688 7401                       		moveq	#1,d2
0000668A 7205                       		moveq	#5,d1
0000668C                            
0000668C                            	ECha_LoadLoop:
0000668C 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006690 5429 0024                  		addq.b	#2,obRoutine(a1)
00006694 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000669C 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000066A2 137C 0004 0001             		move.b	#4,obRender(a1)
000066A8 337C 0080 0018             		move.w	#$80,obPriority(a1)
000066AE 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000066B4 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000066BA 1342 001C                  		move.b	d2,obAnim(a1)
000066BE 1342 001A                  		move.b	d2,obFrame(a1)
000066C2 5202                       		addq.b	#1,d2
000066C4 1343 0026                  		move.b	d3,obAngle(a1)
000066C8 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000066CC 43E9 0040                  		lea	$40(a1),a1
000066D0 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000066D4                            
000066D4                            ECha_Move:	; Routine 2
000066D4 3028 003E                  		move.w	echa_angle(a0),d0
000066D8 D168 0026                  		add.w	d0,obAngle(a0)
000066DC 1028 0026                  		move.b	obAngle(a0),d0
000066E0 4EB9 0000 3B42             		jsr	(CalcSine).l
000066E6 7800                       		moveq	#0,d4
000066E8 1828 003C                  		move.b	echa_radius(a0),d4
000066EC C3C4                       		muls.w	d4,d1
000066EE E081                       		asr.l	#8,d1
000066F0 C1C4                       		muls.w	d4,d0
000066F2 E080                       		asr.l	#8,d0
000066F4 D268 0038                  		add.w	echa_origX(a0),d1
000066F8 D068 003A                  		add.w	echa_origY(a0),d0
000066FC 3141 0008                  		move.w	d1,obX(a0)
00006700 3140 000C                  		move.w	d0,obY(a0)
00006704                            
00006704                            	ECha_Expand:
00006704 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000670A 6700                       		beq.s	ECha_Rotate
0000670C 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006712                            
00006712                            	ECha_Rotate:
00006712 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006718 6700                       		beq.s	ECha_Rise
0000671A 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006720                            
00006720                            	ECha_Rise:
00006720 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006726 6700                       		beq.s	ECha_End
00006728 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000672C                            
0000672C                            ECha_End:
0000672C 4E75                       		rts	
0000672C 4E75                       		rts	
0000672E                            		include	"_incObj\89 Ending Sequence STH.asm"
0000672E                            ; ---------------------------------------------------------------------------
0000672E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000672E                            ; ---------------------------------------------------------------------------
0000672E                            
0000672E                            EndSTH:
0000672E 7000                       		moveq	#0,d0
00006730 1028 0024                  		move.b	$24(a0),d0
00006734 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
00006738 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000673C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006742                            ; ===========================================================================
00006742 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006744 0000                       		dc.w ESth_Move-ESth_Index
00006746 0000                       		dc.w ESth_GotoCredits-ESth_Index
00006748                            
00006748 =00000030                  esth_time:	equ $30		; time until exit
00006748                            ; ===========================================================================
00006748                            
00006748                            ESth_Main:	; Routine 0
00006748 5428 0024                  		addq.b	#2,obRoutine(a0)
0000674C 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006752 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
00006758 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006760 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006766 117C 0000 0001             		move.b	#0,obRender(a0)
0000676C 317C 0000 0018             		move.w	#0,obPriority(a0)
00006772                            
00006772                            ESth_Move:	; Routine 2
00006772 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
00006778 6700                       		beq.s	ESth_Delay	; if yes, branch
0000677A 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006780 4E75                       		rts
00006782                            
00006782                            ESth_Delay:
00006782 5428 0024                  		addq.b	#2,obRoutine(a0)
00006786 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000678C                            
0000678C                            ESth_GotoCredits:
0000678C                            		; Routine 4
0000678C 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006790 6A00                       		bpl.s	ESth_Wait
00006792 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
00006798                            
00006798                            	ESth_Wait:
00006798 4E75                       		rts
0000679A                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000679A                            ; --------------------------------------------------------------------------------
0000679A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000679A                            ; --------------------------------------------------------------------------------
0000679A                            
0000679A                            SME_6jV7R:	
0000679A 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
0000679E 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
000067A2 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
000067A6 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
000067AA 02                         SME_6jV7R_10:	dc.b 2	
000067AB EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000067B0 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000067B5 03                         SME_6jV7R_1B:	dc.b 3	
000067B6 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
000067BB EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000067C0 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000067C5 02                         SME_6jV7R_2B:	dc.b 2	
000067C6 EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
000067CB FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
000067D0 04                         SME_6jV7R_36:	dc.b 4	
000067D1 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000067D6 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
000067DB E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
000067E0 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
000067E5 04                         SME_6jV7R_4B:	dc.b 4	
000067E6 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000067EB EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
000067F0 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
000067F5 EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
000067FA 03                         SME_6jV7R_60:	dc.b 3	
000067FB EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
00006800 EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
00006805 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
0000680A 07                         SME_6jV7R_70:	dc.b 7	
0000680B B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
00006810 BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
00006815 BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
0000681A CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
0000681F DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
00006824 E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
00006829 EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
0000682E 18                         SME_6jV7R_94:	dc.b $18	
0000682F 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
00006834 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
00006839 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
0000683E 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
00006843 A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
00006848 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
0000684D 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
00006852 A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
00006857 B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
0000685C B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
00006861 A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
00006866 C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
0000686B C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
00006870 B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
00006875 B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
0000687A D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
0000687F D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
00006884 D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
00006889 E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
0000688E E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
00006893 D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
00006898 E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
0000689D F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
000068A2 F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
000068A8 00                         		even
000068A8 00                         		even
000068A8                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000068A8                            ; --------------------------------------------------------------------------------
000068A8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000068A8                            ; --------------------------------------------------------------------------------
000068A8                            
000068A8                            SME_0ZTmS:	
000068A8 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
000068AC 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
000068B0 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000068B4 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000068B6 01                         SME_0ZTmS_E:	dc.b 1	
000068B7 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000068BC 01                         SME_0ZTmS_14:	dc.b 1	
000068BD F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000068C2 01                         SME_0ZTmS_1A:	dc.b 1	
000068C3 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000068C8 01                         SME_0ZTmS_20:	dc.b 1	
000068C9 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000068CE 01                         SME_0ZTmS_26:	dc.b 1	
000068CF F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000068D4 01                         SME_0ZTmS_2C:	dc.b 1	
000068D5 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000068DA 01                         SME_0ZTmS_32:	dc.b 1	
000068DB F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000068E0                            		even
000068E0                            		even
000068E0                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000068E0                            ; --------------------------------------------------------------------------------
000068E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000068E0                            ; --------------------------------------------------------------------------------
000068E0                            
000068E0                            SME_WuUDZ:	
000068E0 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
000068E2 03                         SME_WuUDZ_2:	dc.b 3	
000068E3 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
000068E8 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
000068ED F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
000068F2                            		even
000068F2                            		even
000068F2                            
000068F2                            ; ===========================================================================
000068F2                            ; ---------------------------------------------------------------------------
000068F2                            ; Credits ending sequence
000068F2                            ; ---------------------------------------------------------------------------
000068F2                            
000068F2                            GM_Credits:
000068F2                            		
000068F2 6100 AEA4                  		bsr.w	ClearPLC
000068F6 6100 B8DA                  		bsr.w	PaletteFadeOut
000068FA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006900 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006904 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006908 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000690C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006910 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006914 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006918 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
0000691C 4238 F64E                  		clr.b	(f_wtr_state).w
00006920 6100 A8AE                  		bsr.w	ClearScreen
00006924                            
00006924 43F8 D000                  		lea	(v_objspace).w,a1
00006928 7000                       		moveq	#0,d0
0000692A 323C 07FF                  		move.w	#$7FF,d1
0000692E                            	TryAg_ClrObjRam:
0000692E 22C0                       		move.l	d0,(a1)+
00006930 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006934                            
00006934 7000                       		moveq	#plcid_TryAgain,d0
00006936 6100 AF6E                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
0000693A                            
0000693A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000693E 7000                       		moveq	#0,d0
00006940 323C 001F                  		move.w	#$1F,d1
00006944                            	TryAg_ClrPal:
00006944 22C0                       		move.l	d0,(a1)+
00006946 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
0000694A                            
0000694A 7015                       		moveq	#palid_Ending,d0
0000694C 6100 BB2E                  		bsr.w	PalLoad1	; load ending palette
00006950 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006954 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
0000695A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006960 4EB9 0000 0000             		jsr	(BuildSprites).l
00006966 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
0000696C 6100 B7BE                  		bsr.w	PaletteFadeIn
00006970                            
00006970                            ; ---------------------------------------------------------------------------
00006970                            ; "TRY AGAIN" and "END"	screen main loop
00006970                            ; ---------------------------------------------------------------------------
00006970                            TryAg_MainLoop:
00006970 6100 A93A                  		bsr.w	PauseGame
00006974 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000697A 6100 D194                  		bsr.w	WaitForVBla
0000697E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006984 4EB9 0000 0000             		jsr	(BuildSprites).l
0000698A 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006990 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006992 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006996 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006998 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000699E 67D0                       		beq.s	TryAg_MainLoop
000069A0                            
000069A0                            TryAg_Exit:
000069A0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000069A6 4E75                       		rts	
000069A8                            
000069A8                            ; ===========================================================================
000069A8                            
000069A8                            		include	"_incObj\8B Try Again & End Eggman.asm"
000069A8                            ; ---------------------------------------------------------------------------
000069A8                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000069A8                            ; ---------------------------------------------------------------------------
000069A8                            
000069A8                            EndEggman:
000069A8 7000                       		moveq	#0,d0
000069AA 1028 0024                  		move.b	obRoutine(a0),d0
000069AE 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
000069B2 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
000069B6 4EF9 0000 0000             		jmp	(DisplaySprite).l
000069BC                            ; ===========================================================================
000069BC 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
000069BE 0000                       		dc.w EEgg_Animate-EEgg_Index
000069C0 0000                       		dc.w EEgg_Juggle-EEgg_Index
000069C2 0000                       		dc.w EEgg_Wait-EEgg_Index
000069C4                            
000069C4 =00000030                  eegg_time:	equ $30		; time between juggle motions
000069C4                            ; ===========================================================================
000069C4                            
000069C4                            EEgg_Main:	; Routine 0
000069C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000069C8 317C 0120 0008             		move.w	#$120,obX(a0)
000069CE 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
000069D4 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
000069DC 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000069E2 117C 0000 0001             		move.b	#0,obRender(a0)
000069E8 317C 0100 0018             		move.w	#$100,obPriority(a0)
000069EE 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000069F4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000069FA 6700                       		beq.s	EEgg_Animate	; if yes, branch
000069FC                            
000069FC 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006A02 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006A08 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006A0E 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006A14                            
00006A14                            EEgg_Animate:	; Routine 2
00006A14 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006A1A 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006A20                            ; ===========================================================================
00006A20                            
00006A20                            EEgg_Juggle:	; Routine 4
00006A20 5428 0024                  		addq.b	#2,obRoutine(a0)
00006A24 7002                       		moveq	#2,d0
00006A26 0828 0000 001C             		btst	#0,obAnim(a0)
00006A2C 6700                       		beq.s	@noflip
00006A2E 4440                       		neg.w	d0
00006A30                            
00006A30                            	@noflip:
00006A30 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006A34 7205                       		moveq	#5,d1
00006A36                            
00006A36                            @emeraldloop:
00006A36 1340 003E                  		move.b	d0,$3E(a1)
00006A3A 3400                       		move.w	d0,d2
00006A3C E742                       		asl.w	#3,d2
00006A3E D529 0026                  		add.b	d2,obAngle(a1)
00006A42 43E9 0040                  		lea	$40(a1),a1
00006A46 51C9 FFEE                  		dbf	d1,@emeraldloop
00006A4A 5228 001A                  		addq.b	#1,obFrame(a0)
00006A4E 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006A54                            
00006A54                            EEgg_Wait:	; Routine 6
00006A54 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006A58 6A00                       		bpl.s	@nochg		; branch if time remains
00006A5A 0868 0000 001C             		bchg	#0,obAnim(a0)
00006A60 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006A66                            
00006A66                            	@nochg:
00006A66 4E75                       		rts	
00006A66 4E75                       		rts	
00006A68                            		include "_anim\Try Again & End Eggman.asm"
00006A68                            ; ---------------------------------------------------------------------------
00006A68                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006A68                            ; ---------------------------------------------------------------------------
00006A68 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006A6A 0000                       		dc.w @tryagain2-Ani_EEgg
00006A6C 0000                       		dc.w @end-Ani_EEgg
00006A6E 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006A72 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006A76 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006A88                            		even
00006A88                            		even
00006A88                            		include	"_incObj\8C Try Again Emeralds.asm"
00006A88                            ; ---------------------------------------------------------------------------
00006A88                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006A88                            ; ---------------------------------------------------------------------------
00006A88                            
00006A88                            TryChaos:
00006A88 7000                       		moveq	#0,d0
00006A8A 1028 0024                  		move.b	obRoutine(a0),d0
00006A8E 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006A92 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006A96 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006A9C                            ; ===========================================================================
00006A9C 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006A9E 0000                       		dc.w TCha_Move-TCha_Index
00006AA0                            ; ===========================================================================
00006AA0                            
00006AA0                            TCha_Main:	; Routine 0
00006AA0 2248                       		movea.l	a0,a1
00006AA2 7400                       		moveq	#0,d2
00006AA4 7600                       		moveq	#0,d3
00006AA6 7205                       		moveq	#5,d1
00006AA8 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006AAC                            
00006AAC                            @makeemerald:
00006AAC 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006AB0 5429 0024                  		addq.b	#2,obRoutine(a1)
00006AB4 237C 0000 68A8 0004        		move.l	#Map_ECha,obMap(a1)
00006ABC 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006AC2 137C 0000 0001             		move.b	#0,obRender(a1)
00006AC8 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006ACE 337C 0104 0008             		move.w	#$104,obX(a1)
00006AD4 337C 0120 0038             		move.w	#$120,$38(a1)
00006ADA 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006AE0 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006AE6 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006AEC 47F8 FE58                  		lea	(v_emldlist).w,a3
00006AF0                            
00006AF0                            	@chkemerald:
00006AF0 7000                       		moveq	#0,d0
00006AF2 1038 FE57                  		move.b	(v_emeralds).w,d0
00006AF6 5340                       		subq.w	#1,d0
00006AF8 6500                       		bcs.s	@loc_5B42
00006AFA                            
00006AFA                            	@chkloop:
00006AFA B433 0000                  		cmp.b	(a3,d0.w),d2
00006AFE 6600                       		bne.s	@notgot
00006B00 5202                       		addq.b	#1,d2
00006B02 60EC                       		bra.s	@chkemerald
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            	@notgot:
00006B04 51C8 FFF4                  		dbf	d0,@chkloop
00006B08                            
00006B08                            @loc_5B42:
00006B08 1342 001A                  		move.b	d2,obFrame(a1)
00006B0C 5229 001A                  		addq.b	#1,obFrame(a1)
00006B10 5202                       		addq.b	#1,d2
00006B12 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006B18 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006B1C 1343 001F                  		move.b	d3,obDelayAni(a1)
00006B20 0643 000A                  		addi.w	#10,d3
00006B24 43E9 0040                  		lea	$40(a1),a1
00006B28 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006B2C                            
00006B2C                            TCha_Move:	; Routine 2
00006B2C 4A68 003E                  		tst.w	$3E(a0)
00006B30 6700                       		beq.s	locret_5BBA
00006B32 4A28 001E                  		tst.b	obTimeFrame(a0)
00006B36 6700                       		beq.s	loc_5B78
00006B38 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006B3C 6600                       		bne.s	loc_5B80
00006B3E                            
00006B3E                            loc_5B78:
00006B3E 3028 003E                  		move.w	$3E(a0),d0
00006B42 D168 0026                  		add.w	d0,obAngle(a0)
00006B46                            
00006B46                            loc_5B80:
00006B46 1028 0026                  		move.b	obAngle(a0),d0
00006B4A 6700                       		beq.s	loc_5B8C
00006B4C 0C00 0080                  		cmpi.b	#$80,d0
00006B50 6600                       		bne.s	loc_5B96
00006B52                            
00006B52                            loc_5B8C:
00006B52 4268 003E                  		clr.w	$3E(a0)
00006B56 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006B5C                            
00006B5C                            loc_5B96:
00006B5C 4EB9 0000 3B42             		jsr	(CalcSine).l
00006B62 7800                       		moveq	#0,d4
00006B64 1828 003C                  		move.b	$3C(a0),d4
00006B68 C3C4                       		muls.w	d4,d1
00006B6A E081                       		asr.l	#8,d1
00006B6C C1C4                       		muls.w	d4,d0
00006B6E E080                       		asr.l	#8,d0
00006B70 D268 0038                  		add.w	$38(a0),d1
00006B74 D068 003A                  		add.w	$3A(a0),d0
00006B78 3141 0008                  		move.w	d1,obX(a0)
00006B7C 3140 000A                  		move.w	d0,obScreenY(a0)
00006B80                            
00006B80                            locret_5BBA:
00006B80 4E75                       		rts	
00006B80 4E75                       		rts	
00006B82                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006B82                            ; ---------------------------------------------------------------------------
00006B82                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006B82                            ; ---------------------------------------------------------------------------
00006B82                            Map_EEgg_internal:
00006B82 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006B84 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006B86 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006B88 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006B8A 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006B8C 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006B8E 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006B90 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006B92 08                         M_EEgg_Try1:	dc.b 8
00006B93 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006B98 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006B9D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006BA2 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006BA7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006BAC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006BB1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006BB6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006BBB 08                         M_EEgg_Try2:	dc.b 8
00006BBC E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006BC1 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006BC6 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006BCB F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006BD0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006BD5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006BDA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006BDF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006BE4 08                         M_EEgg_Try3:	dc.b 8
00006BE5 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006BEA F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006BEF E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006BF4 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006BF9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006BFE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006C03 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C08 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C0D 08                         M_EEgg_Try4:	dc.b 8
00006C0E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006C13 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006C18 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006C1D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006C22 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006C27 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006C2C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C31 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C36 0C                         M_EEgg_End1:	dc.b $C
00006C37 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006C3C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006C41 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006C46 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006C4B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006C50 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006C55 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006C5A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006C5F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006C64 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006C69 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006C6E 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C73 0A                         M_EEgg_End2:	dc.b $A
00006C74 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006C79 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006C7E F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006C83 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006C88 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006C8D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006C92 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006C97 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006C9C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006CA1 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006CA6 0A                         M_EEgg_End3:	dc.b $A
00006CA7 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006CAC E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006CB1 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006CB6 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006CBB E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006CC0 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006CC5 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006CCA 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006CCF 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006CD4 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006CD9 0C                         M_EEgg_End4:	dc.b $C
00006CDA F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006CDF FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006CE4 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006CE9 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006CEE F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006CF3 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006CF8 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006CFD 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006D02 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006D07 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006D0C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006D11 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D16                            		even
00006D16                            		even
00006D16                            
00006D16                            ; ---------------------------------------------------------------------------
00006D16                            ; Ending sequence demos
00006D16                            ; ---------------------------------------------------------------------------
00006D16                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006D44                            		even
00006D44                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006D84                            		even
00006D84                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006DB4                            		even
00006DB4                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006DE4                            		even
00006DE4                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006E04                            		even
00006E04                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006E24                            		even
00006E24                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006E54                            		even
00006E54                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006E84                            		even
00006E84                            
00006E84                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006E84                            ; ---------------------------------------------------------------------------
00006E84                            ; Subroutine to	load level boundaries and start	locations
00006E84                            ; ---------------------------------------------------------------------------
00006E84                            
00006E84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E84                            
00006E84                            
00006E84                            LevelSizeLoad:
00006E84 7000                       		moveq	#0,d0
00006E86 11C0 F740                  		move.b	d0,($FFFFF740).w
00006E8A 11C0 F741                  		move.b	d0,($FFFFF741).w
00006E8E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006E92 11C0 F748                  		move.b	d0,($FFFFF748).w
00006E96 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006E9A 3038 FE10                  		move.w	(v_zone).w,d0
00006E9E ED08                       		lsl.b	#6,d0
00006EA0 E848                       		lsr.w	#4,d0
00006EA2 3200                       		move.w	d0,d1
00006EA4 D040                       		add.w	d0,d0
00006EA6 D041                       		add.w	d1,d0
00006EA8 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006EAC 3018                       		move.w	(a0)+,d0
00006EAE 31C0 F730                  		move.w	d0,($FFFFF730).w
00006EB2 2018                       		move.l	(a0)+,d0
00006EB4 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006EB8 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006EBC 2018                       		move.l	(a0)+,d0
00006EBE 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006EC2 21C0 F724                  		move.l	d0,(v_limittop1).w
00006EC6 3038 F728                  		move.w	(v_limitleft2).w,d0
00006ECA 0640 0240                  		addi.w	#$240,d0
00006ECE 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006ED2 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006ED8 3018                       		move.w	(a0)+,d0
00006EDA 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006EDE 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006EE4 6000 0000                  		bra.w	LevSz_ChkLamp
00006EE8                            
00006EE8                            ; ===========================================================================
00006EE8                            ; ---------------------------------------------------------------------------
00006EE8                            ; Level size array
00006EE8                            ; ---------------------------------------------------------------------------
00006EE8                            LevelSizeArray:
00006EE8                            		; GHZ
00006EE8 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006EF4 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
00006F00 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006F0C 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006F18                            		; LZ
00006F18 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006F24 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006F30 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006F3C 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006F48                            		; MZ
00006F48 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006F54 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006F60 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006F6C 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006F78                            		; SLZ
00006F78 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006F84 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006F90 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006F9C 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006FA8                            		; SYZ
00006FA8 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
00006FB4 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
00006FC0 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006FCC 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006FD8                            		; SBZ
00006FD8 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006FE4 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006FF0 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006FFC 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00007008                            		; Ending
00007008 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00007014 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00007020 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000702C 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00007038                            
00007038                            ; ---------------------------------------------------------------------------
00007038                            ; Ending start location array
00007038                            ; ---------------------------------------------------------------------------
00007038                            EndingStLocArray:
00007038                            		include	"_inc\Start Location Array - Ending.asm"
00007038                            ; ---------------------------------------------------------------------------
00007038                            ; Ending start location array
00007038                            ; ---------------------------------------------------------------------------
00007038                            
00007038                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
0000703C                            		incbin	"startpos\mz2 (Credits demo).bin"
00007040                            		incbin	"startpos\syz3 (Credits demo).bin"
00007044                            		incbin	"startpos\lz3 (Credits demo).bin"
00007048                            		incbin	"startpos\slz3 (Credits demo).bin"
0000704C                            		incbin	"startpos\sbz1 (Credits demo).bin"
00007050                            		incbin	"startpos\sbz2 (Credits demo).bin"
00007054                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00007058                            		even
00007058                            		even
00007058                            
00007058                            ; ===========================================================================
00007058                            
00007058                            LevSz_ChkLamp:
00007058 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
0000705C 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000705E                            
0000705E 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00007064 3238 D008                  		move.w	(v_player+obX).w,d1
00007068 3038 D00C                  		move.w	(v_player+obY).w,d0
0000706C 6000                       		bra.s	LevSz_SkipStartPos
0000706E                            ; ===========================================================================
0000706E                            
0000706E                            LevSz_StartLoc:
0000706E 3038 FE10                  		move.w	(v_zone).w,d0
00007072 ED08                       		lsl.b	#6,d0
00007074 E848                       		lsr.w	#4,d0
00007076 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000707A 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
0000707E 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00007080                            
00007080 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00007084 5340                       		subq.w	#1,d0
00007086 E548                       		lsl.w	#2,d0
00007088 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000708C                            
0000708C                            LevSz_SonicPos:
0000708C 7200                       		moveq	#0,d1
0000708E 3219                       		move.w	(a1)+,d1
00007090 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00007094 7000                       		moveq	#0,d0
00007096 3011                       		move.w	(a1),d0
00007098 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
0000709C                            
0000709C                            SetScreen:
0000709C                            	LevSz_SkipStartPos:
0000709C 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
000070A0 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
000070A4 743F                       		moveq #63,d2 ; begin a 64-step loop 
000070A6                            @looppoint: 
000070A6 34C1                       		move.w d1,(a2)+ ; fill in X 
000070A8 34C0                       		move.w d0,(a2)+ ; fill in Y 
000070AA 51CA FFFA                  		dbf d2,@looppoint ; loop	
000070AE 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
000070B2 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
000070B4 7200                       		moveq	#0,d1
000070B6                            
000070B6                            	SetScr_WithinLeft:
000070B6 3438 F72A                  		move.w	(v_limitright2).w,d2
000070BA B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
000070BC 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
000070BE 3202                       		move.w	d2,d1
000070C0                            
000070C0                            	SetScr_WithinRight:
000070C0 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
000070C4                            
000070C4 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
000070C8 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
000070CA 7000                       		moveq	#0,d0
000070CC                            
000070CC                            	SetScr_WithinTop:
000070CC B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
000070D0 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
000070D2 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000070D6                            
000070D6                            	SetScr_WithinBottom:
000070D6 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
000070DA 6100 0000                  		bsr.w	BgScrollSpeed
000070DE 7000                       		moveq	#0,d0
000070E0 1038 FE10                  		move.b	(v_zone).w,d0
000070E4 E508                       		lsl.b	#2,d0
000070E6 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
000070EC 4E75                       		rts
000070EE                            ; ===========================================================================
000070EE                            ; ---------------------------------------------------------------------------
000070EE                            ; Sonic start location array
000070EE                            ; ---------------------------------------------------------------------------
000070EE                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
000070EE                            ; ---------------------------------------------------------------------------
000070EE                            ; Sonic start location array
000070EE                            ; ---------------------------------------------------------------------------
000070EE                            
000070EE                            		incbin	"startpos\ghz1.bin"
000070F2                            		incbin	"startpos\ghz2.bin"
000070F6                            		incbin	"startpos\ghz3.bin"
000070FA 0080 00A8                  		dc.w	$80,$A8
000070FE                            
000070FE                            		incbin	"startpos\lz1.bin"
00007102                            		incbin	"startpos\lz2.bin"
00007106                            		incbin	"startpos\lz3.bin"
0000710A                            		incbin	"startpos\sbz3.bin"
0000710E                            
0000710E                            		incbin	"startpos\mz1.bin"
00007112                            		incbin	"startpos\mz2.bin"
00007116                            		incbin	"startpos\mz3.bin"
0000711A 0080 00A8                  		dc.w	$80,$A8
0000711E                            
0000711E                            		incbin	"startpos\slz1.bin"
00007122                            		incbin	"startpos\slz2.bin"
00007126                            		incbin	"startpos\slz3.bin"
0000712A 0080 00A8                  		dc.w	$80,$A8
0000712E                            
0000712E                            		incbin	"startpos\syz1.bin"
00007132                            		incbin	"startpos\syz2.bin"
00007136                            		incbin	"startpos\syz3.bin"
0000713A 0080 00A8                  		dc.w	$80,$A8
0000713E                            
0000713E                            		incbin	"startpos\sbz1.bin"
00007142                            		incbin	"startpos\sbz2.bin"
00007146                            		incbin	"startpos\fz.bin"
0000714A 0080 00A8                  		dc.w	$80,$A8
0000714E                            
0000714E                            
0000714E                            		incbin	"startpos\end1.bin"
00007152                            		incbin	"startpos\end2.bin"
00007156 0080 00A8                  		dc.w	$80,$A8
0000715A 0080 00A8                  		dc.w	$80,$A8
0000715E                            
0000715E                            		even
0000715E                            		even
0000715E                            
0000715E                            ; ---------------------------------------------------------------------------
0000715E                            ; Which	256x256	tiles contain loops or roll-tunnels
0000715E                            ; ---------------------------------------------------------------------------
0000715E                            
0000715E                            LoopTileNums:
0000715E                            
0000715E                            ; 		loop	loop	tunnel	tunnel
0000715E                            
0000715E B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00007162 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007166 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
0000716A AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
0000716E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00007172 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007176 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
0000717A                            
0000717A                            		even
0000717A                            
0000717A                            ; ---------------------------------------------------------------------------
0000717A                            ; Subroutine to	set scroll speed of some backgrounds
0000717A                            ; ---------------------------------------------------------------------------
0000717A                            
0000717A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000717A                            
0000717A                            
0000717A                            BgScrollSpeed:
0000717A 4A38 FE30                  		tst.b	(v_lastlamp).w
0000717E 6600                       		bne.s	loc_6206
00007180 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007184 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007188 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
0000718C 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
00007190 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00007194                            
00007194                            loc_6206:
00007194 7400                       		moveq	#0,d2
00007196 1438 FE10                  		move.b	(v_zone).w,d2
0000719A D442                       		add.w	d2,d2
0000719C 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000071A0 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000071A4                            ; End of function BgScrollSpeed
000071A4                            
000071A4                            ; ===========================================================================
000071A4 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000071A8 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000071AC 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000071B0 0000                       		dc.w BgScroll_End-BgScroll_Index
000071B2                            ; ===========================================================================
000071B2                            
000071B2                            BgScroll_GHZ:
000071B2 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071B6 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000071BA 42B8 F714                  		clr.l	(v_bg2screenposy).w
000071BE 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000071C2 45F8 A800                  		lea	($FFFFA800).w,a2
000071C6 429A                       		clr.l	(a2)+
000071C8 429A                       		clr.l	(a2)+
000071CA 429A                       		clr.l	(a2)+
000071CC 4E75                       		rts
000071CE                            ; ===========================================================================
000071CE                            
000071CE                            BgScroll_LZ:
000071CE E280                       		asr.l	#1,d0
000071D0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071D4 4E75                       		rts	
000071D6                            ; ===========================================================================
000071D6                            
000071D6                            BgScroll_MZ:
000071D6 4E75                       		rts	
000071D8                            ; ===========================================================================
000071D8                            
000071D8                            BgScroll_SLZ:
000071D8 E280                       		asr.l	#1,d0
000071DA 0640 00C0                  		addi.w	#$C0,d0
000071DE 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071E2 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071E6 4E75                       		rts	
000071E8                            ; ===========================================================================
000071E8                            
000071E8                            BgScroll_SYZ:
000071E8 E980                       		asl.l	#4,d0
000071EA 2400                       		move.l	d0,d2
000071EC E380                       		asl.l	#1,d0
000071EE D082                       		add.l	d2,d0
000071F0 E080                       		asr.l	#8,d0
000071F2 5240                       		addq.w	#1,d0
000071F4 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071F8 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071FC 4E75                       		rts	
000071FE                            ; ===========================================================================
000071FE                            
000071FE                            BgScroll_SBZ:
000071FE 0240 07F8                  		andi.w	#$7F8,d0
00007202 E640                       		asr.w	#3,d0
00007204 5240                       		addq.w	#1,d0
00007206 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000720A 4E75                       		rts	
0000720C                            ; ===========================================================================
0000720C                            
0000720C                            BgScroll_End:
0000720C 3038 F700                  		move.w	(v_screenposx).w,d0
00007210 E240                       		asr.w	#1,d0
00007212 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007216 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
0000721A E440                       		asr.w	#2,d0
0000721C 3200                       		move.w	d0,d1
0000721E D040                       		add.w	d0,d0
00007220 D041                       		add.w	d1,d0
00007222 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007226 42B8 F70C                  		clr.l	(v_bgscreenposy).w
0000722A 42B8 F714                  		clr.l	(v_bg2screenposy).w
0000722E 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007232 45F8 A800                  		lea	($FFFFA800).w,a2
00007236 429A                       		clr.l	(a2)+
00007238 429A                       		clr.l	(a2)+
0000723A 429A                       		clr.l	(a2)+
0000723C 4E75                       		rts
0000723C 4E75                       		rts
0000723E                            		include	"_inc\DeformLayers (JP1).asm"
0000723E                            ; ---------------------------------------------------------------------------
0000723E                            ; Background layer deformation subroutines
0000723E                            ; ---------------------------------------------------------------------------
0000723E                            
0000723E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000723E                            
0000723E                            
0000723E                            DeformLayers:
0000723E 4A38 F744                  		tst.b	(f_nobgscroll).w
00007242 6700                       		beq.s	@bgscroll
00007244 4E75                       		rts	
00007246                            ; ===========================================================================
00007246                            
00007246                            	@bgscroll:
00007246 4278 F754                  		clr.w	(v_fg_scroll_flags).w
0000724A 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
0000724E 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00007252 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007256 6100 0000                  		bsr.w	ScrollHoriz
0000725A 6100 0000                  		bsr.w	ScrollVertical
0000725E 6100 0000                  		bsr.w	DynamicLevelEvents
00007262 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007268 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000726E 7000                       		moveq	#0,d0
00007270 1038 FE10                  		move.b	(v_zone).w,d0
00007274 D040                       		add.w	d0,d0
00007276 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000727A 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000727E                            ; End of function DeformLayers
0000727E                            
0000727E                            ; ===========================================================================
0000727E                            ; ---------------------------------------------------------------------------
0000727E                            ; Offset index for background layer deformation	code
0000727E                            ; ---------------------------------------------------------------------------
0000727E 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007282 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007286 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000728A 0000                       		dc.w Deform_GHZ-Deform_Index
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            ; Green	Hill Zone background layer deformation code
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            
0000728C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000728C                            
0000728C                            
0000728C                            Deform_GHZ:
0000728C                            	;cmpi.b    #id_Title,(v_gamemode).w
0000728C                            	;beq.w    Deform_Title
0000728C                            
0000728C                            ;Deform_GHZ_Stage:
0000728C                            	; block 3 - distant mountains
0000728C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007290 48C4                       		ext.l	d4
00007292 EB84                       		asl.l	#5,d4
00007294 2204                       		move.l	d4,d1
00007296 E384                       		asl.l	#1,d4
00007298 D881                       		add.l	d1,d4
0000729A 7C00                       		moveq	#0,d6
0000729C 6100 0000                  		bsr.w	BGScroll_Block3
000072A0                            	; block 2 - hills & waterfalls
000072A0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000072A4 48C4                       		ext.l	d4
000072A6 EF84                       		asl.l	#7,d4
000072A8 7C00                       		moveq	#0,d6
000072AA 6100 0000                  		bsr.w	BGScroll_Block2
000072AE                            	; calculate Y position
000072AE 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000072B2 3038 F704                  		move.w	(v_screenposy).w,d0
000072B6 0240 07FF                  		andi.w	#$7FF,d0
000072BA EA48                       		lsr.w	#5,d0
000072BC 4440                       		neg.w	d0
000072BE 0640 0020                  		addi.w	#$20,d0
000072C2 6A00                       		bpl.s	@limitY
000072C4 7000                       		moveq	#0,d0
000072C6                            	@limitY:
000072C6 3800                       		move.w	d0,d4
000072C8 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000072CC 3038 F700                  		move.w	(v_screenposx).w,d0
000072D0 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000072D6 6600                       		bne.s	@notTitle
000072D8 7000                       		moveq	#0,d0	; reset foreground position in title screen
000072DA                            	@notTitle:
000072DA 4440                       		neg.w	d0
000072DC 4840                       		swap	d0
000072DE                            	; auto-scroll clouds
000072DE 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000072E2 069A 0001 0000             		addi.l	#$10000,(a2)+
000072E8 069A 0000 C000             		addi.l	#$C000,(a2)+
000072EE 069A 0000 8000             		addi.l	#$8000,(a2)+
000072F4                            	; calculate background scroll	
000072F4 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000072F8 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000072FC 4440                       		neg.w	d0
000072FE 323C 001F                  		move.w	#$1F,d1
00007302 9244                       		sub.w	d4,d1
00007304 6500                       		bcs.s	@gotoCloud2
00007306                            	@cloudLoop1:		; upper cloud (32px)
00007306 22C0                       		move.l	d0,(a1)+
00007308 51C9 FFFC                  		dbf	d1,@cloudLoop1
0000730C                            
0000730C                            	@gotoCloud2:
0000730C 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007310 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007314 4440                       		neg.w	d0
00007316 323C 000F                  		move.w	#$F,d1
0000731A                            	@cloudLoop2:		; middle cloud (16px)
0000731A 22C0                       		move.l	d0,(a1)+
0000731C 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007320                            
00007320 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007324 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007328 4440                       		neg.w	d0
0000732A 323C 000F                  		move.w	#$F,d1
0000732E                            	@cloudLoop3:		; lower cloud (16px)
0000732E 22C0                       		move.l	d0,(a1)+
00007330 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007334                            
00007334 323C 002F                  		move.w	#$2F,d1
00007338 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000733C 4440                       		neg.w	d0
0000733E                            	@mountainLoop:		; distant mountains (48px)
0000733E 22C0                       		move.l	d0,(a1)+
00007340 51C9 FFFC                  		dbf	d1,@mountainLoop
00007344                            
00007344 323C 0027                  		move.w	#$27,d1
00007348 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000734C 4440                       		neg.w	d0
0000734E                            	@hillLoop:			; hills & waterfalls (40px)
0000734E 22C0                       		move.l	d0,(a1)+
00007350 51C9 FFFC                  		dbf	d1,@hillLoop
00007354                            
00007354 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007358 3438 F700                  		move.w	(v_screenposx).w,d2
0000735C 9440                       		sub.w	d0,d2
0000735E 48C2                       		ext.l	d2
00007360 E182                       		asl.l	#8,d2
00007362 85FC 0068                  		divs.w	#$68,d2
00007366 48C2                       		ext.l	d2
00007368 E182                       		asl.l	#8,d2
0000736A 7600                       		moveq	#0,d3
0000736C 3600                       		move.w	d0,d3
0000736E 323C 0047                  		move.w	#$47,d1
00007372 D244                       		add.w	d4,d1
00007374                            	@waterLoop:			; water deformation
00007374 3003                       		move.w	d3,d0
00007376 4440                       		neg.w	d0
00007378 22C0                       		move.l	d0,(a1)+
0000737A 4843                       		swap	d3
0000737C D682                       		add.l	d2,d3
0000737E 4843                       		swap	d3
00007380 51C9 FFF2                  		dbf	d1,@waterLoop
00007384 4E75                       		rts
00007386                            ; End of function Deform_GHZ
00007386                            
00007386                            Deform_Title:
00007386 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000738A 48C4                       		ext.l	d4
0000738C EB84                       		asl.l	#5,d4
0000738E 2204                       		move.l	d4,d1
00007390 E384                       		asl.l	#1,d4
00007392 D881                       		add.l	d1,d4
00007394 7A00                       		moveq	#0,d5
00007396 6100 0000                  		bsr.w	BGScroll_Block1
0000739A 6100 0000                  		bsr.w	BGScroll_Block3
0000739E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000073A2 3038 F704                  		move.w	(v_screenposy).w,d0
000073A6 0240 07FF                  		andi.w	#$7FF,d0
000073AA EA48                       		lsr.w	#5,d0
000073AC 4440                       		neg.w	d0
000073AE 0640 0026                  		addi.w	#$26,d0
000073B2 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000073B6 3800                       		move.w	d0,d4
000073B8 6100 0000                  		bsr.w	BGScroll_Block3
000073BC 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000073C2 323C 006F                  		move.w	#$6F,d1
000073C6 9244                       		sub.w	d4,d1
000073C8 3038 F700                  		move.w	(v_screenposx).w,d0
000073CC 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000073D2 6600                       		bne.s	loc_633C
000073D4 7000                       		moveq	#0,d0
000073D6                            
000073D6                            loc_633C:
000073D6 4440                       		neg.w	d0
000073D8 4840                       		swap	d0
000073DA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000073DE 4440                       		neg.w	d0
000073E0                            
000073E0                            loc_6346:
000073E0 22C0                       		move.l	d0,(a1)+
000073E2 51C9 FFFC                  		dbf	d1,loc_6346
000073E6 323C 0027                  		move.w	#$27,d1
000073EA 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000073EE 4440                       		neg.w	d0
000073F0                            
000073F0                            loc_6356:
000073F0 22C0                       		move.l	d0,(a1)+
000073F2 51C9 FFFC                  		dbf	d1,loc_6356
000073F6 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000073FA 0640 0000                  		addi.w	#0,d0
000073FE 3438 F700                  		move.w	(v_screenposx).w,d2
00007402 0642 FE00                  		addi.w	#-$200,d2
00007406 9440                       		sub.w	d0,d2
00007408 48C2                       		ext.l	d2
0000740A E182                       		asl.l	#8,d2
0000740C 85FC 0068                  		divs.w	#$68,d2
00007410 48C2                       		ext.l	d2
00007412 E182                       		asl.l	#8,d2
00007414 7600                       		moveq	#0,d3
00007416 3600                       		move.w	d0,d3
00007418 323C 0047                  		move.w	#$47,d1
0000741C D244                       		add.w	d4,d1
0000741E                            
0000741E                            loc_6384:
0000741E 3003                       		move.w	d3,d0
00007420 4440                       		neg.w	d0
00007422 22C0                       		move.l	d0,(a1)+
00007424 4843                       		swap	d3
00007426 D682                       		add.l	d2,d3
00007428 4843                       		swap	d3
0000742A 51C9 FFF2                  		dbf	d1,loc_6384
0000742E 4E75                       		rts	
00007430                            
00007430                            ; ===========================================================================
00007430                            ; ---------------------------------------------------------------------------
00007430                            ; Labyrinth Zone background layer deformation code
00007430                            ; ---------------------------------------------------------------------------
00007430                            
00007430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007430                            
00007430                            
00007430                            Deform_LZ:
00007430                            	; plain background scroll
00007430 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007434 48C4                       		ext.l	d4
00007436 EF84                       		asl.l	#7,d4
00007438 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000743C 48C5                       		ext.l	d5
0000743E EF85                       		asl.l	#7,d5
00007440 6100 0000                  		bsr.w	BGScroll_XY
00007444                            
00007444 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000744A 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
00007450 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
00007456 1438 F7D8                  		move.b	(v_lz_deform).w,d2
0000745A 1602                       		move.b	d2,d3
0000745C 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
00007462                            
00007462 D478 F70C                  		add.w	(v_bgscreenposy).w,d2
00007466 0242 00FF                  		andi.w	#$FF,d2
0000746A D678 F704                  		add.w	(v_screenposy).w,d3
0000746E 0243 00FF                  		andi.w	#$FF,d3
00007472 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007476 323C 00DF                  		move.w	#$DF,d1
0000747A 3038 F700                  		move.w	(v_screenposx).w,d0
0000747E 4440                       		neg.w	d0
00007480 3C00                       		move.w	d0,d6
00007482 4840                       		swap	d0
00007484 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007488 4440                       		neg.w	d0
0000748A 3838 F646                  		move.w	(v_waterpos1).w,d4
0000748E 3A38 F704                  		move.w	(v_screenposy).w,d5
00007492                            	; write normal scroll before meeting water position
00007492                            	@normalLoop:		
00007492 BA44                       		cmp.w	d4,d5	; is current y >= water y?
00007494 6C00                       		bge.s	@underwaterLoop	; if yes, branch
00007496 22C0                       		move.l	d0,(a1)+
00007498 5245                       		addq.w	#1,d5
0000749A 5202                       		addq.b	#1,d2
0000749C 5203                       		addq.b	#1,d3
0000749E 51C9 FFF2                  		dbf	d1,@normalLoop
000074A2 4E75                       		rts
000074A4                            	; apply water deformation when underwater
000074A4                            	@underwaterLoop:
000074A4 1833 3000                  		move.b	(a3,d3),d4
000074A8 4884                       		ext.w	d4
000074AA D846                       		add.w	d6,d4
000074AC 32C4                       		move.w	d4,(a1)+
000074AE 1832 2000                  		move.b	(a2,d2),d4
000074B2 4884                       		ext.w	d4
000074B4 D840                       		add.w	d0,d4
000074B6 32C4                       		move.w	d4,(a1)+
000074B8 5202                       		addq.b	#1,d2
000074BA 5203                       		addq.b	#1,d3
000074BC 51C9 FFE6                  		dbf	d1,@underwaterLoop
000074C0 4E75                       		rts
000074C2                            
000074C2                            Lz_Scroll_Data:
000074C2 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000074D2 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074E2 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074F2 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007502 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007512 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007522 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007532 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007542 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
00007552 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007562 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00007572 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007582 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00007592 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075A2 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075B2 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075C2                            ; End of function Deform_LZ
000075C2                            
000075C2                            ; ---------------------------------------------------------------------------
000075C2                            ; Marble Zone background layer deformation code
000075C2                            ; ---------------------------------------------------------------------------
000075C2                            
000075C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075C2                            
000075C2                            
000075C2                            Deform_MZ:
000075C2                            	; block 1 - dungeon interior
000075C2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075C6 48C4                       		ext.l	d4
000075C8 ED84                       		asl.l	#6,d4
000075CA 2204                       		move.l	d4,d1
000075CC E384                       		asl.l	#1,d4
000075CE D881                       		add.l	d1,d4
000075D0 7C02                       		moveq	#2,d6
000075D2 6100 0000                  		bsr.w	BGScroll_Block1
000075D6                            	; block 3 - mountains
000075D6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075DA 48C4                       		ext.l	d4
000075DC ED84                       		asl.l	#6,d4
000075DE 7C06                       		moveq	#6,d6
000075E0 6100 0000                  		bsr.w	BGScroll_Block3
000075E4                            	; block 2 - bushes & antique buildings
000075E4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075E8 48C4                       		ext.l	d4
000075EA EF84                       		asl.l	#7,d4
000075EC 7C04                       		moveq	#4,d6
000075EE 6100 0000                  		bsr.w	BGScroll_Block2
000075F2                            	; calculate y-position of background
000075F2 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
000075F6 3238 F704                  		move.w	(v_screenposy).w,d1
000075FA 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
000075FE 6500                       		bcs.s	@noYscroll
00007600 3401                       		move.w	d1,d2
00007602 D241                       		add.w	d1,d1
00007604 D242                       		add.w	d2,d1
00007606 E441                       		asr.w	#2,d1
00007608 D041                       		add.w	d1,d0
0000760A                            	@noYscroll:
0000760A 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000760E 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007612 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007616 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000761C                            	; do something with redraw flags
0000761C 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007620 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007624 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007628 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
0000762C 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007630                            	; calculate background scroll buffer
00007630 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007634 3438 F700                  		move.w	(v_screenposx).w,d2
00007638 4442                       		neg.w	d2
0000763A 3002                       		move.w	d2,d0
0000763C E440                       		asr.w	#2,d0
0000763E 9042                       		sub.w	d2,d0
00007640 48C0                       		ext.l	d0
00007642 E780                       		asl.l	#3,d0
00007644 81FC 0005                  		divs.w	#5,d0
00007648 48C0                       		ext.l	d0
0000764A E980                       		asl.l	#4,d0
0000764C E180                       		asl.l	#8,d0
0000764E 7600                       		moveq	#0,d3
00007650 3602                       		move.w	d2,d3
00007652 E243                       		asr.w	#1,d3
00007654 323C 0004                  		move.w	#4,d1
00007658                            	@cloudLoop:		
00007658 32C3                       		move.w	d3,(a1)+
0000765A 4843                       		swap	d3
0000765C D680                       		add.l	d0,d3
0000765E 4843                       		swap	d3
00007660 51C9 FFF6                  		dbf	d1,@cloudLoop
00007664                            
00007664 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007668 4440                       		neg.w	d0
0000766A 323C 0001                  		move.w	#1,d1
0000766E                            	@mountainLoop:		
0000766E 32C0                       		move.w	d0,(a1)+
00007670 51C9 FFFC                  		dbf	d1,@mountainLoop
00007674                            
00007674 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007678 4440                       		neg.w	d0
0000767A 323C 0008                  		move.w	#8,d1
0000767E                            	@bushLoop:		
0000767E 32C0                       		move.w	d0,(a1)+
00007680 51C9 FFFC                  		dbf	d1,@bushLoop
00007684                            
00007684 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007688 4440                       		neg.w	d0
0000768A 323C 000F                  		move.w	#$F,d1
0000768E                            	@interiorLoop:		
0000768E 32C0                       		move.w	d0,(a1)+
00007690 51C9 FFFC                  		dbf	d1,@interiorLoop
00007694                            
00007694 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007698 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
0000769C 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
000076A0 3400                       		move.w	d0,d2
000076A2 0C40 0100                  		cmpi.w	#$100,d0
000076A6 6500                       		bcs.s	@limitY
000076A8 303C 0100                  		move.w	#$100,d0
000076AC                            	@limitY:
000076AC 0240 01F0                  		andi.w	#$1F0,d0
000076B0 E648                       		lsr.w	#3,d0
000076B2 45F2 0000                  		lea	(a2,d0),a2
000076B6 6000 0000                  		bra.w	Bg_Scroll_X
000076BA                            ; End of function Deform_MZ
000076BA                            
000076BA                            ; ---------------------------------------------------------------------------
000076BA                            ; Star Light Zone background layer deformation code
000076BA                            ; ---------------------------------------------------------------------------
000076BA                            
000076BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076BA                            
000076BA                            
000076BA                            Deform_SLZ:
000076BA                            	; vertical scrolling
000076BA 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000076BE 48C5                       		ext.l	d5
000076C0 EF85                       		asl.l	#7,d5
000076C2 6100 0000                  		bsr.w	Bg_Scroll_Y
000076C6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000076CC                            	; calculate background scroll buffer
000076CC 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000076D0 3438 F700                  		move.w	(v_screenposx).w,d2
000076D4 4442                       		neg.w	d2
000076D6 3002                       		move.w	d2,d0
000076D8 E640                       		asr.w	#3,d0
000076DA 9042                       		sub.w	d2,d0
000076DC 48C0                       		ext.l	d0
000076DE E980                       		asl.l	#4,d0
000076E0 81FC 001C                  		divs.w	#$1C,d0
000076E4 48C0                       		ext.l	d0
000076E6 E980                       		asl.l	#4,d0
000076E8 E180                       		asl.l	#8,d0
000076EA 7600                       		moveq	#0,d3
000076EC 3602                       		move.w	d2,d3
000076EE 323C 001B                  		move.w	#$1B,d1
000076F2                            	@starLoop:		
000076F2 32C3                       		move.w	d3,(a1)+
000076F4 4843                       		swap	d3
000076F6 D680                       		add.l	d0,d3
000076F8 4843                       		swap	d3
000076FA 51C9 FFF6                  		dbf	d1,@starLoop
000076FE                            
000076FE 3002                       		move.w	d2,d0
00007700 E640                       		asr.w	#3,d0
00007702 3200                       		move.w	d0,d1
00007704 E241                       		asr.w	#1,d1
00007706 D041                       		add.w	d1,d0
00007708 323C 0004                  		move.w	#4,d1
0000770C                            	@buildingLoop1:		; distant black buildings
0000770C 32C0                       		move.w	d0,(a1)+
0000770E 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007712                            
00007712 3002                       		move.w	d2,d0
00007714 E440                       		asr.w	#2,d0
00007716 323C 0004                  		move.w	#4,d1
0000771A                            	@buildingLoop2:		; closer buildings
0000771A 32C0                       		move.w	d0,(a1)+
0000771C 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007720                            
00007720 3002                       		move.w	d2,d0
00007722 E240                       		asr.w	#1,d0
00007724 323C 001D                  		move.w	#$1D,d1
00007728                            	@bottomLoop:		; bottom part of background
00007728 32C0                       		move.w	d0,(a1)+
0000772A 51C9 FFFC                  		dbf	d1,@bottomLoop
0000772E                            
0000772E 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007732 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007736 3400                       		move.w	d0,d2
00007738 0440 00C0                  		subi.w	#$C0,d0
0000773C 0240 03F0                  		andi.w	#$3F0,d0
00007740 E648                       		lsr.w	#3,d0
00007742 45F2 0000                  		lea	(a2,d0),a2
00007746                            ;-------------------------------------------------------------------------------
00007746                            ;-------------------------------------------------------------------------------
00007746                            Bg_Scroll_X:
00007746 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000774A 323C 000E                  		move.w	#$E,d1
0000774E 3038 F700                  		move.w	(v_screenposx).w,d0
00007752 4440                       		neg.w	d0
00007754 4840                       		swap	d0
00007756 0242 000F                  		andi.w	#$F,d2
0000775A D442                       		add.w	d2,d2
0000775C 301A                       		move.w	(a2)+,d0
0000775E 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007762                            	@blockLoop:
00007762 301A                       		move.w	(a2)+,d0
00007764                            	@pixelJump:		
00007764 22C0                       		move.l	d0,(a1)+
00007766 22C0                       		move.l	d0,(a1)+
00007768 22C0                       		move.l	d0,(a1)+
0000776A 22C0                       		move.l	d0,(a1)+
0000776C 22C0                       		move.l	d0,(a1)+
0000776E 22C0                       		move.l	d0,(a1)+
00007770 22C0                       		move.l	d0,(a1)+
00007772 22C0                       		move.l	d0,(a1)+
00007774 22C0                       		move.l	d0,(a1)+
00007776 22C0                       		move.l	d0,(a1)+
00007778 22C0                       		move.l	d0,(a1)+
0000777A 22C0                       		move.l	d0,(a1)+
0000777C 22C0                       		move.l	d0,(a1)+
0000777E 22C0                       		move.l	d0,(a1)+
00007780 22C0                       		move.l	d0,(a1)+
00007782 22C0                       		move.l	d0,(a1)+
00007784 51C9 FFDC                  		dbf	d1,@blockLoop
00007788 4E75                       		rts
0000778A                            
0000778A                            ; ---------------------------------------------------------------------------
0000778A                            ; Spring Yard Zone background layer deformation	code
0000778A                            ; ---------------------------------------------------------------------------
0000778A                            
0000778A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000778A                            
0000778A                            
0000778A                            Deform_SYZ:
0000778A                            	; vertical scrolling
0000778A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000778E 48C5                       		ext.l	d5
00007790 E985                       		asl.l	#4,d5
00007792 2205                       		move.l	d5,d1
00007794 E385                       		asl.l	#1,d5
00007796 DA81                       		add.l	d1,d5
00007798 6100 0000                  		bsr.w	Bg_Scroll_Y
0000779C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000077A2                            	; calculate background scroll buffer
000077A2 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000077A6 3438 F700                  		move.w	(v_screenposx).w,d2
000077AA 4442                       		neg.w	d2
000077AC 3002                       		move.w	d2,d0
000077AE E640                       		asr.w	#3,d0
000077B0 9042                       		sub.w	d2,d0
000077B2 48C0                       		ext.l	d0
000077B4 E780                       		asl.l	#3,d0
000077B6 81FC 0008                  		divs.w	#8,d0
000077BA 48C0                       		ext.l	d0
000077BC E980                       		asl.l	#4,d0
000077BE E180                       		asl.l	#8,d0
000077C0 7600                       		moveq	#0,d3
000077C2 3602                       		move.w	d2,d3
000077C4 E243                       		asr.w	#1,d3
000077C6 323C 0007                  		move.w	#7,d1
000077CA                            	@cloudLoop:		
000077CA 32C3                       		move.w	d3,(a1)+
000077CC 4843                       		swap	d3
000077CE D680                       		add.l	d0,d3
000077D0 4843                       		swap	d3
000077D2 51C9 FFF6                  		dbf	d1,@cloudLoop
000077D6                            
000077D6 3002                       		move.w	d2,d0
000077D8 E640                       		asr.w	#3,d0
000077DA 323C 0004                  		move.w	#4,d1
000077DE                            	@mountainLoop:		
000077DE 32C0                       		move.w	d0,(a1)+
000077E0 51C9 FFFC                  		dbf	d1,@mountainLoop
000077E4                            
000077E4 3002                       		move.w	d2,d0
000077E6 E440                       		asr.w	#2,d0
000077E8 323C 0005                  		move.w	#5,d1
000077EC                            	@buildingLoop:		
000077EC 32C0                       		move.w	d0,(a1)+
000077EE 51C9 FFFC                  		dbf	d1,@buildingLoop
000077F2                            
000077F2 3002                       		move.w	d2,d0
000077F4 3202                       		move.w	d2,d1
000077F6 E241                       		asr.w	#1,d1
000077F8 9041                       		sub.w	d1,d0
000077FA 48C0                       		ext.l	d0
000077FC E980                       		asl.l	#4,d0
000077FE 81FC 000E                  		divs.w	#$E,d0
00007802 48C0                       		ext.l	d0
00007804 E980                       		asl.l	#4,d0
00007806 E180                       		asl.l	#8,d0
00007808 7600                       		moveq	#0,d3
0000780A 3602                       		move.w	d2,d3
0000780C E243                       		asr.w	#1,d3
0000780E 323C 000D                  		move.w	#$D,d1
00007812                            	@bushLoop:		
00007812 32C3                       		move.w	d3,(a1)+
00007814 4843                       		swap	d3
00007816 D680                       		add.l	d0,d3
00007818 4843                       		swap	d3
0000781A 51C9 FFF6                  		dbf	d1,@bushLoop
0000781E                            
0000781E 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007822 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007826 3400                       		move.w	d0,d2
00007828 0240 01F0                  		andi.w	#$1F0,d0
0000782C E648                       		lsr.w	#3,d0
0000782E 45F2 0000                  		lea	(a2,d0),a2
00007832 6000 FF12                  		bra.w	Bg_Scroll_X
00007836                            ; End of function Deform_SYZ
00007836                            
00007836                            ; ---------------------------------------------------------------------------
00007836                            ; Scrap	Brain Zone background layer deformation	code
00007836                            ; ---------------------------------------------------------------------------
00007836                            
00007836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007836                            
00007836                            
00007836                            Deform_SBZ:
00007836 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000783A 48C4                       		ext.l	d4
0000783C ED84                       		asl.l	#6,d4
0000783E 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007842 48C5                       		ext.l	d5
00007844 E985                       		asl.l	#4,d5
00007846 E385                       		asl.l	#1,d5
00007848 6100 0000                  		bsr.w	BGScroll_XY
0000784C 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007852 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007856 323C 00DF                  		move.w	#223,d1
0000785A 3038 F700                  		move.w	(v_screenposx).w,d0
0000785E 4440                       		neg.w	d0
00007860 4840                       		swap	d0
00007862 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007866 4440                       		neg.w	d0
00007868                            
00007868                            loc_6576:
00007868 22C0                       		move.l	d0,(a1)+
0000786A 51C9 FFFC                  		dbf	d1,loc_6576
0000786E 4E75                       		rts	
00007870                            ;-------------------------------------------------------------------------------
00007870                            Deform_SBZ2:;loc_68A2:
00007870 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007874 48C4                       		ext.l	d4
00007876 ED84                       		asl.l	#6,d4
00007878 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000787C 48C5                       		ext.l	d5
0000787E E985                       		asl.l	#4,d5
00007880 E385                       		asl.l	#1,d5
00007882 6100 0000                  		bsr.w	BGScroll_XY
00007886 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000788C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007890 323C 00DF                  		move.w	#223,d1
00007894 3038 F700                  		move.w	(v_screenposx).w,d0
00007898 4440                       		neg.w	d0
0000789A 4840                       		swap	d0
0000789C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000078A0 4440                       		neg.w	d0
000078A2                            
000078A2                            loc_6577:
000078A2 22C0                       		move.l	d0,(a1)+
000078A4 51C9 FFFC                  		dbf	d1,loc_6577
000078A8 4E75                       		rts	
000078AA                            
000078AA                            ; ---------------------------------------------------------------------------
000078AA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000078AA                            ; ---------------------------------------------------------------------------
000078AA                            
000078AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078AA                            
000078AA                            
000078AA                            ScrollHoriz:
000078AA 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
000078AE 6100                       		bsr.s	MoveScreenHoriz
000078B0 3038 F700                  		move.w	(v_screenposx).w,d0
000078B4 0240 0010                  		andi.w	#$10,d0
000078B8 1238 F74A                  		move.b	(v_fg_xblock).w,d1
000078BC B300                       		eor.b	d1,d0
000078BE 6600                       		bne.s	@return
000078C0 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
000078C6 3038 F700                  		move.w	(v_screenposx).w,d0
000078CA 9044                       		sub.w	d4,d0		; compare new with old screen position
000078CC 6A00                       		bpl.s	@scrollRight
000078CE                            
000078CE 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
000078D4 4E75                       		rts	
000078D6                            
000078D6                            	@scrollRight:
000078D6 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
000078DC                            
000078DC                            	@return:
000078DC 4E75                       		rts	
000078DE                            ; End of function ScrollHoriz
000078DE                            
000078DE                            
000078DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078DE                            
000078DE                            MoveScreenHoriz:
000078DE 4A38 FF8B                  		tst.b	($FFFFFF8B).w
000078E2 6700 0000                  		beq.w	@cont		
000078E6 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
000078EC                            		
000078EC                            	@cont:		
000078EC 3238 C904                  		move.w	($FFFFC904).w,d1
000078F0 6700                       		beq.s	@cont1
000078F2 0441 0100                  		sub.w	#$100,d1
000078F6 31C1 C904                  		move.w	d1,($FFFFC904).w
000078FA 7200                       		moveq	#0,d1
000078FC 1238 C904                  		move.b	($FFFFC904).w,d1
00007900 E509                       		lsl.b	#2,d1
00007902 5801                       		addq.b	#4,d1
00007904 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007908 9001                       		sub.b	d1,d0
0000790A 43F8 CB00                  		lea	($FFFFCB00).w,a1
0000790E 3031 0000                  		move.w	(a1,d0.w),d0
00007912 0240 3FFF                  		and.w	#$3FFF,d0
00007916 6000                       		bra.s	@cont2
00007918                            		
00007918                            @cont1:
00007918 3038 D008                  		move.w	($FFFFD008).w,d0
0000791C                            		
0000791C                            @cont2:
0000791C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007920 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007924 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007926 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
0000792A 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
0000792C 4278 F73A                          clr.w    (v_scrshiftx).w
00007930 4E75                               rts 
00007932                            ; ===========================================================================
00007932                            
00007932                            SH_AheadOfMid:
00007932 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007936 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007938 303C 0010                          move.w    #16,d0        ; set to 16 if greater
0000793C                            
0000793C                                SH_Ahead16:
0000793C D078 F700                          add.w    (v_screenposx).w,d0
00007940 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007944 6D00                               blt.s    SH_SetScreen
00007946 3038 F72A                          move.w    (v_limitright2).w,d0
0000794A                            
0000794A                            SH_SetScreen:
0000794A 3200                               move.w    d0,d1
0000794C 9278 F700                          sub.w    (v_screenposx).w,d1
00007950 E141                               asl.w    #8,d1
00007952 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007956 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
0000795A 4E75                               rts 
0000795C                            ; ===========================================================================
0000795C                            
0000795C                            SH_BehindMid:
0000795C 0C40 FFF0                  		cmpi.w	#-$10,d0
00007960 6400                       		bcc.s	@cont
00007962 303C FFF0                  		move.w	#-$10,d0	
00007966                            
00007966                            @cont:
00007966 D078 F700                  		add.w	(v_screenposx).w,d0
0000796A B078 F728                  		cmp.w	(v_limitleft2).w,d0
0000796E 6EDA                       		bgt.s	SH_SetScreen
00007970 3038 F728                  		move.w	(v_limitleft2).w,d0
00007974 60D4                       		bra.s	SH_SetScreen
00007976                            ; End of function MoveScreenHoriz
00007976                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007976                            
00007976                            MoveScreenHorizEXT:
00007976 3238 C904                  		move.w	($FFFFC904).w,d1
0000797A 6700                       		beq.s	@cont1
0000797C 0441 0100                  		sub.w	#$100,d1
00007980 31C1 C904                  		move.w	d1,($FFFFC904).w
00007984 7200                       		moveq	#0,d1
00007986 1238 C904                  		move.b	($FFFFC904).w,d1
0000798A E509                       		lsl.b	#2,d1
0000798C 5801                       		addq.b	#4,d1
0000798E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007992 9001                       		sub.b	d1,d0
00007994 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007998 3031 0000                  		move.w	(a1,d0.w),d0
0000799C 0240 3FFF                  		and.w	#$3FFF,d0
000079A0 6000                       		bra.s	@cont2
000079A2                            		
000079A2                            @cont1:
000079A2 3038 D008                  		move.w	($FFFFD008).w,d0
000079A6                            		
000079A6                            @cont2:
000079A6 9078 F700                  		sub.w	($FFFFF700).w,d0
000079AA 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
000079AE 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
000079B0 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
000079B2 6000                               bra.s    SHEXT_AheadOfMid    ; branch
000079B4                            ; ===========================================================================
000079B4                            
000079B4                            SHEXT_ProperlyFramed:
000079B4 4278 F73A                          clr.w    (v_scrshiftx).w
000079B8 4E75                               rts 
000079BA                            ; ===========================================================================
000079BA                            
000079BA                            SHEXT_AheadOfMid:
000079BA 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
000079BE 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
000079C0 303C 0010                          move.w    #16,d0        ; set to 16 if greater
000079C4                            
000079C4                            SHEXT_Ahead16:
000079C4 D078 F700                          add.w    (v_screenposx).w,d0
000079C8 B078 F72A                          cmp.w    (v_limitright2).w,d0
000079CC 6D00                               blt.s    SHEXT_SetScreen
000079CE 3038 F72A                          move.w    (v_limitright2).w,d0
000079D2                            
000079D2                            SHEXT_SetScreen:
000079D2 3200                               move.w    d0,d1
000079D4 9278 F700                          sub.w    (v_screenposx).w,d1
000079D8 E141                               asl.w    #8,d1
000079DA 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
000079DE 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
000079E2 4E75                               rts
000079E4                            
000079E4                            ; ===========================================================================
000079E4                            
000079E4                            SHEXT_BehindMid:
000079E4 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
000079E8 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
000079EA 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
000079EE                            
000079EE                            SHEXT_Behind16:
000079EE D078 F700                          add.w    (v_screenposx).w,d0
000079F2 B078 F728                          cmp.w    (v_limitleft2).w,d0
000079F6 6EDA                               bgt.s    SHEXT_SetScreen
000079F8 3038 F728                          move.w    (v_limitleft2).w,d0
000079FC 60D4                               bra.s    SHEXT_SetScreen
000079FE                                  
000079FE                            ; End of function MoveScreenHoriz
000079FE                            
000079FE                            
000079FE                            ; ---------------------------------------------------------------------------
000079FE                            ; Subroutine to	scroll the level vertically as Sonic moves
000079FE                            ; ---------------------------------------------------------------------------
000079FE                            
000079FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FE                            
000079FE                            
000079FE                            ScrollVertical:
000079FE 7200                       		moveq	#0,d1
00007A00 3038 D00C                  		move.w	(v_player+obY).w,d0
00007A04 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007A08 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007A0E 6700                       		beq.s	SV_NotRolling	; if not, branch
00007A10 5B40                       		subq.w	#5,d0
00007A12                            
00007A12                            	SV_NotRolling:
00007A12 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007A18 6700                       		beq.s	loc_664A	; if not, branch
00007A1A                            
00007A1A 0640 0020                  		addi.w	#32,d0
00007A1E 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007A22 6500                       		bcs.s	loc_6696
00007A24 0440 0040                  		subi.w	#64,d0
00007A28 6400                       		bcc.s	loc_6696
00007A2A 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007A2E 6600                       		bne.s	loc_66A8
00007A30 6000                       		bra.s	loc_6656
00007A32                            ; ===========================================================================
00007A32                            
00007A32                            loc_664A:
00007A32 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007A36 6600                       		bne.s	loc_665C
00007A38 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007A3C 6600                       		bne.s	loc_66A8
00007A3E                            
00007A3E                            loc_6656:
00007A3E 4278 F73C                  		clr.w	(v_scrshifty).w
00007A42 4E75                       		rts	
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            loc_665C:
00007A44 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007A4A 6600                       		bne.s	loc_6684
00007A4C 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007A50 6A00                       		bpl.s	loc_666C
00007A52 4441                       		neg.w	d1
00007A54                            
00007A54                            loc_666C:
00007A54 0C41 0800                  		cmpi.w	#$800,d1
00007A58 6400                       		bcc.s	loc_6696
00007A5A 323C 0600                  		move.w	#$600,d1
00007A5E 0C40 0006                  		cmpi.w	#6,d0
00007A62 6E00                       		bgt.s	loc_66F6
00007A64 0C40 FFFA                  		cmpi.w	#-6,d0
00007A68 6D00                       		blt.s	loc_66C0
00007A6A 6000                       		bra.s	loc_66AE
00007A6C                            ; ===========================================================================
00007A6C                            
00007A6C                            loc_6684:
00007A6C 323C 0200                  		move.w	#$200,d1
00007A70 0C40 0002                  		cmpi.w	#2,d0
00007A74 6E00                       		bgt.s	loc_66F6
00007A76 0C40 FFFE                  		cmpi.w	#-2,d0
00007A7A 6D00                       		blt.s	loc_66C0
00007A7C 6000                       		bra.s	loc_66AE
00007A7E                            ; ===========================================================================
00007A7E                            
00007A7E                            loc_6696:
00007A7E 323C 1000                  		move.w	#$1000,d1
00007A82 0C40 0010                  		cmpi.w	#$10,d0
00007A86 6E00                       		bgt.s	loc_66F6
00007A88 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A8C 6D00                       		blt.s	loc_66C0
00007A8E 6000                       		bra.s	loc_66AE
00007A90                            ; ===========================================================================
00007A90                            
00007A90                            loc_66A8:
00007A90 7000                       		moveq	#0,d0
00007A92 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007A96                            
00007A96                            loc_66AE:
00007A96 7200                       		moveq	#0,d1
00007A98 3200                       		move.w	d0,d1
00007A9A D278 F704                  		add.w	(v_screenposy).w,d1
00007A9E 4A40                       		tst.w	d0
00007AA0 6A00 0000                  		bpl.w	loc_6700
00007AA4 6000 0000                  		bra.w	loc_66CC
00007AA8                            ; ===========================================================================
00007AA8                            
00007AA8                            loc_66C0:
00007AA8 4441                       		neg.w	d1
00007AAA 48C1                       		ext.l	d1
00007AAC E181                       		asl.l	#8,d1
00007AAE D2B8 F704                  		add.l	(v_screenposy).w,d1
00007AB2 4841                       		swap	d1
00007AB4                            
00007AB4                            loc_66CC:
00007AB4 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007AB8 6E00                       		bgt.s	loc_6724
00007ABA 0C41 FF00                  		cmpi.w	#-$100,d1
00007ABE 6E00                       		bgt.s	loc_66F0
00007AC0 0241 07FF                  		andi.w	#$7FF,d1
00007AC4 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007ACA 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007AD0 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007AD6 6000                       		bra.s	loc_6724
00007AD8                            ; ===========================================================================
00007AD8                            
00007AD8                            loc_66F0:
00007AD8 3238 F72C                  		move.w	(v_limittop2).w,d1
00007ADC 6000                       		bra.s	loc_6724
00007ADE                            ; ===========================================================================
00007ADE                            
00007ADE                            loc_66F6:
00007ADE 48C1                       		ext.l	d1
00007AE0 E181                       		asl.l	#8,d1
00007AE2 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007AE6 4841                       		swap	d1
00007AE8                            
00007AE8                            loc_6700:
00007AE8 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007AEC 6D00                       		blt.s	loc_6724
00007AEE 0441 0800                  		subi.w	#$800,d1
00007AF2 6500                       		bcs.s	loc_6720
00007AF4 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007AFA 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007B00 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007B06 6000                       		bra.s	loc_6724
00007B08                            ; ===========================================================================
00007B08                            
00007B08                            loc_6720:
00007B08 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007B0C                            
00007B0C                            loc_6724:
00007B0C 3838 F704                  		move.w	(v_screenposy).w,d4
00007B10 4841                       		swap	d1
00007B12 2601                       		move.l	d1,d3
00007B14 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007B18 E09B                       		ror.l	#8,d3
00007B1A 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007B1E 21C1 F704                  		move.l	d1,(v_screenposy).w
00007B22 3038 F704                  		move.w	(v_screenposy).w,d0
00007B26 0240 0010                  		andi.w	#$10,d0
00007B2A 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007B2E B300                       		eor.b	d1,d0
00007B30 6600                       		bne.s	@return
00007B32 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007B38 3038 F704                  		move.w	(v_screenposy).w,d0
00007B3C 9044                       		sub.w	d4,d0
00007B3E 6A00                       		bpl.s	@scrollBottom
00007B40 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007B46 4E75                       		rts	
00007B48                            ; ===========================================================================
00007B48                            
00007B48                            	@scrollBottom:
00007B48 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007B4E                            
00007B4E                            	@return:
00007B4E 4E75                       		rts	
00007B50                            ; End of function ScrollVertical
00007B50                            
00007B50                            
00007B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B50                            ; Scrolls background and sets redraw flags.
00007B50                            ; d4 - background x offset * $10000
00007B50                            ; d5 - background y offset * $10000
00007B50                            
00007B50                            BGScroll_XY:
00007B50 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007B54 2002                       		move.l	d2,d0
00007B56 D084                       		add.l	d4,d0
00007B58 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007B5C 2200                       		move.l	d0,d1
00007B5E 4841                       		swap	d1
00007B60 0241 0010                  		andi.w	#$10,d1
00007B64 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007B68 B701                       		eor.b	d3,d1
00007B6A 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007B6C 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007B72 9082                       		sub.l	d2,d0	; new - old
00007B74 6A00                       		bpl.s	@scrollRight
00007B76 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007B7C 6000                       		bra.s	BGScroll_YRelative
00007B7E                            	@scrollRight:
00007B7E 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007B84                            BGScroll_YRelative:
00007B84 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007B88 2003                       		move.l	d3,d0
00007B8A D085                       		add.l	d5,d0
00007B8C 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007B90 2200                       		move.l	d0,d1
00007B92 4841                       		swap	d1
00007B94 0241 0010                  		andi.w	#$10,d1
00007B98 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007B9C B501                       		eor.b	d2,d1
00007B9E 6600                       		bne.s	@return
00007BA0 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007BA6 9083                       		sub.l	d3,d0
00007BA8 6A00                       		bpl.s	@scrollBottom
00007BAA 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007BB0 4E75                       		rts
00007BB2                            	@scrollBottom:
00007BB2 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007BB8                            	@return:
00007BB8 4E75                       		rts
00007BBA                            ; End of function BGScroll_XY
00007BBA                            
00007BBA                            Bg_Scroll_Y:
00007BBA 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007BBE 2003                       		move.l	d3,d0
00007BC0 D085                       		add.l	d5,d0
00007BC2 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007BC6 2200                       		move.l	d0,d1
00007BC8 4841                       		swap	d1
00007BCA 0241 0010                  		andi.w	#$10,d1
00007BCE 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007BD2 B501                       		eor.b	d2,d1
00007BD4 6600                       		bne.s	@return
00007BD6 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007BDC 9083                       		sub.l	d3,d0
00007BDE 6A00                       		bpl.s	@scrollBottom
00007BE0 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007BE6 4E75                       		rts
00007BE8                            	@scrollBottom:
00007BE8 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007BEE                            	@return:
00007BEE 4E75                       		rts
00007BF0                            
00007BF0                            
00007BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF0                            
00007BF0                            
00007BF0                            BGScroll_YAbsolute:
00007BF0 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007BF4 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007BF8 3200                       		move.w	d0,d1
00007BFA 0241 0010                  		andi.w	#$10,d1
00007BFE 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007C02 B501                       		eor.b	d2,d1
00007C04 6600                       		bne.s	@return
00007C06 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007C0C 9043                       		sub.w	d3,d0
00007C0E 6A00                       		bpl.s	@scrollBottom
00007C10 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007C16 4E75                       		rts
00007C18                            	@scrollBottom:
00007C18 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007C1E                            	@return:
00007C1E 4E75                       		rts
00007C20                            ; End of function BGScroll_YAbsolute
00007C20                            
00007C20                            
00007C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C20                            ; d6 - bit to set for redraw
00007C20                            
00007C20                            BGScroll_Block1:
00007C20 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007C24 2002                       		move.l	d2,d0
00007C26 D084                       		add.l	d4,d0
00007C28 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007C2C 2200                       		move.l	d0,d1
00007C2E 4841                       		swap	d1
00007C30 0241 0010                  		andi.w	#$10,d1
00007C34 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007C38 B701                       		eor.b	d3,d1
00007C3A 6600                       		bne.s	@return
00007C3C 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007C42 9082                       		sub.l	d2,d0
00007C44 6A00                       		bpl.s	@scrollRight
00007C46 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007C4A 6000                       		bra.s	@return
00007C4C                            	@scrollRight:
00007C4C 5206                       		addq.b	#1,d6
00007C4E 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007C52                            	@return:
00007C52 4E75                       		rts
00007C54                            ; End of function BGScroll_Block1
00007C54                            
00007C54                            
00007C54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C54                            
00007C54                            
00007C54                            BGScroll_Block2:
00007C54 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007C58 2002                       		move.l	d2,d0
00007C5A D084                       		add.l	d4,d0
00007C5C 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007C60 2200                       		move.l	d0,d1
00007C62 4841                       		swap	d1
00007C64 0241 0010                  		andi.w	#$10,d1
00007C68 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007C6C B701                       		eor.b	d3,d1
00007C6E 6600                       		bne.s	@return
00007C70 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007C76 9082                       		sub.l	d2,d0
00007C78 6A00                       		bpl.s	@scrollRight
00007C7A 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007C7E 6000                       		bra.s	@return
00007C80                            	@scrollRight:
00007C80 5206                       		addq.b	#1,d6
00007C82 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007C86                            	@return:
00007C86 4E75                       		rts
00007C88                            ;-------------------------------------------------------------------------------
00007C88                            BGScroll_Block3:
00007C88 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007C8C 2002                       		move.l	d2,d0
00007C8E D084                       		add.l	d4,d0
00007C90 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007C94 2200                       		move.l	d0,d1
00007C96 4841                       		swap	d1
00007C98 0241 0010                  		andi.w	#$10,d1
00007C9C 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007CA0 B701                       		eor.b	d3,d1
00007CA2 6600                       		bne.s	@return
00007CA4 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007CAA 9082                       		sub.l	d2,d0
00007CAC 6A00                       		bpl.s	@scrollRight
00007CAE 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007CB2 6000                       		bra.s	@return
00007CB4                            	@scrollRight:
00007CB4 5206                       		addq.b	#1,d6
00007CB6 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007CBA                            	@return:
00007CBA 4E75                       		rts
00007CBA 4E75                       		rts
00007CBC                            
00007CBC                            
00007CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBC                            
00007CBC                            ; sub_6886:
00007CBC                            LoadTilesAsYouMove_BGOnly:
00007CBC 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007CC2 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007CC8 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007CCC 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007CD0 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007CD4 343C 6000                  		move.w	#$6000,d2
00007CD8 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007CDC 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007CE0 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007CE4 6000 0000                  		bra.w	DrawBGScrollBlock2
00007CE8                            ; End of function sub_6886
00007CE8                            
00007CE8                            ; ---------------------------------------------------------------------------
00007CE8                            ; Subroutine to	display	correct	tiles as you move
00007CE8                            ; ---------------------------------------------------------------------------
00007CE8                            
00007CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CE8                            
00007CE8                            
00007CE8                            LoadTilesAsYouMove:
00007CE8 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007CEE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007CF4                            		; First, update the background
00007CF4 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007CF8 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007CFC 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007D00 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007D04 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007D08 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007D0C 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007D10 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007D14                            		; REV01 added a third scroll block, though, technically,
00007D14                            		; the RAM for it was already there in REV00
00007D14 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007D18 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007D1C 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007D20                            		; Then, update the foreground
00007D20 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007D24 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007D28 49F8 A400                  		lea	(v_lvllayout).w,a4
00007D2C 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007D30                            		; The FG's update function is inlined here
00007D30 4A12                       		tst.b	(a2)
00007D32 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007D34 0892 0000                  		bclr	#0,(a2)
00007D38 6700                       		beq.s	loc_6908
00007D3A                            		; Draw new tiles at the top
00007D3A 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007D3C 7AF0                       		moveq	#-16,d5 ; X coordinate
00007D3E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D42 78F0                       		moveq	#-16,d4 ; Y coordinate
00007D44 7AF0                       		moveq	#-16,d5 ; X coordinate
00007D46 6100 0000                  		bsr.w	DrawBlocks_LR
00007D4A                            
00007D4A                            loc_6908:
00007D4A 0892 0001                  		bclr	#1,(a2)
00007D4E 6700                       		beq.s	loc_6922
00007D50                            		; Draw new tiles at the bottom
00007D50 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007D54 7AF0                       		moveq	#-16,d5
00007D56 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D5A 383C 00E0                  		move.w	#224,d4
00007D5E 7AF0                       		moveq	#-16,d5
00007D60 6100 0000                  		bsr.w	DrawBlocks_LR
00007D64                            
00007D64                            loc_6922:
00007D64 0892 0002                  		bclr	#2,(a2)
00007D68 6700                       		beq.s	loc_6938
00007D6A                            		; Draw new tiles on the left
00007D6A 78F0                       		moveq	#-16,d4
00007D6C 7AF0                       		moveq	#-16,d5
00007D6E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D72 78F0                       		moveq	#-16,d4
00007D74 7AF0                       		moveq	#-16,d5
00007D76 6100 0000                  		bsr.w	DrawBlocks_TB
00007D7A                            
00007D7A                            loc_6938:
00007D7A 0892 0003                  		bclr	#3,(a2)
00007D7E 6700                       		beq.s	locret_6952
00007D80                            		; Draw new tiles on the right
00007D80 78F0                       		moveq	#-16,d4
00007D82 3A3C 0140                  		move.w	#320,d5
00007D86 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D8A 78F0                       		moveq	#-16,d4
00007D8C 3A3C 0140                  		move.w	#320,d5
00007D90 6100 0000                  		bsr.w	DrawBlocks_TB
00007D94                            
00007D94                            locret_6952:
00007D94 4E75                       		rts	
00007D96                            ; End of function LoadTilesAsYouMove
00007D96                            
00007D96                            
00007D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D96                            
00007D96                            ; sub_6954:
00007D96                            DrawBGScrollBlock1:
00007D96 4A12                       		tst.b	(a2)
00007D98 6700 0000                  		beq.w	locret_69F2
00007D9C 0892 0000                  		bclr	#0,(a2)
00007DA0 6700                       		beq.s	loc_6972
00007DA2                            		; Draw new tiles at the top
00007DA2 78F0                       		moveq	#-16,d4
00007DA4 7AF0                       		moveq	#-16,d5
00007DA6 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007DAA 78F0                       		moveq	#-16,d4
00007DAC 7AF0                       		moveq	#-16,d5
00007DAE 6100 0000                  			bsr.w	DrawBlocks_LR
00007DB2                            
00007DB2                            loc_6972:
00007DB2 0892 0001                  		bclr	#1,(a2)
00007DB6 6700                       		beq.s	loc_698E
00007DB8                            		; Draw new tiles at the top
00007DB8 383C 00E0                  		move.w	#224,d4
00007DBC 7AF0                       		moveq	#-16,d5
00007DBE 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007DC2 383C 00E0                  		move.w	#224,d4
00007DC6 7AF0                       		moveq	#-16,d5
00007DC8 6100 0000                  			bsr.w	DrawBlocks_LR
00007DCC                            
00007DCC                            loc_698E:
00007DCC 0892 0002                  		bclr	#2,(a2)
00007DD0                            
00007DD0                            
00007DD0 6700                       			beq.s	locj_6D56
00007DD2                            			; Draw new tiles on the left
00007DD2 78F0                       			moveq	#-16,d4
00007DD4 7AF0                       			moveq	#-16,d5
00007DD6 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007DDA 78F0                       			moveq	#-16,d4
00007DDC 7AF0                       			moveq	#-16,d5
00007DDE 6100 0000                  			bsr.w	DrawBlocks_TB
00007DE2                            	locj_6D56:
00007DE2                            
00007DE2 0892 0003                  			bclr	#3,(a2)
00007DE6 6700                       			beq.s	locj_6D70
00007DE8                            			; Draw new tiles on the right
00007DE8 78F0                       			moveq	#-16,d4
00007DEA 3A3C 0140                  			move.w	#320,d5
00007DEE 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007DF2 78F0                       			moveq	#-16,d4
00007DF4 3A3C 0140                  			move.w	#320,d5
00007DF8 6100 0000                  			bsr.w	DrawBlocks_TB
00007DFC                            	locj_6D70:
00007DFC                            
00007DFC 0892 0004                  			bclr	#4,(a2)
00007E00 6700                       			beq.s	locj_6D88
00007E02                            			; Draw entire row at the top
00007E02 78F0                       			moveq	#-16,d4
00007E04 7A00                       			moveq	#0,d5
00007E06 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007E0A 78F0                       			moveq	#-16,d4
00007E0C 7A00                       			moveq	#0,d5
00007E0E 7C1F                       			moveq	#(512/16)-1,d6
00007E10 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007E14                            	locj_6D88:
00007E14                            
00007E14 0892 0005                  			bclr	#5,(a2)
00007E18 6700                       			beq.s	locret_69F2
00007E1A                            			; Draw entire row at the bottom
00007E1A 383C 00E0                  			move.w	#224,d4
00007E1E 7A00                       			moveq	#0,d5
00007E20 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007E24 383C 00E0                  			move.w	#224,d4
00007E28 7A00                       			moveq	#0,d5
00007E2A 7C1F                       			moveq	#(512/16)-1,d6
00007E2C 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007E30                            
00007E30                            locret_69F2:
00007E30 4E75                       		rts	
00007E32                            ; End of function DrawBGScrollBlock1
00007E32                            
00007E32                            
00007E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E32                            
00007E32                            ; Essentially, this draws everything that isn't scroll block 1
00007E32                            ; sub_69F4:
00007E32                            DrawBGScrollBlock2:
00007E32                            
00007E32 4A12                       			tst.b	(a2)
00007E34 6700 0000                  			beq.w	locj_6DF2
00007E38 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007E3E 6700 0000                  			beq.w	Draw_SBz
00007E42 0892 0000                  			bclr	#0,(a2)
00007E46 6700                       			beq.s	locj_6DD2
00007E48                            			; Draw new tiles on the left
00007E48 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007E4C 7AF0                       			moveq	#-16,d5
00007E4E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007E52 383C 0070                  			move.w	#224/2,d4
00007E56 7AF0                       			moveq	#-16,d5
00007E58 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007E5A 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007E5E                            	locj_6DD2:
00007E5E 0892 0001                  			bclr	#1,(a2)
00007E62 6700                       			beq.s	locj_6DF2
00007E64                            			; Draw new tiles on the right
00007E64 383C 0070                  			move.w	#224/2,d4
00007E68 3A3C 0140                  			move.w	#320,d5
00007E6C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007E70 383C 0070                  			move.w	#224/2,d4
00007E74 3A3C 0140                  			move.w	#320,d5
00007E78 7C02                       			moveq	#3-1,d6
00007E7A 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007E7E                            	locj_6DF2:
00007E7E 4E75                       			rts
00007E80                            ;===============================================================================
00007E80                            	locj_6DF4:
00007E80 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00007E90 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007EA0 0200                       			dc.b $02,$00						
00007EA2                            ;===============================================================================
00007EA2                            	Draw_SBz:
00007EA2 78F0                       			moveq	#-16,d4
00007EA4 0892 0000                  			bclr	#0,(a2)
00007EA8 6600                       			bne.s	locj_6E28
00007EAA 0892 0001                  			bclr	#1,(a2)
00007EAE 6700                       			beq.s	locj_6E72
00007EB0 383C 00E0                  			move.w	#224,d4
00007EB4                            	locj_6E28:
00007EB4 41F9 0000 7E81             			lea	(locj_6DF4+1).l,a0
00007EBA 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007EBE D044                       			add.w	d4,d0
00007EC0 0240 01F0                  			andi.w	#$1F0,d0
00007EC4 E848                       			lsr.w	#4,d0
00007EC6 1030 0000                  			move.b	(a0,d0.w),d0
00007ECA 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00007ED0 3673 0000                  			movea.w	(a3,d0.w),a3
00007ED4 6700                       			beq.s	locj_6E5E
00007ED6 7AF0                       			moveq	#-16,d5
00007ED8 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007EDC 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007EE0 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007EE4 6100 0000                  			bsr.w	DrawBlocks_LR
00007EE8 6000                       			bra.s	locj_6E72
00007EEA                            ;===============================================================================
00007EEA                            	locj_6E5E:
00007EEA 7A00                       			moveq	#0,d5
00007EEC 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007EF0 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007EF4 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007EF8 7C1F                       			moveq	#(512/16)-1,d6
00007EFA 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007EFE                            	locj_6E72:
00007EFE 4A12                       			tst.b	(a2)
00007F00 6600                       			bne.s	locj_6E78
00007F02 4E75                       			rts
00007F04                            ;===============================================================================			
00007F04                            	locj_6E78:
00007F04 78F0                       			moveq	#-16,d4
00007F06 7AF0                       			moveq	#-16,d5
00007F08 1012                       			move.b	(a2),d0
00007F0A 0200 00A8                  			andi.b	#$A8,d0
00007F0E 6700                       			beq.s	locj_6E8C
00007F10 E208                       			lsr.b	#1,d0
00007F12 1480                       			move.b	d0,(a2)
00007F14 3A3C 0140                  			move.w	#320,d5
00007F18                            	locj_6E8C:
00007F18 41F9 0000 7E80             			lea	(locj_6DF4).l,a0
00007F1E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007F22 0240 01F0                  			andi.w	#$1F0,d0
00007F26 E848                       			lsr.w	#4,d0
00007F28 41F0 0000                  			lea	(a0,d0.w),a0
00007F2C 6000 0000                  			bra.w	locj_6FEC						
00007F30                            ;===============================================================================
00007F30                            
00007F30                            
00007F30                            	; locj_6EA4:
00007F30                            	DrawBGScrollBlock3:
00007F30 4A12                       			tst.b	(a2)
00007F32 6700 0000                  			beq.w	locj_6EF0
00007F36 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00007F3C 6700 0000                  			beq.w	Draw_Mz
00007F40 0892 0000                  			bclr	#0,(a2)
00007F44 6700                       			beq.s	locj_6ED0
00007F46                            			; Draw new tiles on the left
00007F46 383C 0040                  			move.w	#$40,d4
00007F4A 7AF0                       			moveq	#-16,d5
00007F4C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F50 383C 0040                  			move.w	#$40,d4
00007F54 7AF0                       			moveq	#-16,d5
00007F56 7C02                       			moveq	#3-1,d6
00007F58 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F5C                            	locj_6ED0:
00007F5C 0892 0001                  			bclr	#1,(a2)
00007F60 6700                       			beq.s	locj_6EF0
00007F62                            			; Draw new tiles on the right
00007F62 383C 0040                  			move.w	#$40,d4
00007F66 3A3C 0140                  			move.w	#320,d5
00007F6A 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F6E 383C 0040                  			move.w	#$40,d4
00007F72 3A3C 0140                  			move.w	#320,d5
00007F76 7C02                       			moveq	#3-1,d6
00007F78 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F7C                            	locj_6EF0:
00007F7C 4E75                       			rts
00007F7E                            	locj_6EF2:
00007F7E 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00007F8E 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007F9E 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FAE 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FBE 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FCE 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FDE 0200                       			dc.b $02,$00
00007FE0                            ;===============================================================================
00007FE0                            	Draw_Mz:
00007FE0 78F0                       			moveq	#-16,d4
00007FE2 0892 0000                  			bclr	#0,(a2)
00007FE6 6600                       			bne.s	locj_6F66
00007FE8 0892 0001                  			bclr	#1,(a2)
00007FEC 6700                       			beq.s	locj_6FAE
00007FEE 383C 00E0                  			move.w	#224,d4
00007FF2                            	locj_6F66:
00007FF2 41F9 0000 7F7F             			lea	(locj_6EF2+1).l,a0
00007FF8 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007FFC 0440 0200                  			subi.w	#$200,d0
00008000 D044                       			add.w	d4,d0
00008002 0240 07F0                  			andi.w	#$7F0,d0
00008006 E848                       			lsr.w	#4,d0
00008008 1030 0000                  			move.b	(a0,d0.w),d0
0000800C 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008010 6700                       			beq.s	locj_6F9A
00008012 7AF0                       			moveq	#-16,d5
00008014 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008018 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000801C 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008020 6100 0000                  			bsr.w	DrawBlocks_LR
00008024 6000                       			bra.s	locj_6FAE
00008026                            ;===============================================================================
00008026                            	locj_6F9A:
00008026 7A00                       			moveq	#0,d5
00008028 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000802C 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008030 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008034 7C1F                       			moveq	#(512/16)-1,d6
00008036 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000803A                            	locj_6FAE:
0000803A 4A12                       			tst.b	(a2)
0000803C 6600                       			bne.s	locj_6FB4
0000803E 4E75                       			rts
00008040                            ;===============================================================================			
00008040                            	locj_6FB4:
00008040 78F0                       			moveq	#-16,d4
00008042 7AF0                       			moveq	#-16,d5
00008044 1012                       			move.b	(a2),d0
00008046 0200 00A8                  			andi.b	#$A8,d0
0000804A 6700                       			beq.s	locj_6FC8
0000804C E208                       			lsr.b	#1,d0
0000804E 1480                       			move.b	d0,(a2)
00008050 3A3C 0140                  			move.w	#320,d5
00008054                            	locj_6FC8:
00008054 41F9 0000 7F7E             			lea	(locj_6EF2).l,a0
0000805A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000805E 0440 0200                  			subi.w	#$200,d0
00008062 0240 07F0                  			andi.w	#$7F0,d0
00008066 E848                       			lsr.w	#4,d0
00008068 41F0 0000                  			lea	(a0,d0.w),a0
0000806C 6000 0000                  			bra.w	locj_6FEC
00008070                            ;===============================================================================			
00008070                            	locj_6FE4:
00008070 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
00008078                            	locj_6FEC:
00008078 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000807A 2E3C 0080 0000             			move.l	#$800000,d7
00008080                            	locj_6FF4:			
00008080 7000                       			moveq	#0,d0
00008082 1018                       			move.b	(a0)+,d0
00008084 0112                       			btst	d0,(a2)
00008086 6700                       			beq.s	locj_701C
00008088 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
0000808C 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008090 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008094 6100 0000                  			bsr.w	GetBlockData
00008098 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000809C 6100 0000                  			bsr.w	Calc_VRAM_Pos
000080A0 6100 0000                  			bsr.w	DrawBlock
000080A4 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000080A8                            	locj_701C:
000080A8 0644 0010                  			addi.w	#16,d4
000080AC 51CE FFD2                  			dbf	d6,locj_6FF4
000080B0 4212                       			clr.b	(a2)
000080B2 4E75                       			rts			
000080B4                            
000080B4                            
000080B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080B4                            
000080B4                            ; Don't be fooled by the name: this function's for drawing from left to right
000080B4                            ; when the camera's moving up or down
000080B4                            ; DrawTiles_LR:
000080B4                            DrawBlocks_LR:
000080B4 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000080B6                            ; DrawTiles_LR_2:
000080B6                            DrawBlocks_LR_2:
000080B6 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000080BC 2200                       		move.l	d0,d1
000080BE                            
000080BE                            	@loop:
000080BE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000080C2 6100 0000                  		bsr.w	GetBlockData
000080C6 2001                       		move.l	d1,d0
000080C8 6100 0000                  		bsr.w	DrawBlock
000080CC 5801                       		addq.b	#4,d1		; Two tiles ahead
000080CE 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000080D2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000080D6 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000080DA 51CE FFE2                  		dbf	d6,@loop
000080DE 4E75                       		rts
000080E0                            ; End of function DrawBlocks_LR
000080E0                            
000080E0                            ; DrawTiles_LR_3:
000080E0                            DrawBlocks_LR_3:
000080E0 2E3C 0080 0000             		move.l	#$800000,d7
000080E6 2200                       		move.l	d0,d1
000080E8                            
000080E8                            	@loop:
000080E8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000080EC 6100 0000                  		bsr.w	GetBlockData_2
000080F0 2001                       		move.l	d1,d0
000080F2 6100 0000                  		bsr.w	DrawBlock
000080F6 5801                       		addq.b	#4,d1
000080F8 0201 007F                  		andi.b	#$7F,d1
000080FC 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008100 0645 0010                  		addi.w	#16,d5
00008104 51CE FFE2                  		dbf	d6,@loop
00008108 4E75                       		rts	
0000810A                            ; End of function DrawBlocks_LR_3
0000810A                            
0000810A                            
0000810A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000810A                            
0000810A                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000810A                            ; when the camera's moving left or right
0000810A                            ; DrawTiles_TB:
0000810A                            DrawBlocks_TB:
0000810A 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000810C                            ; DrawTiles_TB_2:
0000810C                            DrawBlocks_TB_2:
0000810C 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008112 2200                       		move.l	d0,d1
00008114                            
00008114                            	@loop:
00008114 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008118 6100 0000                  		bsr.w	GetBlockData
0000811C 2001                       		move.l	d1,d0
0000811E 6100 0000                  		bsr.w	DrawBlock
00008122 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008126 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000812A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000812E 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008132 51CE FFE0                  		dbf	d6,@loop
00008136 4E75                       		rts	
00008138                            ; End of function DrawBlocks_TB_2
00008138                            
00008138                            
00008138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008138                            
00008138                            ; Draws a block's worth of tiles
00008138                            ; Parameters:
00008138                            ; a0 = Pointer to block metadata (block index and X/Y flip)
00008138                            ; a1 = Pointer to block
00008138                            ; a5 = Pointer to VDP command port
00008138                            ; a6 = Pointer to VDP data port
00008138                            ; d0 = VRAM command to access plane
00008138                            ; d2 = VRAM plane A/B specifier
00008138                            ; d7 = Plane row delta
00008138                            ; DrawTiles:
00008138                            DrawBlock:
00008138 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000813A 4840                       		swap	d0
0000813C 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008140 6600                       		bne.s	DrawFlipY
00008142 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008146 6600                       		bne.s	DrawFlipX
00008148 2A80                       		move.l	d0,(a5)
0000814A 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
0000814C D087                       		add.l	d7,d0		; Next row
0000814E 2A80                       		move.l	d0,(a5)
00008150 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
00008152 4E75                       		rts	
00008154                            ; ===========================================================================
00008154                            
00008154                            DrawFlipX:
00008154 2A80                       		move.l	d0,(a5)
00008156 2819                       		move.l	(a1)+,d4
00008158 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
0000815E 4844                       		swap	d4		; Swap the tiles around
00008160 2C84                       		move.l	d4,(a6)		; Write top two tiles
00008162 D087                       		add.l	d7,d0		; Next row
00008164 2A80                       		move.l	d0,(a5)
00008166 2819                       		move.l	(a1)+,d4
00008168 0A84 0800 0800             		eori.l	#$8000800,d4
0000816E 4844                       		swap	d4
00008170 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
00008172 4E75                       		rts	
00008174                            ; ===========================================================================
00008174                            
00008174                            DrawFlipY:
00008174 0810 0003                  		btst	#3,(a0)
00008178 6600                       		bne.s	DrawFlipXY
0000817A 2A80                       		move.l	d0,(a5)
0000817C 2A19                       		move.l	(a1)+,d5
0000817E 2819                       		move.l	(a1)+,d4
00008180 0A84 1000 1000             		eori.l	#$10001000,d4
00008186 2C84                       		move.l	d4,(a6)
00008188 D087                       		add.l	d7,d0
0000818A 2A80                       		move.l	d0,(a5)
0000818C 0A85 1000 1000             		eori.l	#$10001000,d5
00008192 2C85                       		move.l	d5,(a6)
00008194 4E75                       		rts	
00008196                            ; ===========================================================================
00008196                            
00008196                            DrawFlipXY:
00008196 2A80                       		move.l	d0,(a5)
00008198 2A19                       		move.l	(a1)+,d5
0000819A 2819                       		move.l	(a1)+,d4
0000819C 0A84 1800 1800             		eori.l	#$18001800,d4
000081A2 4844                       		swap	d4
000081A4 2C84                       		move.l	d4,(a6)
000081A6 D087                       		add.l	d7,d0
000081A8 2A80                       		move.l	d0,(a5)
000081AA 0A85 1800 1800             		eori.l	#$18001800,d5
000081B0 4845                       		swap	d5
000081B2 2C85                       		move.l	d5,(a6)
000081B4 4E75                       		rts	
000081B6                            ; End of function DrawBlocks
000081B6                            
000081B6                            ; ===========================================================================
000081B6                            ; unused garbage
000081B6                            
000081B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B6                            
000081B6                            ; Gets address of block at a certain coordinate
000081B6                            ; Parameters:
000081B6                            ; a4 = Pointer to level layout
000081B6                            ; d4 = Relative Y coordinate
000081B6                            ; d5 = Relative X coordinate
000081B6                            ; Returns:
000081B6                            ; a0 = Address of block metadata
000081B6                            ; a1 = Address of block
000081B6                            ; DrawBlocks:
000081B6                            GetBlockData:
000081B6 DA53                       			add.w	(a3),d5
000081B8                            	GetBlockData_2:
000081B8 D86B 0004                  			add.w	4(a3),d4
000081BC 43F8 B000                  			lea	(v_16x16).w,a1
000081C0                            		; Turn Y coordinate into index into level layout
000081C0 3604                       		move.w	d4,d3
000081C2 E24B                       		lsr.w	#1,d3
000081C4 0243 0380                  		andi.w	#$380,d3
000081C8                            		; Turn X coordinate into index into level layout
000081C8 E64D                       		lsr.w	#3,d5
000081CA 3005                       		move.w	d5,d0
000081CC EA48                       		lsr.w	#5,d0
000081CE 0240 007F                  		andi.w	#$7F,d0
000081D2                            		; Get chunk from level layout
000081D2 D043                       		add.w	d3,d0
000081D4 76FF                       		moveq	#-1,d3
000081D6 1634 0000                  		move.b	(a4,d0.w),d3
000081DA 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000081DC                            		; Turn chunk ID into index into chunk table
000081DC 5303                       		subq.b	#1,d3
000081DE 0243 007F                  		andi.w	#$7F,d3
000081E2 EE5B                       		ror.w	#7,d3
000081E4                            		; Turn Y coordinate into index into chunk
000081E4 D844                       		add.w	d4,d4
000081E6 0244 01E0                  		andi.w	#$1E0,d4
000081EA                            		; Turn X coordinate into index into chunk
000081EA 0245 001E                  		andi.w	#$1E,d5
000081EE                            		; Get block metadata from chunk
000081EE D644                       		add.w	d4,d3
000081F0 D645                       		add.w	d5,d3
000081F2 2043                       		movea.l	d3,a0
000081F4 3610                       		move.w	(a0),d3
000081F6                            		; Turn block ID into address
000081F6 0243 03FF                  		andi.w	#$3FF,d3
000081FA E74B                       		lsl.w	#3,d3
000081FC D2C3                       		adda.w	d3,a1
000081FE                            
000081FE                            locret_6C1E:
000081FE 4E75                       		rts	
00008200                            ; End of function GetBlockData
00008200                            
00008200                            
00008200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008200                            
00008200                            ; Produces a VRAM plane access command from coordinates
00008200                            ; Parameters:
00008200                            ; d4 = Relative Y coordinate
00008200                            ; d5 = Relative X coordinate
00008200                            ; Returns VDP command in d0
00008200                            Calc_VRAM_Pos:
00008200 DA53                       			add.w	(a3),d5
00008202                            	Calc_VRAM_Pos_2:
00008202 D86B 0004                  			add.w	4(a3),d4
00008206                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008206                            		; Also note that this wraps the value to the size of the plane:
00008206                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008206 0244 00F0                  		andi.w	#$F0,d4
0000820A 0245 01F0                  		andi.w	#$1F0,d5
0000820E                            		; Transform the adjusted coordinates into a VDP command
0000820E E94C                       		lsl.w	#4,d4
00008210 E44D                       		lsr.w	#2,d5
00008212 D845                       		add.w	d5,d4
00008214 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008216 4840                       		swap	d0
00008218 3004                       		move.w	d4,d0
0000821A 4E75                       		rts	
0000821C                            ; End of function Calc_VRAM_Pos
0000821C                            
0000821C                            
0000821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000821C                            ; not used
0000821C                            
0000821C                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000821C                            ; VRAM layout: the only difference is the high bits of the
0000821C                            ; plane's VRAM address, which are 10 instead of 11.
0000821C                            ; Both the foreground and background are at $C000 and $E000
0000821C                            ; respectively, so this one starting at $8000 makes no sense.
0000821C                            ; sub_6C3C:
0000821C                            Calc_VRAM_Pos_Unknown:
0000821C D86B 0004                  		add.w	4(a3),d4
00008220 DA53                       		add.w	(a3),d5
00008222 0244 00F0                  		andi.w	#$F0,d4
00008226 0245 01F0                  		andi.w	#$1F0,d5
0000822A E94C                       		lsl.w	#4,d4
0000822C E44D                       		lsr.w	#2,d5
0000822E D845                       		add.w	d5,d4
00008230 7002                       		moveq	#2,d0
00008232 4840                       		swap	d0
00008234 3004                       		move.w	d4,d0
00008236 4E75                       		rts	
00008238                            ; End of function Calc_VRAM_Pos_Unknown
00008238                            
00008238                            ; ---------------------------------------------------------------------------
00008238                            ; Subroutine to	load tiles as soon as the level	appears
00008238                            ; ---------------------------------------------------------------------------
00008238                            
00008238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008238                            
00008238                            
00008238                            LoadTilesFromStart:
00008238 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000823E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008244 47F8 F700                  		lea	(v_screenposx).w,a3
00008248 49F8 A400                  		lea	(v_lvllayout).w,a4
0000824C 343C 4000                  		move.w	#$4000,d2
00008250 6100                       		bsr.s	DrawChunks
00008252 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008256 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000825A 343C 6000                  		move.w	#$6000,d2
0000825E 4A38 FE10                  			tst.b	(v_zone).w
00008262 6700 0000                  			beq.w	Draw_GHz_Bg
00008266 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000826C 6700 0000                  			beq.w	Draw_Mz_Bg
00008270 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008276 6700 0000                  			beq.w	Draw_SBz_Bg
0000827A 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008280 6700 0000                  			beq.w	Draw_GHz_Bg
00008284                            ; End of function LoadTilesFromStart
00008284                            
00008284                            
00008284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008284                            
00008284                            
00008284                            DrawChunks:
00008284 78F0                       		moveq	#-16,d4
00008286 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008288                            
00008288                            	@loop:
00008288 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000828C 7A00                       		moveq	#0,d5
0000828E 3204                       		move.w	d4,d1
00008290 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00008294 3801                       		move.w	d1,d4
00008296 7A00                       		moveq	#0,d5
00008298 7C1F                       		moveq	#(512/16)-1,d6
0000829A 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
0000829E 4CDF 0070                  		movem.l	(sp)+,d4-d6
000082A2 0644 0010                  		addi.w	#16,d4
000082A6 51CE FFE0                  		dbf	d6,@loop
000082AA 4E75                       		rts	
000082AC                            ; End of function DrawChunks
000082AC                            
000082AC                            	Draw_GHz_Bg:
000082AC 7800                       			moveq	#0,d4
000082AE 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000082B0                            	locj_7224:			
000082B0 48E7 0E00                  			movem.l	d4-d6,-(sp)
000082B4 41F9 0000 0000             			lea	(locj_724a),a0
000082BA 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000082BE D044                       			add.w	d4,d0
000082C0 0240 00F0                  			andi.w	#$F0,d0
000082C4 6100 0000                  			bsr.w	locj_72Ba
000082C8 4CDF 0070                  			movem.l	(sp)+,d4-d6
000082CC 0644 0010                  			addi.w	#16,d4
000082D0 51CE FFDE                  			dbf	d6,locj_7224
000082D4 4E75                       			rts
000082D6                            	locj_724a:
000082D6 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000082E6                            ;-------------------------------------------------------------------------------
000082E6                            	Draw_Mz_Bg:;locj_725a:
000082E6 78F0                       			moveq	#-16,d4
000082E8 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000082EA                            	locj_725E:			
000082EA 48E7 0E00                  			movem.l	d4-d6,-(sp)
000082EE 41F8 7F7F                  			lea	(locj_6EF2+1),a0
000082F2 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000082F6 0440 0200                  			subi.w	#$200,d0
000082FA D044                       			add.w	d4,d0
000082FC 0240 07F0                  			andi.w	#$7F0,d0
00008300 6100 0000                  			bsr.w	locj_72Ba
00008304 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008308 0644 0010                  			addi.w	#16,d4
0000830C 51CE FFDC                  			dbf	d6,locj_725E
00008310 4E75                       			rts
00008312                            ;-------------------------------------------------------------------------------
00008312                            	Draw_SBz_Bg:;locj_7288:
00008312 78F0                       			moveq	#-16,d4
00008314 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008316                            	locj_728C:			
00008316 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000831A 41F8 7E81                  			lea	(locj_6DF4+1),a0
0000831E 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008322 D044                       			add.w	d4,d0
00008324 0240 01F0                  			andi.w	#$1F0,d0
00008328 6100 0000                  			bsr.w	locj_72Ba
0000832C 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008330 0644 0010                  			addi.w	#16,d4
00008334 51CE FFE0                  			dbf	d6,locj_728C
00008338 4E75                       			rts
0000833A                            ;-------------------------------------------------------------------------------
0000833A                            	locj_72B2:
0000833A F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008342                            	locj_72Ba:
00008342 E848                       			lsr.w	#4,d0
00008344 1030 0000                  			move.b	(a0,d0.w),d0
00008348 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
0000834C 6700                       			beq.s	locj_72da
0000834E 7AF0                       			moveq	#-16,d5
00008350 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008354 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
00008358 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000835C 6100 FD56                  			bsr.w	DrawBlocks_LR
00008360 6000                       			bra.s	locj_72EE
00008362                            	locj_72da:
00008362 7A00                       			moveq	#0,d5
00008364 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008368 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
0000836C 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008370 7C1F                       			moveq	#(512/16)-1,d6
00008372 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008376                            	locj_72EE:
00008376 4E75                       			rts
00008378                            
00008378                            ; ---------------------------------------------------------------------------
00008378                            ; Subroutine to load basic level data
00008378                            ; ---------------------------------------------------------------------------
00008378                            
00008378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008378                            
00008378                            
00008378                            LevelDataLoad:
00008378 7000                       		moveq	#0,d0
0000837A 1038 FE10                  		move.b	(v_zone).w,d0
0000837E E948                       		lsl.w	#4,d0
00008380 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008386 45F2 0000                  		lea	(a2,d0.w),a2
0000838A 2F0A                       		move.l	a2,-(sp)
0000838C 588A                       		addq.l	#4,a2
0000838E 205A                       		movea.l	(a2)+,a0
00008390 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
00008394 303C 0000                  		move.w	#0,d0
00008398 6100 953E                  		bsr.w	EniDec
0000839C 205A                       		movea.l	(a2)+,a0
0000839E 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000083A4 6100 96B0                  		bsr.w	KosDec
000083A8 6100 0000                  		bsr.w	LevelLayoutLoad
000083AC 301A                       		move.w	(a2)+,d0
000083AE 3012                       		move.w	(a2),d0
000083B0 0240 00FF                  		andi.w	#$FF,d0
000083B4 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000083BA 6600                       		bne.s	@notSBZ3	; if not, branch
000083BC 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000083BE                            
000083BE                            	@notSBZ3:
000083BE 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000083C4 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000083C6 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000083CC 6600                       		bne.s	@normalpal	; if not, branch
000083CE                            
000083CE                            	@isSBZorFZ:
000083CE 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000083D0                            
000083D0                            	@normalpal:
000083D0 6100 A0AA                  		bsr.w	PalLoad1	; load palette (based on d0)
000083D4 245F                       		movea.l	(sp)+,a2
000083D6 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000083D8 7000                       		moveq	#0,d0
000083DA 1012                       		move.b	(a2),d0
000083DC 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000083DE 6100 935A                  		bsr.w	AddPLC		; load pattern load cues
000083E2                            
000083E2                            	@skipPLC:
000083E2 4E75                       		rts	
000083E4                            ; End of function LevelDataLoad
000083E4                            
000083E4                            ; ---------------------------------------------------------------------------
000083E4                            ; Level	layout loading subroutine
000083E4                            ; ---------------------------------------------------------------------------
000083E4                            
000083E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083E4                            
000083E4                            
000083E4                            LevelLayoutLoad:
000083E4 47F8 A400                  		lea	(v_lvllayout).w,a3
000083E8 323C 01FF                  		move.w	#$1FF,d1
000083EC 7000                       		moveq	#0,d0
000083EE                            
000083EE                            LevLoad_ClrRam:
000083EE 26C0                       		move.l	d0,(a3)+
000083F0 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000083F4                            
000083F4 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000083F8 7200                       		moveq	#0,d1
000083FA 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000083FE 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008402 7202                       		moveq	#2,d1
00008404                            ; End of function LevelLayoutLoad
00008404                            
00008404                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008404                            
00008404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008404                            
00008404                            
00008404                            LevelLayoutLoad2:
00008404 3038 FE10                  		move.w	(v_zone).w,d0
00008408 ED08                       		lsl.b	#6,d0
0000840A EA48                       		lsr.w	#5,d0
0000840C 3400                       		move.w	d0,d2
0000840E D040                       		add.w	d0,d0
00008410 D042                       		add.w	d2,d0
00008412 D041                       		add.w	d1,d0
00008414 43F9 0000 0000             		lea	(Level_Index).l,a1
0000841A 3031 0000                  		move.w	(a1,d0.w),d0
0000841E 43F1 0000                  		lea	(a1,d0.w),a1
00008422 7200                       		moveq	#0,d1
00008424 3401                       		move.w	d1,d2
00008426 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008428 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000842A                            
0000842A                            LevLoad_NumRows:
0000842A 3001                       		move.w	d1,d0
0000842C 204B                       		movea.l	a3,a0
0000842E                            
0000842E                            LevLoad_Row:
0000842E 10D9                       		move.b	(a1)+,(a0)+
00008430 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008434 47EB 0080                  		lea	$80(a3),a3	; do next row
00008438 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000843C 4E75                       		rts	
0000843E                            ; End of function LevelLayoutLoad2
0000843E                            
0000843E                            		include	"_inc\DynamicLevelEvents.asm"
0000843E                            ; ---------------------------------------------------------------------------
0000843E                            ; Dynamic level events
0000843E                            ; ---------------------------------------------------------------------------
0000843E                            
0000843E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000843E                            
0000843E                            
0000843E                            DynamicLevelEvents:
0000843E 7000                       		moveq	#0,d0
00008440 1038 FE10                  		move.b	(v_zone).w,d0
00008444 D040                       		add.w	d0,d0
00008446 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
0000844A 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
0000844E 7202                       		moveq	#2,d1
00008450 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008454 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008458 6700                       		beq.s	DLE_NoChg	; if not, branch
0000845A 6400                       		bcc.s	loc_6DAC
0000845C                            
0000845C 4441                       		neg.w	d1
0000845E 3038 F704                  		move.w	(v_screenposy).w,d0
00008462 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008466 6300                       		bls.s	loc_6DA0
00008468 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
0000846C 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008472                            
00008472                            loc_6DA0:
00008472 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008476 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000847C                            
0000847C                            DLE_NoChg:
0000847C 4E75                       		rts	
0000847E                            ; ===========================================================================
0000847E                            
0000847E                            loc_6DAC:
0000847E 3038 F704                  		move.w	(v_screenposy).w,d0
00008482 5040                       		addq.w	#8,d0
00008484 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008488 6500                       		bcs.s	loc_6DC4
0000848A 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008490 6700                       		beq.s	loc_6DC4
00008492 D241                       		add.w	d1,d1
00008494 D241                       		add.w	d1,d1
00008496                            
00008496                            loc_6DC4:
00008496 D378 F72E                  		add.w	d1,(v_limitbtm2).w
0000849A 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
000084A0 4E75                       		rts	
000084A2                            ; End of function DynamicLevelEvents
000084A2                            
000084A2                            ; ===========================================================================
000084A2                            ; ---------------------------------------------------------------------------
000084A2                            ; Offset index for dynamic level events
000084A2                            ; ---------------------------------------------------------------------------
000084A2 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
000084A6 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
000084AA 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
000084AE 0000                       		dc.w DLE_Ending-DLE_Index
000084B0                            ; ===========================================================================
000084B0                            ; ---------------------------------------------------------------------------
000084B0                            ; Green	Hill Zone dynamic level events
000084B0                            ; ---------------------------------------------------------------------------
000084B0                            
000084B0                            DLE_GHZ:
000084B0 7000                       		moveq	#0,d0
000084B2 1038 FE11                  		move.b	(v_act).w,d0
000084B6 D040                       		add.w	d0,d0
000084B8 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
000084BC 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
000084C0                            ; ===========================================================================
000084C0 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
000084C2 0000                       		dc.w DLE_GHZ2-DLE_GHZx
000084C4 0000                       		dc.w DLE_GHZ3-DLE_GHZx
000084C6                            ; ===========================================================================
000084C6                            
000084C6                            DLE_GHZ1:
000084C6 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000084CC 6600                       		bne.s	gohere
000084CE 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000084D4 4E75                       		rts
000084D6                            gohere:
000084D6 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000084DC 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
000084E2 6500                       		bcs.s	locret_6E08	; if not, branch
000084E4 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
000084EA                            
000084EA                            locret_6E08:
000084EA 4E75                       		rts	
000084EC                            ; ===========================================================================
000084EC                            
000084EC                            DLE_GHZ2:
000084EC 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000084F2 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
000084F8 6500                       		bcs.s	locret_6E3A
000084FA 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008500 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008506 6500                       		bcs.s	locret_6E3A
00008508 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
0000850E 6500                       		bcs.s	loc_6E9A
00008510 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008516 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
0000851C 6400                       		bcc.s	loc_6E8F
0000851E 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008524 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000852A                            
0000852A                            loc_6E8F:
0000852A 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008530 6400                       		bcc.s	loc_6E9A
00008532                            
00008532                            locret_6E3A:
00008532 4E75                       		rts	
00008534                            ; ===========================================================================
00008534                            
00008534                            loc_6E9A:
00008534 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000853A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000853E 4E75                       		rts		
00008540                            ; ===========================================================================
00008540                            
00008540                            DLE_GHZ3:
00008540 7000                       		moveq	#0,d0
00008542 1038 F742                  		move.b	(v_dle_routine).w,d0
00008546 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000854A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000854E                            ; ===========================================================================
0000854E 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008550 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008552 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008554                            ; ===========================================================================
00008554                            
00008554                            DLE_GHZ3main:
00008554 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000855A 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008560 6500                       		bcs.s	locret_6E96
00008562 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008568 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
0000856E 6500                       		bcs.s	locret_6E96
00008570 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008576 6500                       		bcs.s	loc_6E98
00008578 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
0000857E 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008584 6400                       		bcc.s	loc_6E8E
00008586 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000858C 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008592                            
00008592                            loc_6E8E:
00008592 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
00008598 6400                       		bcc.s	loc_6E98
0000859A                            
0000859A                            locret_6E96:
0000859A 4E75                       		rts	
0000859C                            ; ===========================================================================
0000859C                            
0000859C                            loc_6E98:
0000859C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000085A2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000085A6 4E75                       		rts	
000085A8                            ; ===========================================================================
000085A8                            
000085A8                            DLE_GHZ3boss:
000085A8 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000085AE 6400                       		bcc.s	loc_6EB0
000085B0 5538 F742                  		subq.b	#2,(v_dle_routine).w
000085B4                            
000085B4                            loc_6EB0:
000085B4 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
000085BA 6500                       		bcs.s	locret_6EE8
000085BC 6100 0000                  		bsr.w	FindFreeObj
000085C0 6600                       		bne.s	loc_6ED0
000085C2 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
000085C6 337C 2A60 0008             		move.w	#$2A60,obX(a1)
000085CC 337C 0280 000C             		move.w	#$280,obY(a1)
000085D2                            
000085D2                            loc_6ED0:
000085DA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000085E0 5438 F742                  		addq.b	#2,(v_dle_routine).w
000085E4 7000                       		moveq	#plcid_Boss,d0
000085E6 6000 9152                  		bra.w	AddPLC		; load boss patterns
000085EA                            ; ===========================================================================
000085EA                            
000085EA                            locret_6EE8:
000085EA 4E75                       		rts	
000085EC                            ; ===========================================================================
000085EC                            
000085EC                            DLE_GHZ3end:
000085EC 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000085F2 4E75                       		rts	
000085F4                            ; ===========================================================================
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Labyrinth Zone dynamic level events
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            
000085F4                            DLE_LZ:
000085F4 7000                       		moveq	#0,d0
000085F6 1038 FE11                  		move.b	(v_act).w,d0
000085FA D040                       		add.w	d0,d0
000085FC 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008600 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008604                            ; ===========================================================================
00008604 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008606 0000                       		dc.w DLE_LZ12-DLE_LZx
00008608 0000                       		dc.w DLE_LZ3-DLE_LZx
0000860A 0000                       		dc.w DLE_SBZ3-DLE_LZx
0000860C                            ; ===========================================================================
0000860C                            
0000860C                            DLE_LZ12:
0000860C 4E75                       		rts	
0000860E                            ; ===========================================================================
0000860E                            
0000860E                            DLE_LZ3:
0000860E 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008612 6700                       		beq.s	loc_6F28	; if not, branch
00008614 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008618 0C11 0007                  		cmpi.b	#7,(a1)
0000861C 6700                       		beq.s	loc_6F28
0000861E 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000862A                            
0000862A                            loc_6F28:
0000862A 4A38 F742                  		tst.b	(v_dle_routine).w
0000862E 6600                       		bne.s	locret_6F64
00008630 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008636 6500                       		bcs.s	locret_6F62
00008638 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
0000863E 6400                       		bcc.s	locret_6F62
00008640 6100 0000                  		bsr.w	FindFreeObj
00008644 6600                       		bne.s	loc_6F4A
00008646 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
0000864A                            
0000864A                            loc_6F4A:
00008652 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008658 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000865C 7000                       		moveq	#plcid_Boss,d0
0000865E 6000 90DA                  		bra.w	AddPLC		; load boss patterns
00008662                            ; ===========================================================================
00008662                            
00008662                            locret_6F62:
00008662 4E75                       		rts	
00008664                            ; ===========================================================================
00008664                            
00008664                            locret_6F64:
00008664 4E75                       		rts	
00008666                            ; ===========================================================================
00008666                            
00008666                            DLE_SBZ3:
00008666 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
0000866C 6500                       		bcs.s	locret_6F8C
0000866E 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008674 6400                       		bcc.s	locret_6F8C	; if not, branch
00008676 4238 FE30                  		clr.b	(v_lastlamp).w
0000867A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008680 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008686 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
0000868C                            
0000868C                            locret_6F8C:
0000868C 4E75                       		rts	
0000868E                            ; ===========================================================================
0000868E                            ; ---------------------------------------------------------------------------
0000868E                            ; Marble Zone dynamic level events
0000868E                            ; ---------------------------------------------------------------------------
0000868E                            
0000868E                            DLE_MZ:
0000868E 7000                       		moveq	#0,d0
00008690 1038 FE11                  		move.b	(v_act).w,d0
00008694 D040                       		add.w	d0,d0
00008696 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
0000869A 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
0000869E                            ; ===========================================================================
0000869E 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
000086A0 0000                       		dc.w DLE_MZ2-DLE_MZx
000086A2 0000                       		dc.w DLE_MZ3-DLE_MZx
000086A4                            ; ===========================================================================
000086A4                            
000086A4                            DLE_MZ1:
000086A4 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000086AA 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
000086B0 6500                       		bcs.s	locret_6FE8
000086B2 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
000086B8                            
000086B8                            locret_6FE8:
000086B8 4E75                       		rts	
000086BA                            
000086BA                            ; ===========================================================================
000086BA                            
000086BA                            DLE_MZ2:
000086BA 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000086C0 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
000086C6 6500                       		bcs.s	locret_6FE9
000086C8 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
000086CE                            		
000086CE                            locret_6FE9:
000086CE 4E75                       		rts	
000086D0                            ; ===========================================================================
000086D0                            
000086D0                            DLE_MZ3:
000086D0 7000                       		moveq	#0,d0
000086D2 1038 F742                  		move.b	(v_dle_routine).w,d0
000086D6 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000086DA 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000086DE                            ; ===========================================================================
000086DE 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
000086E0 0000                       		dc.w DLE_MZ3cutscene-off_7098
000086E2 0000                       		dc.w DLE_MZ3boss2-off_7098
000086E4 0000                       		dc.w DLE_MZ3end-off_7098
000086E6                            ; ===========================================================================
000086E6                            
000086E6                            DLE_MZ3boss:
000086E6 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086EC 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
000086F2 6500                       		bcs.s	locret_70E8
000086F4 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000086FA 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008700 6500                       		bcs.s	locret_70E8
00008702 6100 0000                  		bsr.w	FindFreeObj
00008706 6600                       		bne.s	loc_70D0
00008708 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
0000870C 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008712 337C 022C 000C             		move.w	#$22C,obY(a1)
00008718                            
00008718                            loc_70D0:
00008720 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008726 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000872A 7000                       		moveq	#plcid_Boss,d0
0000872C 6000 900C                  		bra.w	AddPLC		; load boss patterns
00008730                            ; ===========================================================================
00008730                            
00008730                            locret_70E8:
00008730 4E75                       		rts	
00008732                            		
00008732                            DLE_MZ3cutscene:
00008732 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008738 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
0000873E 6500                       		bcs.s	locret_8298
00008740 6100 0000                  		bsr.w	FindFreeObj
00008744 6600                       		bne.s	locret_8298
00008746 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
0000874A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000874E 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008750 6000 8FE8                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008754                            ; ===========================================================================
00008754                            
00008754                            locret_8298:
00008754 4E75                       		rts	
00008756                            ; ===========================================================================
00008756                            
00008756                            DLE_MZ3boss2:
00008756 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
0000875C 6500                       		bcs.s	loc_72C6
0000875E 6100 0000                  		bsr.w	FindFreeObj
00008762 6600                       		bne.s	loc_72C0
00008764 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008768 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008774                            
00008774                            loc_72C0:
00008774 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000877A                            
0000877A                            loc_72C6:
0000877A 6000                       		bra.s	loc_72D2
0000877C                            ; ===========================================================================
0000877C                            
0000877C                            DLE_MZ3end:
0000877C 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
00008782 6500                       		bcs.s	loc_72D2
00008784 4E75                       		rts	
00008786                            ; ===========================================================================
00008786                            
00008786                            loc_72D2:
00008786 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000878C 4E75                       		rts
0000878E                            
0000878E                            
0000878E                            ; ===========================================================================
0000878E                            ; ---------------------------------------------------------------------------
0000878E                            ; Star Light Zone dynamic level events
0000878E                            ; ---------------------------------------------------------------------------
0000878E                            
0000878E                            DLE_SLZ:
0000878E 7000                       		moveq	#0,d0
00008790 1038 FE11                  		move.b	(v_act).w,d0
00008794 D040                       		add.w	d0,d0
00008796 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
0000879A 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
0000879E                            ; ===========================================================================
0000879E 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
000087A0 0000                       		dc.w DLE_SLZ12-DLE_SLZx
000087A2 0000                       		dc.w DLE_SLZ3-DLE_SLZx
000087A4                            ; ===========================================================================
000087A4                            
000087A4                            DLE_SLZ12:
000087A4 4E75                       		rts	
000087A6                            ; ===========================================================================
000087A6                            
000087A6                            DLE_SLZ3:
000087A6 7000                       		moveq	#0,d0
000087A8 1038 F742                  		move.b	(v_dle_routine).w,d0
000087AC 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000087B0 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000087B4                            ; ===========================================================================
000087B4 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
000087B6 0000                       		dc.w DLE_SLZ3boss-off_7118
000087B8 0000                       		dc.w DLE_SLZ3end-off_7118
000087BA                            ; ===========================================================================
000087BA                            
000087BA                            DLE_SLZ3main:
000087BA 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
000087C0 6500                       		bcs.s	locret_7130
000087C2 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000087C8 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087CC                            
000087CC                            locret_7130:
000087CC 4E75                       		rts	
000087CE                            ; ===========================================================================
000087CE                            
000087CE                            DLE_SLZ3boss:
000087CE 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
000087D4 6500                       		bcs.s	locret_715C
000087D6 6100 0000                  		bsr.w	FindFreeObj
000087DA 6600                       		bne.s	loc_7144
000087DC 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
000087E0                            
000087E0                            loc_7144:
000087E8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000087EE 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087F2 7000                       		moveq	#plcid_Boss,d0
000087F4 6000 8F44                  		bra.w	AddPLC		; load boss patterns
000087F8                            ; ===========================================================================
000087F8                            
000087F8                            locret_715C:
000087F8 4E75                       		rts	
000087FA                            ; ===========================================================================
000087FA                            
000087FA                            DLE_SLZ3end:
000087FA 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008800 4E75                       		rts
00008802 4E75                       		rts
00008804                            ; ===========================================================================
00008804                            ; ---------------------------------------------------------------------------
00008804                            ; Spring Yard Zone dynamic level events
00008804                            ; ---------------------------------------------------------------------------
00008804                            
00008804                            DLE_SYZ:
00008804 7000                       		moveq	#0,d0
00008806 1038 FE11                  		move.b	(v_act).w,d0
0000880A D040                       		add.w	d0,d0
0000880C 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008810 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008814                            ; ===========================================================================
00008814 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008816 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008818 0000                       		dc.w DLE_SYZ3-DLE_SYZx
0000881A                            ; ===========================================================================
0000881A                            
0000881A                            DLE_SYZ1:
0000881A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008820 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
00008826 6500                       		bcs.s	locret_71A2
00008828 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
0000882E 4E75                       		rts	
00008830                            ; ===========================================================================
00008830                            
00008830                            DLE_SYZ2:
00008830 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008836 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
0000883C 6500                       		bcs.s	locret_71A2
0000883E 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008844 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
0000884A 6500                       		bcs.s	locret_71A2
0000884C 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008852                            
00008852                            locret_71A2:
00008852 4E75                       		rts	
00008854                            ; ===========================================================================
00008854                            
00008854                            DLE_SYZ3:
00008854 7000                       		moveq	#0,d0
00008856 1038 F742                  		move.b	(v_dle_routine).w,d0
0000885A 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000885E 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008862                            ; ===========================================================================
00008862 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008864 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008866 0000                       		dc.w DLE_SYZ3end-off_71B2
00008868                            ; ===========================================================================
00008868                            
00008868                            DLE_SYZ3main:
00008868 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
0000886E 6500                       		bcs.s	locret_71CE
00008870 6100 0000                  		bsr.w	FindFreeObj
00008874 6600                       		bne.s	locret_71CE
00008876 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
0000887A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000887E                            
0000887E                            locret_71CE:
0000887E 4E75                       		rts	
00008880                            ; ===========================================================================
00008880                            
00008880                            DLE_SYZ3boss:
00008880 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008886 6500                       		bcs.s	locret_7200
00008888 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
0000888E 6100 0000                  		bsr.w	FindFreeObj
00008892 6600                       		bne.s	loc_71EC
00008894 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008898 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000889C                            
0000889C                            loc_71EC:
000088A4 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000088AA 7000                       		moveq	#plcid_Boss,d0
000088AC 6000 8E8C                  		bra.w	AddPLC		; load boss patterns
000088B0                            ; ===========================================================================
000088B0                            
000088B0                            locret_7200:
000088B0 4E75                       		rts	
000088B2                            ; ===========================================================================
000088B2                            
000088B2                            DLE_SYZ3end:
000088B2 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088B8 4E75                       		rts	
000088BA                            ; ===========================================================================
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            ; Scrap	Brain Zone dynamic level events
000088BA                            ; ---------------------------------------------------------------------------
000088BA                            
000088BA                            DLE_SBZ:
000088BA 7000                       		moveq	#0,d0
000088BC 1038 FE11                  		move.b	(v_act).w,d0
000088C0 D040                       		add.w	d0,d0
000088C2 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
000088C6 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
000088CA                            ; ===========================================================================
000088CA 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
000088CC 0000                       		dc.w DLE_SBZ2-DLE_SBZx
000088CE 0000                       		dc.w DLE_FZ-DLE_SBZx
000088D0                            ; ===========================================================================
000088D0                            
000088D0                            DLE_SBZ1:
000088D0 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000088D6 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
000088DC 6500                       		bcs.s	locret_7242
000088DE 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
000088E4 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
000088EA 6500                       		bcs.s	locret_7242
000088EC 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
000088F2                            
000088F2                            locret_7242:
000088F2 4E75                       		rts	
000088F4                            ; ===========================================================================
000088F4                            
000088F4                            DLE_SBZ2:
000088F4 7000                       		moveq	#0,d0
000088F6 1038 F742                  		move.b	(v_dle_routine).w,d0
000088FA 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000088FE 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008902                            ; ===========================================================================
00008902 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008904 0000                       		dc.w DLE_SBZ2boss-off_7252
00008906 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008908 0000                       		dc.w DLE_SBZ2end-off_7252
0000890A                            ; ===========================================================================
0000890A                            
0000890A                            DLE_SBZ2main:
0000890A 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008910 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008916 6500                       		bcs.s	locret_727A
00008918 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
0000891E 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008924 6500                       		bcs.s	locret_727A
00008926 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000892A                            
0000892A                            locret_727A:
0000892A 4E75                       		rts	
0000892C                            ; ===========================================================================
0000892C                            
0000892C                            DLE_SBZ2boss:
0000892C 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008932 6500                       		bcs.s	locret_7298
00008934 6100 0000                  		bsr.w	FindFreeObj
00008938 6600                       		bne.s	locret_7298
0000893A 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
0000893E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008942 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008944 6000 8DF4                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008948                            ; ===========================================================================
00008948                            
00008948                            locret_7298:
00008948 4E75                       		rts	
0000894A                            ; ===========================================================================
0000894A                            
0000894A                            DLE_SBZ2boss2:
0000894A 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008950 6500                       		bcs.s	loc_72B6
00008952 6100 0000                  		bsr.w	FindFreeObj
00008956 6600                       		bne.s	loc_72B0
00008958 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
0000895C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008960                            
00008960                            loc_72B0:
00008960 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008966                            
00008966                            loc_72B6:
00008966 6000                       		bra.s	loc_72C2
00008968                            ; ===========================================================================
00008968                            
00008968                            DLE_SBZ2end:
00008968 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
0000896E 6500                       		bcs.s	loc_72C2
00008970 4E75                       		rts	
00008972                            ; ===========================================================================
00008972                            
00008972                            loc_72C2:
00008972 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008978 4E75                       		rts	
0000897A                            ; ===========================================================================
0000897A                            
0000897A                            DLE_FZ:
0000897A 7000                       		moveq	#0,d0
0000897C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008980 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008984 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008988                            ; ===========================================================================
00008988 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
0000898C 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008990 0000                       		dc.w DLE_FZend2-off_72D8
00008992                            ; ===========================================================================
00008992                            
00008992                            DLE_FZmain:
00008992 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008998 6500                       		bcs.s	loc_72F4
0000899A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000899E 7000                       		moveq	#plcid_FZBoss,d0
000089A0 6100 8D98                  		bsr.w	AddPLC		; load FZ boss patterns
000089A4                            
000089A4                            loc_72F4:
000089A4 60CC                       		bra.s	loc_72C2
000089A6                            ; ===========================================================================
000089A6                            
000089A6                            DLE_FZboss:
000089A6 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
000089AC 6500                       		bcs.s	loc_7312
000089AE 6100 0000                  		bsr.w	FindFreeObj
000089B2 6600                       		bne.s	loc_7312
000089B4 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
000089B8 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089BC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089C2                            
000089C2                            loc_7312:
000089C2 60AE                       		bra.s	loc_72C2
000089C4                            ; ===========================================================================
000089C4                            
000089C4                            DLE_FZend:
000089C4 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
000089CA 6500                       		bcs.s	loc_7320
000089CC 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089D0                            
000089D0                            loc_7320:
000089D0 60A0                       		bra.s	loc_72C2
000089D2                            ; ===========================================================================
000089D2                            
000089D2                            locret_7322:
000089D2 4E75                       		rts	
000089D4                            ; ===========================================================================
000089D4                            
000089D4                            DLE_FZend2:
000089D4 609C                       		bra.s	loc_72C2
000089D6                            ; ===========================================================================
000089D6                            ; ---------------------------------------------------------------------------
000089D6                            ; Ending sequence dynamic level events (empty)
000089D6                            ; ---------------------------------------------------------------------------
000089D6                            
000089D6                            DLE_Ending:
000089D6 4E75                       		rts	
000089D6 4E75                       		rts	
000089D8                            
000089D8                            		include	"_incObj\11 Bridge (part 1).asm"
000089D8                            ; ---------------------------------------------------------------------------
000089D8                            ; Object 11 - GHZ bridge
000089D8                            ; ---------------------------------------------------------------------------
000089D8                            
000089D8                            Bridge:
000089D8 7000                       		moveq	#0,d0
000089DA 1028 0024                  		move.b	obRoutine(a0),d0
000089DE 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
000089E2 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
000089E6                            ; ===========================================================================
000089E6 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
000089EA 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
000089EE 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
000089F2                            ; ===========================================================================
000089F2                            
000089F2                            Bri_Main:	; Routine 0
000089F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000089F6 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
000089FE 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008A04 117C 0004 0001             		move.b	#4,obRender(a0)
00008A0A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008A10 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008A16 3428 000C                  		move.w	obY(a0),d2
00008A1A 3628 0008                  		move.w	obX(a0),d3
00008A1E 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008A20 45E8 0028                  		lea	obSubtype(a0),a2
00008A24 7200                       		moveq	#0,d1
00008A26 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008A28 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008A2C 3001                       		move.w	d1,d0
00008A2E E248                       		lsr.w	#1,d0
00008A30 E948                       		lsl.w	#4,d0
00008A32 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008A34 5501                       		subq.b	#2,d1
00008A36 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008A38                            
00008A38                            @buildloop:
00008A38 6100 0000                  		bsr.w	FindFreeObj
00008A3C 6600                       		bne.s	Bri_Action
00008A3E 5228 0028                  		addq.b	#1,obSubtype(a0)
00008A42 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008A46 6600                       		bne.s	@notleftmost	; if not, branch
00008A48                            
00008A48 0643 0010                  		addi.w	#$10,d3
00008A4C 3142 000C                  		move.w	d2,obY(a0)
00008A50 3142 003C                  		move.w	d2,$3C(a0)
00008A54 3A08                       		move.w	a0,d5
00008A56 0445 D000                  		subi.w	#$D000,d5
00008A5A EC4D                       		lsr.w	#6,d5
00008A5C 0245 007F                  		andi.w	#$7F,d5
00008A60 14C5                       		move.b	d5,(a2)+
00008A62 5228 0028                  		addq.b	#1,obSubtype(a0)
00008A66                            
00008A66                            	@notleftmost:
00008A66 3A09                       		move.w	a1,d5
00008A68 0445 D000                  		subi.w	#$D000,d5
00008A6C EC4D                       		lsr.w	#6,d5
00008A6E 0245 007F                  		andi.w	#$7F,d5
00008A72 14C5                       		move.b	d5,(a2)+
00008A74 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008A7A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008A7C 3342 000C                  		move.w	d2,obY(a1)
00008A80 3342 003C                  		move.w	d2,$3C(a1)
00008A84 3343 0008                  		move.w	d3,obX(a1)
00008A88 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008A90 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008A96 137C 0004 0001             		move.b	#4,obRender(a1)
00008A9C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008AA2 137C 0008 0014             		move.b	#8,obActWid(a1)
00008AA8 0643 0010                  		addi.w	#$10,d3
00008AAC 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008AB0                            
00008AB0                            Bri_Action:	; Routine 2
00008AB0 6100                       		bsr.s	Bri_Solid
00008AB2 4A28 003E                  		tst.b	$3E(a0)
00008AB6 6700                       		beq.s	@display
00008AB8 5928 003E                  		subq.b	#4,$3E(a0)
00008ABC 6100 0000                  		bsr.w	Bri_Bend
00008AC0                            
00008AC0                            	@display:
00008AC0 6100 0000                  		bsr.w	DisplaySprite
00008AC4 6000 0000                  		bra.w	Bri_ChkDel
00008AC8                            
00008AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AC8                            
00008AC8                            
00008AC8                            Bri_Solid:
00008AC8 7200                       		moveq	#0,d1
00008ACA 1228 0028                  		move.b	obSubtype(a0),d1
00008ACE E749                       		lsl.w	#3,d1
00008AD0 3401                       		move.w	d1,d2
00008AD2 5041                       		addq.w	#8,d1
00008AD4 D442                       		add.w	d2,d2
00008AD6 43F8 D000                  		lea	(v_player).w,a1
00008ADA 4A69 0012                  		tst.w	obVelY(a1)
00008ADE 6B00 0000                  		bmi.w	Plat_Exit
00008AE2 3029 0008                  		move.w	obX(a1),d0
00008AE6 9068 0008                  		sub.w	obX(a0),d0
00008AEA D041                       		add.w	d1,d0
00008AEC 6B00 0000                  		bmi.w	Plat_Exit
00008AF0 B042                       		cmp.w	d2,d0
00008AF2 6400 0000                  		bcc.w	Plat_Exit
00008AF6 6000                       		bra.s	Plat_NoXCheck
00008AF8                            ; End of function Bri_Solid
00008AF8                            ; End of function Bri_Solid
00008AF8                            
00008AF8                            ; ---------------------------------------------------------------------------
00008AF8                            ; Platform subroutine
00008AF8                            ; ---------------------------------------------------------------------------
00008AF8                            
00008AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AF8                            
00008AF8                            PlatformObject:
00008AF8 43F8 D000                  		lea	(v_player).w,a1
00008AFC 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008B00 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008B04                            
00008B04                            ;		perform x-axis range check
00008B04 3029 0008                  		move.w	obX(a1),d0
00008B08 9068 0008                  		sub.w	obX(a0),d0
00008B0C D041                       		add.w	d1,d0
00008B0E 6B00 0000                  		bmi.w	Plat_Exit
00008B12 D241                       		add.w	d1,d1
00008B14 B041                       		cmp.w	d1,d0
00008B16 6400 0000                  		bhs.w	Plat_Exit
00008B1A                            
00008B1A                            	Plat_NoXCheck:
00008B1A 3028 000C                  		move.w	obY(a0),d0
00008B1E 5140                       		subq.w	#8,d0
00008B20                            
00008B20                            Platform3:
00008B20                            ;		perform y-axis range check
00008B20 3429 000C                  		move.w	obY(a1),d2
00008B24 1229 0016                  		move.b	obHeight(a1),d1
00008B28 4881                       		ext.w	d1
00008B2A D242                       		add.w	d2,d1
00008B2C 5841                       		addq.w	#4,d1
00008B2E 9041                       		sub.w	d1,d0
00008B30 6200 0000                  		bhi.w	Plat_Exit
00008B34 0C40 FFF0                  		cmpi.w	#-$10,d0
00008B38 6500 0000                  		blo.w	Plat_Exit
00008B3C                            
00008B3C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008B40 6B00 0000                  		bmi.w	Plat_Exit
00008B44 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008B4A 6400 0000                  		bhs.w	Plat_Exit
00008B4E D440                       		add.w	d0,d2
00008B50 5642                       		addq.w	#3,d2
00008B52 3342 000C                  		move.w	d2,obY(a1)
00008B56 5428 0024                  		addq.b	#2,obRoutine(a0)
00008B5A                            
00008B5A                            loc_74AE:
00008B5A 0829 0003 0022             		btst	#3,obStatus(a1)
00008B60 6700                       		beq.s	loc_74DC
00008B62 7000                       		moveq	#0,d0
00008B64 1029 003D                  		move.b	$3D(a1),d0
00008B68 ED48                       		lsl.w	#6,d0
00008B6A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008B70 2440                       		movea.l	d0,a2
00008B72 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008B78 422A 0025                  		clr.b	ob2ndRout(a2)
00008B7C 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008B82 6600                       		bne.s	loc_74DC
00008B84 552A 0024                  		subq.b	#2,obRoutine(a2)
00008B88                            
00008B88                            loc_74DC:
00008B88 3008                       		move.w	a0,d0
00008B8A 0440 D000                  		subi.w	#-$3000,d0
00008B8E EC48                       		lsr.w	#6,d0
00008B90 0240 007F                  		andi.w	#$7F,d0
00008B94 1340 003D                  		move.b	d0,$3D(a1)
00008B98 137C 0000 0026             		move.b	#0,obAngle(a1)
00008B9E 337C 0000 0012             		move.w	#0,obVelY(a1)
00008BA4 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008BAA 0829 0001 0022             		btst	#1,obStatus(a1)
00008BB0 6700                       		beq.s	loc_7512
00008BB2 2F08                       		move.l	a0,-(sp)
00008BB4 2049                       		movea.l	a1,a0
00008BB6 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008BBC 205F                       		movea.l	(sp)+,a0
00008BBE                            
00008BBE                            loc_7512:
00008BBE 08E9 0003 0022             		bset	#3,obStatus(a1)
00008BC4 08E8 0003 0022             		bset	#3,obStatus(a0)
00008BCA                            
00008BCA                            Plat_Exit:
00008BCA 4E75                       		rts	
00008BCC                            ; End of function PlatformObject
00008BCC                            
00008BCC                            ; ---------------------------------------------------------------------------
00008BCC                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008BCC                            ; ---------------------------------------------------------------------------
00008BCC                            
00008BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BCC                            
00008BCC                            
00008BCC                            SlopeObject:
00008BCC 43F8 D000                  		lea	(v_player).w,a1
00008BD0 4A69 0012                  		tst.w	obVelY(a1)
00008BD4 6B00 FFF4                  		bmi.w	Plat_Exit
00008BD8 3029 0008                  		move.w	obX(a1),d0
00008BDC 9068 0008                  		sub.w	obX(a0),d0
00008BE0 D041                       		add.w	d1,d0
00008BE2 6BE6                       		bmi.s	Plat_Exit
00008BE4 D241                       		add.w	d1,d1
00008BE6 B041                       		cmp.w	d1,d0
00008BE8 64E0                       		bhs.s	Plat_Exit
00008BEA 0828 0000 0001             		btst	#0,obRender(a0)
00008BF0 6700                       		beq.s	loc_754A
00008BF2 4640                       		not.w	d0
00008BF4 D041                       		add.w	d1,d0
00008BF6                            
00008BF6                            loc_754A:
00008BF6 E248                       		lsr.w	#1,d0
00008BF8 7600                       		moveq	#0,d3
00008BFA 1632 0000                  		move.b	(a2,d0.w),d3
00008BFE 3028 000C                  		move.w	obY(a0),d0
00008C02 9043                       		sub.w	d3,d0
00008C04 6000 FF1A                  		bra.w	Platform3
00008C08                            ; End of function SlopeObject
00008C08                            
00008C08                            
00008C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C08                            
00008C08                            
00008C08                            Swing_Solid:
00008C08 43F8 D000                  		lea	(v_player).w,a1
00008C0C 4A69 0012                  		tst.w	obVelY(a1)
00008C10 6B00 FFB8                  		bmi.w	Plat_Exit
00008C14 3029 0008                  		move.w	obX(a1),d0
00008C18 9068 0008                  		sub.w	obX(a0),d0
00008C1C D041                       		add.w	d1,d0
00008C1E 6B00 FFAA                  		bmi.w	Plat_Exit
00008C22 D241                       		add.w	d1,d1
00008C24 B041                       		cmp.w	d1,d0
00008C26 6400 FFA2                  		bhs.w	Plat_Exit
00008C2A 3028 000C                  		move.w	obY(a0),d0
00008C2E 9043                       		sub.w	d3,d0
00008C30 6000 FEEE                  		bra.w	Platform3
00008C34                            ; End of function Obj15_Solid
00008C34                            
00008C34                            ; ===========================================================================
00008C34                            
00008C34                            		include	"_incObj\11 Bridge (part 2).asm"
00008C34                            
00008C34                            Bri_Platform:	; Routine 4
00008C34 6100                       		bsr.s	Bri_WalkOff
00008C36 6100 0000                  		bsr.w	DisplaySprite
00008C3A 6000 0000                  		bra.w	Bri_ChkDel
00008C3E                            
00008C3E                            ; ---------------------------------------------------------------------------
00008C3E                            ; Subroutine allowing Sonic to walk off a bridge
00008C3E                            ; ---------------------------------------------------------------------------
00008C3E                            
00008C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C3E                            
00008C3E                            
00008C3E                            Bri_WalkOff:
00008C3E 7200                       		moveq	#0,d1
00008C40 1228 0028                  		move.b	obSubtype(a0),d1
00008C44 E749                       		lsl.w	#3,d1
00008C46 3401                       		move.w	d1,d2
00008C48 5041                       		addq.w	#8,d1
00008C4A 6100                       		bsr.s	ExitPlatform2
00008C4C 6400                       		bcc.s	locret_75BE
00008C4E E848                       		lsr.w	#4,d0
00008C50 1140 003F                  		move.b	d0,$3F(a0)
00008C54 1028 003E                  		move.b	$3E(a0),d0
00008C58 0C00 0040                  		cmpi.b	#$40,d0
00008C5C 6700                       		beq.s	loc_75B6
00008C5E 5828 003E                  		addq.b	#4,$3E(a0)
00008C62                            
00008C62                            loc_75B6:
00008C62 6100 0000                  		bsr.w	Bri_Bend
00008C66 6100 0000                  		bsr.w	Bri_MoveSonic
00008C6A                            
00008C6A                            locret_75BE:
00008C6A 4E75                       		rts	
00008C6C                            ; End of function Bri_WalkOff
00008C6C                            ; End of function Bri_WalkOff
00008C6C                            
00008C6C                            ; ---------------------------------------------------------------------------
00008C6C                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008C6C                            ; ---------------------------------------------------------------------------
00008C6C                            
00008C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C6C                            
00008C6C                            
00008C6C                            ExitPlatform:
00008C6C 3401                       		move.w	d1,d2
00008C6E                            
00008C6E                            ExitPlatform2:
00008C6E D442                       		add.w	d2,d2
00008C70 43F8 D000                  		lea	(v_player).w,a1
00008C74 0829 0001 0022             		btst	#1,obStatus(a1)
00008C7A 6600                       		bne.s	loc_75E0
00008C7C 3029 0008                  		move.w	obX(a1),d0
00008C80 9068 0008                  		sub.w	obX(a0),d0
00008C84 D041                       		add.w	d1,d0
00008C86 6B00                       		bmi.s	loc_75E0
00008C88 B042                       		cmp.w	d2,d0
00008C8A 6500                       		blo.s	locret_75F2
00008C8C                            
00008C8C                            loc_75E0:
00008C8C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008C92 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008C98 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008C9E                            
00008C9E                            locret_75F2:
00008C9E 4E75                       		rts	
00008CA0                            ; End of function ExitPlatform
00008CA0                            
00008CA0                            		include	"_incObj\11 Bridge (part 3).asm"
00008CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CA0                            
00008CA0                            
00008CA0                            Bri_MoveSonic:
00008CA0 7000                       		moveq	#0,d0
00008CA2 1028 003F                  		move.b	$3F(a0),d0
00008CA6 1030 0029                  		move.b	$29(a0,d0.w),d0
00008CAA ED48                       		lsl.w	#6,d0
00008CAC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008CB2 2440                       		movea.l	d0,a2
00008CB4 43F8 D000                  		lea	(v_player).w,a1
00008CB8 302A 000C                  		move.w	obY(a2),d0
00008CBC 5140                       		subq.w	#8,d0
00008CBE 7200                       		moveq	#0,d1
00008CC0 1229 0016                  		move.b	obHeight(a1),d1
00008CC4 9041                       		sub.w	d1,d0
00008CC6 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008CCA 4E75                       		rts	
00008CCC                            ; End of function Bri_MoveSonic
00008CCC                            
00008CCC                            
00008CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CCC                            
00008CCC                            
00008CCC                            Bri_Bend:
00008CCC 1028 003E                  		move.b	$3E(a0),d0
00008CD0 6100 AE70                  		bsr.w	CalcSine
00008CD4 3800                       		move.w	d0,d4
00008CD6 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008CDC 7000                       		moveq	#0,d0
00008CDE 1028 0028                  		move.b	obSubtype(a0),d0
00008CE2 E948                       		lsl.w	#4,d0
00008CE4 7600                       		moveq	#0,d3
00008CE6 1628 003F                  		move.b	$3F(a0),d3
00008CEA 3403                       		move.w	d3,d2
00008CEC D640                       		add.w	d0,d3
00008CEE 7A00                       		moveq	#0,d5
00008CF0 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008CF6 1A35 3000                  		move.b	(a5,d3.w),d5
00008CFA 0243 000F                  		andi.w	#$F,d3
00008CFE E94B                       		lsl.w	#4,d3
00008D00 47F4 3000                  		lea	(a4,d3.w),a3
00008D04 45E8 0029                  		lea	$29(a0),a2
00008D08                            
00008D08                            loc_765C:
00008D08 7000                       		moveq	#0,d0
00008D0A 101A                       		move.b	(a2)+,d0
00008D0C ED48                       		lsl.w	#6,d0
00008D0E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D14 2240                       		movea.l	d0,a1
00008D16 7000                       		moveq	#0,d0
00008D18 101B                       		move.b	(a3)+,d0
00008D1A 5240                       		addq.w	#1,d0
00008D1C C0C5                       		mulu.w	d5,d0
00008D1E C0C4                       		mulu.w	d4,d0
00008D20 4840                       		swap	d0
00008D22 D069 003C                  		add.w	$3C(a1),d0
00008D26 3340 000C                  		move.w	d0,obY(a1)
00008D2A 51CA FFDC                  		dbf	d2,loc_765C
00008D2E 7000                       		moveq	#0,d0
00008D30 1028 0028                  		move.b	obSubtype(a0),d0
00008D34 7600                       		moveq	#0,d3
00008D36 1628 003F                  		move.b	$3F(a0),d3
00008D3A 5203                       		addq.b	#1,d3
00008D3C 9600                       		sub.b	d0,d3
00008D3E 4403                       		neg.b	d3
00008D40 6B00                       		bmi.s	locret_76CA
00008D42 3403                       		move.w	d3,d2
00008D44 E94B                       		lsl.w	#4,d3
00008D46 47F4 3000                  		lea	(a4,d3.w),a3
00008D4A D6C2                       		adda.w	d2,a3
00008D4C 5342                       		subq.w	#1,d2
00008D4E 6500                       		bcs.s	locret_76CA
00008D50                            
00008D50                            loc_76A4:
00008D50 7000                       		moveq	#0,d0
00008D52 101A                       		move.b	(a2)+,d0
00008D54 ED48                       		lsl.w	#6,d0
00008D56 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D5C 2240                       		movea.l	d0,a1
00008D5E 7000                       		moveq	#0,d0
00008D60 1023                       		move.b	-(a3),d0
00008D62 5240                       		addq.w	#1,d0
00008D64 C0C5                       		mulu.w	d5,d0
00008D66 C0C4                       		mulu.w	d4,d0
00008D68 4840                       		swap	d0
00008D6A D069 003C                  		add.w	$3C(a1),d0
00008D6E 3340 000C                  		move.w	d0,obY(a1)
00008D72 51CA FFDC                  		dbf	d2,loc_76A4
00008D76                            
00008D76                            locret_76CA:
00008D76 4E75                       		rts	
00008D78                            ; End of function Bri_Bend
00008D78                            
00008D78                            ; ===========================================================================
00008D78                            ; ---------------------------------------------------------------------------
00008D78                            ; GHZ bridge-bending data
00008D78                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008D78                            ; ---------------------------------------------------------------------------
00008D78                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00008E88                            		even
00008E88                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00008F88                            		even
00008F88                            
00008F88                            ; ===========================================================================
00008F88                            
00008F88                            Bri_ChkDel:
00008FA6 4E75                       		rts	
00008FA8                            ; ===========================================================================
00008FA8                            
00008FA8                            @deletebridge:
00008FA8 7400                       		moveq	#0,d2
00008FAA 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00008FAE 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008FB0 5302                       		subq.b	#1,d2		; subtract 1
00008FB2 6500                       		bcs.s	@delparent
00008FB4                            
00008FB4                            	@loop:
00008FB4 7000                       		moveq	#0,d0
00008FB6 101A                       		move.b	(a2)+,d0
00008FB8 ED48                       		lsl.w	#6,d0
00008FBA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008FC0 2240                       		movea.l	d0,a1
00008FC2 B048                       		cmp.w	a0,d0
00008FC4 6700                       		beq.s	@skipdel
00008FC6 6100 0000                  		bsr.w	DeleteChild
00008FCA                            
00008FCA                            	@skipdel:
00008FCA 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00008FCE                            
00008FCE                            @delparent:
00008FCE 6100 0000                  		bsr.w	DeleteObject
00008FD2 4E75                       		rts	
00008FD4                            ; ===========================================================================
00008FD4                            
00008FD4                            Bri_Delete:	; Routine 6, 8
00008FD4 6100 0000                  		bsr.w	DeleteObject
00008FD8 4E75                       		rts	
00008FDA                            ; ===========================================================================
00008FDA                            
00008FDA                            Bri_Display:	; Routine $A
00008FDA 6100 0000                  		bsr.w	DisplaySprite
00008FDE 4E75                       		rts	
00008FDE 4E75                       		rts	
00008FE0                            Map_Bri:	include	"_maps\Bridge.asm"
00008FE0                            ; ---------------------------------------------------------------------------
00008FE0                            ; Sprite mappings - GHZ	bridge
00008FE0                            ; ---------------------------------------------------------------------------
00008FE0                            Map_Bri_internal:
00008FE0 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00008FE2 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00008FE4 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00008FE6 01                         M_Bri_Log:	dc.b 1
00008FE7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00008FEC 02                         M_Bri_Stump:	dc.b 2
00008FED F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00008FF2 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008FF7 01                         M_Bri_Rope:	dc.b 1
00008FF8 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00008FFE 00                         		even
00008FFE 00                         		even
00008FFE                            
00008FFE                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00008FFE                            ; ---------------------------------------------------------------------------
00008FFE                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008FFE                            ;	    - spiked ball on a chain (SBZ)
00008FFE                            ; ---------------------------------------------------------------------------
00008FFE                            
00008FFE                            SwingingPlatform:
00008FFE 7000                       		moveq	#0,d0
00009000 1028 0024                  		move.b	obRoutine(a0),d0
00009004 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009008 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000900C                            ; ===========================================================================
0000900C 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00009010 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009014 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009018 0000                       		dc.w Swing_Action-Swing_Index
0000901A                            
0000901A =0000003A                  swing_origX:	equ $3A		; original x-axis position
0000901A =00000038                  swing_origY:	equ $38		; original y-axis position
0000901A                            ; ===========================================================================
0000901A                            
0000901A                            Swing_Main:	; Routine 0
0000901A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000901E 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009026 317C 4380 0002             		move.w	#$4380,obGfx(a0)
0000902C 117C 0004 0001             		move.b	#4,obRender(a0)
00009032 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009038 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000903E 117C 0008 0016             		move.b	#8,obHeight(a0)
00009044 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
0000904A 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
00009050 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009056 6600                       		bne.s	@notSLZ
00009058                            
00009058 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
00009060 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009066 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000906C 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009072 117C 0099 0020             		move.b	#$99,obColType(a0)
00009078                            
00009078                            	@notSLZ:
00009078 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000907E 6600                       		bne.s	@length
00009080                            
00009080 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009088 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000908E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009094 117C 0018 0016             		move.b	#$18,obHeight(a0)
0000909A 117C 0086 0020             		move.b	#$86,obColType(a0)
000090A0 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000090A6                            
000090A6                            @length:
000090A6 1810                       		move.b	0(a0),d4
000090A8 7200                       		moveq	#0,d1
000090AA 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000090AE 1212                       		move.b	(a2),d1		; move a2 to d1
000090B0 3F01                       		move.w	d1,-(sp)
000090B2 0241 000F                  		andi.w	#$F,d1
000090B6 14FC 0000                  		move.b	#0,(a2)+
000090BA 3601                       		move.w	d1,d3
000090BC E94B                       		lsl.w	#4,d3
000090BE 5003                       		addq.b	#8,d3
000090C0 1143 003C                  		move.b	d3,$3C(a0)
000090C4 5103                       		subq.b	#8,d3
000090C6 4A28 001A                  		tst.b	obFrame(a0)
000090CA 6700                       		beq.s	@makechain
000090CC 5003                       		addq.b	#8,d3
000090CE 5341                       		subq.w	#1,d1
000090D0                            
000090D0                            @makechain:
000090D0 6100 0000                  		bsr.w	FindFreeObj
000090D4 6600                       		bne.s	@fail
000090D6 5228 0028                  		addq.b	#1,obSubtype(a0)
000090DA 3A09                       		move.w	a1,d5
000090DC 0445 D000                  		subi.w	#$D000,d5
000090E0 EC4D                       		lsr.w	#6,d5
000090E2 0245 007F                  		andi.w	#$7F,d5
000090E6 14C5                       		move.b	d5,(a2)+
000090E8 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
000090EE 1284                       		move.b	d4,0(a1)	; load swinging	object
000090F0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000090F6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000090FC 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009102 137C 0004 0001             		move.b	#4,obRender(a1)
00009108 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000910E 137C 0008 0014             		move.b	#8,obActWid(a1)
00009114 137C 0001 001A             		move.b	#1,obFrame(a1)
0000911A 1343 003C                  		move.b	d3,$3C(a1)
0000911E 0403 0010                  		subi.b	#$10,d3
00009122 6400                       		bcc.s	@notanchor
00009124 137C 0002 001A             		move.b	#2,obFrame(a1)
0000912A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009130 08E9 0006 0002             		bset	#6,obGfx(a1)
00009136                            
00009136                            	@notanchor:
00009136 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000913A                            
0000913A                            	@fail:
0000913A 3A08                       		move.w	a0,d5
0000913C 0445 D000                  		subi.w	#$D000,d5
00009140 EC4D                       		lsr.w	#6,d5
00009142 0245 007F                  		andi.w	#$7F,d5
00009146 14C5                       		move.b	d5,(a2)+
00009148 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000914E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009154 321F                       		move.w	(sp)+,d1
00009156 0801 0004                  		btst	#4,d1		; is object type $1X ?
0000915A 6700                       		beq.s	@not1X	; if not, branch
0000915C 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009164 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
0000916A 117C 0001 001A             		move.b	#1,obFrame(a0)
00009170 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009176 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
0000917C                            
0000917C                            	@not1X:
0000917C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009182 6700                       		beq.s	Swing_Action	; if yes, branch
00009184                            
00009184                            Swing_SetSolid:	; Routine 2
00009184 7200                       		moveq	#0,d1
00009186 1228 0014                  		move.b	obActWid(a0),d1
0000918A 7600                       		moveq	#0,d3
0000918C 1628 0016                  		move.b	obHeight(a0),d3
00009190 6100 FA76                  		bsr.w	Swing_Solid
00009194                            
00009194                            Swing_Action:	; Routine $C
00009194 6100 0000                  		bsr.w	Swing_Move
00009198 6100 0000                  		bsr.w	DisplaySprite
0000919C 6000 0000                  		bra.w	Swing_ChkDel
000091A0                            ; ===========================================================================
000091A0                            
000091A0                            Swing_Action2:	; Routine 4
000091A0 7200                       		moveq	#0,d1
000091A2 1228 0014                  		move.b	obActWid(a0),d1
000091A6 6100 FAC4                  		bsr.w	ExitPlatform
000091AA 3F28 0008                  		move.w	obX(a0),-(sp)
000091AE 6100 0000                  		bsr.w	Swing_Move
000091B2 341F                       		move.w	(sp)+,d2
000091B4 7600                       		moveq	#0,d3
000091B6 1628 0016                  		move.b	obHeight(a0),d3
000091BA 5203                       		addq.b	#1,d3
000091BC 6100 0000                  		bsr.w	MvSonicOnPtfm
000091C0 6100 0000                  		bsr.w	DisplaySprite
000091C4 6000 0000                  		bra.w	Swing_ChkDel
000091C8                            
000091C8 4E75                       		rts
000091C8 4E75                       		rts
000091CA                            
000091CA                            ; ---------------------------------------------------------------------------
000091CA                            ; Subroutine to	change Sonic's position with a platform
000091CA                            ; ---------------------------------------------------------------------------
000091CA                            
000091CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091CA                            
000091CA                            
000091CA                            MvSonicOnPtfm:
000091CA 43F8 D000                  		lea	(v_player).w,a1
000091CE 3028 000C                  		move.w	obY(a0),d0
000091D2 9043                       		sub.w	d3,d0
000091D4 6000                       		bra.s	MvSonic2
000091D6                            ; End of function MvSonicOnPtfm
000091D6                            
000091D6                            ; ---------------------------------------------------------------------------
000091D6                            ; Subroutine to	change Sonic's position with a platform
000091D6                            ; ---------------------------------------------------------------------------
000091D6                            
000091D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091D6                            
000091D6                            
000091D6                            MvSonicOnPtfm2:
000091D6 43F8 D000                  		lea	(v_player).w,a1
000091DA 3028 000C                  		move.w	obY(a0),d0
000091DE 0440 0009                  		subi.w	#9,d0
000091E2                            
000091E2                            MvSonic2:
000091E2 4A38 F7C8                  		tst.b	(f_lockmulti).w
000091E6 6B00                       		bmi.s	locret_7B62
000091E8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000091EE 6400                       		bhs.s	locret_7B62
000091F0 4A78 FE08                  		tst.w	(v_debuguse).w
000091F4 6600                       		bne.s	locret_7B62
000091F6 7200                       		moveq	#0,d1
000091F8 1229 0016                  		move.b	obHeight(a1),d1
000091FC 9041                       		sub.w	d1,d0
000091FE 3340 000C                  		move.w	d0,obY(a1)
00009202 9468 0008                  		sub.w	obX(a0),d2
00009206 9569 0008                  		sub.w	d2,obX(a1)
0000920A                            
0000920A                            locret_7B62:
0000920A 4E75                       		rts	
0000920C                            ; End of function MvSonicOnPtfm2
0000920C                            
0000920C                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000920C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000920C                            
0000920C                            
0000920C                            Swing_Move:
0000920C 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
00009210 323C 0080                  		move.w	#$80,d1
00009214 0828 0000 0022             		btst	#0,obStatus(a0)
0000921A 6700                       		beq.s	loc_7B78
0000921C 4440                       		neg.w	d0
0000921E D041                       		add.w	d1,d0
00009220                            
00009220                            loc_7B78:
00009220 6000                       		bra.s	Swing_Move2
00009222                            ; End of function Swing_Move
00009222                            
00009222                            
00009222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009222                            
00009222                            
00009222                            Obj48_Move:
00009222 4A28 003D                  		tst.b	$3D(a0)
00009226 6600                       		bne.s	loc_7B9C
00009228 3028 003E                  		move.w	$3E(a0),d0
0000922C 5040                       		addq.w	#8,d0
0000922E 3140 003E                  		move.w	d0,$3E(a0)
00009232 D168 0026                  		add.w	d0,obAngle(a0)
00009236 0C40 0200                  		cmpi.w	#$200,d0
0000923A 6600                       		bne.s	loc_7BB6
0000923C 117C 0001 003D             		move.b	#1,$3D(a0)
00009242 6000                       		bra.s	loc_7BB6
00009244                            ; ===========================================================================
00009244                            
00009244                            loc_7B9C:
00009244 3028 003E                  		move.w	$3E(a0),d0
00009248 5140                       		subq.w	#8,d0
0000924A 3140 003E                  		move.w	d0,$3E(a0)
0000924E D168 0026                  		add.w	d0,obAngle(a0)
00009252 0C40 FE00                  		cmpi.w	#-$200,d0
00009256 6600                       		bne.s	loc_7BB6
00009258 117C 0000 003D             		move.b	#0,$3D(a0)
0000925E                            
0000925E                            loc_7BB6:
0000925E 1028 0026                  		move.b	obAngle(a0),d0
00009262                            ; End of function Obj48_Move
00009262                            
00009262                            
00009262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009262                            
00009262                            
00009262                            Swing_Move2:
00009262 6100 A8DE                  		bsr.w	CalcSine
00009266 3428 0038                  		move.w	$38(a0),d2
0000926A 3628 003A                  		move.w	$3A(a0),d3
0000926E 45E8 0028                  		lea	obSubtype(a0),a2
00009272 7C00                       		moveq	#0,d6
00009274 1C1A                       		move.b	(a2)+,d6
00009276                            
00009276                            loc_7BCE:
00009276 7800                       		moveq	#0,d4
00009278 181A                       		move.b	(a2)+,d4
0000927A ED4C                       		lsl.w	#6,d4
0000927C 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009282 2244                       		movea.l	d4,a1
00009284 7800                       		moveq	#0,d4
00009286 1829 003C                  		move.b	$3C(a1),d4
0000928A 2A04                       		move.l	d4,d5
0000928C C9C0                       		muls.w	d0,d4
0000928E E084                       		asr.l	#8,d4
00009290 CBC1                       		muls.w	d1,d5
00009292 E085                       		asr.l	#8,d5
00009294 D842                       		add.w	d2,d4
00009296 DA43                       		add.w	d3,d5
00009298 3344 000C                  		move.w	d4,obY(a1)
0000929C 3345 0008                  		move.w	d5,obX(a1)
000092A0 51CE FFD4                  		dbf	d6,loc_7BCE
000092A4 4E75                       		rts	
000092A6                            ; End of function Swing_Move2
000092A6                            
000092A6                            ; ===========================================================================
000092A6                            
000092A6                            Swing_ChkDel:
000092C4 4E75                       		rts	
000092C6                            ; ===========================================================================
000092C6                            
000092C6                            Swing_DelAll:
000092C6 7400                       		moveq	#0,d2
000092C8 45E8 0028                  		lea	obSubtype(a0),a2
000092CC 141A                       		move.b	(a2)+,d2
000092CE                            
000092CE                            Swing_DelLoop:
000092CE 7000                       		moveq	#0,d0
000092D0 101A                       		move.b	(a2)+,d0
000092D2 ED48                       		lsl.w	#6,d0
000092D4 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092DA 2240                       		movea.l	d0,a1
000092DC 6100 0000                  		bsr.w	DeleteChild
000092E0 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
000092E4 4E75                       		rts	
000092E6                            ; ===========================================================================
000092E6                            
000092E6                            Swing_Delete:	; Routine 6, 8
000092E6 6100 0000                  		bsr.w	DeleteObject
000092EA 4E75                       		rts	
000092EC                            ; ===========================================================================
000092EC                            
000092EC                            Swing_Display:	; Routine $A
000092EC 6000 0000                  		bra.w	DisplaySprite
000092EC 6000 0000                  		bra.w	DisplaySprite
000092F0                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            Map_Swing_GHZ_internal:
000092F0 0000                       		dc.w @block-Map_Swing_GHZ_internal
000092F2 0000                       		dc.w @chain-Map_Swing_GHZ_internal
000092F4 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
000092F6 02                         @block:		dc.b 2
000092F7 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000092FC F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009301 01                         @chain:		dc.b 1
00009302 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009307 01                         @anchor:	dc.b 1
00009308 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000930E 00                         		even
0000930E 00                         		even
0000930E                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000930E                            ; ---------------------------------------------------------------------------
0000930E                            ; Sprite mappings - SLZ	swinging platforms
0000930E                            ; ---------------------------------------------------------------------------
0000930E                            Map_Swing_SLZ_internal:
0000930E 0000                       		dc.w @block-Map_Swing_SLZ_internal
00009310 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009312 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009314 08                         @block:		dc.b 8
00009315 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000931A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000931F F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009324 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009329 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000932E 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009333 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009338 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000933D 01                         @chain:		dc.b 1
0000933E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00009343 01                         @anchor:	dc.b 1
00009344 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000934A 00                         		even
0000934A 00                         		even
0000934A                            		include	"_incObj\17 Spiked Pole Helix.asm"
0000934A                            ; ---------------------------------------------------------------------------
0000934A                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000934A                            ; ---------------------------------------------------------------------------
0000934A                            
0000934A                            Helix:
0000934A 7000                       		moveq	#0,d0
0000934C 1028 0024                  		move.b	obRoutine(a0),d0
00009350 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009354 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009358                            ; ===========================================================================
00009358 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
0000935A 0000                       		dc.w Hel_Action-Hel_Index
0000935C 0000                       		dc.w Hel_Action-Hel_Index
0000935E 0000                       		dc.w Hel_Delete-Hel_Index
00009360 0000                       		dc.w Hel_Display-Hel_Index
00009362                            
00009362 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
00009362                            
00009362                            ;		$29-38 are used for child object addresses
00009362                            ; ===========================================================================
00009362                            
00009362                            Hel_Main:	; Routine 0
00009362 5428 0024                  		addq.b	#2,obRoutine(a0)
00009366 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000936E 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009374 117C 0007 0022             		move.b	#7,obStatus(a0)
0000937A 117C 0004 0001             		move.b	#4,obRender(a0)
00009380 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009386 117C 0008 0014             		move.b	#8,obActWid(a0)
0000938C 3428 000C                  		move.w	obY(a0),d2
00009390 3628 0008                  		move.w	obX(a0),d3
00009394 1810                       		move.b	0(a0),d4
00009396 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000939A 7200                       		moveq	#0,d1
0000939C 1212                       		move.b	(a2),d1		; move helix length to d1
0000939E 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000093A2 3001                       		move.w	d1,d0
000093A4 E248                       		lsr.w	#1,d0
000093A6 E948                       		lsl.w	#4,d0
000093A8 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000093AA 5501                       		subq.b	#2,d1
000093AC 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000093AE 7C00                       		moveq	#0,d6
000093B0                            
000093B0                            Hel_Build:
000093B0 6100 0000                  		bsr.w	FindFreeObj
000093B4 6600                       		bne.s	Hel_Action
000093B6 5228 0028                  		addq.b	#1,obSubtype(a0)
000093BA 3A09                       		move.w	a1,d5
000093BC 0445 D000                  		subi.w	#$D000,d5
000093C0 EC4D                       		lsr.w	#6,d5
000093C2 0245 007F                  		andi.w	#$7F,d5
000093C6 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000093C8 137C 0008 0024             		move.b	#8,obRoutine(a1)
000093CE 1284                       		move.b	d4,0(a1)
000093D0 3342 000C                  		move.w	d2,ObY(a1)
000093D4 3343 0008                  		move.w	d3,obX(a1)
000093D8 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000093DE 337C 4398 0002             		move.w	#$4398,obGfx(a1)
000093E4 137C 0004 0001             		move.b	#4,obRender(a1)
000093EA 337C 0180 0018             		move.w	#$180,obPriority(a1)
000093F0 137C 0008 0014             		move.b	#8,obActWid(a1)
000093F6 1346 003E                  		move.b	d6,hel_frame(a1)
000093FA 5206                       		addq.b	#1,d6
000093FC 0206 0007                  		andi.b	#7,d6
00009400 0643 0010                  		addi.w	#$10,d3
00009404 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009408 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000940A                            
0000940A 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
0000940E 5206                       		addq.b	#1,d6
00009410 0206 0007                  		andi.b	#7,d6
00009414 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009418 5228 0028                  		addq.b	#1,obSubtype(a0)
0000941C                            
0000941C                            	Hel_NotCentre:
0000941C 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00009420                            
00009420                            Hel_Action:	; Routine 2, 4
00009420 6100 0000                  		bsr.w	Hel_RotateSpikes
00009424 6100 0000                  		bsr.w	DisplaySprite
00009428 6000 0000                  		bra.w	Hel_ChkDel
0000942C                            
0000942C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000942C                            
0000942C                            
0000942C                            Hel_RotateSpikes:
0000942C 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00009430 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009436 D028 003E                  		add.b	hel_frame(a0),d0
0000943A 0200 0007                  		andi.b	#7,d0
0000943E 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
00009442 6600                       		bne.s	locret_7DA6
00009444 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
0000944A                            
0000944A                            locret_7DA6:
0000944A 4E75                       		rts	
0000944C                            ; End of function Hel_RotateSpikes
0000944C                            
0000944C                            ; ===========================================================================
0000944C                            
0000944C                            Hel_ChkDel:
0000946A 4E75                       		rts	
0000946C                            ; ===========================================================================
0000946C                            
0000946C                            Hel_DelAll:
0000946C 7400                       		moveq	#0,d2
0000946E 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009472 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009474 5502                       		subq.b	#2,d2
00009476 6500                       		bcs.s	Hel_Delete
00009478                            
00009478                            	Hel_DelLoop:
00009478 7000                       		moveq	#0,d0
0000947A 101A                       		move.b	(a2)+,d0
0000947C ED48                       		lsl.w	#6,d0
0000947E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009484 2240                       		movea.l	d0,a1		; get child address
00009486 6100 0000                  		bsr.w	DeleteChild	; delete object
0000948A 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
0000948E                            
0000948E                            Hel_Delete:	; Routine 6
0000948E 6100 0000                  		bsr.w	DeleteObject
00009492 4E75                       		rts	
00009494                            ; ===========================================================================
00009494                            
00009494                            Hel_Display:	; Routine 8
00009494 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009498 6000 0000                  		bra.w	DisplaySprite
00009498 6000 0000                  		bra.w	DisplaySprite
0000949C                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
0000949C                            ; ---------------------------------------------------------------------------
0000949C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000949C                            ; ---------------------------------------------------------------------------
0000949C                            Map_Hel_internal:
0000949C 0000                       		dc.w byte_7E08-Map_Hel_internal
0000949E 0000                       		dc.w byte_7E0E-Map_Hel_internal
000094A0 0000                       		dc.w byte_7E14-Map_Hel_internal
000094A2 0000                       		dc.w byte_7E1A-Map_Hel_internal
000094A4 0000                       		dc.w byte_7E20-Map_Hel_internal
000094A6 0000                       		dc.w byte_7E26-Map_Hel_internal
000094A8 0000                       		dc.w byte_7E2E-Map_Hel_internal
000094AA 0000                       		dc.w byte_7E2C-Map_Hel_internal
000094AC 01                         byte_7E08:	dc.b 1
000094AD F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000094B2 01                         byte_7E0E:	dc.b 1
000094B3 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000094B8 01                         byte_7E14:	dc.b 1
000094B9 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000094BE 01                         byte_7E1A:	dc.b 1
000094BF FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000094C4 01                         byte_7E20:	dc.b 1
000094C5 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000094CA 01                         byte_7E26:	dc.b 1
000094CB 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000094D0 01                         byte_7E2C:	dc.b 1
000094D1 F4                         		dc.b $F4
000094D2                            byte_7E2E:	; reads the 0 below	; not visible
000094D2 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
000094D6                            		even
000094D6                            		even
000094D6                            		include	"_incObj\18 Platforms.asm"
000094D6                            ; ---------------------------------------------------------------------------
000094D6                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000094D6                            ; ---------------------------------------------------------------------------
000094D6                            
000094D6                            BasicPlatform:
000094D6 7000                       		moveq	#0,d0
000094D8 1028 0024                  		move.b	obRoutine(a0),d0
000094DC 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
000094E0 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
000094E4                            ; ===========================================================================
000094E4 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
000094E6 0000                       		dc.w Plat_Solid-Plat_Index
000094E8 0000                       		dc.w Plat_Action2-Plat_Index
000094EA 0000                       		dc.w Plat_Delete-Plat_Index
000094EC 0000                       		dc.w Plat_Action-Plat_Index
000094EE                            ; ===========================================================================
000094EE                            
000094EE                            Plat_Main:	; Routine 0
000094EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000094F2 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000094F8 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009500 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009506 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
0000950C 6600                       		bne.s	@notSYZ
0000950E                            
0000950E 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009516 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000951C                            
0000951C                            	@notSYZ:
0000951C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009522 6600                       		bne.s	@notSLZ
00009524 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
0000952C 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009532 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009538 117C 0003 0028             		move.b	#3,obSubtype(a0)
0000953E                            
0000953E                            	@notSLZ:
0000953E 117C 0004 0001             		move.b	#4,obRender(a0)
00009544 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000954A 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009550 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009556 3168 0008 0032             		move.w	obX(a0),$32(a0)
0000955C 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009562 7200                       		moveq	#0,d1
00009564 1028 0028                  		move.b	obSubtype(a0),d0
00009568 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000956C 6600                       		bne.s	@setframe	; if not, branch
0000956E 5201                       		addq.b	#1,d1		; use frame #1
00009570 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009576                            
00009576                            	@setframe:
00009576 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
0000957A                            
0000957A                            Plat_Solid:	; Routine 2
0000957A 4A28 0038                  		tst.b	$38(a0)
0000957E 6700                       		beq.s	loc_7EE0
00009580 5928 0038                  		subq.b	#4,$38(a0)
00009584                            
00009584                            	loc_7EE0:
00009584 7200                       		moveq	#0,d1
00009586 1228 0014                  		move.b	obActWid(a0),d1
0000958A 6100 F56C                  		bsr.w	PlatformObject
0000958E                            
0000958E                            Plat_Action:	; Routine 8
0000958E 6100 0000                  		bsr.w	Plat_Move
00009592 6100 0000                  		bsr.w	Plat_Nudge
00009596 6100 0000                  		bsr.w	DisplaySprite
0000959A 6000 0000                  		bra.w	Plat_ChkDel
0000959E                            ; ===========================================================================
0000959E                            
0000959E                            Plat_Action2:	; Routine 4
0000959E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000095A4 6700                       		beq.s	loc_7F06
000095A6 5828 0038                  		addq.b	#4,$38(a0)
000095AA                            
000095AA                            	loc_7F06:
000095AA 7200                       		moveq	#0,d1
000095AC 1228 0014                  		move.b	obActWid(a0),d1
000095B0 6100 F6BA                  		bsr.w	ExitPlatform
000095B4 3F28 0008                  		move.w	obX(a0),-(sp)
000095B8 6100 0000                  		bsr.w	Plat_Move
000095BC 6100 0000                  		bsr.w	Plat_Nudge
000095C0 341F                       		move.w	(sp)+,d2
000095C2 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000095C6 6100 0000                  		bsr.w	DisplaySprite
000095CA 6000 0000                  		bra.w	Plat_ChkDel
000095CE                            
000095CE 4E75                       		rts
000095D0                            
000095D0                            ; ---------------------------------------------------------------------------
000095D0                            ; Subroutine to	move platform slightly when you	stand on it
000095D0                            ; ---------------------------------------------------------------------------
000095D0                            
000095D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095D0                            
000095D0                            
000095D0                            Plat_Nudge:
000095D0 1028 0038                  		move.b	$38(a0),d0
000095D4 6100 A56C                  		bsr.w	CalcSine
000095D8 323C 0400                  		move.w	#$400,d1
000095DC C1C1                       		muls.w	d1,d0
000095DE 4840                       		swap	d0
000095E0 D068 002C                  		add.w	$2C(a0),d0
000095E4 3140 000C                  		move.w	d0,obY(a0)
000095E8 4E75                       		rts	
000095EA                            ; End of function Plat_Nudge
000095EA                            
000095EA                            ; ---------------------------------------------------------------------------
000095EA                            ; Subroutine to	move platforms
000095EA                            ; ---------------------------------------------------------------------------
000095EA                            
000095EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095EA                            
000095EA                            
000095EA                            Plat_Move:
000095EA 7000                       		moveq	#0,d0
000095EC 1028 0028                  		move.b	obSubtype(a0),d0
000095F0 0240 000F                  		andi.w	#$F,d0
000095F4 D040                       		add.w	d0,d0
000095F6 323B 0000                  		move.w	@index(pc,d0.w),d1
000095FA 4EFB 1000                  		jmp	@index(pc,d1.w)
000095FE                            ; End of function Plat_Move
000095FE                            
000095FE                            ; ===========================================================================
000095FE 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009602 0000 0000                  		dc.w @type02-@index, @type03-@index
00009606 0000 0000                  		dc.w @type04-@index, @type05-@index
0000960A 0000 0000                  		dc.w @type06-@index, @type07-@index
0000960E 0000 0000                  		dc.w @type08-@index, @type00-@index
00009612 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009616 0000                       		dc.w @type0C-@index
00009618                            ; ===========================================================================
00009618                            
00009618                            @type00:
00009618 4E75                       		rts			; platform 00 doesn't move
0000961A                            ; ===========================================================================
0000961A                            
0000961A                            @type05:
0000961A 3028 0032                  		move.w	$32(a0),d0
0000961E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009622 4401                       		neg.b	d1		; reverse platform-motion
00009624 0601 0040                  		addi.b	#$40,d1
00009628 6000                       		bra.s	@type01_move
0000962A                            ; ===========================================================================
0000962A                            
0000962A                            @type01:
0000962A 3028 0032                  		move.w	$32(a0),d0
0000962E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009632 0401 0040                  		subi.b	#$40,d1
00009636                            
00009636                            	@type01_move:
00009636 4881                       		ext.w	d1
00009638 D041                       		add.w	d1,d0
0000963A 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
0000963E 6000 0000                  		bra.w	@chgmotion
00009642                            ; ===========================================================================
00009642                            
00009642                            @type0C:
00009642 3028 0034                  		move.w	$34(a0),d0
00009646 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000964A 4401                       		neg.b	d1		; reverse platform-motion
0000964C 0601 0030                  		addi.b	#$30,d1
00009650 6000                       		bra.s	@type02_move
00009652                            ; ===========================================================================
00009652                            
00009652                            @type0B:
00009652 3028 0034                  		move.w	$34(a0),d0
00009656 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000965A 0401 0030                  		subi.b	#$30,d1
0000965E 6000                       		bra.s	@type02_move
00009660                            ; ===========================================================================
00009660                            
00009660                            @type06:
00009660 3028 0034                  		move.w	$34(a0),d0
00009664 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009668 4401                       		neg.b	d1		; reverse platform-motion
0000966A 0601 0040                  		addi.b	#$40,d1
0000966E 6000                       		bra.s	@type02_move
00009670                            ; ===========================================================================
00009670                            
00009670                            @type02:
00009670 3028 0034                  		move.w	$34(a0),d0
00009674 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009678 0401 0040                  		subi.b	#$40,d1
0000967C                            
0000967C                            	@type02_move:
0000967C 4881                       		ext.w	d1
0000967E D041                       		add.w	d1,d0
00009680 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009684 6000 0000                  		bra.w	@chgmotion
00009688                            ; ===========================================================================
00009688                            
00009688                            @type03:
00009688 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000968C 6600                       		bne.s	@type03_wait	; if yes, branch
0000968E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009694 6700                       		beq.s	@type03_nomove	; if not, branch
00009696 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000969C                            
0000969C                            	@type03_nomove:
0000969C 4E75                       		rts	
0000969E                            
0000969E                            	@type03_wait:
0000969E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000096A2 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000096A4 317C 0020 003A             		move.w	#32,$3A(a0)
000096AA 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
000096AE 4E75                       		rts	
000096B0                            ; ===========================================================================
000096B0                            
000096B0                            @type04:
000096B0 4A68 003A                  		tst.w	$3A(a0)
000096B4 6700                       		beq.s	@loc_8048
000096B6 5368 003A                  		subq.w	#1,$3A(a0)
000096BA 6600                       		bne.s	@loc_8048
000096BC 0828 0003 0022             		btst	#3,obStatus(a0)
000096C2 6700                       		beq.s	@loc_8042
000096C4 08E9 0001 0022             		bset	#1,obStatus(a1)
000096CA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000096D0 137C 0002 0024             		move.b	#2,obRoutine(a1)
000096D6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000096DC 4228 0025                  		clr.b	$25(a0)
000096E0 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
000096E6                            
000096E6                            	@loc_8042:
000096E6 117C 0008 0024             		move.b	#8,obRoutine(a0)
000096EC                            
000096EC                            	@loc_8048:
000096EC 2628 002C                  		move.l	$2C(a0),d3
000096F0 3028 0012                  		move.w	obVelY(a0),d0
000096F4 48C0                       		ext.l	d0
000096F6 E180                       		asl.l	#8,d0
000096F8 D680                       		add.l	d0,d3
000096FA 2143 002C                  		move.l	d3,$2C(a0)
000096FE 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009704 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009708 0640 00E0                  		addi.w	#$E0,d0
0000970C B068 002C                  		cmp.w	$2C(a0),d0
00009710 6400                       		bcc.s	@locret_8074
00009712 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009718                            
00009718                            	@locret_8074:
00009718 4E75                       		rts	
0000971A                            ; ===========================================================================
0000971A                            
0000971A                            @type07:
0000971A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000971E 6600                       		bne.s	@type07_wait	; if yes, branch
00009720 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009724 7000                       		moveq	#0,d0
00009726 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
0000972A E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000972C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009730 6700                       		beq.s	@type07_nomove	; if not, branch
00009732 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009738                            
00009738                            	@type07_nomove:
00009738 4E75                       		rts	
0000973A                            
0000973A                            	@type07_wait:
0000973A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000973E 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009740 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009744 4E75                       		rts	
00009746                            ; ===========================================================================
00009746                            
00009746                            @type08:
00009746 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000974A 3028 0034                  		move.w	$34(a0),d0
0000974E 0440 0200                  		subi.w	#$200,d0
00009752 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009756 6600                       		bne.s	@type08_nostop	; if not, branch
00009758 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
0000975C                            
0000975C                            	@type08_nostop:
0000975C 4E75                       		rts	
0000975E                            ; ===========================================================================
0000975E                            
0000975E                            @type0A:
0000975E 3028 0034                  		move.w	$34(a0),d0
00009762 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009766 0401 0040                  		subi.b	#$40,d1
0000976A 4881                       		ext.w	d1
0000976C E241                       		asr.w	#1,d1
0000976E D041                       		add.w	d1,d0
00009770 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009774                            
00009774                            @chgmotion:
00009774 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
0000977A 4E75                       		rts	
0000977C                            ; ===========================================================================
0000977C                            
0000977C                            Plat_ChkDel:
00009798 4E75                       		rts	
0000979A                            ; ===========================================================================
0000979A                            
0000979A                            Plat_Delete:	; Routine 6
0000979A 6000 0000                  		bra.w	DeleteObject
0000979A 6000 0000                  		bra.w	DeleteObject
0000979E                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
0000979E                            ; ---------------------------------------------------------------------------
0000979E                            ; Sprite mappings - unused
0000979E                            ; ---------------------------------------------------------------------------
0000979E                            Map_Plat_Unused_internal:
0000979E 0000                       		dc.w @small-Map_Plat_Unused_internal
000097A0 0000                       		dc.w @large-Map_Plat_Unused_internal
000097A2 02                         @small:		dc.b 2
000097A3 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000097A8 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000097AD 0A                         @large:		dc.b $A
000097AE F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000097B3 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000097B8 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000097BD 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000097C2 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000097C7 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000097CC 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000097D1 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000097D6 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000097DB 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000097E0                            		even
000097E0                            		even
000097E0                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
000097E0                            ; ---------------------------------------------------------------------------
000097E0                            ; Sprite mappings - GHZ	platforms
000097E0                            ; ---------------------------------------------------------------------------
000097E0                            Map_Plat_GHZ_internal:
000097E0 0000                       		dc.w @small-Map_Plat_GHZ_internal
000097E2 0000                       		dc.w @large-Map_Plat_GHZ_internal
000097E4 04                         @small:		dc.b 4
000097E5 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000097EA F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000097EF F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000097F4 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000097F9 0A                         @large:		dc.b $A
000097FA F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000097FF 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009804 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009809 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000980E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009813 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009818 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000981D 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009822 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009827 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000982C                            		even
0000982C                            		even
0000982C                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
0000982C                            ; ---------------------------------------------------------------------------
0000982C                            ; Sprite mappings - SYZ	platforms
0000982C                            ; ---------------------------------------------------------------------------
0000982C                            Map_Plat_SYZ_internal:
0000982C 0000                       		dc.w @platform-Map_Plat_SYZ_internal
0000982E 03                         @platform:	dc.b 3
0000982F F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009834 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009839 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000983E                            		even
0000983E                            		even
0000983E                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
0000983E                            ; ---------------------------------------------------------------------------
0000983E                            ; Sprite mappings - SLZ	platforms
0000983E                            ; ---------------------------------------------------------------------------
0000983E                            Map_Plat_SLZ_internal:
0000983E 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009840 02                         @platform:	dc.b 2
00009841 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009846 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000984C 00                         		even
0000984C 00                         		even
0000984C                            Map_GBall:	include	"_maps\GHZ Ball.asm"
0000984C                            ; ---------------------------------------------------------------------------
0000984C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000984C                            ; ---------------------------------------------------------------------------
0000984C                            Map_GBall_internal:
0000984C 0000                       		dc.w @shiny-Map_GBall_internal
0000984E 0000                       		dc.w @check1-Map_GBall_internal
00009850 0000                       		dc.w @check2-Map_GBall_internal
00009852 0000                       		dc.w @check3-Map_GBall_internal
00009854 06                         @shiny:		dc.b 6
00009855 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000985A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000985F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009864 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009869 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000986E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009873 04                         @check1:	dc.b 4
00009874 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009879 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000987E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009883 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009888 04                         @check2:	dc.b 4
00009889 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000988E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009893 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009898 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000989D 04                         @check3:	dc.b 4
0000989E E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000098A3 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000098A8 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000098AD 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000098B2                            		even
000098B2                            		even
000098B2                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
000098B2                            ; ---------------------------------------------------------------------------
000098B2                            ; Object 1A - GHZ collapsing ledge
000098B2                            ; ---------------------------------------------------------------------------
000098B2                            
000098B2                            CollapseLedge:
000098B2 7000                       		moveq	#0,d0
000098B4 1028 0024                  		move.b	obRoutine(a0),d0
000098B8 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
000098BC 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
000098C0                            ; ===========================================================================
000098C0 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
000098C4 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
000098C8 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
000098CC                            
000098CC =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
000098CC =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
000098CC                            ; ===========================================================================
000098CC                            
000098CC                            Ledge_Main:	; Routine 0
000098CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000098D0 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
000098D8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000098DE 0028 0004 0001             		ori.b	#4,obRender(a0)
000098E4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000098EA 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
000098F0 117C 0064 0014             		move.b	#$64,obActWid(a0)
000098F6 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000098FC 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009902 08E8 0004 0001             		bset	#4,obRender(a0)
00009908                            
00009908                            Ledge_Touch:	; Routine 2
00009908 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
0000990C 6700                       		beq.s	@slope		; if not, branch
0000990E 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009912 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009916 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
0000991A                            
0000991A                            	@slope:
0000991A 323C 0030                  		move.w	#$30,d1
0000991E 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009924 6100 F2A6                  		bsr.w	SlopeObject
00009928 6000 0000                  		bra.w	RememberState
0000992C                            ; ===========================================================================
0000992C                            
0000992C                            Ledge_Collapse:	; Routine 4
0000992C 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009930 6700 0000                  		beq.w	loc_847A
00009934 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
0000993A 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
0000993E                            
0000993E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000993E                            
0000993E                            
0000993E                            Ledge_WalkOff:	; Routine $A
0000993E 323C 0030                  		move.w	#$30,d1
00009942 6100 F328                  		bsr.w	ExitPlatform
00009946 323C 0030                  		move.w	#$30,d1
0000994A 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009950 3428 0008                  		move.w	obX(a0),d2
00009954 6100 0000                  		bsr.w	SlopeObject2
00009958 6000 0000                  		bra.w	RememberState
0000995C                            ; End of function Ledge_WalkOff
0000995C                            
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            Ledge_Display:	; Routine 6
0000995C 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009960 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009962 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009966 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000996A 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
0000996E 6000 0000                  		bra.w	DisplaySprite
00009972                            ; ===========================================================================
00009972                            
00009972                            loc_82D0:
00009972 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009976 6100 FFC6                  		bsr.w	Ledge_WalkOff
0000997A 43F8 D000                  		lea	(v_player).w,a1
0000997E 0829 0003 0022             		btst	#3,obStatus(a1)
00009984 6700                       		beq.s	loc_82FC
00009986 4A28 0038                  		tst.b	ledge_timedelay(a0)
0000998A 6600                       		bne.s	locret_8308
0000998C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009992 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009998 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000999E                            
0000999E                            loc_82FC:
0000999E 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
000099A4 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
000099AA                            
000099AA                            locret_8308:
000099AA 4E75                       		rts	
000099AC                            ; ===========================================================================
000099AC                            
000099AC                            Ledge_TimeZero:
000099AC 6100 0000                  		bsr.w	ObjectFall
000099B0 6100 0000                  		bsr.w	DisplaySprite
000099B4 4A28 0001                  		tst.b	obRender(a0)
000099B8 6A00                       		bpl.s	Ledge_Delete
000099BA 4E75                       		rts	
000099BC                            ; ===========================================================================
000099BC                            
000099BC                            Ledge_Delete:	; Routine 8
000099BC 6100 0000                  		bsr.w	DeleteObject
000099C0 4E75                       		rts	
000099C0 4E75                       		rts	
000099C2                            		include	"_incObj\53 Collapsing Floors.asm"
000099C2                            ; ---------------------------------------------------------------------------
000099C2                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000099C2                            ; ---------------------------------------------------------------------------
000099C2                            
000099C2                            CollapseFloor:
000099C2 7000                       		moveq	#0,d0
000099C4 1028 0024                  		move.b	obRoutine(a0),d0
000099C8 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
000099CC 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
000099D0                            ; ===========================================================================
000099D0 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
000099D4 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
000099D8 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
000099DC                            
000099DC =00000038                  cflo_timedelay:		equ $38
000099DC =0000003A                  cflo_collapse_flag:	equ $3A
000099DC                            ; ===========================================================================
000099DC                            
000099DC                            CFlo_Main:	; Routine 0
000099DC 5428 0024                  		addq.b	#2,obRoutine(a0)
000099E0 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
000099E8 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000099EE 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000099F4 6600                       		bne.s	@notSLZ
000099F6                            
000099F6 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
000099FC 5428 001A                  		addq.b	#2,obFrame(a0)
00009A00                            
00009A00                            	@notSLZ:
00009A00 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009A06 6600                       		bne.s	@notSBZ
00009A08 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009A0E                            
00009A0E                            	@notSBZ:
00009A0E 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A14 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A1A 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009A20 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009A26                            
00009A26                            CFlo_Touch:	; Routine 2
00009A26 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009A2A 6700                       		beq.s	@solid		; if not, branch
00009A2C 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009A30 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009A34 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009A38                            
00009A38                            	@solid:
00009A38 323C 0020                  		move.w	#$20,d1
00009A3C 6100 F0BA                  		bsr.w	PlatformObject
00009A40 4A28 0028                  		tst.b	obSubtype(a0)
00009A44 6A00                       		bpl.s	@remstate
00009A46 0829 0003 0022             		btst	#3,obStatus(a1)
00009A4C 6700                       		beq.s	@remstate
00009A4E 08A8 0000 0001             		bclr	#0,obRender(a0)
00009A54 3029 0008                  		move.w	obX(a1),d0
00009A58 9068 0008                  		sub.w	obX(a0),d0
00009A5C 6400                       		bcc.s	@remstate
00009A5E 08E8 0000 0001             		bset	#0,obRender(a0)
00009A64                            
00009A64                            	@remstate:
00009A64 6000 0000                  		bra.w	RememberState
00009A68                            ; ===========================================================================
00009A68                            
00009A68                            CFlo_Collapse:	; Routine 4
00009A68 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009A6C 6700 0000                  		beq.w	loc_8458
00009A70 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009A76 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009A7A                            
00009A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A7A                            
00009A7A                            
00009A7A                            CFlo_WalkOff:	; Routine $A
00009A7A 323C 0020                  		move.w	#$20,d1
00009A7E 6100 F1EC                  		bsr.w	ExitPlatform
00009A82 3428 0008                  		move.w	obX(a0),d2
00009A86 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009A8A 6000 0000                  		bra.w	RememberState
00009A8E                            ; End of function CFlo_WalkOff
00009A8E                            
00009A8E                            ; ===========================================================================
00009A8E                            
00009A8E                            CFlo_Display:	; Routine 6
00009A8E 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009A92 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009A94 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009A98 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009A9C 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009AA0 6000 0000                  		bra.w	DisplaySprite
00009AA4                            ; ===========================================================================
00009AA4                            
00009AA4                            loc_8402:
00009AA4 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009AA8 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009AAC 43F8 D000                  		lea	(v_player).w,a1
00009AB0 0829 0003 0022             		btst	#3,obStatus(a1)
00009AB6 6700                       		beq.s	loc_842E
00009AB8 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009ABC 6600                       		bne.s	locret_843A
00009ABE 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009AC4 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009ACA 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009AD0                            
00009AD0                            loc_842E:
00009AD0 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009AD6 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009ADC                            
00009ADC                            locret_843A:
00009ADC 4E75                       		rts	
00009ADE                            ; ===========================================================================
00009ADE                            
00009ADE                            CFlo_TimeZero:
00009ADE 6100 0000                  		bsr.w	ObjectFall
00009AE2 6100 0000                  		bsr.w	DisplaySprite
00009AE6 4A28 0001                  		tst.b	obRender(a0)
00009AEA 6A00                       		bpl.s	CFlo_Delete
00009AEC 4E75                       		rts	
00009AEE                            ; ===========================================================================
00009AEE                            
00009AEE                            CFlo_Delete:	; Routine 8
00009AEE 6100 0000                  		bsr.w	DeleteObject
00009AF2 4E75                       		rts	
00009AF4                            ; ===========================================================================
00009AF4                            
00009AF4                            CFlo_Fragment:
00009AF4 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009AFA                            
00009AFA                            loc_8458:
00009AFA 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009B00 0828 0000 0028             		btst	#0,obSubtype(a0)
00009B06 6700                       		beq.s	loc_846C
00009B08 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009B0E                            
00009B0E                            loc_846C:
00009B0E 7207                       		moveq	#7,d1
00009B10 5228 001A                  		addq.b	#1,obFrame(a0)
00009B14 6000                       		bra.s	loc_8486
00009B14 6000                       		bra.s	loc_8486
00009B16                            
00009B16                            ; ===========================================================================
00009B16                            
00009B16                            Ledge_Fragment:
00009B16 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009B1C                            
00009B1C                            loc_847A:
00009B1C 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009B22 7218                       		moveq	#$18,d1
00009B24 5428 001A                  		addq.b	#2,obFrame(a0)
00009B28                            
00009B28                            loc_8486:
00009B28 7000                       		moveq	#0,d0
00009B2A 1028 001A                  		move.b	obFrame(a0),d0
00009B2E D040                       		add.w	d0,d0
00009B30 2668 0004                  		movea.l	obMap(a0),a3
00009B34 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009B38 524B                       		addq.w	#1,a3
00009B3A 08E8 0005 0001             		bset	#5,obRender(a0)
00009B40 1810                       		move.b	0(a0),d4
00009B42 1A28 0001                  		move.b	obRender(a0),d5
00009B46 2248                       		movea.l	a0,a1
00009B48 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009B4E 1284                       		move.b	d4,0(a1)
00009B50 234B 0004                  		move.l	a3,obMap(a1)
00009B54 1345 0001                  		move.b	d5,obRender(a1)
00009B58 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009B5E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009B64 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009B6A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009B70 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009B76 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009B7A 5341                       		subq.w	#1,d1
00009B7C 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009B80 303C 005F                  		move.w	#$5F,d0
00009B84                            ; ===========================================================================
00009B84                            
00009B84                            loc_84AA:
00009B84 4A11                       		tst.b	(a1)
00009B86 6700                       		beq.s	@cont		
00009B88 43E9 0040                  		lea		$40(a1),a1
00009B8C 51C8 FFF6                  		dbf		d0,loc_84AA	
00009B90 6600                       		bne.s	loc_84F2	
00009B92                            	@cont:
00009B92 5A4B                       		addq.w	#5,a3
00009B94                            
00009B94                            loc_84B2:
00009B94 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009B9A 1284                       		move.b	d4,0(a1)
00009B9C 234B 0004                  		move.l	a3,obMap(a1)
00009BA0 1345 0001                  		move.b	d5,obRender(a1)
00009BA4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009BAA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009BB0 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009BB6 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009BBC 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009BC2 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009BC6 6100 0000                  		bsr.w	DisplaySprite1
00009BCA                            
00009BCA                            loc_84EE:
00009BCA 51C9 FFB8                  		dbf	d1,loc_84AA
00009BCE                            
00009BCE                            loc_84F2:
00009BCE 6100 0000                  		bsr.w	DisplaySprite
00009BDC                            ; ===========================================================================
00009BDC                            ; ---------------------------------------------------------------------------
00009BDC                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009BDC                            ; ---------------------------------------------------------------------------
00009BDC 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009BEC 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009BF6 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009BFE 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009C06                            
00009C06                            ; ---------------------------------------------------------------------------
00009C06                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009C06                            ; ---------------------------------------------------------------------------
00009C06                            
00009C06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C06                            
00009C06                            
00009C06                            SlopeObject2:
00009C06 43F8 D000                  		lea	(v_player).w,a1
00009C0A 0829 0003 0022             		btst	#3,obStatus(a1)
00009C10 6700                       		beq.s	locret_856E
00009C12 3029 0008                  		move.w	obX(a1),d0
00009C16 9068 0008                  		sub.w	obX(a0),d0
00009C1A D041                       		add.w	d1,d0
00009C1C E248                       		lsr.w	#1,d0
00009C1E 0828 0000 0001             		btst	#0,obRender(a0)
00009C24 6700                       		beq.s	loc_854E
00009C26 4640                       		not.w	d0
00009C28 D041                       		add.w	d1,d0
00009C2A                            
00009C2A                            loc_854E:
00009C2A 7200                       		moveq	#0,d1
00009C2C 1232 0000                  		move.b	(a2,d0.w),d1
00009C30 3028 000C                  		move.w	obY(a0),d0
00009C34 9041                       		sub.w	d1,d0
00009C36 7200                       		moveq	#0,d1
00009C38 1229 0016                  		move.b	obHeight(a1),d1
00009C3C 9041                       		sub.w	d1,d0
00009C3E 3340 000C                  		move.w	d0,obY(a1)
00009C42 9468 0008                  		sub.w	obX(a0),d2
00009C46 9569 0008                  		sub.w	d2,obX(a1)
00009C4A                            
00009C4A                            locret_856E:
00009C4A 4E75                       		rts	
00009C4C                            ; End of function SlopeObject2
00009C4C                            
00009C4C                            ; ===========================================================================
00009C4C                            ; ---------------------------------------------------------------------------
00009C4C                            ; Collision data for GHZ collapsing ledge
00009C4C                            ; ---------------------------------------------------------------------------
00009C4C                            Ledge_SlopeData:
00009C4C                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009C7C                            		even
00009C7C                            
00009C7C                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009C7C                            ; ---------------------------------------------------------------------------
00009C7C                            ; Sprite mappings - GHZ	collapsing ledge
00009C7C                            ; ---------------------------------------------------------------------------
00009C7C                            Map_Ledge_internal:
00009C7C 0000                       		dc.w @left-Map_Ledge_internal
00009C7E 0000                       		dc.w @right-Map_Ledge_internal
00009C80 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009C82 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009C84 10                         @left:		dc.b $10
00009C85 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009C8A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009C8F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009C94 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009C99 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009C9E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009CA3 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009CA8 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009CAD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009CB2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009CB7 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009CBC 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009CC1 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009CC6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009CCB 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009CD0 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009CD5 10                         @right:		dc.b $10
00009CD6 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009CDB D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009CE0 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009CE5 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009CEA D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009CEF D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009CF4 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009CF9 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009CFE F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D03 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009D08 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009D0D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D12 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009D17 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009D1C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009D21 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009D26 19                         @leftsmash:	dc.b $19
00009D27 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009D2C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009D31 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009D36 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009D3B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009D40 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009D45 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009D4A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009D4F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009D54 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009D59 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009D5E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009D63 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009D68 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009D6D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D72 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009D77 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009D7C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009D81 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D86 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009D8B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009D90 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009D95 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009D9A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009D9F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009DA4 19                         @rightsmash:	dc.b $19
00009DA5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009DAA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009DAF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009DB4 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009DB9 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009DBE E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009DC3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009DC8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009DCD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DD2 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009DD7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009DDC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009DE1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009DE6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009DEB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DF0 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009DF5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009DFA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009DFF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E04 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009E09 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009E0E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009E13 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009E18 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009E1D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E22                            		even
00009E22                            		even
00009E22                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009E22                            ; --------------------------------------------------------------------------------
00009E22                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009E22                            ; --------------------------------------------------------------------------------
00009E22                            
00009E22                            SME_WNa9T:	
00009E22 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009E26 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009E2A 08                         SME_WNa9T_8:	dc.b 8	
00009E2B F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E30 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009E35 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009E3A 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009E3F F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009E44 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009E49 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009E4E 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009E53 08                         SME_WNa9T_31:	dc.b 8	
00009E54 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E59 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009E5E F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009E63 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009E68 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009E6D 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009E72 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009E77 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009E7C 04                         SME_WNa9T_5A:	dc.b 4	
00009E7D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00009E82 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
00009E87 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00009E8C 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
00009E91 08                         SME_WNa9T_6F:	dc.b 8	
00009E92 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E97 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00009E9C F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009EA1 F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00009EA6 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
00009EAB 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
00009EB0 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
00009EB5 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
00009EBA                            		even
00009EBA                            		even
00009EBA                            
00009EBA                            		include	"_incObj\1C Scenery.asm"
00009EBA                            ; ---------------------------------------------------------------------------
00009EBA                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009EBA                            ; ---------------------------------------------------------------------------
00009EBA                            
00009EBA                            Scenery:
00009EBA 7000                       		moveq	#0,d0
00009EBC 1028 0024                  		move.b	obRoutine(a0),d0
00009EC0 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00009EC4 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00009EC8                            ; ===========================================================================
00009EC8 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00009ECA 0000                       		dc.w Scen_ChkDel-Scen_Index
00009ECC                            ; ===========================================================================
00009ECC                            
00009ECC                            Scen_Main:	; Routine 0
00009ECC 5428 0024                  		addq.b	#2,obRoutine(a0)
00009ED0 7000                       		moveq	#0,d0
00009ED2 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
00009ED6 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009EDA 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
00009EDE 2159 0004                  		move.l	(a1)+,obMap(a0)
00009EE2 3159 0002                  		move.w	(a1)+,obGfx(a0)
00009EE6 0028 0004 0001             		ori.b	#4,obRender(a0)
00009EEC 1159 001A                  		move.b	(a1)+,obFrame(a0)
00009EF0 1159 0014                  		move.b	(a1)+,obActWid(a0)
00009EF4 1159 0018                  		move.b	(a1)+,obPriority(a0)
00009EF8 3028 0018                  		move.w obPriority(a0),d0 
00009EFC E248                       		lsr.w #1,d0 
00009EFE 0240 0380                  		andi.w #$380,d0 
00009F02 3140 0018                  		move.w d0,obPriority(a0)		
00009F06 1159 0020                  		move.b	(a1)+,obColType(a0)
00009F0A                            
00009F0A                            Scen_ChkDel:	; Routine 2
00009F28 6000 0000                  		bra.w	DisplaySprite
00009F2C                            ; ===========================================================================
00009F2C                            ; ---------------------------------------------------------------------------
00009F2C                            ; Variables for	object $1C are stored in an array
00009F2C                            ; ---------------------------------------------------------------------------
00009F2C 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
00009F30 44D8                       		dc.w $44D8		; VRAM setting
00009F32 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009F36 0000 0000                  		dc.l Map_Scen
00009F3A 44D8                       		dc.w $44D8
00009F3C 0008 0200                  		dc.b 0,	8, 2, 0
00009F40 0000 0000                  		dc.l Map_Scen
00009F44 44D8                       		dc.w $44D8
00009F46 0008 0200                  		dc.b 0,	8, 2, 0
00009F4A 0000 8FE0                  		dc.l Map_Bri
00009F4E 438E                       		dc.w $438E
00009F50 0110 0100                  		dc.b 1,	$10, 1,	0
00009F54                            		even
00009F54                            		even
00009F54                            Map_Scen:	include	"_maps\Scenery.asm"
00009F54                            ; ---------------------------------------------------------------------------
00009F54                            ; Sprite mappings - SLZ	lava thrower
00009F54                            ; ---------------------------------------------------------------------------
00009F54                            Map_Scen_internal:
00009F54 0000                       		dc.w byte_8858-Map_Scen_internal
00009F56 01                         byte_8858:	dc.b 1
00009F57 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009F5C                            		even
00009F5C                            		even
00009F5C                            
00009F5C                            		include	"_incObj\1D Unused Switch.asm"
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            ; Object 1D - switch that activates when Sonic touches it
00009F5C                            ; (this	is not used anywhere in	the game)
00009F5C                            ; ---------------------------------------------------------------------------
00009F5C                            
00009F5C                            MagicSwitch:
00009F5C 7000                       		moveq	#0,d0
00009F5E 1028 0024                  		move.b	obRoutine(a0),d0
00009F62 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
00009F66 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
00009F6A                            ; ===========================================================================
00009F6A 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
00009F6C 0000                       		dc.w Swi_Action-Swi_Index
00009F6E 0000                       		dc.w Swi_Delete-Swi_Index
00009F70                            
00009F70 =00000030                  swi_origY:	equ $30		; original y-axis position
00009F70                            ; ===========================================================================
00009F70                            
00009F70                            Swi_Main:	; Routine 0
00009F70 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F74 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
00009F7C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009F82 117C 0004 0001             		move.b	#4,obRender(a0)
00009F88 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
00009F8E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00009F94 317C 0280 0018             		move.w	#$280,obPriority(a0)
00009F9A                            
00009F9A                            Swi_Action:	; Routine 2
00009F9A 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
00009FA0 323C 0010                  		move.w	#$10,d1
00009FA4 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
00009FA8 6700                       		beq.s	Swi_ChkDel	; if not, branch
00009FAA                            
00009FAA 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
00009FAE 7001                       		moveq	#1,d0
00009FB0 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
00009FB4                            
00009FB4                            Swi_ChkDel:
00009FB4 6100 0000                  		bsr.w	DisplaySprite
00009FD6 4E75                       		rts	
00009FD8                            ; ===========================================================================
00009FD8                            
00009FD8                            Swi_Delete:	; Routine 4
00009FD8 6100 0000                  		bsr.w	DeleteObject
00009FDC 4E75                       		rts	
00009FDE                            
00009FDE                            ; ---------------------------------------------------------------------------
00009FDE                            ; Subroutine to	check if Sonic touches the object
00009FDE                            ; ---------------------------------------------------------------------------
00009FDE                            
00009FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FDE                            
00009FDE                            
00009FDE                            Swi_ChkTouch:
00009FDE 43F8 D000                  		lea	(v_player).w,a1
00009FE2 3029 0008                  		move.w	obX(a1),d0
00009FE6 9068 0008                  		sub.w	obX(a0),d0
00009FEA D041                       		add.w	d1,d0
00009FEC 6B00                       		bmi.s	Swi_NoTouch
00009FEE D241                       		add.w	d1,d1
00009FF0 B041                       		cmp.w	d1,d0
00009FF2 6400                       		bcc.s	Swi_NoTouch
00009FF4 3429 000C                  		move.w	obY(a1),d2
00009FF8 1229 0016                  		move.b	obHeight(a1),d1
00009FFC 4881                       		ext.w	d1
00009FFE D242                       		add.w	d2,d1
0000A000 3028 000C                  		move.w	obY(a0),d0
0000A004 0440 0010                  		subi.w	#$10,d0
0000A008 9041                       		sub.w	d1,d0
0000A00A 6200                       		bhi.s	Swi_NoTouch
0000A00C 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A010 6500                       		bcs.s	Swi_NoTouch
0000A012 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A014 4E75                       		rts	
0000A016                            ; ===========================================================================
0000A016                            
0000A016                            Swi_NoTouch:
0000A016 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A018 4E75                       		rts	
0000A01A                            ; End of function Swi_ChkTouch
0000A01A                            ; End of function Swi_ChkTouch
0000A01A                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A01A                            ; ---------------------------------------------------------------------------
0000A01A                            ; Sprite mappings - Unused switch thingy
0000A01A                            ; ---------------------------------------------------------------------------
0000A01A                            Map_Swi_internal:
0000A01A 0000                       		dc.w byte_891E-Map_Swi_internal
0000A01C 04                         byte_891E:	dc.b 4
0000A01D E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A022 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A027 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A02C 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A032 00                         		even
0000A032 00                         		even
0000A032                            
0000A032                            		include	"_incObj\2A SBZ Small Door.asm"
0000A032                            ; ---------------------------------------------------------------------------
0000A032                            ; Object 2A - small vertical door (SBZ)
0000A032                            ; ---------------------------------------------------------------------------
0000A032                            
0000A032                            AutoDoor:
0000A032 7000                       		moveq	#0,d0
0000A034 1028 0024                  		move.b	obRoutine(a0),d0
0000A038 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A03C 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A040                            ; ===========================================================================
0000A040 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A042 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A044                            ; ===========================================================================
0000A044                            
0000A044                            ADoor_Main:	; Routine 0
0000A044 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A048 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A050 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A056 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A05C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A062                            		;move.b	#4,obPriority(a0)
0000A062                            
0000A062                            ADoor_OpenShut:	; Routine 2
0000A062 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A066 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A06A 3038 D008                  		move.w	(v_player+obX).w,d0
0000A06E D041                       		add.w	d1,d0
0000A070 B068 0008                  		cmp.w	obX(a0),d0
0000A074 6500                       		bcs.s	ADoor_Animate
0000A076 9041                       		sub.w	d1,d0
0000A078 9041                       		sub.w	d1,d0
0000A07A B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A07E 6400                       		bcc.s	ADoor_Animate	; close door
0000A080 D041                       		add.w	d1,d0
0000A082 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A086 6400                       		bcc.s	loc_899A	; if yes, branch
0000A088 0828 0000 0022             		btst	#0,obStatus(a0)
0000A08E 6600                       		bne.s	ADoor_Animate
0000A090 6000                       		bra.s	ADoor_Open
0000A092                            ; ===========================================================================
0000A092                            
0000A092                            loc_899A:
0000A092 0828 0000 0022             		btst	#0,obStatus(a0)
0000A098 6700                       		beq.s	ADoor_Animate
0000A09A                            
0000A09A                            ADoor_Open:
0000A09A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A0A0                            
0000A0A0                            ADoor_Animate:
0000A0A0 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A0A6 6100 0000                  		bsr.w	AnimateSprite
0000A0AA 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A0AE 6600                       		bne.s	@remember	; if yes, branch
0000A0B0 323C 0011                  		move.w	#$11,d1
0000A0B4 343C 0020                  		move.w	#$20,d2
0000A0B8 3602                       		move.w	d2,d3
0000A0BA 5243                       		addq.w	#1,d3
0000A0BC 3828 0008                  		move.w	obX(a0),d4
0000A0C0 6100 0000                  		bsr.w	SolidObject
0000A0C4                            
0000A0C4                            	@remember:
0000A0C4 6000 0000                  		bra.w	RememberState
0000A0C4 6000 0000                  		bra.w	RememberState
0000A0C8                            		include	"_anim\SBZ Small Door.asm"
0000A0C8                            ; ---------------------------------------------------------------------------
0000A0C8                            ; Animation script - doors (SBZ)
0000A0C8                            ; ---------------------------------------------------------------------------
0000A0C8 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A0CA 0000                       		dc.w @open-Ani_ADoor
0000A0CC 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A0D8 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A0E4                            		even
0000A0E4                            		even
0000A0E4                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A0E4                            ; --------------------------------------------------------------------------------
0000A0E4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A0E4                            ; --------------------------------------------------------------------------------
0000A0E4                            
0000A0E4                            SME_YnmwF:	
0000A0E4 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A0E8 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A0EC 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A0F0 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A0F4 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A0F6 02                         SME_YnmwF_12:	dc.b 2	
0000A0F7 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A0FC 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A101 02                         SME_YnmwF_1D:	dc.b 2	
0000A102 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A107 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A10C 02                         SME_YnmwF_28:	dc.b 2	
0000A10D D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A112 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A117 02                         SME_YnmwF_33:	dc.b 2	
0000A118 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A11D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A122 02                         SME_YnmwF_3E:	dc.b 2	
0000A123 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A128 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A12D 02                         SME_YnmwF_49:	dc.b 2	
0000A12E CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A133 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A138 02                         SME_YnmwF_54:	dc.b 2	
0000A139 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A13E 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A143 02                         SME_YnmwF_5F:	dc.b 2	
0000A144 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A149 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A14E 02                         SME_YnmwF_6A:	dc.b 2	
0000A14F C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A154 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A15A 00                         		even
0000A15A 00                         		even
0000A15A                            
0000A15A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A15A                            
0000A15A                            
0000A15A                            Obj44_SolidWall:
0000A15A 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A15E 6700                       		beq.s	loc_8AA8
0000A160 6B00 0000                  		bmi.w	loc_8AC4
0000A164 4A40                       		tst.w	d0
0000A166 6700 0000                  		beq.w	loc_8A92
0000A16A 6B00                       		bmi.s	loc_8A7C
0000A16C 4A69 0010                  		tst.w	obVelX(a1)
0000A170 6B00                       		bmi.s	loc_8A92
0000A172 6000                       		bra.s	loc_8A82
0000A174                            ; ===========================================================================
0000A174                            
0000A174                            loc_8A7C:
0000A174 4A69 0010                  		tst.w	obVelX(a1)
0000A178 6A00                       		bpl.s	loc_8A92
0000A17A                            
0000A17A                            loc_8A82:
0000A17A 9169 0008                  		sub.w	d0,obX(a1)
0000A17E 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A184 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A18A                            
0000A18A                            loc_8A92:
0000A18A 0829 0001 0022             		btst	#1,obStatus(a1)
0000A190 6600                       		bne.s	loc_8AB6
0000A192 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A198 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A19E 4E75                       		rts	
0000A1A0                            ; ===========================================================================
0000A1A0                            
0000A1A0                            loc_8AA8:
0000A1A0 0828 0005 0022             		btst	#5,obStatus(a0)
0000A1A6 6700                       		beq.s	locret_8AC2
0000A1A8 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A1AE                            
0000A1AE                            loc_8AB6:
0000A1AE 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A1B4 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A1BA                            
0000A1BA                            locret_8AC2:
0000A1BA 4E75                       		rts	
0000A1BC                            ; ===========================================================================
0000A1BC                            
0000A1BC                            loc_8AC4:
0000A1BC 4A69 0012                  		tst.w	obVelY(a1)
0000A1C0 6A00                       		bpl.s	locret_8AD8
0000A1C2 4A43                       		tst.w	d3
0000A1C4 6A00                       		bpl.s	locret_8AD8
0000A1C6 9769 000C                  		sub.w	d3,obY(a1)
0000A1CA 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A1D0                            
0000A1D0                            locret_8AD8:
0000A1D0 4E75                       		rts	
0000A1D2                            ; End of function Obj44_SolidWall
0000A1D2                            
0000A1D2                            
0000A1D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1D2                            
0000A1D2                            
0000A1D2                            Obj44_SolidWall2:
0000A1D2 43F8 D000                  		lea	(v_player).w,a1
0000A1D6 3029 0008                  		move.w	obX(a1),d0
0000A1DA 9068 0008                  		sub.w	obX(a0),d0
0000A1DE D041                       		add.w	d1,d0
0000A1E0 6B00                       		bmi.s	loc_8B48
0000A1E2 3601                       		move.w	d1,d3
0000A1E4 D643                       		add.w	d3,d3
0000A1E6 B043                       		cmp.w	d3,d0
0000A1E8 6200                       		bhi.s	loc_8B48
0000A1EA 1629 0016                  		move.b	obHeight(a1),d3
0000A1EE 4883                       		ext.w	d3
0000A1F0 D443                       		add.w	d3,d2
0000A1F2 3629 000C                  		move.w	obY(a1),d3
0000A1F6 9668 000C                  		sub.w	obY(a0),d3
0000A1FA D642                       		add.w	d2,d3
0000A1FC 6B00                       		bmi.s	loc_8B48
0000A1FE 3802                       		move.w	d2,d4
0000A200 D844                       		add.w	d4,d4
0000A202 B644                       		cmp.w	d4,d3
0000A204 6400                       		bhs.s	loc_8B48
0000A206 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A20A 6B00                       		bmi.s	loc_8B48
0000A20C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A212 6400                       		bhs.s	loc_8B48
0000A214 4A78 FE08                  		tst.w	(v_debuguse).w
0000A218 6600                       		bne.s	loc_8B48
0000A21A 3A00                       		move.w	d0,d5
0000A21C B240                       		cmp.w	d0,d1
0000A21E 6400                       		bhs.s	loc_8B30
0000A220 D241                       		add.w	d1,d1
0000A222 9041                       		sub.w	d1,d0
0000A224 3A00                       		move.w	d0,d5
0000A226 4445                       		neg.w	d5
0000A228                            
0000A228                            loc_8B30:
0000A228 3203                       		move.w	d3,d1
0000A22A B443                       		cmp.w	d3,d2
0000A22C 6400                       		bhs.s	loc_8B3C
0000A22E 9644                       		sub.w	d4,d3
0000A230 3203                       		move.w	d3,d1
0000A232 4441                       		neg.w	d1
0000A234                            
0000A234                            loc_8B3C:
0000A234 BA41                       		cmp.w	d1,d5
0000A236 6200                       		bhi.s	loc_8B44
0000A238 7801                       		moveq	#1,d4
0000A23A 4E75                       		rts	
0000A23C                            ; ===========================================================================
0000A23C                            
0000A23C                            loc_8B44:
0000A23C 78FF                       		moveq	#-1,d4
0000A23E 4E75                       		rts	
0000A240                            ; ===========================================================================
0000A240                            
0000A240                            loc_8B48:
0000A240 7800                       		moveq	#0,d4
0000A242 4E75                       		rts	
0000A244                            ; End of function Obj44_SolidWall2
0000A244                            
0000A244                            ; ===========================================================================
0000A244                            
0000A244                            		include	"_incObj\1E Ball Hog.asm"
0000A244                            ; ---------------------------------------------------------------------------
0000A244                            ; Object 1E - Ball Hog enemy (SBZ)
0000A244                            ; ---------------------------------------------------------------------------
0000A244                            
0000A244                            BallHog:
0000A244 7000                       		moveq	#0,d0
0000A246 1028 0024                  		move.b	obRoutine(a0),d0
0000A24A 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A24E 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A252                            ; ===========================================================================
0000A252 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A254 0000                       		dc.w Hog_Action-Hog_Index
0000A256                            
0000A256 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A256                            ; ===========================================================================
0000A256                            
0000A256                            Hog_Main:	; Routine 0
0000A256 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A25C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A262 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A26A 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A270 117C 0004 0001             		move.b	#4,obRender(a0)
0000A276 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A27C 117C 0005 0020             		move.b	#5,obColType(a0)
0000A282 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A288 6100 0000                  		bsr.w	ObjectFall
0000A28C 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A292 4A41                       		tst.w	d1
0000A294 6A00                       		bpl.s	@floornotfound
0000A296 D368 000C                  		add.w	d1,obY(a0)
0000A29A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A2A0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A2A4                            
0000A2A4                            	@floornotfound:
0000A2A4 4E75                       		rts	
0000A2A6                            ; ===========================================================================
0000A2A6                            
0000A2A6                            Hog_Action:	; Routine 2
0000A2A6 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A2AC 6100 0000                  		bsr.w	AnimateSprite
0000A2B0 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A2B6 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A2B8 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A2BC 6700                       		beq.s	@makeball	; if yes, branch
0000A2BE 6000                       		bra.s	@remember
0000A2C0                            ; ===========================================================================
0000A2C0                            
0000A2C0                            @setlaunchflag:
0000A2C0 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A2C4                            
0000A2C4                            @remember:
0000A2C4 6000 0000                  		bra.w	RememberState
0000A2C8                            ; ===========================================================================
0000A2C8                            
0000A2C8                            @makeball:
0000A2C8 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A2CE 6100 0000                  		bsr.w	FindFreeObj
0000A2D2 6600                       		bne.s	@fail
0000A2D4 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A2D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A2DE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A2E4 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A2EA 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A2F0 70FC                       		moveq	#-4,d0
0000A2F2 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A2F8 6700                       		beq.s	@noflip		; if not, branch
0000A2FA 4440                       		neg.w	d0
0000A2FC 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A300                            
0000A300                            	@noflip:
0000A300 D169 0008                  		add.w	d0,obX(a1)
0000A304 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A30A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A310                            
0000A310                            	@fail:
0000A310 60B2                       		bra.s	@remember
0000A310 60B2                       		bra.s	@remember
0000A312                            		include	"_incObj\20 Cannonball.asm"
0000A312                            ; ---------------------------------------------------------------------------
0000A312                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A312                            ; ---------------------------------------------------------------------------
0000A312                            
0000A312                            Cannonball:
0000A312 7000                       		moveq	#0,d0
0000A314 1028 0024                  		move.b	obRoutine(a0),d0
0000A318 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A31C 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A320                            ; ===========================================================================
0000A320 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A322 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A324                            
0000A324 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A324                            ; ===========================================================================
0000A324                            
0000A324                            Cbal_Main:	; Routine 0
0000A324 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A328 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A32E 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A336 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A33C 117C 0004 0001             		move.b	#4,obRender(a0)
0000A342 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A348 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A34E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A354 7000                       		moveq	#0,d0
0000A356 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A35A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A35E 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A362 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A368                            
0000A368                            Cbal_Bounce:	; Routine 2
0000A368 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A36E 4A68 0012                  		tst.w	obVelY(a0)
0000A372 6B00                       		bmi.s	Cbal_ChkExplode
0000A374 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A37A 4A41                       		tst.w	d1		; has ball hit the floor?
0000A37C 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A37E                            
0000A37E D368 000C                  		add.w	d1,obY(a0)
0000A382 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A388 4A03                       		tst.b	d3
0000A38A 6700                       		beq.s	Cbal_ChkExplode
0000A38C 6B00                       		bmi.s	loc_8CA4
0000A38E 4A68 0010                  		tst.w	obVelX(a0)
0000A392 6A00                       		bpl.s	Cbal_ChkExplode
0000A394 4468 0010                  		neg.w	obVelX(a0)
0000A398 6000                       		bra.s	Cbal_ChkExplode
0000A39A                            ; ===========================================================================
0000A39A                            
0000A39A                            loc_8CA4:
0000A39A 4A68 0010                  		tst.w	obVelX(a0)
0000A39E 6B00                       		bmi.s	Cbal_ChkExplode
0000A3A0 4468 0010                  		neg.w	obVelX(a0)
0000A3A4                            
0000A3A4                            Cbal_ChkExplode:
0000A3A4 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A3A8 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A3AA                            
0000A3AA                            	Cbal_Explode:
0000A3AA 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A3AE 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A3B2 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A3B8 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A3BC                            ; ===========================================================================
0000A3BC                            
0000A3BC                            Cbal_Animate:
0000A3BC 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A3C0 6A00                       		bpl.s	Cbal_Display
0000A3C2 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A3C8 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A3CE                            
0000A3CE                            Cbal_Display:
0000A3CE 6100 0000                  		bsr.w	DisplaySprite
0000A3D2 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A3D6 0640 00E0                  		addi.w	#$E0,d0
0000A3DA B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A3DE 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A3E2 4E75                       		rts	
0000A3E2 4E75                       		rts	
0000A3E4                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A3E4                            ; ---------------------------------------------------------------------------
0000A3E4                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A3E4                            ; ---------------------------------------------------------------------------
0000A3E4                            
0000A3E4                            MissileDissolve:
0000A3E4 7000                       		moveq	#0,d0
0000A3E6 1028 0024                  		move.b	obRoutine(a0),d0
0000A3EA 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A3EE 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A3F2                            ; ===========================================================================
0000A3F2 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A3F4 0000                       		dc.w MDis_Animate-MDis_Index
0000A3F6                            ; ===========================================================================
0000A3F6                            
0000A3F6                            MDis_Main:	; Routine 0
0000A3F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A3FA 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A402 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A408 117C 0004 0001             		move.b	#4,obRender(a0)
0000A40E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A414 117C 0000 0020             		move.b	#0,obColType(a0)
0000A41A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A420 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A426 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A436                            
0000A436                            MDis_Animate:	; Routine 2
0000A436 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A43A 6A00                       		bpl.s	@display
0000A43C 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A442 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A446 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A44C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A450                            
0000A450                            	@display:
0000A450 6000 0000                  		bra.w	DisplaySprite
0000A454                            ; ===========================================================================
0000A454                            
0000A454                            ; ---------------------------------------------------------------------------
0000A454                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A454                            ; ---------------------------------------------------------------------------
0000A454                            
0000A454                            ExplosionItem:
0000A454 7000                       		moveq	#0,d0
0000A456 1028 0024                  		move.b	obRoutine(a0),d0
0000A45A 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A45E 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A462                            ; ===========================================================================
0000A462 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A464 0000                       		dc.w ExItem_Main-ExItem_Index
0000A466 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A468                            ; ===========================================================================
0000A468                            
0000A468                            ExItem_Animal:	; Routine 0
0000A468 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A46C 6100 0000                  		bsr.w	FindFreeObj
0000A470 6600                       		bne.s	ExItem_Main
0000A472 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A476 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A47C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A482 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A488                            
0000A488                            ExItem_Main:	; Routine 2
0000A488 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A48C 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A494 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A49A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A4A0 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A4A6 117C 0000 0020             		move.b	#0,obColType(a0)
0000A4AC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A4B2 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A4B8 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A4C8                            
0000A4C8                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A4C8 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A4CC 6A00                       		bpl.s	@display
0000A4CE 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A4D4 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A4D8 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A4DE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A4E2                            
0000A4E2                            	@display:
0000A4E2 6000 0000                  		bra.w	DisplaySprite
0000A4E6                            ; ===========================================================================
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            
0000A4E6                            ExplosionBomb:
0000A4E6 7000                       		moveq	#0,d0
0000A4E8 1028 0024                  		move.b	obRoutine(a0),d0
0000A4EC 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A4F0 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A4F4                            ; ===========================================================================
0000A4F4 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A4F6 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A4F8                            ; ===========================================================================
0000A4F8                            
0000A4F8                            ExBom_Main:	; Routine 0
0000A4F8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4FC 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A504 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A50A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A510 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A516 117C 0000 0020             		move.b	#0,obColType(a0)
0000A51C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A522 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A528 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A538                            		include	"_anim\Ball Hog.asm"
0000A538                            ; ---------------------------------------------------------------------------
0000A538                            ; Animation script - doors (SBZ)
0000A538                            ; ---------------------------------------------------------------------------
0000A538 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A53A 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A552 00                         		even
0000A552 00                         		even
0000A552                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A552                            ; --------------------------------------------------------------------------------
0000A552                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A552                            ; --------------------------------------------------------------------------------
0000A552                            
0000A552                            SME_ZER01:	
0000A552 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A556 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A55A 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A55E 02                         SME_ZER01_C:	dc.b 2	
0000A55F EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A564 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A569 02                         SME_ZER01_17:	dc.b 2	
0000A56A EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A56F FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A574 02                         SME_ZER01_22:	dc.b 2	
0000A575 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A57A 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A57F 02                         SME_ZER01_2D:	dc.b 2	
0000A580 E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A585 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A58A 01                         SME_ZER01_38:	dc.b 1	
0000A58B F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A590 01                         SME_ZER01_3E:	dc.b 1	
0000A591 F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A596                            		even
0000A596                            		even
0000A596                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A596                            ; ---------------------------------------------------------------------------
0000A596                            ; Sprite mappings - buzz bomber missile vanishing
0000A596                            ; ---------------------------------------------------------------------------
0000A596                            Map_MisDissolve_internal:
0000A596 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A598 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A59A 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A59C 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A59E 01                         byte_8EAE:	dc.b 1
0000A59F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A5A4 01                         byte_8EB4:	dc.b 1
0000A5A5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A5AA 01                         byte_8EBA:	dc.b 1
0000A5AB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A5B0 01                         byte_8EC0:	dc.b 1
0000A5B1 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A5B6                            		even
0000A5B6                            		even
0000A5B6                            		include	"_maps\Explosions.asm"
0000A5B6                            ; ---------------------------------------------------------------------------
0000A5B6                            ; Sprite mappings - explosion from a badnik or monitor
0000A5B6                            ; ---------------------------------------------------------------------------
0000A5B6 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A5BA 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A5BE 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A5C0 01                         byte_8ED0:	dc.b 1
0000A5C1 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A5C6 01                         byte_8ED6:	dc.b 1
0000A5C7 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A5CC 01                         byte_8EDC:	dc.b 1
0000A5CD F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A5D2 04                         byte_8EE2:	dc.b 4
0000A5D3 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A5D8 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A5DD 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A5E2 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A5E7 04                         byte_8EF7:	dc.b 4
0000A5E8 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A5ED EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A5F2 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A5F7 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A5FC                            		even
0000A5FC                            ; ---------------------------------------------------------------------------
0000A5FC                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A5FC                            ; ---------------------------------------------------------------------------
0000A5FC FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A5FE 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A600 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A602 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A604 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A606 01                         byte_8F16:	dc.b 1
0000A607 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A60C 01                         byte_8F1C:	dc.b 1
0000A60D F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A612                            		even
0000A612                            		even
0000A612                            
0000A612                            		include	"_incObj\28 Animals.asm"
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            ; Object 28 - animals
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            
0000A612                            Animals:
0000A612 7000                       		moveq	#0,d0
0000A614 1028 0024                  		move.b	obRoutine(a0),d0
0000A618 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A61C 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A620                            ; ===========================================================================
0000A620 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A624 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A628 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A62C 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A630 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A634 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A638 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A63C 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A640 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A644 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A648 0000                       		dc.w loc_92D6-Anml_Index
0000A64A                            
0000A64A 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A656                            
0000A656 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A65A 0000 0000                  		dc.l Map_Animal1
0000A65E FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A662 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A666 FE80 FD00                  		dc.w $FE80, $FD00
0000A66A 0000 0000                  		dc.l Map_Animal1
0000A66E FEC0 FE80                  		dc.w $FEC0, $FE80
0000A672 0000 0000                  		dc.l Map_Animal2
0000A676 FE40 FD00                  		dc.w $FE40, $FD00
0000A67A 0000 0000                  		dc.l Map_Animal3
0000A67E FD00 FC00                  		dc.w $FD00, $FC00
0000A682 0000 0000                  		dc.l Map_Animal2
0000A686 FD80 FC80                  		dc.w $FD80, $FC80
0000A68A 0000 0000                  		dc.l Map_Animal3
0000A68E                            
0000A68E FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A69E FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A6AE FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A6BA                            
0000A6BA 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000A6CE 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000A6E2 0000 0000                  		dc.l Map_Animal3
0000A6E6                            
0000A6E6 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A6F8 0565 05B3                  		dc.w $565, $5B3
0000A6FC                            ; ===========================================================================
0000A6FC                            
0000A6FC                            Anml_Ending:	; Routine 0
0000A6FC 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000A700 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000A704 7000                       		moveq	#0,d0
0000A706 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000A70A D040                       		add.w	d0,d0		; multiply d0 by 2
0000A70C 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000A710 0440 0014                  		subi.w	#$14,d0
0000A714 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000A71A D040                       		add.w	d0,d0
0000A71C 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000A722 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000A726 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A72C 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000A732 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A738 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000A73E 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A744 117C 0004 0001             		move.b	#4,obRender(a0)
0000A74A 08E8 0000 0001             		bset	#0,obRender(a0)
0000A750 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A756 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A75C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A762 6000 0000                  		bra.w	DisplaySprite
0000A766                            ; ===========================================================================
0000A766                            
0000A766                            Anml_FromEnemy:
0000A766 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A76A 6100 93B0                  		bsr.w	RandomNumber
0000A76E 0240 0001                  		andi.w	#1,d0
0000A772 7200                       		moveq	#0,d1
0000A774 1238 FE10                  		move.b	(v_zone).w,d1
0000A778 D241                       		add.w	d1,d1
0000A77A D240                       		add.w	d0,d1
0000A77C 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000A780 1031 1000                  		move.b	(a1,d1.w),d0
0000A784 1140 0030                  		move.b	d0,$30(a0)
0000A788 E748                       		lsl.w	#3,d0
0000A78A 43FA FECA                  		lea	Anml_Variables(pc),a1
0000A78E D2C0                       		adda.w	d0,a1
0000A790 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A794 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A798 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000A79C 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000A7A2 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A7A8 6700                       		beq.s	loc_90C0	; if yes, branch
0000A7AA 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000A7B0                            
0000A7B0                            loc_90C0:
0000A7B0 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A7B6 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7BC 08E8 0000 0001             		bset	#0,obRender(a0)
0000A7C2 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A7C8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A7CE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A7D4 117C 0002 001A             		move.b	#2,obFrame(a0)
0000A7DA 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000A7E0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A7E4 6600                       		bne.s	loc_911C
0000A7E6 6100 0000                  		bsr.w	FindFreeObj
0000A7EA 6600                       		bne.s	Anml_Display
0000A7EC 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000A7F0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A7F6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A7FC 3028 003E                  		move.w	$3E(a0),d0
0000A800 E248                       		lsr.w	#1,d0
0000A802 1340 001A                  		move.b	d0,obFrame(a1)
0000A806                            
0000A806                            Anml_Display:
0000A806 6000 0000                  		bra.w	DisplaySprite
0000A80A                            ; ===========================================================================
0000A80A                            
0000A80A                            loc_911C:
0000A80A 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000A810 4268 0010                  		clr.w	obVelX(a0)
0000A814 6000 0000                  		bra.w	DisplaySprite
0000A818                            ; ===========================================================================
0000A818                            
0000A818                            loc_912A:
0000A818 4A28 0001                  		tst.b	obRender(a0)
0000A81C 6A00 0000                  		bpl.w	DeleteObject
0000A820 6100 0000                  		bsr.w	ObjectFall
0000A824 4A68 0012                  		tst.w	obVelY(a0)
0000A828 6B00                       		bmi.s	loc_9180
0000A82A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A830 4A41                       		tst.w	d1
0000A832 6A00                       		bpl.s	loc_9180
0000A834 D368 000C                  		add.w	d1,obY(a0)
0000A838 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A83E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A844 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A84A 1028 0030                  		move.b	$30(a0),d0
0000A84E D000                       		add.b	d0,d0
0000A850 5800                       		addq.b	#4,d0
0000A852 1140 0024                  		move.b	d0,obRoutine(a0)
0000A856 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A85A 6700                       		beq.s	loc_9180
0000A85C 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000A862 6700                       		beq.s	loc_9180
0000A864 4468 0010                  		neg.w	obVelX(a0)
0000A868 0868 0000 0001             		bchg	#0,obRender(a0)
0000A86E                            
0000A86E                            loc_9180:
0000A86E 6000 0000                  		bra.w	DisplaySprite
0000A872                            ; ===========================================================================
0000A872                            
0000A872                            loc_9184:
0000A872 6100 0000                  		bsr.w	ObjectFall
0000A876 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A87C 4A68 0012                  		tst.w	obVelY(a0)
0000A880 6B00                       		bmi.s	loc_91AE
0000A882 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A888 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A88E 4A41                       		tst.w	d1
0000A890 6A00                       		bpl.s	loc_91AE
0000A892 D368 000C                  		add.w	d1,obY(a0)
0000A896 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A89C                            
0000A89C                            loc_91AE:
0000A89C 4A28 0028                  		tst.b	obSubtype(a0)
0000A8A0 6600                       		bne.s	loc_9224
0000A8A2 4A28 0001                  		tst.b	obRender(a0)
0000A8A6 6A00 0000                  		bpl.w	DeleteObject
0000A8AA 6000 0000                  		bra.w	DisplaySprite
0000A8AE                            ; ===========================================================================
0000A8AE                            
0000A8AE                            loc_91C0:
0000A8AE 6100 0000                  		bsr.w	SpeedToPos
0000A8B2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A8B8 4A68 0012                  		tst.w	obVelY(a0)
0000A8BC 6B00                       		bmi.s	loc_91FC
0000A8BE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A8C4 4A41                       		tst.w	d1
0000A8C6 6A00                       		bpl.s	loc_91FC
0000A8C8 D368 000C                  		add.w	d1,obY(a0)
0000A8CC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A8D2 4A28 0028                  		tst.b	obSubtype(a0)
0000A8D6 6700                       		beq.s	loc_91FC
0000A8D8 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000A8DE 6700                       		beq.s	loc_91FC
0000A8E0 4468 0010                  		neg.w	obVelX(a0)
0000A8E4 0868 0000 0001             		bchg	#0,obRender(a0)
0000A8EA                            
0000A8EA                            loc_91FC:
0000A8EA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000A8EE 6A00                       		bpl.s	loc_9212
0000A8F0 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000A8F6 5228 001A                  		addq.b	#1,obFrame(a0)
0000A8FA 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000A900                            
0000A900                            loc_9212:
0000A900 4A28 0028                  		tst.b	obSubtype(a0)
0000A904 6600                       		bne.s	loc_9224
0000A906 4A28 0001                  		tst.b	obRender(a0)
0000A90A 6A00 0000                  		bpl.w	DeleteObject
0000A90E 6000 0000                  		bra.w	DisplaySprite
0000A912                            ; ===========================================================================
0000A912                            
0000A912                            loc_9224:
0000A912 3028 0008                  		move.w	obX(a0),d0
0000A916 9078 D008                  		sub.w	(v_player+obX).w,d0
0000A91A 6500                       		bcs.s	loc_923C
0000A91C 0440 0180                  		subi.w	#$180,d0
0000A920 6A00                       		bpl.s	loc_923C
0000A922 4A28 0001                  		tst.b	obRender(a0)
0000A926 6A00 0000                  		bpl.w	DeleteObject
0000A92A                            
0000A92A                            loc_923C:
0000A92A 6000 0000                  		bra.w	DisplaySprite
0000A92E                            ; ===========================================================================
0000A92E                            
0000A92E                            loc_9240:
0000A92E 4A28 0001                  		tst.b	obRender(a0)
0000A932 6A00 0000                  		bpl.w	DeleteObject
0000A936 5368 0036                  		subq.w	#1,$36(a0)
0000A93A 6600 0000                  		bne.w	loc_925C
0000A93E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000A944 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A94A                            
0000A94A                            loc_925C:
0000A94A 6000 0000                  		bra.w	DisplaySprite
0000A94E                            ; ===========================================================================
0000A94E                            
0000A94E                            loc_9260:
0000A94E 6100 0000                  		bsr.w	sub_9404
0000A952 6400                       		bcc.s	loc_927C
0000A954 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A95A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A960 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000A966 6000 FF46                  		bra.w	loc_91C0
0000A96A                            ; ===========================================================================
0000A96A                            
0000A96A                            loc_927C:
0000A96A 6000 FFA6                  		bra.w	loc_9224
0000A96E                            ; ===========================================================================
0000A96E                            
0000A96E                            loc_9280:
0000A96E 6100 0000                  		bsr.w	sub_9404
0000A972 6A00                       		bpl.s	loc_92B6
0000A974 4268 0010                  		clr.w	obVelX(a0)
0000A978 4268 0032                  		clr.w	$32(a0)
0000A97C 6100 0000                  		bsr.w	SpeedToPos
0000A980 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A986 6100 0000                  		bsr.w	loc_93C4
0000A98A 6100 0000                  		bsr.w	loc_93EC
0000A98E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000A992 6A00                       		bpl.s	loc_92B6
0000A994 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000A99A 5228 001A                  		addq.b	#1,obFrame(a0)
0000A99E 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000A9A4                            
0000A9A4                            loc_92B6:
0000A9A4 6000 FF6C                  		bra.w	loc_9224
0000A9A8                            ; ===========================================================================
0000A9A8                            
0000A9A8                            loc_92BA:
0000A9A8 6100 0000                  		bsr.w	sub_9404
0000A9AC 6A00                       		bpl.s	loc_9310
0000A9AE 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A9B4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A9BA 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000A9C0 6000 FEB0                  		bra.w	loc_9184
0000A9C4                            ; ===========================================================================
0000A9C4                            
0000A9C4                            loc_92D6:
0000A9C4 6100 0000                  		bsr.w	ObjectFall
0000A9C8 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A9CE 4A68 0012                  		tst.w	obVelY(a0)
0000A9D2 6B00                       		bmi.s	loc_9310
0000A9D4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9DA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A9E0 4A41                       		tst.w	d1
0000A9E2 6A00                       		bpl.s	loc_9310
0000A9E4 4628 0029                  		not.b	$29(a0)
0000A9E8 6600                       		bne.s	loc_9306
0000A9EA 4468 0010                  		neg.w	obVelX(a0)
0000A9EE 0868 0000 0001             		bchg	#0,obRender(a0)
0000A9F4                            
0000A9F4                            loc_9306:
0000A9F4 D368 000C                  		add.w	d1,obY(a0)
0000A9F8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A9FE                            
0000A9FE                            loc_9310:
0000A9FE 6000 FF12                  		bra.w	loc_9224
0000AA02                            ; ===========================================================================
0000AA02                            
0000AA02                            loc_9314:
0000AA02 6100 0000                  		bsr.w	sub_9404
0000AA06 6A00                       		bpl.s	loc_932E
0000AA08 4268 0010                  		clr.w	obVelX(a0)
0000AA0C 4268 0032                  		clr.w	$32(a0)
0000AA10 6100 0000                  		bsr.w	ObjectFall
0000AA14 6100 0000                  		bsr.w	loc_93C4
0000AA18 6100 0000                  		bsr.w	loc_93EC
0000AA1C                            
0000AA1C                            loc_932E:
0000AA1C 6000 FEF4                  		bra.w	loc_9224
0000AA20                            ; ===========================================================================
0000AA20                            
0000AA20                            loc_9332:
0000AA20 6100 0000                  		bsr.w	sub_9404
0000AA24 6A00                       		bpl.s	loc_936C
0000AA26 6100 0000                  		bsr.w	ObjectFall
0000AA2A 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AA30 4A68 0012                  		tst.w	obVelY(a0)
0000AA34 6B00                       		bmi.s	loc_936C
0000AA36 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA3C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AA42 4A41                       		tst.w	d1
0000AA44 6A00                       		bpl.s	loc_936C
0000AA46 4468 0010                  		neg.w	obVelX(a0)
0000AA4A 0868 0000 0001             		bchg	#0,obRender(a0)
0000AA50 D368 000C                  		add.w	d1,obY(a0)
0000AA54 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA5A                            
0000AA5A                            loc_936C:
0000AA5A 6000 FEB6                  		bra.w	loc_9224
0000AA5E                            ; ===========================================================================
0000AA5E                            
0000AA5E                            loc_9370:
0000AA5E 6100 0000                  		bsr.w	sub_9404
0000AA62 6A00                       		bpl.s	loc_93C0
0000AA64 6100 0000                  		bsr.w	SpeedToPos
0000AA68 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AA6E 4A68 0012                  		tst.w	obVelY(a0)
0000AA72 6B00                       		bmi.s	loc_93AA
0000AA74 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AA7A 4A41                       		tst.w	d1
0000AA7C 6A00                       		bpl.s	loc_93AA
0000AA7E 4628 0029                  		not.b	$29(a0)
0000AA82 6600                       		bne.s	loc_93A0
0000AA84 4468 0010                  		neg.w	obVelX(a0)
0000AA88 0868 0000 0001             		bchg	#0,obRender(a0)
0000AA8E                            
0000AA8E                            loc_93A0:
0000AA8E D368 000C                  		add.w	d1,obY(a0)
0000AA92 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA98                            
0000AA98                            loc_93AA:
0000AA98 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AA9C 6A00                       		bpl.s	loc_93C0
0000AA9E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AAA4 5228 001A                  		addq.b	#1,obFrame(a0)
0000AAA8 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AAAE                            
0000AAAE                            loc_93C0:
0000AAAE 6000 FE62                  		bra.w	loc_9224
0000AAB2                            ; ===========================================================================
0000AAB2                            
0000AAB2                            loc_93C4:
0000AAB2 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AAB8 4A68 0012                  		tst.w	obVelY(a0)
0000AABC 6B00                       		bmi.s	locret_93EA
0000AABE 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AAC4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AACA 4A41                       		tst.w	d1
0000AACC 6A00                       		bpl.s	locret_93EA
0000AACE D368 000C                  		add.w	d1,obY(a0)
0000AAD2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AAD8                            
0000AAD8                            locret_93EA:
0000AAD8 4E75                       		rts	
0000AADA                            ; ===========================================================================
0000AADA                            
0000AADA                            loc_93EC:
0000AADA 08E8 0000 0001             		bset	#0,obRender(a0)
0000AAE0 3028 0008                  		move.w	obX(a0),d0
0000AAE4 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AAE8 6400                       		bcc.s	locret_9402
0000AAEA 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AAF0                            
0000AAF0                            locret_9402:
0000AAF0 4E75                       		rts	
0000AAF2                            
0000AAF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AAF2                            
0000AAF2                            
0000AAF2                            sub_9404:
0000AAF2 3038 D008                  		move.w	(v_player+obX).w,d0
0000AAF6 9068 0008                  		sub.w	obX(a0),d0
0000AAFA 0440 00B8                  		subi.w	#$B8,d0
0000AAFE 4E75                       		rts	
0000AB00                            ; End of function sub_9404
0000AB00                            ; End of function sub_9404
0000AB00                            		include	"_incObj\29 Points.asm"
0000AB00                            ; ---------------------------------------------------------------------------
0000AB00                            ; Object 29 - points that appear when you destroy something
0000AB00                            ; ---------------------------------------------------------------------------
0000AB00                            
0000AB00                            Points:
0000AB00 7000                       		moveq	#0,d0
0000AB02 1028 0024                  		move.b	obRoutine(a0),d0
0000AB06 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AB0A 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AB0E 6000 0000                  		bra.w	DisplaySprite
0000AB12                            ; ===========================================================================
0000AB12 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AB14 0000                       		dc.w Poi_Slower-Poi_Index
0000AB16                            ; ===========================================================================
0000AB16                            
0000AB16                            Poi_Main:	; Routine 0
0000AB16 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AB1A 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AB22 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000AB28 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB2E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AB34 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB3A 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AB40                            
0000AB40                            Poi_Slower:	; Routine 2
0000AB40 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AB44 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AB48 6100 0000                  		bsr.w	SpeedToPos
0000AB4C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AB52 4E75                       		rts	
0000AB52 4E75                       		rts	
0000AB54                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AB54                            ; ---------------------------------------------------------------------------
0000AB54                            ; Sprite mappings - animals
0000AB54                            ; ---------------------------------------------------------------------------
0000AB54                            Map_Animal1_internal:
0000AB54 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AB56 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AB58 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AB5A 01                         byte_946C:	dc.b 1
0000AB5B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB60 01                         byte_9472:	dc.b 1
0000AB61 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AB66 01                         byte_9478:	dc.b 1
0000AB67 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AB6C                            		even
0000AB6C                            		even
0000AB6C                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AB6C                            ; ---------------------------------------------------------------------------
0000AB6C                            ; Sprite mappings - animals
0000AB6C                            ; ---------------------------------------------------------------------------
0000AB6C                            Map_Animal2_internal:
0000AB6C 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AB6E 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AB70 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AB72 01                         byte_9484:	dc.b 1
0000AB73 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB78 01                         byte_948A:	dc.b 1
0000AB79 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AB7E 01                         byte_9490:	dc.b 1
0000AB7F FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AB84                            		even
0000AB84                            		even
0000AB84                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AB84                            ; ---------------------------------------------------------------------------
0000AB84                            ; Sprite mappings - animals
0000AB84                            ; ---------------------------------------------------------------------------
0000AB84                            Map_Animal3_internal:
0000AB84 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AB86 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AB88 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AB8A 01                         byte_949C:	dc.b 1
0000AB8B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB90 01                         byte_94A2:	dc.b 1
0000AB91 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AB96 01                         byte_94A8:	dc.b 1
0000AB97 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AB9C                            		even
0000AB9C                            		even
0000AB9C                            Map_Poi:	include	"_maps\Points.asm"
0000AB9C                            ; --------------------------------------------------------------------------------
0000AB9C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AB9C                            ; --------------------------------------------------------------------------------
0000AB9C                            
0000AB9C                            SME_qLvsg:	
0000AB9C 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000ABA0 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000ABA4 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000ABA8 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000ABAA 01                         SME_qLvsg_E:	dc.b 1	
0000ABAB FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000ABB0 01                         SME_qLvsg_14:	dc.b 1	
0000ABB1 FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000ABB6 01                         SME_qLvsg_1A:	dc.b 1	
0000ABB7 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000ABBC 01                         SME_qLvsg_20:	dc.b 1	
0000ABBD FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000ABC2 01                         SME_qLvsg_26:	dc.b 1	
0000ABC3 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000ABC8 02                         SME_qLvsg_2C:	dc.b 2	
0000ABC9 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000ABCE FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000ABD3 02                         SME_qLvsg_37:	dc.b 2	
0000ABD4 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000ABD9 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000ABDE                            		even
0000ABDE                            		even
0000ABDE                            
0000ABDE                            		include	"_incObj\1F Crabmeat.asm"
0000ABDE                            ; ---------------------------------------------------------------------------
0000ABDE                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000ABDE                            ; ---------------------------------------------------------------------------
0000ABDE                            
0000ABDE                            Crabmeat:
0000ABDE 7000                       		moveq	#0,d0
0000ABE0 1028 0024                  		move.b	obRoutine(a0),d0
0000ABE4 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000ABE8 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000ABEC                            ; ===========================================================================
0000ABEC                            Crab_Index:
0000ABEC 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000ABEE 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000ABF0 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000ABF2 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000ABF4 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000ABF6                            
0000ABF6 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000ABF6 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000ABF6 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000ABF6 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000ABF6 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000ABF6                            
0000ABF6 =00000030                  crab_timedelay:	equ $30
0000ABF6 =00000032                  crab_mode:	equ $32
0000ABF6                            ; ===========================================================================
0000ABF6                            
0000ABF6                            Crab_Main:	; Routine 0
0000ABF6 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000ABFC 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AC02 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AC0A 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AC10 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC16 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AC1C 117C 0006 0020             		move.b	#6,obColType(a0)
0000AC22 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AC28 6100 0000                  		bsr.w	ObjectFall
0000AC2C 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AC32 4A41                       		tst.w	d1
0000AC34 6A00                       		bpl.s	@floornotfound
0000AC36 D368 000C                  		add.w	d1,obY(a0)
0000AC3A 1143 0026                  		move.b	d3,obAngle(a0)
0000AC3E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AC44 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AC48                            
0000AC48                            	@floornotfound:
0000AC48 4E75                       		rts	
0000AC4A                            ; ===========================================================================
0000AC4A                            
0000AC4A                            Crab_Action:	; Routine 2
0000AC4A 7000                       		moveq	#0,d0
0000AC4C 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AC50 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AC54 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AC58 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AC5E 6100 0000                  		bsr.w	AnimateSprite
0000AC62 6000 0000                  		bra.w	RememberState
0000AC66                            ; ===========================================================================
0000AC66 0000                       @index:		dc.w @waittofire-@index
0000AC68 0000                       		dc.w @walkonfloor-@index
0000AC6A                            ; ===========================================================================
0000AC6A                            
0000AC6A                            @waittofire:
0000AC6A 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AC6E 6A00                       		bpl.s	@dontmove
0000AC70 4A28 0001                  		tst.b	obRender(a0)
0000AC74 6A00                       		bpl.s	@movecrab
0000AC76 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AC7C 6600                       		bne.s	@fire
0000AC7E                            
0000AC7E                            	@movecrab:
0000AC7E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AC82 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AC88 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AC8E 6100 0000                  		bsr.w	Crab_SetAni
0000AC92 5600                       		addq.b	#3,d0
0000AC94 1140 001C                  		move.b	d0,obAnim(a0)
0000AC98 0868 0000 0022             		bchg	#0,obStatus(a0)
0000AC9E 6600                       		bne.s	@noflip
0000ACA0 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000ACA4                            
0000ACA4                            	@dontmove:
0000ACA4                            	@noflip:
0000ACA4 4E75                       		rts	
0000ACA6                            ; ===========================================================================
0000ACA6                            
0000ACA6                            @fire:
0000ACA6 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000ACAC 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000ACB2 6100 0000                  		bsr.w	FindFreeObj
0000ACB6 6600                       		bne.s	@failleft
0000ACB8 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000ACBC 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000ACC2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ACC8 0469 0010 0008             		subi.w	#$10,obX(a1)
0000ACCE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000ACD4 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000ACDA                            
0000ACDA                            	@failleft:
0000ACDA 6100 0000                  		bsr.w	FindFreeObj
0000ACDE 6600                       		bne.s	@failright
0000ACE0 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000ACE4 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000ACEA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ACF0 0669 0010 0008             		addi.w	#$10,obX(a1)
0000ACF6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000ACFC 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000AD02                            
0000AD02                            	@failright:
0000AD02 4E75                       		rts	
0000AD04                            ; ===========================================================================
0000AD04                            
0000AD04                            @walkonfloor:
0000AD04 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000AD08 6B00                       		bmi.s	loc_966E
0000AD0A 6100 0000                  		bsr.w	SpeedToPos
0000AD0E 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000AD14 6600                       		bne.s	loc_9654
0000AD16 3628 0008                  		move.w	obX(a0),d3
0000AD1A 0643 0010                  		addi.w	#$10,d3
0000AD1E 0828 0000 0022             		btst	#0,obStatus(a0)
0000AD24 6700                       		beq.s	loc_9640
0000AD26 0443 0020                  		subi.w	#$20,d3
0000AD2A                            
0000AD2A                            loc_9640:
0000AD2A 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000AD30 0C41 FFF8                  		cmpi.w	#-8,d1
0000AD34 6D00                       		blt.s	loc_966E
0000AD36 0C41 000C                  		cmpi.w	#$C,d1
0000AD3A 6C00                       		bge.s	loc_966E
0000AD3C 4E75                       		rts	
0000AD3E                            ; ===========================================================================
0000AD3E                            
0000AD3E                            loc_9654:
0000AD3E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD44 D368 000C                  		add.w	d1,obY(a0)
0000AD48 1143 0026                  		move.b	d3,obAngle(a0)
0000AD4C 6100 0000                  		bsr.w	Crab_SetAni
0000AD50 5600                       		addq.b	#3,d0
0000AD52 1140 001C                  		move.b	d0,obAnim(a0)
0000AD56 4E75                       		rts	
0000AD58                            ; ===========================================================================
0000AD58                            
0000AD58                            loc_966E:
0000AD58 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000AD5C 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000AD62 317C 0000 0010             		move.w	#0,obVelX(a0)
0000AD68 6100 0000                  		bsr.w	Crab_SetAni
0000AD6C 1140 001C                  		move.b	d0,obAnim(a0)
0000AD70 4E75                       		rts	
0000AD72                            ; ---------------------------------------------------------------------------
0000AD72                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000AD72                            ; ---------------------------------------------------------------------------
0000AD72                            
0000AD72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD72                            
0000AD72                            
0000AD72                            Crab_SetAni:
0000AD72 7000                       		moveq	#0,d0
0000AD74 1628 0026                  		move.b	obAngle(a0),d3
0000AD78 6B00                       		bmi.s	loc_96A4
0000AD7A 0C03 0006                  		cmpi.b	#6,d3
0000AD7E 6500                       		bcs.s	locret_96A2
0000AD80 7001                       		moveq	#1,d0
0000AD82 0828 0000 0022             		btst	#0,obStatus(a0)
0000AD88 6600                       		bne.s	locret_96A2
0000AD8A 7002                       		moveq	#2,d0
0000AD8C                            
0000AD8C                            locret_96A2:
0000AD8C 4E75                       		rts	
0000AD8E                            ; ===========================================================================
0000AD8E                            
0000AD8E                            loc_96A4:
0000AD8E 0C03 00FA                  		cmpi.b	#-6,d3
0000AD92 6200                       		bhi.s	locret_96B6
0000AD94 7002                       		moveq	#2,d0
0000AD96 0828 0000 0022             		btst	#0,obStatus(a0)
0000AD9C 6600                       		bne.s	locret_96B6
0000AD9E 7001                       		moveq	#1,d0
0000ADA0                            
0000ADA0                            locret_96B6:
0000ADA0 4E75                       		rts	
0000ADA2                            ; End of function Crab_SetAni
0000ADA2                            
0000ADA2                            ; ===========================================================================
0000ADA2                            
0000ADA2                            Crab_Delete:	; Routine 4
0000ADA2 6100 0000                  		bsr.w	DeleteObject
0000ADA6 4E75                       		rts	
0000ADA8                            ; ===========================================================================
0000ADA8                            ; ---------------------------------------------------------------------------
0000ADA8                            ; Sub-object - missile that the	Crabmeat throws
0000ADA8                            ; ---------------------------------------------------------------------------
0000ADA8                            
0000ADA8                            Crab_BallMain:	; Routine 6
0000ADA8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ADAC 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000ADB4 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000ADBA 117C 0004 0001             		move.b	#4,obRender(a0)
0000ADC0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ADC6 117C 0087 0020             		move.b	#$87,obColType(a0)
0000ADCC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ADD2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000ADD8 117C 0007 001C             		move.b	#7,obAnim(a0)
0000ADDE                            
0000ADDE                            Crab_BallMove:	; Routine 8
0000ADDE 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000ADE4 6100 0000                  		bsr.w	AnimateSprite
0000ADE8 6100 0000                  		bsr.w	ObjectFall
0000ADEC 6100 0000                  		bsr.w	DisplaySprite
0000ADF0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000ADF4 0640 00E0                  		addi.w	#$E0,d0
0000ADF8 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000ADFC 6500                       		bcs.s	@delete		; if yes, branch
0000ADFE 4E75                       		rts	
0000AE00                            
0000AE00                            	@delete:
0000AE00 6000 0000                  		bra.w	DeleteObject
0000AE00 6000 0000                  		bra.w	DeleteObject
0000AE04                            		include	"_anim\Crabmeat.asm"
0000AE04                            ; ---------------------------------------------------------------------------
0000AE04                            ; Animation script - Crabmeat enemy
0000AE04                            ; ---------------------------------------------------------------------------
0000AE04 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000AE0A 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000AE10 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000AE14 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000AE18 00                         		even
0000AE18 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000AE1C 00                         		even
0000AE1C 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000AE20 00                         		even
0000AE20 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000AE26 00                         		even
0000AE26 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000AE2C 00                         		even
0000AE2C 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000AE32 00                         		even
0000AE32 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000AE36 00                         		even
0000AE36 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000AE3A                            		even
0000AE3A                            		even
0000AE3A                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000AE3A                            ; ---------------------------------------------------------------------------
0000AE3A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AE3A                            ; ---------------------------------------------------------------------------
0000AE3A                            Map_Crab_internal:
0000AE3A 0000                       		dc.w @stand-Map_Crab_internal
0000AE3C 0000                       		dc.w @walk-Map_Crab_internal
0000AE3E 0000                       		dc.w @slope1-Map_Crab_internal
0000AE40 0000                       		dc.w @slope2-Map_Crab_internal
0000AE42 0000                       		dc.w @firing-Map_Crab_internal
0000AE44 0000                       		dc.w @ball1-Map_Crab_internal
0000AE46 0000                       		dc.w @ball2-Map_Crab_internal
0000AE48 04                         @stand:		dc.b 4
0000AE49 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000AE4E F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AE53 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AE58 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AE5D 04                         @walk:		dc.b 4
0000AE5E F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000AE63 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AE68 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AE6D 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AE72 04                         @slope1:	dc.b 4
0000AE73 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000AE78 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AE7D FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AE82 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AE87 04                         @slope2:	dc.b 4
0000AE88 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000AE8D EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AE92 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AE97 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AE9C 06                         @firing:	dc.b 6
0000AE9D F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000AEA2 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AEA7 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AEAC F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AEB1 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AEB6 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AEBB 01                         @ball1:		dc.b 1
0000AEBC F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000AEC1 01                         @ball2:		dc.b 1
0000AEC2 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000AEC8 00                         		even
0000AEC8 00                         		even
0000AEC8                            		include	"_incObj\06 Mozzietron.asm"
0000AEC8                            ; ===========================================================================
0000AEC8                            ; ---------------------------------------------------------------------------
0000AEC8                            ; Object 06 - Mozzietron enemy	(GHZ)
0000AEC8                            ; ---------------------------------------------------------------------------
0000AEC8                            
0000AEC8                            Mozzietron:					; XREF: Obj_Index
0000AEC8 7000                       		moveq	#0,d0
0000AECA 1028 0024                  		move.b	$24(a0),d0
0000AECE 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000AED2 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000AED6                            ; ===========================================================================
0000AED6 0000                       MozIndex:	dc.w MozMain-MozIndex
0000AED8 0000                       		dc.w MozAction-MozIndex
0000AEDA 0000                       		dc.w MozDelete-MozIndex
0000AEDC                            ; ===========================================================================
0000AEDC                            
0000AEDC                            MozMain:				; XREF: MozIndex
0000AEDC 5428 0024                  		addq.b	#2,$24(a0)
0000AEE0 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000AEE8 317C 0444 0002             		move.w	#$444,2(a0)
0000AEEE 117C 0004 0001             		move.b	#4,1(a0)
0000AEF4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AEFA 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000AF00 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000AF06                            MozAction:				; XREF: MozIndex
0000AF06 7000                       		moveq	#0,d0
0000AF08 1028 0025                  		move.b	$25(a0),d0
0000AF0C 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000AF10 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000AF14 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000AF1A 6100 0000                  		bsr.w	AnimateSprite
0000AF1E 6000 0000                  		bra.w	RememberState
0000AF22                            ; ===========================================================================
0000AF22 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000AF24 0000                       		dc.w MozChkNrSonic-MozIndex2
0000AF26 0000                       		dc.w MozPinned-MozIndex2
0000AF28                            ; ===========================================================================
0000AF28                            
0000AF28                            MozMove:				; XREF: MozIndex2
0000AF28 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AF2C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AF2E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AF34 6600                       		bne.s	MozFire	; if yes, branch
0000AF36 5428 0025                  		addq.b	#2,$25(a0)
0000AF3A 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000AF40 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000AF46 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000AF4C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AF52 6600                       		bne.s	locret_986C	; if not, branch
0000AF54 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000AF58                            
0000AF58                            locret_986C:
0000AF58 4E75                       		rts	
0000AF5A                            ; ===========================================================================
0000AF5A                            
0000AF5A                            MozFire:				; XREF: MozMove
0000AF5A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000AF60 6100 0000                  		bsr.w	ObjectFall
0000AF64 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000AF6A 4A41                       		tst.w	d1 ; is floor distance positive? 
0000AF6C 6A00                       		bpl.s   @return ; if yes, branch 
0000AF6E 303C 00B6                  		move.w    #$B6,d0
0000AF72 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000AF78 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000AF7E D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000AF82 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000AF86 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000AF8A                            		@return:
0000AF8A 4E75                       	    		rts
0000AF8C                            		
0000AF8C                            
0000AF8C                            ; ===========================================================================
0000AF8C                            
0000AF8C                            MozPinned:
0000AF8C 4E75                               rts
0000AF8E                                    
0000AF8E                            ; ===========================================================================
0000AF8E                            
0000AF8E                            MozChkDel:				; XREF: Obj55_DropFly
0000AF8E 4A28 0001                  		tst.b	1(a0)
0000AF92 6A00 0000                  		bpl.w	DeleteObject
0000AF96 4E75                       		rts	
0000AF98                            ; ===========================================================================
0000AF98                            
0000AF98                            MozChkNrSonic:			; XREF: MozIndex2
0000AF98                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AF98 6B00                       		bmi.s	MozChgDir
0000AF9A 6100 0000                  		bsr.w	SpeedToPos
0000AF9E 4A28 0034                  		tst.b	$34(a0)
0000AFA2 6600                       		bne.s	locret_992A
0000AFA4 3038 D008                  		move.w	($FFFFD008).w,d0
0000AFA8 9068 0008                  		sub.w	8(a0),d0
0000AFAC 6A00                       		bpl.s	MozSetNrSonic
0000AFAE 4440                       		neg.w	d0
0000AFB0                            
0000AFB0                            MozSetNrSonic:
0000AFB0 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000AFB4 6400                       		bcc.s	locret_992A	; if not, branch
0000AFB6 4A28 0001                  		tst.b	1(a0)
0000AFBA 6A00                       		bpl.s	locret_992A
0000AFBC 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AFC2 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AFC8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000AFCE 6000                       		bra.s	MozStop
0000AFD0                            ; ===========================================================================
0000AFD0                            
0000AFD0                            MozChgDir:				; XREF: MozChkNrSonic
0000AFD0 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AFD6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AFDC 317C 003B 0032             		move.w	#59,$32(a0)
0000AFE2                            
0000AFE2                            MozStop:				; XREF: MozSetNrSonic
0000AFE2 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000AFE6 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AFEC 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AFF2                            
0000AFF2                            locret_992A:
0000AFF2 4E75                       		rts	
0000AFF4                            ; ===========================================================================
0000AFF4                            
0000AFF4                            MozDelete:				; XREF: MozIndex
0000AFF4 6100 0000                  		bsr.w	DeleteObject
0000AFF8 4E75                       		rts	
0000AFF8 4E75                       		rts	
0000AFFA                            		include	"_incObj\22 Buzz Bomber.asm"
0000AFFA                            ; ===========================================================================
0000AFFA                            ; ---------------------------------------------------------------------------
0000AFFA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AFFA                            ; ---------------------------------------------------------------------------
0000AFFA                            
0000AFFA                            BuzzBomber:
0000AFFA 7000                       		moveq	#0,d0
0000AFFC 1028 0024                  		move.b	obRoutine(a0),d0
0000B000 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B004 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B008                            ; ===========================================================================
0000B008 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B00A 0000                       		dc.w Buzz_Action-Buzz_Index
0000B00C 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B00E                            
0000B00E =00000032                  buzz_timedelay:	equ $32
0000B00E =00000034                  buzz_buzzstatus:	equ $34
0000B00E =0000003C                  buzz_parent:	equ $3C
0000B00E                            ; ===========================================================================
0000B00E                            
0000B00E                            Buzz_Main:	; Routine 0
0000B00E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B012 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B01A 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B020 117C 0004 0001             		move.b	#4,obRender(a0)
0000B026 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B02C 117C 0008 0020             		move.b	#8,obColType(a0)
0000B032 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B038                            
0000B038                            Buzz_Action:	; Routine 2
0000B038 7000                       		moveq	#0,d0
0000B03A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B03E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B042 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B046 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B04C 6100 0000                  		bsr.w	AnimateSprite
0000B050 6000 0000                  		bra.w	RememberState
0000B054                            ; ===========================================================================
0000B054 0000                       @index:		dc.w @move-@index
0000B056 0000                       		dc.w @chknearsonic-@index
0000B058                            ; ===========================================================================
0000B058                            
0000B058                            @move:
0000B058 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B05C 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B05E 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B064 6600                       		bne.s	@fire		; if yes, branch
0000B066 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B06A 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B070 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B076 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B07C 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B082 6600                       		bne.s	@noflip		; if not, branch
0000B084 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B088                            
0000B088                            	@noflip:
0000B088 4E75                       		rts	
0000B08A                            ; ===========================================================================
0000B08A                            
0000B08A                            	@fire:
0000B08A 6100 0000                  		bsr.w	FindFreeObj
0000B08E 6600                       		bne.s	@fail
0000B090 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B094 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B09A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B0A0 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B0A6 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B0AC 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B0B2 303C 0018                  		move.w	#$18,d0
0000B0B6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B0BC 6600                       		bne.s	@noflip2	; if not, branch
0000B0BE 4440                       		neg.w	d0
0000B0C0 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B0C4                            
0000B0C4                            	@noflip2:
0000B0C4 D169 0008                  		add.w	d0,obX(a1)
0000B0C8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B0CE 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B0D4 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B0D8 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B0DE 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B0E4 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B0EA                            
0000B0EA                            	@fail:
0000B0EA 4E75                       		rts	
0000B0EC                            ; ===========================================================================
0000B0EC                            
0000B0EC                            @chknearsonic:
0000B0EC 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B0F0 6B00                       		bmi.s	@chgdirection
0000B0F2 6100 0000                  		bsr.w	SpeedToPos
0000B0F6 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B0FA 6600                       		bne.s	@keepgoing
0000B0FC 3038 D008                  		move.w	(v_player+obX).w,d0
0000B100 9068 0008                  		sub.w	obX(a0),d0
0000B104 6A00                       		bpl.s	@isleft
0000B106 4440                       		neg.w	d0
0000B108                            
0000B108                            	@isleft:
0000B108 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B10C 6400                       		bcc.s	@keepgoing	; if not, branch
0000B10E 4A28 0001                  		tst.b	obRender(a0)
0000B112 6A00                       		bpl.s	@keepgoing
0000B114 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B11A 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B120 6000                       		bra.s	@stop
0000B122                            ; ===========================================================================
0000B122                            
0000B122                            	@chgdirection:
0000B122 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B128 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B12E 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B134                            
0000B134                            	@stop:
0000B134 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B138 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B13E 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B144                            
0000B144                            @keepgoing:
0000B144 4E75                       		rts	
0000B146                            ; ===========================================================================
0000B146                            
0000B146                            Buzz_Delete:	; Routine 4
0000B146 6100 0000                  		bsr.w	DeleteObject
0000B14A 4E75                       		rts	
0000B14A 4E75                       		rts	
0000B14C                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C                            ; Object 23 - missile that Buzz	Bomber throws
0000B14C                            ; ---------------------------------------------------------------------------
0000B14C                            
0000B14C                            Missile:
0000B14C 7000                       		moveq	#0,d0
0000B14E 1028 0024                  		move.b	obRoutine(a0),d0
0000B152 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B156 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B15A                            ; ===========================================================================
0000B15A 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B15C 0000                       		dc.w Msl_Animate-Msl_Index
0000B15E 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B160 0000                       		dc.w Msl_Delete-Msl_Index
0000B162 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B164                            
0000B164 =0000003C                  msl_parent:	equ $3C
0000B164                            ; ===========================================================================
0000B164                            
0000B164                            Msl_Main:	; Routine 0
0000B164 5368 0032                  		subq.w	#1,$32(a0)
0000B168 6A00                       		bpl.s	Msl_ChkCancel
0000B16A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B16E 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B176 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B17C 117C 0004 0001             		move.b	#4,obRender(a0)
0000B182 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B188 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B18E 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B194 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B198 6700                       		beq.s	Msl_Animate	; if not, branch
0000B19A                            
0000B19A 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B1A0 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B1A6 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B1AC 6000                       		bra.s	Msl_Animate2
0000B1AE                            ; ===========================================================================
0000B1AE                            
0000B1AE                            Msl_Animate:	; Routine 2
0000B1AE 6100                       		bsr.s	Msl_ChkCancel
0000B1B0 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B1B6 6100 0000                  		bsr.w	AnimateSprite
0000B1BA 6000 0000                  		bra.w	DisplaySprite
0000B1BE                            
0000B1BE                            ; ---------------------------------------------------------------------------
0000B1BE                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B1BE                            ; destroyed, and if it has, then cancel	the missile
0000B1BE                            ; ---------------------------------------------------------------------------
0000B1BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1BE                            
0000B1BE                            
0000B1BE                            Msl_ChkCancel:
0000B1BE 2268 003C                  		movea.l	msl_parent(a0),a1
0000B1C2 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B1C6 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B1C8 4E75                       		rts	
0000B1CA                            ; End of function Msl_ChkCancel
0000B1CA                            
0000B1CA                            ; ===========================================================================
0000B1CA                            
0000B1CA                            Msl_FromBuzz:	; Routine 4
0000B1CA 0828 0007 0022             		btst	#7,obStatus(a0)
0000B1D0 6600                       		bne.s	@explode
0000B1D2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B1D8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B1DE 6100 0000                  		bsr.w	SpeedToPos
0000B1E2 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B1E8 6100 0000                  		bsr.w	AnimateSprite
0000B1EC 6100 0000                  		bsr.w	DisplaySprite
0000B1F0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B1F4 0640 00E0                  		addi.w	#$E0,d0
0000B1F8 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B1FC 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B1FE 4E75                       		rts	
0000B200                            ; ===========================================================================
0000B200                            
0000B200                            	@explode:
0000B200 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B204 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B20A 6000 F1D8                  		bra.w	MissileDissolve
0000B20E                            ; ===========================================================================
0000B20E                            
0000B20E                            Msl_Delete:	; Routine 6
0000B20E 6100 0000                  		bsr.w	DeleteObject
0000B212 4E75                       		rts	
0000B214                            ; ===========================================================================
0000B214                            
0000B214                            Msl_FromNewt:	; Routine 8
0000B214 4A28 0001                  		tst.b	obRender(a0)
0000B218 6AF4                       		bpl.s	Msl_Delete
0000B21A 6100 0000                  		bsr.w	SpeedToPos
0000B21E                            
0000B21E                            Msl_Animate2:
0000B21E 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B224 6100 0000                  		bsr.w	AnimateSprite
0000B228 6100 0000                  		bsr.w	DisplaySprite
0000B22C 4E75                       		rts	
0000B22C 4E75                       		rts	
0000B22E                            		include	"_anim\Mozzietron.asm"
0000B22E                            ; ---------------------------------------------------------------------------
0000B22E                            ; Animation script - Buzz Bomber enemy
0000B22E                            ; ---------------------------------------------------------------------------
0000B22E 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B230 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B232 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B234 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B238 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B23C 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B244 00                         		even
0000B244 00                         		even
0000B244                            		include	"_anim\Buzz Bomber.asm"
0000B244                            ; ---------------------------------------------------------------------------
0000B244                            ; Animation script - Buzz Bomber enemy
0000B244                            ; ---------------------------------------------------------------------------
0000B244 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B246 0000                       		dc.w @fly2-Ani_Buzz
0000B248 0000                       		dc.w @fires-Ani_Buzz
0000B24A 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B24E 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B252 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B256                            		even
0000B256                            		even
0000B256                            		include	"_anim\Buzz Bomber Missile.asm"
0000B256                            ; ---------------------------------------------------------------------------
0000B256                            ; Animation script - missile that Buzz Bomber throws
0000B256                            ; ---------------------------------------------------------------------------
0000B256 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B258 0000                       		dc.w @missile-Ani_Missile
0000B25A 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B25E 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B262                            		even
0000B262                            		even
0000B262                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B262                            ; --------------------------------------------------------------------------------
0000B262                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B262                            ; --------------------------------------------------------------------------------
0000B262                            
0000B262                            SME_qvHIs:	
0000B262 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B266 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B26A 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B26E 02                         SME_qvHIs_C:	dc.b 2	
0000B26F FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B274 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B279 01                         SME_qvHIs_17:	dc.b 1	
0000B27A F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B27F 02                         SME_qvHIs_1D:	dc.b 2	
0000B280 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B285 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B28A 03                         SME_qvHIs_28:	dc.b 3	
0000B28B DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B290 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B295 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B29A 04                         SME_qvHIs_38:	dc.b 4	
0000B29B E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B2A0 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B2A5 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B2AA F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B2AF 04                         SME_qvHIs_4D:	dc.b 4	
0000B2B0 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B2B5 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B2BA F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B2BF F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B2C4                            		even
0000B2C4                            		even
0000B2C4                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B2C4                            ; --------------------------------------------------------------------------------
0000B2C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B2C4                            ; --------------------------------------------------------------------------------
0000B2C4                            
0000B2C4                            SME_yccqJ:	
0000B2C4 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B2C8 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B2CC 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B2D0 06                         SME_yccqJ_C:	dc.b 6	
0000B2D1 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B2D6 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B2DB 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B2E0 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B2E5 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B2EA EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B2EF 06                         SME_yccqJ_2B:	dc.b 6	
0000B2F0 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B2F5 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B2FA 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B2FF 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B304 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B309 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B30E 06                         SME_yccqJ_4A:	dc.b 6	
0000B30F F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B314 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B319 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B31E 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B323 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B328 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B32D 06                         SME_yccqJ_69:	dc.b 6	
0000B32E F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B333 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B338 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B33D 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B342 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B347 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B34C 07                         SME_yccqJ_88:	dc.b 7	
0000B34D F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B352 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B357 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B35C EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B361 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B366 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B36B EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B370 04                         SME_yccqJ_AC:	dc.b 4	
0000B371 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B376 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B37B 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B380 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B386 00                         		even
0000B386 00                         		even
0000B386                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B386                            ; ---------------------------------------------------------------------------
0000B386                            ; Sprite mappings - missile that Buzz Bomber throws
0000B386                            ; ---------------------------------------------------------------------------
0000B386                            Map_Missile_internal:
0000B386 0000                       		dc.w @Flare1-Map_Missile_internal
0000B388 0000                       		dc.w @Flare2-Map_Missile_internal
0000B38A 0000                       		dc.w @Ball1-Map_Missile_internal
0000B38C 0000                       		dc.w @Ball2-Map_Missile_internal
0000B38E 01                         @Flare1:	dc.b 1
0000B38F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B394 01                         @Flare2:	dc.b 1
0000B395 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B39A 01                         @Ball1:		dc.b 1
0000B39B F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B3A0 01                         @Ball2:		dc.b 1
0000B3A1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B3A6                            		even
0000B3A6                            		even
0000B3A6                            
0000B3A6                            		include	"_incObj\25 & 37 Rings.asm"
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6                            ; Object 25 - rings
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6                            
0000B3A6                            Rings:
0000B3A6 7000                       		moveq	#0,d0
0000B3A8 1028 0024                  		move.b	obRoutine(a0),d0
0000B3AC 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B3B0 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B3B4                            ; ===========================================================================
0000B3B4                            Ring_Index:
0000B3B4 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B3B6 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B3B8 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B3BA 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B3BC 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B3BE 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B3C0 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B3C2 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B3C4 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B3C6                            
0000B3C6 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B3C6 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B3C6 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B3C6 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B3C6 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B3C6 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B3C6 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B3C6 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B3C6 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B3C6                            ; ---------------------------------------------------------------------------
0000B3C6                            ; Distances between rings (format: horizontal, vertical)
0000B3C6                            ; ---------------------------------------------------------------------------
0000B3C6 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B3C8 1800                       		dc.b $18, 0		; horizontal normal
0000B3CA 2000                       		dc.b $20, 0		; horizontal wide
0000B3CC 0010                       		dc.b 0,	$10		; vertical tight
0000B3CE 0018                       		dc.b 0,	$18		; vertical normal
0000B3D0 0020                       		dc.b 0,	$20		; vertical wide
0000B3D2 1010                       		dc.b $10, $10		; diagonal
0000B3D4 1818                       		dc.b $18, $18
0000B3D6 2020                       		dc.b $20, $20
0000B3D8 F010                       		dc.b $F0, $10
0000B3DA E818                       		dc.b $E8, $18
0000B3DC E020                       		dc.b $E0, $20
0000B3DE 1008                       		dc.b $10, 8
0000B3E0 1810                       		dc.b $18, $10
0000B3E2 F008                       		dc.b $F0, 8
0000B3E4 E810                       		dc.b $E8, $10
0000B3E6                            ; ===========================================================================
0000B3E6                            
0000B3E6                            Ring_Main:	; Routine 0
0000B3E6 45F8 FC00                  		lea	(v_objstate).w,a2
0000B3EA 7000                       		moveq	#0,d0
0000B3EC 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B3F0 45F2 0002                  		lea	2(a2,d0.w),a2
0000B3F4 1812                       		move.b	(a2),d4
0000B3F6 1228 0028                  		move.b	obSubtype(a0),d1
0000B3FA 1001                       		move.b	d1,d0
0000B3FC 0241 0007                  		andi.w	#7,d1
0000B400 0C41 0007                  		cmpi.w	#7,d1
0000B404 6600                       		bne.s	loc_9B80
0000B406 7206                       		moveq	#6,d1
0000B408                            
0000B408                            	loc_9B80:
0000B408 4841                       		swap	d1
0000B40A 323C 0000                  		move.w	#0,d1
0000B40E E808                       		lsr.b	#4,d0
0000B410 D040                       		add.w	d0,d0
0000B412 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B416 4885                       		ext.w	d5
0000B418 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B41C 4886                       		ext.w	d6
0000B41E 2248                       		movea.l	a0,a1
0000B420 3428 0008                  		move.w	obX(a0),d2
0000B424 3628 000C                  		move.w	obY(a0),d3
0000B428 E20C                       		lsr.b	#1,d4
0000B42A 6500                       		bcs.s	loc_9C02
0000B42C 0892 0007                  		bclr	#7,(a2)
0000B430 6000                       		bra.s	loc_9BBA
0000B432                            ; ===========================================================================
0000B432                            
0000B432                            Ring_MakeRings:
0000B432 4841                       		swap	d1
0000B434 E20C                       		lsr.b	#1,d4
0000B436 6500                       		bcs.s	loc_9C02
0000B438 0892 0007                  		bclr	#7,(a2)
0000B43C 6100 0000                  		bsr.w	FindFreeObj
0000B440 6600                       		bne.s	loc_9C0E
0000B442                            
0000B442                            loc_9BBA:
0000B442 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B446 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B44A 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B44E 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B454 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B458 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B460 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B466 137C 0004 0001             		move.b	#4,obRender(a1)
0000B46C 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B472 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B478 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B47E 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B484 1341 0034                  		move.b	d1,$34(a1)
0000B488                            
0000B488                            loc_9C02:
0000B488 5241                       		addq.w	#1,d1
0000B48A D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B48C D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B48E 4841                       		swap	d1
0000B490 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B494                            
0000B494                            loc_9C0E:
0000B494 0812 0000                  		btst	#0,(a2)
0000B498 6600 0000                  		bne.w	DeleteObject
0000B49C                            
0000B49C                            Ring_Animate:	; Routine 2
0000B49C 4A38 FE2C                  		tst.b	(v_shield).w
0000B4A0 6700                       		beq.s	@skip
0000B4A2 4A28 0001                  		tst.b	obRender(a0)
0000B4A6 6A00                       		bpl.s	@skip
0000B4A8                            		
0000B4A8 43F8 D000                  		lea (v_player).w,a1
0000B4AC                            		
0000B4AC 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B4B0 9068 0008                  		sub.w	obX(a0),d0
0000B4B4 6A00                       		bpl.s	@a1
0000B4B6 4440                       		neg.w	d0
0000B4B8                            		
0000B4B8                            	@a1:
0000B4B8 0C40 0040                  		cmpi.w	#$40,d0
0000B4BC 6200                       		bhi.s	@skip
0000B4BE                            		
0000B4BE 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B4C2 9068 000C                  		sub.w	obY(a0),d0
0000B4C6 6A00                       		bpl.s	@a2
0000B4C8 4440                       		neg.w	d0
0000B4CA                            		
0000B4CA                            	@a2:
0000B4CA 0C40 0040                  		cmpi.w	#$40,d0
0000B4CE 6200                       		bhi.s	@skip
0000B4D0                            		
0000B4D0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B4D6 45F8 FC00                  		lea	(v_objstate).w,a2
0000B4DA 7000                       		moveq	#0,d0
0000B4DC 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B4E0 1228 0034                  		move.b	$34(a0),d1
0000B4E4 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B4E8                            		
0000B4E8                            	@skip:
0000B4E8 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B4EE 6100 0000                  		bsr.w	DisplaySprite
0000B50E 4E75                       		rts	
0000B510                            ; ===========================================================================
0000B510                            
0000B510                            Ring_Collect:	; Routine 4
0000B510 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B514 117C 0000 0020             		move.b	#0,obColType(a0)
0000B51A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B520 6100 0000                  		bsr.w	CollectRing
0000B524 45F8 FC00                  		lea	(v_objstate).w,a2
0000B528 7000                       		moveq	#0,d0
0000B52A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B52E 1228 0034                  		move.b	$34(a0),d1
0000B532 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B536                            
0000B536                            Ring_Sparkle:	; Routine 6
0000B536 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B53C 6100 0000                  		bsr.w	AnimateSprite
0000B540 6000 0000                  		bra.w	DisplaySprite
0000B544                            ; ===========================================================================
0000B544                            
0000B544                            Ring_Delete:	; Routine 8
0000B544 6000 0000                  		bra.w	DeleteObject
0000B548                            
0000B548                            Ring_Attract:	; Routine $A
0000B548 4A38 FE2C                  		tst.b	(v_shield).w
0000B54C 6600                       		bne.s	@skip
0000B54E 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B552 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B558 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B55E 6000                       		bra.s	@display
0000B560                            		
0000B560                            	@skip:
0000B560 323C 0030                  		move.w	#$30,d1	; horizontal
0000B564 3038 D008                  		move.w	(v_player+obX).w,d0
0000B568 B068 0008                  		cmp.w	obX(a0),d0
0000B56C 6400                       		bcc.s	@a1
0000B56E 4441                       		neg.w	d1
0000B570 4A68 0010                  		tst.w	obVelX(a0)
0000B574 6B00                       		bmi.s	@a2
0000B576 D241                       		add.w	d1,d1
0000B578 D241                       		add.w	d1,d1
0000B57A 6000                       		bra.s	@a2
0000B57C                            
0000B57C                            	@a1:
0000B57C 4A68 0010                  		tst.w	obVelX(a0)
0000B580 6A00                       		bpl.s	@a2
0000B582 D241                       		add.w	d1,d1
0000B584 D241                       		add.w	d1,d1
0000B586                            
0000B586                            	@a2:
0000B586 D368 0010                  		add.w	d1,obVelX(a0)
0000B58A 323C 0030                  		move.w	#$30,d1	; vertical
0000B58E 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B592 B068 000C                  		cmp.w	obY(a0),d0
0000B596 6400                       		bcc.s	@a3
0000B598 4441                       		neg.w	d1
0000B59A 4A68 0012                  		tst.w	obVelY(a0)
0000B59E 6B00                       		bmi.s	@a4
0000B5A0 D241                       		add.w	d1,d1
0000B5A2 D241                       		add.w	d1,d1
0000B5A4 6000                       		bra.s	@a4
0000B5A6                            
0000B5A6                            	@a3:
0000B5A6 4A68 0012                  		tst.w	obVelY(a0)
0000B5AA 6A00                       		bpl.s	@a4
0000B5AC D241                       		add.w	d1,d1
0000B5AE D241                       		add.w	d1,d1
0000B5B0                            
0000B5B0                            	@a4:
0000B5B0 D368 0012                  		add.w	d1,obVelY(a0)
0000B5B4 6100 0000                  		bsr.w	SpeedToPos
0000B5B8                            		
0000B5B8                            	@display:
0000B5B8 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B5BE 6000 0000                  		bra.w	DisplaySprite
0000B5C2                            
0000B5C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5C2                            
0000B5C2                            
0000B5C2                            CollectRing:
0000B5C2 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B5C6 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B5CC 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B5D0 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B5D6 6500                       		bcs.s	@playsnd	; if yes, branch
0000B5D8 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B5DE 6700                       		beq.s	@got100
0000B5E0 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B5E6 6500                       		bcs.s	@playsnd	; if yes, branch
0000B5E8 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B5EE 6600                       		bne.s	@playsnd
0000B5F0                            
0000B5F0                            	@got100:
0000B5F0 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B5F4 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B5F8 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B5FC                            		
0000B5FC                            
0000B5FC                            	@playsnd:
0000B5FC 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000B602                            ; End of function CollectRing
0000B602                            
0000B602                            ; ===========================================================================
0000B602                            ; ---------------------------------------------------------------------------
0000B602                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B602                            ; ---------------------------------------------------------------------------
0000B602                            
0000B602                            RingLoss:
0000B602 7000                       		moveq	#0,d0
0000B604 1028 0024                  		move.b	obRoutine(a0),d0
0000B608 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B60C 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B610                            ; ===========================================================================
0000B610 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B612 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B614 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B616 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B618 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B61A                            ; ===========================================================================
0000B61A                            
0000B61A                            RLoss_Count:	; Routine 0
0000B61A 2248                       		movea.l	a0,a1
0000B61C 7A00                       		moveq	#0,d5
0000B61E 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B622 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B628 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B62A 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B62E 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B634 6700                               beq.s   @cont                       ; if not, branch
0000B636 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B63C 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B63E                            @cont:
0000B63E BA40                               cmp.w   d0,d5
0000B640 6500                               bcs.s   @belowmax
0000B642 3A00                               move.w  d0,d5
0000B644                            
0000B644                            @belowmax:
0000B644 5345                               subq.w  #1,d5
0000B646 383C 0288                          move.w  #$288,d4
0000B64A 6000                       		bra.s	@makerings
0000B64C                            ; ===========================================================================
0000B64C                            
0000B64C                            	@loop:
0000B64C 6100 0000                  		bsr.w	FindFreeObj
0000B650 6600 0000                  		bne.w	@resetcounter
0000B654                            
0000B654                            @makerings:
0000B654 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B658 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B65C 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B662 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B668 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B66E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B674 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B67C 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B682 137C 0004 0001             		move.b	#4,obRender(a1)
0000B688 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B68E 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B694 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B698 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B69A 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B69E BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B6A2 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B6A4 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B6A6 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B6A8                            @skiphalvingvel:
0000B6A8 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000B6AC 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000B6B0 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000B6B4                            
0000B6B4                            @resetcounter:
0000B6B4 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000B6BA 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000B6C0 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000B6C6 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B6C8 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000B6CC 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000B6DA                            
0000B6DA                            RLoss_Bounce:	; Routine 2
0000B6DA 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000B6E0 6100 0000                  		bsr.w	SpeedToPos
0000B6E4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B6EA 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B6EE 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B6F0 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B6F4 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B6F8 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B6FA 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B700                            	@skipbounceslow:
0000B700 6B00                       		bmi.s	@chkdel
0000B702 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000B706 D007                       		add.b	d7,d0
0000B708 0200 0003                  		andi.b	#3,d0
0000B70C 6600                       		bne.s	@chkdel
0000B70E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B714 4A41                       		tst.w	d1
0000B716 6A00                       		bpl.s	@chkdel
0000B718 D368 000C                  		add.w	d1,obY(a0)
0000B71C 3028 0012                  		move.w	obVelY(a0),d0
0000B720 E440                       		asr.w	#2,d0
0000B722 9168 0012                  		sub.w	d0,obVelY(a0)
0000B726 4468 0012                  		neg.w	obVelY(a0)
0000B72A                            
0000B72A                            	@chkdel:
0000B72A 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B72E 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B732 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B736 0640 00E0                  		addi.w	#$E0,d0
0000B73A B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000B73E 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000B742 4A38 FE2C                  		tst.b	(v_shield).w
0000B746 6700                       		beq.s	@skip
0000B748 4A28 0001                  		tst.b	obRender(a0)
0000B74C 6A00                       		bpl.s	@skip
0000B74E                            		
0000B74E 43F8 D000                  		lea (v_player).w,a1
0000B752                            		
0000B752 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B756 9068 0008                  		sub.w	obX(a0),d0
0000B75A 6A00                       		bpl.s	@a1
0000B75C 4440                       		neg.w	d0
0000B75E                            		
0000B75E                            	@a1:
0000B75E 0C40 00A0                  		cmpi.w	#$A0,d0
0000B762 6200                       		bhi.s	@skip
0000B764                            		
0000B764 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B768 9068 000C                  		sub.w	obY(a0),d0
0000B76C 6A00                       		bpl.s	@a2
0000B76E 4440                       		neg.w	d0
0000B770                            		
0000B770                            	@a2:
0000B770 0C40 00A0                  		cmpi.w	#$A0,d0
0000B774 6200                       		bhi.s	@skip
0000B776                            		
0000B776 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B77C 10BC 0000                  		move.b	#id_Rings,0(a0)
0000B780                            		
0000B780                            	@skip:		
0000B780 43F8 AD80                          lea     v_spritequeue+$180,a1
0000B784 D2FC 0080                          adda.w  #$80,a1
0000B788 0C51 007E                          cmpi.w  #$7E,(a1)
0000B78C 6400                               bcc.s   @cont
0000B78E 5451                               addq.w  #2,(a1)
0000B790 D2D1                               adda.w  (a1),a1
0000B792 3288                               move.w  a0,(a1)
0000B794                            		
0000B794                            	@cont:
0000B794 4E75                               rts		
0000B796                            ; ===========================================================================
0000B796                            
0000B796                            RLoss_Collect:	; Routine 4
0000B796 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B79A 117C 0000 0020             		move.b	#0,obColType(a0)
0000B7A0 6100 FE20                  		bsr.w	CollectRing
0000B7A4                            
0000B7A4                            RLoss_Sparkle:	; Routine 6
0000B7A4 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B7AA 6100 0000                  		bsr.w	AnimateSprite
0000B7AE 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000B7B2 0C51 007E                          cmpi.w  #$7E,(a1)
0000B7B6 6400                               bcc.s   @cont
0000B7B8 5451                               addq.w  #2,(a1)
0000B7BA D2D1                               adda.w  (a1),a1
0000B7BC 3288                               move.w  a0,(a1)
0000B7BE                            			
0000B7BE                            	@cont:
0000B7BE 4E75                               rts
0000B7C0                            ; ===========================================================================
0000B7C0                            
0000B7C0                            RLoss_Delete:	; Routine 8
0000B7C0 6000 0000                  		bra.w	DeleteObject
0000B7C4                            
0000B7C4                            ; ----------------------------------------------------------------------------------------------
0000B7C4                            ; Ring Spawn Array 
0000B7C4                            ; ----------------------------------------------------------------------------------------------
0000B7C4                            
0000B7C4 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000B7D4 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000B7E4 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000B7F4 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000B804 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000B814 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000B824 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000B834 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000B844                                            even
0000B844                            ; ===========================================================================
0000B844                            ; -------------------------------------------------------------------------------------
0000B844                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000B844                            ; -------------------------------------------------------------------------------------
0000B844                            
0000B844                            SpillRingData_Water:
0000B844 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000B854 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000B864 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000B874 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000B884 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000B894 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000B8A4 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000B8B4 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000B8C4                                            even
0000B8C4                            ; ===========================================================================				
0000B8C4                            ; ===========================================================================				
0000B8C4                            		include	"_incObj\4B Giant Ring.asm"
0000B8C4                            ; ---------------------------------------------------------------------------
0000B8C4                            ; Object 4B - giant ring for entry to special stage
0000B8C4                            ; ---------------------------------------------------------------------------
0000B8C4                            
0000B8C4                            GiantRing:
0000B8C4 7000                       		moveq	#0,d0
0000B8C6 1028 0024                  		move.b	obRoutine(a0),d0
0000B8CA 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000B8CE 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000B8D2                            ; ===========================================================================
0000B8D2 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000B8D4 0000                       		dc.w GRing_Animate-GRing_Index
0000B8D6 0000                       		dc.w GRing_Collect-GRing_Index
0000B8D8 0000                       		dc.w GRing_Delete-GRing_Index
0000B8DA                            ; ===========================================================================
0000B8DA                            
0000B8DA                            GRing_Main:    ; Routine 0
0000B8DA 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000B8E2 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000B8E8 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B8EE 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000B8F4 4A28 0001                  		tst.b	obRender(a0)
0000B8F8 6A00                       		bpl.s	GRing_Animate
0000B8FA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000B900 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000B904 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000B90A 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000B90C                            
0000B90C 4E75                       		rts    
0000B90E                            ; ===========================================================================
0000B90E                            
0000B90E                            GRing_Okay:
0000B90E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B912 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000B918 117C 0052 0020             		move.b	#$52,obColType(a0)
0000B91E 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000B924                            
0000B924                            GRing_Animate:	; Routine 2
0000B924 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000B948 6000 0000                  		bra.w	DisplaySprite
0000B94C                            ; ===========================================================================
0000B94C                            
0000B94C                            GRing_Collect:	; Routine 4
0000B94C 5528 0024                  		subq.b	#2,obRoutine(a0)
0000B950 117C 0000 0020             		move.b	#0,obColType(a0)
0000B956 6100 0000                  		bsr.w	FindFreeObj
0000B95A 6600 0000                  		bne.w	GRing_PlaySnd
0000B95E 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000B962 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B968 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B96E 2348 003C                  		move.l	a0,$3C(a1)
0000B972 3038 D008                  		move.w	(v_player+obX).w,d0
0000B976 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000B97A 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000B97C 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000B982 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000B988 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000B98E                            		
0000B98E                            GRing_PlaySnd:
0000B998 608A                       		bra.s	GRing_Animate
0000B99A                            ; ===========================================================================
0000B99A                            
0000B99A                            GRing_Delete:	; Routine 6
0000B99A 6000 0000                  		bra.w	DeleteObject
0000B99A 6000 0000                  		bra.w	DeleteObject
0000B99E                            		include	"_incObj\7C Ring Flash.asm"
0000B99E                            ; ---------------------------------------------------------------------------
0000B99E                            ; Object 7C - flash effect when	you collect the	giant ring
0000B99E                            ; ---------------------------------------------------------------------------
0000B99E                            
0000B99E                            RingFlash:
0000B99E 7000                       		moveq	#0,d0
0000B9A0 1028 0024                  		move.b	obRoutine(a0),d0
0000B9A4 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000B9A8 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000B9AC                            ; ===========================================================================
0000B9AC 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000B9AE 0000                       		dc.w Flash_ChkDel-Flash_Index
0000B9B0 0000                       		dc.w Flash_Delete-Flash_Index
0000B9B2                            ; ===========================================================================
0000B9B2                            
0000B9B2                            Flash_Main:	; Routine 0
0000B9B2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B9B6 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000B9BE 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000B9C4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B9CA 317C 0000 0018             		move.w	#0,obPriority(a0)
0000B9D0 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000B9D6 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000B9DC                            
0000B9DC                            Flash_ChkDel:	; Routine 2
0000B9DC 6100                       		bsr.s	Flash_Collect
0000B9FC 6000 0000                  		bra.w	DisplaySprite
0000BA00                            
0000BA00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA00                            
0000BA00                            
0000BA00                            Flash_Collect:
0000BA00 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BA04 6A00                       		bpl.s	locret_9F76
0000BA06 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BA0C 5228 001A                  		addq.b	#1,obFrame(a0)
0000BA10 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BA16 6400                       		bcc.s	Flash_End	; if yes, branch
0000BA18 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BA1E 6600                       		bne.s	locret_9F76	; if not, branch
0000BA20 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BA24 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BA2A 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BA30 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BA36 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BA3A 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BA3E                            
0000BA3E                            locret_9F76:
0000BA3E 4E75                       		rts	
0000BA40                            ; ===========================================================================
0000BA40                            
0000BA40                            Flash_End:
0000BA40 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA44 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BA4A 588F                       		addq.l	#4,sp
0000BA4C 4E75                       		rts	
0000BA4E                            ; End of function Flash_Collect
0000BA4E                            
0000BA4E                            ; ===========================================================================
0000BA4E                            
0000BA4E                            Flash_Delete:	; Routine 4
0000BA4E 6000 0000                  		bra.w	DeleteObject
0000BA4E 6000 0000                  		bra.w	DeleteObject
0000BA52                            
0000BA52                            		include	"_anim\Rings.asm"
0000BA52                            ; ---------------------------------------------------------------------------
0000BA52                            ; Animation script - ring
0000BA52                            ; ---------------------------------------------------------------------------
0000BA52 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BA54 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BA5A                            		even
0000BA5A                            		even
0000BA5A                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BA5A                            ; --------------------------------------------------------------------------------
0000BA5A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA5A                            ; --------------------------------------------------------------------------------
0000BA5A                            
0000BA5A                            SME_aSMQh:	
0000BA5A 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BA5E 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BA62 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BA66 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BA6A 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BA6E 01                         SME_aSMQh_14:	dc.b 1	
0000BA6F F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BA74 01                         SME_aSMQh_1A:	dc.b 1	
0000BA75 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BA7A 01                         SME_aSMQh_20:	dc.b 1	
0000BA7B F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BA80 01                         SME_aSMQh_26:	dc.b 1	
0000BA81 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BA86 01                         SME_aSMQh_2C:	dc.b 1	
0000BA87 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BA8C 01                         SME_aSMQh_32:	dc.b 1	
0000BA8D F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BA92 01                         SME_aSMQh_38:	dc.b 1	
0000BA93 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BA98 01                         SME_aSMQh_3E:	dc.b 1	
0000BA99 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BA9E 01                         SME_aSMQh_44:	dc.b 1	
0000BA9F F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BAA4 01                         SME_aSMQh_4A:	dc.b 1	
0000BAA5 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BAAA                            		even
0000BAAA                            		even
0000BAAA                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BAAA                            ; ---------------------------------------------------------------------------
0000BAAA                            ; Sprite mappings - giant ring
0000BAAA                            ; ---------------------------------------------------------------------------
0000BAAA                            Map_GRing_internal:
0000BAAA 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BAAC 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BAAE 0000                       		dc.w byte_A036-Map_GRing_internal
0000BAB0 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BAB2 0A                         byte_9FDA:	dc.b $A
0000BAB3 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BAB8 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BABD E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BAC2 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BAC7 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BACC F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BAD1 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BAD6 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BADB 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BAE0 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BAE5 08                         byte_A00D:	dc.b 8
0000BAE6 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BAEB E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BAF0 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BAF5 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BAFA F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BAFF 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BB04 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BB09 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BB0E 04                         byte_A036:	dc.b 4
0000BB0F E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BB14 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BB19 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BB1E 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BB23 08                         byte_A04B:	dc.b 8
0000BB24 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BB29 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BB2E E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BB33 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BB38 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BB3D 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BB42 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BB47 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BB4C                            		even
0000BB4C                            		even
0000BB4C                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BB4C                            ; ---------------------------------------------------------------------------
0000BB4C                            ; Sprite mappings - flash effect when you collect the giant ring
0000BB4C                            ; ---------------------------------------------------------------------------
0000BB4C                            Map_Flash_internal:
0000BB4C 0000                       		dc.w byte_A084-Map_Flash_internal
0000BB4E 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BB50 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BB52 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BB54 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BB56 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BB58 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BB5A 0000                       		dc.w byte_A103-Map_Flash_internal
0000BB5C 02                         byte_A084:	dc.b 2
0000BB5D E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BB62 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BB67 04                         byte_A08F:	dc.b 4
0000BB68 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BB6D E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BB72 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BB77 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BB7C 04                         byte_A0A4:	dc.b 4
0000BB7D E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BB82 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BB87 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BB8C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BB91 04                         byte_A0B9:	dc.b 4
0000BB92 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BB97 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BB9C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BBA1 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BBA6 04                         byte_A0CE:	dc.b 4
0000BBA7 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BBAC E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BBB1 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BBB6 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BBBB 04                         byte_A0E3:	dc.b 4
0000BBBC E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BBC1 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BBC6 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BBCB 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BBD0 02                         byte_A0F8:	dc.b 2
0000BBD1 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BBD6 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BBDB 04                         byte_A103:	dc.b 4
0000BBDC E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BBE1 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BBE6 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BBEB 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BBF0                            		even
0000BBF0                            		even
0000BBF0                            		include	"_incObj\26 Monitor.asm"
0000BBF0                            ; ---------------------------------------------------------------------------
0000BBF0                            ; Object 26 - monitors
0000BBF0                            ; ---------------------------------------------------------------------------
0000BBF0                            
0000BBF0                            Monitor:
0000BBF0 7000                       		moveq	#0,d0
0000BBF2 1028 0024                  		move.b	obRoutine(a0),d0
0000BBF6 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BBFA 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BBFE                            ; ===========================================================================
0000BBFE 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BC00 0000                       		dc.w Mon_Solid-Mon_Index
0000BC02 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BC04 0000                       		dc.w Mon_Animate-Mon_Index
0000BC06 0000                       		dc.w Mon_Display-Mon_Index
0000BC08                            ; ===========================================================================
0000BC08                            
0000BC08                            Mon_Main:	; Routine 0
0000BC08 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC0C 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BC12 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BC18 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BC20 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BC26 117C 0004 0001             		move.b	#4,obRender(a0)
0000BC2C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BC32 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BC38 45F8 FC00                  		lea	(v_objstate).w,a2
0000BC3C 7000                       		moveq	#0,d0
0000BC3E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BC42 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BC48 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BC4E 6700                       		beq.s	@notbroken	; if not, branch
0000BC50 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BC56 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BC5C 4E75                       		rts	
0000BC5E                            ; ===========================================================================
0000BC5E                            
0000BC5E                            	@notbroken:
0000BC5E 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BC64 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BC6A                            
0000BC6A                            Mon_Solid:	; Routine 2
0000BC6A 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BC6E 6700                       		beq.s	@normal		; if not, branch
0000BC70 5500                       		subq.b	#2,d0
0000BC72 6600                       		bne.s	@fall
0000BC74                            
0000BC74                            		; 2nd Routine 2
0000BC74 7200                       		moveq	#0,d1
0000BC76 1228 0014                  		move.b	obActWid(a0),d1
0000BC7A 0641 000B                  		addi.w	#$B,d1
0000BC7E 6100 CFEC                  		bsr.w	ExitPlatform
0000BC82 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BC88 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BC8C 4228 0025                  		clr.b	ob2ndRout(a0)
0000BC90 6000 0000                  		bra.w	Mon_Animate
0000BC94                            ; ===========================================================================
0000BC94                            
0000BC94                            	@ontop:
0000BC94 363C 0010                  		move.w	#$10,d3
0000BC98 3428 0008                  		move.w	obX(a0),d2
0000BC9C 6100 D52C                  		bsr.w	MvSonicOnPtfm
0000BCA0 6000 0000                  		bra.w	Mon_Animate
0000BCA4                            ; ===========================================================================
0000BCA4                            
0000BCA4                            @fall:		; 2nd Routine 4
0000BCA4 6100 0000                  		bsr.w	ObjectFall
0000BCA8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BCAE 4A41                       		tst.w	d1
0000BCB0 6A00 0000                  		bpl.w	Mon_Animate
0000BCB4 D368 000C                  		add.w	d1,obY(a0)
0000BCB8 4268 0012                  		clr.w	obVelY(a0)
0000BCBC 4228 0025                  		clr.b	ob2ndRout(a0)
0000BCC0 6000 0000                  		bra.w	Mon_Animate
0000BCC4                            ; ===========================================================================
0000BCC4                            
0000BCC4                            @normal:	; 2nd Routine 0
0000BCC4 323C 001A                  		move.w	#$1A,d1
0000BCC8 343C 000F                  		move.w	#$F,d2
0000BCCC 6100 0000                  		bsr.w	Mon_SolidSides
0000BCD0 6700 0000                  		beq.w	loc_A25C
0000BCD4 4A69 0012                  		tst.w	obVelY(a1)
0000BCD8 6B00                       		bmi.s	loc_A20A
0000BCDA 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000BCE0 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCE2 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000BCE8 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCEA 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000BCF0 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCF2                            
0000BCF2                            loc_A20A:
0000BCF2 4A41                       		tst.w	d1
0000BCF4 6A00                       		bpl.s	loc_A220
0000BCF6 9769 000C                  		sub.w	d3,obY(a1)
0000BCFA 6100 CE5E                  		bsr.w	loc_74AE
0000BCFE 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000BD04 6000 0000                  		bra.w	Mon_Animate
0000BD08                            ; ===========================================================================
0000BD08                            
0000BD08                            loc_A220:
0000BD08 4A40                       		tst.w	d0
0000BD0A 6700 0000                  		beq.w	loc_A246
0000BD0E 6B00                       		bmi.s	loc_A230
0000BD10 4A69 0010                  		tst.w	obVelX(a1)
0000BD14 6B00                       		bmi.s	loc_A246
0000BD16 6000                       		bra.s	loc_A236
0000BD18                            ; ===========================================================================
0000BD18                            
0000BD18                            loc_A230:
0000BD18 4A69 0010                  		tst.w	obVelX(a1)
0000BD1C 6A00                       		bpl.s	loc_A246
0000BD1E                            
0000BD1E                            loc_A236:
0000BD1E 9169 0008                  		sub.w	d0,obX(a1)
0000BD22 337C 0000 0020             		move.w	#0,obInertia(a1)
0000BD28 337C 0000 0010             		move.w	#0,obVelX(a1)
0000BD2E                            
0000BD2E                            loc_A246:
0000BD2E 0829 0001 0022             		btst	#1,obStatus(a1)
0000BD34 6600                       		bne.s	loc_A26A
0000BD36 08E9 0005 0022             		bset	#5,obStatus(a1)
0000BD3C 08E8 0005 0022             		bset	#5,obStatus(a0)
0000BD42 6000                       		bra.s	Mon_Animate
0000BD44                            ; ===========================================================================
0000BD44                            
0000BD44                            loc_A25C:
0000BD44 0828 0005 0022             		btst	#5,obStatus(a0)
0000BD4A 6700                       		beq.s	Mon_Animate
0000BD4C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000BD52 6700                       		beq.s	loc_A26A	; if so, branch
0000BD54 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000BD5A                            
0000BD5A                            loc_A26A:
0000BD5A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000BD60 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000BD66                            
0000BD66                            Mon_Animate:	; Routine 6
0000BD66 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000BD6C 6100 0000                  		bsr.w	AnimateSprite
0000BD70                            
0000BD70                            Mon_Display:	; Routine 8
0000BD70 6100 0000                  		bsr.w	DisplaySprite
0000BD92 4E75                       		rts	
0000BD94                            ; ===========================================================================
0000BD94                            
0000BD94                            Mon_BreakOpen:	; Routine 4
0000BD94 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD98 117C 0000 0020             		move.b	#0,obColType(a0)
0000BD9E 6100 0000                  		bsr.w	FindFreeObj
0000BDA2 6600                       		bne.s	Mon_Explode
0000BDA4 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000BDA8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BDAE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BDB4 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000BDBA                            
0000BDBA                            Mon_Explode:
0000BDBA 6100 0000                  		bsr.w	FindFreeObj
0000BDBE 6600                       		bne.s	@fail
0000BDC0 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000BDC4 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000BDC8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BDCE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BDD4                            
0000BDD4                            	@fail:
0000BDD4 45F8 FC00                  		lea	(v_objstate).w,a2
0000BDD8 7000                       		moveq	#0,d0
0000BDDA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BDDE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BDE4 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000BDEA 6000 0000                  		bra.w	DisplaySprite
0000BDEA 6000 0000                  		bra.w	DisplaySprite
0000BDEE                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000BDEE                            ; ---------------------------------------------------------------------------
0000BDEE                            ; Object 2E - contents of monitors
0000BDEE                            ; ---------------------------------------------------------------------------
0000BDEE                            
0000BDEE                            PowerUp:
0000BDEE 7000                       		moveq	#0,d0
0000BDF0 1028 0024                  		move.b	obRoutine(a0),d0
0000BDF4 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000BDF8 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000BDFC 6000 0000                  		bra.w	DisplaySprite
0000BE00                            ; ===========================================================================
0000BE00 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000BE02 0000                       		dc.w Pow_Move-Pow_Index
0000BE04 0000                       		dc.w Pow_Delete-Pow_Index
0000BE06                            ; ===========================================================================
0000BE06                            
0000BE06                            Pow_Main:	; Routine 0
0000BE06 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE0A 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BE10 117C 0024 0001             		move.b	#$24,obRender(a0)
0000BE16 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BE1C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000BE22 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000BE28 7000                       		moveq	#0,d0
0000BE2A 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000BE2E 5400                       		addq.b	#2,d0
0000BE30 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000BE34 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000BE3A D000                       		add.b	d0,d0
0000BE3C D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BE40 5249                       		addq.w	#1,a1
0000BE42 2149 0004                  		move.l	a1,obMap(a0)
0000BE46                            
0000BE46                            Pow_Move:	; Routine 2
0000BE46 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000BE4A 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000BE4E 6100 0000                  		bsr.w	SpeedToPos
0000BE52 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000BE58 4E75                       		rts	
0000BE5A                            ; ===========================================================================
0000BE5A                            
0000BE5A                            Pow_Checks:
0000BE5A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE5E 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000BE64                            
0000BE64                            Pow_ChkEggman:
0000BE64 1028 001C                  		move.b	obAnim(a0),d0
0000BE68 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000BE6C 6600                       		bne.s	Pow_ChkSonic
0000BE6E                            		
0000BE6E 4EF9 0000 0000             		jmp	Spik_Hurt
0000BE74                            		
0000BE74 4E75                       		rts
0000BE76                            ; ===========================================================================
0000BE76                            
0000BE76                            Pow_ChkSonic:
0000BE76 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BE7A 6600                       		bne.s	Pow_ChkShoes
0000BE7C                            
0000BE7C                            	ExtraLife:
0000BE7C 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BE80 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BE8E                            
0000BE8E                            ; ===========================================================================
0000BE8E                            
0000BE8E                            Pow_ChkShoes:
0000BE8E 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BE92 6600                       		bne.s	Pow_ChkShield
0000BE94                            
0000BE94 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000BE9A 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000BEA0 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000BEA6 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000BEAC 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000BEB2 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BEB6 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000BEB8 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BEBE 6300                       			bls.s	Pow_NoMus
0000BECA                            ; ===========================================================================
0000BECA                            
0000BECA                            Pow_NoMus:
0000BECA 4E75                       		rts	
0000BECC                            ; ===========================================================================
0000BECC                            
0000BECC                            Pow_ChkShield:
0000BECC 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000BED0 6600                               bne.s    Pow_ChkInvinc
0000BED2                            
0000BED2 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000BED8 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000BEDE 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000BEE4 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000BEEA 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000BEF0 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000BEF4 303C 0000                          move.w    #sfx_Shield,d0
0000BEF8 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000BEFE                            ; ===========================================================================
0000BEFE                            
0000BEFE                            Pow_ChkInvinc:
0000BEFE 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BF02 6600                       		bne.s	Pow_ChkRings
0000BF04                            
0000BF04 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000BF0A 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000BF10 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000BF16 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000BF1C 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000BF22 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000BF28 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000BF2E 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000BF34 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000BF3A 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000BF40 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BF44 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000BF46 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BF4C 6300                       			bls.s	Pow_NoMusic
0000BF58                            ; ===========================================================================
0000BF58                            
0000BF58                            Pow_NoMusic:
0000BF58 4E75                       		rts	
0000BF5A                            ; ===========================================================================
0000BF5A                            
0000BF5A                            Pow_ChkRings:
0000BF5A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BF5E 6600                       		bne.s	Pow_ChkS
0000BF60                            
0000BF60 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000BF66 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000BF6C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000BF72 6500                       		bcs.s	Pow_RingSound
0000BF74 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000BF7A 6700 FF00                  		beq.w	ExtraLife
0000BF7E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000BF84 6500                       		bcs.s	Pow_RingSound
0000BF86 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000BF8C 6700 FEEE                  		beq.w	ExtraLife
0000BF90                            
0000BF90                            	Pow_RingSound:
0000BF9A                            ; ===========================================================================
0000BF9A                            
0000BF9A                            Pow_ChkS:
0000BF9A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000BF9E 6600                       		bne.s	Pow_ChkSRing
0000BFA0                            		
0000BFA0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000BFA6 6700                       		beq.s	PowS2	; if yes, branch
0000BFA8 0404 003B                  		subi.b	#$3B,d4
0000BFAC 7000                       		moveq	#0,d0
0000BFAE 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000BFB4 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000BFBA 6000                       		bra.s	PowSPlay
0000BFBC                            
0000BFBC                            PowS2:
0000BFBC 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000BFC2 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000BFC8 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000BFCE 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000BFD4 6500                       		bcs.s	PowSPlay
0000BFD6 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000BFDC 6700 FE9E                  		beq.w	ExtraLife
0000BFE0 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000BFE6 6500                       		bcs.s	PowSPlay
0000BFE8 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000BFEE 6700 FE8C                  		beq.w	ExtraLife	
0000BFF2                            
0000BFF2                            PowSPlay:
0000BFFC                            
0000BFFC                            		
0000BFFC                            
0000BFFC                            
0000BFFC                            Pow_ChkSRing:
0000BFFC 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C000 6600                       		bne.s	Pow_ChkRShield
0000C002                            
0000C002                            		
0000C002 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C008 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C00E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C014 6500                       		bcs.s	Pow_ChkSRingSound
0000C016 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C01C 6700 FE5E                  		beq.w	ExtraLife
0000C020 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C026 6500                       		bcs.s	Pow_ChkSRingSound
0000C028 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C02E 6700 FE4C                  		beq.w	ExtraLife	
0000C032                            
0000C032                            Pow_ChkSRingSound:
0000C03C                            
0000C03C                            
0000C03C                            Pow_ChkRShield:
0000C03C 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C040 6600                               bne.s    Pow_ChkGShield
0000C042                            
0000C042 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C048 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C04E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C054 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C05A 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C060 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C064 303C 0000                          move.w    #sfx_FireShield,d0
0000C068 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C06E                            
0000C06E                            Pow_ChkGShield:
0000C06E 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C072 6600                               bne.s    Pow_ChkSpShield
0000C074                            
0000C074 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C07A 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C080 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C086 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C08C 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C092 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C096 303C 0000                          move.w    #sfx_LightningShield,d0
0000C09A 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C0A0                            
0000C0A0                            Pow_ChkSpShield:
0000C0A0 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C0A4 66FA                               bne.s    Pow_ChkSpShield
0000C0A6                            
0000C0A6 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C0AC 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C0B2 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C0B8 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C0BE 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C0C4 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C0C8 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C0CC 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C0D2                            
0000C0D2                            Pow_ChkEnd:
0000C0D2 4E75                       		rts
0000C0D4                            ; ===========================================================================
0000C0D4                            
0000C0D4                            Pow_Delete:	; Routine 4
0000C0D4 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C0D8 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C0DC 4E75                       		rts	
0000C0DC 4E75                       		rts	
0000C0DE                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C0DE                            ; ---------------------------------------------------------------------------
0000C0DE                            ; Subroutine to	make the sides of a monitor solid
0000C0DE                            ; ---------------------------------------------------------------------------
0000C0DE                            
0000C0DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0DE                            
0000C0DE                            
0000C0DE                            Mon_SolidSides:
0000C0DE 43F8 D000                  		lea	(v_player).w,a1
0000C0E2 3029 0008                  		move.w	obX(a1),d0
0000C0E6 9068 0008                  		sub.w	obX(a0),d0
0000C0EA D041                       		add.w	d1,d0
0000C0EC 6B00                       		bmi.s	loc_A4E6
0000C0EE 3601                       		move.w	d1,d3
0000C0F0 D643                       		add.w	d3,d3
0000C0F2 B043                       		cmp.w	d3,d0
0000C0F4 6200                       		bhi.s	loc_A4E6
0000C0F6 1629 0016                  		move.b	obHeight(a1),d3
0000C0FA 4883                       		ext.w	d3
0000C0FC D443                       		add.w	d3,d2
0000C0FE 3629 000C                  		move.w	obY(a1),d3
0000C102 9668 000C                  		sub.w	obY(a0),d3
0000C106 D642                       		add.w	d2,d3
0000C108 6B00                       		bmi.s	loc_A4E6
0000C10A D442                       		add.w	d2,d2
0000C10C B642                       		cmp.w	d2,d3
0000C10E 6400                       		bcc.s	loc_A4E6
0000C110 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C114 6B00                       		bmi.s	loc_A4E6
0000C116 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C11C 6400                       		bcc.s	loc_A4E6
0000C11E 4A78 FE08                  		tst.w	(v_debuguse).w
0000C122 6600                       		bne.s	loc_A4E6
0000C124 B240                       		cmp.w	d0,d1
0000C126 6400                       		bcc.s	loc_A4DC
0000C128 D241                       		add.w	d1,d1
0000C12A 9041                       		sub.w	d1,d0
0000C12C                            
0000C12C                            loc_A4DC:
0000C12C 0C43 0010                  		cmpi.w	#$10,d3
0000C130 6500                       		bcs.s	loc_A4EA
0000C132                            
0000C132                            loc_A4E2:
0000C132 7201                       		moveq	#1,d1
0000C134 4E75                       		rts	
0000C136                            ; ===========================================================================
0000C136                            
0000C136                            loc_A4E6:
0000C136 7200                       		moveq	#0,d1
0000C138 4E75                       		rts	
0000C13A                            ; ===========================================================================
0000C13A                            
0000C13A                            loc_A4EA:
0000C13A 7200                       		moveq	#0,d1
0000C13C 1228 0014                  		move.b	obActWid(a0),d1
0000C140 5841                       		addq.w	#4,d1
0000C142 3401                       		move.w	d1,d2
0000C144 D442                       		add.w	d2,d2
0000C146 D269 0008                  		add.w	obX(a1),d1
0000C14A 9268 0008                  		sub.w	obX(a0),d1
0000C14E 6BE2                       		bmi.s	loc_A4E2
0000C150 B242                       		cmp.w	d2,d1
0000C152 64DE                       		bcc.s	loc_A4E2
0000C154 72FF                       		moveq	#-1,d1
0000C156 4E75                       		rts	
0000C158                            ; End of function Obj26_SolidSides
0000C158                            ; End of function Obj26_SolidSides
0000C158                            		include	"_anim\Monitor.asm"
0000C158                            ; ---------------------------------------------------------------------------
0000C158                            ; Animation script - monitors
0000C158                            ; ---------------------------------------------------------------------------
0000C158 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C15E 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C164 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C16A 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C170 0000                       		dc.w @spshield-Ani_Monitor
0000C172                            		
0000C172 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C178 00                         		even
0000C178 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C184 00                         		even
0000C184 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C190 00                         		even
0000C190 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C19C 00                         		even
0000C19C 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C1A8 00                         		even
0000C1A8 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C1B4 00                         		even
0000C1B4 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C1C0 00                         		even
0000C1C0 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C1CC 00                         		even
0000C1CC 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C1D8 00                         		even
0000C1D8 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C1E0 00                         		even
0000C1E0 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C1EC 00                         		even
0000C1EC 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C1F8 00                         		even
0000C1F8 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C204 00                         		even
0000C204 00                         		even
0000C204                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C204                            ; --------------------------------------------------------------------------------
0000C204                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C204                            ; --------------------------------------------------------------------------------
0000C204                            
0000C204                            SME_0IgQe:	
0000C204 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C208 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C20C 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C210 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C214 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C218 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C21C 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C220 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C222 01                         SME_0IgQe_1E:	dc.b 1	
0000C223 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C228 02                         SME_0IgQe_24:	dc.b 2	
0000C229 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C22E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C233 02                         SME_0IgQe_2F:	dc.b 2	
0000C234 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C239 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C23E 02                         SME_0IgQe_3A:	dc.b 2	
0000C23F F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C244 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C249 02                         SME_0IgQe_45:	dc.b 2	
0000C24A F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C24F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C254 02                         SME_0IgQe_50:	dc.b 2	
0000C255 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C25A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C25F 02                         SME_0IgQe_5B:	dc.b 2	
0000C260 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C265 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C26A 02                         SME_0IgQe_66:	dc.b 2	
0000C26B F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C270 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C275 02                         SME_0IgQe_71:	dc.b 2	
0000C276 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C27B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C280 02                         SME_0IgQe_7C:	dc.b 2	
0000C281 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C286 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C28B 02                         SME_0IgQe_87:	dc.b 2	
0000C28C F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C291 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C296 05                         SME_0IgQe_92:	dc.b 5	
0000C297 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C29C 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C2A1 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C2A6 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C2AB 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C2B0 02                         SME_0IgQe_AC:	dc.b 2	
0000C2B1 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C2B6 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2BB 02                         SME_0IgQe_B7:	dc.b 2	
0000C2BC F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C2C1 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2C6 02                         SME_0IgQe_C2:	dc.b 2	
0000C2C7 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C2CC F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2D2 00                         		even
0000C2D2 00                         		even
0000C2D2                            
0000C2D2                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C2D2                            ; ---------------------------------------------------------------------------
0000C2D2                            ; Object 0E - Sonic on the title screen
0000C2D2                            ; ---------------------------------------------------------------------------
0000C2D2                            
0000C2D2                            TitleSonic:
0000C2D2 7000                       		moveq	#0,d0
0000C2D4 1028 0024                  		move.b	obRoutine(a0),d0
0000C2D8 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C2DC 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C2E0                            ; ===========================================================================
0000C2E0 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C2E2 0000                       		dc.w TSon_Delay-TSon_Index
0000C2E4 0000                       		dc.w TSon_Move-TSon_Index
0000C2E6 0000                       		dc.w TSon_Animate-TSon_Index
0000C2E8                            ; ===========================================================================
0000C2E8                            
0000C2E8                            TSon_Main:	; Routine 0
0000C2E8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2EC 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C2F2 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C2F8 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C300 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C306 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C30C 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C312 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C318 6100 0000                  		bsr.w	AnimateSprite
0000C31C                            
0000C31C                            TSon_Delay:	;Routine 2
0000C31C 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C320 6A00                       		bpl.s	@wait		; if time remains, branch
0000C322 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C326 6000 0000                  		bra.w	DisplaySprite
0000C32A                            
0000C32A                            	@wait:
0000C32A 4E75                       		rts	
0000C32C                            ; ===========================================================================
0000C32C                            
0000C32C                            TSon_Move:	; Routine 4
0000C32C 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C330 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C336 6600                       		bne.s	@display	; if not, branch
0000C338 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C33C                            
0000C33C                            	@display:
0000C33C 6000 0000                  		bra.w	DisplaySprite
0000C340                            
0000C340 4E75                       		rts	
0000C342                            ; ===========================================================================
0000C342                            
0000C342                            TSon_Animate:	; Routine 6
0000C342 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C348 6100 0000                  		bsr.w	AnimateSprite
0000C34C 6000 0000                  		bra.w	DisplaySprite
0000C350                            
0000C350 4E75                       		rts	
0000C350 4E75                       		rts	
0000C352                            		include	"_incObj\0F Press Start and TM.asm"
0000C352                            ; ---------------------------------------------------------------------------
0000C352                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C352                            ; ---------------------------------------------------------------------------
0000C352                            
0000C352                            PSBTM:
0000C352 7000                       		moveq	#0,d0
0000C354 1028 0024                  		move.b	obRoutine(a0),d0
0000C358 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C35C 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C360 6000 0000                  		bra.w	DisplaySprite
0000C364                            ; ===========================================================================
0000C364 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C366 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C368 0000                       		dc.w PSB_Exit-PSB_Index
0000C36A 0000                       		dc.w PSB_Menu-PSB_Index		
0000C36C                            ; ===========================================================================
0000C36C                            
0000C36C                            PSB_Main:	; Routine 0
0000C36C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C370 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C376 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C37C 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C384 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C38A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C390 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C392                            
0000C392 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C396 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C39C 6600                       		bne.s	PSB_Exit	; if not, branch
0000C39E                            
0000C39E 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C3A4 317C 0170 0008             		move.w	#$170,obX(a0)
0000C3AA 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C3B0                            
0000C3B0                            PSB_Exit:	; Routine 4
0000C3B0 4E75                       		rts	
0000C3B2                            ; ===========================================================================
0000C3B2                            
0000C3B2                            PSB_PrsStart:	; Routine 2
0000C3B2 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C3B8 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C3BA 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C3BE 303C 00A1                  		move.w   #$A1,d0 
0000C3C2 4EB8 12A0                  		jsr   PlaySound_Special
0000C3C6 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C3CC 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C3D4 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C3DA 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C3E0 4E75                       		rts
0000C3E2                            
0000C3E2                            PSB_PrsStart_Show:
0000C3E2 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C3E8 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C3EC                            
0000C3EC                            PSB_Menu:
0000C3EC 7400                             moveq   #0,d2
0000C3EE 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C3F2 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C3F6 0800 0000                        btst   #0,d0
0000C3FA 6700                             beq.s   MAIN2
0000C3FC 5302                             subq.b   #1,d2
0000C3FE 6400                             bcc.s   MAIN2
0000C400 143C 0001                        move.b   #1,d2
0000C404                            
0000C404                            MAIN2:
0000C404 0800 0001                        btst   #1,d0
0000C408 6700                             beq.s   MAIN3
0000C40A 5202                             addq.b   #1,d2
0000C40C 0C02 0002                        cmpi.b   #2,d2
0000C410 6500                             blo.s   MAIN3
0000C412 7400                             moveq   #0,d2
0000C414                            
0000C414                            MAIN3:
0000C414 1142 001A                        move.b   d2,$1A(a0)
0000C418 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C41C 0200 0003                        andi.b   #3,d0
0000C420 6700                             beq.s   MAIN4   
0000C422 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C426 4EB8 12A0                        jsr   PlaySound_Special
0000C42A                            
0000C42A                            MAIN4:
0000C42A 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C430 6700                             beq.s   MENURTS   ; if not, branch
0000C432 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C438                            
0000C438                            MENURTS:
0000C438 4E75                             rts															 
0000C43A                            ; ===========================================================================
0000C43A                            
0000C43A                            
0000C43A                            Map_TitleMenu:
0000C43A                            		include "_maps\Title Screen Menu.asm"		
0000C43A                            ; --------------------------------------------------------------------------------
0000C43A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C43A                            ; --------------------------------------------------------------------------------
0000C43A                            
0000C43A                            SME_g2Qfx:	
0000C43A 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C43E 10                         SME_g2Qfx_6:	dc.b $10	
0000C43F E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C444 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C449 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C44E E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C453 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C458 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C45D E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C462 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C467 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C46C F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C471 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C476 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C47B F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C480 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C485 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C48A E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C48F 10                         SME_g2Qfx_6B:	dc.b $10	
0000C490 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C495 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C49A E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C49F E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C4A4 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C4A9 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C4AE E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C4B3 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C4B8 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C4BD F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C4C2 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C4C7 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C4CC F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C4D1 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C4D6 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C4DB F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C4E0                            		even
0000C4E0                            		even
0000C4E0                            		even
0000C4E0                            
0000C4E0                            		include	"_anim\Title Screen Sonic.asm"
0000C4E0                            ; ---------------------------------------------------------------------------
0000C4E0                            ; Animation script - Sonic on the title screen
0000C4E0                            ; ---------------------------------------------------------------------------
0000C4E0 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C4E2 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C4EE 00                         		even
0000C4EE 00                         		even
0000C4EE                            		include	"_anim\Press Start and TM.asm"
0000C4EE                            ; ---------------------------------------------------------------------------
0000C4EE                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C4EE                            ; ---------------------------------------------------------------------------
0000C4EE 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C4F0 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C4F4                            		even
0000C4F4                            		even
0000C4F4                            
0000C4F4                            		include	"_incObj\sub AnimateSprite.asm"
0000C4F4                            ; ---------------------------------------------------------------------------
0000C4F4                            ; Subroutine to	animate	a sprite using an animation script
0000C4F4                            ; ---------------------------------------------------------------------------
0000C4F4                            
0000C4F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4F4                            
0000C4F4                            
0000C4F4                            AnimateSprite:
0000C4F4 7000                       		moveq	#0,d0
0000C4F6 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C4FA B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C4FE 6700                       		beq.s	Anim_Run	; if not, branch
0000C500                            
0000C500 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C504 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C50A 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C510                            
0000C510                            Anim_Run:
0000C510 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C514 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C516 D040                       		add.w	d0,d0
0000C518 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C51C 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C520 7200                       		moveq	#0,d1
0000C522 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C526 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C52A 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C52C                            
0000C52C                            Anim_Next:
0000C52C 1200                       		move.b	d0,d1
0000C52E 0200 001F                  		andi.b	#$1F,d0
0000C532 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C536 1028 0022                  		move.b	obStatus(a0),d0
0000C53A E719                       		rol.b	#3,d1
0000C53C B101                       		eor.b	d0,d1
0000C53E 0201 0003                  		andi.b	#3,d1
0000C542 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C548 8328 0001                  		or.b	d1,obRender(a0)
0000C54C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C550                            
0000C550                            Anim_Wait:
0000C550 4E75                       		rts	
0000C552                            ; ===========================================================================
0000C552                            
0000C552                            Anim_End_FF:
0000C552 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C554 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C556 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C55C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C560 60CA                       		bra.s	Anim_Next
0000C562                            ; ===========================================================================
0000C562                            
0000C562                            Anim_End_FE:
0000C562 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C564 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C566 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C56A 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C56E 9200                       		sub.b	d0,d1
0000C570 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C574 60B6                       		bra.s	Anim_Next
0000C576                            ; ===========================================================================
0000C576                            
0000C576                            Anim_End_FD:
0000C576 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C578 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C57A 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C580                            
0000C580                            Anim_End_FC:
0000C580 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C582 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C584 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C588                            
0000C588                            Anim_End_FB:
0000C588 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C58A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C58C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C592 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C596                            
0000C596                            Anim_End_FA:
0000C596 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C598 6600                       		bne.s	Anim_End	; if not, branch
0000C59A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C59E                            
0000C59E                            Anim_End:
0000C59E 4E75                       		rts	
0000C5A0                            ; End of function AnimateSprite
0000C5A0                            ; End of function AnimateSprite
0000C5A0                            
0000C5A0                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C5A0                            ; ---------------------------------------------------------------------------
0000C5A0                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C5A0                            ; ---------------------------------------------------------------------------
0000C5A0                            Map_PSB_internal:
0000C5A0 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C5A2 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C5A4 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C5A6 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C5A8 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C5A9 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C5AE 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C5B3 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C5B8 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C5BD 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C5C2 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C5C7 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C5C8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5CD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5D2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5D7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5DC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5E1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5E6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5EB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5F0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5F5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5FA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C5FF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C604 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C609 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C60E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C613 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C618 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C61D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C622 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C627 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C62C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C631 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C636 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C63B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C640 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C645 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C64A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C64F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C654 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C659 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C65E 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C65F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C664                            		even
0000C664                            		even
0000C664                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C664                            ; ---------------------------------------------------------------------------
0000C664                            ; Sprite mappings - Sonic on the title screen
0000C664                            ; ---------------------------------------------------------------------------
0000C664                            Map_TSon_internal:
0000C664 0000                       		dc.w byte_A898-Map_TSon_internal
0000C666 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C668 0000                       		dc.w byte_A917-Map_TSon_internal
0000C66A 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C66C 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C66E 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C670 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C672 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C674 0A                         byte_A898:	dc.b $A
0000C675 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C67A 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C67F 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C684 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C689 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C68E 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C693 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C698 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C69D 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C6A2 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C6A7 0F                         byte_A8CB:	dc.b $F
0000C6A8 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C6AD 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C6B2 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C6B7 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C6BC 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C6C1 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C6C6 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C6CB 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C6D0 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C6D5 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C6DA 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C6DF 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C6E4 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C6E9 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C6EE 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C6F3 11                         byte_A917:	dc.b $11
0000C6F4 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C6F9 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C6FE 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C703 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C708 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C70D 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C712 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C717 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C71C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C721 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C726 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C72B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C730 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C735 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C73A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C73F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C744 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C749 0D                         byte_A96D:	dc.b $D
0000C74A 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C74F 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C754 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C759 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C75E 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C763 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C768 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C76D 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C772 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C777 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C77C 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C781 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C786 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C78B 0B                         byte_A9AF:	dc.b $B
0000C78C 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C791 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C796 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C79B 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C7A0 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C7A5 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C7AA 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C7AF 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C7B4 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C7B9 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C7BE 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C7C3 13                         byte_A9E7:	dc.b $13
0000C7C4 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C7C9 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C7CE 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C7D3 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C7D8 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C7DD 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C7E2 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C7E7 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C7EC 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C7F1 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C7F6 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C7FB 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C800 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C805 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C80A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C80F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C814 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C819 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C81E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C823 15                         byte_AA47:	dc.b $15
0000C824 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C829 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C82E 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C833 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C838 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C83D 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C842 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C847 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C84C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C851 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C856 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C85B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C860 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C865 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C86A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C86F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C874 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C879 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C87E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C883 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C888 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C88D 16                         byte_AAB1:	dc.b $16
0000C88E 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C893 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C898 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C89D 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C8A2 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C8A7 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C8AC 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C8B1 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C8B6 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C8BB 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C8C0 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C8C5 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C8CA 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C8CF 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C8D4 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C8D9 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C8DE 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C8E3 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C8E8 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C8ED 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C8F2 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C8F7 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C8FC                            		even
0000C8FC                            		even
0000C8FC                            
0000C8FC                            		include	"_incObj\2B Chopper.asm"
0000C8FC                            ; ---------------------------------------------------------------------------
0000C8FC                            ; Object 2B - Chopper enemy (GHZ)
0000C8FC                            ; ---------------------------------------------------------------------------
0000C8FC                            
0000C8FC                            Chopper:
0000C8FC 7000                       		moveq	#0,d0
0000C8FE 1028 0024                  		move.b	obRoutine(a0),d0
0000C902 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000C906 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000C90A 6000 0000                  		bra.w	RememberState
0000C90E                            ; ===========================================================================
0000C90E 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000C910 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000C912                            
0000C912 =00000030                  chop_origY:	equ $30
0000C912                            ; ===========================================================================
0000C912                            
0000C912                            Chop_Main:	; Routine 0
0000C912 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C916 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000C91E 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000C924 117C 0004 0001             		move.b	#4,obRender(a0)
0000C92A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000C930 117C 0009 0020             		move.b	#9,obColType(a0)
0000C936 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000C93C 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000C942 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000C948                            
0000C948                            Chop_ChgSpeed:	; Routine 2
0000C948 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000C94E 6100 FBA4                  		bsr.w	AnimateSprite
0000C952 6100 0000                  		bsr.w	SpeedToPos
0000C956 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000C95C 3028 0030                  		move.w	chop_origY(a0),d0
0000C960 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000C964 6400                       		bcc.s	@chganimation	; if not, branch
0000C966 3140 000C                  		move.w	d0,obY(a0)
0000C96A 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000C970                            
0000C970                            	@chganimation:
0000C970 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000C976 0440 00C0                  		subi.w	#$C0,d0
0000C97A B068 000C                  		cmp.w	obY(a0),d0
0000C97E 6400                       		bcc.s	@nochg
0000C980 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000C986 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000C98A 6B00                       		bmi.s	@nochg		; if not, branch
0000C98C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000C992                            
0000C992                            	@nochg:
0000C992 4E75                       		rts	
0000C992 4E75                       		rts	
0000C994                            		include	"_anim\Chopper.asm"
0000C994                            ; ---------------------------------------------------------------------------
0000C994                            ; Animation script - Chopper enemy
0000C994                            ; ---------------------------------------------------------------------------
0000C994 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000C996 0000                       		dc.w @fast-Ani_Chop
0000C998 0000                       		dc.w @still-Ani_Chop
0000C99A 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000C99E 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000C9A2 0700 FF                    @still:		dc.b 7,	0, afEnd
0000C9A6 00                         		even
0000C9A6 00                         		even
0000C9A6                            Map_Chop:	include	"_maps\Chopper.asm"
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            ; Sprite mappings - Chopper enemy (GHZ)
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            Map_Chop_internal:
0000C9A6 0000                       		dc.w @mouthshut-Map_Chop_internal
0000C9A8 0000                       		dc.w @mouthopen-Map_Chop_internal
0000C9AA 01                         @mouthshut:	dc.b 1
0000C9AB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C9B0 01                         @mouthopen:	dc.b 1
0000C9B1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C9B6                            		even
0000C9B6                            		even
0000C9B6                            		include	"_incObj\2C Jaws.asm"
0000C9B6                            ; ---------------------------------------------------------------------------
0000C9B6                            ; Object 2C - Jaws enemy (LZ)
0000C9B6                            ; ---------------------------------------------------------------------------
0000C9B6                            
0000C9B6                            Jaws:
0000C9B6 7000                       		moveq	#0,d0
0000C9B8 1028 0024                  		move.b	obRoutine(a0),d0
0000C9BC 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000C9C0 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000C9C4                            ; ===========================================================================
0000C9C4 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000C9C6 0000                       		dc.w Jaws_Turn-Jaws_Index
0000C9C8                            
0000C9C8 =00000030                  jaws_timecount:	equ $30
0000C9C8 =00000032                  jaws_timedelay:	equ $32
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            Jaws_Main:	; Routine 0
0000C9C8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C9CC 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000C9D4 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000C9DA 0028 0004 0001             		ori.b	#4,obRender(a0)
0000C9E0 117C 000A 0020             		move.b	#$A,obColType(a0)
0000C9E6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000C9EC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000C9F2 7000                       		moveq	#0,d0
0000C9F4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000C9F8 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C9FA 5340                       		subq.w	#1,d0
0000C9FC 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CA00 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CA04 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CA0A 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CA10 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CA12 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CA16                            
0000CA16                            Jaws_Turn:	; Routine 2
0000CA16 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CA1A 6A00                       		bpl.s	@animate	; if time remains, branch
0000CA1C 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CA22 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CA26 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CA2C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CA32                            
0000CA32                            	@animate:
0000CA32 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CA38 6100 FABA                  		bsr.w	AnimateSprite
0000CA3C 6100 0000                  		bsr.w	SpeedToPos
0000CA40 6000 0000                  		bra.w	RememberState
0000CA40 6000 0000                  		bra.w	RememberState
0000CA44                            		include	"_anim\Jaws.asm"
0000CA44                            ; ---------------------------------------------------------------------------
0000CA44                            ; Animation script - Jaws enemy
0000CA44                            ; ---------------------------------------------------------------------------
0000CA44 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CA46 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CA4C                            		even
0000CA4C                            		even
0000CA4C                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CA4C                            ; --------------------------------------------------------------------------------
0000CA4C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CA4C                            ; --------------------------------------------------------------------------------
0000CA4C                            
0000CA4C                            SME_O5C0c:	
0000CA4C 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CA50 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CA54 02                         SME_O5C0c_8:	dc.b 2	
0000CA55 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CA5A F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CA5F 02                         SME_O5C0c_13:	dc.b 2	
0000CA60 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CA65 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CA6A 02                         SME_O5C0c_1E:	dc.b 2	
0000CA6B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CA70 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CA75 02                         SME_O5C0c_29:	dc.b 2	
0000CA76 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CA7B F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CA80                            		even
0000CA80                            		even
0000CA80                            		include	"_incObj\2D Burrobot.asm"
0000CA80                            ; ---------------------------------------------------------------------------
0000CA80                            ; Object 2D - Burrobot enemy (LZ)
0000CA80                            ; ---------------------------------------------------------------------------
0000CA80                            
0000CA80                            Burrobot:
0000CA80 7000                       		moveq	#0,d0
0000CA82 1028 0024                  		move.b	obRoutine(a0),d0
0000CA86 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CA8A 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CA8E                            ; ===========================================================================
0000CA8E 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CA90 0000                       		dc.w Burro_Action-Burro_Index
0000CA92                            
0000CA92 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CA92                            ; ===========================================================================
0000CA92                            
0000CA92                            Burro_Main:	; Routine 0
0000CA92 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CA96 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CA9C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CAA2 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CAAA 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CAB0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CAB6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CABC 117C 0005 0020             		move.b	#5,obColType(a0)
0000CAC2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CAC8 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CACC 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CAD2                            
0000CAD2                            Burro_Action:	; Routine 2
0000CAD2 7000                       		moveq	#0,d0
0000CAD4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CAD8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CADC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CAE0 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CAE6 6100 FA0C                  		bsr.w	AnimateSprite
0000CAEA 6000 0000                  		bra.w	RememberState
0000CAEE                            ; ===========================================================================
0000CAEE 0000                       @index:		dc.w @changedir-@index
0000CAF0 0000                       		dc.w Burro_Move-@index
0000CAF2 0000                       		dc.w Burro_Jump-@index
0000CAF4 0000                       		dc.w Burro_ChkSonic-@index
0000CAF6                            ; ===========================================================================
0000CAF6                            
0000CAF6                            @changedir:
0000CAF6 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CAFA 6A00                       		bpl.s	@nochg
0000CAFC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CB00 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CB06 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CB0C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CB12 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CB18 6700                       		beq.s	@nochg
0000CB1A 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CB1E                            
0000CB1E                            	@nochg:
0000CB1E 4E75                       		rts	
0000CB20                            ; ===========================================================================
0000CB20                            
0000CB20                            Burro_Move:
0000CB20 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CB24 6B00                       		bmi.s	loc_AD84
0000CB26 6100 0000                  		bsr.w	SpeedToPos
0000CB2A 0868 0000 0032             		bchg	#0,$32(a0)
0000CB30 6600                       		bne.s	loc_AD78
0000CB32 3628 0008                  		move.w	obX(a0),d3
0000CB36 0643 000C                  		addi.w	#$C,d3
0000CB3A 0828 0000 0022             		btst	#0,obStatus(a0)
0000CB40 6600                       		bne.s	loc_AD6A
0000CB42 0443 0018                  		subi.w	#$18,d3
0000CB46                            
0000CB46                            loc_AD6A:
0000CB46 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CB4C 0C41 000C                  		cmpi.w	#$C,d1
0000CB50 6C00                       		bge.s	loc_AD84
0000CB52 4E75                       		rts	
0000CB54                            ; ===========================================================================
0000CB54                            
0000CB54                            loc_AD78:
0000CB54 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CB5A D368 000C                  		add.w	d1,obY(a0)
0000CB5E 4E75                       		rts	
0000CB60                            ; ===========================================================================
0000CB60                            
0000CB60                            loc_AD84:
0000CB60 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CB66 6700                       		beq.s	loc_ADA4
0000CB68 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CB6C 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CB72 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CB78 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CB7E 4E75                       		rts	
0000CB80                            ; ===========================================================================
0000CB80                            
0000CB80                            loc_ADA4:
0000CB80 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CB84 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CB8A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CB90 4E75                       		rts	
0000CB92                            ; ===========================================================================
0000CB92                            
0000CB92                            Burro_Jump:
0000CB92 6100 0000                  		bsr.w	SpeedToPos
0000CB96 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CB9C 6B00                       		bmi.s	locret_ADF0
0000CB9E 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CBA4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CBAA 4A41                       		tst.w	d1
0000CBAC 6A00                       		bpl.s	locret_ADF0
0000CBAE D368 000C                  		add.w	d1,obY(a0)
0000CBB2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CBB8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CBBE 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CBC4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CBC8 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CBCC                            
0000CBCC                            locret_ADF0:
0000CBCC 4E75                       		rts	
0000CBCE                            ; ===========================================================================
0000CBCE                            
0000CBCE                            Burro_ChkSonic:
0000CBCE 343C 0060                  		move.w	#$60,d2
0000CBD2 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CBD6 6400                       		bcc.s	locret_AE20
0000CBD8 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CBDC 9068 000C                  		sub.w	obY(a0),d0
0000CBE0 6400                       		bcc.s	locret_AE20
0000CBE2 0C40 FF80                  		cmpi.w	#-$80,d0
0000CBE6 6500                       		bcs.s	locret_AE20
0000CBE8 4A78 FE08                  		tst.w	(v_debuguse).w
0000CBEC 6600                       		bne.s	locret_AE20
0000CBEE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CBF2 3141 0010                  		move.w	d1,obVelX(a0)
0000CBF6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CBFC                            
0000CBFC                            locret_AE20:
0000CBFC 4E75                       		rts	
0000CBFE                            
0000CBFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CBFE                            
0000CBFE                            
0000CBFE                            Burro_ChkSonic2:
0000CBFE 323C 0080                  		move.w	#$80,d1
0000CC02 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CC08 3038 D008                  		move.w	(v_player+obX).w,d0
0000CC0C 9068 0008                  		sub.w	obX(a0),d0
0000CC10 6400                       		bcc.s	loc_AE40
0000CC12 4440                       		neg.w	d0
0000CC14 4441                       		neg.w	d1
0000CC16 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CC1C                            
0000CC1C                            loc_AE40:
0000CC1C B042                       		cmp.w	d2,d0
0000CC1E 4E75                       		rts	
0000CC20                            ; End of function Burro_ChkSonic2
0000CC20                            ; End of function Burro_ChkSonic2
0000CC20                            		include	"_anim\Burrobot.asm"
0000CC20                            ; ---------------------------------------------------------------------------
0000CC20                            ; Animation script - Burrobot enemy
0000CC20                            ; ---------------------------------------------------------------------------
0000CC20 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CC22 0000                       		dc.w @walk2-Ani_Burro
0000CC24 0000                       		dc.w @digging-Ani_Burro
0000CC26 0000                       		dc.w @fall-Ani_Burro
0000CC28 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CC2C 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CC30 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CC34 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CC38 00                         		even
0000CC38 00                         		even
0000CC38                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CC38                            ; --------------------------------------------------------------------------------
0000CC38                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CC38                            ; --------------------------------------------------------------------------------
0000CC38                            
0000CC38                            SME_Ag_86:	
0000CC38 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CC3C 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CC40 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CC44 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CC46 02                         SME_Ag_86_E:	dc.b 2	
0000CC47 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CC4C 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CC51 02                         SME_Ag_86_19:	dc.b 2	
0000CC52 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CC57 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CC5C 02                         SME_Ag_86_24:	dc.b 2	
0000CC5D E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CC62 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CC67 02                         SME_Ag_86_2F:	dc.b 2	
0000CC68 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CC6D 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CC72 02                         SME_Ag_86_3A:	dc.b 2	
0000CC73 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CC78 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CC7D 02                         SME_Ag_86_45:	dc.b 2	
0000CC7E F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CC83 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CC88 02                         SME_Ag_86_50:	dc.b 2	
0000CC89 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CC8E 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CC94 00                         		even
0000CC94 00                         		even
0000CC94                            
0000CC94                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CC94                            ; ---------------------------------------------------------------------------
0000CC94                            ; Object 2F - large grass-covered platforms (MZ)
0000CC94                            ; ---------------------------------------------------------------------------
0000CC94                            
0000CC94                            LargeGrass:
0000CC94 7000                       		moveq	#0,d0
0000CC96 1028 0024                  		move.b	obRoutine(a0),d0
0000CC9A 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CC9E 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CCA2                            ; ===========================================================================
0000CCA2 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CCA4 0000                       		dc.w LGrass_Action-LGrass_Index
0000CCA6                            
0000CCA6 =0000002A                  lgrass_origX:	equ $2A
0000CCA6 =0000002C                  lgrass_origY:	equ $2C
0000CCA6                            
0000CCA6 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CCA8 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CCAA 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CCAC 0140                       		dc.b 1,	$40
0000CCAE 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CCB0 0220                       		dc.b 2,	$20
0000CCB2                            ; ===========================================================================
0000CCB2                            
0000CCB2                            LGrass_Main:	; Routine 0
0000CCB2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CCB6 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CCBE 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CCC4 117C 0004 0001             		move.b	#4,obRender(a0)
0000CCCA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CCD0 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CCD6 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CCDC 7000                       		moveq	#0,d0
0000CCDE 1028 0028                  		move.b	obSubtype(a0),d0
0000CCE2 E448                       		lsr.w	#2,d0
0000CCE4 0240 001C                  		andi.w	#$1C,d0
0000CCE8 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CCEC 3019                       		move.w	(a1)+,d0
0000CCEE 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000CCF2 214A 0030                  		move.l	a2,$30(a0)
0000CCF6 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000CCFA 1151 0014                  		move.b	(a1),obActWid(a0)
0000CCFE 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000CD04 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000CD0A 08E8 0004 0001             		bset	#4,1(a0)
0000CD10                            
0000CD10                            LGrass_Action:	; Routine 2
0000CD10 6100 0000                  		bsr.w	LGrass_Types
0000CD14 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CD18 6700                       		beq.s	LGrass_Solid
0000CD1A 7200                       		moveq	#0,d1
0000CD1C 1228 0014                  		move.b	obActWid(a0),d1
0000CD20 0641 000B                  		addi.w	#$B,d1
0000CD24 6100 BF46                  		bsr.w	ExitPlatform
0000CD28 0829 0003 0022             		btst	#3,obStatus(a1)
0000CD2E 6600 0000                  		bne.w	LGrass_Slope
0000CD32 4228 0025                  		clr.b	ob2ndRout(a0)
0000CD36 6000                       		bra.s	LGrass_Display
0000CD38                            ; ===========================================================================
0000CD38                            
0000CD38                            LGrass_Slope:
0000CD38 7200                       		moveq	#0,d1
0000CD3A 1228 0014                  		move.b	obActWid(a0),d1
0000CD3E 0641 000B                  		addi.w	#$B,d1
0000CD42 2468 0030                  		movea.l	$30(a0),a2
0000CD46 3428 0008                  		move.w	obX(a0),d2
0000CD4A 6100 CEBA                  		bsr.w	SlopeObject2
0000CD4E 6000                       		bra.s	LGrass_Display
0000CD50                            ; ===========================================================================
0000CD50                            
0000CD50                            LGrass_Solid:
0000CD50 7200                       		moveq	#0,d1
0000CD52 1228 0014                  		move.b	obActWid(a0),d1
0000CD56 0641 000B                  		addi.w	#$B,d1
0000CD5A 343C 0020                  		move.w	#$20,d2
0000CD5E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000CD64 6600                       		bne.s	loc_AF8E
0000CD66 343C 0030                  		move.w	#$30,d2
0000CD6A                            
0000CD6A                            loc_AF8E:
0000CD6A 2468 0030                  		movea.l	$30(a0),a2
0000CD6E 6100 0000                  		bsr.w	SolidObject2F
0000CD72                            
0000CD72                            LGrass_Display:
0000CD72 6100 0000                  		bsr.w	DisplaySprite
0000CD76 6000 0000                  		bra.w	LGrass_ChkDel
0000CD7A                            
0000CD7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD7A                            
0000CD7A                            
0000CD7A                            LGrass_Types:
0000CD7A 7000                       		moveq	#0,d0
0000CD7C 1028 0028                  		move.b	obSubtype(a0),d0
0000CD80 0240 0007                  		andi.w	#7,d0
0000CD84 D040                       		add.w	d0,d0
0000CD86 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000CD8A 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000CD8E                            ; End of function LGrass_Types
0000CD8E                            
0000CD8E                            ; ===========================================================================
0000CD8E 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000CD90 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000CD92 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000CD94 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000CD96 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000CD98 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000CD9A                            ; ===========================================================================
0000CD9A                            
0000CD9A                            LGrass_Type00:
0000CD9A 4E75                       		rts			; type 00 platform doesn't move
0000CD9C                            ; ===========================================================================
0000CD9C                            
0000CD9C                            LGrass_Type01:
0000CD9C 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000CDA0 323C 0020                  		move.w	#$20,d1
0000CDA4 6000                       		bra.s	LGrass_Move
0000CDA6                            ; ===========================================================================
0000CDA6                            
0000CDA6                            LGrass_Type02:
0000CDA6 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000CDAA 323C 0030                  		move.w	#$30,d1
0000CDAE 6000                       		bra.s	LGrass_Move
0000CDB0                            ; ===========================================================================
0000CDB0                            
0000CDB0                            LGrass_Type03:
0000CDB0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000CDB4 323C 0040                  		move.w	#$40,d1
0000CDB8 6000                       		bra.s	LGrass_Move
0000CDBA                            ; ===========================================================================
0000CDBA                            
0000CDBA                            LGrass_Type04:
0000CDBA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000CDBE 323C 0060                  		move.w	#$60,d1
0000CDC2                            
0000CDC2                            LGrass_Move:
0000CDC2 0828 0003 0028             		btst	#3,obSubtype(a0)
0000CDC8 6700                       		beq.s	loc_AFF2
0000CDCA 4440                       		neg.w	d0
0000CDCC D041                       		add.w	d1,d0
0000CDCE                            
0000CDCE                            loc_AFF2:
0000CDCE 3228 002C                  		move.w	lgrass_origY(a0),d1
0000CDD2 9240                       		sub.w	d0,d1
0000CDD4 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000CDD8 4E75                       		rts	
0000CDDA                            ; ===========================================================================
0000CDDA                            
0000CDDA                            LGrass_Type05:
0000CDDA 1028 0034                  		move.b	$34(a0),d0
0000CDDE 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CDE2 6600                       		bne.s	loc_B010
0000CDE4 5500                       		subq.b	#2,d0
0000CDE6 6400                       		bcc.s	loc_B01C
0000CDE8 7000                       		moveq	#0,d0
0000CDEA 6000                       		bra.s	loc_B01C
0000CDEC                            ; ===========================================================================
0000CDEC                            
0000CDEC                            loc_B010:
0000CDEC 5800                       		addq.b	#4,d0
0000CDEE 0C00 0040                  		cmpi.b	#$40,d0
0000CDF2 6500                       		bcs.s	loc_B01C
0000CDF4 103C 0040                  		move.b	#$40,d0
0000CDF8                            
0000CDF8                            loc_B01C:
0000CDF8 1140 0034                  		move.b	d0,$34(a0)
0000CDFC 4EB9 0000 3B42             		jsr	(CalcSine).l
0000CE02 E848                       		lsr.w	#4,d0
0000CE04 3200                       		move.w	d0,d1
0000CE06 D068 002C                  		add.w	lgrass_origY(a0),d0
0000CE0A 3140 000C                  		move.w	d0,obY(a0)
0000CE0E 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CE14 6600                       		bne.s	loc_B07A
0000CE16 4A28 0035                  		tst.b	$35(a0)
0000CE1A 6600                       		bne.s	loc_B07A
0000CE1C 117C 0001 0035             		move.b	#1,$35(a0)
0000CE22 6100 0000                  		bsr.w	FindNextFreeObj
0000CE26 6600                       		bne.s	loc_B07A
0000CE28 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000CE2C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000CE32 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000CE38 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000CE3C 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000CE40 0469 0040 0008             		subi.w	#$40,obX(a1)
0000CE46 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CE4C 2348 0038                  		move.l	a0,$38(a1)
0000CE50 2448                       		movea.l	a0,a2
0000CE52 6100                       		bsr.s	sub_B09C
0000CE54                            
0000CE54                            loc_B07A:
0000CE54 7400                       		moveq	#0,d2
0000CE56 45E8 0036                  		lea	$36(a0),a2
0000CE5A 141A                       		move.b	(a2)+,d2
0000CE5C 5302                       		subq.b	#1,d2
0000CE5E 6500                       		bcs.s	locret_B09A
0000CE60                            
0000CE60                            loc_B086:
0000CE60 7000                       		moveq	#0,d0
0000CE62 101A                       		move.b	(a2)+,d0
0000CE64 ED48                       		lsl.w	#6,d0
0000CE66 0640 D000                  		addi.w	#$D000,d0
0000CE6A 3240                       		movea.w	d0,a1
0000CE6C 3341 003C                  		move.w	d1,$3C(a1)
0000CE70 51CA FFEE                  		dbf	d2,loc_B086
0000CE74                            
0000CE74                            locret_B09A:
0000CE74 4E75                       		rts	
0000CE76                            
0000CE76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CE76                            
0000CE76                            
0000CE76                            sub_B09C:
0000CE76 45EA 0036                  		lea	$36(a2),a2
0000CE7A 7000                       		moveq	#0,d0
0000CE7C 1012                       		move.b	(a2),d0
0000CE7E 5212                       		addq.b	#1,(a2)
0000CE80 45F2 0001                  		lea	1(a2,d0.w),a2
0000CE84 3009                       		move.w	a1,d0
0000CE86 0440 D000                  		subi.w	#$D000,d0
0000CE8A EC48                       		lsr.w	#6,d0
0000CE8C 0240 007F                  		andi.w	#$7F,d0
0000CE90 1480                       		move.b	d0,(a2)
0000CE92 4E75                       		rts	
0000CE94                            ; End of function sub_B09C
0000CE94                            
0000CE94                            ; ===========================================================================
0000CE94                            
0000CE94                            LGrass_ChkDel:
0000CE94 4A28 0035                  		tst.b	$35(a0)
0000CE98 6700                       		beq.s	loc_B0C6
0000CE9A 4A28 0001                  		tst.b	obRender(a0)
0000CE9E 6A00                       		bpl.s	LGrass_DelFlames
0000CEA0                            
0000CEA0                            loc_B0C6:
0000CEBE 4E75                       		rts	
0000CEC0                            ; ===========================================================================
0000CEC0                            
0000CEC0                            LGrass_DelFlames:
0000CEC0 7400                       		moveq	#0,d2
0000CEC2                            
0000CEC2                            loc_B0E8:
0000CEC2 45E8 0036                  		lea	$36(a0),a2
0000CEC6 1412                       		move.b	(a2),d2
0000CEC8 421A                       		clr.b	(a2)+
0000CECA 5302                       		subq.b	#1,d2
0000CECC 6500                       		bcs.s	locret_B116
0000CECE                            
0000CECE                            loc_B0F4:
0000CECE 7000                       		moveq	#0,d0
0000CED0 1012                       		move.b	(a2),d0
0000CED2 421A                       		clr.b	(a2)+
0000CED4 ED48                       		lsl.w	#6,d0
0000CED6 0640 D000                  		addi.w	#$D000,d0
0000CEDA 3240                       		movea.w	d0,a1
0000CEDC 6100 0000                  		bsr.w	DeleteChild
0000CEE0 51CA FFEC                  		dbf	d2,loc_B0F4
0000CEE4 117C 0000 0035             		move.b	#0,$35(a0)
0000CEEA 117C 0000 0034             		move.b	#0,$34(a0)
0000CEF0                            
0000CEF0                            locret_B116:
0000CEF0 4E75                       		rts	
0000CEF2                            ; ===========================================================================
0000CEF2                            ; ---------------------------------------------------------------------------
0000CEF2                            ; Collision data for large moving platforms (MZ)
0000CEF2                            ; ---------------------------------------------------------------------------
0000CEF2                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000CF3E                            		even
0000CF3E                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000CF6A                            		even
0000CF6A                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000CFB6                            		even
0000CFB6                            		even
0000CFB6                            		include	"_incObj\35 Burning Grass.asm"
0000CFB6                            ; ---------------------------------------------------------------------------
0000CFB6                            ; Object 35 - fireball that sits on the	floor (MZ)
0000CFB6                            ; (appears when	you walk on sinking platforms)
0000CFB6                            ; ---------------------------------------------------------------------------
0000CFB6                            
0000CFB6                            GrassFire:
0000CFB6 7000                       		moveq	#0,d0
0000CFB8 1028 0024                  		move.b	obRoutine(a0),d0
0000CFBC 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000CFC0 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000CFC4                            ; ===========================================================================
0000CFC4 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000CFC6 0000                       		dc.w loc_B238-GFire_Index
0000CFC8 0000                       		dc.w GFire_Move-GFire_Index
0000CFCA                            
0000CFCA =0000002A                  gfire_origX:	equ $2A
0000CFCA                            ; ===========================================================================
0000CFCA                            
0000CFCA                            GFire_Main:	; Routine 0
0000CFCA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFCE 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000CFD6 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000CFDC 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000CFE2 117C 0004 0001             		move.b	#4,obRender(a0)
0000CFE8 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000CFEE 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000CFF4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D004 4A28 0028                  		tst.b	obSubtype(a0)
0000D008 6700                       		beq.s	loc_B238
0000D00A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D00E 6000 0000                  		bra.w	GFire_Move
0000D012                            ; ===========================================================================
0000D012                            
0000D012                            loc_B238:	; Routine 2
0000D012 2268 0030                  		movea.l	$30(a0),a1
0000D016 3228 0008                  		move.w	obX(a0),d1
0000D01A 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D01E 0641 000C                  		addi.w	#$C,d1
0000D022 3001                       		move.w	d1,d0
0000D024 E248                       		lsr.w	#1,d0
0000D026 1031 0000                  		move.b	(a1,d0.w),d0
0000D02A 4440                       		neg.w	d0
0000D02C D068 002C                  		add.w	$2C(a0),d0
0000D030 3400                       		move.w	d0,d2
0000D032 D068 003C                  		add.w	$3C(a0),d0
0000D036 3140 000C                  		move.w	d0,obY(a0)
0000D03A 0C41 0084                  		cmpi.w	#$84,d1
0000D03E 6400                       		bcc.s	loc_B2B0
0000D040 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D048 0C41 0080                  		cmpi.w	#$80,d1
0000D04C 6400                       		bcc.s	loc_B2B0
0000D04E 2028 0008                  		move.l	obX(a0),d0
0000D052 0680 0008 0000             		addi.l	#$80000,d0
0000D058 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D05E 6600                       		bne.s	loc_B2B0
0000D060 6100 0000                  		bsr.w	FindNextFreeObj
0000D064 6600                       		bne.s	loc_B2B0
0000D066 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D06A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D070 3342 002C                  		move.w	d2,$2C(a1)
0000D074 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D07A 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D080 2468 0038                  		movea.l	$38(a0),a2
0000D084 6100 FDF0                  		bsr.w	sub_B09C
0000D088                            
0000D088                            loc_B2B0:
0000D088 6000                       		bra.s	GFire_Animate
0000D08A                            ; ===========================================================================
0000D08A                            
0000D08A                            GFire_Move:	; Routine 4
0000D08A 3028 002C                  		move.w	$2C(a0),d0
0000D08E D068 003C                  		add.w	$3C(a0),d0
0000D092 3140 000C                  		move.w	d0,obY(a0)
0000D096                            
0000D096                            GFire_Animate:
0000D096 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D09C 6100 F456                  		bsr.w	AnimateSprite
0000D0A0 6000 0000                  		bra.w	DisplaySprite
0000D0A0 6000 0000                  		bra.w	DisplaySprite
0000D0A4                            		include	"_anim\Burning Grass.asm"
0000D0A4                            ; ---------------------------------------------------------------------------
0000D0A4                            ; Animation script - burning grass that sits on the floor (MZ)
0000D0A4                            ; ---------------------------------------------------------------------------
0000D0A4 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D0A6 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D0AC                            		even
0000D0AC                            		even
0000D0AC                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D0AC                            ; ---------------------------------------------------------------------------
0000D0AC                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D0AC                            ; ---------------------------------------------------------------------------
0000D0AC                            Map_LGrass_internal:
0000D0AC 0000                       		dc.w @wide-Map_LGrass_internal
0000D0AE 0000                       		dc.w @sloped-Map_LGrass_internal
0000D0B0 0000                       		dc.w @narrow-Map_LGrass_internal
0000D0B2 0D                         @wide:		dc.b $D
0000D0B3 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D0B8 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D0BD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D0C2 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D0C7 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D0CC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D0D1 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D0D6 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D0DB F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D0E0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D0E5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D0EA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D0EF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D0F4 0A                         @sloped:	dc.b $A
0000D0F5 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D0FA F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D0FF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D104 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D109 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D10E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D113 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D118 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D11D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D122 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D127 06                         @narrow:	dc.b 6
0000D128 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D12D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D132 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D137 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D13C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D141 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D146                            		even
0000D146                            		even
0000D146                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D146                            ; --------------------------------------------------------------------------------
0000D146                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D146                            ; --------------------------------------------------------------------------------
0000D146                            
0000D146                            SME_gyvTV:	
0000D146 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D14A 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D14E 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D152 01                         SME_gyvTV_C:	dc.b 1	
0000D153 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D158 01                         SME_gyvTV_12:	dc.b 1	
0000D159 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D15E 01                         SME_gyvTV_18:	dc.b 1	
0000D15F F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D164 01                         SME_gyvTV_1E:	dc.b 1	
0000D165 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D16A 01                         SME_gyvTV_24:	dc.b 1	
0000D16B F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D170 01                         SME_gyvTV_2A:	dc.b 1	
0000D171 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D176                            		even
0000D176                            		even
0000D176                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D176                            ; ---------------------------------------------------------------------------
0000D176                            ; Object 30 - large green glass blocks (MZ)
0000D176                            ; ---------------------------------------------------------------------------
0000D176                            
0000D176                            GlassBlock:
0000D176 7000                       		moveq	#0,d0
0000D178 1028 0024                  		move.b	obRoutine(a0),d0
0000D17C 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D180 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D1A2 6000 0000                  		bra.w	DisplaySprite
0000D1A6                            ; ===========================================================================
0000D1A6                            
0000D1A6                            Glass_Delete:
0000D1A6 6000 0000                  		bra.w	DeleteObject
0000D1AA                            ; ===========================================================================
0000D1AA 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D1AC 0000                       		dc.w Glass_Block012-Glass_Index
0000D1AE 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D1B0 0000                       		dc.w Glass_Block34-Glass_Index
0000D1B2 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D1B4                            
0000D1B4 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D1B4 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D1B4                            
0000D1B4 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D1B7 0400 01                    		dc.b 4,	0, 1
0000D1BA 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D1BD 0800 01                    		dc.b 8,	0, 1
0000D1C0                            ; ===========================================================================
0000D1C0                            
0000D1C0                            Glass_Main:	; Routine 0
0000D1C0 45F9 0000 D1B4             		lea	(Glass_Vars1).l,a2
0000D1C6 7201                       		moveq	#1,d1
0000D1C8 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D1CE 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D1D4 6500                       		bcs.s	@IsType012	; if yes, branch
0000D1D6                            
0000D1D6 45F9 0000 D1BA             		lea	(Glass_Vars2).l,a2
0000D1DC 7201                       		moveq	#1,d1
0000D1DE 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D1E4                            
0000D1E4                            	@IsType012:
0000D1E4 2248                       		movea.l	a0,a1
0000D1E6 6000                       		bra.s	@Load		; load main object
0000D1E8                            ; ===========================================================================
0000D1E8                            
0000D1E8                            	@Repeat:
0000D1E8 6100 0000                  		bsr.w	FindNextFreeObj
0000D1EC 6600                       		bne.s	@Fail
0000D1EE                            
0000D1EE                            @Load:
0000D1EE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D1F2 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D1F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D1FC 101A                       		move.b	(a2)+,d0
0000D1FE 4880                       		ext.w	d0
0000D200 D068 000C                  		add.w	obY(a0),d0
0000D204 3340 000C                  		move.w	d0,obY(a1)
0000D208 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D210 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D216 137C 0004 0001             		move.b	#4,obRender(a1)
0000D21C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D222 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D228 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D22E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D234 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D238 2348 003C                  		move.l	a0,glass_parent(a1)
0000D23C 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D240                            
0000D240 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D246 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D24C 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D250 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D256                            
0000D256                            	@Fail:
0000D256 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D25C 08E8 0004 0001             		bset	#4,obRender(a0)
0000D262                            
0000D262                            Glass_Block012:	; Routine 2
0000D262 6100 0000                  		bsr.w	Glass_Types
0000D266 323C 002B                  		move.w	#$2B,d1
0000D26A 343C 0048                  		move.w	#$48,d2
0000D26E 363C 0049                  		move.w	#$49,d3
0000D272 3828 0008                  		move.w	obX(a0),d4
0000D276 6000 0000                  		bra.w	SolidObject
0000D27A                            ; ===========================================================================
0000D27A                            
0000D27A                            Glass_Reflect012:
0000D27A                            		; Routine 4
0000D27A 2268 003C                  		movea.l	$3C(a0),a1
0000D27E 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D284 6000 0000                  		bra.w	Glass_Types
0000D288                            ; ===========================================================================
0000D288                            
0000D288                            Glass_Block34:	; Routine 6
0000D288 6100 0000                  		bsr.w	Glass_Types
0000D28C 323C 002B                  		move.w	#$2B,d1
0000D290 343C 0038                  		move.w	#$38,d2
0000D294 363C 0039                  		move.w	#$39,d3
0000D298 3828 0008                  		move.w	obX(a0),d4
0000D29C 6000 0000                  		bra.w	SolidObject
0000D2A0                            ; ===========================================================================
0000D2A0                            
0000D2A0                            Glass_Reflect34:
0000D2A0                            		; Routine 8
0000D2A0 2268 003C                  		movea.l	$3C(a0),a1
0000D2A4 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D2AA 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D2B0 6000 0000                  		bra.w	Glass_Types
0000D2B4                            
0000D2B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2B4                            
0000D2B4                            
0000D2B4                            Glass_Types:
0000D2B4 7000                       		moveq	#0,d0
0000D2B6 1028 0028                  		move.b	obSubtype(a0),d0
0000D2BA 0240 0007                  		andi.w	#7,d0
0000D2BE D040                       		add.w	d0,d0
0000D2C0 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D2C4 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D2C8                            ; End of function Glass_Types
0000D2C8                            
0000D2C8                            ; ===========================================================================
0000D2C8 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D2CA 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D2CC 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D2CE 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D2D0 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D2D2                            ; ===========================================================================
0000D2D2                            
0000D2D2                            Glass_Type00:
0000D2D2 4E75                       		rts	
0000D2D4                            ; ===========================================================================
0000D2D4                            
0000D2D4                            Glass_Type01:
0000D2D4 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D2D8 323C 0040                  		move.w	#$40,d1
0000D2DC 6000                       		bra.s	loc_B514
0000D2DE                            ; ===========================================================================
0000D2DE                            
0000D2DE                            Glass_Type02:
0000D2DE 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D2E2 323C 0040                  		move.w	#$40,d1
0000D2E6 4440                       		neg.w	d0
0000D2E8 D041                       		add.w	d1,d0
0000D2EA                            
0000D2EA                            loc_B514:
0000D2EA 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D2F0 6700                       		beq.s	loc_B526
0000D2F2 4440                       		neg.w	d0
0000D2F4 D041                       		add.w	d1,d0
0000D2F6 E208                       		lsr.b	#1,d0
0000D2F8 0640 0020                  		addi.w	#$20,d0
0000D2FC                            
0000D2FC                            loc_B526:
0000D2FC 6000 0000                  		bra.w	loc_B5EE
0000D300                            ; ===========================================================================
0000D300                            
0000D300                            Glass_Type03:
0000D300 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D306 6700                       		beq.s	loc_B53E
0000D308 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D30C 0440 0010                  		subi.w	#$10,d0
0000D310 6000 0000                  		bra.w	loc_B5EE
0000D314                            ; ===========================================================================
0000D314                            
0000D314                            loc_B53E:
0000D314 0828 0003 0022             		btst	#3,obStatus(a0)
0000D31A 6600                       		bne.s	loc_B54E
0000D31C 08A8 0000 0034             		bclr	#0,$34(a0)
0000D322 6000                       		bra.s	loc_B582
0000D324                            ; ===========================================================================
0000D324                            
0000D324                            loc_B54E:
0000D324 4A28 0034                  		tst.b	$34(a0)
0000D328 6600                       		bne.s	loc_B582
0000D32A 117C 0001 0034             		move.b	#1,$34(a0)
0000D330 08E8 0000 0035             		bset	#0,$35(a0)
0000D336 6700                       		beq.s	loc_B582
0000D338 08E8 0007 0034             		bset	#7,$34(a0)
0000D33E 317C 0010 0036             		move.w	#$10,$36(a0)
0000D344 117C 000A 0038             		move.b	#$A,$38(a0)
0000D34A 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D350 6600                       		bne.s	loc_B582
0000D352 317C 0040 0036             		move.w	#$40,$36(a0)
0000D358                            
0000D358                            loc_B582:
0000D358 4A28 0034                  		tst.b	$34(a0)
0000D35C 6A00                       		bpl.s	loc_B5AA
0000D35E 4A28 0038                  		tst.b	$38(a0)
0000D362 6700                       		beq.s	loc_B594
0000D364 5328 0038                  		subq.b	#1,$38(a0)
0000D368 6600                       		bne.s	loc_B5AA
0000D36A                            
0000D36A                            loc_B594:
0000D36A 4A68 0032                  		tst.w	glass_dist(a0)
0000D36E 6700                       		beq.s	loc_B5A4
0000D370 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D374 5368 0036                  		subq.w	#1,$36(a0)
0000D378 6600                       		bne.s	loc_B5AA
0000D37A                            
0000D37A                            loc_B5A4:
0000D37A 08A8 0007 0034             		bclr	#7,$34(a0)
0000D380                            
0000D380                            loc_B5AA:
0000D380 3028 0032                  		move.w	glass_dist(a0),d0
0000D384 6000                       		bra.s	loc_B5EE
0000D386                            ; ===========================================================================
0000D386                            
0000D386                            Glass_Type04:
0000D386 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D38C 6700                       		beq.s	Glass_ChkSwitch
0000D38E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D392 0440 0010                  		subi.w	#$10,d0
0000D396 6000                       		bra.s	loc_B5EE
0000D398                            ; ===========================================================================
0000D398                            
0000D398                            Glass_ChkSwitch:
0000D398 4A28 0034                  		tst.b	$34(a0)
0000D39C 6600                       		bne.s	loc_B5E0
0000D39E 45F8 F7E0                  		lea	(f_switch).w,a2
0000D3A2 7000                       		moveq	#0,d0
0000D3A4 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D3A8 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D3AA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D3AE 6700                       		beq.s	loc_B5EA	; if not, branch
0000D3B0 117C 0001 0034             		move.b	#1,$34(a0)
0000D3B6                            
0000D3B6                            loc_B5E0:
0000D3B6 4A68 0032                  		tst.w	glass_dist(a0)
0000D3BA 6700                       		beq.s	loc_B5EA
0000D3BC 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D3C0                            
0000D3C0                            loc_B5EA:
0000D3C0 3028 0032                  		move.w	glass_dist(a0),d0
0000D3C4                            
0000D3C4                            loc_B5EE:
0000D3C4 3228 0030                  		move.w	$30(a0),d1
0000D3C8 9240                       		sub.w	d0,d1
0000D3CA 3141 000C                  		move.w	d1,obY(a0)
0000D3CE 4E75                       		rts	
0000D3CE 4E75                       		rts	
0000D3D0                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D3D0                            ; --------------------------------------------------------------------------------
0000D3D0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D3D0                            ; --------------------------------------------------------------------------------
0000D3D0                            
0000D3D0                            SME_NEyTf:	
0000D3D0 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D3D4 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D3D6 0C                         SME_NEyTf_6:	dc.b $C	
0000D3D7 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D3DC B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D3E1 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D3E6 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D3EB E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D3F0 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D3F5 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D3FA 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D3FF 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D404 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D409 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D40E 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D413 02                         SME_NEyTf_43:	dc.b 2	
0000D414 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D419 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D41E 0A                         SME_NEyTf_4E:	dc.b $A	
0000D41F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D424 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D429 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D42E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D433 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D438 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D43D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D442 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D447 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D44C 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D452 00                         		even
0000D452 00                         		even
0000D452                            		include	"_incObj\31 Chained Stompers.asm"
0000D452                            ; ---------------------------------------------------------------------------
0000D452                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D452                            ; ---------------------------------------------------------------------------
0000D452                            
0000D452                            ChainStomp:
0000D452 7000                       		moveq	#0,d0
0000D454 1028 0024                  		move.b	obRoutine(a0),d0
0000D458 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D45C 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D460                            ; ===========================================================================
0000D460 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D462 0000                       		dc.w loc_B798-CStom_Index
0000D464 0000                       		dc.w loc_B7FE-CStom_Index
0000D466 0000                       		dc.w CStom_Display2-CStom_Index
0000D468 0000                       		dc.w loc_B7E2-CStom_Index
0000D46A                            
0000D46A =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D46A                            
0000D46A 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D46C 0100                       		dc.b 1,	0
0000D46E                            
0000D46E 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D471 041C 01                    		dc.b 4,	$1C, 1
0000D474 08CC 03                    		dc.b 8,	$CC, 3
0000D477 06F0 02                    		dc.b 6,	$F0, 2
0000D47A                            
0000D47A 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D47E 5000 7800                  		dc.w $5000, $7800
0000D482 3800 5800                  		dc.w $3800, $5800
0000D486 B800                       		dc.w $B800
0000D488                            ; ===========================================================================
0000D488                            
0000D488                            CStom_Main:	; Routine 0
0000D488 7000                       		moveq	#0,d0
0000D48A 1028 0028                  		move.b	obSubtype(a0),d0
0000D48E 6A00                       		bpl.s	loc_B6CE
0000D490 0240 007F                  		andi.w	#$7F,d0
0000D494 D040                       		add.w	d0,d0
0000D496 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D49A 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D49E 101A                       		move.b	(a2)+,d0
0000D4A0 1140 0028                  		move.b	d0,obSubtype(a0)
0000D4A4                            
0000D4A4                            loc_B6CE:
0000D4A4 0200 000F                  		andi.b	#$F,d0
0000D4A8 D040                       		add.w	d0,d0
0000D4AA 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D4AE 4A40                       		tst.w	d0
0000D4B0 6600                       		bne.s	loc_B6E0
0000D4B2 3142 0032                  		move.w	d2,$32(a0)
0000D4B6                            
0000D4B6                            loc_B6E0:
0000D4B6 45F9 0000 D46E             		lea	(CStom_Var).l,a2
0000D4BC 2248                       		movea.l	a0,a1
0000D4BE 7203                       		moveq	#3,d1
0000D4C0 6000                       		bra.s	CStom_MakeStomper
0000D4C2                            ; ===========================================================================
0000D4C2                            
0000D4C2                            CStom_Loop:
0000D4C2 6100 0000                  		bsr.w	FindNextFreeObj
0000D4C6 6600 0000                  		bne.w	CStom_SetSize
0000D4CA                            
0000D4CA                            CStom_MakeStomper:
0000D4CA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D4CE 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D4D2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D4D8 101A                       		move.b	(a2)+,d0
0000D4DA 4880                       		ext.w	d0
0000D4DC D068 000C                  		add.w	obY(a0),d0
0000D4E0 3340 000C                  		move.w	d0,obY(a1)
0000D4E4 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D4EC 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D4F2 137C 0004 0001             		move.b	#4,obRender(a1)
0000D4F8 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D4FE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D504 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D50A 3342 0034                  		move.w	d2,$34(a1)
0000D50E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D514 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D518 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D51E 6600                       		bne.s	loc_B76A
0000D520 5341                       		subq.w	#1,d1
0000D522 1028 0028                  		move.b	obSubtype(a0),d0
0000D526 0240 00F0                  		andi.w	#$F0,d0
0000D52A 0C40 0020                  		cmpi.w	#$20,d0
0000D52E 679A                       		beq.s	CStom_MakeStomper
0000D530 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D536 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D53C 5241                       		addq.w	#1,d1
0000D53E                            
0000D53E                            loc_B76A:
0000D53E 2348 003C                  		move.l	a0,$3C(a1)
0000D542 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D546                            
0000D546 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D54C                            
0000D54C                            CStom_SetSize:
0000D54C 7000                       		moveq	#0,d0
0000D54E 1028 0028                  		move.b	obSubtype(a0),d0
0000D552 E648                       		lsr.w	#3,d0
0000D554 0200 000E                  		andi.b	#$E,d0
0000D558 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D55C 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D560 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D564 6000                       		bra.s	loc_B798
0000D566                            ; ===========================================================================
0000D566 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D568 3009                       		dc.b $30, 9
0000D56A 100A                       		dc.b $10, $A
0000D56C                            ; ===========================================================================
0000D56C                            
0000D56C                            loc_B798:	; Routine 2
0000D56C 6100 0000                  		bsr.w	CStom_Types
0000D570 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D576 7200                       		moveq	#0,d1
0000D578 1228 0014                  		move.b	obActWid(a0),d1
0000D57C 0641 000B                  		addi.w	#$B,d1
0000D580 343C 000C                  		move.w	#$C,d2
0000D584 363C 000D                  		move.w	#$D,d3
0000D588 3828 0008                  		move.w	obX(a0),d4
0000D58C 6100 0000                  		bsr.w	SolidObject
0000D590 0828 0003 0022             		btst	#3,obStatus(a0)
0000D596 6700                       		beq.s	CStom_Display
0000D598 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D59E 6400                       		bcc.s	CStom_Display
0000D5A0 2448                       		movea.l	a0,a2
0000D5A2 41F8 D000                  		lea	(v_player).w,a0
0000D5A6 4EB9 0000 0000             		jsr	(KillSonic).l
0000D5AC 204A                       		movea.l	a2,a0
0000D5AE                            
0000D5AE                            CStom_Display:
0000D5AE 6100 0000                  		bsr.w	DisplaySprite
0000D5B2 6000 0000                  		bra.w	CStom_ChkDel
0000D5B6                            ; ===========================================================================
0000D5B6                            
0000D5B6                            loc_B7E2:	; Routine 8
0000D5B6 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D5BC 08E8 0004 0001             		bset	#4,obRender(a0)
0000D5C2 2268 003C                  		movea.l	$3C(a0),a1
0000D5C6 1029 0032                  		move.b	$32(a1),d0
0000D5CA EA08                       		lsr.b	#5,d0
0000D5CC 5600                       		addq.b	#3,d0
0000D5CE 1140 001A                  		move.b	d0,obFrame(a0)
0000D5D2                            
0000D5D2                            loc_B7FE:	; Routine 4
0000D5D2 2268 003C                  		movea.l	$3C(a0),a1
0000D5D6 7000                       		moveq	#0,d0
0000D5D8 1029 0032                  		move.b	$32(a1),d0
0000D5DC D068 0030                  		add.w	$30(a0),d0
0000D5E0 3140 000C                  		move.w	d0,obY(a0)
0000D5E4                            
0000D5E4                            CStom_Display2:	; Routine 6
0000D5E4 6100 0000                  		bsr.w	DisplaySprite
0000D5E8                            
0000D5E8                            CStom_ChkDel:
0000D606 4E75                       		rts	
0000D608                            ; ===========================================================================
0000D608                            
0000D608                            CStom_Types:
0000D608 1028 0028                  		move.b	obSubtype(a0),d0
0000D60C 0240 000F                  		andi.w	#$F,d0
0000D610 D040                       		add.w	d0,d0
0000D612 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D616 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D61A                            ; ===========================================================================
0000D61A 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D61C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D61E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D620 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D622 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D624 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D626 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D628                            ; ===========================================================================
0000D628                            
0000D628                            CStom_Type00:
0000D628 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D62C 7000                       		moveq	#0,d0
0000D62E 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D632 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D636 6700                       		beq.s	loc_B8A8	; if not, branch
0000D638 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D63C 6A00                       		bpl.s	loc_B872
0000D63E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D644 6700                       		beq.s	loc_B8A0
0000D646                            
0000D646                            loc_B872:
0000D646 4A68 0032                  		tst.w	$32(a0)
0000D64A 6700                       		beq.s	loc_B8A0
0000D64C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D650 0200 000F                  		andi.b	#$F,d0
0000D654 6600                       		bne.s	loc_B892
0000D656 4A28 0001                  		tst.b	1(a0)
0000D65A 6A00                       		bpl.s	loc_B892
0000D666                            
0000D666                            loc_B892:
0000D666 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D66C 6400                       		bcc.s	CStom_Restart
0000D66E 317C 0000 0032             		move.w	#0,$32(a0)
0000D674                            
0000D674                            loc_B8A0:
0000D674 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D67A 6000                       		bra.s	CStom_Restart
0000D67C                            ; ===========================================================================
0000D67C                            
0000D67C                            loc_B8A8:
0000D67C 3228 0034                  		move.w	$34(a0),d1
0000D680 B268 0032                  		cmp.w	$32(a0),d1
0000D684 6700                       		beq.s	CStom_Restart
0000D686 3028 0012                  		move.w	obVelY(a0),d0
0000D68A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D690 D168 0032                  		add.w	d0,$32(a0)
0000D694 B268 0032                  		cmp.w	$32(a0),d1
0000D698 6200                       		bhi.s	CStom_Restart
0000D69A 3141 0032                  		move.w	d1,$32(a0)
0000D69E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D6A4 4A28 0001                  		tst.b	obRender(a0)
0000D6A8 6A00                       		bpl.s	CStom_Restart
0000D6B4                            
0000D6B4                            CStom_Restart:
0000D6B4 7000                       		moveq	#0,d0
0000D6B6 1028 0032                  		move.b	$32(a0),d0
0000D6BA D068 0030                  		add.w	$30(a0),d0
0000D6BE 3140 000C                  		move.w	d0,obY(a0)
0000D6C2 4E75                       		rts	
0000D6C4                            ; ===========================================================================
0000D6C4                            
0000D6C4                            CStom_Type01:
0000D6C4 4A68 0036                  		tst.w	$36(a0)
0000D6C8 6700                       		beq.s	loc_B938
0000D6CA 4A68 0038                  		tst.w	$38(a0)
0000D6CE 6700                       		beq.s	loc_B902
0000D6D0 5368 0038                  		subq.w	#1,$38(a0)
0000D6D4 6000                       		bra.s	loc_B97C
0000D6D6                            ; ===========================================================================
0000D6D6                            
0000D6D6                            loc_B902:
0000D6D6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D6DA 0200 000F                  		andi.b	#$F,d0
0000D6DE 6600                       		bne.s	loc_B91C
0000D6E0 4A28 0001                  		tst.b	obRender(a0)
0000D6E4 6A00                       		bpl.s	loc_B91C
0000D6F0                            
0000D6F0                            loc_B91C:
0000D6F0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D6F6 6400                       		bcc.s	loc_B97C
0000D6F8 317C 0000 0032             		move.w	#0,$32(a0)
0000D6FE 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D704 317C 0000 0036             		move.w	#0,$36(a0)
0000D70A 6000                       		bra.s	loc_B97C
0000D70C                            ; ===========================================================================
0000D70C                            
0000D70C                            loc_B938:
0000D70C 3228 0034                  		move.w	$34(a0),d1
0000D710 B268 0032                  		cmp.w	$32(a0),d1
0000D714 6700                       		beq.s	loc_B97C
0000D716 3028 0012                  		move.w	obVelY(a0),d0
0000D71A 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D720 D168 0032                  		add.w	d0,$32(a0)
0000D724 B268 0032                  		cmp.w	$32(a0),d1
0000D728 6200                       		bhi.s	loc_B97C
0000D72A 3141 0032                  		move.w	d1,$32(a0)
0000D72E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D734 317C 0001 0036             		move.w	#1,$36(a0)
0000D73A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D740 4A28 0001                  		tst.b	obRender(a0)
0000D744 6A00                       		bpl.s	loc_B97C
0000D750                            
0000D750                            loc_B97C:
0000D750 6000 FF62                  		bra.w	CStom_Restart
0000D754                            ; ===========================================================================
0000D754                            
0000D754                            CStom_Type03:
0000D754 3038 D008                  		move.w	(v_player+obX).w,d0
0000D758 9068 0008                  		sub.w	obX(a0),d0
0000D75C 6400                       		bcc.s	loc_B98C
0000D75E 4440                       		neg.w	d0
0000D760                            
0000D760                            loc_B98C:
0000D760 0C40 0090                  		cmpi.w	#$90,d0
0000D764 6400                       		bcc.s	loc_B996
0000D766 5228 0028                  		addq.b	#1,obSubtype(a0)
0000D76A                            
0000D76A                            loc_B996:
0000D76A 6000 FF48                  		bra.w	CStom_Restart
0000D76A 6000 FF48                  		bra.w	CStom_Restart
0000D76E                            		include	"_incObj\45 Sideways Stomper.asm"
0000D76E                            ; ---------------------------------------------------------------------------
0000D76E                            ; Object 45 - spiked metal block from beta version (MZ)
0000D76E                            ; ---------------------------------------------------------------------------
0000D76E                            
0000D76E                            SideStomp:
0000D76E 7000                       		moveq	#0,d0
0000D770 1028 0024                  		move.b	obRoutine(a0),d0
0000D774 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000D778 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000D77C                            ; ===========================================================================
0000D77C 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000D77E 0000                       		dc.w SStom_Solid-SStom_Index
0000D780 0000                       		dc.w loc_BA8E-SStom_Index
0000D782 0000                       		dc.w SStom_Display-SStom_Index
0000D784 0000                       		dc.w SStom_Pole-SStom_Index
0000D786                            
0000D786                            		;	routine		frame
0000D786                            		;		 xpos
0000D786 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000D789 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000D78C 0834 03                    		dc.b	8,	 $34,	3	; pole
0000D78F 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000D792                            
0000D792                            ;word_B9BE:	; Note that this indicates three subtypes
0000D792 3800                       SStom_Len:	dc.w $3800	; short
0000D794 A000                       		dc.w $A000	; long
0000D796 5000                       		dc.w $5000	; medium
0000D798                            ; ===========================================================================
0000D798                            
0000D798                            SStom_Main:	; Routine 0
0000D798 7000                       		moveq	#0,d0
0000D79A 1028 0028                  		move.b	obSubtype(a0),d0
0000D79E D040                       		add.w	d0,d0
0000D7A0 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000D7A4 45F9 0000 D786             		lea	(SStom_Var).l,a2
0000D7AA 2248                       		movea.l	a0,a1
0000D7AC 7203                       		moveq	#3,d1
0000D7AE 6000                       		bra.s	@load
0000D7B0                            
0000D7B0                            	@loop:
0000D7B0 6100 0000                  		bsr.w	FindNextFreeObj
0000D7B4 6600                       		bne.s	@fail
0000D7B6                            
0000D7B6                            	@load:
0000D7B6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D7BA 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000D7BE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000D7C4 101A                       		move.b	(a2)+,d0
0000D7C6 4880                       		ext.w	d0
0000D7C8 D068 0008                  		add.w	obX(a0),d0
0000D7CC 3340 0008                  		move.w	d0,obX(a1)
0000D7D0 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000D7D8 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D7DE 137C 0004 0001             		move.b	#4,obRender(a1)
0000D7E4 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000D7EA 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000D7F0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D7F6 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D7FC 3342 0034                  		move.w	d2,$34(a1)
0000D800 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D806 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000D80A 6600                       		bne.s	@notspikes	; if not, branch
0000D80C 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000D812                            
0000D812                            	@notspikes:
0000D812 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D816 2348 003C                  		move.l	a0,$3C(a1)
0000D81A 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000D81E                            
0000D81E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D824                            
0000D824                            	@fail:
0000D824 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000D82A                            
0000D82A                            SStom_Solid:	; Routine 2
0000D82A 3F28 0008                  		move.w	obX(a0),-(sp)
0000D82E 6100 0000                  		bsr.w	SStom_Move
0000D832 323C 0017                  		move.w	#$17,d1
0000D836 343C 0020                  		move.w	#$20,d2
0000D83A 363C 0020                  		move.w	#$20,d3
0000D83E 381F                       		move.w	(sp)+,d4
0000D840 6100 0000                  		bsr.w	SolidObject
0000D844 6100 0000                  		bsr.w	DisplaySprite
0000D848 6000 0000                  		bra.w	SStom_ChkDel
0000D84C                            ; ===========================================================================
0000D84C                            
0000D84C                            SStom_Pole:	; Routine 8
0000D84C 2268 003C                  		movea.l	$3C(a0),a1
0000D850 1029 0032                  		move.b	$32(a1),d0
0000D854 0600 0010                  		addi.b	#$10,d0
0000D858 EA08                       		lsr.b	#5,d0
0000D85A 5600                       		addq.b	#3,d0
0000D85C 1140 001A                  		move.b	d0,obFrame(a0)
0000D860                            
0000D860                            loc_BA8E:	; Routine 4
0000D860 2268 003C                  		movea.l	$3C(a0),a1
0000D864 7000                       		moveq	#0,d0
0000D866 1029 0032                  		move.b	$32(a1),d0
0000D86A 4440                       		neg.w	d0
0000D86C D068 0030                  		add.w	$30(a0),d0
0000D870 3140 0008                  		move.w	d0,obX(a0)
0000D874                            
0000D874                            SStom_Display:	; Routine 6
0000D874 6100 0000                  		bsr.w	DisplaySprite
0000D878                            
0000D878                            SStom_ChkDel:
0000D896 4E75                       		rts	
0000D898                            
0000D898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D898                            
0000D898                            
0000D898                            SStom_Move:
0000D898 7000                       		moveq	#0,d0
0000D89A 1028 0028                  		move.b	obSubtype(a0),d0
0000D89E D040                       		add.w	d0,d0
0000D8A0 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D8A4 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D8A8                            ; End of function SStom_Move
0000D8A8                            
0000D8A8                            ; ===========================================================================
0000D8A8                            		; This indicates only two subtypes... that do the same thing
0000D8A8                            		; Compare to SStom_Len. This breaks subtype 02
0000D8A8 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D8AA 0000                       		dc.w loc_BADA-off_BAD6
0000D8AC                            ; ===========================================================================
0000D8AC                            
0000D8AC                            loc_BADA:
0000D8AC 4A68 0036                  		tst.w	$36(a0)
0000D8B0 6700                       		beq.s	loc_BB08
0000D8B2 4A68 0038                  		tst.w	$38(a0)
0000D8B6 6700                       		beq.s	loc_BAEC
0000D8B8 5368 0038                  		subq.w	#1,$38(a0)
0000D8BC 6000                       		bra.s	loc_BB3C
0000D8BE                            ; ===========================================================================
0000D8BE                            
0000D8BE                            loc_BAEC:
0000D8BE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D8C4 6400                       		bcc.s	loc_BB3C
0000D8C6 317C 0000 0032             		move.w	#0,$32(a0)
0000D8CC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D8D2 317C 0000 0036             		move.w	#0,$36(a0)
0000D8D8 6000                       		bra.s	loc_BB3C
0000D8DA                            ; ===========================================================================
0000D8DA                            
0000D8DA                            loc_BB08:
0000D8DA 3228 0034                  		move.w	$34(a0),d1
0000D8DE B268 0032                  		cmp.w	$32(a0),d1
0000D8E2 6700                       		beq.s	loc_BB3C
0000D8E4 3028 0010                  		move.w	obVelX(a0),d0
0000D8E8 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000D8EE D168 0032                  		add.w	d0,$32(a0)
0000D8F2 B268 0032                  		cmp.w	$32(a0),d1
0000D8F6 6200                       		bhi.s	loc_BB3C
0000D8F8 3141 0032                  		move.w	d1,$32(a0)
0000D8FC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D902 317C 0001 0036             		move.w	#1,$36(a0)
0000D908 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D90E                            
0000D90E                            loc_BB3C:
0000D90E 7000                       		moveq	#0,d0
0000D910 1028 0032                  		move.b	$32(a0),d0
0000D914 4440                       		neg.w	d0
0000D916 D068 0030                  		add.w	$30(a0),d0
0000D91A 3140 0008                  		move.w	d0,obX(a0)
0000D91E 4E75                       		rts	
0000D91E 4E75                       		rts	
0000D920                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000D920                            ; ---------------------------------------------------------------------------
0000D920                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D920                            ; ---------------------------------------------------------------------------
0000D920                            Map_CStom_internal:
0000D920 0000                       		dc.w @wideblock-Map_CStom_internal
0000D922 0000                       		dc.w @spikes-Map_CStom_internal
0000D924 0000                       		dc.w @ceiling-Map_CStom_internal
0000D926 0000                       		dc.w @chain1-Map_CStom_internal
0000D928 0000                       		dc.w @chain2-Map_CStom_internal
0000D92A 0000                       		dc.w @chain3-Map_CStom_internal
0000D92C 0000                       		dc.w @chain4-Map_CStom_internal
0000D92E 0000                       		dc.w @chain5-Map_CStom_internal
0000D930 0000                       		dc.w @chain5-Map_CStom_internal
0000D932 0000                       		dc.w @mediumblock-Map_CStom_internal
0000D934 0000                       		dc.w @smallblock-Map_CStom_internal
0000D936 05                         @wideblock:	dc.b 5
0000D937 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D93C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D941 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D946 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D94B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D950 05                         @spikes:	dc.b 5
0000D951 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D956 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D95B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D960 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D965 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D96A 01                         @ceiling:	dc.b 1
0000D96B DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D970 02                         @chain1:	dc.b 2
0000D971 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D976 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D97B 04                         @chain2:	dc.b 4
0000D97C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D981 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D986 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D98B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D990 06                         @chain3:	dc.b 6
0000D991 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D996 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D99B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D9A0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D9A5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D9AA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D9AF 08                         @chain4:	dc.b 8
0000D9B0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D9B5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D9BA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D9BF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D9C4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D9C9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D9CE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D9D3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D9D8 0A                         @chain5:	dc.b $A
0000D9D9 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D9DE 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D9E3 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D9E8 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D9ED C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D9F2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D9F7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D9FC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DA01 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DA06 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DA0B 05                         @mediumblock:	dc.b 5
0000DA0C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DA11 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DA16 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DA1B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DA20 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DA25 01                         @smallblock:	dc.b 1
0000DA26 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DA2C 00                         		even
0000DA2C 00                         		even
0000DA2C                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DA2C                            ; ---------------------------------------------------------------------------
0000DA2C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DA2C                            ; ---------------------------------------------------------------------------
0000DA2C                            Map_SStom_internal:
0000DA2C 0000                       		dc.w @block-Map_SStom_internal
0000DA2E 0000                       		dc.w @spikes-Map_SStom_internal
0000DA30 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DA32 0000                       		dc.w @pole1-Map_SStom_internal
0000DA34 0000                       		dc.w @pole2-Map_SStom_internal
0000DA36 0000                       		dc.w @pole3-Map_SStom_internal
0000DA38 0000                       		dc.w @pole4-Map_SStom_internal
0000DA3A 0000                       		dc.w @pole5-Map_SStom_internal
0000DA3C 0000                       		dc.w @pole5-Map_SStom_internal
0000DA3E 03                         @block:		dc.b 3
0000DA3F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DA44 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DA49 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DA4E 03                         @spikes:	dc.b 3
0000DA4F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DA54 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DA59 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DA5E 01                         @wallbracket:	dc.b 1
0000DA5F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DA64 02                         @pole1:		dc.b 2
0000DA65 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DA6A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA6F 04                         @pole2:		dc.b 4
0000DA70 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DA75 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA7A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DA7F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DA84 06                         @pole3:		dc.b 6
0000DA85 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DA8A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA8F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DA94 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DA99 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DA9E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DAA3 08                         @pole4:		dc.b 8
0000DAA4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DAA9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DAAE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DAB3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DAB8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DABD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DAC2 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DAC7 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DACC 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DACD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DAD2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DAD7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DADC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DAE1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DAE6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DAEB F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DAF0 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DAF5 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DAFA F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DAFF                            		; @pole6 should be here, but it isn't...
0000DB00 00                         		even
0000DB00 00                         		even
0000DB00                            
0000DB00                            		include	"_incObj\32 Button.asm"
0000DB00                            ; ---------------------------------------------------------------------------
0000DB00                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DB00                            ; ---------------------------------------------------------------------------
0000DB00                            
0000DB00                            Button:
0000DB00 7000                       		moveq	#0,d0
0000DB02 1028 0024                  		move.b	obRoutine(a0),d0
0000DB06 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DB0A 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DB0E                            ; ===========================================================================
0000DB0E 0000                       But_Index:	dc.w But_Main-But_Index
0000DB10 0000                       		dc.w But_Pressed-But_Index
0000DB12                            ; ===========================================================================
0000DB12                            
0000DB12                            But_Main:	; Routine 0
0000DB12 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DB16 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DB1E 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DB24 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DB2A 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DB2C                            
0000DB2C 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DB32                            
0000DB32                            	But_IsMZ:
0000DB32 117C 0004 0001             		move.b	#4,obRender(a0)
0000DB38 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DB3E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DB44 5668 000C                  		addq.w	#3,obY(a0)
0000DB48                            
0000DB48                            But_Pressed:	; Routine 2
0000DB48 4A28 0001                  		tst.b	obRender(a0)
0000DB4C 6A00                       		bpl.s	But_Display
0000DB4E 323C 001B                  		move.w	#$1B,d1
0000DB52 343C 0005                  		move.w	#5,d2
0000DB56 363C 0005                  		move.w	#5,d3
0000DB5A 3828 0008                  		move.w	obX(a0),d4
0000DB5E 6100 0000                  		bsr.w	SolidObject
0000DB62 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DB68 1028 0028                  		move.b	obSubtype(a0),d0
0000DB6C 0240 000F                  		andi.w	#$F,d0
0000DB70 47F8 F7E0                  		lea	(f_switch).w,a3
0000DB74 47F3 0000                  		lea	(a3,d0.w),a3
0000DB78 7600                       		moveq	#0,d3
0000DB7A 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DB80 6700                       		beq.s	loc_BDB2
0000DB82 7607                       		moveq	#7,d3
0000DB84                            
0000DB84                            loc_BDB2:
0000DB84 4A28 0028                  		tst.b	obSubtype(a0)
0000DB88 6A00                       		bpl.s	loc_BDBE
0000DB8A 6100 0000                  		bsr.w	But_MZBlock
0000DB8E 6600                       		bne.s	loc_BDC8
0000DB90                            
0000DB90                            loc_BDBE:
0000DB90 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DB94 6600                       		bne.s	loc_BDC8
0000DB96 0793                       		bclr	d3,(a3)
0000DB98 6000                       		bra.s	loc_BDDE
0000DB9A                            ; ===========================================================================
0000DB9A                            
0000DB9A                            loc_BDC8:
0000DB9A 4A13                       		tst.b	(a3)
0000DB9C 6600                       		bne.s	loc_BDD6
0000DBA8                            
0000DBA8                            loc_BDD6:
0000DBA8 07D3                       		bset	d3,(a3)
0000DBAA 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DBB0                            
0000DBB0                            loc_BDDE:
0000DBB0 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DBB6 6700                       		beq.s	But_Display
0000DBB8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DBBC 6A00                       		bpl.s	But_Display
0000DBBE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DBC4 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DBCA                            
0000DBCA                            But_Display:
0000DBCA 6100 0000                  		bsr.w	DisplaySprite
0000DBEC 4E75                       		rts	
0000DBEE                            ; ===========================================================================
0000DBEE                            
0000DBEE                            But_Delete:
0000DBEE 6100 0000                  		bsr.w	DeleteObject
0000DBF2 4E75                       		rts	
0000DBF4                            
0000DBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBF4                            
0000DBF4                            
0000DBF4                            But_MZBlock:
0000DBF4 3F03                       		move.w	d3,-(sp)
0000DBF6 3428 0008                  		move.w	obX(a0),d2
0000DBFA 3628 000C                  		move.w	obY(a0),d3
0000DBFE 0442 0010                  		subi.w	#$10,d2
0000DC02 5143                       		subq.w	#8,d3
0000DC04 383C 0020                  		move.w	#$20,d4
0000DC08 3A3C 0010                  		move.w	#$10,d5
0000DC0C 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DC10 3C3C 005F                  		move.w	#$5F,d6
0000DC14                            
0000DC14                            But_MZLoop:
0000DC14 4A29 0001                  		tst.b	obRender(a1)
0000DC18 6A00                       		bpl.s	loc_BE4E
0000DC1A 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DC1E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DC20                            
0000DC20                            loc_BE4E:
0000DC20 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DC24 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DC28                            
0000DC28 361F                       		move.w	(sp)+,d3
0000DC2A 7000                       		moveq	#0,d0
0000DC2C                            
0000DC2C                            locret_BE5A:
0000DC2C 4E75                       		rts	
0000DC2E                            ; ===========================================================================
0000DC2E 1010                       But_MZData:	dc.b $10, $10
0000DC30                            ; ===========================================================================
0000DC30                            
0000DC30                            loc_BE5E:
0000DC30 7001                       		moveq	#1,d0
0000DC32 0240 003F                  		andi.w	#$3F,d0
0000DC36 D040                       		add.w	d0,d0
0000DC38 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DC3C 121A                       		move.b	(a2)+,d1
0000DC3E 4881                       		ext.w	d1
0000DC40 3029 0008                  		move.w	obX(a1),d0
0000DC44 9041                       		sub.w	d1,d0
0000DC46 9042                       		sub.w	d2,d0
0000DC48 6400                       		bcc.s	loc_BE80
0000DC4A D241                       		add.w	d1,d1
0000DC4C D041                       		add.w	d1,d0
0000DC4E 6500                       		bcs.s	loc_BE84
0000DC50 60CE                       		bra.s	loc_BE4E
0000DC52                            ; ===========================================================================
0000DC52                            
0000DC52                            loc_BE80:
0000DC52 B044                       		cmp.w	d4,d0
0000DC54 62CA                       		bhi.s	loc_BE4E
0000DC56                            
0000DC56                            loc_BE84:
0000DC56 121A                       		move.b	(a2)+,d1
0000DC58 4881                       		ext.w	d1
0000DC5A 3029 000C                  		move.w	obY(a1),d0
0000DC5E 9041                       		sub.w	d1,d0
0000DC60 9043                       		sub.w	d3,d0
0000DC62 6400                       		bcc.s	loc_BE9A
0000DC64 D241                       		add.w	d1,d1
0000DC66 D041                       		add.w	d1,d0
0000DC68 6500                       		bcs.s	loc_BE9E
0000DC6A 60B4                       		bra.s	loc_BE4E
0000DC6C                            ; ===========================================================================
0000DC6C                            
0000DC6C                            loc_BE9A:
0000DC6C B045                       		cmp.w	d5,d0
0000DC6E 62B0                       		bhi.s	loc_BE4E
0000DC70                            
0000DC70                            loc_BE9E:
0000DC70 361F                       		move.w	(sp)+,d3
0000DC72 7001                       		moveq	#1,d0
0000DC74 4E75                       		rts	
0000DC76                            ; End of function But_MZBlock
0000DC76                            ; End of function But_MZBlock
0000DC76                            Map_But:	include	"_maps\Button.asm"
0000DC76                            ; ---------------------------------------------------------------------------
0000DC76                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DC76                            ; ---------------------------------------------------------------------------
0000DC76                            Map_But_internal:
0000DC76 0000                       		dc.w byte_BEAC-Map_But_internal
0000DC78 0000                       		dc.w byte_BEB7-Map_But_internal
0000DC7A 0000                       		dc.w byte_BEC2-Map_But_internal
0000DC7C 0000                       		dc.w byte_BEB7-Map_But_internal
0000DC7E 02                         byte_BEAC:	dc.b 2
0000DC7F F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DC84 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DC89 02                         byte_BEB7:	dc.b 2
0000DC8A F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DC8F F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DC94 02                         byte_BEC2:	dc.b 2
0000DC95 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DC9A F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DC9F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DCA4                            		even
0000DCA4                            		even
0000DCA4                            
0000DCA4                            		include	"_incObj\33 Pushable Blocks.asm"
0000DCA4                            ; ---------------------------------------------------------------------------
0000DCA4                            ; Object 33 - pushable blocks (MZ, LZ)
0000DCA4                            ; ---------------------------------------------------------------------------
0000DCA4                            
0000DCA4                            PushBlock:
0000DCA4 7000                       		moveq	#0,d0
0000DCA6 1028 0024                  		move.b	obRoutine(a0),d0
0000DCAA 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DCAE 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DCB2                            ; ===========================================================================
0000DCB2 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DCB4 0000                       		dc.w loc_BF6E-PushB_Index
0000DCB6 0000                       		dc.w loc_C02C-PushB_Index
0000DCB8                            
0000DCB8 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DCBA 4001                       		dc.b $40, 1
0000DCBC                            ; ===========================================================================
0000DCBC                            
0000DCBC                            PushB_Main:	; Routine 0
0000DCBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DCC0 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DCC6 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DCCC 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DCD4 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DCDA 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DCE0 6600                       		bne.s	@notLZ
0000DCE2 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DCE8                            
0000DCE8                            	@notLZ:
0000DCE8 117C 0004 0001             		move.b	#4,obRender(a0)
0000DCEE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000DCF4 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000DCFA 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000DD00 7000                       		moveq	#0,d0
0000DD02 1028 0028                  		move.b	obSubtype(a0),d0
0000DD06 D040                       		add.w	d0,d0
0000DD08 0240 000E                  		andi.w	#$E,d0
0000DD0C 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000DD10 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DD14 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DD18 4A28 0028                  		tst.b	obSubtype(a0)
0000DD1C 6700                       		beq.s	@chkgone
0000DD1E 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000DD24                            
0000DD24                            	@chkgone:
0000DD24 45F8 FC00                  		lea	(v_objstate).w,a2
0000DD28 7000                       		moveq	#0,d0
0000DD2A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DD2E 6700                       		beq.s	loc_BF6E
0000DD30 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000DD36 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000DD3C 6600 0000                  		bne.w	DeleteObject
0000DD40                            
0000DD40                            loc_BF6E:	; Routine 2
0000DD40 4A28 0032                  		tst.b	$32(a0)
0000DD44 6600 0000                  		bne.w	loc_C046
0000DD48 7200                       		moveq	#0,d1
0000DD4A 1228 0014                  		move.b	obActWid(a0),d1
0000DD4E 0641 000B                  		addi.w	#$B,d1
0000DD52 343C 0010                  		move.w	#$10,d2
0000DD56 363C 0011                  		move.w	#$11,d3
0000DD5A 3828 0008                  		move.w	obX(a0),d4
0000DD5E 6100 0000                  		bsr.w	loc_C186
0000DD62 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000DD68 6600                       		bne.s	loc_BFC6	; if not, branch
0000DD6A 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000DD70 3028 0008                  		move.w	obX(a0),d0
0000DD74 0C40 0A20                  		cmpi.w	#$A20,d0
0000DD78 6500                       		bcs.s	loc_BFC6
0000DD7A 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000DD7E 6400                       		bcc.s	loc_BFC6
0000DD80 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000DD84 0440 001C                  		subi.w	#$1C,d0
0000DD88 3140 000C                  		move.w	d0,obY(a0)
0000DD8C 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000DD92 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000DD98                            
0000DD98                            	loc_BFC6:
0000DDB4 6000 0000                  		bra.w	DisplaySprite
0000DDB8                            ; ===========================================================================
0000DDB8                            
0000DDB8                            loc_ppppp:
0000DDD4 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000DDDA 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000DDE0 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000DDE6 6000                       		bra.s	loc_C02C
0000DDE8                            ; ===========================================================================
0000DDE8                            
0000DDE8                            loc_C016:
0000DDE8 45F8 FC00                  		lea	(v_objstate).w,a2
0000DDEC 7000                       		moveq	#0,d0
0000DDEE 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DDF2 6700                       		beq.s	loc_C028
0000DDF4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DDFA                            
0000DDFA                            loc_C028:
0000DDFA 6000 0000                  		bra.w	DeleteObject
0000DDFE                            ; ===========================================================================
0000DDFE                            
0000DDFE                            loc_C02C:	; Routine 4
0000DDFE 6100 0000                  		bsr.w	ChkPartiallyVisible
0000DE02 6700                       		beq.s	locret_C044
0000DE04 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000DE0A 4228 0032                  		clr.b	$32(a0)
0000DE0E 4268 0010                  		clr.w	obVelX(a0)
0000DE12 4268 0012                  		clr.w	obVelY(a0)
0000DE16                            
0000DE16                            locret_C044:
0000DE16 4E75                       		rts	
0000DE18                            ; ===========================================================================
0000DE18                            
0000DE18                            loc_C046:
0000DE18 3F28 0008                  		move.w	obX(a0),-(sp)
0000DE1C 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000DE22 6400                       		bcc.s	loc_C056
0000DE24 6100 0000                  		bsr.w	SpeedToPos
0000DE28                            
0000DE28                            loc_C056:
0000DE28 0828 0001 0022             		btst	#1,obStatus(a0)
0000DE2E 6700                       		beq.s	loc_C0A0
0000DE30 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000DE36 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000DE3C 4A41                       		tst.w	d1
0000DE3E 6A00 0000                  		bpl.w	loc_C09E
0000DE42 D368 000C                  		add.w	d1,obY(a0)
0000DE46 4268 0012                  		clr.w	obVelY(a0)
0000DE4A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000DE50 3011                       		move.w	(a1),d0
0000DE52 0240 03FF                  		andi.w	#$3FF,d0
0000DE56 0C40 016A                  		cmpi.w	#$16A,d0
0000DE5A 6500                       		bcs.s	loc_C09E
0000DE5C 3028 0030                  		move.w	$30(a0),d0
0000DE60 E640                       		asr.w	#3,d0
0000DE62 3140 0010                  		move.w	d0,obVelX(a0)
0000DE66 117C 0001 0032             		move.b	#1,$32(a0)
0000DE6C 4268 000E                  		clr.w	$E(a0)
0000DE70                            
0000DE70                            loc_C09E:
0000DE70 6000                       		bra.s	loc_C0E6
0000DE72                            ; ===========================================================================
0000DE72                            
0000DE72                            loc_C0A0:
0000DE72 4A68 0010                  		tst.w	obVelX(a0)
0000DE76 6700 0000                  		beq.w	loc_C0D6
0000DE7A 6B00                       		bmi.s	loc_C0BC
0000DE7C 7600                       		moveq	#0,d3
0000DE7E 1628 0014                  		move.b	obActWid(a0),d3
0000DE82 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000DE88 4A41                       		tst.w	d1		; has block touched a wall?
0000DE8A 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DE8C 6000                       		bra.s	loc_C0E6
0000DE8E                            ; ===========================================================================
0000DE8E                            
0000DE8E                            loc_C0BC:
0000DE8E 7600                       		moveq	#0,d3
0000DE90 1628 0014                  		move.b	obActWid(a0),d3
0000DE94 4643                       		not.w	d3
0000DE96 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000DE9C 4A41                       		tst.w	d1		; has block touched a wall?
0000DE9E 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DEA0 6000                       		bra.s	loc_C0E6
0000DEA2                            ; ===========================================================================
0000DEA2                            
0000DEA2                            PushB_StopPush:
0000DEA2 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000DEA6 6000                       		bra.s	loc_C0E6
0000DEA8                            ; ===========================================================================
0000DEA8                            
0000DEA8                            loc_C0D6:
0000DEA8 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000DEB0 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000DEB6 6400                       		bcc.s	loc_C104
0000DEB8                            
0000DEB8                            loc_C0E6:
0000DEB8 7200                       		moveq	#0,d1
0000DEBA 1228 0014                  		move.b	obActWid(a0),d1
0000DEBE 0641 000B                  		addi.w	#$B,d1
0000DEC2 343C 0010                  		move.w	#$10,d2
0000DEC6 363C 0011                  		move.w	#$11,d3
0000DECA 381F                       		move.w	(sp)+,d4
0000DECC 6100 0000                  		bsr.w	loc_C186
0000DED0 6100                       		bsr.s	PushB_ChkLava
0000DED2 6000 FEC4                  		bra.w	loc_BFC6
0000DED6                            ; ===========================================================================
0000DED6                            
0000DED6                            loc_C104:
0000DED6 381F                       		move.w	(sp)+,d4
0000DED8 43F8 D000                  		lea	(v_player).w,a1
0000DEDC 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000DEE2 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000DEE8 6000 FECE                  		bra.w	loc_ppppp
0000DEEC                            ; ===========================================================================
0000DEEC                            
0000DEEC                            PushB_ChkLava:
0000DEEC 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000DEF2 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000DEF4 343C FFE0                  		move.w	#-$20,d2
0000DEF8 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000DEFE 6700                       		beq.s	PushB_LoadLava
0000DF00 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000DF06 6700                       		beq.s	PushB_LoadLava
0000DF08 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000DF0E 6700                       		beq.s	PushB_LoadLava
0000DF10 4E75                       		rts	
0000DF12                            ; ===========================================================================
0000DF12                            
0000DF12                            PushB_ChkLava2:
0000DF12 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000DF18 6600                       		bne.s	PushB_NoLava	; if not, branch
0000DF1A 343C 0020                  		move.w	#$20,d2
0000DF1E 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000DF24 6700                       		beq.s	PushB_LoadLava
0000DF26 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000DF2C 6700                       		beq.s	PushB_LoadLava
0000DF2E                            
0000DF2E                            PushB_NoLava:
0000DF2E 4E75                       		rts	
0000DF30                            ; ===========================================================================
0000DF30                            
0000DF30                            PushB_LoadLava:
0000DF30 6100 0000                  		bsr.w	FindFreeObj
0000DF34 6600                       		bne.s	locret_C184
0000DF36 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000DF3A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DF40 D569 0008                  		add.w	d2,obX(a1)
0000DF44 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DF4A 0669 0010 000C             		addi.w	#$10,obY(a1)
0000DF50 2348 003C                  		move.l	a0,$3C(a1)
0000DF54                            
0000DF54                            locret_C184:
0000DF54 4E75                       		rts	
0000DF56                            ; ===========================================================================
0000DF56                            
0000DF56                            loc_C186:
0000DF56 1028 0025                  		move.b	ob2ndRout(a0),d0
0000DF5A 6700 0000                  		beq.w	loc_C218
0000DF5E 5500                       		subq.b	#2,d0
0000DF60 6600                       		bne.s	loc_C1AA
0000DF62 6100 AD08                  		bsr.w	ExitPlatform
0000DF66 0829 0003 0022             		btst	#3,obStatus(a1)
0000DF6C 6600                       		bne.s	loc_C1A4
0000DF6E 4228 0025                  		clr.b	ob2ndRout(a0)
0000DF72 4E75                       		rts	
0000DF74                            ; ===========================================================================
0000DF74                            
0000DF74                            loc_C1A4:
0000DF74 3404                       		move.w	d4,d2
0000DF76 6000 B252                  		bra.w	MvSonicOnPtfm
0000DF7A                            ; ===========================================================================
0000DF7A                            
0000DF7A                            loc_C1AA:
0000DF7A 5500                       		subq.b	#2,d0
0000DF7C 6600                       		bne.s	loc_C1F2
0000DF7E 6100 0000                  		bsr.w	SpeedToPos
0000DF82 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000DF88 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000DF8E 4A41                       		tst.w	d1
0000DF90 6A00 0000                  		bpl.w	locret_C1F0
0000DF94 D368 000C                  		add.w	d1,obY(a0)
0000DF98 4268 0012                  		clr.w	obVelY(a0)
0000DF9C 4228 0025                  		clr.b	ob2ndRout(a0)
0000DFA0 3011                       		move.w	(a1),d0
0000DFA2 0240 03FF                  		andi.w	#$3FF,d0
0000DFA6 0C40 016A                  		cmpi.w	#$16A,d0
0000DFAA 6500                       		bcs.s	locret_C1F0
0000DFAC 3028 0030                  		move.w	$30(a0),d0
0000DFB0 E640                       		asr.w	#3,d0
0000DFB2 3140 0010                  		move.w	d0,obVelX(a0)
0000DFB6 117C 0001 0032             		move.b	#1,$32(a0)
0000DFBC 4268 000E                  		clr.w	obY+2(a0)
0000DFC0                            
0000DFC0                            locret_C1F0:
0000DFC0 4E75                       		rts	
0000DFC2                            ; ===========================================================================
0000DFC2                            
0000DFC2                            loc_C1F2:
0000DFC2 6100 0000                  		bsr.w	SpeedToPos
0000DFC6 3028 0008                  		move.w	obX(a0),d0
0000DFCA 0240 000C                  		andi.w	#$C,d0
0000DFCE 6600 0000                  		bne.w	locret_C2E4
0000DFD2 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000DFD8 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000DFDE 4268 0010                  		clr.w	obVelX(a0)
0000DFE2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000DFE6 4E75                       		rts	
0000DFE8                            ; ===========================================================================
0000DFE8                            
0000DFE8                            loc_C218:
0000DFE8 6100 0000                  		bsr.w	Solid_ChkEnter
0000DFEC 4A44                       		tst.w	d4
0000DFEE 6700 0000                  		beq.w	locret_C2E4
0000DFF2 6B00 0000                  		bmi.w	locret_C2E4
0000DFF6 4A28 0032                  		tst.b	$32(a0)
0000DFFA 6700                       		beq.s	loc_C230
0000DFFC 6000 0000                  		bra.w	locret_C2E4
0000E000                            ; ===========================================================================
0000E000                            
0000E000                            loc_C230:
0000E000 4A40                       		tst.w	d0
0000E002 6700 0000                  		beq.w	locret_C2E4
0000E006 6B00                       		bmi.s	loc_C268
0000E008 0829 0000 0022             		btst	#0,obStatus(a1)
0000E00E 6600 0000                  		bne.w	locret_C2E4
0000E012 3F00                       		move.w	d0,-(sp)
0000E014 7600                       		moveq	#0,d3
0000E016 1628 0014                  		move.b	obActWid(a0),d3
0000E01A 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E020 301F                       		move.w	(sp)+,d0
0000E022 4A41                       		tst.w	d1
0000E024 6B00 0000                  		bmi.w	locret_C2E4
0000E028 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E030 7001                       		moveq	#1,d0
0000E032 323C 0040                  		move.w	#$40,d1
0000E036 6000                       		bra.s	loc_C294
0000E038                            ; ===========================================================================
0000E038                            
0000E038                            loc_C268:
0000E038 0829 0000 0022             		btst	#0,obStatus(a1)
0000E03E 6700                       		beq.s	locret_C2E4
0000E040 3F00                       		move.w	d0,-(sp)
0000E042 7600                       		moveq	#0,d3
0000E044 1628 0014                  		move.b	obActWid(a0),d3
0000E048 4643                       		not.w	d3
0000E04A 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E050 301F                       		move.w	(sp)+,d0
0000E052 4A41                       		tst.w	d1
0000E054 6B00                       		bmi.s	locret_C2E4
0000E056 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E05E 70FF                       		moveq	#-1,d0
0000E060 323C FFC0                  		move.w	#-$40,d1
0000E064                            
0000E064                            loc_C294:
0000E064 43F8 D000                  		lea	(v_player).w,a1
0000E068 D169 0008                  		add.w	d0,obX(a1)
0000E06C 3341 0020                  		move.w	d1,obInertia(a1)
0000E070 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E076 3F00                       		move.w	d0,-(sp)
0000E082 301F                       		move.w	(sp)+,d0
0000E084 4A28 0028                  		tst.b	obSubtype(a0)
0000E088 6B00                       		bmi.s	locret_C2E4
0000E08A 3F00                       		move.w	d0,-(sp)
0000E08C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E092 301F                       		move.w	(sp)+,d0
0000E094 0C41 0004                  		cmpi.w	#4,d1
0000E098 6F00                       		ble.s	loc_C2E0
0000E09A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E0A0 4A40                       		tst.w	d0
0000E0A2 6A00                       		bpl.s	loc_C2D8
0000E0A4 4468 0010                  		neg.w	obVelX(a0)
0000E0A8                            
0000E0A8                            loc_C2D8:
0000E0A8 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E0AE 6000                       		bra.s	locret_C2E4
0000E0B0                            ; ===========================================================================
0000E0B0                            
0000E0B0                            loc_C2E0:
0000E0B0 D368 000C                  		add.w	d1,obY(a0)
0000E0B4                            
0000E0B4                            locret_C2E4:
0000E0B4 4E75                       		rts	
0000E0B4 4E75                       		rts	
0000E0B6                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E0B6                            ; ---------------------------------------------------------------------------
0000E0B6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E0B6                            ; ---------------------------------------------------------------------------
0000E0B6                            Map_Push_internal:
0000E0B6 0000                       		dc.w @single-Map_Push_internal
0000E0B8 0000                       		dc.w @four-Map_Push_internal
0000E0BA 01                         @single:	dc.b 1
0000E0BB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E0C0 04                         @four:		dc.b 4
0000E0C1 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E0C6 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E0CB F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E0D0 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E0D6 00                         		even
0000E0D6 00                         		even
0000E0D6                            
0000E0D6                            		include	"_incObj\34 Title Cards.asm"
0000E0D6                            ; ---------------------------------------------------------------------------
0000E0D6                            ; Object 34 - zone title cards
0000E0D6                            ; ---------------------------------------------------------------------------
0000E0D6                            
0000E0D6                            TitleCard:
0000E0D6 7000                       		moveq	#0,d0
0000E0D8 1028 0024                  		move.b	obRoutine(a0),d0
0000E0DC 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E0E0 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E0E4                            ; ===========================================================================
0000E0E4 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E0E6 0000                       		dc.w Card_ChkPos-Card_Index
0000E0E8 0000                       		dc.w Card_Wait-Card_Index
0000E0EA 0000                       		dc.w Card_Wait-Card_Index
0000E0EC                            
0000E0EC =00000030                  card_mainX:	equ $30		; position for card to display on
0000E0EC =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E0EC                            ; ===========================================================================
0000E0EC                            
0000E0EC                            Card_CheckSBZ3:	; Routine 0
0000E0EC 2248                       		movea.l	a0,a1
0000E0EE 7000                       		moveq	#0,d0
0000E0F0 1038 FE10                  		move.b	(v_zone).w,d0
0000E0F4 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E0FA 6600                       		bne.s	Card_CheckFZ
0000E0FC 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E0FE                            
0000E0FE                            	Card_CheckFZ:
0000E0FE 3400                       		move.w	d0,d2
0000E100 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E106 6600                       		bne.s	Card_LoadConfig
0000E108 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E10A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E10C                            
0000E10C                            	Card_LoadConfig:
0000E10C 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E112 E948                       		lsl.w	#4,d0
0000E114 D6C0                       		adda.w	d0,a3
0000E116 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E11C 7203                       		moveq	#3,d1
0000E11E                            
0000E11E                            Card_Loop:
0000E11E 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E122 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E126 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E12A 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E12E 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E132 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E136 101A                       		move.b	(a2)+,d0
0000E138 6600                       		bne.s	Card_ActNumber
0000E13A 1002                       		move.b	d2,d0
0000E13C                            
0000E13C                            	Card_ActNumber:
0000E13C 0C00 0007                  		cmpi.b	#7,d0
0000E140 6600                       		bne.s	Card_MakeSprite
0000E142 D038 FE11                  		add.b	(v_act).w,d0
0000E146 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E14C 6600                       		bne.s	Card_MakeSprite
0000E14E 5300                       		subq.b	#1,d0
0000E150                            
0000E150                            	Card_MakeSprite:
0000E150 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E154 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E15C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E162 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E168 137C 0000 0001             		move.b	#0,obRender(a1)
0000E16E 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E174 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E17A 43E9 0040                  		lea	$40(a1),a1	; next object
0000E17E 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E182                            
0000E182                            Card_ChkPos:	; Routine 2
0000E182 7210                       		moveq	#$10,d1		; set horizontal speed
0000E184 3028 0030                  		move.w	card_mainX(a0),d0
0000E188 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E18C 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E18E 6C00                       		bge.s	Card_Move
0000E190 4441                       		neg.w	d1
0000E192                            
0000E192                            Card_Move:
0000E192 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E196                            
0000E196                            Card_NoMove:
0000E196 3028 0008                  		move.w	obX(a0),d0
0000E19A 6B00                       		bmi.s	locret_C3D8
0000E19C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E1A0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E1A2 6000 0000                  		bra.w	DisplaySprite
0000E1A6                            ; ===========================================================================
0000E1A6                            
0000E1A6                            locret_C3D8:
0000E1A6 4E75                       		rts	
0000E1A8                            ; ===========================================================================
0000E1A8                            
0000E1A8                            Card_Wait:	; Routine 4/6
0000E1A8 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E1AC 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E1AE 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E1B2 6000 0000                  		bra.w	DisplaySprite
0000E1B6                            ; ===========================================================================
0000E1B6                            
0000E1B6                            Card_ChkPos2:
0000E1B6 4A28 0001                  		tst.b	obRender(a0)
0000E1BA 6A00                       		bpl.s	Card_ChangeArt
0000E1BC 7220                       		moveq	#$20,d1
0000E1BE 3028 0032                  		move.w	card_finalX(a0),d0
0000E1C2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E1C6 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E1C8 6C00                       		bge.s	Card_Move2
0000E1CA 4441                       		neg.w	d1
0000E1CC                            
0000E1CC                            Card_Move2:
0000E1CC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E1D0 3028 0008                  		move.w	obX(a0),d0
0000E1D4 6B00                       		bmi.s	locret_C412
0000E1D6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E1DA 6400                       		bcc.s	locret_C412	; if yes, branch
0000E1DC 6000 0000                  		bra.w	DisplaySprite
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            locret_C412:
0000E1E0 4E75                       		rts	
0000E1E2                            ; ===========================================================================
0000E1E2                            
0000E1E2                            Card_ChangeArt:
0000E1E2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E1E8 6600                       		bne.s	Card_Delete
0000E1EA 7000                       		moveq	#plcid_Explode,d0
0000E1EC 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E1F2 7000                       		moveq	#0,d0
0000E1F4 1038 FE10                  		move.b	(v_zone).w,d0
0000E1F8 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E1FC 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E202                            
0000E202                            Card_Delete:
0000E202 6000 0000                  		bra.w	DeleteObject
0000E206                            ; ===========================================================================
0000E206 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E208 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E20A 00E4                       		dc.w $E4
0000E20C 0206                       		dc.b 2,	6
0000E20E 00EA                       		dc.w $EA
0000E210 0207                       		dc.b 2,	7
0000E212 00E0                       		dc.w $E0
0000E214 020A                       		dc.b 2,	$A
0000E216                            ; ---------------------------------------------------------------------------
0000E216                            ; Title	card configuration data
0000E216                            ; Format:
0000E216                            ; 4 bytes per item (YYYY XXXX)
0000E216                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E216                            ; ---------------------------------------------------------------------------
0000E216 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E226 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E236 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E246 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E256 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E266 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E276 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E286                            ; ===========================================================================
0000E286                            ; ===========================================================================
0000E286                            		include	"_incObj\39 Game Over.asm"
0000E286                            ; ---------------------------------------------------------------------------
0000E286                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E286                            ; ---------------------------------------------------------------------------
0000E286                            
0000E286                            GameOverCard:
0000E286 7000                       		moveq	#0,d0
0000E288 1028 0024                  		move.b	obRoutine(a0),d0
0000E28C 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E290 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E294                            ; ===========================================================================
0000E294 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E296 0000                       		dc.w Over_Move-Over_Index
0000E298 0000                       		dc.w Over_Wait-Over_Index
0000E29A                            ; ===========================================================================
0000E29A                            
0000E29A                            Over_ChkPLC:	; Routine 0
0000E29A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E29E 6700                       		beq.s	Over_Main	; if yes, branch
0000E2A0 4E75                       		rts	
0000E2A2                            ; ===========================================================================
0000E2A2                            
0000E2A2                            Over_Main:
0000E2A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E2A6 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E2AC 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E2B2 6700                       		beq.s	Over_1stWord	; if not, branch
0000E2B4 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E2BA                            
0000E2BA                            	Over_1stWord:
0000E2BA 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E2C0 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E2C8 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E2CE 117C 0000 0001             		move.b	#0,obRender(a0)
0000E2D4 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E2DA                            
0000E2DA                            Over_Move:	; Routine 2
0000E2DA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E2DC 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E2E2 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E2E4 6500                       		bcs.s	Over_UpdatePos
0000E2E6 4441                       		neg.w	d1
0000E2E8                            
0000E2E8                            	Over_UpdatePos:
0000E2E8 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E2EC 6000 0000                  		bra.w	DisplaySprite
0000E2F0                            ; ===========================================================================
0000E2F0                            
0000E2F0                            Over_SetWait:
0000E2F0 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E2F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E2FA 4E75                       		rts	
0000E2FC                            ; ===========================================================================
0000E2FC                            
0000E2FC                            Over_Wait:	; Routine 4
0000E2FC 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E300 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E304 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E306 0828 0000 001A             		btst	#0,obFrame(a0)
0000E30C 6600                       		bne.s	Over_Display
0000E30E 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E312 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E314 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E318 6000 0000                  		bra.w	DisplaySprite
0000E31C                            ; ===========================================================================
0000E31C                            
0000E31C                            Over_ChgMode:
0000E31C 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E320 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E322 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E328 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E32C 6600                       		bne.s	Over_Display	; if yes, branch
0000E32E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E334 6000                       		bra.s	Over_Display
0000E336                            ; ===========================================================================
0000E336                            
0000E336                            Over_ResetLvl:
0000E336 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E33A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E340                            
0000E340                            Over_Display:
0000E340 6000 0000                  		bra.w	DisplaySprite
0000E340 6000 0000                  		bra.w	DisplaySprite
0000E344                            		include	"_incObj\3A Got Through Card.asm"
0000E344                            ; ---------------------------------------------------------------------------
0000E344                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E344                            ; ---------------------------------------------------------------------------
0000E344                            
0000E344                            GotThroughCard:
0000E344 7000                       		moveq	#0,d0
0000E346 1028 0024                  		move.b	obRoutine(a0),d0
0000E34A 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E34E 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E352                            ; ===========================================================================
0000E352 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E354 0000                       		dc.w Got_Move-Got_Index
0000E356 0000                       		dc.w Got_Wait-Got_Index
0000E358 0000                       		dc.w Got_TimeBonus-Got_Index
0000E35A 0000                       		dc.w Got_Wait-Got_Index
0000E35C 0000                       		dc.w Got_NextLevel-Got_Index
0000E35E 0000                       		dc.w Got_Wait-Got_Index
0000E360 0000                       		dc.w Got_Move2-Got_Index
0000E362 0000                       		dc.w loc_C766-Got_Index
0000E364                            
0000E364 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E364 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E364                            ; ===========================================================================
0000E364                            
0000E364                            Got_ChkPLC:	; Routine 0
0000E364 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E368 6700                       		beq.s	Got_Main	; if yes, branch
0000E36A 4E75                       		rts	
0000E36C                            ; ===========================================================================
0000E36C                            
0000E36C                            Got_Main:
0000E36C 2248                       		movea.l	a0,a1
0000E36E 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E374 7206                       		moveq	#6,d1
0000E376                            
0000E376                            Got_Loop:
0000E376 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E37A 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E37E 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E382 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E386 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E38A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E38E 101A                       		move.b	(a2)+,d0
0000E390 0C00 0006                  		cmpi.b	#6,d0
0000E394 6600                       		bne.s	loc_C5CA
0000E396 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E39A                            
0000E39A                            	loc_C5CA:
0000E39A 1340 001A                  		move.b	d0,obFrame(a1)
0000E39E 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E3A6 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E3AC 137C 0000 0001             		move.b	#0,obRender(a1)
0000E3B2 43E9 0040                  		lea	$40(a1),a1
0000E3B6 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E3BA                            
0000E3BA                            Got_Move:	; Routine 2
0000E3BA 7210                       		moveq	#$10,d1		; set horizontal speed
0000E3BC 3028 0030                  		move.w	got_mainX(a0),d0
0000E3C0 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E3C4 6700                       		beq.s	loc_C61A	; if yes, branch
0000E3C6 6C00                       		bge.s	Got_ChgPos
0000E3C8 4441                       		neg.w	d1
0000E3CA                            
0000E3CA                            	Got_ChgPos:
0000E3CA D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E3CE                            
0000E3CE                            	loc_C5FE:
0000E3CE 3028 0008                  		move.w	obX(a0),d0
0000E3D2 6B00                       		bmi.s	locret_C60E
0000E3D4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E3D8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E3DA 6000 0000                  		bra.w	DisplaySprite
0000E3DE                            ; ===========================================================================
0000E3DE                            
0000E3DE                            locret_C60E:
0000E3DE 4E75                       		rts	
0000E3E0                            ; ===========================================================================
0000E3E0                            
0000E3E0                            loc_C610:
0000E3E0 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E3E6 6000 0000                  		bra.w	Got_Move2
0000E3EA                            ; ===========================================================================
0000E3EA                            
0000E3EA                            loc_C61A:
0000E3EA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E3F0 67EE                       		beq.s	loc_C610
0000E3F2 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E3F8 66D4                       		bne.s	loc_C5FE
0000E3FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E3FE 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E404                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E404                            
0000E404                            Got_Wait:	; Routine 4, 8, $C
0000E404 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E408 6600                       		bne.s	Got_Display
0000E40A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E40E                            
0000E40E                            Got_Display:
0000E40E 6000 0000                  		bra.w	DisplaySprite
0000E412                            ; ===========================================================================
0000E412                            
0000E412                            Got_TimeBonus:	; Routine 6
0000E412 6100 0000                  		bsr.w	DisplaySprite
0000E416 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E41C 7000                       		moveq	#0,d0
0000E41E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E422 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E424 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E428 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E42E                            
0000E42E                            Got_RingBonus:
0000E42E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E432 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E434 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E438 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E43E                            
0000E43E                            Got_ChkBonus:
0000E43E 4A40                       		tst.w	d0		; is there any bonus?
0000E440 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E44C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E450 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E456 6600                       		bne.s	Got_SetDelay
0000E458 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E45C                            
0000E45C                            Got_SetDelay:
0000E45C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E462                            
0000E462                            locret_C692:
0000E462 4E75                       		rts	
0000E464                            ; ===========================================================================
0000E464                            
0000E464                            Got_AddBonus:
0000E464 4EB9 0000 0000             		jsr	(AddPoints).l
0000E46A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E46E 0200 0003                  		andi.b	#3,d0
0000E472 66EE                       		bne.s	locret_C692
0000E47E                            ; ===========================================================================
0000E47E                            
0000E47E                            Got_NextLevel:	; Routine $A
0000E47E 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E484 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E48A 1038 FE10                  		move.b	(v_zone).w,d0
0000E48E 0240 0007                  		andi.w	#7,d0
0000E492 E748                       		lsl.w	#3,d0
0000E494 1238 FE11                  		move.b	(v_act).w,d1
0000E498 0241 0003                  		andi.w	#3,d1
0000E49C D241                       		add.w	d1,d1
0000E49E D041                       		add.w	d1,d0
0000E4A0 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E4A4 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E4A8 4A40                       		tst.w	d0
0000E4AA 6600                       		bne.s	Got_ChkSS
0000E4AC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E4B2 6000                       		bra.s	Got_Display2
0000E4B4                            ; ===========================================================================
0000E4B4                            
0000E4B4                            Got_ChkSS:	
0000E4B4 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E4B8                            		;tst.b	(f_emeraldm).w
0000E4B8                            		;beq.s	VBla_08A
0000E4B8                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E4B8                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E4B8                            		;bra.s	Got_Display2
0000E4B8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E4BE                            		
0000E4BE                            ; ===========================================================================
0000E4BE                            
0000E4BE                            VBla_08A:
0000E4BE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E4C4                            
0000E4C4                            Got_Display2:
0000E4C4 6000 0000                  		bra.w	DisplaySprite
0000E4C8                            ; ===========================================================================
0000E4C8                            ; ---------------------------------------------------------------------------
0000E4C8                            ; Level	order array
0000E4C8                            ; ---------------------------------------------------------------------------
0000E4C8                            LevelOrder:
0000E4C8                            		; Green Hill Zone
0000E4C8 0001                       		dc.b id_GHZ, 1	; Act 2
0000E4CA 0002                       		dc.b id_GHZ, 2	; Act 2
0000E4CC 0400                       		dc.b id_SYZ, 0	; Act 3
0000E4CE 0000                       		dc.b 0, 0
0000E4D0                            
0000E4D0                            		; Labyrinth Zone
0000E4D0 0101                       		dc.b id_LZ, 1	; Act 1
0000E4D2 0102                       		dc.b id_LZ, 2	; Act 2
0000E4D4 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E4D6 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E4D8                            
0000E4D8                            		; Marble Zone
0000E4D8 0201                       		dc.b id_MZ, 1	; Act 1
0000E4DA 0202                       		dc.b id_MZ, 2	; Act 2
0000E4DC 0502                       		dc.b id_SBZ, 2	; Act 3
0000E4DE 0000                       		dc.b 0, 0
0000E4E0                            
0000E4E0                            		; Star Light Zone
0000E4E0 0301                       		dc.b id_SLZ, 1	; Act 1
0000E4E2 0302                       		dc.b id_SLZ, 2	; Act 2
0000E4E4 0500                       		dc.b id_SBZ, 0	; Act 3
0000E4E6 0000                       		dc.b 0, 0
0000E4E8                            
0000E4E8                            		; Spring Yard Zone
0000E4E8 0401                       		dc.b id_SYZ, 1	; Act 1
0000E4EA 0200                       		dc.b id_MZ,  0	; Act 2
0000E4EC 0200                       		dc.b id_MZ,	 0	; Act 3
0000E4EE 0000                       		dc.b 0, 0
0000E4F0                            
0000E4F0                            		; Scrap Brain Zone
0000E4F0 0501                       		dc.b id_SBZ, 1	; Act 1
0000E4F2 0103                       		dc.b id_LZ, 3	; Act 2
0000E4F4 0000                       		dc.b 0, 0	; Final Zone
0000E4F6 0000                       		dc.b 0, 0
0000E4F8                            		even
0000E4F8                            ; ===========================================================================
0000E4F8                            
0000E4F8                            Got_Move2:	; Routine $E
0000E4F8 7220                       		moveq	#$20,d1		; set horizontal speed
0000E4FA 3028 0032                  		move.w	got_finalX(a0),d0
0000E4FE B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E502 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E504 6C00                       		bge.s	Got_ChgPos2
0000E506 4441                       		neg.w	d1
0000E508                            
0000E508                            	Got_ChgPos2:
0000E508 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E50C 3028 0008                  		move.w	obX(a0),d0
0000E510 6B00                       		bmi.s	locret_C748
0000E512 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E516 6400                       		bcc.s	locret_C748	; if yes, branch
0000E518 6000 0000                  		bra.w	DisplaySprite
0000E51C                            ; ===========================================================================
0000E51C                            
0000E51C                            locret_C748:
0000E51C 4E75                       		rts	
0000E51E                            ; ===========================================================================
0000E51E                            
0000E51E                            Got_SBZ2:
0000E51E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E524 6600 0000                  		bne.w	DeleteObject
0000E528 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E52C 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E530 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E536                            ; ===========================================================================
0000E536                            
0000E536                            loc_C766:	; Routine $10
0000E536 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E53A 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E540 6700 0000                  		beq.w	DeleteObject
0000E544 4E75                       		rts	
0000E546                            ; ===========================================================================
0000E546                            		;    x-start,	x-main,	y-main,
0000E546                            		;				routine, frame number
0000E546                            
0000E546 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E54C 0200                       		dc.b 				2,	0
0000E54E                            
0000E54E FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E554 0201                       		dc.b 				2,	1
0000E556                            
0000E556 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E55C 0206                       		dc.b 				2,	6
0000E55E                            
0000E55E 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E564 0202                       		dc.b 				2,	2
0000E566                            
0000E566 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E56C 0203                       		dc.b 				2,	3
0000E56E                            
0000E56E 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E574 0204                       		dc.b 				2,	4
0000E576                            
0000E576 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E57C 0205                       		dc.b 				2,	5
0000E57C 0205                       		dc.b 				2,	5
0000E57E                            		include	"_incObj\7E Special Stage Results.asm"
0000E57E                            ; ---------------------------------------------------------------------------
0000E57E                            ; Object 7E - special stage results screen
0000E57E                            ; ---------------------------------------------------------------------------
0000E57E                            
0000E57E                            SSResult:
0000E57E 7000                       		moveq	#0,d0
0000E580 1028 0024                  		move.b	obRoutine(a0),d0
0000E584 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E588 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E58C                            ; ===========================================================================
0000E58C 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E58E 0000                       		dc.w SSR_Move-SSR_Index
0000E590 0000                       		dc.w SSR_Wait-SSR_Index
0000E592 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E594 0000                       		dc.w SSR_Wait-SSR_Index
0000E596 0000                       		dc.w SSR_Exit-SSR_Index
0000E598 0000                       		dc.w SSR_Wait-SSR_Index
0000E59A 0000                       		dc.w SSR_Continue-SSR_Index
0000E59C 0000                       		dc.w SSR_Wait-SSR_Index
0000E59E 0000                       		dc.w SSR_Exit-SSR_Index
0000E5A0 0000                       		dc.w loc_C91A-SSR_Index
0000E5A2                            
0000E5A2 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E5A2                            ; ===========================================================================
0000E5A2                            
0000E5A2                            SSR_ChkPLC:	; Routine 0
0000E5A2 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E5A6 6700                       		beq.s	SSR_Main	; if yes, branch
0000E5A8 4E75                       		rts	
0000E5AA                            ; ===========================================================================
0000E5AA                            
0000E5AA                            SSR_Main:
0000E5AA 2248                       		movea.l	a0,a1
0000E5AC 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E5B2 7203                       		moveq	#3,d1
0000E5B4 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E5BA 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E5BC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E5BE                            
0000E5BE                            	SSR_Loop:
0000E5BE 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E5C2 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E5C6 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E5CA 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E5CE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E5D2 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E5D6 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E5DE 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E5E4 137C 0000 0001             		move.b	#0,obRender(a1)
0000E5EA 43E9 0040                  		lea	$40(a1),a1
0000E5EE 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E5F2                            
0000E5F2 7007                       		moveq	#7,d0
0000E5F4 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E5F8 6700                       		beq.s	loc_C842
0000E5FA 7000                       		moveq	#0,d0
0000E5FC 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E600 6600                       		bne.s	loc_C842	; if not, branch
0000E602 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E604 317C 0018 0008             		move.w	#$18,obX(a0)
0000E60A 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E610                            
0000E610                            loc_C842:
0000E610 1140 001A                  		move.b	d0,obFrame(a0)
0000E614                            
0000E614                            SSR_Move:	; Routine 2
0000E614 7210                       		moveq	#$10,d1		; set horizontal speed
0000E616 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E61A B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E61E 6700                       		beq.s	loc_C86C	; if yes, branch
0000E620 6C00                       		bge.s	SSR_ChgPos
0000E622 4441                       		neg.w	d1
0000E624                            
0000E624                            SSR_ChgPos:
0000E624 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E628                            
0000E628                            loc_C85A:
0000E628 3028 0008                  		move.w	obX(a0),d0
0000E62C 6B00                       		bmi.s	locret_C86A
0000E62E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E632 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E634 6000 0000                  		bra.w	DisplaySprite
0000E638                            ; ===========================================================================
0000E638                            
0000E638                            locret_C86A:
0000E638 4E75                       		rts	
0000E63A                            ; ===========================================================================
0000E63A                            
0000E63A                            loc_C86C:
0000E63A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E640 66E6                       		bne.s	loc_C85A
0000E642 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E646 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E64C 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E652                            
0000E652                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E652 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E656 6600                       		bne.s	SSR_Display
0000E658 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E65C                            
0000E65C                            SSR_Display:
0000E65C 6000 0000                  		bra.w	DisplaySprite
0000E660                            ; ===========================================================================
0000E660                            
0000E660                            SSR_RingBonus:	; Routine 6
0000E660 6100 0000                  		bsr.w	DisplaySprite
0000E664 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E66A 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E66E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E670 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E676 700A                       		moveq	#10,d0		; add 10 to score
0000E678 4EB9 0000 0000             		jsr	(AddPoints).l
0000E67E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E682 0200 0003                  		andi.b	#3,d0
0000E686 6600                       		bne.s	locret_C8EA
0000E692                            ; ===========================================================================
0000E692                            
0000E692                            loc_C8C4:
0000E69C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6A0 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E6A6 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E6AC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E6AE 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E6B4 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E6B8                            
0000E6B8                            locret_C8EA:
0000E6B8 4E75                       		rts	
0000E6BA                            ; ===========================================================================
0000E6BA                            
0000E6BA                            SSR_Exit:	; Routine $A, $12
0000E6BA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E6C0 6000 0000                  		bra.w	DisplaySprite
0000E6C4                            ; ===========================================================================
0000E6C4                            
0000E6C4                            SSR_Continue:	; Routine $E
0000E6C4 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E6CA 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E6DA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6DE 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E6E4 6000 0000                  		bra.w	DisplaySprite
0000E6E8                            ; ===========================================================================
0000E6E8                            
0000E6E8                            loc_C91A:	; Routine $14
0000E6E8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E6EC 0200 000F                  		andi.b	#$F,d0
0000E6F0 6600                       		bne.s	SSR_Display2
0000E6F2 0868 0000 001A             		bchg	#0,obFrame(a0)
0000E6F8                            
0000E6F8                            SSR_Display2:
0000E6F8 6000 0000                  		bra.w	DisplaySprite
0000E6FC                            ; ===========================================================================
0000E6FC 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E702 0200                       		dc.b 2,	0		; rountine number, frame number
0000E704 0320 0120 0118             		dc.w $320, $120, $118
0000E70A 0201                       		dc.b 2,	1
0000E70C 0360 0120 0128             		dc.w $360, $120, $128
0000E712 0202                       		dc.b 2,	2
0000E714 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E71A 0203                       		dc.b 2,	3
0000E71C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E722 0206                       		dc.b 2,	6
0000E722 0206                       		dc.b 2,	6
0000E724                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000E724                            ; ---------------------------------------------------------------------------
0000E724                            ; Object 7F - chaos emeralds from the special stage results screen
0000E724                            ; ---------------------------------------------------------------------------
0000E724                            
0000E724                            SSRChaos:
0000E724 7000                       		moveq	#0,d0
0000E726 1028 0024                  		move.b	obRoutine(a0),d0
0000E72A 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000E72E 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000E732                            ; ===========================================================================
0000E732 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000E734 0000                       		dc.w SSRC_Flash-SSRC_Index
0000E736                            
0000E736                            ; ---------------------------------------------------------------------------
0000E736                            ; X-axis positions for chaos emeralds
0000E736                            ; ---------------------------------------------------------------------------
0000E736 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E742                            ; ===========================================================================
0000E742                            
0000E742                            SSRC_Main:	; Routine 0
0000E742 2248                       		movea.l	a0,a1
0000E744 45F9 0000 E736             		lea	(SSRC_PosData).l,a2
0000E74A 7400                       		moveq	#0,d2
0000E74C 7200                       		moveq	#0,d1
0000E74E 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000E752 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E754 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E758                            
0000E758                            	SSRC_Loop:
0000E758 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000E75C 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000E760 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000E766 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000E76A 1633 2000                  		move.b	(a3,d2.w),d3
0000E76E 1343 001A                  		move.b	d3,obFrame(a1)
0000E772 1343 001C                  		move.b	d3,obAnim(a1)
0000E776 5202                       		addq.b	#1,d2
0000E778 5429 0024                  		addq.b	#2,obRoutine(a1)
0000E77C 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000E784 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000E78A 137C 0000 0001             		move.b	#0,obRender(a1)
0000E790 43E9 0040                  		lea	$40(a1),a1	; next object
0000E794 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000E798                            
0000E798                            SSRC_Flash:	; Routine 2
0000E798 1028 001A                  		move.b	obFrame(a0),d0
0000E79C 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000E7A2 0C00 0006                  		cmpi.b	#6,d0
0000E7A6 6600                       		bne.s	SSRC_Display
0000E7A8 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000E7AE                            
0000E7AE                            	SSRC_Display:
0000E7AE 6000 0000                  		bra.w	DisplaySprite
0000E7AE 6000 0000                  		bra.w	DisplaySprite
0000E7B2                            
0000E7B2                            ; ---------------------------------------------------------------------------
0000E7B2                            ; Sprite mappings - zone title cards
0000E7B2                            ; ---------------------------------------------------------------------------
0000E7B2 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000E7B4 0000                       		dc.w M_Card_LZ-Map_Card
0000E7B6 0000                       		dc.w M_Card_MZ-Map_Card
0000E7B8 0000                       		dc.w M_Card_SLZ-Map_Card
0000E7BA 0000                       		dc.w M_Card_SYZ-Map_Card
0000E7BC 0000                       		dc.w M_Card_SBZ-Map_Card
0000E7BE 0000                       		dc.w M_Card_Zone-Map_Card
0000E7C0 0000                       		dc.w M_Card_Act1-Map_Card
0000E7C2 0000                       		dc.w M_Card_Act2-Map_Card
0000E7C4 0000                       		dc.w M_Card_Act3-Map_Card
0000E7C6 0000                       		dc.w M_Card_Oval-Map_Card
0000E7C8 0000                       		dc.w M_Card_FZ-Map_Card
0000E7CA 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000E7CB F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000E7D0 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000E7D5 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000E7DA F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000E7DF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E7E4 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000E7E9 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000E7EE F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000E7F3 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000E7F8                            		even
0000E7F8 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000E7F9 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000E7FE F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000E803 F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000E808 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000E80D F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000E812 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000E817 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000E81C F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000E821 F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000E826 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000E82B F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000E830 F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000E835 F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000E83A 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000E83B F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000E840 F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000E845 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000E84A F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000E84F F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000E854 F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000E859 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000E85E F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000E863 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000E868 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000E86D F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000E872 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000E873 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000E878 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000E87D F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000E882 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000E887 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000E88C F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000E891 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000E896 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000E89B F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000E8A0                            		even
0000E8A0 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000E8A1 F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000E8A6 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000E8AB F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000E8B0 F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000E8B5 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000E8BA F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000E8BF F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000E8C4 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000E8C9 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000E8CE F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000E8D3 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000E8D4 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000E8D9 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000E8DE F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000E8E3 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000E8E8 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000E8ED F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000E8F2 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000E8F7 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000E8FC F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000E901 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000E906                            		even
0000E906 04                         M_Card_Zone:	dc.b 4			; ZONE
0000E907 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000E90C F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000E911 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000E916 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E91C 00                         		even
0000E91C 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000E91D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E922 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000E927 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000E928 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E92D F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000E932 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000E933 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E938 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000E93D 0D                         M_Card_Oval:	dc.b $D			; Oval
0000E93E E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E943 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E948 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E94D F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E952 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E957 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E95C 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E961 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E966 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E96B F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E970 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E975 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E97A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E980 00                         		even
0000E980 05                         M_Card_FZ:	dc.b 5			; FINAL
0000E981 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000E986 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000E98B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E990 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000E995 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000E99A                            		even
0000E99A                            
0000E99A                            Map_Over:	include	"_maps\Game Over.asm"
0000E99A                            ; ---------------------------------------------------------------------------
0000E99A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E99A                            ; ---------------------------------------------------------------------------
0000E99A                            Map_Over_internal:
0000E99A 0000                       		dc.w byte_CBAC-Map_Over_internal
0000E99C 0000                       		dc.w byte_CBB7-Map_Over_internal
0000E99E 0000                       		dc.w byte_CBC2-Map_Over_internal
0000E9A0 0000                       		dc.w byte_CBCD-Map_Over_internal
0000E9A2 02                         byte_CBAC:	dc.b 2			; GAME
0000E9A3 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000E9A8 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000E9AD 02                         byte_CBB7:	dc.b 2			; OVER
0000E9AE F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000E9B3 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000E9B8 02                         byte_CBC2:	dc.b 2			; TIME
0000E9B9 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000E9BE F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000E9C3 02                         byte_CBCD:	dc.b 2			; OVER
0000E9C4 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000E9C9 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000E9CE                            		even
0000E9CE                            		even
0000E9CE                            
0000E9CE                            ; ---------------------------------------------------------------------------
0000E9CE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E9CE                            ; ---------------------------------------------------------------------------
0000E9CE 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000E9D0 0000                       		dc.w M_Got_Passed-Map_Got
0000E9D2 0000                       		dc.w M_Got_Score-Map_Got
0000E9D4 0000                       		dc.w M_Got_TBonus-Map_Got
0000E9D6 0000                       		dc.w M_Got_RBonus-Map_Got
0000E9D8 FF6F                       		dc.w M_Card_Oval-Map_Got
0000E9DA FF4E                       		dc.w M_Card_Act1-Map_Got
0000E9DC FF59                       		dc.w M_Card_Act2-Map_Got
0000E9DE FF64                       		dc.w M_Card_Act3-Map_Got
0000E9E0 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000E9E1 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000E9E6 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000E9EB F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000E9F0 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000E9F5 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000E9FA F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000E9FF F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EA04 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EA09 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EA0A F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EA0F F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EA14 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EA19 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EA1E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EA23 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EA28 06                         M_Got_Score:	dc.b 6			; SCORE
0000EA29 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EA2E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EA33 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EA38 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EA3D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EA42 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EA47 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EA48 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EA4D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EA52 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EA57 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EA5C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EA61 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EA66 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EA6B 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EA6C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EA71 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EA76 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EA7B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EA80 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EA85 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EA8A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EA90 00                         		even
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90                            ; Sprite mappings - special stage results screen
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EA92 0000                       		dc.w M_SSR_Score-Map_SSR
0000EA94 0000                       		dc.w byte_CD0D-Map_SSR
0000EA96 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EA98 0000                       		dc.w byte_CD31-Map_SSR
0000EA9A 0000                       		dc.w byte_CD46-Map_SSR
0000EA9C 0000                       		dc.w byte_CD5B-Map_SSR
0000EA9E 0000                       		dc.w byte_CD6B-Map_SSR
0000EAA0 0000                       		dc.w byte_CDA8-Map_SSR
0000EAA2 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EAA3 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EAA8 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EAAD F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EAB2 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EAB7 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EABC F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EAC1 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EAC6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EACB F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EAD0 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EAD5 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EADA F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EADF F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EAE4 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EAE5 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EAEA F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EAEF F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EAF4 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EAF9 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EAFE FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EB03 07                         byte_CD0D:	dc.b 7
0000EB04 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EB09 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EB0E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EB13 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EB18 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EB1D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EB22 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EB27 04                         byte_CD31:	dc.b 4
0000EB28 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB2D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB32 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB37 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EB3C 04                         byte_CD46:	dc.b 4
0000EB3D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB42 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB47 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB4C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EB51 03                         byte_CD5B:	dc.b 3
0000EB52 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB57 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB5C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB61 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EB62 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EB67 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EB6C F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EB71 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EB76 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EB7B F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EB80 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EB85 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EB8A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EB8F F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EB94 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EB99 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EB9E 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EB9F F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EBA4 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EBA9 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EBAE F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EBB3 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EBB8 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EBBD F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EBC2 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EBC7 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EBCC F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EBD1 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EBD6 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EBDB F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EBE0 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EBE5 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EBEA                            		even
0000EBEA                            
0000EBEA                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EBEA                            ; ---------------------------------------------------------------------------
0000EBEA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EBEA                            ; ---------------------------------------------------------------------------
0000EBEA                            Map_SSRC_internal:
0000EBEA 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EBEC 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EBEE 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EBF0 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EBF2 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EBF4 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EBF6 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EBF8 01                         byte_CE02:	dc.b 1
0000EBF9 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EBFE 01                         byte_CE08:	dc.b 1
0000EBFF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EC04 01                         byte_CE0E:	dc.b 1
0000EC05 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EC0A 01                         byte_CE14:	dc.b 1
0000EC0B F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EC10 01                         byte_CE1A:	dc.b 1
0000EC11 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EC16 01                         byte_CE20:	dc.b 1
0000EC17 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EC1C 00                         byte_CE26:	dc.b 0			; Blank frame
0000EC1E 00                         		even
0000EC1E 00                         		even
0000EC1E                            
0000EC1E                            		include	"_incObj\36 Spikes.asm"
0000EC1E                            ; ---------------------------------------------------------------------------
0000EC1E                            ; Object 36 - spikes
0000EC1E                            ; ---------------------------------------------------------------------------
0000EC1E                            
0000EC1E                            Spikes:
0000EC1E 7000                       		moveq	#0,d0
0000EC20 1028 0024                  		move.b	obRoutine(a0),d0
0000EC24 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EC28 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EC2C                            ; ===========================================================================
0000EC2C 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EC2E 0000                       		dc.w Spik_Solid-Spik_Index
0000EC30                            
0000EC30 =00000030                  spik_origX:	equ $30		; start X position
0000EC30 =00000032                  spik_origY:	equ $32		; start Y position
0000EC30                            
0000EC30 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EC32 0110                       		dc.b 1,	$10
0000EC34 0204                       		dc.b 2,	4
0000EC36 031C                       		dc.b 3,	$1C
0000EC38 0440                       		dc.b 4,	$40
0000EC3A 0510                       		dc.b 5,	$10
0000EC3C                            ; ===========================================================================
0000EC3C                            
0000EC3C                            Spik_Main:	; Routine 0
0000EC3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC40 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EC48 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EC4E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EC54 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EC5A 1028 0028                  		move.b	obSubtype(a0),d0
0000EC5E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EC64 0240 00F0                  		andi.w	#$F0,d0
0000EC68 43F9 0000 EC30             		lea	(Spik_Var).l,a1
0000EC6E E648                       		lsr.w	#3,d0
0000EC70 D2C0                       		adda.w	d0,a1
0000EC72 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EC76 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EC7A 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EC80 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EC86                            
0000EC86                            Spik_Solid:	; Routine 2
0000EC86 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EC8A 343C 0004                  		move.w	#4,d2
0000EC8E 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EC94 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EC96 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000EC9C 6600                       		bne.s	Spik_Upright	; if not, branch
0000EC9E 343C 0014                  		move.w	#$14,d2
0000ECA2                            
0000ECA2                            ; Spikes types $1x and $5x face	sideways
0000ECA2                            
0000ECA2                            Spik_SideWays:
0000ECA2 323C 001B                  		move.w	#$1B,d1
0000ECA6 3602                       		move.w	d2,d3
0000ECA8 5243                       		addq.w	#1,d3
0000ECAA 3828 0008                  		move.w	obX(a0),d4
0000ECAE 6100 0000                  		bsr.w	SolidObject
0000ECB2 0828 0003 0022             		btst	#3,obStatus(a0)
0000ECB8 6600                       		bne.s	Spik_Display
0000ECBA 0C44 0001                  		cmpi.w	#1,d4
0000ECBE 6700                       		beq.s	Spik_Hurt
0000ECC0 6000                       		bra.s	Spik_Display
0000ECC2                            ; ===========================================================================
0000ECC2                            
0000ECC2                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000ECC2                            
0000ECC2                            Spik_Upright:
0000ECC2 7200                       		moveq	#0,d1
0000ECC4 1228 0014                  		move.b	obActWid(a0),d1
0000ECC8 0641 000B                  		addi.w	#$B,d1
0000ECCC 343C 0010                  		move.w	#$10,d2
0000ECD0 363C 0011                  		move.w	#$11,d3
0000ECD4 3828 0008                  		move.w	obX(a0),d4
0000ECD8 6100 0000                  		bsr.w	SolidObject
0000ECDC 0828 0003 0022             		btst	#3,obStatus(a0)
0000ECE2 6600                       		bne.s	Spik_Hurt
0000ECE4 4A44                       		tst.w	d4
0000ECE6 6A00                       		bpl.s	Spik_Display
0000ECE8                            
0000ECE8                            Spik_Hurt:
0000ECE8 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000ECEC 6600                       		bne.s	Spik_Display	; if yes, branch
0000ECEE 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000ECF2 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000ECF4 2F08                       		move.l	a0,-(sp)
0000ECF6 2448                       		movea.l	a0,a2
0000ECF8 41F8 D000                  		lea	(v_player).w,a0
0000ECFC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000ED02 6400                       		bcc.s	loc_CF20
0000ED04                            		; This fixes the infamous "spike bug"
0000ED04 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000ED08 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000ED0A 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000ED10                            loc_D5A2:
0000ED10 9680                       		sub.l	d0,d3
0000ED12 2143 000C                  		move.l	d3,obY(a0)
0000ED16 4EB9 0000 0000             		jsr	(HurtSonic).l
0000ED1C                            
0000ED1C                            loc_CF20:
0000ED1C 205F                       		movea.l	(sp)+,a0
0000ED1E                            
0000ED1E                            Spik_Display:
0000ED1E 6100 0000                  		bsr.w	DisplaySprite
0000ED40 4E75                       		rts	
0000ED42                            ; ===========================================================================
0000ED42                            
0000ED42                            Spik_Type0x:
0000ED42 7000                       		moveq	#0,d0
0000ED44 1028 0028                  		move.b	obSubtype(a0),d0
0000ED48 D040                       		add.w	d0,d0
0000ED4A 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000ED4E 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000ED52                            ; ===========================================================================
0000ED52 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000ED54 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000ED56 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000ED58                            ; ===========================================================================
0000ED58                            
0000ED58                            Spik_Type00:
0000ED58 4E75                       		rts			; don't move the object
0000ED5A                            ; ===========================================================================
0000ED5A                            
0000ED5A                            Spik_Type01:
0000ED5A 6100 0000                  		bsr.w	Spik_Wait
0000ED5E 7000                       		moveq	#0,d0
0000ED60 1028 0034                  		move.b	$34(a0),d0
0000ED64 D068 0032                  		add.w	spik_origY(a0),d0
0000ED68 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000ED6C 4E75                       		rts	
0000ED6E                            ; ===========================================================================
0000ED6E                            
0000ED6E                            Spik_Type02:
0000ED6E 6100 0000                  		bsr.w	Spik_Wait
0000ED72 7000                       		moveq	#0,d0
0000ED74 1028 0034                  		move.b	$34(a0),d0
0000ED78 D068 0030                  		add.w	spik_origX(a0),d0
0000ED7C 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000ED80 4E75                       		rts	
0000ED82                            ; ===========================================================================
0000ED82                            
0000ED82                            Spik_Wait:
0000ED82 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000ED86 6700                       		beq.s	loc_CFA4	; if yes, branch
0000ED88 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000ED8C 6600                       		bne.s	locret_CFE6
0000ED8E 4A28 0001                  		tst.b	obRender(a0)
0000ED92 6A00                       		bpl.s	locret_CFE6
0000ED9E 6000                       		bra.s	locret_CFE6
0000EDA0                            ; ===========================================================================
0000EDA0                            
0000EDA0                            loc_CFA4:
0000EDA0 4A68 0036                  		tst.w	$36(a0)
0000EDA4 6700                       		beq.s	loc_CFC6
0000EDA6 0468 0800 0034             		subi.w	#$800,$34(a0)
0000EDAC 6400                       		bcc.s	locret_CFE6
0000EDAE 317C 0000 0034             		move.w	#0,$34(a0)
0000EDB4 317C 0000 0036             		move.w	#0,$36(a0)
0000EDBA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EDC0 6000                       		bra.s	locret_CFE6
0000EDC2                            ; ===========================================================================
0000EDC2                            
0000EDC2                            loc_CFC6:
0000EDC2 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EDC8 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EDCE 6500                       		bcs.s	locret_CFE6
0000EDD0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EDD6 317C 0001 0036             		move.w	#1,$36(a0)
0000EDDC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EDE2                            
0000EDE2                            locret_CFE6:
0000EDE2 4E75                       		rts	
0000EDE2 4E75                       		rts	
0000EDE4                            Map_Spike:	include	"_maps\Spikes.asm"
0000EDE4                            ; --------------------------------------------------------------------------------
0000EDE4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000EDE4                            ; --------------------------------------------------------------------------------
0000EDE4                            
0000EDE4                            SME_XgeaQ:	
0000EDE4 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000EDE8 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000EDEC 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000EDF0 03                         SME_XgeaQ_C:	dc.b 3	
0000EDF1 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000EDF6 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EDFB F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000EE00 03                         SME_XgeaQ_1C:	dc.b 3	
0000EE01 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000EE06 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EE0B 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000EE10 01                         SME_XgeaQ_2C:	dc.b 1	
0000EE11 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EE16 03                         SME_XgeaQ_32:	dc.b 3	
0000EE17 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000EE1C F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EE21 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000EE26 06                         SME_XgeaQ_42:	dc.b 6	
0000EE27 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000EE2C F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000EE31 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000EE36 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000EE3B F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000EE40 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000EE45 01                         SME_XgeaQ_61:	dc.b 1	
0000EE46 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EE4C 00                         		even
0000EE4C 00                         		even
0000EE4C                            		include	"_incObj\3B Purple Rock.asm"
0000EE4C                            ; ---------------------------------------------------------------------------
0000EE4C                            ; Object 3B - purple rock (GHZ)
0000EE4C                            ; ---------------------------------------------------------------------------
0000EE4C                            
0000EE4C                            PurpleRock:
0000EE4C 7000                       		moveq	#0,d0
0000EE4E 1028 0024                  		move.b	obRoutine(a0),d0
0000EE52 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000EE56 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000EE5A                            ; ===========================================================================
0000EE5A 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000EE5C 0000                       		dc.w Rock_Solid-Rock_Index
0000EE5E                            ; ===========================================================================
0000EE5E                            
0000EE5E                            Rock_Main:	; Routine 0
0000EE5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EE62 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000EE6A 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000EE70 117C 0004 0001             		move.b	#4,obRender(a0)
0000EE76 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000EE7C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EE82                            
0000EE82                            Rock_Solid:	; Routine 2
0000EE82 323C 001B                  		move.w	#$1B,d1
0000EE86 343C 0010                  		move.w	#$10,d2
0000EE8A 363C 0010                  		move.w	#$10,d3
0000EE8E 3828 0008                  		move.w	obX(a0),d4
0000EE92 6100 0000                  		bsr.w	SolidObject
0000EE96 6100 0000                  		bsr.w	DisplaySprite
0000EEB8 4E75                       		rts	
0000EEB8 4E75                       		rts	
0000EEBA                            		include	"_incObj\49 Waterfall Sound.asm"
0000EEBA                            ; ---------------------------------------------------------------------------
0000EEBA                            ; Object 49 - waterfall	sound effect (GHZ)
0000EEBA                            ; ---------------------------------------------------------------------------
0000EEBA                            
0000EEBA                            WaterSound:
0000EEBA 7000                       		moveq	#0,d0
0000EEBC 1028 0024                  		move.b	obRoutine(a0),d0
0000EEC0 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000EEC4 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000EEC8                            ; ===========================================================================
0000EEC8 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000EECA 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000EECC                            ; ===========================================================================
0000EECC                            
0000EECC                            WSnd_Main:	; Routine 0
0000EECC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EED0 117C 0004 0001             		move.b	#4,obRender(a0)
0000EED6                            
0000EED6                            WSnd_PlaySnd:	; Routine 2
0000EED6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000EEDA 0200 003F                  		andi.b	#$3F,d0
0000EEDE 6600                       		bne.s	WSnd_ChkDel
0000EEEA                            
0000EEEA                            	WSnd_ChkDel:
0000EF08 4E75                       		rts	
0000EF08 4E75                       		rts	
0000EF0A                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000EF0A                            ; ---------------------------------------------------------------------------
0000EF0A                            ; Sprite mappings - purple rock	(GHZ)
0000EF0A                            ; ---------------------------------------------------------------------------
0000EF0A                            Map_PRock_internal:
0000EF0A 0000                       		dc.w byte_D110-Map_PRock_internal
0000EF0C 02                         byte_D110:	dc.b 2
0000EF0D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EF12 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000EF18 00                         		even
0000EF18 00                         		even
0000EF18                            		include	"_incObj\3C Smashable Wall.asm"
0000EF18                            ; ---------------------------------------------------------------------------
0000EF18                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000EF18                            ; ---------------------------------------------------------------------------
0000EF18                            
0000EF18                            SmashWall:
0000EF18 7000                       		moveq	#0,d0
0000EF1A 1028 0024                  		move.b	obRoutine(a0),d0
0000EF1E 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000EF22 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000EF26 6000 0000                  		bra.w	RememberState
0000EF2A                            ; ===========================================================================
0000EF2A 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000EF2C 0000                       		dc.w Smash_Solid-Smash_Index
0000EF2E 0000                       		dc.w Smash_FragMove-Smash_Index
0000EF30                            
0000EF30 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000EF30                            ; ===========================================================================
0000EF30                            
0000EF30                            Smash_Main:	; Routine 0
0000EF30 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF34 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000EF3C 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000EF42 117C 0004 0001             		move.b	#4,obRender(a0)
0000EF48 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000EF4E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EF54 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000EF5A                            
0000EF5A                            Smash_Solid:	; Routine 2
0000EF5A 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000EF60 323C 001B                  		move.w	#$1B,d1
0000EF64 343C 0020                  		move.w	#$20,d2
0000EF68 363C 0020                  		move.w	#$20,d3
0000EF6C 3828 0008                  		move.w	obX(a0),d4
0000EF70 6100 0000                  		bsr.w	SolidObject	
0000EF74 4A04                       		tst.b	d4
0000EF76 6E00 0000                  		bgt.w	@chkroll	
0000EF7A 6700 0000                  		beq.w	@donothing								
0000EF7E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000EF84 6700 0000                  		beq.w	@donothing	; if yes, branch
0000EF88                            ; ===========================================================================
0000EF88                            
0000EF88                            @chkroll:
0000EF88 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000EF8E 6600                       		bne.s	@donothing	; if not, branch	
0000EF90 3028 0030                  		move.w	smash_speed(a0),d0
0000EF94 6A00                       		bpl.s	@chkspeed
0000EF96 4440                       		neg.w	d0
0000EF98                            
0000EF98                            	@chkspeed:
0000EF98 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000EF9C 6500                       		bcs.s	@donothing	; if not, branch	
0000EF9E                            		
0000EF9E                            	@continue:	
0000EF9E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000EFA4 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000EFAA 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000EFB0 3028 0008                  		move.w	obX(a0),d0
0000EFB4 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000EFB8 6500                       		bcs.s	@smash		; if yes, branch
0000EFBA 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000EFC0                            
0000EFC0                            	@smash:
0000EFC0 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000EFC6 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000EFCC 7206                       		moveq	#6,d1		; load 7 fragments
0000EFCE 343C 0070                  		move.w	#$70,d2
0000EFD2 6100                       		bsr.s	SmashObject
0000EFD4                            
0000EFD4                            @donothing:
0000EFD4 4E75                       		rts	
0000EFD6                            
0000EFD6                            Smash_FragMove:	; Routine 4
0000EFD6 588F                       		addq.l	#4,sp
0000EFD8 6100 0000                  		bsr.w	SpeedToPos
0000EFDC 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000EFE2 4A28 0001                  		tst.b	obRender(a0)
0000EFE6 6A00 0000                  		bpl.w	DeleteObject
0000EFEA 6000 0000                  		bra.w	DisplaySprite
0000EFEE                            
0000EFEE                            
0000EFEE                            
0000EFEE                            		include	"_incObj\sub SmashObject.asm"
0000EFEE                            ; ---------------------------------------------------------------------------
0000EFEE                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000EFEE                            ; ---------------------------------------------------------------------------
0000EFEE                            
0000EFEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFEE                            
0000EFEE                            
0000EFEE                            SmashObject:
0000EFEE 7000                       		moveq	#0,d0
0000EFF0 1028 001A                  		move.b	obFrame(a0),d0
0000EFF4 D040                       		add.w	d0,d0
0000EFF6 2668 0004                  		movea.l	obMap(a0),a3
0000EFFA D6F3 0000                  		adda.w	(a3,d0.w),a3
0000EFFE 524B                       		addq.w	#1,a3
0000F000 08E8 0005 0001             		bset	#5,obRender(a0)
0000F006 1810                       		move.b	0(a0),d4
0000F008 1A28 0001                  		move.b	obRender(a0),d5
0000F00C 2248                       		movea.l	a0,a1
0000F00E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F014 1284                       		move.b	d4,0(a1)
0000F016 234B 0004                  		move.l	a3,obMap(a1)
0000F01A 1345 0001                  		move.b	d5,obRender(a1)
0000F01E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F024 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F02A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F030 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F036 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F03C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F040 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F044 5341                       		subq.w #1,d1
0000F046 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F04A 303C 005F                  		move.w #$5F,d0
0000F04E                            ; ===========================================================================
0000F04E                            
0000F04E                            Smash_Loop:
0000F04E 4A11                       		tst.b	(a1)
0000F050 6700                       		beq.s	@cont
0000F052 43E9 0040                  		lea		$40(a1),a1
0000F056 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F05A 6600                       		bne.s	Smash_PlaySnd
0000F05C                            
0000F05C                            	@cont:
0000F05C 5A4B                       		addq.w #5,a3
0000F05E                            
0000F05E                            Smash_LoadFrag:				; XREF: SmashObject
0000F05E 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F064 1284                       		move.b	d4,0(a1)
0000F066 234B 0004                  		move.l	a3,obMap(a1)
0000F06A 1345 0001                  		move.b	d5,obRender(a1)
0000F06E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F074 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F07A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F080 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F086 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F08C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F090 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F094 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F098                            
0000F098                            Smash_PlaySnd:
0000F098 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F09C 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F0A2                            
0000F0A2                            ; End of function SmashObject
0000F0A2                            ; End of function SmashObject
0000F0A2                            
0000F0A2                            ; ===========================================================================
0000F0A2                            ; Smashed block	fragment speeds
0000F0A2                            ;
0000F0A2 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F0A6 0600 FF00                  		dc.w $600, -$100
0000F0AA 0600 0100                  		dc.w $600, $100
0000F0AE 0400 0500                  		dc.w $400, $500
0000F0B2 0600 FA00                  		dc.w $600, -$600
0000F0B6 0800 FE00                  		dc.w $800, -$200
0000F0BA 0800 0200                  		dc.w $800, $200
0000F0BE 0600 0600                  		dc.w $600, $600
0000F0C2                            
0000F0C2 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F0C6 F800 FE00                  		dc.w -$800, -$200
0000F0CA F800 0200                  		dc.w -$800, $200
0000F0CE FA00 0600                  		dc.w -$600, $600
0000F0D2 FC00 FB00                  		dc.w -$400, -$500
0000F0D6 FA00 FF00                  		dc.w -$600, -$100
0000F0DA FA00 0100                  		dc.w -$600, $100
0000F0DE FC00 0500                  		dc.w -$400, $500
0000F0E2                            
0000F0E2                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2                            Map_Smash_internal:
0000F0E2 0000                       		dc.w @left-Map_Smash_internal
0000F0E4 0000                       		dc.w @middle-Map_Smash_internal
0000F0E6 0000                       		dc.w @right-Map_Smash_internal
0000F0E8 08                         @left:		dc.b 8
0000F0E9 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F0EE F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F0F3 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F0F8 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F0FD E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F102 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F107 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F10C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F111 08                         @middle:	dc.b 8
0000F112 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F117 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F11C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F121 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F126 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F12B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F130 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F135 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F13A 08                         @right:		dc.b 8
0000F13B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F140 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F145 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F14A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F14F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F154 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F159 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F15E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F164 00                         		even
0000F164 00                         		even
0000F164                            
0000F164                            ; ---------------------------------------------------------------------------
0000F164                            ; Object code execution subroutine
0000F164                            ; ---------------------------------------------------------------------------
0000F164                            
0000F164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F164                            
0000F164                            
0000F164                            
0000F164                            ExecuteObjects: ; XREF: GM_Title; et al
0000F164 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F168 7E7F                       		moveq #$7F,d7
0000F16A 7000                       		moveq #0,d0
0000F16C 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F172 6400                       		bcc.s loc_D362
0000F174                            
0000F174                            loc_D348:
0000F174 1010                       		move.b (a0),d0 ; load object number from RAM
0000F176 6700                       		beq.s loc_D358
0000F178 D040                       		add.w d0,d0
0000F17A D040                       		add.w d0,d0
0000F17C 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F180 4E91                       		jsr (a1) ; run the object's code
0000F182 7000                       		moveq #0,d0
0000F184                            
0000F184                            loc_D358:
0000F184 41E8 0040                  		lea $40(a0),a0 ; next object
0000F188 51CF FFEA                  		dbf d7,loc_D348
0000F18C 4E75                       		rts
0000F18E                            ; ===========================================================================
0000F18E                            
0000F18E                            loc_D362:
0000F18E 7E1F                       		moveq #$1F,d7
0000F190 61E2                       		bsr.s loc_D348
0000F192 7E5F                       		moveq #$5F,d7
0000F194                            
0000F194                            loc_D368:
0000F194 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F196 1010                       		move.b (a0),d0 ; get the object's ID
0000F198 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F19A 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F19E 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F1A0 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F1A4 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F1AA 6700                       		beq.s loc_D378 ; if not, branch
0000F1AC 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F1B0                            
0000F1B0                            loc_D378:
0000F1B0 6100 0000                  		bsr.w DisplaySprite2
0000F1B4                            		
0000F1B4                            loc_D37C:
0000F1B4 41E8 0040                  		lea $40(a0),a0
0000F1B8 51CF FFDA                  		dbf d7,loc_D368
0000F1BC 4E75                       		rts
0000F1BE                            ; End of function ExecuteObjects
0000F1BE                            
0000F1BE                            ; ===========================================================================
0000F1BE                            ; ---------------------------------------------------------------------------
0000F1BE                            ; Object pointers
0000F1BE                            ; ---------------------------------------------------------------------------
0000F1BE                            Obj_Index:
0000F1BE                            		include	"_inc\Object Pointers.asm"
0000F1BE                            ; ---------------------------------------------------------------------------
0000F1BE                            ; Object pointers
0000F1BE                            ; ---------------------------------------------------------------------------
0000F1BE 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F1C2 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F1C6 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F1CA 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F1CE 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F1D2 0000 AEC8                  ptr_Mozzietron:		dc.l Mozzietron
0000F1D6 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F1DA 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F1DE 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F1E2 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F1E6 0000 0000                  ptr_Pole:		dc.l Pole
0000F1EA 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F1EE 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F1F2 0000 C2D2                  ptr_TitleSonic:		dc.l TitleSonic
0000F1F6 0000 C352                  ptr_PSBTM:		dc.l PSBTM
0000F1FA 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F1FE 0000 89D8                  ptr_Bridge:		dc.l Bridge
0000F202 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F206 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F20A 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F20E 0000 8FFE                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F212 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F216 0000 934A                  ptr_Helix:		dc.l Helix
0000F21A 0000 94D6                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F21E 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F222 0000 98B2                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F226 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F22A 0000 9EBA                  ptr_Scenery:		dc.l Scenery
0000F22E 0000 9F5C                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F232 0000 A244                  ptr_BallHog:		dc.l BallHog
0000F236 0000 ABDE                  ptr_Crabmeat:		dc.l Crabmeat
0000F23A 0000 A312                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F23E 0000 0000                  ptr_HUD:		dc.l HUD
0000F242 0000 AFFA                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F246 0000 B14C                  ptr_Missile:		dc.l Missile
0000F24A 0000 A3E4                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F24E 0000 B3A6                  ptr_Rings:		dc.l Rings
0000F252 0000 BBF0                  ptr_Monitor:		dc.l Monitor
0000F256 0000 A454                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F25A 0000 A612                  ptr_Animals:		dc.l Animals		; $28
0000F25E 0000 AB00                  ptr_Points:		dc.l Points
0000F262 0000 A032                  ptr_AutoDoor:		dc.l AutoDoor
0000F266 0000 C8FC                  ptr_Chopper:		dc.l Chopper
0000F26A 0000 C9B6                  ptr_Jaws:		dc.l Jaws
0000F26E 0000 CA80                  ptr_Burrobot:		dc.l Burrobot
0000F272 0000 BDEE                  ptr_PowerUp:		dc.l PowerUp
0000F276 0000 CC94                  ptr_LargeGrass:		dc.l LargeGrass
0000F27A 0000 D176                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F27E 0000 D452                  ptr_ChainStomp:		dc.l ChainStomp
0000F282 0000 DB00                  ptr_Button:		dc.l Button
0000F286 0000 DCA4                  ptr_PushBlock:		dc.l PushBlock
0000F28A 0000 E0D6                  ptr_TitleCard:		dc.l TitleCard
0000F28E 0000 CFB6                  ptr_GrassFire:		dc.l GrassFire
0000F292 0000 EC1E                  ptr_Spikes:		dc.l Spikes
0000F296 0000 B602                  ptr_RingLoss:		dc.l RingLoss
0000F29A 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F29E 0000 E286                  ptr_GameOverCard:	dc.l GameOverCard
0000F2A2 0000 E344                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F2A6 0000 EE4C                  ptr_PurpleRock:		dc.l PurpleRock
0000F2AA 0000 EF18                  ptr_SmashWall:		dc.l SmashWall
0000F2AE 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F2B2 0000 0000                  ptr_Prison:		dc.l Prison
0000F2B6 0000 A4E6                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F2BA 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F2BE 0000 0000                  ptr_Springs:		dc.l Springs
0000F2C2 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F2C6 0000 0000                  ptr_Roller:		dc.l Roller
0000F2CA 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F2CE 0000 D76E                  ptr_SideStomp:		dc.l SideStomp
0000F2D2 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F2D6 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F2DA 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F2DE 0000 EEBA                  ptr_WaterSound:		dc.l WaterSound
0000F2E2 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F2E6 0000 B8C4                  ptr_GiantRing:		dc.l GiantRing
0000F2EA 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F2EE 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F2F2 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F2F6 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F2FA 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F2FE 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F302 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F306 0000 99C2                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F30A 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F30E 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F312 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F316 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F31A 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F31E 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F322 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F326 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F32A 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F32E 0000 0000                  ptr_Fan:		dc.l Fan
0000F332 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F336 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F33A 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F33E 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F342 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F346 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F34A 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F34E 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F352 0000 0000                  ptr_Junction:		dc.l Junction
0000F356 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F35A 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F35E 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F362 0000 0000                  ptr_Saws:		dc.l Saws
0000F366 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F36A 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F36E 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F372 0000 0000                  ptr_Electro:		dc.l Electro
0000F376 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F37A 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F37E 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F382 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F386 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F38A 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F38E 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F392 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F396 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F39A 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F39E 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F3A2 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F3A6 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F3AA 0000 B99E                  ptr_RingFlash:		dc.l RingFlash
0000F3AE 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F3B2 0000 E57E                  ptr_SSResult:		dc.l SSResult
0000F3B6 0000 E724                  ptr_SSRChaos:		dc.l SSRChaos
0000F3BA 0000 5F5C                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F3BE 0000 6074                  ptr_ContSonic:		dc.l ContSonic
0000F3C2 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F3C6 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F3CA 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F3CE 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F3D2 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F3D6 0000 64FA                  ptr_EndSonic:		dc.l EndSonic
0000F3DA 0000 6654                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F3DE 0000 672E                  ptr_EndSTH:		dc.l EndSTH
0000F3E2 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F3E6 0000 69A8                  ptr_EndEggman:		dc.l EndEggman
0000F3EA 0000 6A88                  ptr_TryChaos:		dc.l TryChaos
0000F3EE                            
0000F3EE                            NullObject:
0000F3EE                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F3EE                            
0000F3EE =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F3EE =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F3EE =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F3EE =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F3EE =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F3EE =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F3EE =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F3EE =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F3EE =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F3EE =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F3EE =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F3EE =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F3EE =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F3EE =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F3EE =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F3EE =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F3EE =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F3EE =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F3EE =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F3EE =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F3EE =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F3EE =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F3EE =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F3EE =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F3EE =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F3EE =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F3EE =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F3EE =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F3EE =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F3EE =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F3EE =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F3EE =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F3EE =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F3EE =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F3EE =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F3EE =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F3EE =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F3EE =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F3EE =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F3EE =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F3EE =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F3EE =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F3EE =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F3EE =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F3EE =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F3EE =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F3EE =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F3EE =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F3EE =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F3EE =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F3EE =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F3EE =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F3EE =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F3EE =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F3EE =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F3EE =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F3EE =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F3EE =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F3EE =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F3EE =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F3EE =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F3EE =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F3EE =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F3EE =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F3EE =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F3EE =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F3EE =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F3EE =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F3EE =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F3EE =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F3EE =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F3EE =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F3EE =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F3EE =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F3EE =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F3EE =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F3EE =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F3EE =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F3EE =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F3EE =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F3EE =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F3EE =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F3EE =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F3EE =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F3EE =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F3EE =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F3EE =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F3EE =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F3EE =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F3EE =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F3EE =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F3EE =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F3EE =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F3EE =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F3EE =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F3EE =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F3EE =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F3EE =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F3EE =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F3EE =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F3EE =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F3EE =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F3EE =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F3EE =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F3EE =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F3EE =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F3EE =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F3EE =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F3EE =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F3EE =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F3EE =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F3EE =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F3EE =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F3EE =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F3EE =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F3EE =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F3EE =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F3EE =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F3EE =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F3EE =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F3EE =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F3EE =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F3EE =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F3EE =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F3EE =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F3EE =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F3EE =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F3EE =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F3EE =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F3EE =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F3EE =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F3EE =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F3EE =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F3EE =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F3EE =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F3EE =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F3EE =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F3EE =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F3EE =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F3EE =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F3EE =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F3EE                            
0000F3EE                            		include	"_incObj\sub ObjectFall.asm"
0000F3EE                            ; ---------------------------------------------------------------------------
0000F3EE                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F3EE                            ; ---------------------------------------------------------------------------
0000F3EE                            
0000F3EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3EE                            
0000F3EE                            
0000F3EE                            ObjectFall:
0000F3EE 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F3F4 6700                       		beq.s	@donothing
0000F3F6 3028 0010                  		move.w	obVelX(a0),d0
0000F3FA 48C0                       		ext.l	d0
0000F3FC E188                       		lsl.l	#8,d0
0000F3FE D1A8 0008                  		add.l	d0,obX(a0)
0000F402 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F408 6F00                               ble.s   @skipline       ; if yes, branch
0000F40A 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F410                                @skipline:		
0000F410 3028 0012                  		move.w	obVelY(a0),d0
0000F414 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F41A 48C0                       		ext.l	d0
0000F41C E188                       		lsl.l	#8,d0
0000F41E D1A8 000C                  		add.l	d0,obY(a0)
0000F422 4E75                       		rts	
0000F424                            	
0000F424                            	@donothing:
0000F424 4E75                       		rts
0000F426                            
0000F426                            ; End of function ObjectFall
0000F426                            ; End of function ObjectFall
0000F426                            		include	"_incObj\sub SpeedToPos.asm"
0000F426                            ; ---------------------------------------------------------------------------
0000F426                            ; Subroutine translating object	speed to update	object position
0000F426                            ; ---------------------------------------------------------------------------
0000F426                            
0000F426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F426                            
0000F426                            
0000F426                            SpeedToPos:
0000F426 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F42C E188                       		lsl.l	#8,d0
0000F42E D1A8 0008                  		add.l	d0,obX(a0)
0000F432 E18A                       		lsl.l	#8,d2
0000F434 D5A8 000C                  		add.l	d2,obY(a0)
0000F438 4E75                       		rts
0000F43A                            ; End of function SpeedToPos
0000F43A                            ; End of function SpeedToPos
0000F43A                            		include	"_incObj\sub DisplaySprite.asm"
0000F43A                            ; ---------------------------------------------------------------------------
0000F43A                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F43A                            ; ---------------------------------------------------------------------------
0000F43A                            
0000F43A                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F43A                            
0000F43A                            
0000F43A                            DisplaySprite:
0000F43A 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F43E D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F442 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F446 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F448 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F44A D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F44C 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F44E                            
0000F44E                                DSpr_Full:
0000F44E 4E75                               rts    
0000F450                            
0000F450                            ; End of function DisplaySprite
0000F450                            
0000F450                            
0000F450                            ; ---------------------------------------------------------------------------
0000F450                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F450                            ; ---------------------------------------------------------------------------
0000F450                            
0000F450                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F450                            
0000F450                            
0000F450                            DisplaySprite1:
0000F450 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F454 D4E9 0018                          adda.w  obpriority(a1),a2
0000F458 0C52 007E                          cmpi.w    #$7E,(a2)
0000F45C 6400                               bcc.s    DSpr1_Full
0000F45E 5452                               addq.w    #2,(a2)
0000F460 D4D2                               adda.w    (a2),a2
0000F462 3489                               move.w    a1,(a2)
0000F464                            
0000F464                                DSpr1_Full:
0000F464 4E75                               rts    
0000F466                            
0000F466                            ; End of function DisplaySprite1
0000F466                            
0000F466                            ; ---------------------------------------------------------------------------
0000F466                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F466                            ; and d0 is already (priority/2)&$380
0000F466                            ; ---------------------------------------------------------------------------
0000F466                            
0000F466                            ; loc_16530:
0000F466                            DisplaySprite2:
0000F466 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F46A D2C0                           adda.w    d0,a1
0000F46C 0C51 007E                      cmpi.w    #$7E,(a1)
0000F470 6400                           bhs.s    return_16542
0000F472 5451                           addq.w    #2,(a1)
0000F474 D2D1                           adda.w    (a1),a1
0000F476 3288                           move.w    a0,(a1)
0000F478                            
0000F478                            return_16542:
0000F478 4E75                           rts
0000F478 4E75                           rts
0000F47A                            		include	"_incObj\sub DeleteObject.asm"
0000F47A                            ; ---------------------------------------------------------------------------
0000F47A                            ; Subroutine to	delete an object
0000F47A                            ; ---------------------------------------------------------------------------
0000F47A                            
0000F47A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F47A                            
0000F47A                            
0000F47A                            DeleteObject:
0000F47A 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F47C                            
0000F47C                            DeleteChild:				; child objects are already in (a1)
0000F47C 7200                       		moveq	#0,d1
0000F47E 700F                       		moveq	#$F,d0
0000F480                            
0000F480                            	DelObj_Loop:
0000F480 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F482 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F486 4E75                       		rts	
0000F488                            
0000F488                            ; End of function DeleteObject
0000F488                            ; End of function DeleteObject
0000F488                            
0000F488                            ; ===========================================================================
0000F488 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F48C 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F490 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F494 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F498                            ; ---------------------------------------------------------------------------
0000F498                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F498                            ; ---------------------------------------------------------------------------
0000F498                            
0000F498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F498                            BuildSprites:                ; XREF: TitleScreen; et al
0000F498 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F49C 7A00                       		moveq	#0,d5
0000F49E 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F4A2 7E07                       		moveq	#7,d7
0000F4A4                            		
0000F4A4                            loc_D66A:
0000F4A4 4A54                       		tst.w	(a4)
0000F4A6 6700 0000                  		beq.w	loc_D72E
0000F4AA 7C02                       		moveq	#2,d6
0000F4AC                            
0000F4AC                            loc_D672:
0000F4AC 3074 6000                          movea.w    (a4,d6.w),a0
0000F4B0 4A10                               tst.b    (a0)
0000F4B2 6700 0000                          beq.w    loc_D726
0000F4B6 08A8 0007 0001                     bclr    #7,1(a0)
0000F4BC 1028 0001                          move.b    1(a0),d0
0000F4C0 1800                               move.b    d0,d4
0000F4C2 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F4C6 6700                               beq.s    @skip    ; if it is, branch
0000F4C8 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F4CC 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F4D0                               @skip:
0000F4D0 0240 000C                  		andi.w	#$C,d0
0000F4D4 6700                       		beq.s	loc_D6DE
0000F4D6 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F4DA 7000                       		moveq	#0,d0
0000F4DC 1028 0014                  		move.b	width_pixels(a0),d0
0000F4E0 3628 0008                  		move.w	8(a0),d3
0000F4E4 9651                       		sub.w	(a1),d3
0000F4E6 3203                       		move.w	d3,d1
0000F4E8 D240                       		add.w	d0,d1
0000F4EA 6B00 0000                  		bmi.w	loc_D726
0000F4EE 3203                       		move.w	d3,d1
0000F4F0 9240                       		sub.w	d0,d1
0000F4F2 0C41 0140                  		cmpi.w	#$140,d1
0000F4F6 6C00                       		bge.s	loc_D726
0000F4F8 0643 0080                  		addi.w	#$80,d3
0000F4FC 0804 0004                  		btst	#4,d4
0000F500 6700                       		beq.s	loc_D6E8
0000F502 7000                       		moveq	#0,d0
0000F504 1028 0016                  		move.b	$16(a0),d0
0000F508 3428 000C                  		move.w	$C(a0),d2
0000F50C 9469 0004                  		sub.w	4(a1),d2
0000F510 3202                       		move.w	d2,d1
0000F512 D240                       		add.w	d0,d1
0000F514 6B00                       		bmi.s	loc_D726
0000F516 3202                       		move.w	d2,d1
0000F518 9240                       		sub.w	d0,d1
0000F51A 0C41 00E0                  		cmpi.w	#$E0,d1
0000F51E 6C00                       		bge.s	loc_D726
0000F520 0642 0080                  		addi.w	#$80,d2
0000F524 6000                       		bra.s	loc_D700
0000F526                            ; ===========================================================================
0000F526                            
0000F526                            loc_D6DE:
0000F526 3428 000A                  		move.w	$A(a0),d2
0000F52A 3628 0008                  		move.w	8(a0),d3
0000F52E 6000                       		bra.s	loc_D700
0000F530                            ; ===========================================================================
0000F530                            
0000F530                            loc_D6E8:
0000F530 3428 000C                  		move.w	$C(a0),d2
0000F534 9469 0004                  		sub.w	4(a1),d2
0000F538 0642 0080                  		addi.w	#$80,d2
0000F53C 0C42 0060                  		cmpi.w	#$60,d2
0000F540 6500                       		bcs.s	loc_D726
0000F542 0C42 0180                  		cmpi.w	#$180,d2
0000F546 6400                       		bcc.s	loc_D726
0000F548                            
0000F548                            loc_D700:
0000F548 2268 0004                  		movea.l	4(a0),a1
0000F54C 7200                       		moveq	#0,d1
0000F54E 0804 0005                  		btst	#5,d4
0000F552 6600                       		bne.s	loc_D71C
0000F554 1228 001A                  		move.b	$1A(a0),d1
0000F558 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F55A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F55E 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F560 1219                       		move.b	(a1)+,d1
0000F562 5301                       		subq.b	#1,d1
0000F564 6B00                       		bmi.s	loc_D720
0000F566                            
0000F566                            loc_D71C:
0000F566 4EB9 0000 0000             		jsr	sub_D750
0000F56C                            
0000F56C                            loc_D720:
0000F56C 08E8 0007 0001             		bset	#7,1(a0)
0000F572                            
0000F572                            loc_D726:
0000F572 5446                       		addq.w	#2,d6
0000F574 5554                       		subq.w	#2,(a4)
0000F576 6600 FF34                  		bne.w	loc_D672
0000F57A                            
0000F57A                            loc_D72E:
0000F57A 49EC 0080                  		lea	$80(a4),a4
0000F57E 51CF FF24                  		dbf	d7,loc_D66A
0000F582 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F586 0C05 0050                  		cmpi.b	#$50,d5
0000F58A 6700                       		beq.s	loc_D748
0000F58C 24BC 0000 0000             		move.l	#0,(a2)
0000F592 4E75                       		rts	
0000F594                            ; ===========================================================================
0000F594                            
0000F594                            loc_D748:
0000F594 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F59A 4E75                       		rts	
0000F59C                            ; End of function BuildSprites
0000F59C                            
0000F59C                            BuildSprites_MultiDraw:
0000F59C 2F0C                       	move.l	a4,-(sp)
0000F59E 49F8 F700                  	lea	($FFFFF700).w,a4
0000F5A2 3668 0002                  	movea.w	art_tile(a0),a3
0000F5A6 2A68 0004                  	movea.l	mappings(a0),a5
0000F5AA 7000                       	moveq	#0,d0
0000F5AC                            
0000F5AC                            	; check if object is within X bounds
0000F5AC 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F5B0 3628 0008                  	move.w	x_pos(a0),d3
0000F5B4 9654                       	sub.w	(a4),d3
0000F5B6 3203                       	move.w	d3,d1                            
0000F5B8 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F5BA 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F5BE 3203                       	move.w	d3,d1
0000F5C0 9240                       	sub.w	d0,d1
0000F5C2 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F5C6 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F5CA 0643 0080                  	addi.w	#128,d3
0000F5CE                            
0000F5CE                            	; check if object is within Y bounds
0000F5CE 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F5D2 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F5D4 7000                       	moveq	#0,d0
0000F5D6 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F5DA 3428 000C                  	move.w	y_pos(a0),d2
0000F5DE 946C 0004                  	sub.w	4(a4),d2
0000F5E2 3202                       	move.w	d2,d1
0000F5E4 D240                       	add.w	d0,d1
0000F5E6 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F5EA 3202                       	move.w	d2,d1
0000F5EC 9240                       	sub.w	d0,d1
0000F5EE 0C41 00E0                  	cmpi.w	#224,d1
0000F5F2 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F5F6 0642 0080                  	addi.w	#128,d2
0000F5FA 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F5FC                            BuildSpritesMulti_ApproxYCheck:
0000F5FC 3428 000C                  	move.w	y_pos(a0),d2
0000F600 946C 0004                  	sub.w	4(a4),d2
0000F604 0642 0080                  	addi.w	#128,d2
0000F608 0242 07FF                  	andi.w	#$7FF,d2
0000F60C 0C42 0060                  	cmpi.w	#-32+128,d2
0000F610 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000F612 0C42 0180                  	cmpi.w	#32+128+224,d2
0000F616 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000F618                            BuildSpritesMulti_DrawSprite:
0000F618 7200                       	moveq	#0,d1
0000F61A 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000F61E 6700                       	beq.s	.noparenttodraw
0000F620 D241                       	add.w	d1,d1
0000F622 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000F624 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F628 7200                       	moveq	#0,d1
0000F62A 1219                       	move.b	(a1)+,d1
0000F62C 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F62E 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000F630 3F04                       	move.w	d4,-(sp)
0000F632 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000F638 381F                       	move.w	(sp)+,d4
0000F63A                            .noparenttodraw:
0000F63A 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000F640 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000F644 7000                       	moveq	#0,d0
0000F646 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000F64A 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000F64C 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000F64E                            
0000F64E                            @drawchildloop:
0000F64E 4840                       	swap	d0
0000F650 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000F652 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000F654 0643 0080                  	addi.w	#128,d3
0000F658 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000F65A 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000F65E 0642 0080                  	addi.w	#128,d2
0000F662 0242 07FF                  	andi.w	#$7FF,d2
0000F666 524E                       	addq.w	#1,a6
0000F668 7200                       	moveq	#0,d1
0000F66A 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000F66C D241                       	add.w	d1,d1
0000F66E 224D                       	movea.l	a5,a1
0000F670 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F674 7200                       	moveq	#0,d1
0000F676 1219                       	move.b	(a1)+,d1
0000F678 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F67A 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000F67C 3F04                       	move.w	d4,-(sp)
0000F67E 4EB9 0000 0000             	jsr	ChkDrawSprite
0000F684 381F                       	move.w	(sp)+,d4
0000F686                            @nochildleft:
0000F686 4840                       	swap	d0
0000F688 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000F68C                            ; loc_16804:
0000F68C                            BuildSprites_MultiDraw_NextObj:
0000F68C 285F                       	movea.l	(sp)+,a4
0000F68E 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000F692                            
0000F692                            
0000F692                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000F692                            
0000F692                            ; sub_1680A:
0000F692                            ChkDrawSprite:
0000F692 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000F696 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000F698 4E75                       	rts	; otherwise, return
0000F69A                            
0000F69A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F69A                            
0000F69A                            
0000F69A                            sub_D750:				; XREF: BuildSprites
0000F69A 3668 0002                  		movea.w	2(a0),a3
0000F69E                            loc_1681C:
0000F69E 0804 0000                  		btst	#0,d4
0000F6A2 6600                       		bne.s	loc_D796
0000F6A4 0804 0001                  		btst	#1,d4
0000F6A8 6600 0000                  		bne.w	loc_D7E4
0000F6AC                            ; End of function sub_D750
0000F6AC                            
0000F6AC                            
0000F6AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6AC                            
0000F6AC                            
0000F6AC                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F6AC 0C05 0050                  		cmpi.b	#$50,d5
0000F6B0 6700                       		beq.s	locret_D794
0000F6B2                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000F6B2 1019                       		move.b	(a1)+,d0
0000F6B4 4880                       		ext.w	d0
0000F6B6 D042                       		add.w	d2,d0
0000F6B8 34C0                       		move.w	d0,(a2)+
0000F6BA 14D9                       		move.b	(a1)+,(a2)+
0000F6BC 5205                       		addq.b	#1,d5
0000F6BE 14C5                       		move.b	d5,(a2)+
0000F6C0 1019                       		move.b	(a1)+,d0
0000F6C2 E148                       		lsl.w	#8,d0
0000F6C4 1019                       		move.b	(a1)+,d0
0000F6C6 D04B                       		add.w	a3,d0
0000F6C8 34C0                       		move.w	d0,(a2)+
0000F6CA 1019                       		move.b	(a1)+,d0
0000F6CC 4880                       		ext.w	d0
0000F6CE D043                       		add.w	d3,d0
0000F6D0 0240 01FF                  		andi.w	#$1FF,d0
0000F6D4 6600                       		bne.s	loc_D78E
0000F6D6 5240                       		addq.w	#1,d0
0000F6D8                            
0000F6D8                            loc_D78E:
0000F6D8 34C0                       		move.w	d0,(a2)+
0000F6DA 51C9 FFD0                  		dbf	d1,sub_D762
0000F6DE                            
0000F6DE                            locret_D794:
0000F6DE 4E75                       		rts
0000F6E0                            ; End of function sub_D762
0000F6E0                            
0000F6E0                            ; ===========================================================================
0000F6E0                            
0000F6E0                            loc_D796:
0000F6E0 0804 0001                  		btst	#1,d4
0000F6E4 6600 0000                  		bne.w	loc_D82A
0000F6E8                            
0000F6E8                            loc_D79E:
0000F6E8 0C05 0050                  		cmpi.b	#$50,d5
0000F6EC 6700                       		beq.s	locret_D7E2
0000F6EE 1019                       		move.b	(a1)+,d0
0000F6F0 4880                       		ext.w	d0
0000F6F2 D042                       		add.w	d2,d0
0000F6F4 34C0                       		move.w	d0,(a2)+
0000F6F6 1819                       		move.b	(a1)+,d4
0000F6F8 14C4                       		move.b	d4,(a2)+
0000F6FA 5205                       		addq.b	#1,d5
0000F6FC 14C5                       		move.b	d5,(a2)+
0000F6FE 1019                       		move.b	(a1)+,d0
0000F700 E148                       		lsl.w	#8,d0
0000F702 1019                       		move.b	(a1)+,d0
0000F704 D04B                       		add.w	a3,d0
0000F706 0A40 0800                  		eori.w	#$800,d0
0000F70A 34C0                       		move.w	d0,(a2)+
0000F70C 1019                       		move.b	(a1)+,d0
0000F70E 4880                       		ext.w	d0
0000F710 4440                       		neg.w	d0
0000F712 D804                       		add.b	d4,d4
0000F714 0244 0018                  		andi.w	#$18,d4
0000F718 5044                       		addq.w	#8,d4
0000F71A 9044                       		sub.w	d4,d0
0000F71C D043                       		add.w	d3,d0
0000F71E 0240 01FF                  		andi.w	#$1FF,d0
0000F722 6600                       		bne.s	loc_D7DC
0000F724 5240                       		addq.w	#1,d0
0000F726                            
0000F726                            loc_D7DC:
0000F726 34C0                       		move.w	d0,(a2)+
0000F728 51C9 FFBE                  		dbf	d1,loc_D79E
0000F72C                            
0000F72C                            locret_D7E2:
0000F72C 4E75                       		rts
0000F72E                            ; ===========================================================================
0000F72E                            
0000F72E                            loc_D7E4:				; XREF: sub_D750
0000F72E 0C05 0050                  		cmpi.b	#$50,d5
0000F732 6700                       		beq.s	locret_D828
0000F734 1019                       		move.b	(a1)+,d0
0000F736 1811                       		move.b	(a1),d4
0000F738 4880                       		ext.w	d0
0000F73A 4440                       		neg.w	d0
0000F73C E70C                       		lsl.b	#3,d4
0000F73E 0244 0018                  		andi.w	#$18,d4
0000F742 5044                       		addq.w	#8,d4
0000F744 9044                       		sub.w	d4,d0
0000F746 D042                       		add.w	d2,d0
0000F748 34C0                       		move.w	d0,(a2)+
0000F74A 14D9                       		move.b	(a1)+,(a2)+
0000F74C 5205                       		addq.b	#1,d5
0000F74E 14C5                       		move.b	d5,(a2)+
0000F750 1019                       		move.b	(a1)+,d0
0000F752 E148                       		lsl.w	#8,d0
0000F754 1019                       		move.b	(a1)+,d0
0000F756 D04B                       		add.w	a3,d0
0000F758 0A40 1000                  		eori.w	#$1000,d0
0000F75C 34C0                       		move.w	d0,(a2)+
0000F75E 1019                       		move.b	(a1)+,d0
0000F760 4880                       		ext.w	d0
0000F762 D043                       		add.w	d3,d0
0000F764 0240 01FF                  		andi.w	#$1FF,d0
0000F768 6600                       		bne.s	loc_D822
0000F76A 5240                       		addq.w	#1,d0
0000F76C                            
0000F76C                            loc_D822:
0000F76C 34C0                       		move.w	d0,(a2)+
0000F76E 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F772                            
0000F772                            locret_D828:
0000F772 4E75                       		rts
0000F774                            ; ===========================================================================
0000F774                            
0000F774                            loc_D82A:
0000F774 0C05 0050                  		cmpi.b	#$50,d5
0000F778 6700                       		beq.s	locret_D87C
0000F77A 1019                       		move.b	(a1)+,d0
0000F77C 1811                       		move.b	(a1),d4
0000F77E 4880                       		ext.w	d0
0000F780 4440                       		neg.w	d0
0000F782 E70C                       		lsl.b	#3,d4
0000F784 0244 0018                  		andi.w	#$18,d4
0000F788 5044                       		addq.w	#8,d4
0000F78A 9044                       		sub.w	d4,d0
0000F78C D042                       		add.w	d2,d0
0000F78E 34C0                       		move.w	d0,(a2)+
0000F790 1819                       		move.b	(a1)+,d4
0000F792 14C4                       		move.b	d4,(a2)+
0000F794 5205                       		addq.b	#1,d5
0000F796 14C5                       		move.b	d5,(a2)+
0000F798 1019                       		move.b	(a1)+,d0
0000F79A E148                       		lsl.w	#8,d0
0000F79C 1019                       		move.b	(a1)+,d0
0000F79E D04B                       		add.w	a3,d0
0000F7A0 0A40 1800                  		eori.w	#$1800,d0
0000F7A4 34C0                       		move.w	d0,(a2)+
0000F7A6 1019                       		move.b	(a1)+,d0
0000F7A8 4880                       		ext.w	d0
0000F7AA 4440                       		neg.w	d0
0000F7AC D804                       		add.b	d4,d4
0000F7AE 0244 0018                  		andi.w	#$18,d4
0000F7B2 5044                       		addq.w	#8,d4
0000F7B4 9044                       		sub.w	d4,d0
0000F7B6 D043                       		add.w	d3,d0
0000F7B8 0240 01FF                  		andi.w	#$1FF,d0
0000F7BC 6600                       		bne.s	loc_D876
0000F7BE 5240                       		addq.w	#1,d0
0000F7C0                            
0000F7C0                            loc_D876:
0000F7C0 34C0                       		move.w	d0,(a2)+
0000F7C2 51C9 FFB0                  		dbf	d1,loc_D82A
0000F7C6                            
0000F7C6                            locret_D87C:
0000F7C6 4E75                       		rts
0000F7C8                            ; End of function BuildSpr_Normal
0000F7C8                            
0000F7C8                            ; ===========================================================================
0000F7C8                            
0000F7C8                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F7C8                            ; ---------------------------------------------------------------------------
0000F7C8                            ; Subroutine to	check if an object is off screen
0000F7C8                            
0000F7C8                            ; output:
0000F7C8                            ;	d0 = flag set if object is off screen
0000F7C8                            ; ---------------------------------------------------------------------------
0000F7C8                            
0000F7C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7C8                            
0000F7C8                            
0000F7C8                            ChkObjectVisible:
0000F7C8 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F7CC 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F7D0 6B00                       		bmi.s	@offscreen
0000F7D2 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F7D6 6C00                       		bge.s	@offscreen	; if not, branch
0000F7D8                            
0000F7D8 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F7DC 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F7E0 6B00                       		bmi.s	@offscreen
0000F7E2 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F7E6 6C00                       		bge.s	@offscreen	; if not, branch
0000F7E8                            
0000F7E8 7000                       		moveq	#0,d0		; set flag to 0
0000F7EA 4E75                       		rts	
0000F7EC                            
0000F7EC                            	@offscreen:
0000F7EC 7001                       		moveq	#1,d0		; set flag to 1
0000F7EE 4E75                       		rts	
0000F7F0                            ; End of function ChkObjectVisible
0000F7F0                            
0000F7F0                            ; ---------------------------------------------------------------------------
0000F7F0                            ; Subroutine to	check if an object is off screen
0000F7F0                            ; More precise than above subroutine, taking width into account
0000F7F0                            
0000F7F0                            ; output:
0000F7F0                            ;	d0 = flag set if object is off screen
0000F7F0                            ; ---------------------------------------------------------------------------
0000F7F0                            
0000F7F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7F0                            
0000F7F0                            
0000F7F0                            ChkPartiallyVisible:
0000F7F0 7200                       		moveq	#0,d1
0000F7F2 1228 0014                  		move.b	obActWid(a0),d1
0000F7F6 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F7FA 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F7FE D041                       		add.w	d1,d0		; add object width
0000F800 6B00                       		bmi.s	@offscreen2
0000F802 D241                       		add.w	d1,d1
0000F804 9041                       		sub.w	d1,d0
0000F806 0C40 0140                  		cmpi.w	#320,d0
0000F80A 6C00                       		bge.s	@offscreen2
0000F80C                            
0000F80C 3228 000C                  		move.w	obY(a0),d1
0000F810 9278 F704                  		sub.w	(v_screenposy).w,d1
0000F814 6B00                       		bmi.s	@offscreen2
0000F816 0C41 00E0                  		cmpi.w	#224,d1
0000F81A 6C00                       		bge.s	@offscreen2
0000F81C                            
0000F81C 7000                       		moveq	#0,d0
0000F81E 4E75                       		rts	
0000F820                            
0000F820                            	@offscreen2:
0000F820 7001                       		moveq	#1,d0
0000F822 4E75                       		rts	
0000F824                            ; End of function ChkPartiallyVisible
0000F824                            ; End of function ChkPartiallyVisible
0000F824                            
0000F824                            ; ---------------------------------------------------------------------------
0000F824                            ; Subroutine to	load a level's objects
0000F824                            ; ---------------------------------------------------------------------------
0000F824                            
0000F824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F824                            
0000F824                            
0000F824                            ObjPosLoad:
0000F824 7000                       		moveq	#0,d0
0000F826 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000F82A 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F82E 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F832                            ; End of function ObjPosLoad
0000F832                            
0000F832                            ; ===========================================================================
0000F832 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F834 0000                       		dc.w OPL_Next-OPL_Index
0000F836                            ; ===========================================================================
0000F836                            
0000F836                            OPL_Main:
0000F836 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000F83A 3038 FE10                  		move.w	(v_zone).w,d0
0000F83E ED08                       		lsl.b	#6,d0
0000F840 E848                       		lsr.w	#4,d0
0000F842 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F848 2248                       		movea.l	a0,a1
0000F84A D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F84E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F852 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F856 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F85A 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000F85E 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000F862 45F8 FC00                  		lea	(v_objstate).w,a2
0000F866 34FC 0101                  		move.w	#$101,(a2)+
0000F86A 303C 005E                  		move.w	#$5E,d0
0000F86E                            
0000F86E                            OPL_ClrList:
0000F86E 429A                       		clr.l	(a2)+
0000F870 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F874                            
0000F874 45F8 FC00                  		lea	(v_objstate).w,a2
0000F878 7400                       		moveq	#0,d2
0000F87A 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F87E 0446 0080                  		subi.w	#$80,d6
0000F882 6400                       		bhs.s	loc_D93C
0000F884 7C00                       		moveq	#0,d6
0000F886                            
0000F886                            loc_D93C:
0000F886 0246 FF80                  		andi.w	#$FF80,d6
0000F88A 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F88E                            
0000F88E                            loc_D944:
0000F88E BC50                       		cmp.w	(a0),d6
0000F890 6300                       		bls.s	loc_D956
0000F892 4A28 0004                  		tst.b	4(a0)
0000F896 6A00                       		bpl.s	loc_D952
0000F898 1412                       		move.b	(a2),d2
0000F89A 5212                       		addq.b	#1,(a2)
0000F89C                            
0000F89C                            loc_D952:
0000F89C 5C48                       		addq.w	#6,a0
0000F89E 60EE                       		bra.s	loc_D944
0000F8A0                            ; ===========================================================================
0000F8A0                            
0000F8A0                            loc_D956:
0000F8A0 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F8A4 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F8A8 0446 0080                  		subi.w	#$80,d6
0000F8AC 6500                       		blo.s	loc_D976
0000F8AE                            
0000F8AE                            loc_D964:
0000F8AE BC50                       		cmp.w	(a0),d6
0000F8B0 6300                       		bls.s	loc_D976
0000F8B2 4A28 0004                  		tst.b	4(a0)
0000F8B6 6A00                       		bpl.s	loc_D972
0000F8B8 522A 0001                  		addq.b	#1,1(a2)
0000F8BC                            
0000F8BC                            loc_D972:
0000F8BC 5C48                       		addq.w	#6,a0
0000F8BE 60EE                       		bra.s	loc_D964
0000F8C0                            ; ===========================================================================
0000F8C0                            
0000F8C0                            loc_D976:
0000F8C0 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F8C4 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000F8CA                            
0000F8CA                            OPL_Next:
0000F8CA 45F8 FC00                  		lea	(v_objstate).w,a2
0000F8CE 7400                       		moveq	#0,d2
0000F8D0 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F8D4 0246 FF80                  		andi.w	#$FF80,d6
0000F8D8 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000F8DC 6700 0000                  		beq.w	locret_DA3A
0000F8E0 6C00                       		bge.s	loc_D9F6
0000F8E2 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000F8E6 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F8EA 0446 0080                  		subi.w	#$80,d6
0000F8EE 6500                       		blo.s	loc_D9D2
0000F8F0                            
0000F8F0                            loc_D9A6:
0000F8F0 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F8F4 6C00                       		bge.s	loc_D9D2
0000F8F6 5D48                       		subq.w	#6,a0
0000F8F8 4A28 0004                  		tst.b	4(a0)
0000F8FC 6A00                       		bpl.s	loc_D9BC
0000F8FE 532A 0001                  		subq.b	#1,1(a2)
0000F902 142A 0001                  		move.b	1(a2),d2
0000F906                            
0000F906                            loc_D9BC:
0000F906 6100 0000                  		bsr.w	loc_DA3C
0000F90A 6600                       		bne.s	loc_D9C6
0000F90C 5D48                       		subq.w	#6,a0
0000F90E 60E0                       		bra.s	loc_D9A6
0000F910                            ; ===========================================================================
0000F910                            
0000F910                            loc_D9C6:
0000F910 4A28 0004                  		tst.b	4(a0)
0000F914 6A00                       		bpl.s	loc_D9D0
0000F916 522A 0001                  		addq.b	#1,1(a2)
0000F91A                            
0000F91A                            loc_D9D0:
0000F91A 5C48                       		addq.w	#6,a0
0000F91C                            
0000F91C                            loc_D9D2:
0000F91C 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F920 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F924 0646 0300                  		addi.w	#$300,d6
0000F928                            
0000F928                            loc_D9DE:
0000F928 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F92C 6E00                       		bgt.s	loc_D9F0
0000F92E 4A28 FFFE                  		tst.b	-2(a0)
0000F932 6A00                       		bpl.s	loc_D9EC
0000F934 5312                       		subq.b	#1,(a2)
0000F936                            
0000F936                            loc_D9EC:
0000F936 5D48                       		subq.w	#6,a0
0000F938 60EE                       		bra.s	loc_D9DE
0000F93A                            ; ===========================================================================
0000F93A                            
0000F93A                            loc_D9F0:
0000F93A 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F93E 4E75                       		rts	
0000F940                            ; ===========================================================================
0000F940                            
0000F940                            loc_D9F6:
0000F940 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000F944 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F948 0646 0280                  		addi.w	#$280,d6
0000F94C                            
0000F94C                            loc_DA02:
0000F94C BC50                       		cmp.w	(a0),d6
0000F94E 6300                       		bls.s	loc_DA16
0000F950 4A28 0004                  		tst.b	4(a0)
0000F954 6A00                       		bpl.s	loc_DA10
0000F956 1412                       		move.b	(a2),d2
0000F958 5212                       		addq.b	#1,(a2)
0000F95A                            
0000F95A                            loc_DA10:
0000F95A 6100 0000                  		bsr.w	loc_DA3C
0000F95E 67EC                       		beq.s	loc_DA02
0000F960                            
0000F960                            loc_DA16:
0000F960 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F964 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F968 0446 0300                  		subi.w	#$300,d6
0000F96C 6500                       		blo.s	loc_DA36
0000F96E                            
0000F96E                            loc_DA24:
0000F96E BC50                       		cmp.w	(a0),d6
0000F970 6300                       		bls.s	loc_DA36
0000F972 4A28 0004                  		tst.b	4(a0)
0000F976 6A00                       		bpl.s	loc_DA32
0000F978 522A 0001                  		addq.b	#1,1(a2)
0000F97C                            
0000F97C                            loc_DA32:
0000F97C 5C48                       		addq.w	#6,a0
0000F97E 60EE                       		bra.s	loc_DA24
0000F980                            ; ===========================================================================
0000F980                            
0000F980                            loc_DA36:
0000F980 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F984                            
0000F984                            locret_DA3A:
0000F984 4E75                       		rts	
0000F986                            ; ===========================================================================
0000F986                            
0000F986                            loc_DA3C:
0000F986 4A28 0004                  		tst.b	4(a0)
0000F98A 6A00                       		bpl.s	OPL_MakeItem
0000F98C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000F992 6700                       		beq.s	OPL_MakeItem
0000F994 5C48                       		addq.w	#6,a0
0000F996 7000                       		moveq	#0,d0
0000F998 4E75                       		rts	
0000F99A                            ; ===========================================================================
0000F99A                            
0000F99A                            OPL_MakeItem:
0000F99A 6100 0000                  		bsr.w	FindFreeObj
0000F99E 6600                       		bne.s	locret_DA8A
0000F9A0 3358 0008                  		move.w	(a0)+,obX(a1)
0000F9A4 3018                       		move.w	(a0)+,d0
0000F9A6 3200                       		move.w	d0,d1
0000F9A8 0240 0FFF                  		andi.w	#$FFF,d0
0000F9AC 3340 000C                  		move.w	d0,obY(a1)
0000F9B0 E559                       		rol.w	#2,d1
0000F9B2 0201 0003                  		andi.b	#3,d1
0000F9B6 1341 0001                  		move.b	d1,obRender(a1)
0000F9BA 1341 0022                  		move.b	d1,obStatus(a1)
0000F9BE 1018                       		move.b	(a0)+,d0
0000F9C0 6A00                       		bpl.s	loc_DA80
0000F9C2 0200 007F                  		andi.b	#$7F,d0
0000F9C6 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000F9CA                            
0000F9CA                            loc_DA80:
0000F9CA 1280                       		move.b	d0,0(a1)
0000F9CC 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000F9D0 7000                       		moveq	#0,d0
0000F9D2                            
0000F9D2                            locret_DA8A:
0000F9D2 4E75                       		rts	
0000F9D4                            
0000F9D4                            		include	"_incObj\sub FindFreeObj.asm"
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4                            ; Subroutine to find a free object space
0000F9D4                            
0000F9D4                            ; output:
0000F9D4                            ;	a1 = free position in object RAM
0000F9D4                            ; ---------------------------------------------------------------------------
0000F9D4                            
0000F9D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9D4                            
0000F9D4                            
0000F9D4                            FindFreeObj:
0000F9D4 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000F9D8 303C 005F                  		move.w	#$5F,d0
0000F9DC                            
0000F9DC                            	FFree_Loop:
0000F9DC 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F9DE 6700                       		beq.s	FFree_Found	; if yes, branch
0000F9E0 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F9E4 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000F9E8                            
0000F9E8                            	FFree_Found:
0000F9E8 4E75                       		rts	
0000F9EA                            
0000F9EA                            ; End of function FindFreeObj
0000F9EA                            
0000F9EA                            
0000F9EA                            ; ---------------------------------------------------------------------------
0000F9EA                            ; Subroutine to find a free object space AFTER the current one
0000F9EA                            
0000F9EA                            ; output:
0000F9EA                            ;	a1 = free position in object RAM
0000F9EA                            ; ---------------------------------------------------------------------------
0000F9EA                            
0000F9EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9EA                            
0000F9EA                            
0000F9EA                            FindNextFreeObj:
0000F9EA 2248                       		movea.l	a0,a1
0000F9EC 303C F000                  		move.w	#$F000,d0
0000F9F0 9048                       		sub.w	a0,d0
0000F9F2 EC48                       		lsr.w	#6,d0
0000F9F4 5340                       		subq.w	#1,d0
0000F9F6 6500                       		bcs.s	NFree_Found
0000F9F8                            
0000F9F8                            	NFree_Loop:
0000F9F8 4A11                       		tst.b	(a1)
0000F9FA 6700                       		beq.s	NFree_Found
0000F9FC 43E9 0040                  		lea	$40(a1),a1
0000FA00 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FA04                            
0000FA04                            	NFree_Found:
0000FA04 4E75                       		rts	
0000FA06                            
0000FA06                            ; End of function FindNextFreeObj
0000FA06                            ; End of function FindNextFreeObj
0000FA06                            		include	"_incObj\41 Springs.asm"
0000FA06                            ; ---------------------------------------------------------------------------
0000FA06                            ; Object 41 - springs
0000FA06                            ; ---------------------------------------------------------------------------
0000FA06                            
0000FA06                            Springs:
0000FA06 7000                       		moveq	#0,d0
0000FA08 1028 0024                  		move.b	obRoutine(a0),d0
0000FA0C 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FA10 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FA14 6100 FA24                  		bsr.w	DisplaySprite
0000FA36 4E75                       		rts	
0000FA38                            ; ===========================================================================
0000FA38 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FA3A 0000                       		dc.w Spring_Up-Spring_Index
0000FA3C 0000                       		dc.w Spring_AniUp-Spring_Index
0000FA3E 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FA40 0000                       		dc.w Spring_LR-Spring_Index
0000FA42 0000                       		dc.w Spring_AniLR-Spring_Index
0000FA44 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FA46 0000                       		dc.w Spring_Dwn-Spring_Index
0000FA48 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FA4A 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FA4C                            
0000FA4C =00000030                  spring_pow:	equ $30			; power of current spring
0000FA4C                            
0000FA4C F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FA4E F600                       		dc.w -$A00		; power	of yellow spring
0000FA50                            ; ===========================================================================
0000FA50                            
0000FA50                            Spring_Main:	; Routine 0
0000FA50 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FA54 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FA5C 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FA62 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FA68 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FA6E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FA74 1028 0028                  		move.b	obSubtype(a0),d0
0000FA78 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FA7C 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FA7E                            
0000FA7E 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FA84 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FA8A 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FA90 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FA96 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FA9C                            
0000FA9C                            	Spring_NotLR:
0000FA9C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FAA0 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FAA2                            
0000FAA2 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FAA8 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FAAE                            
0000FAAE                            	Spring_NotDwn:
0000FAAE 0800 0001                  		btst	#1,d0
0000FAB2 6700                       		beq.s	loc_DB72
0000FAB4 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FABA                            
0000FABA                            loc_DB72:
0000FABA 0240 000F                  		andi.w	#$F,d0
0000FABE 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FAC4 4E75                       		rts	
0000FAC6                            ; ===========================================================================
0000FAC6                            
0000FAC6                            Spring_Up:	; Routine 2
0000FAC6 323C 001B                  		move.w	#$1B,d1
0000FACA 343C 0008                  		move.w	#8,d2
0000FACE 363C 0010                  		move.w	#$10,d3
0000FAD2 3828 0008                  		move.w	obX(a0),d4
0000FAD6 6100 0000                  		bsr.w	SolidObject
0000FADA 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FADE 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FAE0 4E75                       		rts	
0000FAE2                            ; ===========================================================================
0000FAE2                            
0000FAE2                            Spring_BounceUp:
0000FAE2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FAE6 5069 000C                  		addq.w	#8,obY(a1)
0000FAEA 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FAF0 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FAF6 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FAFC 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FB02 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FB08 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FB0E 4228 0025                  		clr.b	obSolid(a0)
0000FB1C                            
0000FB1C                            Spring_AniUp:	; Routine 4
0000FB1C 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FB22 6000 C9D0                  		bra.w	AnimateSprite
0000FB26                            ; ===========================================================================
0000FB26                            
0000FB26                            Spring_ResetUp:	; Routine 6
0000FB26 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FB2C 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FB30 4E75                       		rts	
0000FB32                            ; ===========================================================================
0000FB32                            
0000FB32                            Spring_LR:	; Routine 8
0000FB32 323C 0013                  		move.w	#$13,d1
0000FB36 343C 000E                  		move.w	#$E,d2
0000FB3A 363C 000F                  		move.w	#$F,d3
0000FB3E 3828 0008                  		move.w	obX(a0),d4
0000FB42 6100 0000                  		bsr.w	SolidObject
0000FB46 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FB4C 6600                       		bne.s	loc_DC0C
0000FB4E 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FB54                            
0000FB54                            loc_DC0C:
0000FB54 0828 0005 0022             		btst	#5,obStatus(a0)
0000FB5A 6600                       		bne.s	Spring_BounceLR
0000FB5C 4E75                       		rts	
0000FB5E                            ; ===========================================================================
0000FB5E                            
0000FB5E                            Spring_BounceLR:
0000FB5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FB62 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FB68 5069 0008                  		addq.w	#8,obX(a1)
0000FB6C 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FB72 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FB74 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FB7A 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FB7E                            
0000FB7E                            	Spring_Flipped:
0000FB7E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FB84 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FB8A 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FB90 0829 0002 0022             		btst	#2,obStatus(a1)
0000FB96 6600                       		bne.s	loc_DC56
0000FB98 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FB9E                            
0000FB9E                            loc_DC56:
0000FB9E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FBA4 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FBB4                            
0000FBB4                            Spring_AniLR:	; Routine $A
0000FBB4 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FBB8 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FBBE 6000 C934                  		bra.w	AnimateSprite
0000FBC2                            ; ===========================================================================
0000FBC2                            
0000FBC2                            Spring_ResetLR:	; Routine $C
0000FBC2 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FBC8 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FBCC 4E75                       		rts	
0000FBCE                            ; ===========================================================================
0000FBCE                            
0000FBCE                            Spring_Dwn:	; Routine $E
0000FBCE 323C 001B                  		move.w	#$1B,d1
0000FBD2 343C 0008                  		move.w	#8,d2
0000FBD6 363C 0010                  		move.w	#$10,d3
0000FBDA 3828 0008                  		move.w	obX(a0),d4
0000FBDE 6100 0000                  		bsr.w	SolidObject
0000FBE2 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FBE8 6600                       		bne.s	loc_DCA4
0000FBEA 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FBF0                            
0000FBF0                            loc_DCA4:
0000FBF0 4A28 0025                  		tst.b	obSolid(a0)
0000FBF4 6600                       		bne.s	locret_DCAE
0000FBF6 4A44                       		tst.w	d4
0000FBF8 6B00                       		bmi.s	Spring_BounceDwn
0000FBFA                            
0000FBFA                            locret_DCAE:
0000FBFA 4E75                       		rts	
0000FBFC                            ; ===========================================================================
0000FBFC                            
0000FBFC                            Spring_BounceDwn:
0000FBFC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC00 5169 000C                  		subq.w	#8,obY(a1)
0000FC04 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FC0A 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FC0E 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FC14 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FC1A 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FC20 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FC26 4228 0025                  		clr.b	obSolid(a0)
0000FC34                            
0000FC34                            Spring_AniDwn:	; Routine $10
0000FC34 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FC3A 6000 C8B8                  		bra.w	AnimateSprite
0000FC3E                            ; ===========================================================================
0000FC3E                            
0000FC3E                            Spring_ResetDwn:
0000FC3E                            		; Routine $12
0000FC3E 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FC44 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FC48 4E75                       		rts	
0000FC48 4E75                       		rts	
0000FC4A                            		include	"_anim\Springs.asm"
0000FC4A                            ; ---------------------------------------------------------------------------
0000FC4A                            ; Animation script - springs
0000FC4A                            ; ---------------------------------------------------------------------------
0000FC4A 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FC4C 0000                       		dc.w byte_DD0E-Ani_Spring
0000FC4E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FC5A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FC66                            		even
0000FC66                            		even
0000FC66                            Map_Spring:	include	"_maps\Springs.asm"
0000FC66                            ; ---------------------------------------------------------------------------
0000FC66                            ; Sprite mappings - springs
0000FC66                            ; ---------------------------------------------------------------------------
0000FC66                            Map_Spring_internal:
0000FC66 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FC68 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FC6A 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FC6C 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FC6E 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FC70 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FC72 02                         M_Spg_Up:	dc.b 2			; facing up
0000FC73 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FC78 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FC7D 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FC7E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FC83 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FC84 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FC89 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FC8E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FC93 01                         M_Spg_Left:	dc.b 1			; facing left
0000FC94 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FC99 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FC9A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FC9F 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FCA0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FCA5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FCAA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FCAF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FCB4                            		even
0000FCB4                            		even
0000FCB4                            
0000FCB4                            		include	"_incObj\42 Newtron.asm"
0000FCB4                            ; ---------------------------------------------------------------------------
0000FCB4                            ; Object 42 - Newtron enemy (GHZ)
0000FCB4                            ; ---------------------------------------------------------------------------
0000FCB4                            
0000FCB4                            Newtron:
0000FCB4 7000                       		moveq	#0,d0
0000FCB6 1028 0024                  		move.b	obRoutine(a0),d0
0000FCBA 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FCBE 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FCC2                            ; ===========================================================================
0000FCC2 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FCC4 0000                       		dc.w Newt_Action-Newt_Index
0000FCC6 0000                       		dc.w Newt_Delete-Newt_Index
0000FCC8                            ; ===========================================================================
0000FCC8                            
0000FCC8                            Newt_Main:	; Routine 0
0000FCC8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FCCC 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FCD4 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FCDA 117C 0004 0001             		move.b	#4,obRender(a0)
0000FCE0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FCE6 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FCEC 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FCF2 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FCF8                            
0000FCF8                            Newt_Action:	; Routine 2
0000FCF8 7000                       		moveq	#0,d0
0000FCFA 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FCFE 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FD02 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FD06 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FD0C 6100 C7E6                  		bsr.w	AnimateSprite
0000FD10 6000 0000                  		bra.w	RememberState
0000FD14                            ; ===========================================================================
0000FD14 0000                       @index:		dc.w @chkdistance-@index
0000FD16 0000                       		dc.w @type00-@index
0000FD18 0000                       		dc.w @matchfloor-@index
0000FD1A 0000                       		dc.w @speed-@index
0000FD1C 0000                       		dc.w @type01-@index
0000FD1E                            ; ===========================================================================
0000FD1E                            
0000FD1E                            @chkdistance:
0000FD1E 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FD24 3038 D008                  		move.w	(v_player+obX).w,d0
0000FD28 9068 0008                  		sub.w	obX(a0),d0
0000FD2C 6400                       		bcc.s	@sonicisright
0000FD2E 4440                       		neg.w	d0
0000FD30 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FD36                            
0000FD36                            	@sonicisright:
0000FD36 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FD3A 6400                       		bcc.s	@outofrange	; if not, branch
0000FD3C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FD40 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FD46 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FD4A 6700                       		beq.s	@istype00	; if type is 00, branch
0000FD4C                            
0000FD4C 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FD52 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FD58 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FD5E                            
0000FD5E                            	@outofrange:
0000FD5E                            	@istype00:
0000FD5E 4E75                       		rts	
0000FD60                            ; ===========================================================================
0000FD60                            
0000FD60                            @type00:
0000FD60 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FD66 6400                       		bcc.s	@fall		; is yes, branch
0000FD68 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FD6E 3038 D008                  		move.w	(v_player+obX).w,d0
0000FD72 9068 0008                  		sub.w	obX(a0),d0
0000FD76 6400                       		bcc.s	@sonicisright2
0000FD78 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FD7E                            
0000FD7E                            	@sonicisright2:
0000FD7E 4E75                       		rts	
0000FD80                            ; ===========================================================================
0000FD80                            
0000FD80                            	@fall:
0000FD80 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FD86 6600                       		bne.s	@loc_DE42
0000FD88 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FD8E                            
0000FD8E                            	@loc_DE42:
0000FD8E 6100 F65E                  		bsr.w	ObjectFall
0000FD92 6100 0000                  		bsr.w	ObjFloorDist
0000FD96 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FD98 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FD9A                            
0000FD9A D368 000C                  		add.w	d1,obY(a0)
0000FD9E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FDA4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FDA8 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FDAE 0828 0005 0002             		btst	#5,obGfx(a0)
0000FDB4 6700                       		beq.s	@pppppppp
0000FDB6 5228 001C                  		addq.b	#1,obAnim(a0)
0000FDBA                            
0000FDBA                            	@pppppppp:
0000FDBA 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FDC0 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FDC6 0828 0000 0022             		btst	#0,obStatus(a0)
0000FDCC 6600                       		bne.s	@keepfalling
0000FDCE 4468 0010                  		neg.w	obVelX(a0)
0000FDD2                            
0000FDD2                            	@keepfalling:
0000FDD2 4E75                       		rts	
0000FDD4                            ; ===========================================================================
0000FDD4                            
0000FDD4                            @matchfloor:
0000FDD4 6100 F650                  		bsr.w	SpeedToPos
0000FDD8 6100 0000                  		bsr.w	ObjFloorDist
0000FDDC 0C41 FFF8                  		cmpi.w	#-8,d1
0000FDE0 6D00                       		blt.s	@nextroutine
0000FDE2 0C41 000C                  		cmpi.w	#$C,d1
0000FDE6 6C00                       		bge.s	@nextroutine
0000FDE8 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FDEC 4E75                       		rts	
0000FDEE                            ; ===========================================================================
0000FDEE                            
0000FDEE                            	@nextroutine:
0000FDEE 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FDF2 4E75                       		rts	
0000FDF4                            ; ===========================================================================
0000FDF4                            
0000FDF4                            @speed:
0000FDF4 6100 F630                  		bsr.w	SpeedToPos
0000FDF8 4E75                       		rts	
0000FDFA                            ; ===========================================================================
0000FDFA                            
0000FDFA                            @type01:
0000FDFA 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FE00 6600                       		bne.s	@firemissile
0000FE02 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FE08                            
0000FE08                            	@firemissile:
0000FE08 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000FE0E 6600                       		bne.s	@fail
0000FE10 4A28 0032                  		tst.b	$32(a0)
0000FE14 6600                       		bne.s	@fail
0000FE16 117C 0001 0032             		move.b	#1,$32(a0)
0000FE1C 6100 FBB6                  		bsr.w	FindFreeObj
0000FE20 6600                       		bne.s	@fail
0000FE22 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0000FE26 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FE2C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FE32 5169 000C                  		subq.w	#8,obY(a1)
0000FE36 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000FE3C 303C 0014                  		move.w	#$14,d0
0000FE40 0828 0000 0022             		btst	#0,obStatus(a0)
0000FE46 6600                       		bne.s	@noflip
0000FE48 4440                       		neg.w	d0
0000FE4A 4469 0010                  		neg.w	obVelX(a1)
0000FE4E                            
0000FE4E                            	@noflip:
0000FE4E D169 0008                  		add.w	d0,obX(a1)
0000FE52 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000FE58 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000FE5E                            
0000FE5E                            	@fail:
0000FE5E 4E75                       		rts	
0000FE60                            ; ===========================================================================
0000FE60                            
0000FE60                            Newt_Delete:	; Routine 4
0000FE60 6000 F618                  		bra.w	DeleteObject
0000FE60 6000 F618                  		bra.w	DeleteObject
0000FE64                            		include	"_anim\Newtron.asm"
0000FE64                            ; ---------------------------------------------------------------------------
0000FE64                            ; Animation script - Newtron enemy
0000FE64                            ; ---------------------------------------------------------------------------
0000FE64 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0000FE66 0000                       		dc.w A_Newt_Drop-Ani_Newt
0000FE68 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0000FE6A 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0000FE6C 0000                       		dc.w A_Newt_Fires-Ani_Newt
0000FE6E 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0000FE72 00                         		even
0000FE72 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0000FE7A 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
0000FE7E 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0000FE82 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0000FE8C 00                         		even
0000FE8C 00                         		even
0000FE8C                            Map_Newt:	include	"_maps\Newtron.asm"
0000FE8C                            ; ---------------------------------------------------------------------------
0000FE8C                            ; Sprite mappings - Newtron enemy (GHZ)
0000FE8C                            ; ---------------------------------------------------------------------------
0000FE8C                            Map_Newt_internal:
0000FE8C 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
0000FE8E 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0000FE90 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0000FE92 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0000FE94 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0000FE96 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0000FE98 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0000FE9A 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0000FE9C 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
0000FE9E 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0000FEA0 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0000FEA2 03                         M_Newt_Trans:	dc.b 3
0000FEA3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0000FEA8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FEAD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FEB2 03                         M_Newt_Norm:	dc.b 3
0000FEB3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0000FEB8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FEBD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FEC2 03                         M_Newt_Fires:	dc.b 3
0000FEC3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0000FEC8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FECD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FED2 04                         M_Newt_Drop1:	dc.b 4
0000FED3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0000FED8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FEDD FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000FEE2 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000FEE7 03                         M_Newt_Drop2:	dc.b 3
0000FEE8 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FEED FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FEF2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FEF7 02                         M_Newt_Drop3:	dc.b 2
0000FEF8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FEFD F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF02 03                         M_Newt_Fly1a:	dc.b 3
0000FF03 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0000FF08 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF0D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FF12 03                         M_Newt_Fly1b:	dc.b 3
0000FF13 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF18 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF1D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FF22 03                         M_Newt_Fly2a:	dc.b 3
0000FF23 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF28 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF2D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FF32 03                         M_Newt_Fly2b:	dc.b 3
0000FF33 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF38 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF3D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FF42 00                         M_Newt_Blank:	dc.b 0
0000FF44 00                         		even
0000FF44 00                         		even
0000FF44                            		include	"_incObj\43 Roller.asm"
0000FF44                            ; ---------------------------------------------------------------------------
0000FF44                            ; Object 43 - Roller enemy (SYZ)
0000FF44                            ; ---------------------------------------------------------------------------
0000FF44                            
0000FF44                            Roller:
0000FF44 7000                       		moveq	#0,d0
0000FF46 1028 0024                  		move.b	obRoutine(a0),d0
0000FF4A 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0000FF4E 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0000FF52                            ; ===========================================================================
0000FF52 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0000FF54 0000                       		dc.w Roll_Action-Roll_Index
0000FF56                            ; ===========================================================================
0000FF56                            
0000FF56                            Roll_Main:	; Routine 0
0000FF56 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000FF5C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FF62 6100 F48A                  		bsr.w	ObjectFall
0000FF66 6100 0000                  		bsr.w	ObjFloorDist
0000FF6A 4A41                       		tst.w	d1
0000FF6C 6A00                       		bpl.s	locret_E052
0000FF6E D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
0000FF72 317C 0000 0012             		move.w	#0,obVelY(a0)
0000FF78 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF7C 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0000FF84 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
0000FF8A 117C 0004 0001             		move.b	#4,obRender(a0)
0000FF90 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FF96 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FF9C                            
0000FF9C                            	locret_E052:
0000FF9C 4E75                       		rts	
0000FF9E                            ; ===========================================================================
0000FF9E                            
0000FF9E                            Roll_Action:	; Routine 2
0000FF9E 7000                       		moveq	#0,d0
0000FFA0 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FFA4 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0000FFA8 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
0000FFAC 43F9 0000 0000             		lea	(Ani_Roll).l,a1
0000FFB2 6100 C540                  		bsr.w	AnimateSprite
0000FFB6 3028 0008                  		move.w	obX(a0),d0
0000FFBA 0240 FF80                  		andi.w	#$FF80,d0
0000FFBE 3238 F700                  		move.w	(v_screenposx).w,d1
0000FFC2 0441 0080                  		subi.w	#$80,d1
0000FFC6 0241 FF80                  		andi.w	#$FF80,d1
0000FFCA 9041                       		sub.w	d1,d0
0000FFCC 0C40 0280                  		cmpi.w	#$280,d0
0000FFD0 6E00 0000                  		bgt.w	Roll_ChkGone
0000FFD4 6000 F464                  		bra.w	DisplaySprite
0000FFD8                            ; ===========================================================================
0000FFD8                            
0000FFD8                            Roll_ChkGone:
0000FFD8 45F8 FC00                  		lea	(v_objstate).w,a2
0000FFDC 7000                       		moveq	#0,d0
0000FFDE 1028 0023                  		move.b	obRespawnNo(a0),d0
0000FFE2 6700                       		beq.s	Roll_Delete
0000FFE4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FFEA                            
0000FFEA                            Roll_Delete:
0000FFEA 6000 F48E                  		bra.w	DeleteObject
0000FFEE                            ; ===========================================================================
0000FFEE 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
0000FFF0 0000                       		dc.w Roll_RollNoChk-Roll_Index2
0000FFF2 0000                       		dc.w Roll_ChkJump-Roll_Index2
0000FFF4 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0000FFF6                            ; ===========================================================================
0000FFF6                            
0000FFF6                            Roll_RollChk:
0000FFF6 3038 D008                  		move.w	(v_player+obX).w,d0
0000FFFA 0440 0100                  		subi.w	#$100,d0
0000FFFE 6500                       		bcs.s	loc_E0D2
00010000 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010004 6500                       		bcs.s	loc_E0D2
00010006 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001000A 117C 0002 001C             		move.b	#2,obAnim(a0)
00010010 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010016 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
0001001C                            
0001001C                            loc_E0D2:
0001001C 588F                       		addq.l	#4,sp
0001001E 4E75                       		rts	
00010020                            ; ===========================================================================
00010020                            
00010020                            Roll_RollNoChk:
00010020 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010026 6700                       		beq.s	loc_E0F8
00010028 5368 0030                  		subq.w	#1,$30(a0)
0001002C 6A00                       		bpl.s	locret_E0F6
0001002E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010034 317C 0700 0010             		move.w	#$700,obVelX(a0)
0001003A 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010040                            
00010040                            locret_E0F6:
00010040 4E75                       		rts	
00010042                            ; ===========================================================================
00010042                            
00010042                            loc_E0F8:
00010042 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010046 4E75                       		rts	
00010048                            ; ===========================================================================
00010048                            
00010048                            Roll_ChkJump:
00010048 6100 0000                  		bsr.w	Roll_Stop
0001004C 6100 F3D8                  		bsr.w	SpeedToPos
00010050 6100 0000                  		bsr.w	ObjFloorDist
00010054 0C41 FFF8                  		cmpi.w	#-8,d1
00010058 6D00                       		blt.s	Roll_Jump
0001005A 0C41 000C                  		cmpi.w	#$C,d1
0001005E 6C00                       		bge.s	Roll_Jump
00010060 D368 000C                  		add.w	d1,obY(a0)
00010064 4E75                       		rts	
00010066                            ; ===========================================================================
00010066                            
00010066                            Roll_Jump:
00010066 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001006A 08E8 0000 0032             		bset	#0,$32(a0)
00010070 6700                       		beq.s	locret_E12E
00010072 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010078                            
00010078                            locret_E12E:
00010078 4E75                       		rts	
0001007A                            ; ===========================================================================
0001007A                            
0001007A                            Roll_MatchFloor:
0001007A 6100 F372                  		bsr.w	ObjectFall
0001007E 4A68 0012                  		tst.w	obVelY(a0)
00010082 6B00                       		bmi.s	locret_E150
00010084 6100 0000                  		bsr.w	ObjFloorDist
00010088 4A41                       		tst.w	d1
0001008A 6A00                       		bpl.s	locret_E150
0001008C D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
00010090 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00010094 317C 0000 0012             		move.w	#0,obVelY(a0)
0001009A                            
0001009A                            locret_E150:
0001009A 4E75                       		rts	
0001009C                            
0001009C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001009C                            
0001009C                            
0001009C                            Roll_Stop:
0001009C 4A28 0032                  		tst.b	$32(a0)
000100A0 6B00                       		bmi.s	locret_E188
000100A2 3038 D008                  		move.w	(v_player+obX).w,d0
000100A6 0440 0030                  		subi.w	#$30,d0
000100AA 9068 0008                  		sub.w	obX(a0),d0
000100AE 6400                       		bcc.s	locret_E188
000100B0 117C 0000 001C             		move.b	#0,obAnim(a0)
000100B6 117C 000E 0020             		move.b	#$E,obColType(a0)
000100BC 4268 0010                  		clr.w	obVelX(a0)
000100C0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000100C6 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000100CC 08E8 0007 0032             		bset	#7,$32(a0)
000100D2                            
000100D2                            locret_E188:
000100D2 4E75                       		rts	
000100D4                            ; End of function Roll_Stop
000100D4                            ; End of function Roll_Stop
000100D4                            		include	"_anim\Roller.asm"
000100D4                            ; ---------------------------------------------------------------------------
000100D4                            ; Animation script - Roller enemy
000100D4                            ; ---------------------------------------------------------------------------
000100D4 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000100D6 0000                       		dc.w A_Roll_Fold-Ani_Roll
000100D8 0000                       		dc.w A_Roll_Roll-Ani_Roll
000100DA 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000100E0 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000100E6 00                         		even
000100E6 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000100EC 00                         		even
000100EC 00                         		even
000100EC                            Map_Roll:	include	"_maps\Roller.asm"
000100EC                            ; --------------------------------------------------------------------------------
000100EC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000100EC                            ; --------------------------------------------------------------------------------
000100EC                            
000100EC                            SME_q3BmU:	
000100EC 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000100F0 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000100F4 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000100F6 02                         SME_q3BmU_A:	dc.b 2	
000100F7 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000100FC F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010101 02                         SME_q3BmU_15:	dc.b 2	
00010102 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010107 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
0001010C 01                         SME_q3BmU_20:	dc.b 1	
0001010D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010112 01                         SME_q3BmU_26:	dc.b 1	
00010113 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010118 01                         SME_q3BmU_2C:	dc.b 1	
00010119 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
0001011E                            		even
0001011E                            		even
0001011E                            
0001011E                            		include	"_incObj\44 GHZ Edge Walls.asm"
0001011E                            ; ---------------------------------------------------------------------------
0001011E                            ; Object 44 - edge walls (GHZ)
0001011E                            ; ---------------------------------------------------------------------------
0001011E                            
0001011E                            EdgeWalls:
0001011E 7000                       		moveq	#0,d0
00010120 1028 0024                  		move.b	obRoutine(a0),d0
00010124 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010128 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
0001012C                            ; ===========================================================================
0001012C 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
0001012E 0000                       		dc.w Edge_Solid-Edge_Index
00010130 0000                       		dc.w Edge_Display-Edge_Index
00010132                            ; ===========================================================================
00010132                            
00010132                            Edge_Main:	; Routine 0
00010132 5428 0024                  		addq.b	#2,obRoutine(a0)
00010136 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
0001013E 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010144 0028 0004 0001             		ori.b	#4,obRender(a0)
0001014A 117C 0008 0014             		move.b	#8,obActWid(a0)
00010150 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010156 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0001015C 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010162 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010164 5428 0024                  		addq.b	#2,obRoutine(a0)
00010168 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
0001016A                            ; ===========================================================================
0001016A                            
0001016A                            Edge_Solid:	; Routine 2
0001016A 323C 0013                  		move.w	#$13,d1
0001016E 343C 0028                  		move.w	#$28,d2
00010172 6100 9FE6                  		bsr.w	Obj44_SolidWall
00010176                            
00010176                            Edge_Display:	; Routine 4
00010176 6100 F2C2                  		bsr.w	DisplaySprite
00010198 4E75                       		rts	
00010198 4E75                       		rts	
0001019A                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
0001019A                            ; ---------------------------------------------------------------------------
0001019A                            ; Sprite mappings - walls (GHZ)
0001019A                            ; ---------------------------------------------------------------------------
0001019A                            Map_Edge_internal:
0001019A 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
0001019C 0000                       		dc.w M_Edge_Light-Map_Edge_internal
0001019E 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000101A0 04                         M_Edge_Shadow:	dc.b 4
000101A1 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000101A6 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000101AB 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000101B0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000101B5 04                         M_Edge_Light:	dc.b 4
000101B6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000101BB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000101C0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000101C5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000101CA 04                         M_Edge_Dark:	dc.b 4
000101CB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000101D0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000101D5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000101DA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000101E0 00                         		even
000101E0 00                         		even
000101E0                            
000101E0                            		include	"_incObj\13 Lava Ball Maker.asm"
000101E0                            ; ---------------------------------------------------------------------------
000101E0                            ; Object 13 - lava ball	maker (MZ, SLZ)
000101E0                            ; ---------------------------------------------------------------------------
000101E0                            
000101E0                            LavaMaker:
000101E0 7000                       		moveq	#0,d0
000101E2 1028 0024                  		move.b	obRoutine(a0),d0
000101E6 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000101EA 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000101EE 6000 0000                  		bra.w	LBall_ChkDel
000101F2                            ; ===========================================================================
000101F2 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000101F4 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000101F6                            ; ---------------------------------------------------------------------------
000101F6                            ;
000101F6                            ; Lava ball production rates
000101F6                            ;
000101F6 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000101FC                            ; ===========================================================================
000101FC                            
000101FC                            LavaM_Main:	; Routine 0
000101FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010200 1028 0028                  		move.b	obSubtype(a0),d0
00010204 E848                       		lsr.w	#4,d0
00010206 0240 000F                  		andi.w	#$F,d0
0001020A 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010210 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010216 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001021C                            
0001021C                            LavaM_MakeLava:	; Routine 2
0001021C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010220 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010222 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010228 6100 F59E                  		bsr.w	ChkObjectVisible
0001022C 6600                       		bne.s	LavaM_Wait
0001022E 6100 F7A4                  		bsr.w	FindFreeObj
00010232 6600                       		bne.s	LavaM_Wait
00010234 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010238 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001023E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010244 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001024A                            
0001024A                            	LavaM_Wait:
0001024A 4E75                       		rts	
0001024A 4E75                       		rts	
0001024C                            		include	"_incObj\14 Lava Ball.asm"
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            ; Object 14 - lava balls (MZ, SLZ)
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            
0001024C                            LavaBall:
0001024C 7000                       		moveq	#0,d0
0001024E 1028 0024                  		move.b	obRoutine(a0),d0
00010252 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010256 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001025A 6000 F1DE                  		bra.w	DisplaySprite
0001025E                            ; ===========================================================================
0001025E 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010260 0000                       		dc.w LBall_Action-LBall_Index
00010262 0000                       		dc.w LBall_Delete-LBall_Index
00010264                            
00010264 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
0001026E 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010276                            ; ===========================================================================
00010276                            
00010276                            LBall_Main:	; Routine 0
00010276 5428 0024                  		addq.b	#2,obRoutine(a0)
0001027A 117C 0008 0016             		move.b	#8,obHeight(a0)
00010280 117C 0008 0017             		move.b	#8,obWidth(a0)
00010286 217C 0000 D146 0004        		move.l	#Map_Fire,obMap(a0)
0001028E 317C 0345 0002             		move.w	#$345,obGfx(a0)
00010294 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
0001029A 6600                       		bne.s	@notSLZ
0001029C 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000102A2                            
000102A2                            	@notSLZ:
000102A2 117C 0004 0001             		move.b	#4,obRender(a0)
000102A8 317C 0180 0018             		move.w	#$180,obPriority(a0)
000102AE 117C 008B 0020             		move.b	#$8B,obColType(a0)
000102B4 3168 000C 0030             		move.w	obY(a0),$30(a0)
000102BA 4A28 0029                  		tst.b	$29(a0)
000102BE 6700                       		beq.s	@speed
000102C0 5428 0018                  		addq.b	#2,obPriority(a0)
000102C4                            
000102C4                            	@speed:
000102C4 7000                       		moveq	#0,d0
000102C6 1028 0028                  		move.b	obSubtype(a0),d0
000102CA D040                       		add.w	d0,d0
000102CC 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000102D2 117C 0008 0014             		move.b	#8,obActWid(a0)
000102D8 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
000102DE 6500                       		bcs.s	@sound		; if yes, branch
000102E0                            
000102E0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000102E6 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000102EC 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000102F2 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000102F8                            
000102F8                            	@sound:
00010302                            
00010302                            LBall_Action:	; Routine 2
00010302 7000                       		moveq	#0,d0
00010304 1028 0028                  		move.b	obSubtype(a0),d0
00010308 D040                       		add.w	d0,d0
0001030A 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
0001030E 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010312 6100 F112                  		bsr.w	SpeedToPos
00010316 43F9 0000 0000             		lea	(Ani_Fire).l,a1
0001031C 6100 C1D6                  		bsr.w	AnimateSprite
00010320                            
00010320                            LBall_ChkDel:
0001033E 4E75                       		rts	
00010340                            ; ===========================================================================
00010340 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010344 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010348 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0001034C 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010350 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010352                            ; ===========================================================================
00010352                            ; lavaball types 00-03 fly up and fall back down
00010352                            
00010352                            LBall_Type00:
00010352 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010358 3028 0030                  		move.w	$30(a0),d0
0001035C B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010360 6400                       		bcc.s	loc_E41E	; if not, branch
00010362 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010366                            
00010366                            loc_E41E:
00010366 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001036C 4A68 0012                  		tst.w	obVelY(a0)
00010370 6A00                       		bpl.s	locret_E430
00010372 08E8 0001 0022             		bset	#1,obStatus(a0)
00010378                            
00010378                            locret_E430:
00010378 4E75                       		rts	
0001037A                            ; ===========================================================================
0001037A                            ; lavaball type	04 flies up until it hits the ceiling
0001037A                            
0001037A                            LBall_Type04:
0001037A 08E8 0001 0022             		bset	#1,obStatus(a0)
00010380 6100 0000                  		bsr.w	ObjHitCeiling
00010384 4A41                       		tst.w	d1
00010386 6A00                       		bpl.s	locret_E452
00010388 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001038E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010394 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
0001039A                            
0001039A                            locret_E452:
0001039A 4E75                       		rts	
0001039C                            ; ===========================================================================
0001039C                            ; lavaball type	05 falls down until it hits the	floor
0001039C                            
0001039C                            LBall_Type05:
0001039C 08A8 0001 0022             		bclr	#1,obStatus(a0)
000103A2 6100 0000                  		bsr.w	ObjFloorDist
000103A6 4A41                       		tst.w	d1
000103A8 6A00                       		bpl.s	locret_E474
000103AA 117C 0008 0028             		move.b	#8,obSubtype(a0)
000103B0 117C 0001 001C             		move.b	#1,obAnim(a0)
000103B6 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000103BC                            
000103BC                            locret_E474:
000103BC 4E75                       		rts	
000103BE                            ; ===========================================================================
000103BE                            ; lavaball types 06-07 move sideways
000103BE                            
000103BE                            LBall_Type06:
000103BE 08E8 0000 0022             		bset	#0,obStatus(a0)
000103C4 76F8                       		moveq	#-8,d3
000103C6 6100 0000                  		bsr.w	ObjHitWallLeft
000103CA 4A41                       		tst.w	d1
000103CC 6A00                       		bpl.s	locret_E498
000103CE 117C 0008 0028             		move.b	#8,obSubtype(a0)
000103D4 117C 0003 001C             		move.b	#3,obAnim(a0)
000103DA 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000103E0                            
000103E0                            locret_E498:
000103E0 4E75                       		rts	
000103E2                            ; ===========================================================================
000103E2                            
000103E2                            LBall_Type07:
000103E2 08A8 0000 0022             		bclr	#0,obStatus(a0)
000103E8 7608                       		moveq	#8,d3
000103EA 6100 0000                  		bsr.w	ObjHitWallRight
000103EE 4A41                       		tst.w	d1
000103F0 6A00                       		bpl.s	locret_E4BC
000103F2 117C 0008 0028             		move.b	#8,obSubtype(a0)
000103F8 117C 0003 001C             		move.b	#3,obAnim(a0)
000103FE 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010404                            
00010404                            locret_E4BC:
00010404 4E75                       		rts	
00010406                            ; ===========================================================================
00010406                            
00010406                            LBall_Type08:
00010406 4E75                       		rts	
00010408                            ; ===========================================================================
00010408                            
00010408                            LBall_Delete:
00010408 6000 F070                  		bra.w	DeleteObject
00010408 6000 F070                  		bra.w	DeleteObject
0001040C                            		include	"_anim\Fireballs.asm"
0001040C                            ; ---------------------------------------------------------------------------
0001040C                            ; Animation script - lava balls
0001040C                            ; ---------------------------------------------------------------------------
0001040C 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
0001040E 0000                       		dc.w @vertcollide-Ani_Fire
00010410 0000                       		dc.w @horizontal-Ani_Fire
00010412 0000                       		dc.w @horicollide-Ani_Fire
00010414 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001041A 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
0001041E 00                         		even
0001041E 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010424 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010428 00                         		even
00010428 00                         		even
00010428                            
00010428                            		include	"_incObj\6D Flamethrower.asm"
00010428                            ; ---------------------------------------------------------------------------
00010428                            ; Object 6D - flame thrower (SBZ)
00010428                            ; ---------------------------------------------------------------------------
00010428                            
00010428                            Flamethrower:
00010428 7000                       		moveq	#0,d0
0001042A 1028 0024                  		move.b	obRoutine(a0),d0
0001042E 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010432 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010436                            ; ===========================================================================
00010436 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010438 0000                       		dc.w Flame_Action-Flame_Index
0001043A                            ; ===========================================================================
0001043A                            
0001043A                            Flame_Main:	; Routine 0
0001043A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001043E 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010446 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
0001044C 0028 0004 0001             		ori.b	#4,obRender(a0)
00010452 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010458 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
0001045E 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010464 1028 0028                  		move.b	obSubtype(a0),d0
00010468 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001046C D040                       		add.w	d0,d0		; multiply by 2
0001046E 3140 0030                  		move.w	d0,$30(a0)
00010472 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010476 1028 0028                  		move.b	obSubtype(a0),d0
0001047A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0001047E EB48                       		lsl.w	#5,d0		; multiply by $20
00010480 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010484 117C 000A 0036             		move.b	#$A,$36(a0)
0001048A 0828 0001 0022             		btst	#1,obStatus(a0)
00010490 6700                       		beq.s	Flame_Action
00010492 117C 0002 001C             		move.b	#2,obAnim(a0)
00010498 117C 0015 0036             		move.b	#$15,$36(a0)
0001049E                            
0001049E                            Flame_Action:	; Routine 2
0001049E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000104A2 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000104A4 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000104AA 0868 0000 001C             		bchg	#0,obAnim(a0)
000104B0 6700                       		beq.s	loc_E57A
000104B2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000104C2                            
000104C2                            loc_E57A:
000104C2 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000104C8 6100 C02A                  		bsr.w	AnimateSprite
000104CC 117C 0000 0020             		move.b	#0,obColType(a0)
000104D2 1028 0036                  		move.b	$36(a0),d0
000104D6 B028 001A                  		cmp.b	obFrame(a0),d0
000104DA 6600                       		bne.s	Flame_ChkDel
000104DC 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000104E2                            
000104E2                            Flame_ChkDel:
00010500 6000 EF38                  		bra.w	DisplaySprite
00010500 6000 EF38                  		bra.w	DisplaySprite
00010504                            		include	"_anim\Flamethrower.asm"
00010504                            ; ---------------------------------------------------------------------------
00010504                            ; Animation script - flamethrower (SBZ)
00010504                            ; ---------------------------------------------------------------------------
00010504 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010506 0000                       		dc.w @pipe2-Ani_Flame
00010508 0000                       		dc.w @valve1-Ani_Flame
0001050A 0000                       		dc.w @valve2-Ani_Flame
0001050C 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001051A 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010524 00                         		even
00010524 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010532 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
0001053C 00                         		even
0001053C 00                         		even
0001053C                            Map_Flame:	include	"_maps\Flamethrower.asm"
0001053C                            ; ---------------------------------------------------------------------------
0001053C                            ; Sprite mappings - flame thrower (SBZ)
0001053C                            ; ---------------------------------------------------------------------------
0001053C                            Map_Flame_internal:
0001053C 0000                       		dc.w @pipe1-Map_Flame_internal
0001053E 0000                       		dc.w @pipe2-Map_Flame_internal
00010540 0000                       		dc.w @pipe3-Map_Flame_internal
00010542 0000                       		dc.w @pipe4-Map_Flame_internal
00010544 0000                       		dc.w @pipe5-Map_Flame_internal
00010546 0000                       		dc.w @pipe6-Map_Flame_internal
00010548 0000                       		dc.w @pipe7-Map_Flame_internal
0001054A 0000                       		dc.w @pipe8-Map_Flame_internal
0001054C 0000                       		dc.w @pipe9-Map_Flame_internal
0001054E 0000                       		dc.w @pipe10-Map_Flame_internal
00010550 0000                       		dc.w @pipe11-Map_Flame_internal
00010552 0000                       		dc.w @valve1-Map_Flame_internal
00010554 0000                       		dc.w @valve2-Map_Flame_internal
00010556 0000                       		dc.w @valve3-Map_Flame_internal
00010558 0000                       		dc.w @valve4-Map_Flame_internal
0001055A 0000                       		dc.w @valve5-Map_Flame_internal
0001055C 0000                       		dc.w @valve6-Map_Flame_internal
0001055E 0000                       		dc.w @valve7-Map_Flame_internal
00010560 0000                       		dc.w @valve8-Map_Flame_internal
00010562 0000                       		dc.w @valve9-Map_Flame_internal
00010564 0000                       		dc.w @valve10-Map_Flame_internal
00010566 0000                       		dc.w @valve11-Map_Flame_internal
00010568 01                         @pipe1:		dc.b 1
00010569 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
0001056E 02                         @pipe2:		dc.b 2
0001056F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010574 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010579 02                         @pipe3:		dc.b 2
0001057A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001057F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010584 03                         @pipe4:		dc.b 3
00010585 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001058A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001058F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010594 03                         @pipe5:		dc.b 3
00010595 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001059A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001059F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105A4 04                         @pipe6:		dc.b 4
000105A5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000105AA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000105AF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000105B4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105B9 04                         @pipe7:		dc.b 4
000105BA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000105BF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000105C4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000105C9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105CE 05                         @pipe8:		dc.b 5
000105CF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000105D4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000105D9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000105DE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000105E3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105E8 05                         @pipe9:		dc.b 5
000105E9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000105EE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000105F3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000105F8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000105FD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010602 06                         @pipe10:	dc.b 6
00010603 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010608 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001060D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010612 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010617 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001061C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010621 06                         @pipe11:	dc.b 6
00010622 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010627 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001062C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010631 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010636 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001063B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010640 01                         @valve1:	dc.b 1
00010641 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010646 02                         @valve2:	dc.b 2
00010647 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001064C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010651 02                         @valve3:	dc.b 2
00010652 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010657 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001065C 03                         @valve4:	dc.b 3
0001065D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010662 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010667 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001066C 03                         @valve5:	dc.b 3
0001066D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010672 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010677 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001067C 04                         @valve6:	dc.b 4
0001067D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010682 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010687 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001068C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010691 04                         @valve7:	dc.b 4
00010692 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010697 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001069C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106A1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106A6 05                         @valve8:	dc.b 5
000106A7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000106AC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000106B1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000106B6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106BB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106C0 05                         @valve9:	dc.b 5
000106C1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000106C6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000106CB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000106D0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106D5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106DA 06                         @valve10:	dc.b 6
000106DB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000106E0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000106E5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000106EA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000106EF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106F4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106F9 06                         @valve11:	dc.b 6
000106FA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000106FF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010704 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010709 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001070E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010713 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010718                            		even
00010718                            		even
00010718                            
00010718                            		include	"_incObj\46 MZ Bricks.asm"
00010718                            ; ---------------------------------------------------------------------------
00010718                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010718                            ; ---------------------------------------------------------------------------
00010718                            
00010718                            MarbleBrick:
00010718 7000                       		moveq	#0,d0
0001071A 1028 0024                  		move.b	obRoutine(a0),d0
0001071E 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010722 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010726                            ; ===========================================================================
00010726 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010728 0000                       		dc.w Brick_Action-Brick_Index
0001072A                            
0001072A =00000030                  brick_origY:	equ $30
0001072A                            ; ===========================================================================
0001072A                            
0001072A                            Brick_Main:	; Routine 0
0001072A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001072E 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010734 117C 000F 0017             		move.b	#$F,obWidth(a0)
0001073A 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010742 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010748 117C 0004 0001             		move.b	#4,obRender(a0)
0001074E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010754 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001075A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010760 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010766                            
00010766                            Brick_Action:	; Routine 2
00010766 4A28 0001                  		tst.b	obRender(a0)
0001076A 6A00                       		bpl.s	@chkdel
0001076C 7000                       		moveq	#0,d0
0001076E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010772 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010776 D040                       		add.w	d0,d0
00010778 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
0001077C 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010780 323C 001B                  		move.w	#$1B,d1
00010784 343C 0010                  		move.w	#$10,d2
00010788 363C 0011                  		move.w	#$11,d3
0001078C 3828 0008                  		move.w	obX(a0),d4
00010790 6100 0000                  		bsr.w	SolidObject
00010794                            
00010794                            	@chkdel:
000107B2 6000 EC86                  			bra.w	DisplaySprite
000107B6                            ; ===========================================================================
000107B6 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
000107B8 0000                       		dc.w Brick_Type01-Brick_TypeIndex
000107BA 0000                       		dc.w Brick_Type02-Brick_TypeIndex
000107BC 0000                       		dc.w Brick_Type03-Brick_TypeIndex
000107BE 0000                       		dc.w Brick_Type04-Brick_TypeIndex
000107C0                            ; ===========================================================================
000107C0                            
000107C0                            Brick_Type00:
000107C0 4E75                       		rts	
000107C2                            ; ===========================================================================
000107C2                            
000107C2                            Brick_Type02:
000107C2 3038 D008                  		move.w	(v_player+obX).w,d0
000107C6 9068 0008                  		sub.w	obX(a0),d0
000107CA 6400                       		bcc.s	loc_E888
000107CC 4440                       		neg.w	d0
000107CE                            
000107CE                            loc_E888:
000107CE 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
000107D2 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
000107D4 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
000107DA                            
000107DA                            Brick_Type01:
000107DA 7000                       		moveq	#0,d0
000107DC 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
000107E0 0828 0003 0028             		btst	#3,obSubtype(a0)
000107E6 6700                       		beq.s	loc_E8A8
000107E8 4440                       		neg.w	d0
000107EA 0640 0010                  		addi.w	#$10,d0
000107EE                            
000107EE                            loc_E8A8:
000107EE 3228 0030                  		move.w	brick_origY(a0),d1
000107F2 9240                       		sub.w	d0,d1
000107F4 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
000107F8 4E75                       		rts	
000107FA                            ; ===========================================================================
000107FA                            
000107FA                            Brick_Type03:
000107FA 6100 EC2A                  		bsr.w	SpeedToPos
000107FE 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010804 6100 0000                  		bsr.w	ObjFloorDist
00010808 4A41                       		tst.w	d1		; has the block	hit the	floor?
0001080A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0001080E D368 000C                  		add.w	d1,obY(a0)
00010812 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010816 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
0001081C 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010822 3011                       		move.w	(a1),d0
00010824 0240 03FF                  		andi.w	#$3FF,d0
00010828 0C40 016A                  			cmpi.w	#$16A,d0
0001082C 6400                       		bcc.s	locret_E8EE
0001082E 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010834                            
00010834                            locret_E8EE:
00010834 4E75                       		rts	
00010836                            ; ===========================================================================
00010836                            
00010836                            Brick_Type04:
00010836 7000                       		moveq	#0,d0
00010838 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0001083C E648                       		lsr.w	#3,d0
0001083E 3228 0030                  		move.w	brick_origY(a0),d1
00010842 9240                       		sub.w	d0,d1
00010844 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010848 4E75                       		rts	
00010848 4E75                       		rts	
0001084A                            Map_Brick:	include	"_maps\MZ Bricks.asm"
0001084A                            ; ---------------------------------------------------------------------------
0001084A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0001084A                            ; ---------------------------------------------------------------------------
0001084A                            Map_Brick_internal:
0001084A 0000                       		dc.w @brick-Map_Brick_internal
0001084C 01                         @brick:		dc.b 1
0001084D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010852                            		even
00010852                            		even
00010852                            
00010852                            		include	"_incObj\12 Light.asm"
00010852                            ; ---------------------------------------------------------------------------
00010852                            ; Object 12 - lamp (SYZ)
00010852                            ; ---------------------------------------------------------------------------
00010852                            
00010852                            SpinningLight:
00010852 7000                       		moveq	#0,d0
00010854 1028 0024                  		move.b	obRoutine(a0),d0
00010858 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
0001085C 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010860                            ; ===========================================================================
00010860 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010862 0000                       		dc.w Light_Animate-Light_Index
00010864                            ; ===========================================================================
00010864                            
00010864                            Light_Main:	; Routine 0
00010864 5428 0024                  		addq.b	#2,obRoutine(a0)
00010868 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010870 317C 0000 0002             		move.w	#0,obGfx(a0)
00010876 117C 0004 0001             		move.b	#4,obRender(a0)
0001087C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010882 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010888                            
00010888                            Light_Animate:	; Routine 2
00010888 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001088C 6A00                       		bpl.s	@chkdel
0001088E 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010894 5228 001A                  		addq.b	#1,obFrame(a0)
00010898 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0001089E 6500                       		bcs.s	@chkdel
000108A0 117C 0000 001A             		move.b	#0,obFrame(a0)
000108A6                            
000108A6                            	@chkdel:
000108C4 6000 EB74                  		bra.w	DisplaySprite
000108C4 6000 EB74                  		bra.w	DisplaySprite
000108C8                            Map_Light	include	"_maps\Light.asm"
000108C8                            ; --------------------------------------------------------------------------------
000108C8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000108C8                            ; --------------------------------------------------------------------------------
000108C8                            
000108C8                            SME_FBl1X:	
000108C8 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
000108CC 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
000108D0 05                         SME_FBl1X_8:	dc.b 5	
000108D1 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
000108D6 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
000108DB F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
000108E0 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
000108E5 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
000108EA 05                         SME_FBl1X_22:	dc.b 5	
000108EB E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
000108F0 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
000108F5 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
000108FA F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
000108FF F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010904 06                         SME_FBl1X_3C:	dc.b 6	
00010905 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
0001090A E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
0001090F E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010914 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010919 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
0001091E F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010923 05                         SME_FBl1X_5B:	dc.b 5	
00010924 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010929 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
0001092E F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010933 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010938 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
0001093E 00                         		even
0001093E 00                         		even
0001093E                            		include	"_incObj\47 Bumper.asm"
0001093E                            ; ---------------------------------------------------------------------------
0001093E                            ; Object 47 - pinball bumper (SYZ)
0001093E                            ; ---------------------------------------------------------------------------
0001093E                            
0001093E                            Bumper:
0001093E 7000                       		moveq	#0,d0
00010940 1028 0024                  		move.b	obRoutine(a0),d0
00010944 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010948 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
0001094C                            ; ===========================================================================
0001094C 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
0001094E 0000                       		dc.w Bump_Hit-Bump_Index
00010950                            ; ===========================================================================
00010950                            
00010950                            Bump_Main:	; Routine 0
00010950 5428 0024                  		addq.b	#2,obRoutine(a0)
00010954 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
0001095C 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010962 117C 0004 0001             		move.b	#4,obRender(a0)
00010968 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001096E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010974 117C 00D7 0020             		move.b	#$D7,obColType(a0)
0001097A                            
0001097A                            Bump_Hit:	; Routine 2
0001097A 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
0001097E 6700 0000                  		beq.w	@display	; if not, branch
00010982 4228 0021                  		clr.b	obColProp(a0)
00010986 43F8 D000                  		lea	(v_player).w,a1
0001098A 3228 0008                  		move.w	obX(a0),d1
0001098E 3428 000C                  		move.w	obY(a0),d2
00010992 9269 0008                  		sub.w	obX(a1),d1
00010996 9469 000C                  		sub.w	obY(a1),d2
0001099A 4EB9 0000 3DD4             		jsr	(CalcAngle).l
000109A0 4EB9 0000 3B42             		jsr	(CalcSine).l
000109A6 C3FC F900                  		muls.w	#-$700,d1
000109AA E081                       		asr.l	#8,d1
000109AC 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
000109B0 C1FC F900                  		muls.w	#-$700,d0
000109B4 E080                       		asr.l	#8,d0
000109B6 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
000109BA 08E9 0001 0022             		bset	#1,obStatus(a1)
000109C0 08A9 0004 0022             		bclr	#4,obStatus(a1)
000109C6 08A9 0005 0022             		bclr	#5,obStatus(a1)
000109CC 4229 003C                  		clr.b	$3C(a1)
000109D0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
000109E0 45F8 FC00                  		lea	(v_objstate).w,a2
000109E4 7000                       		moveq	#0,d0
000109E6 1028 0023                  		move.b	obRespawnNo(a0),d0
000109EA 6700                       		beq.s	@addscore
000109EC 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
000109F2 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
000109F4 5232 0002                  		addq.b	#1,2(a2,d0.w)
000109F8                            
000109F8                            	@addscore:
000109F8 7001                       		moveq	#1,d0
000109FA 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010A00 6100 EFD2                  		bsr.w	FindFreeObj
00010A04 6600                       		bne.s	@display
00010A06 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010A0A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010A10 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010A16 137C 0004 001A             		move.b	#4,obFrame(a1)
00010A1C                            
00010A1C                            	@display:
00010A1C 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010A22 6100 BAD0                  		bsr.w	AnimateSprite
00010A42 6000 E9F6                  		bra.w	DisplaySprite
00010A46                            ; ===========================================================================
00010A46                            
00010A46                            @resetcount:
00010A46 45F8 FC00                  		lea	(v_objstate).w,a2
00010A4A 7000                       		moveq	#0,d0
00010A4C 1028 0023                  		move.b	obRespawnNo(a0),d0
00010A50 6700                       		beq.s	@delete
00010A52 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010A58                            
00010A58                            	@delete:
00010A58 6000 EA20                  		bra.w	DeleteObject
00010A58 6000 EA20                  		bra.w	DeleteObject
00010A5C                            		include	"_anim\Bumper.asm"
00010A5C                            ; ---------------------------------------------------------------------------
00010A5C                            ; Animation script - flamethrower (SBZ)
00010A5C                            ; ---------------------------------------------------------------------------
00010A5C 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010A5E 0000                       		dc.w byte_EAF8-Ani_Bump
00010A60 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010A64 00                         		even
00010A64 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010A6C 00                         		even
00010A6C 00                         		even
00010A6C                            Map_Bump:	include	"_maps\Bumper.asm"
00010A6C                            ; ---------------------------------------------------------------------------
00010A6C                            ; Sprite mappings - pinball bumper (SYZ)
00010A6C                            ; ---------------------------------------------------------------------------
00010A6C                            Map_Bump_internal:
00010A6C 0000                       		dc.w @normal-Map_Bump_internal
00010A6E 0000                       		dc.w @bumped1-Map_Bump_internal
00010A70 0000                       		dc.w @bumped2-Map_Bump_internal
00010A72 02                         @normal:	dc.b 2
00010A73 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010A78 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010A7D 02                         @bumped1:	dc.b 2
00010A7E F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010A83 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010A88 02                         @bumped2:	dc.b 2
00010A89 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010A8E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010A94 00                         		even
00010A94 00                         		even
00010A94                            
00010A94                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010A94                            ; ---------------------------------------------------------------------------
00010A94                            ; Object 0D - signpost at the end of a level
00010A94                            ; ---------------------------------------------------------------------------
00010A94                            
00010A94                            Signpost:
00010A94 7000                       		moveq	#0,d0
00010A96 1028 0024                  		move.b	obRoutine(a0),d0
00010A9A 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010A9E 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010AA2 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010AA8 6100 BA4A                  		bsr.w	AnimateSprite
00010AAC 6100 E98C                  		bsr.w	DisplaySprite
00010ACE 4E75                       		rts	
00010AD0                            ; ===========================================================================
00010AD0 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010AD2 0000                       		dc.w Sign_Touch-Sign_Index
00010AD4 0000                       		dc.w Sign_Spin-Sign_Index
00010AD6 0000                       		dc.w Sign_SonicRun-Sign_Index
00010AD8 0000                       		dc.w Sign_Exit-Sign_Index
00010ADA                            
00010ADA =00000030                  spintime:	equ $30		; time for signpost to spin
00010ADA =00000032                  sparkletime:	equ $32		; time between sparkles
00010ADA =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010ADA                            ; ===========================================================================
00010ADA                            
00010ADA                            Sign_Main:	; Routine 0
00010ADA 5428 0024                  		addq.b	#2,obRoutine(a0)
00010ADE 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010AE6 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010AEC 117C 0004 0001             		move.b	#4,obRender(a0)
00010AF2 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010AF8 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010AFE                            
00010AFE                            Sign_Touch:	; Routine 2
00010AFE 3038 D008                  		move.w	(v_player+obX).w,d0
00010B02 9068 0008                  		sub.w	obX(a0),d0
00010B06 6500                       		bcs.s	@notouch
00010B08 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010B0C 6400                       		bcc.s	@notouch	; if not, branch
00010B0E 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010B1E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010B22 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010B28 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B2C 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010B32 6700                       		beq.s	@normal
00010B34 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010B3A                            
00010B3A                            	@normal:
00010B3A 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010B3E 6700                       		beq.s	@notouch
00010B40 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010B4E                            
00010B4E                            	@notouch:
00010B4E 4E75                       		rts	
00010B50                            	
00010B50                            ; ===========================================================================
00010B50                            
00010B50                            Sign_Spin:	; Routine 4
00010B50 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010B54 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010B56 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010B5C 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010B60 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010B66 6600                       		bne.s	@chksparkle	; if not, branch
00010B68 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B6C                            
00010B6C                            	@chksparkle:
00010B6C 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010B70 6A00                       		bpl.s	@fail		; if time remains, branch
00010B72 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010B78 7000                       		moveq	#0,d0
00010B7A 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010B7E 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010B82 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010B88 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010B8C 6100 EE46                  		bsr.w	FindFreeObj
00010B90 6600                       		bne.s	@fail
00010B92 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010B96 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010B9C 101A                       		move.b	(a2)+,d0
00010B9E 4880                       		ext.w	d0
00010BA0 D068 0008                  		add.w	obX(a0),d0
00010BA4 3340 0008                  		move.w	d0,obX(a1)
00010BA8 101A                       		move.b	(a2)+,d0
00010BAA 4880                       		ext.w	d0
00010BAC D068 000C                  		add.w	obY(a0),d0
00010BB0 3340 000C                  		move.w	d0,obY(a1)
00010BB4 237C 0000 BA5A 0004        		move.l	#Map_Ring,obMap(a1)
00010BBC 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010BC2 137C 0004 0001             		move.b	#4,obRender(a1)
00010BC8 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010BCE 137C 0008 0014             		move.b	#8,obActWid(a1)
00010BD4                            
00010BD4                            	@fail:
00010BD4 4E75                       		rts	
00010BD6                            ; ===========================================================================
00010BD6 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010BD8 0808                       		dc.b	8,   8
00010BDA F000                       		dc.b -$10,   0
00010BDC 18F8                       		dc.b  $18,  -8
00010BDE 00F8                       		dc.b	0,  -8
00010BE0 1000                       		dc.b  $10,   0
00010BE2 E808                       		dc.b -$18,   8
00010BE4 1810                       		dc.b  $18, $10
00010BE6                            ; ===========================================================================
00010BE6                            
00010BE6                            Sign_SonicRun:	; Routine 6
00010BE6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010BEA 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010BEE 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010BF4                            		
00010BF4                            
00010BF4                            	loc_EC86:
00010BF4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010BF8                            
00010BF8                            ; ---------------------------------------------------------------------------
00010BF8                            ; Subroutine to	set up bonuses at the end of an	act
00010BF8                            ; ---------------------------------------------------------------------------
00010BF8                            
00010BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010BF8                            
00010BF8                            
00010BF8                            GotThroughAct:
00010BF8 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010BFC 6600                       		bne.s	locret_ECEE
00010BFE 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010C04 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010C08 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010C0C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010C10 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010C16 7000                       		moveq	#plcid_TitleCard,d0
00010C18 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010C1E 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010C24 7000                       		moveq	#0,d0
00010C26 1038 FE23                  		move.b	(v_timemin).w,d0
00010C2A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010C2E 7200                       		moveq	#0,d1
00010C30 1238 FE24                  		move.b	(v_timesec).w,d1
00010C34 D041                       		add.w	d1,d0		; add up your time
00010C36 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010C3A 7214                       		moveq	#$14,d1
00010C3C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010C3E 6500                       		bcs.s	hastimebonus	; if not, branch
00010C40 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010C42                            
00010C42                            	hastimebonus:
00010C42 D040                       		add.w	d0,d0
00010C44 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010C4A 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010C4E C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010C52 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010C60 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010C66                            
00010C66                            locret_ECEE:
00010C66 4E75                       		rts	
00010C68                            
00010C68                            ; End of function GotThroughAct
00010C68                            
00010C68                            ; ===========================================================================
00010C68 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010C7C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010C92                            ; ===========================================================================
00010C92                            
00010C92                            Sign_Exit:	; Routine 8
00010C92 4E75                       		rts	
00010C94                            
00010C94                            ; ---------------------------------------------------------------------------
00010C94                            ; Subroutine to	set up bonuses at the end of an	zone
00010C94                            ; ---------------------------------------------------------------------------
00010C94                            
00010C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C94                            
00010C94                            
00010C94                            GotThroughAct1:
00010C94 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010C98 6600                       		bne.s	locret_ECEE1
00010C9A 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010CA0 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010CA4 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010CA8 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010CAC 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010CB2 7000                       		moveq	#plcid_TitleCard,d0
00010CB4 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010CBA 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010CC0 7000                       		moveq	#0,d0
00010CC2 1038 FE23                  		move.b	(v_timemin).w,d0
00010CC6 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010CCA 7200                       		moveq	#0,d1
00010CCC 1238 FE24                  		move.b	(v_timesec).w,d1
00010CD0 D041                       		add.w	d1,d0		; add up your time
00010CD2 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010CD6 7214                       		moveq	#$14,d1
00010CD8 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010CDA 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010CDE 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010CE0                            
00010CE0                            	hastimebonus2:
00010CE0 D040                       		add.w	d0,d0
00010CE2 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010CE8 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010CEC C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010CF0 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010CFE 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010D04                            
00010D04                            locret_ECEE1:
00010D04 4E75                       		rts	
00010D06                            
00010D06                            ; End of function GotThroughAct		
00010D06                            
00010D06 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010D1A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010D1A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010D30                            		include	"_anim\Signpost.asm"
00010D30                            ; ---------------------------------------------------------------------------
00010D30                            ; Animation script - signpost
00010D30                            ; ---------------------------------------------------------------------------
00010D30 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010D32 0000                       		dc.w @spin1-Ani_Sign
00010D34 0000                       		dc.w @spin2-Ani_Sign
00010D36 0000                       		dc.w @sonic-Ani_Sign
00010D38 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010D3C 00                         		even
00010D3C 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010D42 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010D48 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010D4C 00                         		even
00010D4C 00                         		even
00010D4C                            Map_Sign:	include	"_maps\Signpost.asm"
00010D4C                            ; --------------------------------------------------------------------------------
00010D4C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010D4C                            ; --------------------------------------------------------------------------------
00010D4C                            
00010D4C                            SME_KvSue:	
00010D4C 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010D50 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010D54 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010D56 04                         SME_KvSue_A:	dc.b 4	
00010D57 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010D5C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010D61 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010D66 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D6B 03                         SME_KvSue_1F:	dc.b 3	
00010D6C F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010D71 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010D76 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D7B 03                         SME_KvSue_2F:	dc.b 3	
00010D7C F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010D81 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010D86 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D8B 03                         SME_KvSue_3F:	dc.b 3	
00010D8C F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010D91 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010D96 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D9B 04                         SME_KvSue_4F:	dc.b 4	
00010D9C F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010DA1 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010DA6 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010DAB 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010DB0                            		even
00010DB0                            		even
00010DB0                            
00010DB0                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010DB0                            ; ---------------------------------------------------------------------------
00010DB0                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010DB0                            ; ---------------------------------------------------------------------------
00010DB0                            
00010DB0                            GeyserMaker:
00010DB0 7000                       		moveq	#0,d0
00010DB2 1028 0024                  		move.b	obRoutine(a0),d0
00010DB6 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010DBA 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010DBE 6000 0000                  		bra.w	Geyser_ChkDel
00010DC2                            ; ===========================================================================
00010DC2 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010DC4 0000                       		dc.w GMake_Wait-GMake_Index
00010DC6 0000                       		dc.w GMake_ChkType-GMake_Index
00010DC8 0000                       		dc.w GMake_MakeLava-GMake_Index
00010DCA 0000                       		dc.w GMake_Display-GMake_Index
00010DCC 0000                       		dc.w GMake_Delete-GMake_Index
00010DCE                            
00010DCE =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010DCE =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010DCE =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010DCE                            ; ===========================================================================
00010DCE                            
00010DCE                            GMake_Main:	; Routine 0
00010DCE 5428 0024                  		addq.b	#2,obRoutine(a0)
00010DD2 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010DDA 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010DE0 117C 0004 0001             		move.b	#4,obRender(a0)
00010DE6 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010DEC 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010DF2 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010DF8                            
00010DF8                            GMake_Wait:	; Routine 2
00010DF8 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010DFC 6A00                       		bpl.s	@cancel		; if time remains, branch
00010DFE                            
00010DFE 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010E04 3038 D00C                  		move.w	(v_player+obY).w,d0
00010E08 3228 000C                  		move.w	obY(a0),d1
00010E0C B041                       		cmp.w	d1,d0
00010E0E 6400                       		bcc.s	@cancel
00010E10 0441 0170                  		subi.w	#$170,d1
00010E14 B041                       		cmp.w	d1,d0
00010E16 6500                       		bcs.s	@cancel
00010E18 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00010E1C                            
00010E1C                            	@cancel:
00010E1C 4E75                       		rts	
00010E1E                            ; ===========================================================================
00010E1E                            
00010E1E                            GMake_MakeLava:	; Routine 6
00010E1E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E22 6100 EBC6                  		bsr.w	FindNextFreeObj
00010E26 6600                       		bne.s	@fail
00010E28 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00010E2C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E32 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E38 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010E3E 2348 003C                  		move.l	a0,gmake_parent(a1)
00010E42                            
00010E42                            	@fail:
00010E42 117C 0001 001C             		move.b	#1,obAnim(a0)
00010E48 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00010E4C 6700                       		beq.s	@isgeyser	; if yes, branch
00010E4E 117C 0004 001C             		move.b	#4,obAnim(a0)
00010E54 6000                       		bra.s	GMake_Display
00010E56                            ; ===========================================================================
00010E56                            
00010E56                            	@isgeyser:
00010E56 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00010E5A 08E9 0001 0022             		bset	#1,obStatus(a1)
00010E60 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00010E66 6000                       		bra.s	GMake_Display
00010E68                            ; ===========================================================================
00010E68                            
00010E68                            GMake_ChkType:	; Routine 4
00010E68 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00010E6C 6700                       		beq.s	GMake_Display	; if yes, branch
00010E6E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E72 4E75                       		rts	
00010E74                            ; ===========================================================================
00010E74                            
00010E74                            GMake_Display:	; Routine 8
00010E74 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00010E7A 6100 B678                  		bsr.w	AnimateSprite
00010E7E 6100 E5BA                  		bsr.w	DisplaySprite
00010E82 4E75                       		rts	
00010E84                            ; ===========================================================================
00010E84                            
00010E84                            GMake_Delete:	; Routine $A
00010E84 117C 0000 001C             		move.b	#0,obAnim(a0)
00010E8A 117C 0002 0024             		move.b	#2,obRoutine(a0)
00010E90 4A28 0028                  		tst.b	obSubtype(a0)
00010E94 6700 E5E4                  		beq.w	DeleteObject
00010E98 4E75                       		rts	
00010E9A                            
00010E9A                            
00010E9A                            ; ---------------------------------------------------------------------------
00010E9A                            ; Object 4D - lava geyser / lavafall (MZ)
00010E9A                            ; ---------------------------------------------------------------------------
00010E9A                            
00010E9A                            LavaGeyser:
00010E9A 7000                       		moveq	#0,d0
00010E9C 1028 0024                  		move.b	obRoutine(a0),d0
00010EA0 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00010EA4 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
00010EA8 6000 E590                  		bra.w	DisplaySprite
00010EAC                            ; ===========================================================================
00010EAC 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00010EAE 0000                       		dc.w Geyser_Action-Geyser_Index
00010EB0 0000                       		dc.w loc_EFFC-Geyser_Index
00010EB2 0000                       		dc.w Geyser_Delete-Geyser_Index
00010EB4                            
00010EB4 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
00010EB8                            ; ===========================================================================
00010EB8                            
00010EB8                            Geyser_Main:	; Routine 0
00010EB8 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EBC 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010EC2 4A28 0028                  		tst.b	obSubtype(a0)
00010EC6 6700                       		beq.s	@isgeyser
00010EC8 0468 0250 000C             		subi.w	#$250,obY(a0)
00010ECE                            
00010ECE                            	@isgeyser:
00010ECE 7000                       		moveq	#0,d0
00010ED0 1028 0028                  		move.b	obSubtype(a0),d0
00010ED4 D040                       		add.w	d0,d0
00010ED6 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00010EDC 2248                       		movea.l	a0,a1
00010EDE 7201                       		moveq	#1,d1
00010EE0 6100                       		bsr.s	@makelava
00010EE2 6000                       		bra.s	@activate
00010EE4                            ; ===========================================================================
00010EE4                            
00010EE4                            	@loop:
00010EE4 6100 EB04                  		bsr.w	FindNextFreeObj
00010EE8 6600                       		bne.s	@fail
00010EEA                            
00010EEA                            @makelava:
00010EEA 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00010EEE 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00010EF6 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00010EFC 137C 0004 0001             		move.b	#4,obRender(a1)
00010F02 137C 0020 0014             		move.b	#$20,obActWid(a1)
00010F08 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010F0E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010F14 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010F1A 337C 0080 0018             		move.w	#$80,obPriority(a1)
00010F20 137C 0005 001C             		move.b	#5,obAnim(a1)
00010F26 4A28 0028                  		tst.b	obSubtype(a0)
00010F2A 6700                       		beq.s	@fail
00010F2C 137C 0002 001C             		move.b	#2,obAnim(a1)
00010F32                            
00010F32                            	@fail:
00010F32 51C9 FFB0                  		dbf	d1,@loop
00010F36 4E75                       		rts	
00010F38                            ; ===========================================================================
00010F38                            
00010F38                            @activate:
00010F38 0669 0060 000C             		addi.w	#$60,obY(a1)
00010F3E 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010F44 0669 0060 0030             		addi.w	#$60,$30(a1)
00010F4A 137C 0093 0020             		move.b	#$93,obColType(a1)
00010F50 137C 0080 0016             		move.b	#$80,obHeight(a1)
00010F56 08E9 0004 0001             		bset	#4,obRender(a1)
00010F5C 5829 0024                  		addq.b	#4,obRoutine(a1)
00010F60 2348 003C                  		move.l	a0,$3C(a1)
00010F64 4A28 0028                  		tst.b	obSubtype(a0)
00010F68 6700                       		beq.s	@sound
00010F6A 7200                       		moveq	#0,d1
00010F6C 6100 FF76                  		bsr.w	@loop
00010F70 5429 0024                  		addq.b	#2,obRoutine(a1)
00010F74 08E9 0004 0002             		bset	#4,obGfx(a1)
00010F7A 0669 0100 000C             		addi.w	#$100,obY(a1)
00010F80 337C 0000 0018             		move.w	#0,obPriority(a1)
00010F86 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010F8C 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010F92 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010F98                            
00010F98                            	@sound:
00010FA2                            
00010FA2                            Geyser_Action:	; Routine 2
00010FA2 7000                       		moveq	#0,d0
00010FA4 1028 0028                  		move.b	obSubtype(a0),d0
00010FA8 D040                       		add.w	d0,d0
00010FAA 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00010FAE 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00010FB2 6100 E472                  		bsr.w	SpeedToPos
00010FB6 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00010FBC 6100 B536                  		bsr.w	AnimateSprite
00010FC0                            
00010FC0                            Geyser_ChkDel:
00010FDE 4E75                       		rts	
00010FE0                            ; ===========================================================================
00010FE0 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00010FE2 0000                       		dc.w Geyser_Type01-Geyser_Types
00010FE4                            ; ===========================================================================
00010FE4                            
00010FE4                            Geyser_Type00:
00010FE4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00010FEA 3028 0030                  		move.w	$30(a0),d0
00010FEE B068 000C                  		cmp.w	obY(a0),d0
00010FF2 6400                       		bcc.s	locret_EFDA
00010FF4 5828 0024                  		addq.b	#4,obRoutine(a0)
00010FF8 2268 003C                  		movea.l	$3C(a0),a1
00010FFC 137C 0003 001C             		move.b	#3,obAnim(a1)
00011002                            
00011002                            locret_EFDA:
00011002 4E75                       		rts	
00011004                            ; ===========================================================================
00011004                            
00011004                            Geyser_Type01:
00011004 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001100A 3028 0030                  		move.w	$30(a0),d0
0001100E B068 000C                  		cmp.w	obY(a0),d0
00011012 6400                       		bcc.s	locret_EFFA
00011014 5828 0024                  		addq.b	#4,obRoutine(a0)
00011018 2268 003C                  		movea.l	$3C(a0),a1
0001101C 137C 0001 001C             		move.b	#1,obAnim(a1)
00011022                            
00011022                            locret_EFFA:
00011022 4E75                       		rts	
00011024                            ; ===========================================================================
00011024                            
00011024                            loc_EFFC:	; Routine 4
00011024 2268 003C                  		movea.l	$3C(a0),a1
00011028 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
0001102E 6700 0000                  		beq.w	Geyser_Delete
00011032 3029 000C                  		move.w	obY(a1),d0
00011036 0640 0060                  		addi.w	#$60,d0
0001103A 3140 000C                  		move.w	d0,obY(a0)
0001103E 9068 0030                  		sub.w	$30(a0),d0
00011042 4440                       		neg.w	d0
00011044 7208                       		moveq	#8,d1
00011046 0C40 0040                  		cmpi.w	#$40,d0
0001104A 6C00                       		bge.s	loc_F026
0001104C 720B                       		moveq	#$B,d1
0001104E                            
0001104E                            loc_F026:
0001104E 0C40 0080                  		cmpi.w	#$80,d0
00011052 6F00                       		ble.s	loc_F02E
00011054 720E                       		moveq	#$E,d1
00011056                            
00011056                            loc_F02E:
00011056 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001105A 6A00                       		bpl.s	loc_F04C
0001105C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011062 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011066 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
0001106C 6500                       		bcs.s	loc_F04C
0001106E 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011074                            
00011074                            loc_F04C:
00011074 1028 001B                  		move.b	obAniFrame(a0),d0
00011078 D001                       		add.b	d1,d0
0001107A 1140 001A                  		move.b	d0,obFrame(a0)
0001107E 6000 FF40                  		bra.w	Geyser_ChkDel
00011082                            ; ===========================================================================
00011082                            
00011082                            Geyser_Delete:	; Routine 6
00011082 6000 E3F6                  		bra.w	DeleteObject
00011082 6000 E3F6                  		bra.w	DeleteObject
00011086                            		include	"_incObj\54 Lava Tag.asm"
00011086                            ; ---------------------------------------------------------------------------
00011086                            ; Object 54 - invisible	lava tag (MZ)
00011086                            ; ---------------------------------------------------------------------------
00011086                            
00011086                            LavaTag:
00011086 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
0001108C 6E00 0000                  		bgt	WaterTag	;TIS
00011090 7000                       		moveq	#0,d0
00011092 1028 0024                  		move.b	obRoutine(a0),d0
00011096 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
0001109A 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
0001109E                            ; ===========================================================================
0001109E 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000110A0 0000                       		dc.w LTag_ChkDel-LTag_Index
000110A2                            
000110A2 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000110A6 00                         		even
000110A6                            ; ===========================================================================
000110A6                            
000110A6                            LTag_Main:	; Routine 0
000110A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000110AA 7000                       		moveq	#0,d0
000110AC 1028 0028                  		move.b	obSubtype(a0),d0
000110B0 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000110B6 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000110BE 117C 0084 0001             		move.b	#$84,obRender(a0)
000110C4                            
000110C4                            LTag_ChkDel:	; Routine 2
000110C4 3028 0008                  		move.w	obX(a0),d0
000110C8 0240 FF80                  		andi.w	#$FF80,d0
000110CC 3238 F700                  		move.w	(v_screenposx).w,d1
000110D0 0441 0080                  		subi.w	#$80,d1
000110D4 0241 FF80                  		andi.w	#$FF80,d1
000110D8 9041                       		sub.w	d1,d0
000110DA 6B00 E39E                  		bmi.w	DeleteObject
000110DE 0C40 0280                  		cmpi.w	#$280,d0
000110E2 6200 E396                  		bhi.w	DeleteObject
000110E6 4E75                       		rts
000110E8                            
000110E8                            
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            ; Object 54a - invisible	water tag (MZ) - TIS
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            
000110E8                            WaterTag:	
000110E8 7000                       		moveq	#0,d0
000110EA 1028 0024                  		move.b	obRoutine(a0),d0
000110EE 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000110F2 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000110F6                            ; ===========================================================================
000110F6 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
000110F8 0000                       		dc.w WTag_ChkDel-WTag_Index
000110FA                            
000110FA 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
000110FE 00                         		even
000110FE                            ; ===========================================================================
000110FE                            
000110FE                            
000110FE                            WTag_Main:	; Routine 0
000110FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00011102 7000                       		moveq	#0,d0
00011104                            		;move.b	obSubtype(a0),d0
00011104                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
00011104 0400 00F0                  		sub.b	#$F0,d0
00011108 1178 0096 0020             		move.b	$96,obColType(a0)							
0001110E                            		;move.l	#Map_LTag,obMap(a0)
0001110E                            		;move.b	#$84,obRender(a0)
0001110E                            
0001110E                            WTag_ChkDel:	; Routine 2
0001110E 3028 0008                  		move.w	obX(a0),d0
00011112 0240 FF80                  		andi.w	#$FF80,d0
00011116 3238 F700                  		move.w	(v_screenposx).w,d1
0001111A 0441 0080                  		subi.w	#$80,d1
0001111E 0241 FF80                  		andi.w	#$FF80,d1
00011122 9041                       		sub.w	d1,d0
00011124 6B00 E354                  		bmi.w	DeleteObject
00011128 0C40 0280                  		cmpi.w	#$280,d0
0001112C 6200 E34C                  		bhi.w	DeleteObject
00011130 4E75                       		rts
00011132                            
00011132                            
00011132                            Map_LTag:	include	"_maps\Lava Tag.asm"
00011132                            ; ---------------------------------------------------------------------------
00011132                            ; Sprite mappings - invisible lava tag (MZ)
00011132                            ; ---------------------------------------------------------------------------
00011132                            Map_LTag_internal:
00011132 0000                       		dc.w @0-Map_LTag_internal
00011134 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011136 00                         		even
00011136 00                         		even
00011136                            		include	"_anim\Lava Geyser.asm"
00011136                            ; ---------------------------------------------------------------------------
00011136                            ; Animation script - geyser of lava (MZ)
00011136                            ; ---------------------------------------------------------------------------
00011136 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011138 0000                       		dc.w @bubble2-Ani_Geyser
0001113A 0000                       		dc.w @end-Ani_Geyser
0001113C 0000                       		dc.w @bubble3-Ani_Geyser
0001113E 0000                       		dc.w @blank-Ani_Geyser
00011140 0000                       		dc.w @bubble4-Ani_Geyser
00011142 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
0001114C 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011150 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011154 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
0001115C 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011160 00                         		even
00011160 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011164                            		even
00011164                            		even
00011164                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011164                            ; ---------------------------------------------------------------------------
00011164                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011164                            ; ---------------------------------------------------------------------------
00011164                            Map_Geyser_internal:
00011164 0000                       		dc.w @bubble1-Map_Geyser_internal
00011166 0000                       		dc.w @bubble2-Map_Geyser_internal
00011168 0000                       		dc.w @bubble3-Map_Geyser_internal
0001116A 0000                       		dc.w @bubble4-Map_Geyser_internal
0001116C 0000                       		dc.w @bubble5-Map_Geyser_internal
0001116E 0000                       		dc.w @bubble6-Map_Geyser_internal
00011170 0000                       		dc.w @end1-Map_Geyser_internal
00011172 0000                       		dc.w @end2-Map_Geyser_internal
00011174 0000                       		dc.w @medcolumn1-Map_Geyser_internal
00011176 0000                       		dc.w @medcolumn2-Map_Geyser_internal
00011178 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0001117A 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
0001117C 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
0001117E 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011180 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011182 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011184 0000                       		dc.w @longcolumn3-Map_Geyser_internal
00011186 0000                       		dc.w @bubble7-Map_Geyser_internal
00011188 0000                       		dc.w @bubble8-Map_Geyser_internal
0001118A 0000                       		dc.w @blank-Map_Geyser_internal
0001118C 02                         @bubble1:	dc.b 2
0001118D EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011192 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00011197 02                         @bubble2:	dc.b 2
00011198 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0001119D EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000111A2 04                         @bubble3:	dc.b 4
000111A3 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000111A8 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000111AD F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000111B2 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000111B7 04                         @bubble4:	dc.b 4
000111B8 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000111BD F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000111C2 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000111C7 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000111CC 06                         @bubble5:	dc.b 6
000111CD EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000111D2 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000111D7 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000111DC EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000111E1 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000111E6 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000111EB 06                         @bubble6:	dc.b 6
000111EC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000111F1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000111F6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000111FB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011200 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00011205 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001120A 02                         @end1:		dc.b 2
0001120B E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011210 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011215 02                         @end2:		dc.b 2
00011216 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001121B E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011220 0A                         @medcolumn1:	dc.b $A
00011221 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011226 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001122B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011230 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011235 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001123A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001123F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011244 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011249 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001124E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011253 0A                         @medcolumn2:	dc.b $A
00011254 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011259 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001125E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011263 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011268 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001126D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011272 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011277 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001127C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011281 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011286 0A                         @medcolumn3:	dc.b $A
00011287 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001128C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011291 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011296 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001129B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000112A0 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000112A5 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000112AA F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000112AF 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000112B4 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000112B9 06                         @shortcolumn1:	dc.b 6
000112BA 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000112BF 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000112C4 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000112C9 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000112CE D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000112D3 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000112D8 06                         @shortcolumn2:	dc.b 6
000112D9 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000112DE 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000112E3 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000112E8 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000112ED D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000112F2 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000112F7 06                         @shortcolumn3:	dc.b 6
000112F8 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000112FD 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011302 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011307 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001130C D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011311 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011316 10                         @longcolumn1:	dc.b $10
00011317 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001131C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011321 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011326 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001132B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011330 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011335 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001133A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001133F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011344 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011349 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0001134E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011353 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00011358 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001135D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011362 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00011367 10                         @longcolumn2:	dc.b $10
00011368 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001136D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011372 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011377 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001137C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011381 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011386 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001138B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011390 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011395 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001139A 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0001139F 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000113A4 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000113A9 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000113AE 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000113B3 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000113B8 10                         @longcolumn3:	dc.b $10
000113B9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000113BE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000113C3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000113C8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000113CD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000113D2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000113D7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000113DC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000113E1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000113E6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000113EB 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000113F0 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000113F5 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000113FA 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000113FF 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011404 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00011409 06                         @bubble7:	dc.b 6
0001140A E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0001140F E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011414 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011419 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0001141E D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011423 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011428 06                         @bubble8:	dc.b 6
00011429 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0001142E E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011433 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00011438 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001143D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011442 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011447 00                         @blank:	dc.b 0
00011448                            		even
00011448                            		even
00011448                            
00011448                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011448                            ; ---------------------------------------------------------------------------
00011448                            ; Object 40 - Moto Bug enemy (GHZ)
00011448                            ; ---------------------------------------------------------------------------
00011448                            
00011448                            MotoBug:
00011448 7000                       		moveq	#0,d0
0001144A 1028 0024                  		move.b	obRoutine(a0),d0
0001144E 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011452 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011456                            ; ===========================================================================
00011456 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011458 0000                       		dc.w Moto_Action-Moto_Index
0001145A 0000                       		dc.w Moto_Animate-Moto_Index
0001145C 0000                       		dc.w Moto_Delete-Moto_Index
0001145E                            ; ===========================================================================
0001145E                            
0001145E                            Moto_Main:	; Routine 0
0001145E 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011466 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001146C 117C 0004 0001             		move.b	#4,obRender(a0)
00011472 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011478 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001147E 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011482 6600                       		bne.s	@smoke		; if yes, branch
00011484 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001148A 117C 0008 0017             		move.b	#8,obWidth(a0)
00011490 117C 000C 0020             		move.b	#$C,obColType(a0)
00011496 6100 DF56                  		bsr.w	ObjectFall
0001149A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000114A0 4A41                       		tst.w	d1
000114A2 6A00                       		bpl.s	@notonfloor
000114A4 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000114A8 317C 0000 0012             		move.w	#0,obVelY(a0)
000114AE 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000114B2 0868 0000 0022             		bchg	#0,obStatus(a0)
000114B8                            
000114B8                            	@notonfloor:
000114B8 4E75                       		rts	
000114BA                            ; ===========================================================================
000114BA                            
000114BA                            @smoke:
000114BA 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000114BE 6000 0000                  		bra.w	Moto_Animate
000114C2                            ; ===========================================================================
000114C2                            
000114C2                            Moto_Action:	; Routine 2
000114C2 7000                       		moveq	#0,d0
000114C4 1028 0025                  		move.b	ob2ndRout(a0),d0
000114C8 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000114CC 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000114D0 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000114D6 6100 B01C                  		bsr.w	AnimateSprite
000114DA                            
000114DA                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000114DA                            ; ---------------------------------------------------------------------------
000114DA                            ; Subroutine to remember whether an object is destroyed/collected
000114DA                            ; ---------------------------------------------------------------------------
000114DA                            
000114DA                            RememberState:
000114F8 6000 DF40                  		bra.w	DisplaySprite
000114FC                            
000114FC                            	@offscreen:
000114FC 45F8 FC00                  		lea	(v_objstate).w,a2
00011500 7000                       		moveq	#0,d0
00011502 1028 0023                  		move.b	obRespawnNo(a0),d0
00011506 6700                       		beq.s	@delete
00011508 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001150E                            
0001150E                            	@delete:
0001150E 6000 DF6A                  		bra.w	DeleteObject
0001150E 6000 DF6A                  		bra.w	DeleteObject
00011512                            
00011512                            ; ===========================================================================
00011512 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011514 0000                       		dc.w @findfloor-Moto_ActIndex
00011516                            
00011516 =00000030                  @time:		equ $30
00011516 =00000033                  @smokedelay:	equ $33
00011516                            ; ===========================================================================
00011516                            
00011516                            @move:
00011516 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
0001151A 6A00                       		bpl.s	@wait		; if time remains, branch
0001151C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011520 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011526 117C 0001 001C             		move.b	#1,obAnim(a0)
0001152C 0868 0000 0022             		bchg	#0,obStatus(a0)
00011532 6600                       		bne.s	@wait
00011534 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011538                            
00011538                            	@wait:
00011538 4E75                       		rts	
0001153A                            ; ===========================================================================
0001153A                            
0001153A                            @findfloor:
0001153A 6100 DEEA                  		bsr.w	SpeedToPos
0001153E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011544 0C41 FFF8                  		cmpi.w	#-8,d1
00011548 6D00                       		blt.s	@pause
0001154A 0C41 000C                  		cmpi.w	#$C,d1
0001154E 6C00                       		bge.s	@pause
00011550 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011554 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011558 6A00                       		bpl.s	@nosmoke
0001155A 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011560 6100 E472                  		bsr.w	FindFreeObj
00011564 6600                       		bne.s	@nosmoke
00011566 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0001156A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011570 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011576 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001157C 137C 0002 001C             		move.b	#2,obAnim(a1)
00011582                            
00011582                            	@nosmoke:
00011582 4E75                       		rts	
00011584                            
00011584                            @pause:
00011584 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011588 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
0001158E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011594 117C 0000 001C             		move.b	#0,obAnim(a0)
0001159A 4E75                       		rts	
0001159C                            ; ===========================================================================
0001159C                            
0001159C                            Moto_Animate:	; Routine 4
0001159C 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000115A2 6100 AF50                  		bsr.w	AnimateSprite
000115A6 6000 DE92                  		bra.w	DisplaySprite
000115AA                            ; ===========================================================================
000115AA                            
000115AA                            Moto_Delete:	; Routine 6
000115AA 6000 DECE                  		bra.w	DeleteObject
000115AA 6000 DECE                  		bra.w	DeleteObject
000115AE                            		include	"_anim\Moto Bug.asm"
000115AE                            ; ---------------------------------------------------------------------------
000115AE                            ; Animation script - Motobug enemy
000115AE                            ; ---------------------------------------------------------------------------
000115AE 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000115B0 0000                       		dc.w @walk-Ani_Moto
000115B2 0000                       		dc.w @smoke-Ani_Moto
000115B4                            
000115B4 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000115B8 00                         		even
000115B8 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000115BE 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000115CC 00                         		even
000115CC 00                         		even
000115CC                            Map_Moto:	include	"_maps\Moto Bug.asm"
000115CC                            ; --------------------------------------------------------------------------------
000115CC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000115CC                            ; --------------------------------------------------------------------------------
000115CC                            
000115CC                            SME_TTY9T:	
000115CC 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000115D0 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000115D4 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000115D8 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000115DA 04                         SME_TTY9T_E:	dc.b 4	
000115DB F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000115E0 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000115E5 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000115EA 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
000115EF 04                         SME_TTY9T_23:	dc.b 4	
000115F0 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
000115F5 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
000115FA F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
000115FF 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011604 05                         SME_TTY9T_38:	dc.b 5	
00011605 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
0001160A 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
0001160F F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011614 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011619 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
0001161E 01                         SME_TTY9T_52:	dc.b 1	
0001161F FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011624 01                         SME_TTY9T_58:	dc.b 1	
00011625 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
0001162A 01                         SME_TTY9T_5E:	dc.b 1	
0001162B FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011630 00                         SME_TTY9T_64:	dc.b 0	
00011632 00                         		even
00011632 00                         		even
00011632                            		include	"_incObj\4F.asm"
00011632                            ; ---------------------------------------------------------------------------
00011632                            ; Object 4F - Splats
00011632                            ; ---------------------------------------------------------------------------
00011632                            
00011632                            Obj4F:
00011632 7000                                       moveq   #0,d0
00011634 1028 0024                                  move.b  $24(a0),d0
00011638 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
0001163C 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011640                            ; ---------------------------------------------------------------------------
00011640 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011642 0000                                       dc.w loc_D246-ObjSplats_Index
00011644 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011646 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011648                            ; ---------------------------------------------------------------------------
00011648                            
00011648                            ObjSplats_Init:
00011648 5428 0024                                  addq.b  #2,$24(a0)
0001164C 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011654 317C 24E4 0002                             move.w  #$24E4,2(a0)
0001165A 117C 0004 0001                             move.b  #4,1(a0)
00011660 117C 0004 0014                             move.b  #4,obActWid(a0)
00011666 317C 0200 0018             				move.w	#$200,obPriority(a0)
0001166C 117C 0014 0016                             move.b  #$14,$16(a0)
00011672 117C 0002 0020                             move.b  #2,$20(a0)
00011678 4A28 0028                                  tst.b   $28(a0)
0001167C 6700                                       beq.s   loc_D246
0001167E 343C 0300                                  move.w  #$300,d2
00011682 6000                                       bra.s   ObjSplats_FaceRight
00011684                            ; ---------------------------------------------------------------------------
00011684                            
00011684                            loc_D246:
00011684 343C 00E0                                  move.w  #$E0,d2
00011688                            
00011688                            ObjSplats_FaceRight:
00011688 323C 0100                                  move.w  #$100,d1
0001168C 08E8 0000 0001                             bset    #0,1(a0)
00011692 3038 D008                                  move.w  ($FFFFD008).w,d0
00011696 9068 0008                                  sub.w   8(a0),d0
0001169A 6400                                       bcc.s   ObjSplats_Move
0001169C 4440                                       neg.w   d0
0001169E 4441                                       neg.w   d1
000116A0 08A8 0000 0001                             bclr    #0,1(a0)
000116A6                            
000116A6                            ObjSplats_Move:
000116A6 B042                                       cmp.w   d2,d0
000116A8 6400                                       bcc.s   ObjSplats_Bounce
000116AA 3141 0010                                  move.w  d1,$10(a0)
000116AE 5428 0024                                  addq.b  #2,$24(a0)
000116B2                            
000116B2                            ObjSplats_Bounce:
000116B2 6100 DD3A                                  bsr.w   ObjectFall
000116B6 117C 0001 001A                             move.b  #1,$1A(a0)
000116BC 4A68 0012                                  tst.w   $12(a0)
000116C0 6B00                                       bmi.s   ObjSplats_Turn
000116C2 117C 0000 001A                             move.b  #0,$1A(a0)
000116C8 6100 0000                                  bsr.w   ObjFloorDist
000116CC 4A41                                       tst.w   d1
000116CE 6A00                                       bpl.s   ObjSplats_Turn
000116D0 3011                                       move.w  (a1),d0
000116D2 0240 03FF                                  andi.w  #$3FF,d0
000116D6 0C40 02D2                                  cmpi.w  #$2D2,d0
000116DA 6500                                       bcs.s   ObjSplats_Fall
000116DC 5428 0024                                  addq.b  #2,$24(a0)
000116E0 6000                                       bra.s   ObjSplats_Turn
000116E2                            ; ---------------------------------------------------------------------------
000116E2                            
000116E2                            ObjSplats_Fall:
000116E2 D368 000C                                  add.w   d1,$C(a0)
000116E6 317C FC00 0012                             move.w  #$FC00,$12(a0)
000116EC                            
000116EC                            ObjSplats_Turn:
000116EC 6100 0000                                  bsr.w   Yad_ChkWall
000116F0 6700                                       beq.s   loc_D2C4
000116F2 4468 0010                                  neg.w   $10(a0)
000116F6 0868 0000 0001                             bchg    #0,1(a0)
000116FC 0868 0000 0022                             bchg    #0,$22(a0)
00011702                            
00011702                            loc_D2C4:
00011702 6000 FDD6                                  bra.w   RememberState
00011706                            ; ---------------------------------------------------------------------------
00011706                            
00011706                            loc_D2C8:
00011706 6100 DCE6                                  bsr.w   ObjectFall
0001170A 6100 DD2E                                  bsr.w   DisplaySprite
0001170E 4A28 0001                                  tst.b   1(a0)
00011712 6A00 DD66                                  bpl.w   DeleteObject
00011716 4E75                                       rts
00011716 4E75                                       rts
00011718                            Map_Splats:	include	"_maps\Splats.asm"
00011718 0000                       Map_Splats_internal:     dc.w unk_D310-*
0001171A 0000                                       dc.w unk_D31B-Map_Splats_internal
0001171C 02                         unk_D310:       dc.b   2
0001171D EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011727 02                         unk_D31B:       dc.b   2
00011728 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011728 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011732                            
00011732                            		include	"_incObj\50 Yadrin.asm"
00011732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011732                            
00011732                            
00011732                            Yad_ChkWall:
00011732 3038 FE04                  		move.w	(v_framecount).w,d0
00011736 D047                       		add.w	d7,d0
00011738 0240 0003                  		andi.w	#3,d0
0001173C 6600                       		bne.s	loc_F836
0001173E 7600                       		moveq	#0,d3
00011740 1628 0014                  		move.b	obActWid(a0),d3
00011744 4A68 0010                  		tst.w	obVelX(a0)
00011748 6B00                       		bmi.s	loc_F82C
0001174A 6100 0000                  		bsr.w	ObjHitWallRight
0001174E 4A41                       		tst.w	d1
00011750 6A00                       		bpl.s	loc_F836
00011752                            
00011752                            loc_F828:
00011752 7001                       		moveq	#1,d0
00011754 4E75                       		rts	
00011756                            ; ===========================================================================
00011756                            
00011756                            loc_F82C:
00011756 4643                       		not.w	d3
00011758 6100 0000                  		bsr.w	ObjHitWallLeft
0001175C 4A41                       		tst.w	d1
0001175E 6BF2                       		bmi.s	loc_F828
00011760                            
00011760                            loc_F836:
00011760 7000                       		moveq	#0,d0
00011762 4E75                       		rts	
00011764                            ; End of function Yad_ChkWall
00011764                            
00011764                            ; ===========================================================================
00011764                            ; ---------------------------------------------------------------------------
00011764                            ; Object 50 - Yadrin enemy (SYZ)
00011764                            ; ---------------------------------------------------------------------------
00011764                            
00011764                            Yadrin:
00011764 7000                       		moveq	#0,d0
00011766 1028 0024                  		move.b	obRoutine(a0),d0
0001176A 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
0001176E 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011772                            ; ===========================================================================
00011772 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011774 0000                       		dc.w Yad_Action-Yad_Index
00011776                            
00011776 =00000030                  yad_timedelay:	equ $30
00011776                            ; ===========================================================================
00011776                            
00011776                            Yad_Main:	; Routine 0
00011776 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
0001177E 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011784 117C 0004 0001             		move.b	#4,obRender(a0)
0001178A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011790 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011796 117C 0011 0016             		move.b	#$11,obHeight(a0)
0001179C 117C 0008 0017             		move.b	#8,obWidth(a0)
000117A2 117C 00CC 0020             		move.b	#$CC,obColType(a0)
000117A8 6100 DC44                  		bsr.w	ObjectFall
000117AC 6100 0000                  		bsr.w	ObjFloorDist
000117B0 4A41                       		tst.w	d1
000117B2 6A00                       		bpl.s	locret_F89E
000117B4 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000117B8 317C 0000 0012             		move.w	#0,obVelY(a0)
000117BE 5428 0024                  		addq.b	#2,obRoutine(a0)
000117C2 0868 0000 0022             		bchg	#0,obStatus(a0)
000117C8                            
000117C8                            	locret_F89E:
000117C8 4E75                       		rts	
000117CA                            ; ===========================================================================
000117CA                            
000117CA                            Yad_Action:	; Routine 2
000117CA 7000                       		moveq	#0,d0
000117CC 1028 0025                  		move.b	ob2ndRout(a0),d0
000117D0 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
000117D4 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
000117D8 43F9 0000 0000             		lea	(Ani_Yad).l,a1
000117DE 6100 AD14                  		bsr.w	AnimateSprite
000117E2 6000 FCF6                  		bra.w	RememberState
000117E6                            ; ===========================================================================
000117E6 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
000117E8 0000                       		dc.w Yad_FixToFloor-Yad_Index2
000117EA                            ; ===========================================================================
000117EA                            
000117EA                            Yad_Move:
000117EA 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
000117EE 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000117F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000117F4 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
000117FA 117C 0001 001C             		move.b	#1,obAnim(a0)
00011800 0868 0000 0022             		bchg	#0,obStatus(a0)
00011806 6600                       		bne.s	locret_F8E2
00011808 4468 0010                  		neg.w	obVelX(a0)	; change direction
0001180C                            
0001180C                            	locret_F8E2:
0001180C 4E75                       		rts	
0001180E                            ; ===========================================================================
0001180E                            
0001180E                            Yad_FixToFloor:
0001180E 6100 DC16                  		bsr.w	SpeedToPos
00011812 6100 0000                  		bsr.w	ObjFloorDist
00011816 0C41 FFF8                  		cmpi.w	#-8,d1
0001181A 6D00                       		blt.s	Yad_Pause
0001181C 0C41 000C                  		cmpi.w	#$C,d1
00011820 6C00                       		bge.s	Yad_Pause
00011822 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011826 6100 FF0A                  		bsr.w	Yad_ChkWall
0001182A 6600                       		bne.s	Yad_Pause
0001182C 4E75                       		rts	
0001182E                            ; ===========================================================================
0001182E                            
0001182E                            Yad_Pause:
0001182E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011832 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011838 317C 0000 0010             		move.w	#0,obVelX(a0)
0001183E 117C 0000 001C             		move.b	#0,obAnim(a0)
00011844 4E75                       		rts	
00011844 4E75                       		rts	
00011846                            		include	"_anim\Yadrin.asm"
00011846                            ; ---------------------------------------------------------------------------
00011846                            ; Animation script - Yadrin enemy
00011846                            ; ---------------------------------------------------------------------------
00011846 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011848 0000                       		dc.w @walk-Ani_Yad
0001184A                            
0001184A 0800 FF                    @stand:		dc.b 8,	0, afEnd
0001184E 00                         		even
0001184E 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
0001185C                            		even
0001185C                            		even
0001185C                            Map_Yad:	include	"_maps\Yadrin.asm"
0001185C                            ; --------------------------------------------------------------------------------
0001185C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001185C                            ; --------------------------------------------------------------------------------
0001185C                            
0001185C                            SME_4WhIu:	
0001185C 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011860 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011864 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011868 09                         SME_4WhIu_C:	dc.b 9	
00011869 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
0001186E EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011873 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011878 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
0001187D FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011882 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011887 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
0001188C F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011891 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011896 09                         SME_4WhIu_3A:	dc.b 9	
00011897 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
0001189C FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
000118A1 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
000118A6 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
000118AB FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
000118B0 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
000118B5 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
000118BA EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
000118BF EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
000118C4 0C                         SME_4WhIu_68:	dc.b $C	
000118C5 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
000118CA FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
000118CF FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
000118D4 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
000118D9 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
000118DE F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
000118E3 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
000118E8 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
000118ED FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
000118F2 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
000118F7 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
000118FC 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011901 0C                         SME_4WhIu_A5:	dc.b $C	
00011902 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011907 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
0001190C FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011911 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011916 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
0001191B F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011920 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011925 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
0001192A FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
0001192F FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011934 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011939 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
0001193E 05                         SME_4WhIu_E2:	dc.b 5	
0001193F F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011944 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011949 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
0001194E F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011953 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011958 05                         SME_4WhIu_FC:	dc.b 5	
00011959 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
0001195E 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011963 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011968 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
0001196D 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011972                            		even
00011972                            		even
00011972                            
00011972                            		include	"_incObj\sub SolidObject.asm"
00011972                            ; ---------------------------------------------------------------------------
00011972                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011972                            ;
00011972                            ; input:
00011972                            ;	d1 = width
00011972                            ;	d2 = height / 2 (when jumping)
00011972                            ;	d3 = height / 2 (when walking)
00011972                            ;	d4 = x-axis position
00011972                            ; ---------------------------------------------------------------------------
00011972                            
00011972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011972                            
00011972                            
00011972                            SolidObject:
00011972 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011976 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
0001197A 3401                       		move.w	d1,d2
0001197C D442                       		add.w	d2,d2
0001197E 43F8 D000                  		lea	(v_player).w,a1
00011982 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011988 6600                       		bne.s	@leave		; if yes, branch
0001198A 3029 0008                  		move.w	obX(a1),d0
0001198E 9068 0008                  		sub.w	obX(a0),d0
00011992 D041                       		add.w	d1,d0
00011994 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011996 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011998 6500                       		bcs.s	@stand		; if not, branch
0001199A                            
0001199A                            	@leave:
0001199A 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
000119A0 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
000119A6 4228 0025                  		clr.b	obSolid(a0)
000119AA 7800                       		moveq	#0,d4
000119AC 4E75                       		rts	
000119AE                            
000119AE                            	@stand:
000119AE 3404                       		move.w	d4,d2
000119B0 4EB9 0000 91CA             		jsr	MvSonicOnPtfm
000119B6 7800                       		moveq	#0,d4
000119B8 4E75                       		rts	
000119BA                            ; ===========================================================================
000119BA                            
000119BA                            SolidObject71:
000119BA 4A28 0025                  		tst.b	obSolid(a0)
000119BE 6700 0000                  		beq.w	loc_FAD0
000119C2 3401                       		move.w	d1,d2
000119C4 D442                       		add.w	d2,d2
000119C6 43F8 D000                  		lea	(v_player).w,a1
000119CA 0829 0001 0022             		btst	#1,obStatus(a1)
000119D0 6600                       		bne.s	@leave
000119D2 3029 0008                  		move.w	obX(a1),d0
000119D6 9068 0008                  		sub.w	obX(a0),d0
000119DA D041                       		add.w	d1,d0
000119DC 6B00                       		bmi.s	@leave
000119DE B042                       		cmp.w	d2,d0
000119E0 6500                       		bcs.s	@stand
000119E2                            
000119E2                            	@leave:
000119E2 08A9 0003 0022             		bclr	#3,obStatus(a1)
000119E8 08A8 0003 0022             		bclr	#3,obStatus(a0)
000119EE 4228 0025                  		clr.b	obSolid(a0)
000119F2 7800                       		moveq	#0,d4
000119F4 4E75                       		rts	
000119F6                            
000119F6                            	@stand:
000119F6 3404                       		move.w	d4,d2
000119F8 4EB9 0000 91CA             		jsr	MvSonicOnPtfm
000119FE 7800                       		moveq	#0,d4
00011A00 4E75                       		rts	
00011A02                            ; ===========================================================================
00011A02                            
00011A02                            SolidObject2F:
00011A02 43F8 D000                  		lea	(v_player).w,a1
00011A06 4A28 0001                  		tst.b	obRender(a0)
00011A0A 6A00 0000                  		bpl.w	Solid_Ignore
00011A0E 3029 0008                  		move.w	obX(a1),d0
00011A12 9068 0008                  		sub.w	obX(a0),d0
00011A16 D041                       		add.w	d1,d0
00011A18 6B00 0000                  		bmi.w	Solid_Ignore
00011A1C 3601                       		move.w	d1,d3
00011A1E D643                       		add.w	d3,d3
00011A20 B043                       		cmp.w	d3,d0
00011A22 6200 0000                  		bhi.w	Solid_Ignore
00011A26 3A00                       		move.w	d0,d5
00011A28 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011A2E 6700                       		beq.s	@notflipped	; if not, branch
00011A30 4645                       		not.w	d5
00011A32 DA43                       		add.w	d3,d5
00011A34                            
00011A34                            	@notflipped:
00011A34 E24D                       		lsr.w	#1,d5
00011A36 7600                       		moveq	#0,d3
00011A38 1632 5000                  		move.b	(a2,d5.w),d3
00011A3C 9612                       		sub.b	(a2),d3
00011A3E 3A28 000C                  		move.w	obY(a0),d5
00011A42 9A43                       		sub.w	d3,d5
00011A44 1629 0016                  		move.b	obHeight(a1),d3
00011A48 4883                       		ext.w	d3
00011A4A D443                       		add.w	d3,d2
00011A4C 3629 000C                  		move.w	obY(a1),d3
00011A50 9645                       		sub.w	d5,d3
00011A52 5843                       		addq.w	#4,d3
00011A54 D642                       		add.w	d2,d3
00011A56 6B00 0000                  		bmi.w	Solid_Ignore
00011A5A 3802                       		move.w	d2,d4
00011A5C D844                       		add.w	d4,d4
00011A5E B644                       		cmp.w	d4,d3
00011A60 6400 0000                  		bcc.w	Solid_Ignore
00011A64 6000 0000                  		bra.w	loc_FB0E
00011A68                            ; ===========================================================================
00011A68                            
00011A68                            Solid_ChkEnter:
00011A68 4A28 0001                  		tst.b	obRender(a0)
00011A6C 6A00 0000                  		bpl.w	Solid_Ignore
00011A70                            
00011A70                            loc_FAD0:
00011A70 43F8 D000                  		lea	(v_player).w,a1
00011A74 3029 0008                  		move.w	obX(a1),d0
00011A78 9068 0008                  		sub.w	obX(a0),d0
00011A7C D041                       		add.w	d1,d0
00011A7E 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011A82 3601                       		move.w	d1,d3
00011A84 D643                       		add.w	d3,d3
00011A86 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011A88 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011A8C 1629 0016                  		move.b	obHeight(a1),d3
00011A90 4883                       		ext.w	d3
00011A92 D443                       		add.w	d3,d2
00011A94 3629 000C                  		move.w	obY(a1),d3
00011A98 9668 000C                  		sub.w	obY(a0),d3
00011A9C 5843                       		addq.w	#4,d3
00011A9E D642                       		add.w	d2,d3
00011AA0 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011AA4 3802                       		move.w	d2,d4
00011AA6 D844                       		add.w	d4,d4
00011AA8 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011AAA 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011AAE                            
00011AAE                            loc_FB0E:
00011AAE 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011AB2 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011AB6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011ABC 6400 0000                  			bcc.w	Solid_Debug
00011AC0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011AC4 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011AC8 3A00                       		move.w	d0,d5
00011ACA B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011ACC 6400                       		bcc.s	@isright	; if yes, branch
00011ACE D241                       		add.w	d1,d1
00011AD0 9041                       		sub.w	d1,d0
00011AD2 3A00                       		move.w	d0,d5
00011AD4 4445                       		neg.w	d5
00011AD6                            
00011AD6                            	@isright:
00011AD6 3203                       		move.w	d3,d1
00011AD8 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011ADA 6400                       		bcc.s	@isbelow	; if yes, branch
00011ADC                            
00011ADC 5943                       		subq.w	#4,d3
00011ADE 9644                       		sub.w	d4,d3
00011AE0 3203                       		move.w	d3,d1
00011AE2 4441                       		neg.w	d1
00011AE4                            
00011AE4                            	@isbelow:
00011AE4 BA41                       		cmp.w	d1,d5
00011AE6 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011AEA 0C41 0004                  		cmpi.w	#4,d1
00011AEE 6300                       		bls.s	Solid_SideAir
00011AF0 4A40                       		tst.w	d0		; where is Sonic?
00011AF2 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011AF4 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011AF6 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011AFA 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011AFC 6000                       		bra.s	Solid_Left
00011AFE                            ; ===========================================================================
00011AFE                            
00011AFE                            Solid_Right:
00011AFE 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011B02 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011B04                            
00011B04                            Solid_Left:
00011B04 337C 0000 0020             		move.w	#0,obInertia(a1)
00011B0A 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011B10                            
00011B10                            Solid_Centre:
00011B10 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011B14 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B1A 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011B1C 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011B22 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011B28 7801                       		moveq	#1,d4		; return side collision
00011B2A 4E75                       		rts	
00011B2C                            ; ===========================================================================
00011B2C                            
00011B2C                            Solid_SideAir:
00011B2C 6100                       		bsr.s	Solid_NotPushing
00011B2E 7801                       		moveq	#1,d4		; return side collision
00011B30 4E75                       		rts	
00011B32                            ; ===========================================================================
00011B32                            
00011B32                            Solid_Ignore:
00011B32 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011B38 6700                       		beq.s	Solid_Debug	; if not, branch
00011B3A 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011B40 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B42 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011B48 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B4A 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011B50 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B52 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011B58                            
00011B58                            
00011B58                            Solid_NotPushing:
00011B58 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011B5E 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011B64                            
00011B64                            Solid_Debug:
00011B64 7800                       		moveq	#0,d4		; return no collision
00011B66 4E75                       		rts	
00011B68                            ; ===========================================================================
00011B68                            
00011B68                            Solid_TopBottom:
00011B68 4A43                       		tst.w	d3		; is Sonic below the object?
00011B6A 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011B6C 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011B70 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011B72 60BE                       		bra.s	Solid_Ignore
00011B74                            ; ===========================================================================
00011B74                            
00011B74                            Solid_Below:
00011B74 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011B78 6700                       		beq.s	Solid_Squash	; if not, branch
00011B7A 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011B7C 4A43                       		tst.w	d3		; is Sonic above the object?
00011B7E 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011B80 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011B84 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011B8A                            
00011B8A                            Solid_TopBtmAir:
00011B8A 78FF                       		moveq	#-1,d4
00011B8C 4E75                       		rts	
00011B8E                            ; ===========================================================================
00011B8E                            
00011B8E                            Solid_Squash:
00011B8E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B94 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011B96 2F08                       		move.l	a0,-(sp)
00011B98 2049                       		movea.l	a1,a0
00011B9A 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011BA0 205F                       		movea.l	(sp)+,a0
00011BA2 78FF                       		moveq	#-1,d4
00011BA4 4E75                       		rts	
00011BA6                            ; ===========================================================================
00011BA6                            
00011BA6                            Solid_Landed:
00011BA6 5943                       		subq.w	#4,d3
00011BA8 7200                       		moveq	#0,d1
00011BAA 1228 0014                  		move.b	obActWid(a0),d1
00011BAE 3401                       		move.w	d1,d2
00011BB0 D442                       		add.w	d2,d2
00011BB2 D269 0008                  		add.w	obX(a1),d1
00011BB6 9268 0008                  		sub.w	obX(a0),d1
00011BBA 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011BBC B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011BBE 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011BC0 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011BC4 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011BC6 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011BCA 5369 000C                  		subq.w	#1,obY(a1)
00011BCE 6100                       		bsr.s	Solid_ResetFloor
00011BD0 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011BD6 08E8 0003 0022             		bset	#3,obStatus(a0)
00011BDC 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011BDE 4E75                       		rts	
00011BE0                            ; ===========================================================================
00011BE0                            
00011BE0                            Solid_Miss:
00011BE0 7800                       		moveq	#0,d4
00011BE2 4E75                       		rts	
00011BE4                            ; End of function SolidObject
00011BE4                            
00011BE4                            
00011BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011BE4                            
00011BE4                            
00011BE4                            Solid_ResetFloor:
00011BE4 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011BEA 6700                       		beq.s	@notonobj	; if not, branch
00011BEC                            
00011BEC 7000                       		moveq	#0,d0
00011BEE 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011BF2 ED48                       		lsl.w	#6,d0
00011BF4 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011BFA 2440                       		movea.l	d0,a2
00011BFC 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011C02 422A 0025                  		clr.b	obSolid(a2)
00011C06                            
00011C06                            	@notonobj:
00011C06 3008                       		move.w	a0,d0
00011C08 0440 D000                  		subi.w	#$D000,d0
00011C0C EC48                       		lsr.w	#6,d0
00011C0E 0240 007F                  		andi.w	#$7F,d0
00011C12 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011C16 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011C1C 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011C22 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011C28 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011C2E 6700                       		beq.s	@notinair	; if not, branch
00011C30 2F08                       		move.l	a0,-(sp)
00011C32 2049                       		movea.l	a1,a0
00011C34 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011C3A 205F                       		movea.l	(sp)+,a0
00011C3C                            
00011C3C                            	@notinair:
00011C3C 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011C42 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011C48 4E75                       		rts	
00011C4A                            ; End of function Solid_ResetFloor
00011C4A                            ; End of function Solid_ResetFloor
00011C4A                            
00011C4A                            		include	"_incObj\51 Smashable Green Block.asm"
00011C4A                            ; ---------------------------------------------------------------------------
00011C4A                            ; Object 51 - smashable	green block (MZ)
00011C4A                            ; ---------------------------------------------------------------------------
00011C4A                            
00011C4A                            SmashBlock:
00011C4A 7000                       		moveq	#0,d0
00011C4C 1028 0024                  		move.b	obRoutine(a0),d0
00011C50 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011C54 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011C58 6000 F880                  		bra.w	RememberState
00011C5C                            ; ===========================================================================
00011C5C 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011C5E 0000                       		dc.w Smab_Solid-Smab_Index
00011C60 0000                       		dc.w Smab_Points-Smab_Index
00011C62                            ; ===========================================================================
00011C62                            
00011C62                            Smab_Main:	; Routine 0
00011C62 5428 0024                  		addq.b	#2,obRoutine(a0)
00011C66 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011C6E 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011C74 117C 0004 0001             		move.b	#4,obRender(a0)
00011C7A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011C80 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011C86 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011C8C                            
00011C8C                            Smab_Solid:	; Routine 2
00011C8C                            
00011C8C =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011C8C =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011C8C                            
00011C8C 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011C92 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011C98 323C 001B                  		move.w	#$1B,d1
00011C9C 343C 0010                  		move.w	#$10,d2
00011CA0 363C 0011                  		move.w	#$11,d3
00011CA4 3828 0008                  		move.w	obX(a0),d4
00011CA8 6100 FCC8                  		bsr.w	SolidObject
00011CAC 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011CB2 6600                       		bne.s	@smash		; if yes, branch
00011CB4                            
00011CB4                            	@notspinning:
00011CB4 4E75                       		rts	
00011CB6                            ; ===========================================================================
00011CB6                            
00011CB6                            @smash:
00011CB6 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011CBC 66F6                       		bne.s	@notspinning	; if not, branch
00011CBE 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011CC4 08E9 0002 0022             		bset	#2,obStatus(a1)
00011CCA 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011CD0 137C 0007 0017             		move.b	#7,obWidth(a1)
00011CD6 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011CDC 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011CE2 08E9 0001 0022             		bset	#1,obStatus(a1)
00011CE8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011CEE 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011CF4 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011CFA 4228 0025                  		clr.b	obSolid(a0)
00011CFE 117C 0001 001A             		move.b	#1,obFrame(a0)
00011D04 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011D0A 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011D0C 343C 0038                  		move.w	#$38,d2
00011D10 6100 D2DC                  		bsr.w	SmashObject
00011D14 6100 DCBE                  		bsr.w	FindFreeObj
00011D18 6600                       		bne.s	Smab_Points
00011D1A 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011D1E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011D24 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011D2A 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011D2E 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011D32 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011D36 6500                       		bcs.s	@bonus		; if yes, branch
00011D38 7406                       		moveq	#6,d2		; set cap for points
00011D3A                            
00011D3A                            	@bonus:
00011D3A 7000                       		moveq	#0,d0
00011D3C 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011D40 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011D46 6500                       		bcs.s	@givepoints	; if not, branch
00011D48 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011D4C 740A                       		moveq	#10,d2
00011D4E                            
00011D4E                            	@givepoints:
00011D4E 4EB9 0000 0000             		jsr	(AddPoints).l
00011D54 E24A                       		lsr.w	#1,d2
00011D56 1342 001A                  		move.b	d2,obFrame(a1)
00011D5A                            
00011D5A                            Smab_Points:	; Routine 4
00011D5A 6100 D6CA                  		bsr.w	SpeedToPos
00011D5E 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011D64 6100 D6D4                  		bsr.w	DisplaySprite
00011D68 4A28 0001                  		tst.b	obRender(a0)
00011D6C 6A00 D70C                  		bpl.w	DeleteObject
00011D70 4E75                       		rts	
00011D72                            ; ===========================================================================
00011D72 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011D76 FF00 FF00                  		dc.w -$100, -$100
00011D7A 0200 FE00                  		dc.w $200, -$200
00011D7E 0100 FF00                  		dc.w $100, -$100
00011D82                            
00011D82 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011D82 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011D8A                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011D8A                            ; --------------------------------------------------------------------------------
00011D8A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011D8A                            ; --------------------------------------------------------------------------------
00011D8A                            
00011D8A                            SME_wdHTM:	
00011D8A 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00011D8E 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00011D90 04                         SME_wdHTM_6:	dc.b 4	
00011D91 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011D96 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011D9B 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011DA0 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011DA5 04                         SME_wdHTM_1B:	dc.b 4	
00011DA6 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011DAB 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011DB0 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011DB5 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011DBA 00                         SME_wdHTM_30:	dc.b 0	
00011DBC 00                         		even
00011DBC 00                         		even
00011DBC                            
00011DBC                            		include	"_incObj\52 Moving Blocks.asm"
00011DBC                            ; ---------------------------------------------------------------------------
00011DBC                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011DBC                            ; ---------------------------------------------------------------------------
00011DBC                            
00011DBC                            MovingBlock:
00011DBC 7000                       		moveq	#0,d0
00011DBE 1028 0024                  		move.b	obRoutine(a0),d0
00011DC2 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011DC6 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011DCA                            ; ===========================================================================
00011DCA 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011DCC 0000                       		dc.w MBlock_Platform-MBlock_Index
00011DCE 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011DD0                            
00011DD0 =00000030                  mblock_origX:	equ $30
00011DD0 =00000032                  mblock_origY:	equ $32
00011DD0                            
00011DD0 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011DD2 2001                       		dc.b $20, 1
00011DD4 2002                       		dc.b $20, 2
00011DD6 4003                       		dc.b $40, 3
00011DD8 3004                       		dc.b $30, 4
00011DDA                            ; ===========================================================================
00011DDA                            
00011DDA                            MBlock_Main:	; Routine 0
00011DDA 5428 0024                  		addq.b	#2,obRoutine(a0)
00011DDE 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011DE6 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011DEC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011DF2 6600                       		bne.s	loc_FE44
00011DF4 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011DFC 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011E02 117C 0007 0016             		move.b	#7,obHeight(a0)
00011E08                            
00011E08                            loc_FE44:
00011E08 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00011E0E 6600                       		bne.s	loc_FE60
00011E10 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00011E16 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00011E1C 6700                       		beq.s	loc_FE60	; if yes, branch
00011E1E 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00011E24                            
00011E24                            loc_FE60:
00011E24 117C 0004 0001             		move.b	#4,obRender(a0)
00011E2A 7000                       		moveq	#0,d0
00011E2C 1028 0028                  		move.b	obSubtype(a0),d0
00011E30 E648                       		lsr.w	#3,d0
00011E32 0240 001E                  		andi.w	#$1E,d0
00011E36 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00011E3A 115A 0014                  		move.b	(a2)+,obActWid(a0)
00011E3E 115A 001A                  		move.b	(a2)+,obFrame(a0)
00011E42 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011E48 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011E4E 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00011E54 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00011E5A                            
00011E5A                            MBlock_Platform: ; Routine 2
00011E5A 6100 0000                  		bsr.w	MBlock_Move
00011E5E 7200                       		moveq	#0,d1
00011E60 1228 0014                  		move.b	obActWid(a0),d1
00011E64 4EB9 0000 8AF8             		jsr	(PlatformObject).l
00011E6A 6000                       		bra.s	MBlock_ChkDel
00011E6C                            ; ===========================================================================
00011E6C                            
00011E6C                            MBlock_StandOn:	; Routine 4
00011E6C 7200                       		moveq	#0,d1
00011E6E 1228 0014                  		move.b	obActWid(a0),d1
00011E72 4EB9 0000 8C6C             		jsr	(ExitPlatform).l
00011E78 3F28 0008                  		move.w	obX(a0),-(sp)
00011E7C 6100 0000                  		bsr.w	MBlock_Move
00011E80 341F                       		move.w	(sp)+,d2
00011E82 4EB9 0000 91D6             		jsr	(MvSonicOnPtfm2).l
00011E88                            
00011E88                            MBlock_ChkDel:
00011EA6 6000 D592                  		bra.w	DisplaySprite
00011EAA                            ; ===========================================================================
00011EAA                            
00011EAA                            MBlock_Move:
00011EAA 7000                       		moveq	#0,d0
00011EAC 1028 0028                  		move.b	obSubtype(a0),d0
00011EB0 0240 000F                  		andi.w	#$F,d0
00011EB4 D040                       		add.w	d0,d0
00011EB6 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00011EBA 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00011EBE                            ; ===========================================================================
00011EBE 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00011EC2 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
00011EC6 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00011ECA 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00011ECE 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
00011ED2 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00011ED4                            ; ===========================================================================
00011ED4                            
00011ED4                            MBlock_Type00:
00011ED4 4E75                       		rts	
00011ED6                            ; ===========================================================================
00011ED6                            
00011ED6                            MBlock_Type01:
00011ED6 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00011EDA 323C 0060                  		move.w	#$60,d1
00011EDE 0828 0000 0022             		btst	#0,obStatus(a0)
00011EE4 6700                       		beq.s	loc_FF26
00011EE6 4440                       		neg.w	d0
00011EE8 D041                       		add.w	d1,d0
00011EEA                            
00011EEA                            loc_FF26:
00011EEA 3228 0030                  		move.w	mblock_origX(a0),d1
00011EEE 9240                       		sub.w	d0,d1
00011EF0 3141 0008                  		move.w	d1,obX(a0)
00011EF4 4E75                       		rts	
00011EF6                            ; ===========================================================================
00011EF6                            
00011EF6                            MBlock_Type02:
00011EF6 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00011EFC 6600                       		bne.s	MBlock_02_Wait
00011EFE 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00011F02                            
00011F02                            MBlock_02_Wait:
00011F02 4E75                       		rts	
00011F04                            ; ===========================================================================
00011F04                            
00011F04                            MBlock_Type03:
00011F04 7600                       		moveq	#0,d3
00011F06 1628 0014                  		move.b	obActWid(a0),d3
00011F0A 6100 0000                  		bsr.w	ObjHitWallRight
00011F0E 4A41                       		tst.w	d1		; has the platform hit a wall?
00011F10 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00011F12 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00011F16 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011F1C 4E75                       		rts	
00011F1E                            ; ===========================================================================
00011F1E                            
00011F1E                            MBlock_03_End:
00011F1E 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00011F22 4E75                       		rts	
00011F24                            ; ===========================================================================
00011F24                            
00011F24                            MBlock_Type05:
00011F24 7600                       		moveq	#0,d3
00011F26 1628 0014                  		move.b	obActWid(a0),d3
00011F2A 6100 0000                  		bsr.w	ObjHitWallRight
00011F2E 4A41                       		tst.w	d1		; has the platform hit a wall?
00011F30 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00011F32 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00011F36 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011F3C 4E75                       		rts	
00011F3E                            ; ===========================================================================
00011F3E                            
00011F3E                            MBlock_05_End:
00011F3E 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00011F42 4E75                       		rts	
00011F44                            ; ===========================================================================
00011F44                            
00011F44                            MBlock_Type06:
00011F44 6100 D4E0                  		bsr.w	SpeedToPos
00011F48 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00011F4E 6100 0000                  		bsr.w	ObjFloorDist
00011F52 4A41                       		tst.w	d1		; has platform hit the floor?
00011F54 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011F58 D368 000C                  		add.w	d1,obY(a0)
00011F5C 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00011F60 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00011F64                            
00011F64                            locret_FFA0:
00011F64 4E75                       		rts	
00011F66                            ; ===========================================================================
00011F66                            
00011F66                            MBlock_Type07:
00011F66 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00011F6A 6700                       		beq.s	MBlock_07_ChkDel
00011F6C 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00011F70                            
00011F70                            MBlock_07_ChkDel:
00011F70 588F                       		addq.l	#4,sp
00011F90 4E75                       		rts	
00011F92                            ; ===========================================================================
00011F92                            
00011F92                            MBlock_Type08:
00011F92 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00011F96 323C 0080                  		move.w	#$80,d1
00011F9A 0828 0000 0022             		btst	#0,obStatus(a0)
00011FA0 6700                       		beq.s	loc_FFE2
00011FA2 4440                       		neg.w	d0
00011FA4 D041                       		add.w	d1,d0
00011FA6                            
00011FA6                            loc_FFE2:
00011FA6 3228 0032                  		move.w	mblock_origY(a0),d1
00011FAA 9240                       		sub.w	d0,d1
00011FAC 3141 000C                  		move.w	d1,obY(a0)
00011FB0 4E75                       		rts	
00011FB2                            ; ===========================================================================
00011FB2                            
00011FB2                            MBlock_Type0A:
00011FB2 7600                       		moveq	#0,d3
00011FB4 1628 0014                  		move.b	obActWid(a0),d3
00011FB8 D643                       		add.w	d3,d3
00011FBA 7208                       		moveq	#8,d1
00011FBC 0828 0000 0022             		btst	#0,obStatus(a0)
00011FC2 6700                       		beq.s	loc_10004
00011FC4 4441                       		neg.w	d1
00011FC6 4443                       		neg.w	d3
00011FC8                            
00011FC8                            loc_10004:
00011FC8 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011FCC 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00011FCE 3028 0008                  		move.w	obX(a0),d0
00011FD2 9068 0030                  		sub.w	mblock_origX(a0),d0
00011FD6 B043                       		cmp.w	d3,d0
00011FD8 6700                       		beq.s	MBlock_0A_Wait
00011FDA D368 0008                  		add.w	d1,obX(a0)	; move platform
00011FDE 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011FE4 4E75                       		rts	
00011FE6                            ; ===========================================================================
00011FE6                            
00011FE6                            MBlock_0A_Wait:
00011FE6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011FEA 6600                       		bne.s	locret_1002E	; if time remains, branch
00011FEC 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011FF2                            
00011FF2                            locret_1002E:
00011FF2 4E75                       		rts	
00011FF4                            ; ===========================================================================
00011FF4                            
00011FF4                            MBlock_0A_Back:
00011FF4 3028 0008                  		move.w	obX(a0),d0
00011FF8 9068 0030                  		sub.w	mblock_origX(a0),d0
00011FFC 6700                       		beq.s	MBlock_0A_Reset
00011FFE 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
00012002 4E75                       		rts	
00012004                            ; ===========================================================================
00012004                            
00012004                            MBlock_0A_Reset:
00012004 4268 0036                  		clr.w	$36(a0)
00012008 5328 0028                  		subq.b	#1,obSubtype(a0)
0001200C 4E75                       		rts	
0001200C 4E75                       		rts	
0001200E                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
0001200E                            ; ---------------------------------------------------------------------------
0001200E                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001200E                            ; ---------------------------------------------------------------------------
0001200E                            Map_MBlock_internal:
0001200E 0000                       		dc.w @mz1-Map_MBlock_internal
00012010 0000                       		dc.w @mz2-Map_MBlock_internal
00012012 0000                       		dc.w @sbz-Map_MBlock_internal
00012014 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012016 0000                       		dc.w @mz3-Map_MBlock_internal
00012018 01                         @mz1:		dc.b 1
00012019 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001201E 02                         @mz2:		dc.b 2
0001201F F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00012024 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012029 04                         @sbz:		dc.b 4
0001202A F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001202F 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012034 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012039 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001203E 04                         @sbzwide:	dc.b 4
0001203F F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012044 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012049 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001204E F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00012053 03                         @mz3:		dc.b 3
00012054 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012059 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001205E F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012064 00                         		even
00012064 00                         		even
00012064                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012064                            ; ---------------------------------------------------------------------------
00012064                            ; Sprite mappings - moving block (LZ)
00012064                            ; ---------------------------------------------------------------------------
00012064                            Map_MBlockLZ_internal:
00012064 0000                       		dc.w @0-Map_MBlockLZ_internal
00012066 01                         @0:		dc.b 1
00012067 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001206C                            		even
0001206C                            		even
0001206C                            
0001206C                            		include	"_incObj\55 Basaran.asm"
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            ; Object 55 - Basaran enemy (MZ)
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            
0001206C                            Basaran:
0001206C 7000                       		moveq	#0,d0
0001206E 1028 0024                  		move.b	obRoutine(a0),d0
00012072 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012076 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
0001207A                            ; ===========================================================================
0001207A 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
0001207C 0000                       		dc.w Bas_Action-Bas_Index
0001207E                            ; ===========================================================================
0001207E                            
0001207E                            Bas_Main:	; Routine 0
0001207E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012082 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
0001208A 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012090 117C 0004 0001             		move.b	#4,obRender(a0)
00012096 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001209C 317C 0100 0018             		move.w	#$100,obPriority(a0)
000120A2 117C 000B 0020             		move.b	#$B,obColType(a0)
000120A8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000120AE                            
000120AE                            Bas_Action:	; Routine 2
000120AE 7000                       		moveq	#0,d0
000120B0 1028 0025                  		move.b	ob2ndRout(a0),d0
000120B4 323B 0000                  		move.w	@index(pc,d0.w),d1
000120B8 4EBB 1000                  		jsr	@index(pc,d1.w)
000120BC 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000120C2 6100 A430                  		bsr.w	AnimateSprite
000120C6 6000 F412                  		bra.w	RememberState
000120CA                            ; ===========================================================================
000120CA 0000                       @index:		dc.w @dropcheck-@index
000120CC 0000                       		dc.w @dropfly-@index
000120CE 0000                       		dc.w @flapsound-@index
000120D0 0000                       		dc.w @flyup-@index
000120D2                            ; ===========================================================================
000120D2                            
000120D2                            @dropcheck:
000120D2 343C 0080                  		move.w	#$80,d2
000120D6 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000120DA 6400                       		bcc.s	@nodrop		; if not, branch
000120DC 3038 D00C                  		move.w	(v_player+obY).w,d0
000120E0 3140 0036                  		move.w	d0,$36(a0)
000120E4 9068 000C                  		sub.w	obY(a0),d0
000120E8 6500                       		bcs.s	@nodrop
000120EA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000120EE 6400                       		bcc.s	@nodrop		; if not, branch
000120F0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000120F4 6600                       		bne.s	@nodrop		; if yes, branch
000120F6                            
000120F6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000120FA D007                       		add.b	d7,d0
000120FC 0200 0007                  		andi.b	#7,d0
00012100 6600                       		bne.s	@nodrop
00012102 117C 0001 001C             		move.b	#1,obAnim(a0)
00012108 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001210C                            
0001210C                            	@nodrop:
0001210C 4E75                       		rts	
0001210E                            ; ===========================================================================
0001210E                            
0001210E                            @dropfly:
0001210E 6100 D316                  		bsr.w	SpeedToPos
00012112 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012118 343C 0080                  		move.w	#$80,d2
0001211C 6100 0000                  		bsr.w	@chkdistance
00012120 3028 0036                  		move.w	$36(a0),d0
00012124 9068 000C                  		sub.w	obY(a0),d0
00012128 6500                       		bcs.s	@chkdel
0001212A 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
0001212E 6400                       		bcc.s	@dropmore	; if not, branch
00012130 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012134 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
0001213A 117C 0002 001C             		move.b	#2,obAnim(a0)
00012140 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012144                            
00012144                            	@dropmore:
00012144 4E75                       		rts	
00012146                            
00012146                            	@chkdel:
00012146 4A28 0001                  		tst.b	obRender(a0)
0001214A 6A00 D32E                  		bpl.w	DeleteObject
0001214E 4E75                       		rts	
00012150                            ; ===========================================================================
00012150                            
00012150                            @flapsound:
00012150 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012154 0200 000F                  		andi.b	#$F,d0
00012158 6600                       		bne.s	@nosound
00012164                            
00012164                            	@nosound:
00012164 6100 D2C0                  		bsr.w	SpeedToPos
00012168 3038 D008                  		move.w	(v_player+obX).w,d0
0001216C 9068 0008                  		sub.w	obX(a0),d0
00012170 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012172 4440                       		neg.w	d0
00012174                            
00012174                            	@isright:
00012174 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012178 6500                       		bcs.s	@dontflyup	; if yes, branch
0001217A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001217E D007                       		add.b	d7,d0
00012180 0200 0007                  		andi.b	#7,d0
00012184 6600                       		bne.s	@dontflyup
00012186 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001218A                            
0001218A                            @dontflyup:
0001218A 4E75                       		rts	
0001218C                            ; ===========================================================================
0001218C                            
0001218C                            @flyup:
0001218C 6100 D298                  		bsr.w	SpeedToPos
00012190 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
00012196 6100 0000                  		bsr.w	ObjHitCeiling
0001219A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001219C 6A00                       		bpl.s	@noceiling	; if not, branch
0001219E 9368 000C                  		sub.w	d1,obY(a0)
000121A2 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000121A8 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000121AC 4268 0012                  		clr.w	obVelY(a0)
000121B0 4228 001C                  		clr.b	obAnim(a0)
000121B4 4228 0025                  		clr.b	ob2ndRout(a0)
000121B8                            
000121B8                            	@noceiling:
000121B8 4E75                       		rts	
000121BA                            ; ===========================================================================
000121BA                            
000121BA                            ; Subroutine to check Sonic's distance from the basaran
000121BA                            
000121BA                            ; input:
000121BA                            ;	d2 = distance to compare
000121BA                            
000121BA                            ; output:
000121BA                            ;	d0 = distance between Sonic and basaran
000121BA                            ;	d1 = speed/direction for basaran to fly
000121BA                            
000121BA                            @chkdistance:
000121BA 323C 0100                  		move.w	#$100,d1
000121BE 08E8 0000 0022             		bset	#0,obStatus(a0)
000121C4 3038 D008                  		move.w	(v_player+obX).w,d0
000121C8 9068 0008                  		sub.w	obX(a0),d0
000121CC 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000121CE 4440                       		neg.w	d0
000121D0 4441                       		neg.w	d1
000121D2 08A8 0000 0022             		bclr	#0,obStatus(a0)
000121D8                            
000121D8                            	@right:
000121D8 B042                       		cmp.w	d2,d0
000121DA 4E75                       		rts	
000121DC                            ; ===========================================================================
000121DC                            ; unused crap
000121DC 6100 D248                  		bsr.w	SpeedToPos
000121E0 6100 D258                  		bsr.w	DisplaySprite
000121E4 4A28 0001                  		tst.b	obRender(a0)
000121E8 6A00 D290                  		bpl.w	DeleteObject
000121EC 4E75                       		rts	
000121EC 4E75                       		rts	
000121EE                            		include	"_anim\Basaran.asm"
000121EE                            ; ---------------------------------------------------------------------------
000121EE                            ; Animation script - Basaran enemy
000121EE                            ; ---------------------------------------------------------------------------
000121EE 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000121F0 0000                       		dc.w @fall-Ani_Bas
000121F2 0000                       		dc.w @fly-Ani_Bas
000121F4 0F00 FF                    @still:		dc.b $F, 0, afEnd
000121F8 00                         		even
000121F8 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000121FC 00                         		even
000121FC 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
00012202                            		even
00012202                            		even
00012202                            Map_Bas:	include	"_maps\Basaran.asm"
00012202                            ; --------------------------------------------------------------------------------
00012202                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012202                            ; --------------------------------------------------------------------------------
00012202                            
00012202                            SME_RhYYA:	
00012202 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
00012206 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
0001220A 01                         SME_RhYYA_8:	dc.b 1	
0001220B F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012210 03                         SME_RhYYA_E:	dc.b 3	
00012211 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012216 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
0001221B 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012220 04                         SME_RhYYA_1E:	dc.b 4	
00012221 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012226 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
0001222B 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012230 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012235 04                         SME_RhYYA_33:	dc.b 4	
00012236 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
0001223B 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012240 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012245 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
0001224A                            		even
0001224A                            		even
0001224A                            
0001224A                            		include	"_incObj\56 Floating Blocks and Doors.asm"
0001224A                            ; ---------------------------------------------------------------------------
0001224A                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
0001224A                            ; ---------------------------------------------------------------------------
0001224A                            
0001224A                            FloatingBlock:
0001224A 7000                       		moveq	#0,d0
0001224C 1028 0024                  		move.b	obRoutine(a0),d0
00012250 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012254 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012258                            ; ===========================================================================
00012258 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
0001225A 0000                       		dc.w FBlock_Action-FBlock_Index
0001225C                            
0001225C =00000034                  fb_origX:	equ $34		; original x-axis position
0001225C =00000030                  fb_origY:	equ $30		; original y-axis position
0001225C =0000003A                  fb_height:	equ $3A		; total object height
0001225C =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
0001225C                            
0001225C                            FBlock_Var:	; width/2, height/2
0001225C 1010                       		dc.b  $10, $10	; subtype 0x/8x
0001225E 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012260 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012262 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012264 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012266 1010                       		dc.b  $10, $10	; subtype 5x/Dx
00012268 0820                       		dc.b	8, $20	; subtype 6x/Ex
0001226A 4010                       		dc.b  $40, $10	; subtype 7x/Fx
0001226C                            ; ===========================================================================
0001226C                            
0001226C                            FBlock_Main:	; Routine 0
0001226C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012270 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012278 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001227E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012284 6600                       		bne.s	@notLZ
00012286 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
0001228C                            
0001228C                            	@notLZ:
0001228C 117C 0004 0001             		move.b	#4,obRender(a0)
00012292 317C 0180 0018             		move.w	#$180,obPriority(a0)
00012298 7000                       		moveq	#0,d0
0001229A 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
0001229E E648                       		lsr.w	#3,d0
000122A0 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000122A4 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000122A8 115A 0014                  		move.b	(a2)+,obActWid(a0)
000122AC 1152 0016                  		move.b	(a2),obHeight(a0)
000122B0 E248                       		lsr.w	#1,d0
000122B2 1140 001A                  		move.b	d0,obFrame(a0)
000122B6 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000122BC 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000122C2 7000                       		moveq	#0,d0
000122C4 1012                       		move.b	(a2),d0
000122C6 D040                       		add.w	d0,d0
000122C8 3140 003A                  		move.w	d0,fb_height(a0)
000122CC 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000122D2 6600                       			bne.s	@dontdelete
000122D4 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000122DA 6600                       			bne.s	@notatpos
000122DC 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000122E0 6700                       			beq.s	@dontdelete
000122E2 4EF9 0000 F47A             			jmp	(DeleteObject).l
000122E8                            	@notatpos:
000122E8 4228 0028                  			clr.b	obSubtype(a0)
000122EC 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000122F0 6600                       			bne.s	@dontdelete
000122F2 4EF9 0000 F47A             			jmp	(DeleteObject).l
000122F8                            	@dontdelete:
000122F8 7000                       		moveq	#0,d0
000122FA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012300 6700                       		beq.s	@stillnotLZ
00012302 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
00012306 0240 000F                  		andi.w	#$F,d0
0001230A 5140                       		subq.w	#8,d0
0001230C 6500                       		bcs.s	@stillnotLZ
0001230E E548                       		lsl.w	#2,d0
00012310 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
00012314 45F2 0000                  		lea	(a2,d0.w),a2
00012318 4A52                       		tst.w	(a2)
0001231A 6A00                       		bpl.s	@stillnotLZ
0001231C 0868 0000 0022             		bchg	#0,obStatus(a0)
00012322                            
00012322                            	@stillnotLZ:
00012322 1028 0028                  		move.b	obSubtype(a0),d0
00012326 6A00                       		bpl.s	FBlock_Action
00012328 0200 000F                  		andi.b	#$F,d0
0001232C 1140 003C                  		move.b	d0,fb_type(a0)
00012330 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012336 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
0001233C 6600                       		bne.s	@chkstate
0001233E 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012344 317C 0080 003A             		move.w	#$80,fb_height(a0)
0001234A                            
0001234A                            @chkstate:
0001234A 45F8 FC00                  		lea	(v_objstate).w,a2
0001234E 7000                       		moveq	#0,d0
00012350 1028 0023                  		move.b	obRespawnNo(a0),d0
00012354 6700                       		beq.s	FBlock_Action
00012356 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001235C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012362 6700                       		beq.s	FBlock_Action
00012364 5228 0028                  		addq.b	#1,obSubtype(a0)
00012368 4268 003A                  		clr.w	fb_height(a0)
0001236C                            
0001236C                            FBlock_Action:	; Routine 2
0001236C 3F28 0008                  		move.w	obX(a0),-(sp)
00012370 7000                       		moveq	#0,d0
00012372 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012376 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001237A D040                       		add.w	d0,d0
0001237C 323B 0000                  		move.w	@index(pc,d0.w),d1
00012380 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012384 381F                       		move.w	(sp)+,d4
00012386 4A28 0001                  		tst.b	obRender(a0)
0001238A 6A00                       		bpl.s	@chkdel
0001238C 7200                       		moveq	#0,d1
0001238E 1228 0014                  		move.b	obActWid(a0),d1
00012392 0641 000B                  		addi.w	#$B,d1
00012396 7400                       		moveq	#0,d2
00012398 1428 0016                  		move.b	obHeight(a0),d2
0001239C 3602                       		move.w	d2,d3
0001239E 5243                       		addq.w	#1,d3
000123A0 6100 F5D0                  		bsr.w	SolidObject
000123A4                            
000123A4                            	@chkdel:
000123C0                            		@display:
000123C0 6000 D078                  			bra.w	DisplaySprite
000123C4                            		@chkdel2:
000123C4 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000123CA 6600                       			bne.s	@delete
000123CC 4A28 0038                  			tst.b	$38(a0)
000123D0 66EE                       			bne.s	@display
000123D2                            		@delete:
000123D2 4EF9 0000 F47A             			jmp	(DeleteObject).l
000123D8                            ; ===========================================================================
000123D8 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000123DC 0000 0000                  		dc.w @type02-@index, @type03-@index
000123E0 0000 0000                  		dc.w @type04-@index, @type05-@index
000123E4 0000 0000                  		dc.w @type06-@index, @type07-@index
000123E8 0000 0000                  		dc.w @type08-@index, @type09-@index
000123EC 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000123F0 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000123F4                            ; ===========================================================================
000123F4                            
000123F4                            @type00:
000123F4                            ; doesn't move
000123F4 4E75                       		rts	
000123F6                            ; ===========================================================================
000123F6                            
000123F6                            @type01:
000123F6                            ; moves side-to-side
000123F6 323C 0040                  		move.w	#$40,d1		; set move distance
000123FA 7000                       		moveq	#0,d0
000123FC 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012400 6000                       		bra.s	@moveLR
00012402                            ; ===========================================================================
00012402                            
00012402                            @type02:
00012402                            ; moves side-to-side
00012402 323C 0080                  		move.w	#$80,d1		; set move distance
00012406 7000                       		moveq	#0,d0
00012408 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001240C                            
0001240C                            	@moveLR:
0001240C 0828 0000 0022             		btst	#0,obStatus(a0)
00012412 6700                       		beq.s	@noflip
00012414 4440                       		neg.w	d0
00012416 D041                       		add.w	d1,d0
00012418                            
00012418                            	@noflip:
00012418 3228 0034                  		move.w	fb_origX(a0),d1
0001241C 9240                       		sub.w	d0,d1
0001241E 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012422 4E75                       		rts	
00012424                            ; ===========================================================================
00012424                            
00012424                            @type03:
00012424                            ; moves up/down
00012424 323C 0040                  		move.w	#$40,d1		; set move distance
00012428 7000                       		moveq	#0,d0
0001242A 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001242E 6000                       		bra.s	@moveUD
00012430                            ; ===========================================================================
00012430                            
00012430                            @type04:
00012430                            ; moves up/down
00012430 323C 0080                  		move.w	#$80,d1		; set move distance
00012434 7000                       		moveq	#0,d0
00012436 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001243A                            
0001243A                            	@moveUD:
0001243A 0828 0000 0022             		btst	#0,obStatus(a0)
00012440 6700                       		beq.s	@noflip04
00012442 4440                       		neg.w	d0
00012444 D041                       		add.w	d1,d0
00012446                            
00012446                            	@noflip04:
00012446 3228 0030                  		move.w	fb_origY(a0),d1
0001244A 9240                       		sub.w	d0,d1
0001244C 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012450 4E75                       		rts	
00012452                            ; ===========================================================================
00012452                            
00012452                            @type05:
00012452                            ; moves up when a switch is pressed
00012452 4A28 0038                  		tst.b	$38(a0)
00012456 6600                       		bne.s	@loc_104A4
00012458 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001245E 6600                       		bne.s	@aaa		; if not, branch
00012460 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012466 6600                       		bne.s	@aaa
00012468 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001246C 3038 D008                  		move.w	(v_player+obX).w,d0
00012470 B068 0008                  		cmp.w	obX(a0),d0
00012474 6400                       		bcc.s	@aaa
00012476 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
0001247C                            
0001247C                            	@aaa:
0001247C 45F8 F7E0                  		lea	(f_switch).w,a2
00012480 7000                       		moveq	#0,d0
00012482 1028 003C                  		move.b	fb_type(a0),d0
00012486 0832 0000 0000             		btst	#0,(a2,d0.w)
0001248C 6700                       		beq.s	@loc_104AE
0001248E 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012494 6600                       		bne.s	@loc_1049E	; if not, branch
00012496 0C00 0003                  		cmpi.b	#3,d0
0001249A 6600                       		bne.s	@loc_1049E
0001249C 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000124A0                            
000124A0                            @loc_1049E:
000124A0 117C 0001 0038             		move.b	#1,$38(a0)
000124A6                            
000124A6                            @loc_104A4:
000124A6 4A68 003A                  		tst.w	fb_height(a0)
000124AA 6700                       		beq.s	@loc_104C8
000124AC 5568 003A                  		subq.w	#2,fb_height(a0)
000124B0                            
000124B0                            @loc_104AE:
000124B0 3028 003A                  		move.w	fb_height(a0),d0
000124B4 0828 0000 0022             		btst	#0,$22(a0)
000124BA 6700                       		beq.s	@loc_104BC
000124BC 4440                       		neg.w	d0
000124BE                            
000124BE                            @loc_104BC:
000124BE 3228 0030                  		move.w	fb_origY(a0),d1
000124C2 D240                       		add.w	d0,d1
000124C4 3141 000C                  		move.w	d1,obY(a0)
000124C8 4E75                       		rts	
000124CA                            ; ===========================================================================
000124CA                            
000124CA                            @loc_104C8:
000124CA 5228 0028                  		addq.b	#1,$28(a0)
000124CE 4228 0038                  		clr.b	$38(a0)
000124D2 45F8 FC00                  		lea	(v_objstate).w,a2
000124D6 7000                       		moveq	#0,d0
000124D8 1028 0023                  		move.b	obRespawnNo(a0),d0
000124DC 67D2                       		beq.s	@loc_104AE
000124DE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000124E4 60CA                       		bra.s	@loc_104AE
000124E6                            ; ===========================================================================
000124E6                            
000124E6                            @type06:
000124E6 4A28 0038                  		tst.b	$38(a0)
000124EA 6600                       		bne.s	@loc_10500
000124EC 45F8 F7E0                  		lea	(f_switch).w,a2
000124F0 7000                       		moveq	#0,d0
000124F2 1028 003C                  		move.b	fb_type(a0),d0
000124F6 4A32 0000                  		tst.b	(a2,d0.w)
000124FA 6A00                       		bpl.s	@loc_10512
000124FC 117C 0001 0038             		move.b	#1,$38(a0)
00012502                            
00012502                            @loc_10500:
00012502 7000                       		moveq	#0,d0
00012504 1028 0016                  		move.b	obHeight(a0),d0
00012508 D040                       		add.w	d0,d0
0001250A B068 003A                  		cmp.w	fb_height(a0),d0
0001250E 6700                       		beq.s	@loc_1052C
00012510 5468 003A                  		addq.w	#2,fb_height(a0)
00012514                            
00012514                            @loc_10512:
00012514 3028 003A                  		move.w	fb_height(a0),d0
00012518 0828 0000 0022             		btst	#0,obStatus(a0)
0001251E 6700                       		beq.s	@loc_10520
00012520 4440                       		neg.w	d0
00012522                            
00012522                            @loc_10520:
00012522 3228 0030                  		move.w	fb_origY(a0),d1
00012526 D240                       		add.w	d0,d1
00012528 3141 000C                  		move.w	d1,obY(a0)
0001252C 4E75                       		rts	
0001252E                            ; ===========================================================================
0001252E                            
0001252E                            @loc_1052C:
0001252E 5328 0028                  		subq.b	#1,obSubtype(a0)
00012532 4228 0038                  		clr.b	$38(a0)
00012536 45F8 FC00                  		lea	(v_objstate).w,a2
0001253A 7000                       		moveq	#0,d0
0001253C 1028 0023                  		move.b	obRespawnNo(a0),d0
00012540 67D2                       		beq.s	@loc_10512
00012542 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012548 60CA                       		bra.s	@loc_10512
0001254A                            ; ===========================================================================
0001254A                            
0001254A                            @type07:
0001254A 4A28 0038                  		tst.b	$38(a0)
0001254E 6600                       		bne.s	@loc_1055E
00012550 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012554 6700                       		beq.s	@locret_10578
00012556 117C 0001 0038             		move.b	#1,$38(a0)
0001255C 4268 003A                  		clr.w	fb_height(a0)
00012560                            
00012560                            @loc_1055E:
00012560 5268 0008                  		addq.w	#1,obX(a0)
00012564 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001256A 5268 003A                  		addq.w	#1,fb_height(a0)
0001256E 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012574 6600                       		bne.s	@locret_10578
00012576 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
0001257C 4228 0038                  			clr.b	$38(a0)
00012580 4228 0028                  		clr.b	obSubtype(a0)
00012584                            
00012584                            @locret_10578:
00012584 4E75                       		rts	
00012586                            ; ===========================================================================
00012586                            
00012586                            @type0C:
00012586 4A28 0038                  		tst.b	$38(a0)
0001258A 6600                       		bne.s	@loc_10598
0001258C 45F8 F7E0                  		lea	(f_switch).w,a2
00012590 7000                       		moveq	#0,d0
00012592 1028 003C                  		move.b	fb_type(a0),d0
00012596 0832 0000 0000             		btst	#0,(a2,d0.w)
0001259C 6700                       		beq.s	@loc_105A2
0001259E 117C 0001 0038             		move.b	#1,$38(a0)
000125A4                            
000125A4                            @loc_10598:
000125A4 4A68 003A                  		tst.w	fb_height(a0)
000125A8 6700                       		beq.s	@loc_105C0
000125AA 5568 003A                  		subq.w	#2,fb_height(a0)
000125AE                            
000125AE                            @loc_105A2:
000125AE 3028 003A                  		move.w	fb_height(a0),d0
000125B2 0828 0000 0022             		btst	#0,obStatus(a0)
000125B8 6700                       		beq.s	@loc_105B4
000125BA 4440                       		neg.w	d0
000125BC 0640 0080                  		addi.w	#$80,d0
000125C0                            
000125C0                            @loc_105B4:
000125C0 3228 0034                  		move.w	fb_origX(a0),d1
000125C4 D240                       		add.w	d0,d1
000125C6 3141 0008                  		move.w	d1,obX(a0)
000125CA 4E75                       		rts	
000125CC                            ; ===========================================================================
000125CC                            
000125CC                            @loc_105C0:
000125CC 5228 0028                  		addq.b	#1,obSubtype(a0)
000125D0 4228 0038                  		clr.b	$38(a0)
000125D4 45F8 FC00                  		lea	(v_objstate).w,a2
000125D8 7000                       		moveq	#0,d0
000125DA 1028 0023                  		move.b	obRespawnNo(a0),d0
000125DE 67CE                       		beq.s	@loc_105A2
000125E0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000125E6 60C6                       		bra.s	@loc_105A2
000125E8                            ; ===========================================================================
000125E8                            
000125E8                            @type0D:
000125E8 4A28 0038                  		tst.b	$38(a0)
000125EC 6600                       		bne.s	@loc_105F8
000125EE 45F8 F7E0                  		lea	(f_switch).w,a2
000125F2 7000                       		moveq	#0,d0
000125F4 1028 003C                  		move.b	fb_type(a0),d0
000125F8 4A32 0000                  		tst.b	(a2,d0.w)
000125FC 6A00                       		bpl.s	@wtf
000125FE 117C 0001 0038             		move.b	#1,$38(a0)
00012604                            
00012604                            @loc_105F8:
00012604 303C 0080                  		move.w	#$80,d0
00012608 B068 003A                  		cmp.w	fb_height(a0),d0
0001260C 6700                       		beq.s	@loc_10624
0001260E 5468 003A                  		addq.w	#2,fb_height(a0)
00012612                            
00012612                            @wtf:
00012612 3028 003A                  		move.w	fb_height(a0),d0
00012616 0828 0000 0022             		btst	#0,obStatus(a0)
0001261C 6700                       		beq.s	@loc_10618
0001261E 4440                       		neg.w	d0
00012620 0640 0080                  		addi.w	#$80,d0
00012624                            
00012624                            @loc_10618:
00012624 3228 0034                  		move.w	fb_origX(a0),d1
00012628 D240                       		add.w	d0,d1
0001262A 3141 0008                  		move.w	d1,obX(a0)
0001262E 4E75                       		rts	
00012630                            ; ===========================================================================
00012630                            
00012630                            @loc_10624:
00012630 5328 0028                  		subq.b	#1,obSubtype(a0)
00012634 4228 0038                  		clr.b	$38(a0)
00012638 45F8 FC00                  		lea	(v_objstate).w,a2
0001263C 7000                       		moveq	#0,d0
0001263E 1028 0023                  		move.b	obRespawnNo(a0),d0
00012642 67CE                       		beq.s	@wtf
00012644 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001264A 60C6                       		bra.s	@wtf
0001264C                            ; ===========================================================================
0001264C                            
0001264C                            @type08:
0001264C 323C 0010                  		move.w	#$10,d1
00012650 7000                       		moveq	#0,d0
00012652 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012656 E248                       		lsr.w	#1,d0
00012658 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
0001265C 6000                       		bra.s	@square
0001265E                            ; ===========================================================================
0001265E                            
0001265E                            @type09:
0001265E 323C 0030                  		move.w	#$30,d1
00012662 7000                       		moveq	#0,d0
00012664 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012668 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
0001266C 6000                       		bra.s	@square
0001266E                            ; ===========================================================================
0001266E                            
0001266E                            @type0A:
0001266E 323C 0050                  		move.w	#$50,d1
00012672 7000                       		moveq	#0,d0
00012674 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012678 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
0001267C 6000                       		bra.s	@square
0001267E                            ; ===========================================================================
0001267E                            
0001267E                            @type0B:
0001267E 323C 0070                  		move.w	#$70,d1
00012682 7000                       		moveq	#0,d0
00012684 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012688 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
0001268C                            
0001268C                            @square:
0001268C 4A43                       		tst.w	d3
0001268E 6600                       		bne.s	@loc_1068E
00012690 5228 0022                  		addq.b	#1,obStatus(a0)
00012694 0228 0003 0022             		andi.b	#3,obStatus(a0)
0001269A                            
0001269A                            @loc_1068E:
0001269A 1428 0022                  		move.b	obStatus(a0),d2
0001269E 0202 0003                  		andi.b	#3,d2
000126A2 6600                       		bne.s	@loc_106AE
000126A4 9041                       		sub.w	d1,d0
000126A6 D068 0034                  		add.w	fb_origX(a0),d0
000126AA 3140 0008                  		move.w	d0,obX(a0)
000126AE 4441                       		neg.w	d1
000126B0 D268 0030                  		add.w	fb_origY(a0),d1
000126B4 3141 000C                  		move.w	d1,obY(a0)
000126B8 4E75                       		rts	
000126BA                            ; ===========================================================================
000126BA                            
000126BA                            @loc_106AE:
000126BA 5302                       		subq.b	#1,d2
000126BC 6600                       		bne.s	@loc_106CC
000126BE 5341                       		subq.w	#1,d1
000126C0 9041                       		sub.w	d1,d0
000126C2 4440                       		neg.w	d0
000126C4 D068 0030                  		add.w	fb_origY(a0),d0
000126C8 3140 000C                  		move.w	d0,obY(a0)
000126CC 5241                       		addq.w	#1,d1
000126CE D268 0034                  		add.w	fb_origX(a0),d1
000126D2 3141 0008                  		move.w	d1,obX(a0)
000126D6 4E75                       		rts	
000126D8                            ; ===========================================================================
000126D8                            
000126D8                            @loc_106CC:
000126D8 5302                       		subq.b	#1,d2
000126DA 6600                       		bne.s	@loc_106EA
000126DC 5341                       		subq.w	#1,d1
000126DE 9041                       		sub.w	d1,d0
000126E0 4440                       		neg.w	d0
000126E2 D068 0034                  		add.w	fb_origX(a0),d0
000126E6 3140 0008                  		move.w	d0,obX(a0)
000126EA 5241                       		addq.w	#1,d1
000126EC D268 0030                  		add.w	fb_origY(a0),d1
000126F0 3141 000C                  		move.w	d1,obY(a0)
000126F4 4E75                       		rts	
000126F6                            ; ===========================================================================
000126F6                            
000126F6                            @loc_106EA:
000126F6 9041                       		sub.w	d1,d0
000126F8 D068 0030                  		add.w	fb_origY(a0),d0
000126FC 3140 000C                  		move.w	d0,obY(a0)
00012700 4441                       		neg.w	d1
00012702 D268 0034                  		add.w	fb_origX(a0),d1
00012706 3141 0008                  		move.w	d1,obX(a0)
0001270A 4E75                       		rts	
0001270A 4E75                       		rts	
0001270C                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
0001270C                            ; ---------------------------------------------------------------------------
0001270C                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001270C                            ; ---------------------------------------------------------------------------
0001270C                            Map_FBlock_internal:
0001270C 0000                       		dc.w @syz1x1-Map_FBlock_internal
0001270E 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012710 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012712 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012714 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012716 0000                       		dc.w @slz-Map_FBlock_internal
00012718 0000                       		dc.w @lzvert-Map_FBlock_internal
0001271A 0000                       		dc.w @lzhoriz-Map_FBlock_internal
0001271C 01                         @syz1x1:	dc.b 1
0001271D F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012722 04                         @syz2x2:	dc.b 4
00012723 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012728 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001272D 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012732 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012737 02                         @syz1x2:	dc.b 2
00012738 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
0001273D 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012742 04                         @syzrect2x2:	dc.b 4
00012743 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012748 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001274D 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012752 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012757 03                         @syzrect1x3:	dc.b 3
00012758 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
0001275D F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012762 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012767 01                         @slz:		dc.b 1
00012768 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
0001276D 02                         @lzvert:	dc.b 2
0001276E E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012773 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012778 04                         @lzhoriz:	dc.b 4
00012779 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
0001277E F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012783 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012788 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001278E 00                         		even
0001278E 00                         		even
0001278E                            
0001278E                            		include	"_incObj\57 Spiked Ball and Chain.asm"
0001278E                            ; ---------------------------------------------------------------------------
0001278E                            ; Object 57 - spiked balls (SYZ, LZ)
0001278E                            ; ---------------------------------------------------------------------------
0001278E                            
0001278E                            SpikeBall:
0001278E 7000                       		moveq	#0,d0
00012790 1028 0024                  		move.b	obRoutine(a0),d0
00012794 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012798 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
0001279C                            ; ===========================================================================
0001279C 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
0001279E 0000                       		dc.w SBall_Move-SBall_Index
000127A0 0000                       		dc.w SBall_Display-SBall_Index
000127A2                            
000127A2 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
000127A2                            		; $30-$37	; object RAM numbers of childs (1 byte each)
000127A2 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
000127A2 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
000127A2 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
000127A2 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
000127A2                            ; ===========================================================================
000127A2                            
000127A2                            SBall_Main:	; Routine 0
000127A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000127A6 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
000127AE 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
000127B4 117C 0004 0001             		move.b	#4,obRender(a0)
000127BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000127C0 117C 0008 0014             		move.b	#8,obActWid(a0)
000127C6 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
000127CC 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
000127D2 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
000127D8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000127DE 6600                       		bne.s	@notlz
000127E0                            
000127E0 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
000127E6 317C 0310 0002             		move.w	#$310,obGfx(a0)
000127EC 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
000127F4                            
000127F4                            	@notlz:
000127F4 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000127F8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000127FC 4881                       		ext.w	d1
000127FE E741                       		asl.w	#3,d1		; multiply by 8
00012800 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012804 1028 0022                  		move.b	obStatus(a0),d0
00012808 E418                       		ror.b	#2,d0
0001280A 0200 00C0                  		andi.b	#$C0,d0
0001280E 1140 0026                  		move.b	d0,obAngle(a0)
00012812 45E8 0029                  		lea	sball_childs(a0),a2
00012816 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001281A 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001281E 14FC 0000                  		move.b	#0,(a2)+
00012822 3601                       		move.w	d1,d3
00012824 E94B                       		lsl.w	#4,d3
00012826 1143 003C                  		move.b	d3,sball_radius(a0)
0001282A 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001282C 6500                       		bcs.s	@fail
0001282E 0828 0003 0028             		btst	#3,obSubtype(a0)
00012834 6700                       		beq.s	@makechain
00012836 5341                       		subq.w	#1,d1
00012838 6500                       		bcs.s	@fail
0001283A                            
0001283A                            @makechain:
0001283A 6100 D198                  		bsr.w	FindFreeObj
0001283E 6600                       		bne.s	@fail
00012840 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012844 3A09                       		move.w	a1,d5		; get child object RAM address
00012846 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
0001284A EC4D                       		lsr.w	#6,d5		; divide by $40
0001284C 0245 007F                  		andi.w	#$7F,d5
00012850 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012852 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012858 1290                       		move.b	0(a0),0(a1)
0001285A 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012860 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012866 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0001286C 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012872 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012878 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
0001287E 0403 0010                  		subi.b	#$10,d3
00012882 1343 003C                  		move.b	d3,sball_radius(a1)
00012886 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001288C 6600                       		bne.s	@notlzagain
0001288E                            
0001288E 4A03                       		tst.b	d3
00012890 6600                       		bne.s	@notlzagain
00012892 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012898                            
00012898                            	@notlzagain:
00012898 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
0001289C                            
0001289C                            	@fail:
0001289C 3A08                       		move.w	a0,d5
0001289E 0445 D000                  		subi.w	#$D000,d5
000128A2 EC4D                       		lsr.w	#6,d5
000128A4 0245 007F                  		andi.w	#$7F,d5
000128A8 14C5                       		move.b	d5,(a2)+
000128AA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000128B0 6600                       		bne.s	SBall_Move
000128B2                            
000128B2 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
000128B8 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
000128BE                            
000128BE                            SBall_Move:	; Routine 2
000128BE 6100 0000                  		bsr.w	@movesub
000128C2 6000 0000                  		bra.w	@chkdel
000128C6                            ; ===========================================================================
000128C6                            
000128C6                            @movesub:
000128C6 3028 003E                  		move.w	sball_speed(a0),d0
000128CA D168 0026                  		add.w	d0,obAngle(a0)
000128CE 1028 0026                  		move.b	obAngle(a0),d0
000128D2 4EB9 0000 3B42             		jsr	(CalcSine).l
000128D8 3428 0038                  		move.w	sball_origY(a0),d2
000128DC 3628 003A                  		move.w	sball_origX(a0),d3
000128E0 45E8 0029                  		lea	sball_childs(a0),a2
000128E4 7C00                       		moveq	#0,d6
000128E6 1C1A                       		move.b	(a2)+,d6
000128E8                            
000128E8                            	@loop:
000128E8 7800                       		moveq	#0,d4
000128EA 181A                       		move.b	(a2)+,d4
000128EC ED4C                       		lsl.w	#6,d4
000128EE 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000128F4 2244                       		movea.l	d4,a1
000128F6 7800                       		moveq	#0,d4
000128F8 1829 003C                  		move.b	sball_radius(a1),d4
000128FC 2A04                       		move.l	d4,d5
000128FE C9C0                       		muls.w	d0,d4
00012900 E084                       		asr.l	#8,d4
00012902 CBC1                       		muls.w	d1,d5
00012904 E085                       		asr.l	#8,d5
00012906 D842                       		add.w	d2,d4
00012908 DA43                       		add.w	d3,d5
0001290A 3344 000C                  		move.w	d4,obY(a1)
0001290E 3345 0008                  		move.w	d5,obX(a1)
00012912 51CE FFD4                  		dbf	d6,@loop
00012916 4E75                       		rts	
00012918                            ; ===========================================================================
00012918                            
00012918                            @chkdel:
00012936 6000 CB02                  		bra.w	DisplaySprite
0001293A                            ; ===========================================================================
0001293A                            
0001293A                            @delete:
0001293A 7400                       		moveq	#0,d2
0001293C 45E8 0029                  		lea	sball_childs(a0),a2
00012940 141A                       		move.b	(a2)+,d2
00012942                            
00012942                            	@deleteloop:
00012942 7000                       		moveq	#0,d0
00012944 101A                       		move.b	(a2)+,d0
00012946 ED48                       		lsl.w	#6,d0
00012948 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001294E 2240                       		movea.l	d0,a1
00012950 6100 CB2A                  		bsr.w	DeleteChild
00012954 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012958                            
00012958 4E75                       		rts	
0001295A                            ; ===========================================================================
0001295A                            
0001295A                            SBall_Display:	; Routine 4
0001295A 6000 CADE                  		bra.w	DisplaySprite
0001295A 6000 CADE                  		bra.w	DisplaySprite
0001295E                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
0001295E                            ; ---------------------------------------------------------------------------
0001295E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001295E                            ; ---------------------------------------------------------------------------
0001295E                            Map_SBall_internal:
0001295E 0000                       		dc.w @0-Map_SBall_internal
00012960 01                         @0:		dc.b 1
00012961 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012966                            		even
00012966                            		even
00012966                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012966                            ; ---------------------------------------------------------------------------
00012966                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012966                            ; ---------------------------------------------------------------------------
00012966                            Map_SBall2_internal:
00012966 0000                       		dc.w @chain-Map_SBall2_internal
00012968 0000                       		dc.w @spikeball-Map_SBall2_internal
0001296A 0000                       		dc.w @base-Map_SBall2_internal
0001296C 01                         @chain:		dc.b 1
0001296D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012972 01                         @spikeball:	dc.b 1
00012973 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012978 01                         @base:		dc.b 1
00012979 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
0001297E                            		even
0001297E                            		even
0001297E                            		include	"_incObj\58 Big Spiked Ball.asm"
0001297E                            ; ---------------------------------------------------------------------------
0001297E                            ; Object 58 - giant spiked balls (SYZ)
0001297E                            ; ---------------------------------------------------------------------------
0001297E                            
0001297E                            BigSpikeBall:
0001297E 7000                       		moveq	#0,d0
00012980 1028 0024                  		move.b	obRoutine(a0),d0
00012984 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012988 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
0001298C                            ; ===========================================================================
0001298C 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
0001298E 0000                       		dc.w BBall_Move-BBall_Index
00012990                            
00012990 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012990 =00000038                  bball_origY:	equ $38		; original y-axis position
00012990 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012990 =0000003E                  bball_speed:	equ $3E		; speed
00012990                            ; ===========================================================================
00012990                            
00012990                            BBall_Main:	; Routine 0
00012990 5428 0024                  		addq.b	#2,obRoutine(a0)
00012994 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
0001299C 317C 0396 0002             		move.w	#$396,obGfx(a0)
000129A2 117C 0004 0001             		move.b	#4,obRender(a0)
000129A8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000129AE 117C 0018 0014             		move.b	#$18,obActWid(a0)
000129B4 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
000129BA 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
000129C0 117C 0086 0020             		move.b	#$86,obColType(a0)
000129C6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000129CA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000129CE 4881                       		ext.w	d1
000129D0 E741                       		asl.w	#3,d1		; multiply by 8
000129D2 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
000129D6 1028 0022                  		move.b	obStatus(a0),d0
000129DA E418                       		ror.b	#2,d0
000129DC 0200 00C0                  		andi.b	#$C0,d0
000129E0 1140 0026                  		move.b	d0,obAngle(a0)
000129E4 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
000129EA                            
000129EA                            BBall_Move:	; Routine 2
000129EA 7000                       		moveq	#0,d0
000129EC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000129F0 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000129F4 D040                       		add.w	d0,d0
000129F6 323B 0000                  		move.w	@index(pc,d0.w),d1
000129FA 4EBB 1000                  		jsr	@index(pc,d1.w)
00012A1C 6000 CA1C                  		bra.w	DisplaySprite
00012A20                            ; ===========================================================================
00012A20 0000                       @index:		dc.w @type00-@index
00012A22 0000                       		dc.w @type01-@index
00012A24 0000                       		dc.w @type02-@index
00012A26 0000                       		dc.w @type03-@index
00012A28                            ; ===========================================================================
00012A28                            
00012A28                            @type00:
00012A28 4E75                       		rts	
00012A2A                            ; ===========================================================================
00012A2A                            
00012A2A                            @type01:
00012A2A 323C 0060                  		move.w	#$60,d1
00012A2E 7000                       		moveq	#0,d0
00012A30 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012A34 0828 0000 0022             		btst	#0,obStatus(a0)
00012A3A 6700                       		beq.s	@noflip1
00012A3C 4440                       		neg.w	d0
00012A3E D041                       		add.w	d1,d0
00012A40                            
00012A40                            	@noflip1:
00012A40 3228 003A                  		move.w	bball_origX(a0),d1
00012A44 9240                       		sub.w	d0,d1
00012A46 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012A4A 4E75                       		rts	
00012A4C                            ; ===========================================================================
00012A4C                            
00012A4C                            @type02:
00012A4C 323C 0060                  		move.w	#$60,d1
00012A50 7000                       		moveq	#0,d0
00012A52 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012A56 0828 0000 0022             		btst	#0,obStatus(a0)
00012A5C 6700                       		beq.s	@noflip2
00012A5E 4440                       		neg.w	d0
00012A60 0640 0080                  		addi.w	#$80,d0
00012A64                            
00012A64                            	@noflip2:
00012A64 3228 0038                  		move.w	bball_origY(a0),d1
00012A68 9240                       		sub.w	d0,d1
00012A6A 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012A6E 4E75                       		rts	
00012A70                            ; ===========================================================================
00012A70                            
00012A70                            @type03:
00012A70 3028 003E                  		move.w	bball_speed(a0),d0
00012A74 D168 0026                  		add.w	d0,obAngle(a0)
00012A78 1028 0026                  		move.b	obAngle(a0),d0
00012A7C 4EB9 0000 3B42             		jsr	(CalcSine).l
00012A82 3428 0038                  		move.w	bball_origY(a0),d2
00012A86 3628 003A                  		move.w	bball_origX(a0),d3
00012A8A 7800                       		moveq	#0,d4
00012A8C 1828 003C                  		move.b	bball_radius(a0),d4
00012A90 2A04                       		move.l	d4,d5
00012A92 C9C0                       		muls.w	d0,d4
00012A94 E084                       		asr.l	#8,d4
00012A96 CBC1                       		muls.w	d1,d5
00012A98 E085                       		asr.l	#8,d5
00012A9A D842                       		add.w	d2,d4
00012A9C DA43                       		add.w	d3,d5
00012A9E 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012AA2 3145 0008                  		move.w	d5,obX(a0)
00012AA6 4E75                       		rts	
00012AA6 4E75                       		rts	
00012AA8                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012AA8                            ; --------------------------------------------------------------------------------
00012AA8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012AA8                            ; --------------------------------------------------------------------------------
00012AA8                            
00012AA8                            SME_u_DKx:	
00012AA8 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012AAC 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012AAE 05                         SME_u_DKx_6:	dc.b 5	
00012AAF E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012AB4 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012AB9 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012ABE F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012AC3 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012AC8 01                         SME_u_DKx_20:	dc.b 1	
00012AC9 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012ACE 02                         SME_u_DKx_26:	dc.b 2	
00012ACF F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012AD4 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012ADA 00                         		even
00012ADA 00                         		even
00012ADA                            		include	"_incObj\59 SLZ Elevators.asm"
00012ADA                            ; ---------------------------------------------------------------------------
00012ADA                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012ADA                            ; ---------------------------------------------------------------------------
00012ADA                            
00012ADA                            Elevator:
00012ADA 7000                       		moveq	#0,d0
00012ADC 1028 0024                  		move.b	obRoutine(a0),d0
00012AE0 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012AE4 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012B06 6000 C932                  		bra.w	DisplaySprite
00012B0A                            ; ===========================================================================
00012B0A 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012B0C 0000                       		dc.w Elev_Platform-Elev_Index
00012B0E 0000                       		dc.w Elev_Action-Elev_Index
00012B10 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012B12                            
00012B12 =00000032                  elev_origX:	equ $32		; original x-axis position
00012B12 =00000030                  elev_origY:	equ $30		; original y-axis position
00012B12 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012B12                            
00012B12 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012B14                            
00012B14 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012B16 2001                       		dc.b $20, 1
00012B18 3401                       		dc.b $34, 1
00012B1A 1003                       		dc.b $10, 3
00012B1C 2003                       		dc.b $20, 3
00012B1E 3403                       		dc.b $34, 3
00012B20 1401                       		dc.b $14, 1
00012B22 2401                       		dc.b $24, 1
00012B24 2C01                       		dc.b $2C, 1
00012B26 1403                       		dc.b $14, 3
00012B28 2403                       		dc.b $24, 3
00012B2A 2C03                       		dc.b $2C, 3
00012B2C 2005                       		dc.b $20, 5
00012B2E 2007                       		dc.b $20, 7
00012B30 3009                       		dc.b $30, 9
00012B32                            ; ===========================================================================
00012B32                            
00012B32                            Elev_Main:	; Routine 0
00012B32 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B36 7000                       		moveq	#0,d0
00012B38 1028 0028                  		move.b	obSubtype(a0),d0
00012B3C 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012B3E 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012B42 0240 007F                  		andi.w	#$7F,d0
00012B46 C0FC 0006                  		mulu.w	#6,d0
00012B4A 3140 003C                  		move.w	d0,elev_dist(a0)
00012B4E 3140 003E                  		move.w	d0,$3E(a0)
00012B52 588F                       		addq.l	#4,sp
00012B54 4E75                       		rts	
00012B56                            ; ===========================================================================
00012B56                            
00012B56                            	@normal:
00012B56 E648                       		lsr.w	#3,d0
00012B58 0240 001E                  		andi.w	#$1E,d0
00012B5C 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012B60 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012B64 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012B68 7000                       		moveq	#0,d0
00012B6A 1028 0028                  		move.b	obSubtype(a0),d0
00012B6E D040                       		add.w	d0,d0
00012B70 0240 001E                  		andi.w	#$1E,d0
00012B74 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012B78 101A                       		move.b	(a2)+,d0
00012B7A E548                       		lsl.w	#2,d0
00012B7C 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012B80 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012B84 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012B8C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012B92 117C 0004 0001             		move.b	#4,obRender(a0)
00012B98 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B9E 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012BA4 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012BAA                            
00012BAA                            Elev_Platform:	; Routine 2
00012BAA 7200                       		moveq	#0,d1
00012BAC 1228 0014                  		move.b	obActWid(a0),d1
00012BB0 4EB9 0000 8AF8             		jsr	(PlatformObject).l
00012BB6 6000 0000                  		bra.w	Elev_Types
00012BBA                            ; ===========================================================================
00012BBA                            
00012BBA                            Elev_Action:	; Routine 4
00012BBA 7200                       		moveq	#0,d1
00012BBC 1228 0014                  		move.b	obActWid(a0),d1
00012BC0 4EB9 0000 8C6C             		jsr	(ExitPlatform).l
00012BC6 3F28 0008                  		move.w	obX(a0),-(sp)
00012BCA 6100 0000                  		bsr.w	Elev_Types
00012BCE 341F                       		move.w	(sp)+,d2
00012BD0 4A10                       		tst.b	0(a0)
00012BD2 6700                       		beq.s	@deleted
00012BD4 4EF9 0000 91D6             		jmp	(MvSonicOnPtfm2).l
00012BDA                            
00012BDA                            	@deleted:
00012BDA 4E75                       		rts	
00012BDC                            ; ===========================================================================
00012BDC                            
00012BDC                            Elev_Types:
00012BDC 7000                       		moveq	#0,d0
00012BDE 1028 0028                  		move.b	obSubtype(a0),d0
00012BE2 0240 000F                  		andi.w	#$F,d0
00012BE6 D040                       		add.w	d0,d0
00012BE8 323B 0000                  		move.w	@index(pc,d0.w),d1
00012BEC 4EFB 1000                  		jmp	@index(pc,d1.w)
00012BF0                            ; ===========================================================================
00012BF0 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012BF4 0000 0000                  		dc.w @type02-@index, @type01-@index
00012BF8 0000 0000                  		dc.w @type04-@index, @type01-@index
00012BFC 0000 0000                  		dc.w @type06-@index, @type01-@index
00012C00 0000 0000                  		dc.w @type08-@index, @type09-@index
00012C04                            ; ===========================================================================
00012C04                            
00012C04                            @type00:
00012C04 4E75                       		rts	
00012C06                            ; ===========================================================================
00012C06                            
00012C06                            @type01:
00012C06 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012C0C 6600                       		bne.s	@notstanding
00012C0E 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012C12                            
00012C12                            	@notstanding:
00012C12 4E75                       		rts	
00012C14                            ; ===========================================================================
00012C14                            
00012C14                            @type02:
00012C14 6100 0000                  		bsr.w	Elev_Move
00012C18 3028 0034                  		move.w	$34(a0),d0
00012C1C 4440                       		neg.w	d0
00012C1E D068 0030                  		add.w	elev_origY(a0),d0
00012C22 3140 000C                  		move.w	d0,obY(a0)
00012C26 4E75                       		rts	
00012C28                            ; ===========================================================================
00012C28                            
00012C28                            @type04:
00012C28 6100 0000                  		bsr.w	Elev_Move
00012C2C 3028 0034                  		move.w	$34(a0),d0
00012C30 D068 0030                  		add.w	elev_origY(a0),d0
00012C34 3140 000C                  		move.w	d0,obY(a0)
00012C38 4E75                       		rts	
00012C3A                            ; ===========================================================================
00012C3A                            
00012C3A                            @type06:
00012C3A 6100 0000                  		bsr.w	Elev_Move
00012C3E 3028 0034                  		move.w	$34(a0),d0
00012C42 E240                       		asr.w	#1,d0
00012C44 4440                       		neg.w	d0
00012C46 D068 0030                  		add.w	elev_origY(a0),d0
00012C4A 3140 000C                  		move.w	d0,obY(a0)
00012C4E 3028 0034                  		move.w	$34(a0),d0
00012C52 D068 0032                  		add.w	elev_origX(a0),d0
00012C56 3140 0008                  		move.w	d0,obX(a0)
00012C5A 4E75                       		rts	
00012C5C                            ; ===========================================================================
00012C5C                            
00012C5C                            @type08:
00012C5C 6100 0000                  		bsr.w	Elev_Move
00012C60 3028 0034                  		move.w	$34(a0),d0
00012C64 E240                       		asr.w	#1,d0
00012C66 D068 0030                  		add.w	elev_origY(a0),d0
00012C6A 3140 000C                  		move.w	d0,obY(a0)
00012C6E 3028 0034                  		move.w	$34(a0),d0
00012C72 4440                       		neg.w	d0
00012C74 D068 0032                  		add.w	elev_origX(a0),d0
00012C78 3140 0008                  		move.w	d0,obX(a0)
00012C7C 4E75                       		rts	
00012C7E                            ; ===========================================================================
00012C7E                            
00012C7E                            @type09:
00012C7E 6100 0000                  		bsr.w	Elev_Move
00012C82 3028 0034                  		move.w	$34(a0),d0
00012C86 4440                       		neg.w	d0
00012C88 D068 0030                  		add.w	elev_origY(a0),d0
00012C8C 3140 000C                  		move.w	d0,obY(a0)
00012C90 4A28 0028                  		tst.b	obSubtype(a0)
00012C94 6700 0000                  		beq.w	@typereset
00012C98 4E75                       		rts	
00012C9A                            ; ===========================================================================
00012C9A                            
00012C9A                            	@typereset:
00012C9A 0828 0003 0022             		btst	#3,obStatus(a0)
00012CA0 6700                       		beq.s	@delete
00012CA2 08E9 0001 0022             		bset	#1,obStatus(a1)
00012CA8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012CAE 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012CB4                            
00012CB4                            	@delete:
00012CB4 6000 C7C4                  		bra.w	DeleteObject
00012CB8                            
00012CB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CB8                            
00012CB8                            
00012CB8                            Elev_Move:
00012CB8 3028 0038                  		move.w	$38(a0),d0
00012CBC 4A28 003A                  		tst.b	$3A(a0)
00012CC0 6600                       		bne.s	loc_10CC8
00012CC2 0C40 0800                  		cmpi.w	#$800,d0
00012CC6 6400                       		bcc.s	loc_10CD0
00012CC8 0640 0010                  		addi.w	#$10,d0
00012CCC 6000                       		bra.s	loc_10CD0
00012CCE                            ; ===========================================================================
00012CCE                            
00012CCE                            loc_10CC8:
00012CCE 4A40                       		tst.w	d0
00012CD0 6700                       		beq.s	loc_10CD0
00012CD2 0440 0010                  		subi.w	#$10,d0
00012CD6                            
00012CD6                            loc_10CD0:
00012CD6 3140 0038                  		move.w	d0,$38(a0)
00012CDA 48C0                       		ext.l	d0
00012CDC E180                       		asl.l	#8,d0
00012CDE D0A8 0034                  		add.l	$34(a0),d0
00012CE2 2140 0034                  		move.l	d0,$34(a0)
00012CE6 4840                       		swap	d0
00012CE8 3428 003C                  		move.w	elev_dist(a0),d2
00012CEC B042                       		cmp.w	d2,d0
00012CEE 6300                       		bls.s	loc_10CF0
00012CF0 117C 0001 003A             		move.b	#1,$3A(a0)
00012CF6                            
00012CF6                            loc_10CF0:
00012CF6 D442                       		add.w	d2,d2
00012CF8 B042                       		cmp.w	d2,d0
00012CFA 6600                       		bne.s	locret_10CFA
00012CFC 4228 0028                  		clr.b	obSubtype(a0)
00012D00                            
00012D00                            locret_10CFA:
00012D00 4E75                       		rts	
00012D02                            ; End of function Elev_Move
00012D02                            
00012D02                            ; ===========================================================================
00012D02                            
00012D02                            Elev_MakeMulti:	; Routine 6
00012D02 5368 003C                  		subq.w	#1,elev_dist(a0)
00012D06 6600                       		bne.s	@chkdel
00012D08 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012D0E 6100 CCC4                  		bsr.w	FindFreeObj
00012D12 6600                       		bne.s	@chkdel
00012D14 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012D18 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012D1E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012D24 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012D2A                            
00012D2A                            @chkdel:
00012D2A 588F                       		addq.l	#4,sp
00012D4A 4E75                       		rts	
00012D4A 4E75                       		rts	
00012D4C                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012D4C                            ; ---------------------------------------------------------------------------
00012D4C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012D4C                            ; ---------------------------------------------------------------------------
00012D4C                            Map_Elev_internal:
00012D4C 0000                       		dc.w @elevator-Map_Elev_internal
00012D4E 03                         @elevator:	dc.b 3
00012D4F F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012D54 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012D59 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012D5E                            		even
00012D5E                            		even
00012D5E                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E                            ; Object 5A - platforms	moving in circles (SLZ)
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E                            
00012D5E                            CirclingPlatform:
00012D5E 7000                       		moveq	#0,d0
00012D60 1028 0024                  		move.b	obRoutine(a0),d0
00012D64 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012D68 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012D8A 6000 C6AE                  		bra.w	DisplaySprite
00012D8E                            ; ===========================================================================
00012D8E 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012D90 0000                       		dc.w Circ_Platform-Circ_Index
00012D92 0000                       		dc.w Circ_Action-Circ_Index
00012D94                            
00012D94 =00000032                  circ_origX:	equ $32		; original x-axis position
00012D94 =00000030                  circ_origY:	equ $30		; original y-axis position
00012D94                            ; ===========================================================================
00012D94                            
00012D94                            Circ_Main:	; Routine 0
00012D94 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D98 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012DA0 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012DA6 117C 0004 0001             		move.b	#4,obRender(a0)
00012DAC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012DB2 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DB8 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012DBE 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012DC4                            
00012DC4                            Circ_Platform:	; Routine 2
00012DC4 7200                       		moveq	#0,d1
00012DC6 1228 0014                  		move.b	obActWid(a0),d1
00012DCA 4EB9 0000 8AF8             		jsr	(PlatformObject).l
00012DD0 6000 0000                  		bra.w	Circ_Types
00012DD4                            ; ===========================================================================
00012DD4                            
00012DD4                            Circ_Action:	; Routine 4
00012DD4 7200                       		moveq	#0,d1
00012DD6 1228 0014                  		move.b	obActWid(a0),d1
00012DDA 4EB9 0000 8C6C             		jsr	(ExitPlatform).l
00012DE0 3F28 0008                  		move.w	obX(a0),-(sp)
00012DE4 6100 0000                  		bsr.w	Circ_Types
00012DE8 341F                       		move.w	(sp)+,d2
00012DEA 4EF9 0000 91D6             		jmp	(MvSonicOnPtfm2).l
00012DF0                            ; ===========================================================================
00012DF0                            
00012DF0                            Circ_Types:
00012DF0 7000                       		moveq	#0,d0
00012DF2 1028 0028                  		move.b	obSubtype(a0),d0
00012DF6 0240 000C                  		andi.w	#$C,d0
00012DFA E248                       		lsr.w	#1,d0
00012DFC 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E00 4EFB 1000                  		jmp	@index(pc,d1.w)
00012E04                            ; ===========================================================================
00012E04 0000                       @index:		dc.w @type00-@index
00012E06 0000                       		dc.w @type04-@index
00012E08                            ; ===========================================================================
00012E08                            
00012E08                            @type00:
00012E08 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012E0C 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00012E10 4881                       		ext.w	d1
00012E12 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012E16 0402 0050                  		subi.b	#$50,d2
00012E1A 4882                       		ext.w	d2
00012E1C 0828 0000 0028             		btst	#0,obSubtype(a0)
00012E22 6700                       		beq.s	@noshift00a
00012E24 4441                       		neg.w	d1
00012E26 4442                       		neg.w	d2
00012E28                            
00012E28                            	@noshift00a:
00012E28 0828 0001 0028             		btst	#1,obSubtype(a0)
00012E2E 6700                       		beq.s	@noshift00b
00012E30 4441                       		neg.w	d1
00012E32 C342                       		exg	d1,d2
00012E34                            
00012E34                            	@noshift00b:
00012E34 D268 0032                  		add.w	circ_origX(a0),d1
00012E38 3141 0008                  		move.w	d1,obX(a0)
00012E3C D468 0030                  		add.w	circ_origY(a0),d2
00012E40 3142 000C                  		move.w	d2,obY(a0)
00012E44 4E75                       		rts	
00012E46                            ; ===========================================================================
00012E46                            
00012E46                            @type04:
00012E46 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00012E4A 0401 0050                  		subi.b	#$50,d1
00012E4E 4881                       		ext.w	d1
00012E50 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012E54 0402 0050                  		subi.b	#$50,d2
00012E58 4882                       		ext.w	d2
00012E5A 0828 0000 0028             		btst	#0,obSubtype(a0)
00012E60 6700                       		beq.s	@noshift04a
00012E62 4441                       		neg.w	d1
00012E64 4442                       		neg.w	d2
00012E66                            
00012E66                            	@noshift04a:
00012E66 0828 0001 0028             		btst	#1,obSubtype(a0)
00012E6C 6700                       		beq.s	@noshift04b
00012E6E 4441                       		neg.w	d1
00012E70 C342                       		exg	d1,d2
00012E72                            
00012E72                            	@noshift04b:
00012E72 4441                       		neg.w	d1
00012E74 D268 0032                  		add.w	circ_origX(a0),d1
00012E78 3141 0008                  		move.w	d1,obX(a0)
00012E7C D468 0030                  		add.w	circ_origY(a0),d2
00012E80 3142 000C                  		move.w	d2,obY(a0)
00012E84 4E75                       		rts	
00012E84 4E75                       		rts	
00012E86                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00012E86                            ; ---------------------------------------------------------------------------
00012E86                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012E86                            ; ---------------------------------------------------------------------------
00012E86                            Map_Circ_internal:
00012E86 0000                       		dc.w @platform-Map_Circ_internal
00012E88 02                         @platform:	dc.b 2
00012E89 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012E8E F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012E94 00                         		even
00012E94 00                         		even
00012E94                            		include	"_incObj\5B Staircase.asm"
00012E94                            ; ---------------------------------------------------------------------------
00012E94                            ; Object 5B - blocks that form a staircase (SLZ)
00012E94                            ; ---------------------------------------------------------------------------
00012E94                            
00012E94                            Staircase:
00012E94 7000                       		moveq	#0,d0
00012E96 1028 0024                  		move.b	obRoutine(a0),d0
00012E9A 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00012E9E 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00012EC0 6000 C578                  		bra.w	DisplaySprite
00012EC4                            ; ===========================================================================
00012EC4 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
00012EC6 0000                       		dc.w Stair_Move-Stair_Index
00012EC8 0000                       		dc.w Stair_Solid-Stair_Index
00012ECA                            
00012ECA =00000030                  stair_origX:	equ $30		; original x-axis position
00012ECA =00000032                  stair_origY:	equ $32		; original y-axis position
00012ECA                            
00012ECA =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00012ECA                            ; ===========================================================================
00012ECA                            
00012ECA                            Stair_Main:	; Routine 0
00012ECA 5428 0024                  		addq.b	#2,obRoutine(a0)
00012ECE 7638                       		moveq	#$38,d3
00012ED0 7801                       		moveq	#1,d4
00012ED2 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
00012ED8 6700                       		beq.s	@notflipped	; if not, branch
00012EDA 763B                       		moveq	#$3B,d3
00012EDC 78FF                       		moveq	#-1,d4
00012EDE                            
00012EDE                            	@notflipped:
00012EDE 3428 0008                  		move.w	obX(a0),d2
00012EE2 2248                       		movea.l	a0,a1
00012EE4 7203                       		moveq	#3,d1
00012EE6 6000                       		bra.s	@makeblocks
00012EE8                            ; ===========================================================================
00012EE8                            
00012EE8                            @loop:
00012EE8 6100 CB00                  		bsr.w	FindNextFreeObj
00012EEC 6600 0000                  		bne.w	@fail
00012EF0 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012EF6                            
00012EF6                            @makeblocks:
00012EF6 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00012EFA 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00012F02 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00012F08 137C 0004 0001             		move.b	#4,obRender(a1)
00012F0E 337C 0180 0018             		move.w	#$180,obPriority(a1)
00012F14 137C 0010 0014             		move.b	#$10,obActWid(a1)
00012F1A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00012F20 3342 0008                  		move.w	d2,obX(a1)
00012F24 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012F2A 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00012F30 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00012F36 0642 0020                  		addi.w	#$20,d2
00012F3A 1343 0037                  		move.b	d3,$37(a1)
00012F3E 2348 003C                  		move.l	a0,stair_parent(a1)
00012F42 D604                       		add.b	d4,d3
00012F44 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00012F48                            
00012F48                            	@fail:
00012F48                            
00012F48                            Stair_Move:	; Routine 2
00012F48 7000                       		moveq	#0,d0
00012F4A 1028 0028                  		move.b	obSubtype(a0),d0
00012F4E 0240 0007                  		andi.w	#7,d0
00012F52 D040                       		add.w	d0,d0
00012F54 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00012F58 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00012F5C                            
00012F5C                            Stair_Solid:	; Routine 4
00012F5C 2468 003C                  		movea.l	stair_parent(a0),a2
00012F60 7000                       		moveq	#0,d0
00012F62 1028 0037                  		move.b	$37(a0),d0
00012F66 1032 0000                  		move.b	(a2,d0.w),d0
00012F6A D068 0032                  		add.w	stair_origY(a0),d0
00012F6E 3140 000C                  		move.w	d0,obY(a0)
00012F72 7200                       		moveq	#0,d1
00012F74 1228 0014                  		move.b	obActWid(a0),d1
00012F78 0641 000B                  		addi.w	#$B,d1
00012F7C 343C 0010                  		move.w	#$10,d2
00012F80 363C 0011                  		move.w	#$11,d3
00012F84 3828 0008                  		move.w	obX(a0),d4
00012F88 6100 E9E8                  		bsr.w	SolidObject
00012F8C 4A04                       		tst.b	d4
00012F8E 6A00                       		bpl.s	loc_10F92
00012F90 1544 0036                  		move.b	d4,$36(a2)
00012F94                            
00012F94                            loc_10F92:
00012F94 0828 0003 0022             		btst	#3,obStatus(a0)
00012F9A 6700                       		beq.s	locret_10FA0
00012F9C 157C 0001 0036             		move.b	#1,$36(a2)
00012FA2                            
00012FA2                            locret_10FA0:
00012FA2 4E75                       		rts	
00012FA4                            ; ===========================================================================
00012FA4 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00012FA6 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00012FA8 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00012FAA 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00012FAC                            ; ===========================================================================
00012FAC                            
00012FAC                            Stair_Type00:
00012FAC 4A68 0034                  		tst.w	$34(a0)
00012FB0 6600                       		bne.s	loc_10FC0
00012FB2 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012FB8 6600                       		bne.s	locret_10FBE
00012FBA 317C 001E 0034             		move.w	#$1E,$34(a0)
00012FC0                            
00012FC0                            locret_10FBE:
00012FC0 4E75                       		rts	
00012FC2                            ; ===========================================================================
00012FC2                            
00012FC2                            loc_10FC0:
00012FC2 5368 0034                  		subq.w	#1,$34(a0)
00012FC6 66F8                       		bne.s	locret_10FBE
00012FC8 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00012FCC 4E75                       		rts	
00012FCE                            ; ===========================================================================
00012FCE                            
00012FCE                            Stair_Type02:
00012FCE 4A68 0034                  		tst.w	$34(a0)
00012FD2 6600                       		bne.s	loc_10FE0
00012FD4 4A28 0036                  		tst.b	$36(a0)
00012FD8 6A00                       		bpl.s	locret_10FDE
00012FDA 317C 003C 0034             		move.w	#$3C,$34(a0)
00012FE0                            
00012FE0                            locret_10FDE:
00012FE0 4E75                       		rts	
00012FE2                            ; ===========================================================================
00012FE2                            
00012FE2                            loc_10FE0:
00012FE2 5368 0034                  		subq.w	#1,$34(a0)
00012FE6 6600                       		bne.s	loc_10FEC
00012FE8 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00012FEC 4E75                       		rts	
00012FEE                            ; ===========================================================================
00012FEE                            
00012FEE                            loc_10FEC:
00012FEE 43E8 0038                  		lea	$38(a0),a1
00012FF2 3028 0034                  		move.w	$34(a0),d0
00012FF6 E408                       		lsr.b	#2,d0
00012FF8 0200 0001                  		andi.b	#1,d0
00012FFC 12C0                       		move.b	d0,(a1)+
00012FFE 0A00 0001                  		eori.b	#1,d0
00013002 12C0                       		move.b	d0,(a1)+
00013004 0A00 0001                  		eori.b	#1,d0
00013008 12C0                       		move.b	d0,(a1)+
0001300A 0A00 0001                  		eori.b	#1,d0
0001300E 12C0                       		move.b	d0,(a1)+
00013010 4E75                       		rts	
00013012                            ; ===========================================================================
00013012                            
00013012                            Stair_Type01:
00013012 43E8 0038                  		lea	$38(a0),a1
00013016 0C11 0080                  		cmpi.b	#$80,(a1)
0001301A 6700                       		beq.s	locret_11038
0001301C 5211                       		addq.b	#1,(a1)
0001301E 7200                       		moveq	#0,d1
00013020 1219                       		move.b	(a1)+,d1
00013022 4841                       		swap	d1
00013024 E289                       		lsr.l	#1,d1
00013026 2401                       		move.l	d1,d2
00013028 E289                       		lsr.l	#1,d1
0001302A 2601                       		move.l	d1,d3
0001302C D682                       		add.l	d2,d3
0001302E 4841                       		swap	d1
00013030 4842                       		swap	d2
00013032 4843                       		swap	d3
00013034 12C3                       		move.b	d3,(a1)+
00013036 12C2                       		move.b	d2,(a1)+
00013038 12C1                       		move.b	d1,(a1)+
0001303A                            
0001303A                            locret_11038:
0001303A 4E75                       		rts	
0001303C 4E75                       		rts	
0001303C 4E75                       		rts	
0001303E                            Map_Stair:	include	"_maps\Staircase.asm"
0001303E                            ; ---------------------------------------------------------------------------
0001303E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001303E                            ; ---------------------------------------------------------------------------
0001303E                            Map_Stair_internal:
0001303E 0000                       		dc.w @block-Map_Stair_internal
00013040 01                         @block:		dc.b 1
00013041 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013046                            		even
00013046                            		even
00013046                            		include	"_incObj\5C Pylon.asm"
00013046                            ; ---------------------------------------------------------------------------
00013046                            ; Object 5C - metal pylons in foreground (SLZ)
00013046                            ; ---------------------------------------------------------------------------
00013046                            
00013046                            Pylon:
00013046 7000                       		moveq	#0,d0
00013048 1028 0024                  		move.b	obRoutine(a0),d0
0001304C 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013050 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013054                            ; ===========================================================================
00013054 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013056 0000                       		dc.w Pyl_Display-Pyl_Index
00013058                            ; ===========================================================================
00013058                            
00013058                            Pyl_Main:	; Routine 0
00013058 5428 0024                  		addq.b	#2,obRoutine(a0)
0001305C 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013064 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001306A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013070                            
00013070                            Pyl_Display:	; Routine 2
00013070 2238 F700                  		move.l	(v_screenposx).w,d1
00013074 D281                       		add.l	d1,d1
00013076 4841                       		swap	d1
00013078 4441                       		neg.w	d1
0001307A 3141 0008                  		move.w	d1,obX(a0)
0001307E 2238 F704                  		move.l	(v_screenposy).w,d1
00013082 D281                       		add.l	d1,d1
00013084 4841                       		swap	d1
00013086 0241 003F                  		andi.w	#$3F,d1
0001308A 4441                       		neg.w	d1
0001308C 0641 0100                  		addi.w	#$100,d1
00013090 3141 000A                  		move.w	d1,obScreenY(a0)
00013094 6000 C3A4                  		bra.w	DisplaySprite
00013094 6000 C3A4                  		bra.w	DisplaySprite
00013098                            Map_Pylon:	include	"_maps\Pylon.asm"
00013098                            ; ---------------------------------------------------------------------------
00013098                            ; Sprite mappings - metal pylons in foreground (SLZ)
00013098                            ; ---------------------------------------------------------------------------
00013098                            Map_Pylon_internal:
00013098 0000                       		dc.w @pylon-Map_Pylon_internal
0001309A 09                         @pylon:		dc.b 9
0001309B 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000130A0 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000130A5 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000130AA E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000130AF 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000130B4 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000130B9 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000130BE 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000130C3 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000130C8                            		even
000130C8                            		even
000130C8                            
000130C8                            		include	"_incObj\1B Water Surface.asm"
000130C8                            ; ---------------------------------------------------------------------------
000130C8                            ; Object 1B - water surface (LZ)
000130C8                            ; ---------------------------------------------------------------------------
000130C8                            
000130C8                            WaterSurface:
000130C8 7000                       		moveq	#0,d0
000130CA 1028 0024                  		move.b	obRoutine(a0),d0
000130CE 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000130D2 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000130D6                            ; ===========================================================================
000130D6 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000130D8 0000                       		dc.w Surf_Action-Surf_Index
000130DA                            
000130DA =00000030                  surf_origX:	equ $30		; original x-axis position
000130DA =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000130DA                            ; ===========================================================================
000130DA                            
000130DA                            Surf_Main:	; Routine 0
000130DA 5428 0024                  		addq.b	#2,obRoutine(a0)
000130DE 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000130E6 317C C300 0002             		move.w	#$C300,obGfx(a0)
000130EC 117C 0004 0001             		move.b	#4,obRender(a0)
000130F2 117C 0080 0014             		move.b	#$80,obActWid(a0)
000130F8 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000130FE                            
000130FE                            Surf_Action:	; Routine 2
000130FE 3238 F700                  		move.w	(v_screenposx).w,d1
00013102 0241 FFE0                  		andi.w	#$FFE0,d1
00013106 D268 0030                  		add.w	surf_origX(a0),d1
0001310A 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013110 6700                       		beq.s	@even		; branch on even frames
00013112 0641 0020                  		addi.w	#$20,d1
00013116                            
00013116                            	@even:
00013116 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
0001311A 3238 F646                  		move.w	(v_waterpos1).w,d1
0001311E 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
00013122 4A28 0032                  		tst.b	surf_freeze(a0)
00013126 6600                       		bne.s	@stopped
00013128 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
0001312E 6700                       		beq.s	@animate	; if not, branch
00013130 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013134 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
0001313A 6000                       		bra.s	@display
0001313C                            ; ===========================================================================
0001313C                            
0001313C                            @stopped:
0001313C 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013140 6600                       		bne.s	@display	; if yes, branch
00013142 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013148 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
0001314C                            
0001314C                            @animate:
0001314C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013150 6A00                       		bpl.s	@display
00013152 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013158 5228 001A                  		addq.b	#1,obFrame(a0)
0001315C 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013162 6500                       		bcs.s	@display
00013164 117C 0000 001A             		move.b	#0,obFrame(a0)
0001316A                            
0001316A                            @display:
0001316A 6000 C2CE                  		bra.w	DisplaySprite
0001316A 6000 C2CE                  		bra.w	DisplaySprite
0001316E                            Map_Surf:	include	"_maps\Water Surface.asm"
0001316E                            ; --------------------------------------------------------------------------------
0001316E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001316E                            ; --------------------------------------------------------------------------------
0001316E                            
0001316E                            SME_LGSi8:	
0001316E 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013172 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013176 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
0001317A 03                         SME_LGSi8_C:	dc.b 3	
0001317B F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013180 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013185 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001318A 03                         SME_LGSi8_1C:	dc.b 3	
0001318B F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013190 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013195 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001319A 03                         SME_LGSi8_2C:	dc.b 3	
0001319B F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000131A0 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000131A5 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000131AA 06                         SME_LGSi8_3C:	dc.b 6	
000131AB F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000131B0 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000131B5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000131BA F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000131BF F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000131C4 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000131C9 06                         SME_LGSi8_5B:	dc.b 6	
000131CA F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000131CF F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000131D4 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000131D9 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000131DE F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000131E3 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000131E8 06                         SME_LGSi8_7A:	dc.b 6	
000131E9 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000131EE F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000131F3 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000131F8 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
000131FD F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013202 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013208 00                         		even
00013208 00                         		even
00013208                            		include	"_incObj\0B Pole that Breaks.asm"
00013208                            ; ---------------------------------------------------------------------------
00013208                            ; Object 0B - pole that	breaks (LZ)
00013208                            ; ---------------------------------------------------------------------------
00013208                            
00013208                            Pole:
00013208 7000                       		moveq	#0,d0
0001320A 1028 0024                  		move.b	obRoutine(a0),d0
0001320E 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
00013212 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013216                            ; ===========================================================================
00013216 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013218 0000                       		dc.w Pole_Action-Pole_Index
0001321A 0000                       		dc.w Pole_Display-Pole_Index
0001321C                            
0001321C =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
0001321C =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
0001321C                            ; ===========================================================================
0001321C                            
0001321C                            Pole_Main:	; Routine 0
0001321C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013220 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013228 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
0001322E 117C 0004 0001             		move.b	#4,obRender(a0)
00013234 117C 0008 0014             		move.b	#8,obActWid(a0)
0001323A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013240 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013246 7000                       		moveq	#0,d0
00013248 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001324C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013250 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013254                            
00013254                            Pole_Action:	; Routine 2
00013254 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013258 6700                       		beq.s	@grab		; if not, branch
0001325A 4A68 0030                  		tst.w	pole_time(a0)
0001325E 6700                       		beq.s	@moveup
00013260 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013264 6600                       		bne.s	@moveup
00013266 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
0001326C 6000                       		bra.s	@release
0001326E                            ; ===========================================================================
0001326E                            
0001326E                            @moveup:
0001326E 43F8 D000                  		lea	(v_player).w,a1
00013272 3028 000C                  		move.w	obY(a0),d0
00013276 0440 0018                  		subi.w	#$18,d0
0001327A 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013280 6700                       		beq.s	@movedown	; if not, branch
00013282 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00013286 B069 000C                  		cmp.w	obY(a1),d0
0001328A 6500                       		bcs.s	@movedown
0001328C 3340 000C                  		move.w	d0,obY(a1)
00013290                            
00013290                            @movedown:
00013290 0640 0024                  		addi.w	#$24,d0
00013294 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
0001329A 6700                       		beq.s	@letgo		; if not, branch
0001329C 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000132A0 B069 000C                  		cmp.w	obY(a1),d0
000132A4 6400                       		bcc.s	@letgo
000132A6 3340 000C                  		move.w	d0,obY(a1)
000132AA                            
000132AA                            @letgo:
000132AA 1038 F603                  		move.b	(v_jpadpress2).w,d0
000132AE 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000132B2 6700                       		beq.s	Pole_Display	; if not, branch
000132B4                            
000132B4                            @release:
000132B4 4228 0020                  		clr.b	obColType(a0)
000132B8 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000132BC 4238 F7C8                  		clr.b	(f_lockmulti).w
000132C0 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000132C4 4228 0032                  		clr.b	pole_grabbed(a0)
000132C8 6000                       		bra.s	Pole_Display
000132CA                            ; ===========================================================================
000132CA                            
000132CA                            @grab:
000132CA 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000132CE 6700                       		beq.s	Pole_Display	; if not, branch
000132D0 43F8 D000                  		lea	(v_player).w,a1
000132D4 3028 0008                  		move.w	obX(a0),d0
000132D8 0640 0014                  		addi.w	#$14,d0
000132DC B069 0008                  		cmp.w	obX(a1),d0
000132E0 6400                       		bcc.s	Pole_Display
000132E2 4228 0021                  		clr.b	obColProp(a0)
000132E6 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000132EC 6400                       		bcc.s	Pole_Display
000132EE 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000132F2 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000132F6 3028 0008                  		move.w	obX(a0),d0
000132FA 0640 0014                  		addi.w	#$14,d0
000132FE 3340 0008                  		move.w	d0,obX(a1)
00013302 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013308 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
0001330E 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00013314 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
0001331A 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013320                            
00013320                            Pole_Display:	; Routine 4
00013320 6000 E1B8                  		bra.w	RememberState
00013320 6000 E1B8                  		bra.w	RememberState
00013324                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00013324                            ; ---------------------------------------------------------------------------
00013324                            ; Sprite mappings - pole that breaks (LZ)
00013324                            ; ---------------------------------------------------------------------------
00013324                            Map_Pole_internal:
00013324 0000                       		dc.w @normal-Map_Pole_internal
00013326 0000                       		dc.w @broken-Map_Pole_internal
00013328 02                         @normal:	dc.b 2			; normal pole
00013329 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001332E 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00013333 04                         @broken:	dc.b 4			; broken pole
00013334 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013339 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001333E 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00013343 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013348                            		even
00013348                            		even
00013348                            		include	"_incObj\0C Flapping Door.asm"
00013348                            ; ---------------------------------------------------------------------------
00013348                            ; Object 0C - flapping door (LZ)
00013348                            ; ---------------------------------------------------------------------------
00013348                            
00013348                            FlapDoor:
00013348 7000                       		moveq	#0,d0
0001334A 1028 0024                  		move.b	obRoutine(a0),d0
0001334E 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00013352 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013356                            ; ===========================================================================
00013356 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013358 0000                       		dc.w Flap_OpenClose-Flap_Index
0001335A                            
0001335A =00000032                  flap_time:	equ $32		; time between opening/closing
0001335A =00000030                  flap_wait:	equ $30		; time until change
0001335A                            ; ===========================================================================
0001335A                            
0001335A                            Flap_Main:	; Routine 0
0001335A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001335E 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013366 317C 4328 0002             		move.w	#$4328,obGfx(a0)
0001336C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013372 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013378 7000                       		moveq	#0,d0
0001337A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001337E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013382 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00013386                            
00013386                            Flap_OpenClose:	; Routine 2
00013386 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
0001338A 6A00                       		bpl.s	@wait		; if time remains, branch
0001338C 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013392 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
00013398 4A28 0001                  		tst.b	obRender(a0)
0001339C 6A00                       		bpl.s	@nosound
000133A8                            
000133A8                            	@wait:
000133A8                            	@nosound:
000133A8 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000133AE 6100 9144                  		bsr.w	AnimateSprite
000133B2 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000133B6 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000133BA 6600                       		bne.s	@display	; if yes, branch
000133BC 3038 D008                  		move.w	(v_player+obX).w,d0
000133C0 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000133C4 6400                       		bcc.s	@display	; if yes, branch
000133C6 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000133CC 323C 0013                  		move.w	#$13,d1
000133D0 343C 0020                  		move.w	#$20,d2
000133D4 3602                       		move.w	d2,d3
000133D6 5243                       		addq.w	#1,d3
000133D8 3828 0008                  		move.w	obX(a0),d4
000133DC 6100 E594                  		bsr.w	SolidObject	; make the door	solid
000133E0                            
000133E0                            	@display:
000133E0 6000 E0F8                  		bra.w	RememberState
000133E0 6000 E0F8                  		bra.w	RememberState
000133E4                            		include	"_anim\Flapping Door.asm"
000133E4                            ; ---------------------------------------------------------------------------
000133E4                            ; Animation script - flapping door (LZ)
000133E4                            ; ---------------------------------------------------------------------------
000133E4 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000133E6 0000                       		dc.w @closing-Ani_Flap
000133E8 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000133EE 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000133F4                            		even
000133F4                            		even
000133F4                            Map_Flap:	include	"_maps\Flapping Door.asm"
000133F4                            ; ---------------------------------------------------------------------------
000133F4                            ; Sprite mappings - flapping door (LZ)
000133F4                            ; ---------------------------------------------------------------------------
000133F4                            Map_Flap_internal:
000133F4 0000                       		dc.w @closed-Map_Flap_internal
000133F6 0000                       		dc.w @halfway-Map_Flap_internal
000133F8 0000                       		dc.w @open-Map_Flap_internal
000133FA 02                         @closed:	dc.b 2
000133FB E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013400 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013405 02                         @halfway:	dc.b 2
00013406 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001340B 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013410 02                         @open:		dc.b 2
00013411 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013416 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001341C 00                         		even
0001341C 00                         		even
0001341C                            
0001341C                            		include	"_incObj\71 Invisible Barriers.asm"
0001341C                            ; ---------------------------------------------------------------------------
0001341C                            ; Object 71 - invisible	solid barriers
0001341C                            ; ---------------------------------------------------------------------------
0001341C                            
0001341C                            Invisibarrier:
0001341C 7000                       		moveq	#0,d0
0001341E 1028 0024                  		move.b	obRoutine(a0),d0
00013422 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013426 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
0001342A                            ; ===========================================================================
0001342A 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
0001342C 0000                       		dc.w Invis_Solid-Invis_Index
0001342E                            
0001342E =00000016                  invis_height:	equ $16		; height in pixels
0001342E                            ; ===========================================================================
0001342E                            
0001342E                            Invis_Main:	; Routine 0
0001342E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013432 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
0001343A 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013440 0028 0004 0001             		ori.b	#4,obRender(a0)
00013446 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001344A 1200                       		move.b	d0,d1
0001344C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013450 0640 0010                  		addi.w	#$10,d0
00013454 E248                       		lsr.w	#1,d0
00013456 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
0001345A 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001345E 5241                       		addq.w	#1,d1
00013460 E749                       		lsl.w	#3,d1
00013462 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013466                            
00013466                            Invis_Solid:	; Routine 2
00013466 6100 C360                  		bsr.w	ChkObjectVisible
0001346A 6600                       		bne.s	@chkdel
0001346C 7200                       		moveq	#0,d1
0001346E 1228 0014                  		move.b	obActWid(a0),d1
00013472 0641 000B                  		addi.w	#$B,d1
00013476 7400                       		moveq	#0,d2
00013478 1428 0016                  		move.b	invis_height(a0),d2
0001347C 3602                       		move.w	d2,d3
0001347E 5243                       		addq.w	#1,d3
00013480 3828 0008                  		move.w	obX(a0),d4
00013484 6100 E534                  		bsr.w	SolidObject71
00013488                            
00013488                            @chkdel:
000134A4 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000134A8 6700                       		beq.s	@nodisplay	; if not, branch
000134AA 4EF9 0000 F43A             		jmp	(DisplaySprite).l	; if yes, display the object
000134B0                            
000134B0                            	@nodisplay:
000134B0 4E75                       		rts	
000134B2                            
000134B2                            	@delete:
000134B2 4EF9 0000 F47A             		jmp	(DeleteObject).l
000134B2 4EF9 0000 F47A             		jmp	(DeleteObject).l
000134B8                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000134B8                            ; --------------------------------------------------------------------------------
000134B8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000134B8                            ; --------------------------------------------------------------------------------
000134B8                            
000134B8                            SME_t60cE:	
000134B8 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000134BC 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000134BE 04                         SME_t60cE_6:	dc.b 4	
000134BF 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000134C4 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000134C9 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000134CE F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000134D3 04                         SME_t60cE_1B:	dc.b 4	
000134D4 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000134D9 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000134DE 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000134E3 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000134E8 04                         SME_t60cE_30:	dc.b 4	
000134E9 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000134EE E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000134F3 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
000134F8 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
000134FE 00                         		even
000134FE 00                         		even
000134FE                            
000134FE                            		include	"_incObj\5D Fan.asm"
000134FE                            ; ---------------------------------------------------------------------------
000134FE                            ; Object 5D - fans (SLZ)
000134FE                            ; ---------------------------------------------------------------------------
000134FE                            
000134FE                            Fan:
000134FE 7000                       		moveq	#0,d0
00013500 1028 0024                  		move.b	obRoutine(a0),d0
00013504 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013508 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
0001350C                            ; ===========================================================================
0001350C 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
0001350E 0000                       		dc.w Fan_Delay-Fan_Index
00013510                            
00013510 =00000030                  fan_time:	equ $30		; time between switching on/off
00013510 =00000032                  fan_switch:	equ $32		; on/off switch
00013510                            ; ===========================================================================
00013510                            
00013510                            Fan_Main:	; Routine 0
00013510 5428 0024                  		addq.b	#2,obRoutine(a0)
00013514 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
0001351C 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
00013522 0028 0004 0001             		ori.b	#4,obRender(a0)
00013528 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001352E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013534                            
00013534                            Fan_Delay:	; Routine 2
00013534 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
0001353A 6600                       		bne.s	@blow		; if yes, branch
0001353C 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013540 6A00                       		bpl.s	@blow		; if time remains, branch
00013542 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013548 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
0001354E 6700                       		beq.s	@blow		; if fan is off, branch
00013550 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013556                            
00013556                            @blow:
00013556 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
0001355A 6600 0000                  		bne.w	@chkdel		; if not, branch
0001355E 43F8 D000                  		lea	(v_player).w,a1
00013562 3029 0008                  		move.w	obX(a1),d0
00013566 9068 0008                  		sub.w	obX(a0),d0
0001356A 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013570 6600                       		bne.s	@chksonic	; if yes, branch
00013572 4440                       		neg.w	d0
00013574                            
00013574                            @chksonic:
00013574 0640 0050                  		addi.w	#$50,d0
00013578 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001357C 6400                       		bcc.s	@animate	; if yes, branch
0001357E 3229 000C                  		move.w	obY(a1),d1
00013582 0641 0060                  		addi.w	#$60,d1
00013586 9268 000C                  		sub.w	obY(a0),d1
0001358A 6500                       		bcs.s	@animate	; branch if Sonic is too low
0001358C 0C41 0070                  		cmpi.w	#$70,d1
00013590 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013592 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013596 6400                       		bcc.s	@faraway	; if yes, branch
00013598 4640                       		not.w	d0
0001359A D040                       		add.w	d0,d0
0001359C                            
0001359C                            	@faraway:
0001359C 0640 0060                  		addi.w	#$60,d0
000135A0 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000135A6 6600                       		bne.s	@right		; if yes, branch
000135A8 4440                       		neg.w	d0
000135AA                            
000135AA                            	@right:
000135AA 4400                       		neg.b	d0
000135AC E840                       		asr.w	#4,d0
000135AE 0828 0000 0028             		btst	#0,obSubtype(a0)
000135B4 6700                       		beq.s	@movesonic
000135B6 4440                       		neg.w	d0
000135B8                            
000135B8                            	@movesonic:
000135B8 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000135BC                            
000135BC                            @animate:
000135BC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000135C0 6A00                       		bpl.s	@chkdel
000135C2 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000135C8 5228 001B                  		addq.b	#1,obAniFrame(a0)
000135CC 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000135D2 6500                       		bcs.s	@noreset
000135D4 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000135DA                            
000135DA                            	@noreset:
000135DA 7000                       		moveq	#0,d0
000135DC 0828 0000 0028             		btst	#0,obSubtype(a0)
000135E2 6700                       		beq.s	@noflip
000135E4 7002                       		moveq	#2,d0
000135E6                            
000135E6                            	@noflip:
000135E6 D028 001B                  		add.b	obAniFrame(a0),d0
000135EA 1140 001A                  		move.b	d0,obFrame(a0)
000135EE                            
000135EE                            @chkdel:
000135EE 6100 BE4A                  		bsr.w	DisplaySprite
00013610 4E75                       		rts	
00013610 4E75                       		rts	
00013612                            Map_Fan:	include	"_maps\Fan.asm"
00013612                            ; ---------------------------------------------------------------------------
00013612                            ; Sprite mappings - fans (SLZ)
00013612                            ; ---------------------------------------------------------------------------
00013612                            Map_Fan_internal:
00013612 0000                       		dc.w @fan1-Map_Fan_internal
00013614 0000                       		dc.w @fan2-Map_Fan_internal
00013616 0000                       		dc.w @fan3-Map_Fan_internal
00013618 0000                       		dc.w @fan2-Map_Fan_internal
0001361A 0000                       		dc.w @fan1-Map_Fan_internal
0001361C 02                         @fan1:		dc.b 2
0001361D F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013622 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013627 02                         @fan2:		dc.b 2
00013628 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001362D 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013632 02                         @fan3:		dc.b 2
00013633 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013638 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001363E 00                         		even
0001363E 00                         		even
0001363E                            		include	"_incObj\5E Seesaw.asm"
0001363E                            ; ---------------------------------------------------------------------------
0001363E                            ; Object 5E - seesaws (SLZ)
0001363E                            ; ---------------------------------------------------------------------------
0001363E                            
0001363E                            Seesaw:
0001363E 7000                       		moveq	#0,d0
00013640 1028 0024                  		move.b	obRoutine(a0),d0
00013644 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013648 4EBB 1000                  		jsr	See_Index(pc,d1.w)
0001364C 3028 0000                  		move.w	see_origX(a0),d0
00013650 0240 FF80                  		andi.w	#$FF80,d0
00013654 3238 F700                  		move.w	(v_screenposx).w,d1
00013658 0441 0080                  		subi.w	#$80,d1
0001365C 0241 FF80                  		andi.w	#$FF80,d1
00013660 9041                       		sub.w	d1,d0
00013662 6B00 BE16                  		bmi.w	DeleteObject
00013666 0C40 0280                  		cmpi.w	#$280,d0
0001366A 6200 BE0E                  		bhi.w	DeleteObject
0001366E 6000 BDCA                  		bra.w	DisplaySprite
00013672                            ; ===========================================================================
00013672 0000                       See_Index:	dc.w See_Main-See_Index
00013674 0000                       		dc.w See_Slope-See_Index
00013676 0000                       		dc.w See_Slope2-See_Index
00013678 0000                       		dc.w See_Spikeball-See_Index
0001367A 0000                       		dc.w See_MoveSpike-See_Index
0001367C 0000                       		dc.w See_SpikeFall-See_Index
0001367E                            
0001367E =00000030                  see_origX:	equ $30		; original x-axis position
0001367E =00000034                  see_origY:	equ $34		; original y-axis position
0001367E =00000038                  see_speed:	equ $38		; speed of collision
0001367E =0000003A                  see_frame:	equ $3A		; 
0001367E =0000003C                  see_parent:	equ $3C		; RAM address of parent object
0001367E                            ; ===========================================================================
0001367E                            
0001367E                            See_Main:	; Routine 0
0001367E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013682 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
0001368A 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013690 0028 0004 0001             		ori.b	#4,obRender(a0)
00013696 117C 0004 0018             		move.b	#4,obPriority(a0)
0001369C 117C 0030 0014             		move.b	#$30,obActWid(a0)
000136A2 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
000136A8 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
000136AC 6600                       		bne.s	@noball		; if not, branch
000136AE                            
000136AE 6100 C33A                  		bsr.w	FindNextFreeObj
000136B2 6600                       		bne.s	@noball
000136B4 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
000136B8 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
000136BC 3368 0008 0008             		move.w	obX(a0),obX(a1)
000136C2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000136C8 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000136CE 2348 003C                  		move.l	a0,see_parent(a1)
000136D2                            
000136D2                            	@noball:
000136D2 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000136D8 6700                       		beq.s	@noflip		; if not, branch
000136DA 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
000136E0                            
000136E0                            	@noflip:
000136E0 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
000136E6                            
000136E6                            See_Slope:	; Routine 2
000136E6 1228 003A                  		move.b	see_frame(a0),d1
000136EA 6100 0000                  		bsr.w	See_ChgFrame
000136EE 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000136F4 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000136FA 6700                       		beq.s	@notflat	; if not, branch
000136FC 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013702                            
00013702                            	@notflat:
00013702 43F8 D000                  		lea	(v_player).w,a1
00013706 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
0001370C 323C 0030                  		move.w	#$30,d1
00013710 4EB9 0000 8BCC             		jsr	(SlopeObject).l
00013716 4E75                       		rts	
00013718                            ; ===========================================================================
00013718                            
00013718                            See_Slope2:	; Routine 4
00013718 6100 0000                  		bsr.w	See_ChkSide
0001371C 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013722 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013728 6700                       		beq.s	@notflat	; if not, branch
0001372A 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013730                            
00013730                            	@notflat:
00013730 323C 0030                  		move.w	#$30,d1
00013734 4EB9 0000 8C6C             		jsr	(ExitPlatform).l
0001373A 323C 0030                  		move.w	#$30,d1
0001373E 3428 0008                  		move.w	obX(a0),d2
00013742 4EB9 0000 9C06             		jsr	(SlopeObject2).l
00013748 4E75                       		rts	
0001374A                            ; ===========================================================================
0001374A                            
0001374A                            See_ChkSide:
0001374A 7202                       		moveq	#2,d1
0001374C 43F8 D000                  		lea	(v_player).w,a1
00013750 3028 0008                  		move.w	obX(a0),d0
00013754 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013758 6400                       		bcc.s	@leftside	; if yes, branch
0001375A 4440                       		neg.w	d0
0001375C 7200                       		moveq	#0,d1
0001375E                            
0001375E                            	@leftside:
0001375E 0C40 0008                  		cmpi.w	#8,d0
00013762 6400                       		bcc.s	See_ChgFrame
00013764 7201                       		moveq	#1,d1
00013766                            
00013766                            See_ChgFrame:
00013766 1028 001A                  		move.b	obFrame(a0),d0
0001376A B001                       		cmp.b	d1,d0		; does frame need to change?
0001376C 6700                       		beq.s	@noflip		; if not, branch
0001376E 6400                       		bcc.s	@loc_11772
00013770 5400                       		addq.b	#2,d0
00013772                            
00013772                            	@loc_11772:
00013772 5300                       		subq.b	#1,d0
00013774 1140 001A                  		move.b	d0,obFrame(a0)
00013778 1141 003A                  		move.b	d1,see_frame(a0)
0001377C 08A8 0000 0001             		bclr	#0,obRender(a0)
00013782 0828 0001 001A             		btst	#1,obFrame(a0)
00013788 6700                       		beq.s	@noflip
0001378A 08E8 0000 0001             		bset	#0,obRender(a0)
00013790                            
00013790                            	@noflip:
00013790 4E75                       		rts	
00013792                            ; ===========================================================================
00013792                            
00013792                            See_Spikeball:	; Routine 6
00013792 5428 0024                  		addq.b	#2,obRoutine(a0)
00013796 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
0001379E 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
000137A4 0028 0004 0001             		ori.b	#4,obRender(a0)
000137AA 117C 0004 0018             		move.b	#4,obPriority(a0)
000137B0 117C 008B 0020             		move.b	#$8B,obColType(a0)
000137B6 117C 000C 0014             		move.b	#$C,obActWid(a0)
000137BC 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
000137C2 0668 0028 0008             		addi.w	#$28,obX(a0)
000137C8 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
000137CE 117C 0001 001A             		move.b	#1,obFrame(a0)
000137D4 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000137DA 6700                       		beq.s	See_MoveSpike	; if not, branch
000137DC 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
000137E2 117C 0002 003A             		move.b	#2,see_frame(a0)
000137E8                            
000137E8                            See_MoveSpike:	; Routine 8
000137E8 2268 003C                  		movea.l	see_parent(a0),a1
000137EC 7000                       		moveq	#0,d0
000137EE 1028 003A                  		move.b	see_frame(a0),d0
000137F2 9029 003A                  		sub.b	see_frame(a1),d0
000137F6 6700                       		beq.s	loc_1183E
000137F8 6400                       		bcc.s	loc_117FC
000137FA 4400                       		neg.b	d0
000137FC                            
000137FC                            loc_117FC:
000137FC 323C F7E8                  		move.w	#-$818,d1
00013800 343C FEEC                  		move.w	#-$114,d2
00013804 0C00 0001                  		cmpi.b	#1,d0
00013808 6700                       		beq.s	loc_11822
0001380A 323C F510                  		move.w	#-$AF0,d1
0001380E 343C FF34                  		move.w	#-$CC,d2
00013812 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013818 6D00                       		blt.s	loc_11822
0001381A 323C F200                  		move.w	#-$E00,d1
0001381E 343C FF60                  		move.w	#-$A0,d2
00013822                            
00013822                            loc_11822:
00013822 3141 0012                  		move.w	d1,obVelY(a0)
00013826 3142 0010                  		move.w	d2,obVelX(a0)
0001382A 3028 0008                  		move.w	obX(a0),d0
0001382E 9068 0030                  		sub.w	see_origX(a0),d0
00013832 6400                       		bcc.s	loc_11838
00013834 4468 0010                  		neg.w	obVelX(a0)
00013838                            
00013838                            loc_11838:
00013838 5428 0024                  		addq.b	#2,obRoutine(a0)
0001383C 6000                       		bra.s	See_SpikeFall
0001383E                            ; ===========================================================================
0001383E                            
0001383E                            loc_1183E:
0001383E 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013844 7000                       		moveq	#0,d0
00013846 1029 001A                  		move.b	obFrame(a1),d0
0001384A 343C 0028                  		move.w	#$28,d2
0001384E 3228 0008                  		move.w	obX(a0),d1
00013852 9268 0030                  		sub.w	see_origX(a0),d1
00013856 6400                       		bcc.s	loc_1185C
00013858 4442                       		neg.w	d2
0001385A 5440                       		addq.w	#2,d0
0001385C                            
0001385C                            loc_1185C:
0001385C D040                       		add.w	d0,d0
0001385E 3228 0034                  		move.w	see_origY(a0),d1
00013862 D272 0000                  		add.w	(a2,d0.w),d1
00013866 3141 000C                  		move.w	d1,obY(a0)
0001386A D468 0030                  		add.w	see_origX(a0),d2
0001386E 3142 0008                  		move.w	d2,obX(a0)
00013872 4268 000E                  		clr.w	obY+2(a0)
00013876 4268 000A                  		clr.w	obX+2(a0)
0001387A 4E75                       		rts	
0001387C                            ; ===========================================================================
0001387C                            
0001387C                            See_SpikeFall:	; Routine $A
0001387C 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013880 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013882 6100 BB6A                  		bsr.w	ObjectFall
00013886 3028 0034                  		move.w	see_origY(a0),d0
0001388A 0440 002F                  		subi.w	#$2F,d0
0001388E B068 000C                  		cmp.w	obY(a0),d0
00013892 6E00                       		bgt.s	locret_11898
00013894 6100 BB58                  		bsr.w	ObjectFall
00013898                            
00013898                            locret_11898:
00013898 4E75                       		rts	
0001389A                            ; ===========================================================================
0001389A                            
0001389A                            loc_1189A:
0001389A 6100 BB52                  		bsr.w	ObjectFall
0001389E 2268 003C                  		movea.l	see_parent(a0),a1
000138A2 45F9 0000 0000             		lea	(See_Speeds).l,a2
000138A8 7000                       		moveq	#0,d0
000138AA 1029 001A                  		move.b	obFrame(a1),d0
000138AE 3228 0008                  		move.w	obX(a0),d1
000138B2 9268 0030                  		sub.w	see_origX(a0),d1
000138B6 6400                       		bcc.s	loc_118BA
000138B8 5440                       		addq.w	#2,d0
000138BA                            
000138BA                            loc_118BA:
000138BA D040                       		add.w	d0,d0
000138BC 3228 0034                  		move.w	see_origY(a0),d1
000138C0 D272 0000                  		add.w	(a2,d0.w),d1
000138C4 B268 000C                  		cmp.w	obY(a0),d1
000138C8 6E00                       		bgt.s	locret_11938
000138CA 2268 003C                  		movea.l	see_parent(a0),a1
000138CE 7202                       		moveq	#2,d1
000138D0 4A68 0010                  		tst.w	obVelX(a0)
000138D4 6B00                       		bmi.s	See_Spring
000138D6 7200                       		moveq	#0,d1
000138D8                            
000138D8                            See_Spring:
000138D8 1341 003A                  		move.b	d1,$3A(a1)
000138DC 1141 003A                  		move.b	d1,see_frame(a0)
000138E0 B229 001A                  		cmp.b	obFrame(a1),d1
000138E4 6700                       		beq.s	loc_1192C
000138E6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000138EC 6700                       		beq.s	loc_1192C
000138EE 4229 0025                  		clr.b	ob2ndRout(a1)
000138F2 137C 0002 0024             		move.b	#2,obRoutine(a1)
000138F8 45F8 D000                  		lea	(v_player).w,a2
000138FC 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013902 446A 0012                  		neg.w	obVelY(a2)
00013906 08EA 0001 0022             		bset	#1,obStatus(a2)
0001390C 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013912 422A 003C                  		clr.b	$3C(a2)
00013916 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
0001391C 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001392C                            
0001392C                            loc_1192C:
0001392C 4268 0010                  		clr.w	obVelX(a0)
00013930 4268 0012                  		clr.w	obVelY(a0)
00013934 5528 0024                  		subq.b	#2,obRoutine(a0)
00013938                            
00013938                            locret_11938:
00013938 4E75                       		rts	
0001393A                            ; ===========================================================================
0001393A FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013944                            
00013944                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013974                            		even
00013974                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
000139A4                            		even
000139A4                            		even
000139A4                            Map_Seesaw:	include	"_maps\Seesaw.asm"
000139A4                            ; ---------------------------------------------------------------------------
000139A4                            ; Sprite mappings - seesaws (SLZ)
000139A4                            ; ---------------------------------------------------------------------------
000139A4                            Map_Seesaw_internal:
000139A4 0000                       		dc.w @sloping-Map_Seesaw_internal
000139A6 0000                       		dc.w @flat-Map_Seesaw_internal
000139A8 0000                       		dc.w @sloping-Map_Seesaw_internal
000139AA 0000                       		dc.w @flat-Map_Seesaw_internal
000139AC 07                         @sloping:	dc.b 7
000139AD D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000139B2 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000139B7 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000139BC EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000139C1 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000139C6 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000139CB FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000139D0 04                         @flat:		dc.b 4
000139D1 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000139D6 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000139DB E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000139E0 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000139E6 00                         		even
000139E6 00                         		even
000139E6                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
000139E6                            ; ---------------------------------------------------------------------------
000139E6                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000139E6                            ; ---------------------------------------------------------------------------
000139E6                            Map_SSawBall_internal:
000139E6 0000                       		dc.w @red-Map_SSawBall_internal
000139E8 0000                       		dc.w @silver-Map_SSawBall_internal
000139EA 01                         @red:		dc.b 1
000139EB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000139F0 01                         @silver:	dc.b 1
000139F1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000139F6                            		even
000139F6                            		even
000139F6                            		include	"_incObj\5F Bomb Enemy.asm"
000139F6                            ; ---------------------------------------------------------------------------
000139F6                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000139F6                            ; ---------------------------------------------------------------------------
000139F6                            
000139F6                            Bomb:
000139F6 7000                       		moveq	#0,d0
000139F8 1028 0024                  		move.b	obRoutine(a0),d0
000139FC 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013A00 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013A04                            ; ===========================================================================
00013A04 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013A06 0000                       		dc.w Bom_Action-Bom_Index
00013A08 0000                       		dc.w Bom_Display-Bom_Index
00013A0A 0000                       		dc.w Bom_End-Bom_Index
00013A0C                            
00013A0C =00000030                  bom_time:	equ $30		; time of fuse
00013A0C =00000034                  bom_origY:	equ $34		; original y-axis position
00013A0C =0000003C                  bom_parent:	equ $3C		; address of parent object
00013A0C                            ; ===========================================================================
00013A0C                            
00013A0C                            Bom_Main:	; Routine 0
00013A0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A10 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013A18 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013A1E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A24 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013A2A 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013A30 1028 0028                  		move.b	obSubtype(a0),d0
00013A34 6700                       		beq.s	loc_11A3C
00013A36 1140 0024                  		move.b	d0,obRoutine(a0)
00013A3A 4E75                       		rts	
00013A3C                            ; ===========================================================================
00013A3C                            
00013A3C                            loc_11A3C:
00013A3C 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013A42 0868 0000 0022             		bchg	#0,obStatus(a0)
00013A48                            
00013A48                            Bom_Action:	; Routine 2
00013A48 7000                       		moveq	#0,d0
00013A4A 1028 0025                  		move.b	ob2ndRout(a0),d0
00013A4E 323B 0000                  		move.w	@index(pc,d0.w),d1
00013A52 4EBB 1000                  		jsr	@index(pc,d1.w)
00013A56 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013A5C 6100 8A96                  		bsr.w	AnimateSprite
00013A60 6000 DA78                  		bra.w	RememberState
00013A64                            ; ===========================================================================
00013A64 0000                       @index:		dc.w @walk-@index
00013A66 0000                       		dc.w @wait-@index
00013A68 0000                       		dc.w @explode-@index
00013A6A                            ; ===========================================================================
00013A6A                            
00013A6A                            @walk:
00013A6A 6100 0000                  		bsr.w	@chksonic
00013A6E 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013A72 6A00                       		bpl.s	@noflip		; if time remains, branch
00013A74 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013A78 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013A7E 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013A84 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013A8A 0868 0000 0022             		bchg	#0,obStatus(a0)
00013A90 6700                       		beq.s	@noflip
00013A92 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013A96                            
00013A96                            	@noflip:
00013A96 4E75                       		rts	
00013A98                            ; ===========================================================================
00013A98                            
00013A98                            @wait:
00013A98 6100 0000                  		bsr.w	@chksonic
00013A9C 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013AA0 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013AA2 6100 B982                  		bsr.w	SpeedToPos
00013AA6 4E75                       		rts	
00013AA8                            ; ===========================================================================
00013AA8                            
00013AA8                            	@stopwalking:
00013AA8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013AAC 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013AB2 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013AB6 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013ABC 4E75                       		rts	
00013ABE                            ; ===========================================================================
00013ABE                            
00013ABE                            @explode:
00013ABE 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013AC2 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013AC4 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013AC8 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013ACE                            
00013ACE                            	@noexplode:
00013ACE 4E75                       		rts	
00013AD0                            ; ===========================================================================
00013AD0                            
00013AD0                            @chksonic:
00013AD0 3038 D008                  		move.w	(v_player+obX).w,d0
00013AD4 9068 0008                  		sub.w	obX(a0),d0
00013AD8 6400                       		bcc.s	@isleft
00013ADA 4440                       		neg.w	d0
00013ADC                            
00013ADC                            	@isleft:
00013ADC 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013AE0 6400                       		bcc.s	@outofrange	; if not, branch
00013AE2 3038 D00C                  		move.w	(v_player+obY).w,d0
00013AE6 9068 000C                  		sub.w	obY(a0),d0
00013AEA 6400                       		bcc.s	@isabove
00013AEC 4440                       		neg.w	d0
00013AEE                            
00013AEE                            	@isabove:
00013AEE 0C40 0060                  		cmpi.w	#$60,d0
00013AF2 6400                       		bcc.s	@outofrange
00013AF4 4A78 FE08                  		tst.w	(v_debuguse).w
00013AF8 6600                       		bne.s	@outofrange
00013AFA                            
00013AFA 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013B00 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013B06 4268 0010                  		clr.w	obVelX(a0)
00013B0A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013B10 6100 BED8                  		bsr.w	FindNextFreeObj
00013B14 6600                       		bne.s	@outofrange
00013B16 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013B1A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013B20 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013B26 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013B2C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013B32 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013B38 137C 0003 001C             		move.b	#3,obAnim(a1)
00013B3E 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013B44 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013B4A 6700                       		beq.s	@normal		; if not, branch
00013B4C 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013B50                            
00013B50                            	@normal:
00013B50 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013B56 2348 003C                  		move.l	a0,bom_parent(a1)
00013B5A                            
00013B5A                            @outofrange:
00013B5A 4E75                       		rts	
00013B5C                            ; ===========================================================================
00013B5C                            
00013B5C                            Bom_Display:	; Routine 4
00013B5C 6100                       		bsr.s	loc_11B70
00013B5E 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013B64 6100 898E                  		bsr.w	AnimateSprite
00013B68 6000 D970                  		bra.w	RememberState
00013B6C                            ; ===========================================================================
00013B6C                            
00013B6C                            loc_11B70:
00013B6C 5368 0030                  		subq.w	#1,bom_time(a0)
00013B70 6B00                       		bmi.s	loc_11B7C
00013B72 6100 B8B2                  		bsr.w	SpeedToPos
00013B76 4E75                       		rts	
00013B78                            ; ===========================================================================
00013B78                            
00013B78                            loc_11B7C:
00013B78 4268 0030                  		clr.w	bom_time(a0)
00013B7C 4228 0024                  		clr.b	obRoutine(a0)
00013B80 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013B86 7203                       		moveq	#3,d1
00013B88 2248                       		movea.l	a0,a1
00013B8A 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013B90 6000                       		bra.s	@makeshrapnel
00013B92                            ; ===========================================================================
00013B92                            
00013B92                            	@loop:
00013B92 6100 BE56                  		bsr.w	FindNextFreeObj
00013B96 6600                       		bne.s	@fail
00013B98                            
00013B98                            @makeshrapnel:
00013B98 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013B9C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013BA2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013BA8 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013BAE 137C 0004 001C             		move.b	#4,obAnim(a1)
00013BB4 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013BB8 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013BBC 137C 0098 0020             		move.b	#$98,obColType(a1)
00013BC2 08E9 0007 0001             		bset	#7,obRender(a1)
00013BC8                            
00013BC8                            	@fail:
00013BC8 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013BCC                            
00013BCC 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013BD2                            
00013BD2                            Bom_End:	; Routine 6
00013BD2 6100 B852                  		bsr.w	SpeedToPos
00013BD6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013BDC 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013BE2 6100 8910                  		bsr.w	AnimateSprite
00013BE6 4A28 0001                  		tst.b	obRender(a0)
00013BEA 6A00 B88E                  		bpl.w	DeleteObject
00013BEE 6000 B84A                  		bra.w	DisplaySprite
00013BF2                            ; ===========================================================================
00013BF2 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013BF2 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013C02                            		include	"_anim\Bomb Enemy.asm"
00013C02                            ; ---------------------------------------------------------------------------
00013C02                            ; Animation script - Bomb enemy
00013C02                            ; ---------------------------------------------------------------------------
00013C02 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013C04 0000                       		dc.w @walk-Ani_Bomb
00013C06 0000                       		dc.w @activated-Ani_Bomb
00013C08 0000                       		dc.w @fuse-Ani_Bomb
00013C0A 0000                       		dc.w @shrapnel-Ani_Bomb
00013C0C 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013C10 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013C16 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013C1A 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013C1E 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013C22                            		even
00013C22                            		even
00013C22                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013C22                            ; ---------------------------------------------------------------------------
00013C22                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013C22                            ; ---------------------------------------------------------------------------
00013C22                            Map_Bomb_internal:
00013C22 0000                       		dc.w @stand1-Map_Bomb_internal
00013C24 0000                       		dc.w @stand2-Map_Bomb_internal
00013C26 0000                       		dc.w @walk1-Map_Bomb_internal
00013C28 0000                       		dc.w @walk2-Map_Bomb_internal
00013C2A 0000                       		dc.w @walk3-Map_Bomb_internal
00013C2C 0000                       		dc.w @walk4-Map_Bomb_internal
00013C2E 0000                       		dc.w @activate1-Map_Bomb_internal
00013C30 0000                       		dc.w @activate2-Map_Bomb_internal
00013C32 0000                       		dc.w @fuse1-Map_Bomb_internal
00013C34 0000                       		dc.w @fuse2-Map_Bomb_internal
00013C36 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013C38 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013C3A 03                         @stand1:	dc.b 3
00013C3B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013C40 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013C45 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C4A 03                         @stand2:	dc.b 3
00013C4B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C50 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013C55 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C5A 03                         @walk1:		dc.b 3
00013C5B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013C60 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013C65 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013C6A 03                         @walk2:		dc.b 3
00013C6B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C70 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013C75 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C7A 03                         @walk3:		dc.b 3
00013C7B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013C80 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013C85 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013C8A 03                         @walk4:		dc.b 3
00013C8B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C90 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013C95 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C9A 02                         @activate1:	dc.b 2
00013C9B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013CA0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013CA5 02                         @activate2:	dc.b 2
00013CA6 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013CAB 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013CB0 01                         @fuse1:		dc.b 1
00013CB1 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013CB6 01                         @fuse2:		dc.b 1
00013CB7 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013CBC 01                         @shrapnel1:	dc.b 1
00013CBD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013CC2 01                         @shrapnel2:	dc.b 1
00013CC3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013CC8                            		even
00013CC8                            		even
00013CC8                            
00013CC8                            		include	"_incObj\60 Orbinaut.asm"
00013CC8                            ; ---------------------------------------------------------------------------
00013CC8                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013CC8                            ; ---------------------------------------------------------------------------
00013CC8                            
00013CC8                            Orbinaut:
00013CC8 7000                       		moveq	#0,d0
00013CCA 1028 0024                  		move.b	obRoutine(a0),d0
00013CCE 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013CD2 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013CD6                            ; ===========================================================================
00013CD6 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013CD8 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013CDA 0000                       		dc.w Orb_Display-Orb_Index
00013CDC 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013CDE 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013CE0                            
00013CE0 =0000003C                  orb_parent:	equ $3C		; address of parent object
00013CE0                            ; ===========================================================================
00013CE0                            
00013CE0                            Orb_Main:	; Routine 0
00013CE0 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013CE8 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013CEE 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013CF4 6700                       		beq.s	@isscrap
00013CF6 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013CFC                            
00013CFC                            	@isscrap:
00013CFC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013D02 6600                       		bne.s	@notlabyrinth
00013D04 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013D0A                            
00013D0A                            	@notlabyrinth:
00013D0A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013D10 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013D16 117C 000B 0020             		move.b	#$B,obColType(a0)
00013D1C 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013D22 7400                       		moveq	#0,d2
00013D24 45E8 0037                  		lea	$37(a0),a2
00013D28 264A                       		movea.l	a2,a3
00013D2A 524A                       		addq.w	#1,a2
00013D2C 7203                       		moveq	#3,d1
00013D2E                            
00013D2E                            @makesatellites:
00013D2E 6100 BCBA                  		bsr.w	FindNextFreeObj
00013D32 6600                       		bne.s	@fail
00013D34 5213                       		addq.b	#1,(a3)
00013D36 3A09                       		move.w	a1,d5
00013D38 0445 D000                  		subi.w	#$D000,d5
00013D3C EC4D                       		lsr.w	#6,d5
00013D3E 0245 007F                  		andi.w	#$7F,d5
00013D42 14C5                       		move.b	d5,(a2)+
00013D44 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013D46 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013D4C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013D52 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013D58 0029 0004 0001             		ori.b	#4,obRender(a1)
00013D5E 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013D64 137C 0008 0014             		move.b	#8,obActWid(a1)
00013D6A 137C 0003 001A             		move.b	#3,obFrame(a1)
00013D70 137C 0098 0020             		move.b	#$98,obColType(a1)
00013D76 1342 0026                  		move.b	d2,obAngle(a1)
00013D7A 0602 0040                  		addi.b	#$40,d2
00013D7E 2348 003C                  		move.l	a0,orb_parent(a1)
00013D82 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013D86                            
00013D86                            	@fail:
00013D86 7001                       		moveq	#1,d0
00013D88 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013D8E 6700                       		beq.s	@noflip		; if not, branch
00013D90 4440                       		neg.w	d0
00013D92                            
00013D92                            	@noflip:
00013D92 1140 0036                  		move.b	d0,$36(a0)
00013D96 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013D9C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013DA0 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013DA6 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013DAC 6700                       		beq.s	@noflip2	; if not, branch
00013DAE 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013DB2                            
00013DB2                            	@noflip2:
00013DB2 4E75                       		rts	
00013DB4                            ; ===========================================================================
00013DB4                            
00013DB4                            Orb_ChkSonic:	; Routine 2
00013DB4 3038 D008                  		move.w	(v_player+obX).w,d0
00013DB8 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013DBC 6400                       		bcc.s	@isright	; if yes, branch
00013DBE 4440                       		neg.w	d0
00013DC0                            
00013DC0                            	@isright:
00013DC0 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013DC4 6400                       		bcc.s	@animate	; if not, branch
00013DC6 3038 D00C                  		move.w	(v_player+obY).w,d0
00013DCA 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013DCE 6400                       		bcc.s	@isabove	; if yes, branch
00013DD0 4440                       		neg.w	d0
00013DD2                            
00013DD2                            	@isabove:
00013DD2 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013DD6 6400                       		bcc.s	@animate	; if not, branch
00013DD8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013DDC 6600                       		bne.s	@animate	; if yes, branch
00013DDE 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013DE4                            
00013DE4                            @animate:
00013DE4 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013DEA 6100 8708                  		bsr.w	AnimateSprite
00013DEE 6000 0000                  		bra.w	Orb_ChkDel
00013DF2                            ; ===========================================================================
00013DF2                            
00013DF2                            Orb_Display:	; Routine 4
00013DF2 6100 B632                  		bsr.w	SpeedToPos
00013DF6                            
00013DF6                            Orb_ChkDel:
00013E14 6000 B624                  		bra.w	DisplaySprite
00013E18                            
00013E18                            @chkgone:
00013E18 45F8 FC00                  		lea	(v_objstate).w,a2
00013E1C 7000                       		moveq	#0,d0
00013E1E 1028 0023                  		move.b	obRespawnNo(a0),d0
00013E22 6700                       		beq.s	loc_11E34
00013E24 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013E2A                            
00013E2A                            loc_11E34:
00013E2A 45E8 0037                  		lea	$37(a0),a2
00013E2E 7400                       		moveq	#0,d2
00013E30 141A                       		move.b	(a2)+,d2
00013E32 5342                       		subq.w	#1,d2
00013E34 6500                       		bcs.s	Orb_Delete
00013E36                            
00013E36                            loc_11E40:
00013E36 7000                       		moveq	#0,d0
00013E38 101A                       		move.b	(a2)+,d0
00013E3A ED48                       		lsl.w	#6,d0
00013E3C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00013E42 2240                       		movea.l	d0,a1
00013E44 6100 B636                  		bsr.w	DeleteChild
00013E48 51CA FFEC                  		dbf	d2,loc_11E40
00013E4C                            
00013E4C                            Orb_Delete:
00013E4C 6000 B62C                  		bra.w	DeleteObject
00013E50                            ; ===========================================================================
00013E50                            
00013E50                            Orb_MoveOrb:	; Routine 6
00013E50 2268 003C                  		movea.l	orb_parent(a0),a1
00013E54 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00013E58 6600 B620                  		bne.w	DeleteObject	; if not, delete
00013E5C 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00013E62 6600                       		bne.s	@circle		; if not, branch
00013E64 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00013E6A 6600                       		bne.s	@circle		; if not, branch
00013E6C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E70 5329 0037                  		subq.b	#1,$37(a1)
00013E74 6600                       		bne.s	@fire
00013E76 5429 0024                  		addq.b	#2,obRoutine(a1)
00013E7A                            
00013E7A                            	@fire:
00013E7A 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00013E80 0829 0000 0022             		btst	#0,obStatus(a1)
00013E86 6700                       		beq.s	@noflip
00013E88 4468 0010                  		neg.w	obVelX(a0)
00013E8C                            
00013E8C                            	@noflip:
00013E8C 6000 B5AC                  		bra.w	DisplaySprite
00013E90                            ; ===========================================================================
00013E90                            
00013E90                            @circle:
00013E90 1028 0026                  		move.b	obAngle(a0),d0
00013E94 4EB9 0000 3B42             		jsr	(CalcSine).l
00013E9A E841                       		asr.w	#4,d1
00013E9C D269 0008                  		add.w	obX(a1),d1
00013EA0 3141 0008                  		move.w	d1,obX(a0)
00013EA4 E840                       		asr.w	#4,d0
00013EA6 D069 000C                  		add.w	obY(a1),d0
00013EAA 3140 000C                  		move.w	d0,obY(a0)
00013EAE 1029 0036                  		move.b	$36(a1),d0
00013EB2 D128 0026                  		add.b	d0,obAngle(a0)
00013EB6 6000 B582                  		bra.w	DisplaySprite
00013EBA                            ; ===========================================================================
00013EBA                            
00013EBA                            Orb_ChkDel2:	; Routine 8
00013EBA 6100 B56A                  		bsr.w	SpeedToPos
00013EBE 4A28 0001                  		tst.b	obRender(a0)
00013EC2 6A00 B5B6                  		bpl.w	DeleteObject
00013EC6 6000 B572                  		bra.w	DisplaySprite
00013EC6 6000 B572                  		bra.w	DisplaySprite
00013ECA                            		include	"_anim\Orbinaut.asm"
00013ECA                            ; ---------------------------------------------------------------------------
00013ECA                            ; Animation script - Orbinaut enemy
00013ECA                            ; ---------------------------------------------------------------------------
00013ECA 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00013ECC 0000                       		dc.w @angers-Ani_Orb
00013ECE 0F00 FF                    @normal:	dc.b $F, 0, afEnd
00013ED2 00                         		even
00013ED2 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
00013ED8 00                         		even
00013ED8 00                         		even
00013ED8                            Map_Orb:	include	"_maps\Orbinaut.asm"
00013ED8                            ; ---------------------------------------------------------------------------
00013ED8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013ED8                            ; ---------------------------------------------------------------------------
00013ED8                            Map_Orb_internal:
00013ED8 0000                       		dc.w @normal-Map_Orb_internal
00013EDA 0000                       		dc.w @medium-Map_Orb_internal
00013EDC 0000                       		dc.w @angry-Map_Orb_internal
00013EDE 0000                       		dc.w @spikeball-Map_Orb_internal
00013EE0 01                         @normal:	dc.b 1
00013EE1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013EE6 01                         @medium:	dc.b 1
00013EE7 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013EEC 01                         @angry:		dc.b 1
00013EED F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013EF2 01                         @spikeball:	dc.b 1
00013EF3 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013EF8                            		even
00013EF8                            		even
00013EF8                            
00013EF8                            		include	"_incObj\16 Harpoon.asm"
00013EF8                            ; ---------------------------------------------------------------------------
00013EF8                            ; Object 16 - harpoon (LZ)
00013EF8                            ; ---------------------------------------------------------------------------
00013EF8                            
00013EF8                            Harpoon:
00013EF8 7000                       		moveq	#0,d0
00013EFA 1028 0024                  		move.b	obRoutine(a0),d0
00013EFE 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00013F02 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00013F06                            ; ===========================================================================
00013F06 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00013F08 0000                       		dc.w Harp_Move-Harp_Index
00013F0A 0000                       		dc.w Harp_Wait-Harp_Index
00013F0C                            
00013F0C =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00013F0C                            ; ===========================================================================
00013F0C                            
00013F0C                            Harp_Main:	; Routine 0
00013F0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F10 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00013F18 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00013F1E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013F24 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013F2A 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00013F30 117C 0014 0014             		move.b	#$14,obActWid(a0)
00013F36 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00013F3C                            
00013F3C                            Harp_Move:	; Routine 2
00013F3C 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00013F42 6100 85B0                  		bsr.w	AnimateSprite
00013F46 7000                       		moveq	#0,d0
00013F48 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00013F4C 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00013F52 6000 D586                  		bra.w	RememberState
00013F56                            
00013F56                            	@types:
00013F56 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013F5C                            		even
00013F5C                            
00013F5C                            Harp_Wait:	; Routine 4
00013F5C 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00013F60 6A00                       		bpl.s	@chkdel		; branch if time remains
00013F62 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00013F68 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00013F6C 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00013F72                            
00013F72                            	@chkdel:
00013F72 6000 D566                  		bra.w	RememberState
00013F72 6000 D566                  		bra.w	RememberState
00013F76                            		include	"_anim\Harpoon.asm"
00013F76                            ; ---------------------------------------------------------------------------
00013F76                            ; Animation script - harpoon (LZ)
00013F76                            ; ---------------------------------------------------------------------------
00013F76 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00013F78 0000                       		dc.w @h_retracting-Ani_Harp
00013F7A 0000                       		dc.w @v_extending-Ani_Harp
00013F7C 0000                       		dc.w @v_retracting-Ani_Harp
00013F7E 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00013F82 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00013F86 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00013F8A 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00013F8E                            		even
00013F8E                            		even
00013F8E                            Map_Harp:	include	"_maps\Harpoon.asm"
00013F8E                            ; --------------------------------------------------------------------------------
00013F8E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013F8E                            ; --------------------------------------------------------------------------------
00013F8E                            
00013F8E                            SME_JPFHb:	
00013F8E 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00013F92 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
00013F96 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
00013F9A 01                         SME_JPFHb_C:	dc.b 1	
00013F9B FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00013FA0 01                         SME_JPFHb_12:	dc.b 1	
00013FA1 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
00013FA6 02                         SME_JPFHb_18:	dc.b 2	
00013FA7 FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
00013FAC FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
00013FB1 01                         SME_JPFHb_23:	dc.b 1	
00013FB2 F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
00013FB7 01                         SME_JPFHb_29:	dc.b 1	
00013FB8 E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
00013FBD 02                         SME_JPFHb_2F:	dc.b 2	
00013FBE D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
00013FC3 F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
00013FC8                            		even
00013FC8                            		even
00013FC8                            		include	"_incObj\61 LZ Blocks.asm"
00013FC8                            ; ---------------------------------------------------------------------------
00013FC8                            ; Object 61 - blocks (LZ)
00013FC8                            ; ---------------------------------------------------------------------------
00013FC8                            
00013FC8                            LabyrinthBlock:
00013FC8 7000                       		moveq	#0,d0
00013FCA 1028 0024                  		move.b	obRoutine(a0),d0
00013FCE 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
00013FD2 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
00013FD6                            ; ===========================================================================
00013FD6 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
00013FD8 0000                       		dc.w LBlk_Action-LBlk_Index
00013FDA                            
00013FDA 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00013FDC 200C                       		dc.b $20, $C
00013FDE 1010                       		dc.b $10, $10
00013FE0 1010                       		dc.b $10, $10
00013FE2                            
00013FE2 =00000016                  lblk_height:	equ $16		; block height
00013FE2 =00000034                  lblk_origX:	equ $34		; original x-axis position
00013FE2 =00000030                  lblk_origY:	equ $30		; original y-axis position
00013FE2 =00000036                  lblk_time:	equ $36		; time delay for block movement
00013FE2 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
00013FE2                            ; ===========================================================================
00013FE2                            
00013FE2                            LBlk_Main:	; Routine 0
00013FE2 5428 0024                  		addq.b	#2,obRoutine(a0)
00013FE6 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00013FEE 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00013FF4 117C 0004 0001             		move.b	#4,obRender(a0)
00013FFA 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014000 7000                       		moveq	#0,d0
00014002 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014006 E648                       		lsr.w	#3,d0		; read only the 1st digit
00014008 0240 000E                  		andi.w	#$E,d0
0001400C 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014010 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00014014 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014018 E248                       		lsr.w	#1,d0
0001401A 1140 001A                  		move.b	d0,obFrame(a0)
0001401E 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00014024 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
0001402A 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001402E 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00014032 6700                       		beq.s	LBlk_Action	; branch if 0
00014034 0C00 0007                  		cmpi.b	#7,d0
00014038 6700                       		beq.s	LBlk_Action	; branch if 7
0001403A 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014040                            
00014040                            LBlk_Action:	; Routine 2
00014040 3F28 0008                  		move.w	obX(a0),-(sp)
00014044 7000                       		moveq	#0,d0
00014046 1028 0028                  		move.b	obSubtype(a0),d0
0001404A 0240 000F                  		andi.w	#$F,d0
0001404E D040                       		add.w	d0,d0
00014050 323B 0000                  		move.w	@index(pc,d0.w),d1
00014054 4EBB 1000                  		jsr	@index(pc,d1.w)
00014058 381F                       		move.w	(sp)+,d4
0001405A 4A28 0001                  		tst.b	obRender(a0)
0001405E 6A00                       		bpl.s	@chkdel
00014060 7200                       		moveq	#0,d1
00014062 1228 0014                  		move.b	obActWid(a0),d1
00014066 0641 000B                  		addi.w	#$B,d1
0001406A 7400                       		moveq	#0,d2
0001406C 1428 0016                  		move.b	lblk_height(a0),d2
00014070 3602                       		move.w	d2,d3
00014072 5243                       		addq.w	#1,d3
00014074 6100 D8FC                  		bsr.w	SolidObject
00014078 1144 003F                  		move.b	d4,$3F(a0)
0001407C 6100 0000                  		bsr.w	loc_12180
00014080                            
00014080                            @chkdel:
0001409E 6000 B39A                  		bra.w	DisplaySprite
000140A2                            ; ===========================================================================
000140A2 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000140A6 0000 0000                  		dc.w @type02-@index, @type03-@index
000140AA 0000 0000                  		dc.w @type04-@index, @type05-@index
000140AE 0000 0000                  		dc.w @type06-@index, @type07-@index
000140B2                            ; ===========================================================================
000140B2                            
000140B2                            @type00:
000140B2 4E75                       		rts	
000140B4                            ; ===========================================================================
000140B4                            
000140B4                            @type01:
000140B4                            @type03:
000140B4 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000140B8 6600                       		bne.s	@wait01		; if yes, branch
000140BA 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000140C0 6700                       		beq.s	@donothing01	; if not, branch
000140C2 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000140C8                            
000140C8                            	@donothing01:
000140C8 4E75                       		rts	
000140CA                            ; ===========================================================================
000140CA                            
000140CA                            	@wait01:
000140CA 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000140CE 66F8                       		bne.s	@donothing01	; if time remains, branch
000140D0 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000140D4 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000140D8 4E75                       		rts	
000140DA                            ; ===========================================================================
000140DA                            
000140DA                            @type02:
000140DA                            @type06:
000140DA 6100 B34A                  		bsr.w	SpeedToPos
000140DE 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000140E2 6100 0000                  		bsr.w	ObjFloorDist
000140E6 4A41                       		tst.w	d1		; has block hit the floor?
000140E8 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000140EC 5241                       		addq.w	#1,d1
000140EE D368 000C                  		add.w	d1,obY(a0)
000140F2 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000140F6 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000140FA                            
000140FA                            	@nofloor02:
000140FA 4E75                       		rts	
000140FC                            ; ===========================================================================
000140FC                            
000140FC                            @type04:
000140FC 6100 B328                  		bsr.w	SpeedToPos
00014100 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
00014104 6100 0000                  		bsr.w	ObjHitCeiling
00014108 4A41                       		tst.w	d1		; has block hit the ceiling?
0001410A 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
0001410E 9368 000C                  		sub.w	d1,obY(a0)
00014112 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014116 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001411A                            
0001411A                            	@noceiling04:
0001411A 4E75                       		rts	
0001411C                            ; ===========================================================================
0001411C                            
0001411C                            @type05:
0001411C 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
00014122 6600                       		bne.s	@notouch05	; if not, branch
00014124 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014128 4228 0038                  		clr.b	lblk_untouched(a0)
0001412C                            
0001412C                            	@notouch05:
0001412C 4E75                       		rts	
0001412E                            ; ===========================================================================
0001412E                            
0001412E                            @type07:
0001412E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014132 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014136 6700                       		beq.s	@stop07		; if yes, branch
00014138 6400                       		bcc.s	@fall07		; branch if block is above water
0001413A 0C40 FFFE                  		cmpi.w	#-2,d0
0001413E 6C00                       		bge.s	@loc_1214E
00014140 70FE                       		moveq	#-2,d0
00014142                            
00014142                            	@loc_1214E:
00014142 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014146 6100 0000                  		bsr.w	ObjHitCeiling
0001414A 4A41                       		tst.w	d1		; has block hit the ceiling?
0001414C 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014150 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014154                            
00014154                            	@noceiling07:
00014154 4E75                       		rts	
00014156                            ; ===========================================================================
00014156                            
00014156                            @fall07:
00014156 0C40 0002                  		cmpi.w	#2,d0
0001415A 6F00                       		ble.s	@loc_1216A
0001415C 7002                       		moveq	#2,d0
0001415E                            
0001415E                            	@loc_1216A:
0001415E D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014162 6100 0000                  		bsr.w	ObjFloorDist
00014166 4A41                       		tst.w	d1
00014168 6A00 0000                  		bpl.w	@stop07
0001416C 5241                       		addq.w	#1,d1
0001416E D368 000C                  		add.w	d1,obY(a0)
00014172                            
00014172                            	@stop07:
00014172 4E75                       		rts	
00014174                            ; ===========================================================================
00014174                            
00014174                            loc_12180:
00014174 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014178 6700                       		beq.s	locret_121C0	; if yes, branch
0001417A 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014180 6600                       		bne.s	loc_1219A	; if yes, branch
00014182 4A28 003E                  		tst.b	$3E(a0)
00014186 6700                       		beq.s	locret_121C0
00014188 5928 003E                  		subq.b	#4,$3E(a0)
0001418C 6000                       		bra.s	loc_121A6
0001418E                            ; ===========================================================================
0001418E                            
0001418E                            loc_1219A:
0001418E 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014194 6700                       		beq.s	locret_121C0
00014196 5828 003E                  		addq.b	#4,$3E(a0)
0001419A                            
0001419A                            loc_121A6:
0001419A 1028 003E                  		move.b	$3E(a0),d0
0001419E 4EB9 0000 3B42             		jsr	(CalcSine).l
000141A4 323C 0400                  		move.w	#$400,d1
000141A8 C1C1                       		muls.w	d1,d0
000141AA 4840                       		swap	d0
000141AC D068 0030                  		add.w	lblk_origY(a0),d0
000141B0 3140 000C                  		move.w	d0,obY(a0)
000141B4                            
000141B4                            locret_121C0:
000141B4 4E75                       		rts	
000141B4 4E75                       		rts	
000141B6                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000141B6                            Map_6865:
000141B6 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000141B8 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000141BA 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000141BC 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000141BE 01                         Map_6865_8: 	dc.b $1
000141BF F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000141C4 02                         Map_6865_E: 	dc.b $2
000141C5 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000141CA F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000141CF 01                         Map_6865_19: 	dc.b $1
000141D0 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000141D5 01                         Map_6865_1F: 	dc.b $1
000141D6 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000141DC 00                         	even
000141DC 00                         	even
000141DC                            		include	"_incObj\62 Gargoyle.asm"
000141DC                            ; ---------------------------------------------------------------------------
000141DC                            ; Object 62 - gargoyle head (LZ)
000141DC                            ; ---------------------------------------------------------------------------
000141DC                            
000141DC                            Gargoyle:
000141DC 7000                       		moveq	#0,d0
000141DE 1028 0024                  		move.b	obRoutine(a0),d0
000141E2 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000141E6 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000141EA 6000 D2EE                  		bra.w	RememberState
000141EE                            ; ===========================================================================
000141EE 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000141F0 0000                       		dc.w Gar_MakeFire-Gar_Index
000141F2 0000                       		dc.w Gar_FireBall-Gar_Index
000141F4 0000                       		dc.w Gar_AniFire-Gar_Index
000141F6                            
000141F6 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000141FE                            ; ===========================================================================
000141FE                            
000141FE                            Gar_Main:	; Routine 0
000141FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00014202 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
0001420A 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014210 0028 0004 0001             		ori.b	#4,obRender(a0)
00014216 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001421C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014222 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014226 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001422A 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014230 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014236 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001423C                            
0001423C                            Gar_MakeFire:	; Routine 2
0001423C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014240 6600                       		bne.s	@nofire		; if time remains, branch
00014242                            
00014242 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014248 6100 B57E                  		bsr.w	ChkObjectVisible
0001424C 6600                       		bne.s	@nofire
0001424E 6100 B784                  		bsr.w	FindFreeObj
00014252 6600                       		bne.s	@nofire
00014254 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014258 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
0001425C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014262 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014268 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0001426E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014274                            
00014274                            	@nofire:
00014274 4E75                       		rts	
00014276                            ; ===========================================================================
00014276                            
00014276                            Gar_FireBall:	; Routine 4
00014276 5428 0024                  		addq.b	#2,obRoutine(a0)
0001427A 117C 0008 0016             		move.b	#8,obHeight(a0)
00014280 117C 0008 0017             		move.b	#8,obWidth(a0)
00014286 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
0001428E 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014294 0028 0004 0001             		ori.b	#4,obRender(a0)
0001429A 317C 0200 0018             		move.w	#$200,obPriority(a0)
000142A0 117C 0098 0020             		move.b	#$98,obColType(a0)
000142A6 117C 0008 0014             		move.b	#8,obActWid(a0)
000142AC 117C 0002 001A             		move.b	#2,obFrame(a0)
000142B2 5068 000C                  		addq.w	#8,obY(a0)
000142B6 317C 0200 0010             		move.w	#$200,obVelX(a0)
000142BC 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000142C2 6600                       		bne.s	@noflip		; if not, branch
000142C4 4468 0010                  		neg.w	obVelX(a0)
000142C8                            
000142C8                            	@noflip:
000142D2                            
000142D2                            Gar_AniFire:	; Routine 6
000142D2 1038 FE05                  		move.b	(v_framebyte).w,d0
000142D6 0200 0007                  		andi.b	#7,d0
000142DA 6600                       		bne.s	@nochg
000142DC 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000142E2                            
000142E2                            	@nochg:
000142E2 6100 B142                  		bsr.w	SpeedToPos
000142E6 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000142EC 6600                       		bne.s	@isright	; if not, branch
000142EE 76F8                       		moveq	#-8,d3
000142F0 6100 0000                  		bsr.w	ObjHitWallLeft
000142F4 4A41                       		tst.w	d1
000142F6 6B00 B182                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000142FA 4E75                       		rts	
000142FC                            
000142FC                            	@isright:
000142FC 7608                       		moveq	#8,d3
000142FE 6100 0000                  		bsr.w	ObjHitWallRight
00014302 4A41                       		tst.w	d1
00014304 6B00 B174                  		bmi.w	DeleteObject
00014308 4E75                       		rts	
00014308 4E75                       		rts	
0001430A                            Map_Gar:	include	"_maps\Gargoyle.asm"
0001430A                            ; ---------------------------------------------------------------------------
0001430A                            ; Sprite mappings - gargoyle head (LZ)
0001430A                            ; ---------------------------------------------------------------------------
0001430A                            Map_Gar_internal:
0001430A 0000                       		dc.w @head-Map_Gar_internal
0001430C 0000                       		dc.w @head-Map_Gar_internal
0001430E 0000                       		dc.w @fireball1-Map_Gar_internal
00014310 0000                       		dc.w @fireball2-Map_Gar_internal
00014312 03                         @head:		dc.b 3
00014313 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014318 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001431D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00014322 01                         @fireball1:	dc.b 1
00014323 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014328 01                         @fireball2:	dc.b 1
00014329 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001432E                            		even
0001432E                            		even
0001432E                            		include	"_incObj\63 LZ Conveyor.asm"
0001432E                            ; ---------------------------------------------------------------------------
0001432E                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001432E                            ; ---------------------------------------------------------------------------
0001432E                            
0001432E                            LabyrinthConvey:
0001432E 7000                       		moveq	#0,d0
00014330 1028 0024                  		move.b	obRoutine(a0),d0
00014334 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014338 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014358                            
00014358                            LCon_Display:
00014358 6000 B0E0                  		bra.w	DisplaySprite
0001435C                            ; ===========================================================================
0001435C                            
0001435C                            loc_1236A:
0001435C 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014362 6600                       		bne.s	loc_12378
00014364 0C40 FF80                  		cmpi.w	#-$80,d0
00014368 64EE                       		bcc.s	LCon_Display
0001436A                            
0001436A                            loc_12378:
0001436A 1028 002F                  		move.b	$2F(a0),d0
0001436E 6A00 B10A                  		bpl.w	DeleteObject
00014372 0240 007F                  		andi.w	#$7F,d0
00014376 45F8 F7C1                  		lea	(v_obj63).w,a2
0001437A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014380 6000 B0F8                  		bra.w	DeleteObject
00014384                            ; ===========================================================================
00014384 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00014386 0000                       		dc.w loc_124B2-LCon_Index
00014388 0000                       		dc.w loc_124C2-LCon_Index
0001438A 0000                       		dc.w loc_124DE-LCon_Index
0001438C                            ; ===========================================================================
0001438C                            
0001438C                            LCon_Main:	; Routine 0
0001438C 1028 0028                  		move.b	obSubtype(a0),d0
00014390 6B00 0000                  		bmi.w	loc_12460
00014394 5428 0024                  		addq.b	#2,obRoutine(a0)
00014398 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000143A0 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000143A6 0028 0004 0001             		ori.b	#4,obRender(a0)
000143AC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000143B2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000143B8 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000143BE 6600                       		bne.s	loc_123E2
000143C0 5828 0024                  		addq.b	#4,obRoutine(a0)
000143C4 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000143CA 317C 0080 0018             		move.w	#$80,obPriority(a0)
000143D0 6000 0000                  		bra.w	loc_124DE
000143D4                            ; ===========================================================================
000143D4                            
000143D4                            loc_123E2:
000143D4 117C 0004 001A             		move.b	#4,obFrame(a0)
000143DA 7000                       		moveq	#0,d0
000143DC 1028 0028                  		move.b	obSubtype(a0),d0
000143E0 3200                       		move.w	d0,d1
000143E2 E648                       		lsr.w	#3,d0
000143E4 0240 001E                  		andi.w	#$1E,d0
000143E8 45FA 0000                  		lea	LCon_Data(pc),a2
000143EC D4F2 0000                  		adda.w	(a2,d0.w),a2
000143F0 315A 0038                  		move.w	(a2)+,$38(a0)
000143F4 315A 0030                  		move.w	(a2)+,$30(a0)
000143F8 214A 003C                  		move.l	a2,$3C(a0)
000143FC 0241 000F                  		andi.w	#$F,d1
00014400 E549                       		lsl.w	#2,d1
00014402 1141 0038                  		move.b	d1,$38(a0)
00014406 117C 0004 003A             		move.b	#4,$3A(a0)
0001440C 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014410 6700                       		beq.s	loc_1244C
00014412 117C 0001 003B             		move.b	#1,$3B(a0)
00014418 4428 003A                  		neg.b	$3A(a0)
0001441C 7200                       		moveq	#0,d1
0001441E 1228 0038                  		move.b	$38(a0),d1
00014422 D228 003A                  		add.b	$3A(a0),d1
00014426 B228 0039                  		cmp.b	$39(a0),d1
0001442A 6500                       		bcs.s	loc_12448
0001442C 1001                       		move.b	d1,d0
0001442E 7200                       		moveq	#0,d1
00014430 4A00                       		tst.b	d0
00014432 6A00                       		bpl.s	loc_12448
00014434 1228 0039                  		move.b	$39(a0),d1
00014438 5901                       		subq.b	#4,d1
0001443A                            
0001443A                            loc_12448:
0001443A 1141 0038                  		move.b	d1,$38(a0)
0001443E                            
0001443E                            loc_1244C:
0001443E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014444 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001444A 6100 0000                  		bsr.w	LCon_ChangeDir
0001444E 6000 0000                  		bra.w	loc_124B2
00014452                            ; ===========================================================================
00014452                            
00014452                            loc_12460:
00014452 1140 002F                  		move.b	d0,$2F(a0)
00014456 0240 007F                  		andi.w	#$7F,d0
0001445A 45F8 F7C1                  		lea	(v_obj63).w,a2
0001445E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014464 6600 B014                  		bne.w	DeleteObject
00014468 D040                       		add.w	d0,d0
0001446A 0240 001E                  		andi.w	#$1E,d0
0001446E 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014472 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014478 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001447C 321A                       		move.w	(a2)+,d1
0001447E 2248                       		movea.l	a0,a1
00014480 6000                       		bra.s	LCon_MakePtfms
00014482                            ; ===========================================================================
00014482                            
00014482                            LCon_Loop:
00014482 6100 B550                  		bsr.w	FindFreeObj
00014486 6600                       		bne.s	loc_124AA
00014488                            
00014488                            LCon_MakePtfms:
00014488 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
0001448C 335A 0008                  		move.w	(a2)+,obX(a1)
00014490 335A 000C                  		move.w	(a2)+,obY(a1)
00014494 301A                       		move.w	(a2)+,d0
00014496 1340 0028                  		move.b	d0,obSubtype(a1)
0001449A                            
0001449A                            loc_124AA:
0001449A 51C9 FFE6                  		dbf	d1,LCon_Loop
0001449E                            
0001449E 588F                       		addq.l	#4,sp
000144A0 4E75                       		rts	
000144A2                            ; ===========================================================================
000144A2                            
000144A2                            loc_124B2:	; Routine 2
000144A2 7200                       		moveq	#0,d1
000144A4 1228 0014                  		move.b	obActWid(a0),d1
000144A8 4EB9 0000 8AF8             		jsr	(PlatformObject).l
000144AE 6000 0000                  		bra.w	sub_12502
000144B2                            ; ===========================================================================
000144B2                            
000144B2                            loc_124C2:	; Routine 4
000144B2 7200                       		moveq	#0,d1
000144B4 1228 0014                  		move.b	obActWid(a0),d1
000144B8 4EB9 0000 8C6C             		jsr	(ExitPlatform).l
000144BE 3F28 0008                  		move.w	obX(a0),-(sp)
000144C2 6100 0000                  		bsr.w	sub_12502
000144C6 341F                       		move.w	(sp)+,d2
000144C8 4EF9 0000 91D6             		jmp	(MvSonicOnPtfm2).l
000144CE                            ; ===========================================================================
000144CE                            
000144CE                            loc_124DE:	; Routine 6
000144CE 3038 FE04                  		move.w	(v_framecount).w,d0
000144D2 0240 0003                  		andi.w	#3,d0
000144D6 6600                       		bne.s	loc_124FC
000144D8 7201                       		moveq	#1,d1
000144DA 4A38 F7C0                  		tst.b	(f_conveyrev).w
000144DE 6700                       		beq.s	loc_124F2
000144E0 4401                       		neg.b	d1
000144E2                            
000144E2                            loc_124F2:
000144E2 D328 001A                  		add.b	d1,obFrame(a0)
000144E6 0228 0003 001A             		andi.b	#3,obFrame(a0)
000144EC                            
000144EC                            loc_124FC:
000144EC 588F                       		addq.l	#4,sp
000144EE 6000 CFEA                  		bra.w	RememberState
000144F2                            
000144F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144F2                            
000144F2                            
000144F2                            sub_12502:
000144F2 4A38 F7EE                  		tst.b	(f_switch+$E).w
000144F6 6700                       		beq.s	loc_12520
000144F8 4A28 003B                  		tst.b	$3B(a0)
000144FC 6600                       		bne.s	loc_12520
000144FE 117C 0001 003B             		move.b	#1,$3B(a0)
00014504 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
0001450A 4428 003A                  		neg.b	$3A(a0)
0001450E 6000                       		bra.s	loc_12534
00014510                            ; ===========================================================================
00014510                            
00014510                            loc_12520:
00014510 3028 0008                  		move.w	obX(a0),d0
00014514 B068 0034                  		cmp.w	$34(a0),d0
00014518 6600                       		bne.s	loc_1256A
0001451A 3028 000C                  		move.w	obY(a0),d0
0001451E B068 0036                  		cmp.w	$36(a0),d0
00014522 6600                       		bne.s	loc_1256A
00014524                            
00014524                            loc_12534:
00014524 7200                       		moveq	#0,d1
00014526 1228 0038                  		move.b	$38(a0),d1
0001452A D228 003A                  		add.b	$3A(a0),d1
0001452E B228 0039                  		cmp.b	$39(a0),d1
00014532 6500                       		bcs.s	loc_12552
00014534 1001                       		move.b	d1,d0
00014536 7200                       		moveq	#0,d1
00014538 4A00                       		tst.b	d0
0001453A 6A00                       		bpl.s	loc_12552
0001453C 1228 0039                  		move.b	$39(a0),d1
00014540 5901                       		subq.b	#4,d1
00014542                            
00014542                            loc_12552:
00014542 1141 0038                  		move.b	d1,$38(a0)
00014546 2268 003C                  		movea.l	$3C(a0),a1
0001454A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014550 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014556 6100 0000                  		bsr.w	LCon_ChangeDir
0001455A                            
0001455A                            loc_1256A:
0001455A 6100 AECA                  		bsr.w	SpeedToPos
0001455E 4E75                       		rts	
00014560                            ; End of function sub_12502
00014560                            
00014560                            
00014560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014560                            
00014560                            
00014560                            LCon_ChangeDir:
00014560 7000                       		moveq	#0,d0
00014562 343C FF00                  		move.w	#-$100,d2
00014566 3028 0008                  		move.w	obX(a0),d0
0001456A 9068 0034                  		sub.w	$34(a0),d0
0001456E 6400                       		bcc.s	loc_12584
00014570 4440                       		neg.w	d0
00014572 4442                       		neg.w	d2
00014574                            
00014574                            loc_12584:
00014574 7200                       		moveq	#0,d1
00014576 363C FF00                  		move.w	#-$100,d3
0001457A 3228 000C                  		move.w	obY(a0),d1
0001457E 9268 0036                  		sub.w	$36(a0),d1
00014582 6400                       		bcc.s	loc_12598
00014584 4441                       		neg.w	d1
00014586 4443                       		neg.w	d3
00014588                            
00014588                            loc_12598:
00014588 B240                       		cmp.w	d0,d1
0001458A 6500                       		bcs.s	loc_125C2
0001458C 3028 0008                  		move.w	obX(a0),d0
00014590 9068 0034                  		sub.w	$34(a0),d0
00014594 6700                       		beq.s	loc_125AE
00014596 48C0                       		ext.l	d0
00014598 E180                       		asl.l	#8,d0
0001459A 81C1                       		divs.w	d1,d0
0001459C 4440                       		neg.w	d0
0001459E                            
0001459E                            loc_125AE:
0001459E 3140 0010                  		move.w	d0,obVelX(a0)
000145A2 3143 0012                  		move.w	d3,obVelY(a0)
000145A6 4840                       		swap	d0
000145A8 3140 000A                  		move.w	d0,obX+2(a0)
000145AC 4268 000E                  		clr.w	obY+2(a0)
000145B0 4E75                       		rts	
000145B2                            ; ===========================================================================
000145B2                            
000145B2                            loc_125C2:
000145B2 3228 000C                  		move.w	obY(a0),d1
000145B6 9268 0036                  		sub.w	$36(a0),d1
000145BA 6700                       		beq.s	loc_125D4
000145BC 48C1                       		ext.l	d1
000145BE E181                       		asl.l	#8,d1
000145C0 83C0                       		divs.w	d0,d1
000145C2 4441                       		neg.w	d1
000145C4                            
000145C4                            loc_125D4:
000145C4 3141 0012                  		move.w	d1,obVelY(a0)
000145C8 3142 0010                  		move.w	d2,obVelX(a0)
000145CC 4841                       		swap	d1
000145CE 3141 000E                  		move.w	d1,obY+2(a0)
000145D2 4268 000A                  		clr.w	obX+2(a0)
000145D6 4E75                       		rts	
000145D8                            ; End of function LCon_ChangeDir
000145D8                            
000145D8                            ; ===========================================================================
000145D8 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000145DA 0000                       		dc.w word_12610-LCon_Data
000145DC 0000                       		dc.w word_12628-LCon_Data
000145DE 0000                       		dc.w word_1263C-LCon_Data
000145E0 0000                       		dc.w word_12650-LCon_Data
000145E2 0000                       		dc.w word_12668-LCon_Data
000145E4 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000145F4 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014600 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014610 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014618 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001462C 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014640 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014658 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014658 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001466C                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
0001466C                            ; ---------------------------------------------------------------------------
0001466C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001466C                            ; ---------------------------------------------------------------------------
0001466C                            Map_LConv_internal:
0001466C 0000                       		dc.w @wheel1-Map_LConv_internal
0001466E 0000                       		dc.w @wheel2-Map_LConv_internal
00014670 0000                       		dc.w @wheel3-Map_LConv_internal
00014672 0000                       		dc.w @wheel4-Map_LConv_internal
00014674 0000                       		dc.w @platform-Map_LConv_internal
00014676 01                         @wheel1:	dc.b 1
00014677 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001467C 01                         @wheel2:	dc.b 1
0001467D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014682 01                         @wheel3:	dc.b 1
00014683 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014688 01                         @wheel4:	dc.b 1
00014689 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001468E 01                         @platform:	dc.b 1
0001468F F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014694                            		even
00014694                            		even
00014694                            		include	"_incObj\64 Bubbles.asm"
00014694                            ; ---------------------------------------------------------------------------
00014694                            ; Object 64 - bubbles (LZ)
00014694                            ; ---------------------------------------------------------------------------
00014694                            
00014694                            Bubble:
00014694 7000                       		moveq	#0,d0
00014696 1028 0024                  		move.b	obRoutine(a0),d0
0001469A 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
0001469E 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
000146A2                            ; ===========================================================================
000146A2 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
000146A4 0000                       		dc.w Bub_Animate-Bub_Index
000146A6 0000                       		dc.w Bub_ChkWater-Bub_Index
000146A8 0000                       		dc.w Bub_Display-Bub_Index
000146AA 0000                       		dc.w Bub_Delete-Bub_Index
000146AC 0000                       		dc.w Bub_BblMaker-Bub_Index
000146AE                            
000146AE =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
000146AE =00000030                  bub_origX:	equ $30		; original x-axis position
000146AE =00000032                  bub_time:	equ $32		; time until next bubble spawn
000146AE =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
000146AE                            ; ===========================================================================
000146AE                            
000146AE                            Bub_Main:	; Routine 0
000146AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000146B2 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
000146BA 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000146C0 117C 0084 0001             		move.b	#$84,obRender(a0)
000146C6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000146CC 317C 0080 0018             		move.w	#$80,obPriority(a0)
000146D2 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000146D6 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
000146D8                            
000146D8 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
000146DC 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000146E0 1140 0032                  		move.b	d0,bub_time(a0)
000146E4 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
000146E8 117C 0006 001C             		move.b	#6,obAnim(a0)
000146EE 6000 0000                  		bra.w	Bub_BblMaker
000146F2                            ; ===========================================================================
000146F2                            
000146F2                            @bubble:
000146F2 1140 001C                  		move.b	d0,obAnim(a0)
000146F6 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
000146FC 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014702 4EB9 0000 3B1C             		jsr	(RandomNumber).l
00014708 1140 0026                  		move.b	d0,obAngle(a0)
0001470C                            
0001470C                            Bub_Animate:	; Routine 2
0001470C 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014712 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00014718 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
0001471E 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014720                            
00014720 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014726                            
00014726                            Bub_ChkWater:	; Routine 4
00014726 3038 F646                  		move.w	(v_waterpos1).w,d0
0001472A B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
0001472E 6500                       		bcs.s	@wobble		; if yes, branch
00014730                            
00014730                            @burst:
00014730 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014736 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
0001473A 6000 0000                  		bra.w	Bub_Display
0001473E                            ; ===========================================================================
0001473E                            
0001473E                            @wobble:
0001473E 1028 0026                  		move.b	obAngle(a0),d0
00014742 5228 0026                  		addq.b	#1,obAngle(a0)
00014746 0240 007F                  		andi.w	#$7F,d0
0001474A 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014750 1031 0000                  		move.b	(a1,d0.w),d0
00014754 4880                       		ext.w	d0
00014756 D068 0030                  		add.w	bub_origX(a0),d0
0001475A 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
0001475E 4A28 002E                  		tst.b	bub_inhalable(a0)
00014762 6700                       		beq.s	@display
00014764 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014768 6700                       		beq.s	@display	; if not, branch
0001476A                            
0001476A 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014778 43F8 D000                  		lea	(v_player).w,a1
0001477C 4269 0010                  		clr.w	obVelX(a1)
00014780 4269 0012                  		clr.w	obVelY(a1)
00014784 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014788 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
0001478E 337C 0023 003E             		move.w	#$23,$3E(a1)
00014794 137C 0000 003C             		move.b	#0,$3C(a1)
0001479A 08A9 0005 0022             		bclr	#5,obStatus(a1)
000147A0 08A9 0004 0022             		bclr	#4,obStatus(a1)
000147A6 0829 0002 0022             		btst	#2,obStatus(a1)
000147AC 6700 FF82                  		beq.w	@burst
000147B0 08A9 0002 0022             		bclr	#2,obStatus(a1)
000147B6 137C 0013 0016             		move.b	#$13,obHeight(a1)
000147BC 137C 0009 0017             		move.b	#9,obWidth(a1)
000147C2 5B69 000C                  		subq.w	#5,obY(a1)
000147C6 6000 FF68                  		bra.w	@burst
000147CA                            ; ===========================================================================
000147CA                            
000147CA                            @display:
000147CA 6100 AC5A                  		bsr.w	SpeedToPos
000147CE 4A28 0001                  		tst.b	obRender(a0)
000147D2 6A00                       		bpl.s	@delete
000147D4 4EF9 0000 F43A             		jmp	(DisplaySprite).l
000147DA                            
000147DA                            	@delete:
000147DA 4EF9 0000 F47A             		jmp	(DeleteObject).l
000147E0                            ; ===========================================================================
000147E0                            
000147E0                            Bub_Display:	; Routine 6
000147E0 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000147E6 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
000147EC 4A28 0001                  		tst.b	obRender(a0)
000147F0 6A00                       		bpl.s	@delete
000147F2 4EF9 0000 F43A             		jmp	(DisplaySprite).l
000147F8                            
000147F8                            	@delete:
000147F8 4EF9 0000 F47A             		jmp	(DeleteObject).l
000147FE                            ; ===========================================================================
000147FE                            
000147FE                            Bub_Delete:	; Routine 8
000147FE 6000 AC7A                  		bra.w	DeleteObject
00014802                            ; ===========================================================================
00014802                            
00014802                            Bub_BblMaker:	; Routine $A
00014802 4A68 0036                  		tst.w	$36(a0)
00014806 6600                       		bne.s	@loc_12874
00014808 3038 F646                  		move.w	(v_waterpos1).w,d0
0001480C B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014810 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014814 4A28 0001                  		tst.b	obRender(a0)
00014818 6A00 0000                  		bpl.w	@chkdel
0001481C 5368 0038                  		subq.w	#1,$38(a0)
00014820 6A00 0000                  		bpl.w	@loc_12914
00014824 317C 0001 0036             		move.w	#1,$36(a0)
0001482A                            
0001482A                            	@tryagain:
0001482A 4EB9 0000 3B1C             		jsr	(RandomNumber).l
00014830 3200                       		move.w	d0,d1
00014832 0240 0007                  		andi.w	#7,d0
00014836 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
0001483A 64EE                       		bcc.s	@tryagain	; if yes, branch
0001483C                            
0001483C 1140 0034                  		move.b	d0,$34(a0)
00014840 0241 000C                  		andi.w	#$C,d1
00014844 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
0001484A D2C1                       		adda.w	d1,a1
0001484C 2149 003C                  		move.l	a1,$3C(a0)
00014850 5328 0032                  		subq.b	#1,bub_time(a0)
00014854 6A00                       		bpl.s	@loc_12872
00014856 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
0001485C 08E8 0007 0036             		bset	#7,$36(a0)
00014862                            
00014862                            @loc_12872:
00014862 6000                       		bra.s	@loc_1287C
00014864                            ; ===========================================================================
00014864                            
00014864                            @loc_12874:
00014864 5368 0038                  		subq.w	#1,$38(a0)
00014868 6A00 0000                  		bpl.w	@loc_12914
0001486C                            
0001486C                            @loc_1287C:
0001486C 4EB9 0000 3B1C             		jsr	(RandomNumber).l
00014872 0240 001F                  		andi.w	#$1F,d0
00014876 3140 0038                  		move.w	d0,$38(a0)
0001487A 6100 B158                  		bsr.w	FindFreeObj
0001487E 6600                       		bne.s	@fail
00014880 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014884 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001488A 4EB9 0000 3B1C             		jsr	(RandomNumber).l
00014890 0240 000F                  		andi.w	#$F,d0
00014894 5140                       		subq.w	#8,d0
00014896 D169 0008                  		add.w	d0,obX(a1)
0001489A 3368 000C 000C             		move.w	obY(a0),obY(a1)
000148A0 7000                       		moveq	#0,d0
000148A2 1028 0034                  		move.b	$34(a0),d0
000148A6 2468 003C                  		movea.l	$3C(a0),a2
000148AA 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
000148B0 0828 0007 0036             		btst	#7,$36(a0)
000148B6 6700                       		beq.s	@fail
000148B8 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000148BE 0240 0003                  		andi.w	#3,d0
000148C2 6600                       		bne.s	@loc_buh
000148C4 08E8 0006 0036             		bset	#6,$36(a0)
000148CA 6600                       		bne.s	@fail
000148CC 137C 0002 0028             		move.b	#2,obSubtype(a1)
000148D2                            
000148D2                            @loc_buh:
000148D2 4A28 0034                  		tst.b	$34(a0)
000148D6 6600                       		bne.s	@fail
000148D8 08E8 0006 0036             		bset	#6,$36(a0)
000148DE 6600                       		bne.s	@fail
000148E0 137C 0002 0028             		move.b	#2,obSubtype(a1)
000148E6                            
000148E6                            	@fail:
000148E6 5328 0034                  		subq.b	#1,$34(a0)
000148EA 6A00                       		bpl.s	@loc_12914
000148EC 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000148F2 0240 007F                  		andi.w	#$7F,d0
000148F6 0640 0080                  		addi.w	#$80,d0
000148FA D168 0038                  		add.w	d0,$38(a0)
000148FE 4268 0036                  		clr.w	$36(a0)
00014902                            
00014902                            @loc_12914:
00014902 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014908 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001490E                            
0001490E                            @chkdel:
0001492C 3038 F646                  		move.w	(v_waterpos1).w,d0
00014930 B068 000C                  		cmp.w	obY(a0),d0
00014934 6500 AB04                  		bcs.w	DisplaySprite
00014938 4E75                       		rts	
0001493A                            ; ===========================================================================
0001493A                            ; bubble production sequence
0001493A                            
0001493A                            ; 0 = small bubble, 1 =	large bubble
0001493A                            
0001493A 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001494C                            
0001494C                            ; ===========================================================================
0001494C                            
0001494C                            Bub_ChkSonic:
0001494C 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014950 6B00                       		bmi.s	@loc_12998
00014952 43F8 D000                  		lea	(v_player).w,a1
00014956 3029 0008                  		move.w	obX(a1),d0
0001495A 3228 0008                  		move.w	obX(a0),d1
0001495E 0441 0010                  		subi.w	#$10,d1
00014962 B240                       		cmp.w	d0,d1
00014964 6400                       		bcc.s	@loc_12998
00014966 0641 0020                  		addi.w	#$20,d1
0001496A B240                       		cmp.w	d0,d1
0001496C 6500                       		bcs.s	@loc_12998
0001496E 3029 000C                  		move.w	obY(a1),d0
00014972 3228 000C                  		move.w	obY(a0),d1
00014976 B240                       		cmp.w	d0,d1
00014978 6400                       		bcc.s	@loc_12998
0001497A 0641 0010                  		addi.w	#$10,d1
0001497E B240                       		cmp.w	d0,d1
00014980 6500                       		bcs.s	@loc_12998
00014982 7001                       		moveq	#1,d0
00014984 4E75                       		rts	
00014986                            ; ===========================================================================
00014986                            
00014986                            @loc_12998:
00014986 7000                       		moveq	#0,d0
00014988 4E75                       		rts	
00014988 4E75                       		rts	
0001498A                            		include	"_anim\Bubbles.asm"
0001498A                            ; ---------------------------------------------------------------------------
0001498A                            ; Animation script - bubbles (LZ)
0001498A                            ; ---------------------------------------------------------------------------
0001498A 0000                       Ani_Bub:	dc.w @small-Ani_Bub
0001498C 0000                       		dc.w @medium-Ani_Bub
0001498E 0000                       		dc.w @large-Ani_Bub
00014990 0000                       		dc.w @incroutine-Ani_Bub
00014992 0000                       		dc.w @incroutine-Ani_Bub
00014994 0000                       		dc.w @burst-Ani_Bub
00014996 0000                       		dc.w @bubmaker-Ani_Bub
00014998 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
0001499E 00                         		even
0001499E 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
000149A4 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
000149AC 00                         		even
000149AC 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
000149AE 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
000149B4 00                         		even
000149B4 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
000149BA 00                         		even
000149BA 00                         		even
000149BA                            Map_Bub:	include	"_maps\Bubbles.asm"
000149BA                            ; ---------------------------------------------------------------------------
000149BA                            ; Sprite mappings - bubbles (LZ)
000149BA                            ; ---------------------------------------------------------------------------
000149BA                            Map_Bub_internal:
000149BA 0000                       		dc.w @bubble1-Map_Bub_internal
000149BC 0000                       		dc.w @bubble2-Map_Bub_internal
000149BE 0000                       		dc.w @bubble3-Map_Bub_internal
000149C0 0000                       		dc.w @bubble4-Map_Bub_internal
000149C2 0000                       		dc.w @bubble5-Map_Bub_internal
000149C4 0000                       		dc.w @bubble6-Map_Bub_internal
000149C6 0000                       		dc.w @bubblefull-Map_Bub_internal
000149C8 0000                       		dc.w @burst1-Map_Bub_internal
000149CA 0000                       		dc.w @burst2-Map_Bub_internal
000149CC 0000                       		dc.w @zero_sm-Map_Bub_internal
000149CE 0000                       		dc.w @five_sm-Map_Bub_internal
000149D0 0000                       		dc.w @three_sm-Map_Bub_internal
000149D2 0000                       		dc.w @one_sm-Map_Bub_internal
000149D4 0000                       		dc.w @zero-Map_Bub_internal
000149D6 0000                       		dc.w @five-Map_Bub_internal
000149D8 0000                       		dc.w @four-Map_Bub_internal
000149DA 0000                       		dc.w @three-Map_Bub_internal
000149DC 0000                       		dc.w @two-Map_Bub_internal
000149DE 0000                       		dc.w @one-Map_Bub_internal
000149E0 0000                       		dc.w @bubmaker1-Map_Bub_internal
000149E2 0000                       		dc.w @bubmaker2-Map_Bub_internal
000149E4 0000                       		dc.w @bubmaker3-Map_Bub_internal
000149E6 0000                       		dc.w @blank-Map_Bub_internal
000149E8 01                         @bubble1:	dc.b 1
000149E9 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
000149EE 01                         @bubble2:	dc.b 1
000149EF FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000149F4 01                         @bubble3:	dc.b 1
000149F5 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000149FA 01                         @bubble4:	dc.b 1
000149FB F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014A00 01                         @bubble5:	dc.b 1
00014A01 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014A06 01                         @bubble6:	dc.b 1
00014A07 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014A0C 01                         @bubblefull:	dc.b 1
00014A0D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014A12 04                         @burst1:	dc.b 4
00014A13 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014A18 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014A1D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014A22 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014A27 04                         @burst2:	dc.b 4
00014A28 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014A2D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014A32 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014A37 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014A3C 01                         @zero_sm:	dc.b 1
00014A3D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014A42 01                         @five_sm:	dc.b 1
00014A43 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014A48 01                         @three_sm:	dc.b 1
00014A49 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014A4E 01                         @one_sm:	dc.b 1
00014A4F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014A54 01                         @zero:		dc.b 1
00014A55 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014A5A 01                         @five:		dc.b 1
00014A5B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014A60 01                         @four:		dc.b 1
00014A61 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014A66 01                         @three:		dc.b 1
00014A67 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014A6C 01                         @two:		dc.b 1
00014A6D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014A72 01                         @one:		dc.b 1
00014A73 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014A78 01                         @bubmaker1:	dc.b 1
00014A79 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014A7E 01                         @bubmaker2:	dc.b 1
00014A7F F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014A84 01                         @bubmaker3:	dc.b 1
00014A85 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014A8A 00                         @blank:		dc.b 0
00014A8C 00                         		even
00014A8C 00                         		even
00014A8C                            		include	"_incObj\65 Waterfalls.asm"
00014A8C                            ; ---------------------------------------------------------------------------
00014A8C                            ; Object 65 - waterfalls (LZ)
00014A8C                            ; ---------------------------------------------------------------------------
00014A8C                            
00014A8C                            Waterfall:
00014A8C 7000                       		moveq	#0,d0
00014A8E 1028 0024                  		move.b	obRoutine(a0),d0
00014A92 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014A96 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014A9A                            ; ===========================================================================
00014A9A 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014A9C 0000                       		dc.w WFall_Animate-WFall_Index
00014A9E 0000                       		dc.w WFall_ChkDel-WFall_Index
00014AA0 0000                       		dc.w WFall_OnWater-WFall_Index
00014AA2 0000                       		dc.w loc_12B36-WFall_Index
00014AA4                            ; ===========================================================================
00014AA4                            
00014AA4                            WFall_Main:	; Routine 0
00014AA4 5828 0024                  		addq.b	#4,obRoutine(a0)
00014AA8 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014AB0 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014AB6 0028 0004 0001             		ori.b	#4,obRender(a0)
00014ABC 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014AC2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014AC8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014ACC 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014ACE 08E8 0007 0002             		bset	#7,obGfx(a0)
00014AD4                            
00014AD4                            	@under80:
00014AD4 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014AD8 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014ADC 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014AE0 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014AE2                            
00014AE2 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014AE6 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014AEA 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014AF0 6700                       		beq.s	@not49		; if not, branch
00014AF2                            
00014AF2 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014AF8                            
00014AF8                            	@not49:
00014AF8 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014AFE 6700                       		beq.s	WFall_Animate	; if not, branch
00014B00 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014B06                            
00014B06                            WFall_Animate:	; Routine 2
00014B06 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014B0C 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00014B12                            
00014B12                            WFall_ChkDel:	; Routine 4
00014B12 6000 C9C6                  		bra.w	RememberState
00014B16                            ; ===========================================================================
00014B16                            
00014B16                            WFall_OnWater:	; Routine 6
00014B16 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B1A 0440 0010                  		subi.w	#$10,d0
00014B1E 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014B22 60E2                       		bra.s	WFall_Animate
00014B24                            ; ===========================================================================
00014B24                            
00014B24                            loc_12B36:	; Routine 8
00014B24 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014B2A 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014B30 6600                       		bne.s	@animate
00014B32 08E8 0007 0002             		bset	#7,obGfx(a0)
00014B38                            
00014B38                            	@animate:
00014B38 60CC                       		bra.s	WFall_Animate
00014B38 60CC                       		bra.s	WFall_Animate
00014B3A                            		include	"_anim\Waterfalls.asm"
00014B3A                            ; ---------------------------------------------------------------------------
00014B3A                            ; Animation script - waterfall (LZ)
00014B3A                            ; ---------------------------------------------------------------------------
00014B3A 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014B3C 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014B42 00                         		even
00014B42 00                         		even
00014B42                            Map_WFall	include	"_maps\Waterfalls.asm"
00014B42                            ; ---------------------------------------------------------------------------
00014B42                            ; Sprite mappings - waterfalls (LZ)
00014B42                            ; ---------------------------------------------------------------------------
00014B42                            Map_WFall_internal:
00014B42 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014B44 0000                       		dc.w @cornerwide-Map_WFall_internal
00014B46 0000                       		dc.w @cornermedium-Map_WFall_internal
00014B48 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014B4A 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014B4C 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014B4E 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014B50 0000                       		dc.w @vertwide-Map_WFall_internal
00014B52 0000                       		dc.w @diagonal-Map_WFall_internal
00014B54 0000                       		dc.w @splash1-Map_WFall_internal
00014B56 0000                       		dc.w @splash2-Map_WFall_internal
00014B58 0000                       		dc.w @splash3-Map_WFall_internal
00014B5A 01                         @vertnarrow:	dc.b 1
00014B5B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014B60 02                         @cornerwide:	dc.b 2
00014B61 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014B66 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014B6B 02                         @cornermedium:	dc.b 2
00014B6C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014B71 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014B76 01                         @cornernarrow:	dc.b 1
00014B77 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014B7C 02                         @cornermedium2:	dc.b 2
00014B7D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014B82 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014B87 01                         @cornernarrow2:	dc.b 1
00014B88 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014B8D 01                         @cornernarrow3:	dc.b 1
00014B8E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014B93 01                         @vertwide:	dc.b 1
00014B94 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014B99 02                         @diagonal:	dc.b 2
00014B9A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014B9F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014BA4 02                         @splash1:	dc.b 2
00014BA5 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014BAA F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014BAF 02                         @splash2:	dc.b 2
00014BB0 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014BB5 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014BBA 02                         @splash3:	dc.b 2
00014BBB F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014BC0 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014BC6 00                         		even
00014BC6 00                         		even
00014BC6                            
00014BC6                            
00014BC6                            SpinDash_dust:
00014BC6                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014BC6 7000                       		moveq	#0,d0
00014BC8 1028 0024                  		move.b	$24(a0),d0
00014BCC 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014BD0 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014BD4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014BD4 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014BD6 0000                       		dc loc_1DD90-off_1DD2E; 1
00014BD8 0000                       		dc loc_1DE46-off_1DD2E; 2
00014BDA 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014BDC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014BDC                            
00014BDC                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014BDC 5428 0024                  		addq.b	#2,$24(a0)
00014BE0 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014BE8 0028 0004 0001             		or.b	#4,1(a0)
00014BEE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014BF4 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014BFA 317C 07AC 0002             		move	#$7AC,2(a0)
00014C00 317C D000 003E             		move	#-$3000,$3E(a0)
00014C06 317C F580 003C             		move	#$F580,$3C(a0)
00014C0C B0FC D1C0                  		cmp	#-$2E40,a0
00014C10 6700                       		beq.s	loc_1DD8C
00014C12 117C 0001 0034             		move.b	#1,$34(a0)
00014C18                            ;		cmp	#2,($FFFFFF70).w
00014C18                            ;		beq.s	loc_1DD8C
00014C18                            ;		move	#$48C,2(a0)
00014C18                            ;		move	#-$4FC0,$3E(a0)
00014C18                            ;		move	#-$6E80,$3C(a0)
00014C18                            
00014C18                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014C18                            ;		bsr.w	sub_16D6E
00014C18                            
00014C18                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014C18 3468 003E                  		movea.w	$3E(a0),a2
00014C1C 7000                       		moveq	#0,d0
00014C1E 1028 001C                  		move.b	$1C(a0),d0
00014C22 D040                       		add	d0,d0
00014C24 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014C28 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014C2C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C2C 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014C2E 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014C30 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014C32 0000                       		dc loc_1DE20-off_1DDA4; 3
00014C34                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C34                            
00014C34                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014C34 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014C3A 4A28 001D                  		tst.b	$1D(a0)
00014C3E 6600                       		bne.s	loc_1DE28
00014C40 316A 0008 0008             		move	8(a2),8(a0)
00014C46 117C 0000 0022             		move.b	#0,$22(a0)
00014C4C 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014C52 6000                       		bra.s	loc_1DE28
00014C54                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C54                            
00014C54                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014C54                            ;		cmp.b	#$C,$28(a2)
00014C54                            ;		bcs.s	loc_1DE3E
00014C54 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014C5A 6400                       		bcc.s	loc_1DE3E
00014C5C 4A2A 0039                  		tst.b	$39(a2)
00014C60 6700                       		beq.s	loc_1DE3E
00014C62 316A 0008 0008             		move	8(a2),8(a0)
00014C68 316A 000C 000C             		move	$C(a2),$C(a0)
00014C6E 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014C74 0228 0001 0022             		and.b	#1,$22(a0)
00014C7A 4A28 0034                  		tst.b	$34(a0)
00014C7E 6700                       		beq.s	loc_1DE06
00014C80 5968 000C                  		sub	#4,$C(a0)
00014C84                            
00014C84                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014C84 4A28 001D                  		tst.b	$1D(a0)
00014C88 6600                       		bne.s	loc_1DE28
00014C8A 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014C90 4A6A 0002                  		tst	2(a2)
00014C94 6A00                       		bpl.s	loc_1DE28
00014C96 0068 8000 0002             		or	#-$8000,2(a0)
00014C9C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C9C                            
00014C9C                            loc_1DE20:				; DATA XREF: h+6E30?o
00014C9C                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014C9C 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014CA2 4EB9 0000 C4F4             		jsr	AnimateSprite
00014CA8 6100 0000                  		bsr.w	loc_1DEE4
00014CAC 4EFA A78C                  		jmp	DisplaySprite
00014CB0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CB0                            
00014CB0                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014CB0 117C 0000 001C             		move.b	#0,$1C(a0)
00014CB6 4E75                       		rts	
00014CB8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CB8                            
00014CB8                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014CB8 6000 A7C0                  		bra.w	DeleteObject
00014CBC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CBC                            
00014CBC                            
00014CBC                            
00014CBC                            loc_1DE4A:
00014CBC 3468 003E                  	movea.w	$3E(a0),a2
00014CC0 7210                       	moveq	#$10,d1
00014CC2 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014CC8 6700                       	beq.s	loc_1DE64
00014CCA 7206                       	moveq	#$6,d1
00014CCC 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014CD2 6700                       	beq.s	loc_1DE64
00014CD4 117C 0002 0024             	move.b	#2,$24(a0)
00014CDA 117C 0000 0032             	move.b	#0,$32(a0)
00014CE0 4E75                       	rts
00014CE2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CE2                            
00014CE2                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014CE2 5328 0032                  		subq.b	#1,$32(a0)
00014CE6 6A00                       		bpl.s	loc_1DEE0
00014CE8 117C 0003 0032             		move.b	#3,$32(a0)
00014CEE 4EBA ACE4                  		jsr	FindFreeObj
00014CF2 6600                       		bne.s	loc_1DEE0
00014CF4 1290                       		move.b	0(a0),0(a1)
00014CF6 336A 0008 0008             		move	8(a2),8(a1)
00014CFC 336A 000C 000C             		move	$C(a2),$C(a1)
00014D02 4A28 0034                  		tst.b	$34(a0)
00014D06 6700                       		beq.s	loc_1DE9A
00014D08 5941                       		sub	#4,d1
00014D0A                            
00014D0A                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014D0A D369 000C                  		add	d1,$C(a1)
00014D0E 137C 0000 0022             		move.b	#0,$22(a1)
00014D14 137C 0003 001C             		move.b	#3,$1C(a1)
00014D1A 5429 0024                  		addq.b	#2,$24(a1)
00014D1E 2368 0004 0004             		move.l	4(a0),4(a1)
00014D24 1368 0001 0001             		move.b	1(a0),1(a1)
00014D2A 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014D30 137C 0004 0014             		move.b	#4,obActWid(a1)
00014D36 3368 0002 0002             		move	2(a0),2(a1)
00014D3C 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014D42 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014D48 4A6A 0002                  		tst	2(a2)
00014D4C 6A00                       		bpl.s	loc_1DEE0
00014D4E 0069 8000 0002             		or	#-$8000,2(a1)
00014D54                            
00014D54                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014D54 6100                       		bsr.s	loc_1DEE4
00014D56 4E75                       		rts	
00014D58                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D58                            
00014D58                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014D58 7000                       		moveq	#0,d0
00014D5A 1028 001A                  		move.b	$1A(a0),d0
00014D5E B028 0030                  		cmp.b	$30(a0),d0
00014D62 6700 0000                  		beq.w	locret_1DF36
00014D66 1140 0030                  		move.b	d0,$30(a0)
00014D6A 45F9 0000 0000             		lea	(off_1E074).l,a2
00014D70 D040                       		add	d0,d0
00014D72 D4F2 0000                  		add	(a2,d0.w),a2
00014D76 3A1A                       		move	(a2)+,d5
00014D78 5345                       		subq	#1,d5
00014D7A 6B00 0000                  		bmi.w	locret_1DF36
00014D7E 3828 003C                  		move $3C(a0),d4
00014D82                            
00014D82                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014D82 7200                       		moveq	#0,d1
00014D84 321A                       		move	(a2)+,d1
00014D86 3601                       		move	d1,d3
00014D88 E04B                       		lsr.w	#8,d3
00014D8A 0243 00F0                  		and	#$F0,d3	; 'ð'
00014D8E 0643 0010                  		add	#$10,d3
00014D92 0241 0FFF                  		and	#$FFF,d1
00014D96 EB89                       		lsl.l	#5,d1
00014D98 0681 0000 0000             		add.l	#Art_Dust,d1
00014D9E 3404                       		move	d4,d2
00014DA0 D843                       		add	d3,d4
00014DA2 D843                       		add	d3,d4
00014DA4 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00014DAA 51CD FFD6                  		dbf	d5,loc_1DF0A
00014DAE 4E75                           rts
00014DB0                            
00014DB0                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014DB0 4E75                       		rts	
00014DB2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DB2 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014DB4 0000                       		dc byte_1DF43-off_1DF38; 1
00014DB6 0000                       		dc byte_1DF4F-off_1DF38; 2
00014DB8 0000                       		dc byte_1DF58-off_1DF38; 3
00014DBA 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014DBD 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014DC9 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014DD2 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014DD8                            ; -------------------------------------------------------------------------------
00014DD8                            ; Unknown Sprite Mappings
00014DD8                            ; -------------------------------------------------------------------------------
00014DD8                            MapUnc_1DF5E:
00014DD8 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014DDA 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014DDC 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014DDE 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014DE0 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014DE2 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014DE4 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014DE6 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014DE8 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014DEA 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014DEC 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014DEE 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014DF0 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014DF2 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014DF4 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014DF6 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014DF8 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014DFA 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014DFC 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014DFE 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014E00 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014E02 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014E04 00                         word_1DF8A:	dc.b 0
00014E05 01                         word_1DF8C:	dc.b 1
00014E06 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E0B 01                         word_1DF96:	dc.b 1
00014E0C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E11 01                         word_1DFA0:	dc.b 1
00014E12 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E17 01                         word_1DFAA:	dc.b 1
00014E18 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E1D 01                         word_1DFB4:	dc.b 1
00014E1E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E23 01                         word_1DFBE:	dc.b 1
00014E24 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E29 01                         word_1DFC8:	dc.b 1
00014E2A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E2F 01                         word_1DFD2:	dc.b 1
00014E30 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E35 01                         word_1DFDC:	dc.b 1
00014E36 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E3B 01                         word_1DFE6:	dc.b 1
00014E3C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E41 01                         word_1DFF0:	dc.b 1
00014E42 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E47 01                         word_1DFFA:	dc.b 1
00014E48 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E4D 02                         word_1E004:	dc.b 2
00014E4E F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014E53 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014E58 02                         word_1E016:	dc.b 2
00014E59 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014E5E 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014E63 02                         word_1E028:	dc.b 2
00014E64 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014E69 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014E6E 02                         word_1E03A:	dc.b 2
00014E6F F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014E74 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014E79 01                         word_1E04C:	dc.b 1
00014E7A F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014E7F 01                         word_1E056:	dc.b 1
00014E80 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014E85 01                         word_1E060:	dc.b 1
00014E86 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014E8B 01                         word_1E06A:	dc.b 1
00014E8C F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014E91 00                         	dc.b 0
00014E92 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014E94 0000                       	dc word_1E0A2-off_1E074; 1
00014E96 0000                       	dc word_1E0A6-off_1E074; 2
00014E98 0000                       	dc word_1E0AA-off_1E074; 3
00014E9A 0000                       	dc word_1E0AE-off_1E074; 4
00014E9C 0000                       	dc word_1E0B2-off_1E074; 5
00014E9E 0000                       	dc word_1E0B6-off_1E074; 6
00014EA0 0000                       	dc word_1E0BA-off_1E074; 7
00014EA2 0000                       	dc word_1E0BE-off_1E074; 8
00014EA4 0000                       	dc word_1E0C2-off_1E074; 9
00014EA6 0000                       	dc word_1E0C6-off_1E074; 10
00014EA8 0000                       	dc word_1E0CA-off_1E074; 11
00014EAA 0000                       	dc word_1E0CE-off_1E074; 12
00014EAC 0000                       	dc word_1E0D2-off_1E074; 13
00014EAE 0000                       	dc word_1E0D8-off_1E074; 14
00014EB0 0000                       	dc word_1E0DE-off_1E074; 15
00014EB2 0000                       	dc word_1E0E4-off_1E074; 16
00014EB4 0000                       	dc word_1E0EA-off_1E074; 17
00014EB6 0000                       	dc word_1E0EA-off_1E074; 18
00014EB8 0000                       	dc word_1E0EA-off_1E074; 19
00014EBA 0000                       	dc word_1E0EA-off_1E074; 20
00014EBC 0000                       	dc word_1E0EC-off_1E074; 21
00014EBE 0000                       word_1E0A0:	dc 0
00014EC0 0001                       word_1E0A2:	dc 1
00014EC2 7000                       	dc $7000
00014EC4 0001                       word_1E0A6:	dc 1
00014EC6 F008                       	dc $F008
00014EC8 0001                       word_1E0AA:	dc 1
00014ECA F018                       	dc $F018
00014ECC 0001                       word_1E0AE:	dc 1
00014ECE F028                       	dc $F028
00014ED0 0001                       word_1E0B2:	dc 1
00014ED2 F038                       	dc $F038
00014ED4 0001                       word_1E0B6:	dc 1
00014ED6 F048                       	dc $F048
00014ED8 0001                       word_1E0BA:	dc 1
00014EDA 7058                       	dc $7058
00014EDC 0001                       word_1E0BE:	dc 1
00014EDE 7060                       	dc $7060
00014EE0 0001                       word_1E0C2:	dc 1
00014EE2 7068                       	dc $7068
00014EE4 0001                       word_1E0C6:	dc 1
00014EE6 7070                       	dc $7070
00014EE8 0001                       word_1E0CA:	dc 1
00014EEA 7078                       	dc $7078
00014EEC 0001                       word_1E0CE:	dc 1
00014EEE 7080                       	dc $7080
00014EF0 0002                       word_1E0D2:	dc 2
00014EF2 1088                       	dc $1088
00014EF4 708A                       	dc $708A
00014EF6 0002                       word_1E0D8:	dc 2
00014EF8 3092                       	dc $3092
00014EFA 7096                       	dc $7096
00014EFC 0002                       word_1E0DE:	dc 2
00014EFE 509E                       	dc $509E
00014F00 70A4                       	dc $70A4
00014F02 0002                       word_1E0E4:	dc 2
00014F04 50AC                       	dc $50AC
00014F06 70B2                       	dc $70B2
00014F08 0000                       word_1E0EA:	dc 0
00014F0A 0001                       word_1E0EC:	dc 1
00014F0C F0BA                       	dc $F0BA
00014F0E                            	even
00014F0E                            
00014F0E                            ; ===========================================================================
00014F0E                            
00014F0E                            LoadPlayerPal:
00014F0E 7000                       		moveq	#0,d0
00014F10 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00014F14 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00014F18 4E75                       		rts
00014F1A                            
00014F1A                            	@palLUT:
00014F1A 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00014F1F 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
00014F26 00                         		even
00014F26                            
00014F26                            LoadPlayerWaterPal:
00014F26 7000                       		moveq	#0,d0
00014F28 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00014F2C 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00014F30 4E75                       		rts
00014F32                            
00014F32                            	@palLUT:
00014F32 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00014F37 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
00014F3E 00                         		even
00014F3E                            
00014F3E                            ; ---------------------------------------------------------------------------
00014F3E                            ; Object 01 - Sonic
00014F3E                            ; ---------------------------------------------------------------------------
00014F3E                            
00014F3E                            SonicPlayer:
00014F3E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00014F42 6700                       		beq.s	Sonic_Normal	; if not, branch
00014F44 4EF9 0000 0000             		jmp	(DebugMode).l
00014F4A                            ; ===========================================================================
00014F4A                            
00014F4A                            Sonic_Normal:
00014F4A 7000                       		moveq	#0,d0
00014F4C 1028 0024                  		move.b	obRoutine(a0),d0
00014F50 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00014F54 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00014F58                            ; ===========================================================================
00014F58 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00014F5A 0000                       		dc.w Sonic_Control-Sonic_Index
00014F5C 0000                       		dc.w Sonic_Hurt-Sonic_Index
00014F5E 0000                       		dc.w Sonic_Death-Sonic_Index
00014F60 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00014F62                            ; ===========================================================================
00014F62                            
00014F62                            Sonic_Main:	; Routine 0
00014F62 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00014F68 5428 0024                  		addq.b	#2,obRoutine(a0)
00014F6C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00014F72 117C 0009 0017             		move.b	#9,obWidth(a0)
00014F78 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00014F80 317C 0780 0002             		move.w	#$780,obGfx(a0)
00014F86 317C 0100 0018             		move.w	#$100,obPriority(a0)
00014F8C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014F92 117C 0004 0001             		move.b	#4,obRender(a0)
00014F98 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00014F9E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00014FA4 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00014FAA 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00014FB0                            
00014FB0                            Sonic_Control:    ; Routine 2
00014FB0 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00014FB4 6700 0000                  		beq.w	@cont    
00014FB8 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00014FBA                             
00014FBA                            	@cont: 
00014FBA 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
00014FBE 6700                       		beq.s    loc_12C58    ; if not, branch
00014FC0 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00014FC6 6700                       		beq.s    loc_12C58    ; if not, branch
00014FC8 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
00014FCE 4238 F7CC                  		clr.b    (f_lockctrl).w
00014FD2 4E75                       		rts
00014FD4                            		
00014FD4                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
00014FD4                            ; ---------------------------------------------------------------------------
00014FD4                            ; Subroutine to    horizontally pan the camera view ahead of the player
00014FD4                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
00014FD4                            ; ---------------------------------------------------------------------------
00014FD4                            
00014FD4                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00014FD4                            
00014FD4                            
00014FD4                            Sonic_PanCamera:
00014FD4 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
00014FD8 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
00014FDC 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
00014FDE 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
00014FE0                            
00014FE0                                @abs_inertia:
00014FE0                            
00014FE0                            ; These lines were intended to prevent the Camera from panning while
00014FE0                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
00014FE0                            ; However, given that no such object exists in Sonic 1, I just went
00014FE0                            ; ahead and commented these out.
00014FE0                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
00014FE0                                   ; bne.s	@reset_pan                   ; if not, branch
00014FE0                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
00014FE0                                    ;bcs.s    @reset_pan                ; if so, branch
00014FE0                            
00014FE0                            ; These lines aren't part of the original routine; I added them myself.
00014FE0                            ; If you've ported the Spin Dash, uncomment the following lines of code
00014FE0                            ; to allow the camera to pan ahead while charging the Spin Dash:
00014FE0 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
00014FE4 6700                               beq.s    @skip                    ; if not, branch
00014FE6 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00014FEC 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
00014FEE 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00014FF0                            
00014FF0                                @skip:
00014FF0 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
00014FF4 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
00014FF6 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
00014FFA 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00014FFC                            
00014FFC                                @pan_right:
00014FFC 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00014FFE 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00015002 6500                               bcs.s    @update_pan                ; if not, branch
00015004 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
00015008 6000                               bra.s    @update_pan                ; branch
0001500A                            ; ---------------------------------------------------------------------------
0001500A                            
0001500A                                @pan_left:
0001500A 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001500C 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015010 6400                               bcc.s    @update_pan                ; if not, branch
00015012 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
00015016 6000                               bra.s    @update_pan                ; branch
00015018                            ; ---------------------------------------------------------------------------
00015018                            
00015018                                @reset_pan:
00015018 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
0001501C 6700                               beq.s    @update_pan                ; if so, branch
0001501E 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015020                                 
00015020                                @reset_right:
00015020 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015022 6000                               bra.s    @update_pan                ; branch
00015024                            ; ---------------------------------------------------------------------------
00015024                            
00015024                                @reset_left:
00015024 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015026                            
00015026                                @update_pan:
00015026 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
0001502A 4E75                               rts                                ; return
0001502C                                 
0001502C                            ; End of function Sonic_PanCamera
0001502C                            
0001502C                            
0001502C                            ; ===========================================================================
0001502C                            
0001502C                            loc_12C58:
0001502C 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015030 6600                       		bne.s	loc_12C64	; if yes, branch
00015032 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015038                            
00015038                            loc_12C64:
00015038 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
0001503E 6600                       		bne.s	loc_12C7E	; if yes, branch
00015040 7000                       		moveq	#0,d0
00015042 1028 0022                  		move.b	obStatus(a0),d0
00015046 0240 0006                  		andi.w	#6,d0
0001504A 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001504E 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015052                            
00015052                            loc_12C7E:
00015052 6100                       		bsr.s	Sonic_Display
00015054 6100 0000                  		bsr.w	Sonic_RecordPosition
00015058 6100 0000                  		bsr.w	Sonic_Water
0001505C 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015062 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015068 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001506C 6700                       		beq.s	loc_12CA6
0001506E 4A28 001C                  		tst.b	obAnim(a0)
00015072 6600                       		bne.s	loc_12CA6
00015074 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
0001507A                            
0001507A                            loc_12CA6:
0001507A 6100 0000                  		bsr.w	Sonic_Animate
0001507E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015082 6B00                       		bmi.s	loc_12CB6
00015084 4EB9 0000 0000             		jsr	(ReactToItem).l
0001508A                            
0001508A                            loc_12CB6:
0001508A 6100 0000                  		bsr.w	Sonic_Loops
0001508E 6100 0000                  		bsr.w	Sonic_LoadGfx
00015092 4E75                       		rts	
00015094                            ; ===========================================================================
00015094 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015096 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015098 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
0001509A 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001509C                            ; ---------------------------------------------------------------------------
0001509C                            ; Music	to play	after invincibility wears off
0001509C                            ; ---------------------------------------------------------------------------
0001509C                            MusicList2:
0001509C 00                         		dc.b bgm_GHZ
0001509D 00                         		dc.b bgm_LZ
0001509E 00                         		dc.b bgm_MZ
0001509F 00                         		dc.b bgm_SLZ
000150A0 00                         		dc.b bgm_SYZ
000150A1 00                         		dc.b bgm_SBZ
000150A2                            		; The ending doesn't get an entry
000150A2                            		even
000150A2                            
000150A2                            		include	"_incObj\Sonic Display.asm"
000150A2                            ; ---------------------------------------------------------------------------
000150A2                            ; Subroutine to display Sonic and set music
000150A2                            ; ---------------------------------------------------------------------------
000150A2                            
000150A2                            Sonic_Display:
000150A2 3028 0030                  		move.w    flashtime(a0),d0
000150A6 6700                       		beq.s    @showAfterImage
000150A8 5368 0030                  		subq.w    #1,flashtime(a0)
000150AC E648                               	lsr.w    #3,d0
000150AE 6400                               	bcc.s    @chkinvincible
000150B0                            
000150B0                            	@showAfterImage:
000150B0 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000150B4 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000150B6 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000150B8 4440                       		neg        d0                    ; if not, negate it
000150BA                            
000150BA                            	@AfterImage_Start:        
000150BA 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000150BE 6700                       		beq.s	@display	; if not, don't show the After Image
000150C0                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000150C0                            		;blt.s    @display	; if not, don't show the After Image
000150C0                            	
000150C0                            	@AfterImage_Start2:    
000150C0 6100 A912                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000150C4 6600                               	bne.s    @display    ; if not have, don't load the After Image
000150C6 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000150CA 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000150D0 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000150D6 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000150DC                            
000150DC                                	@display:
000150DC 4EB9 0000 F43A                     	jsr    (DisplaySprite).l
000150E2                            
000150E2                            	@chkinvincible:
000150E2 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000150E6 6700                       		beq.s	@chkshoes	; if not, branch
000150E8 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000150EC 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000150EE 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000150F2 6600                       		bne.s	@chkshoes
000150F4 4A38 F7AA                  		tst.b	(f_lockscreen).w
000150F8 6600                       		bne.s	@removeinvincible
000150FA 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015100 6500                       		bcs.s	@removeinvincible	
00015102 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
00015108 6700                       		beq.s	@removeinvincible	
0001510A 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
00015110 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
00015112 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
00015116 6000                       		bra.s	@playtune
00015118                            		
00015118                            @haveshoes:		
00015118 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001511C                            
0001511C                            @playtune: 
0001511C 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
00015122                            
00015122                            	@removeinvincible:
00015122 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015128                            
00015128                            	@chkshoes:
00015128 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001512C 6700                       		beq.s	@exit		; if not, branch
0001512E 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015132 6700                       		beq.s	@exit
00015134 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015138 6600                       		bne.s	@exit
0001513A 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015140 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015146 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001514C 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015152 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
00015158 6700                       		beq.s	@exit
0001515A 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
00015160 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
00015162 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
00015166 6000                       		bra.b	@playtune2
00015168                            @isinvincible:		
00015168 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001516C                            @playtune2:
0001516C 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
00015172                            		
00015172                            	@exit:
00015172 4E75                       		rts	
00015172 4E75                       		rts	
00015174                            		include	"_incObj\Sonic RecordPosition.asm"
00015174                            ; ---------------------------------------------------------------------------
00015174                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015174                            ; ---------------------------------------------------------------------------
00015174                            
00015174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015174                            
00015174                            
00015174                            Sonic_RecordPosition:
00015174 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015178 43F8 CB00                  		lea	(v_tracksonic).w,a1
0001517C 43F1 0000                  		lea	(a1,d0.w),a1
00015180 32E8 0008                  		move.w	obX(a0),(a1)+
00015184 32E8 000C                  		move.w	obY(a0),(a1)+
00015188 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
0001518C 4E75                       		rts	
0001518E                            ; End of function Sonic_RecordPosition
0001518E                            ; End of function Sonic_RecordPosition
0001518E                            		include	"_incObj\Sonic Water.asm"
0001518E                            ; ---------------------------------------------------------------------------
0001518E                            ; Subroutine for Sonic when he's underwater
0001518E                            ; ---------------------------------------------------------------------------
0001518E                            
0001518E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001518E                            
0001518E                            
0001518E                            Sonic_Water:
0001518E 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
00015194 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015196 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
0001519C 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
0001519E                            
0001519E                            	Sonic_Water_Exit:
0001519E 4E75                       		rts	
000151A0                            ; ===========================================================================
000151A0                            
000151A0                            	Sonic_Water_LZ:
000151A0 3038 F646                  		move.w	(v_waterpos1).w,d0
000151A4 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
000151A8 6C00 0000                  		bge.w	Abovewater	; if yes, branch
000151AC 6000 0000                  		bra	WaterStatus
000151B0                            	WaterTagforMZ:
000151B0 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000151B6 6700 0000                  		beq.w	Abovewater	; if yes, branch
000151BA                            		;move.w #$F,d0             ;TIS Length ($F = full line)
000151BA                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
000151BA                                ;    	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000151BA                            	;	jsr	Palload_Loop
000151BA                            	WaterStatus:
000151BA 08E8 0006 0022             		bset	#6,obStatus(a0)
000151C0 6600 FFDC                  		bne.w	Sonic_Water_Exit
000151C4 6100 0000                  		bsr.w	ResumeMusic
000151C8 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000151CE 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000151D4 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000151DA 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000151E0 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000151E6 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000151EC E0E8 0010                  		asr	obVelX(a0)
000151F0 E0E8 0012                  		asr	obVelY(a0)
000151F4 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000151F8 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000151FC                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000151FC 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
0001520C 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015212 6600 0000                  		bne.w	@return
00015216                            		
00015216                            		
00015216                            	@return:
00015216 4E75                       		rts
00015218                            ; ===========================================================================
00015218                            
00015218                            Abovewater:
00015218 08A8 0006 0022             		bclr	#6,obStatus(a0)
0001521E 6700 FF7E                  		beq.w	Sonic_Water_Exit
00015222 6100 0000                  		bsr.w	ResumeMusic
00015226 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
0001522C                            
0001522C 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015232 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015238 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001523E E1E8 0012                  		asl	obVelY(a0)
00015242 6700 FF5A                  		beq.w	Sonic_Water_Exit
00015246 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
0001524C 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015252 6E00                       		bgt.s	@belowmaxspeed
00015254 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001525A                            
0001525A                            	@belowmaxspeed:
00015264                            ; End of function Sonic_Water
00015264                            ; End of function Sonic_Water
00015264                            		include "_incObj\03 Hangable Sprite.asm"
00015264                            ; ===========================================================================
00015264                            ; ----------------------------------------------------------------------------
00015264                            ; Object 03 - Invisible sprite that you can hang on to
00015264                            ; ----------------------------------------------------------------------------
00015264                            ; Sprite_2C92C:
00015264                            Obj03:
00015264 7000                       	moveq    #0,d0
00015266 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001526A 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
0001526E 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015272                            ; ===========================================================================
00015272                            ; off_2C93A:
00015272                            Obj03_Index:
00015272 0000                           dc.w Obj03_Main-Obj03_Index
00015274 0000                               dc.w Obj03_Init-Obj03_Index
00015276                            ; ===========================================================================
00015276                            ; loc_2C93E:
00015276                            Obj03_Init:
00015276 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001527A 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015280 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015286 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
0001528C                            ; loc_2C954:
0001528C                            Obj03_Main:
0001528C 45E8 0030                      lea    $30(a0),a2
00015290 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015294 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
00015298 6100                           bsr.s    Obj03_Check
0001529A                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
0001529A                            ;    addq.w    #1,a2                          ;disabled
0001529A                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
0001529A                            ;    bsr.s    Obj03_Check         	;disabled
0001529A 4EF9 0000 0000             	jmp		bonu_chkdel
000152A0                            ; ===========================================================================
000152A0                            ; loc_2C972:
000152A0                            Obj03_Check:
000152A0 4A12                       		tst.b	(a2)
000152A2 6700                       		beq.s	loc_2C9A0
000152A4 0200 0070                  		andi.b	#btnABC,d0
000152A8 6700 0000                  		beq.w	Obj03_Check_End
000152AC 4238 F7C8                  		clr.b	f_lockmulti.w
000152B0 4212                       		clr.b	(a2)
000152B2 157C 0012 0002             		move.b	#$12,2(a2)
000152B8 0240 0F00                  		andi.w	#$F00,d0
000152BC 6700                       		beq.s	loc_2C954
000152BE 157C 003C 0002             		move.b	#$3C,2(a2)
000152C4                            	
000152C4                            loc_2C954:
000152C4 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000152CA 6000 0000                  		bra.w	Obj03_Check_End
000152CE                            ; ===========================================================================
000152CE                            
000152CE                            loc_2C9A0:
000152CE 4A2A 0002                  		tst.b	2(a2)
000152D2 6700                       		beq.s	loc_2C972
000152D4 532A 0002                  		subq.b	#1,2(a2)
000152D8 6600 0000                  		bne.w	Obj03_Check_End
000152DC                            
000152DC                            loc_2C972:
000152DC 3029 0008                  		move.w	obX(a1),d0
000152E0 9068 0008                  		sub.w	obX(a0),d0
000152E4 0640 0018                  		addi.w	#$18,d0
000152E8 0C40 0030                  		cmpi.w	#$30,d0
000152EC 6400 0000                  		bhs.w	Obj03_Check_End
000152F0 3229 000C                  		move.w	obY(a1),d1
000152F4 9268 000C                  		sub.w	obY(a0),d1
000152F8 0C41 0010                  		cmpi.w	#$10,d1
000152FC 6400 0000                  		bhs.w	Obj03_Check_End
00015300 4A38 F7C8                  		tst.b	f_lockmulti.w
00015304 6B00                       		bmi.s	Obj03_Check_End
00015306 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
0001530C 6400                       		bhs.s	Obj03_Check_End
0001530E 4A78 FFFA                  		tst.w	(f_debugmode).w
00015312 6600                       		bne.s	Obj03_Check_End
00015314 4269 0010                  		clr.w	x_vel(a1)
00015318 4269 0012                  		clr.w	y_vel(a1)
0001531C 4269 0020                  		clr.w	obInertia(a1)
00015320 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015326 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
0001532C 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015332 14BC 0001                  		move.b	#1,(a2)
00015336                            
00015336                            ; return_2CA08:
00015336                            Obj03_Check_End:
00015336 4E75                       		rts
00015336 4E75                       		rts
00015338                            
00015338                            ; ===========================================================================
00015338                            ; ---------------------------------------------------------------------------
00015338                            ; Modes	for controlling	Sonic
00015338                            ; ---------------------------------------------------------------------------
00015338                            
00015338                            Sonic_MdNormal:
00015338                            		;bsr.w	Sonic_Peelout
00015338                            		;bsr.w	Sonic_SpinDash
00015338 6100 0000                  		bsr.w	Sonic_Jump
0001533C 6100 0000                  		bsr.w	Sonic_SlopeResist
00015340 6100 0000                  		bsr.w	Sonic_Move
00015344 6100 0000                  		bsr.w	Sonic_Roll
00015348 6100 0000                  		bsr.w	Sonic_LevelBound
0001534C 4EB9 0000 F426             		jsr	(SpeedToPos).l
00015352 6100 0000                  		bsr.w	Sonic_AnglePos
00015356 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001535A 4E75                       		rts	
0001535C                            
0001535C                            ; ===========================================================================
0001535C                            
0001535C                            Sonic_MdJump:
0001535C 6100 0000                  		bsr.w   Sonic_AirRoll
00015360 6100 0000                  		bsr.w	Sonic_JumpHeight
00015364 6100 0000                  		bsr.w	Sonic_JumpDirection
00015368 6100 0000                  		bsr.w	Sonic_LevelBound
0001536C 4EB9 0000 F3EE             		jsr	(ObjectFall).l
00015372 0828 0006 0022             		btst	#6,obStatus(a0)
00015378 6700                       		beq.s	loc_12E5C
0001537A 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015380                            
00015380                            loc_12E5C:
00015380 6100 0000                  		bsr.w	Sonic_JumpAngle
00015384 6100 0000                  		bsr.w	Sonic_Floor
00015388 4E75                       		rts	
0001538A                            ; ===========================================================================
0001538A                            
0001538A                            Sonic_MdRoll:
0001538A 6100 0000                  		bsr.w	Sonic_Jump
0001538E 6100 0000                  		bsr.w	Sonic_RollRepel
00015392 6100 0000                  		bsr.w	Sonic_RollSpeed
00015396 6100 0000                  		bsr.w	Sonic_LevelBound
0001539A 4EB9 0000 F426             		jsr	(SpeedToPos).l
000153A0 6100 0000                  		bsr.w	Sonic_AnglePos
000153A4 6100 0000                  		bsr.w	Sonic_SlopeRepel
000153A8 4E75                       		rts	
000153AA                            ; ===========================================================================
000153AA                            
000153AA                            Sonic_MdJump2:
000153AA 6100 0000                  		bsr.w	Sonic_JumpHeight
000153AE 6100 0000                  		bsr.w	Sonic_JumpDirection
000153B2 6100 0000                  		bsr.w	Sonic_LevelBound
000153B6 4EB9 0000 F3EE             		jsr	(ObjectFall).l
000153BC 0828 0006 0022             		btst	#6,obStatus(a0)
000153C2 6700                       		beq.s	loc_12EA6
000153C4 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000153CA                            
000153CA                            loc_12EA6:
000153CA 6100 0000                  		bsr.w	Sonic_JumpAngle
000153CE 6100 0000                  		bsr.w	Sonic_Floor
000153D2 4E75                       		rts	
000153D4                            
000153D4                            		include	"_incObj\Sonic Move.asm"
000153D4                            ; ---------------------------------------------------------------------------
000153D4                            ; Subroutine to	make Sonic walk/run
000153D4                            ; ---------------------------------------------------------------------------
000153D4                            
000153D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153D4                            
000153D4                            
000153D4                            Sonic_Move:
000153D4 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000153D8 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000153DC 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000153E0 4A38 F7CA                  		tst.b	(f_jumponly).w
000153E4 6600 0000                  		bne.w	loc_12FEE
000153E8 4A68 003E                  		tst.w	$3E(a0)
000153EC 6600 0000                  		bne.w	Sonic_ResetScr
000153F0 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000153F6 6700                       		beq.s	@notleft	; if not, branch
000153F8 6100 0000                  		bsr.w	Sonic_MoveLeft
000153FC                            
000153FC                            	@notleft:
000153FC 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015402 6700                       		beq.s	@notright	; if not, branch
00015404 6100 0000                  		bsr.w	Sonic_MoveRight
00015408                            
00015408                            	@notright:
00015408 1028 0026                  		move.b	obAngle(a0),d0
0001540C 0600 0020                  		addi.b	#$20,d0
00015410 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015414 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015418 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
0001541C 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015420 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015426 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001542C 0828 0003 0022             		btst	#3,obStatus(a0)
00015432 6700                       		beq.s	Sonic_Balance
00015434 7000                       		moveq	#0,d0
00015436 1028 003D                  		move.b	$3D(a0),d0
0001543A ED48                       		lsl.w	#6,d0
0001543C 43F8 D000                  		lea	(v_objspace).w,a1
00015440 43F1 0000                  		lea	(a1,d0.w),a1
00015444 4A29 0022                  		tst.b	obStatus(a1)
00015448 6B00                       		bmi.s	Sonic_LookUp
0001544A 7200                       		moveq	#0,d1
0001544C 1229 0014                  		move.b	obActWid(a1),d1
00015450 3401                       		move.w	d1,d2
00015452 D442                       		add.w	d2,d2
00015454 5942                       		subq.w	#4,d2
00015456 D268 0008                  		add.w	obX(a0),d1
0001545A 9269 0008                  		sub.w	obX(a1),d1
0001545E 0C41 0004                  		cmpi.w	#4,d1
00015462 6D00                       		blt.s	loc_12F6A
00015464 B242                       		cmp.w	d2,d1
00015466 6C00                       		bge.s	loc_12F5A
00015468 6000                       		bra.s	Sonic_LookUp
0001546A                            ; ===========================================================================
0001546A                            
0001546A                            Sonic_Balance:
0001546A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015470 0C41 000C                  		cmpi.w	#$C,d1
00015474 6D00                       		blt.s	Sonic_LookUp
00015476 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001547C 6600                       		bne.s	loc_12F62
0001547E                            
0001547E                            loc_12F5A:
0001547E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015484 6000                       		bra.s	loc_12F70
00015486                            ; ===========================================================================
00015486                            
00015486                            loc_12F62:
00015486 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001548C 6600                       		bne.s	Sonic_LookUp
0001548E                            
0001548E                            loc_12F6A:
0001548E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015494                            
00015494                            loc_12F70:
00015494 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001549A 6000 0000                  		bra.w	Sonic_ResetScr
0001549E                            ; ===========================================================================
0001549E                            
0001549E                            Sonic_LookUp:
0001549E 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
000154A4 6700                       		beq.s	Sonic_Duck	; if not, branch
000154A6 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
000154AC 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
000154B2 6700                       		beq.s	loc_12FC2
000154B4 5478 F73E                  		addq.w	#2,(v_lookshift).w
000154B8 6000                       		bra.s	loc_12FC2
000154BA                            ; ===========================================================================
000154BA                            
000154BA                            Sonic_Duck:
000154BA 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
000154C0 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000154C2 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
000154C8 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
000154CE 6700                       		beq.s	loc_12FC2
000154D0 5578 F73E                  		subq.w	#2,(v_lookshift).w
000154D4 6000                       		bra.s	loc_12FC2
000154D6                            ; =============================================
000154D6                            ; ===========================================================================
000154D6                            
000154D6                            Sonic_ResetScr:
000154D6 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000154DC                            		
000154DC                            Sonic_ResetScr_Part2:
000154DC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000154E2 6700                       		beq.s	loc_12FC2	; if yes, branch
000154E4 6400                       		bcc.s	loc_12FBE
000154E6 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000154EA                            
000154EA                            loc_12FBE:
000154EA 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000154EE                            
000154EE                            loc_12FC2:
000154EE 1038 F602                  		move.b	(v_jpadhold2).w,d0
000154F2 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000154F6 6600                       		bne.s	loc_12FEE	; if yes, branch
000154F8 3028 0020                  		move.w	obInertia(a0),d0
000154FC 6700                       		beq.s	loc_12FEE
000154FE 6B00                       		bmi.s	loc_12FE2
00015500 9045                       		sub.w	d5,d0
00015502 6400                       		bcc.s	loc_12FDC
00015504 303C 0000                  		move.w	#0,d0
00015508                            
00015508                            loc_12FDC:
00015508 3140 0020                  		move.w	d0,obInertia(a0)
0001550C 6000                       		bra.s	loc_12FEE
0001550E                            ; ===========================================================================
0001550E                            
0001550E                            loc_12FE2:
0001550E D045                       		add.w	d5,d0
00015510 6400                       		bcc.s	loc_12FEA
00015512 303C 0000                  		move.w	#0,d0
00015516                            
00015516                            loc_12FEA:
00015516 3140 0020                  		move.w	d0,obInertia(a0)
0001551A                            
0001551A                            loc_12FEE:
0001551A 4A28 0039                  		tst.b	$39(a0) 	;Peelout
0001551E 6600                       		bne.s	loc_1300C 	;Peelout
00015520 1028 0026                  		move.b	obAngle(a0),d0
00015524 4EB9 0000 3B42             		jsr	(CalcSine).l
0001552A C3E8 0020                  		muls.w	obInertia(a0),d1
0001552E E081                       		asr.l	#8,d1
00015530 3141 0010                  		move.w	d1,obVelX(a0)
00015534 C1E8 0020                  		muls.w	obInertia(a0),d0
00015538 E080                       		asr.l	#8,d0
0001553A 3140 0012                  		move.w	d0,obVelY(a0)
0001553E                            
0001553E                            loc_1300C:
0001553E 1028 0026                  		move.b	obAngle(a0),d0
00015542 0600 0040                  		addi.b	#$40,d0
00015546 6B00                       		bmi.s	locret_1307C
00015548 123C 0040                  		move.b	#$40,d1
0001554C 4A68 0020                  		tst.w	obInertia(a0)
00015550 6700                       		beq.s	locret_1307C
00015552 6B00                       		bmi.s	loc_13024
00015554 4441                       		neg.w	d1
00015556                            
00015556                            loc_13024:
00015556 1028 0026                  		move.b	obAngle(a0),d0
0001555A D001                       		add.b	d1,d0
0001555C 3F00                       		move.w	d0,-(sp)
0001555E 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015562 301F                       		move.w	(sp)+,d0
00015564 4A41                       		tst.w	d1
00015566 6A00                       		bpl.s	locret_1307C
00015568 E141                       		asl.w	#8,d1
0001556A 0600 0020                  		addi.b	#$20,d0
0001556E 0200 00C0                  		andi.b	#$C0,d0
00015572 6700                       		beq.s	loc_13078
00015574 0C00 0040                  		cmpi.b	#$40,d0
00015578 6700                       		beq.s	loc_13066
0001557A 0C00 0080                  		cmpi.b	#$80,d0
0001557E 6700                       		beq.s	loc_13060
00015580 D368 0010                  		add.w	d1,obVelX(a0)
00015584 08E8 0005 0022             		bset	#5,obStatus(a0)
0001558A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015590 4E75                       		rts	
00015592                            ; ===========================================================================
00015592                            
00015592                            loc_13060:
00015592 9368 0012                  		sub.w	d1,obVelY(a0)
00015596 4E75                       		rts	
00015598                            ; ===========================================================================
00015598                            
00015598                            loc_13066:
00015598 9368 0010                  		sub.w	d1,obVelX(a0)
0001559C 08E8 0005 0022             		bset	#5,obStatus(a0)
000155A2 317C 0000 0020             		move.w	#0,obInertia(a0)
000155A8 4E75                       		rts	
000155AA                            ; ===========================================================================
000155AA                            
000155AA                            loc_13078:
000155AA D368 0012                  		add.w	d1,obVelY(a0)
000155AE                            
000155AE                            locret_1307C:
000155AE 4E75                       		rts	
000155B0                            ; End of function Sonic_Move
000155B0                            
000155B0                            
000155B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B0                            
000155B0                            
000155B0                            Sonic_MoveLeft:
000155B0 3028 0020                  		move.w	obInertia(a0),d0
000155B4 6700                       		beq.s	loc_13086
000155B6 6A00                       		bpl.s	loc_130B2
000155B8                            
000155B8                            loc_13086:
000155B8 08E8 0000 0022             		bset	#0,$22(a0)
000155BE 6600                       		bne.s	loc_1309A
000155C0 08A8 0005 0022             		bclr	#5,$22(a0)
000155C6 117C 0001 001D             		move.b	#1,$1D(a0)
000155CC                            
000155CC                            loc_1309A:
000155CC 9045                       		sub.w	d5,d0
000155CE 3206                       		move.w	d6,d1
000155D0 4441                       		neg.w	d1
000155D2 B041                       		cmp.w	d1,d0
000155D4 6E00                       		bgt.s	loc_130A6
000155D6 D045                       		add.w	d5,d0
000155D8 B041                       		cmp.w	d1,d0
000155DA 6F00                       		ble.s	loc_130A6
000155DC 3001                       		move.w	d1,d0
000155DE                            
000155DE                            loc_130A6:
000155DE 3140 0020                  		move.w	d0,obInertia(a0)
000155E2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000155E8 4E75                       		rts
000155EA                            ; ===========================================================================
000155EA                            
000155EA                            loc_130B2:
000155EA 9044                       		sub.w	d4,d0
000155EC 6400                       		bcc.s	loc_130BA
000155EE 303C FF80                  		move.w	#-$80,d0
000155F2                            
000155F2                            loc_130BA:
000155F2 3140 0020                  		move.w	d0,obInertia(a0)
000155F6 1228 0026                  		move.b	obAngle(a0),d1
000155FA 0601 0020                  		addi.b	#$20,d1
000155FE 0201 00C0                  		andi.b	#$C0,d1
00015602 6600                       		bne.s	locret_130E8
00015604 0C40 0400                  		cmpi.w	#$400,d0
00015608 6D00                       		blt.s	locret_130E8
0001560A 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015610 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015620 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015626 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
0001562C                            		
0001562C                            locret_130E8:
0001562C 4E75                       		rts	
0001562E                            ; End of function Sonic_MoveLeft
0001562E                            
0001562E                            
0001562E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001562E                            
0001562E                            
0001562E                            Sonic_MoveRight:
0001562E 3028 0020                  		move.w	obInertia(a0),d0
00015632 6B00                       		bmi.s	loc_13118
00015634 08A8 0000 0022             		bclr	#0,$22(a0)
0001563A 6700                       		beq.s	loc_13104
0001563C 08A8 0005 0022             		bclr	#5,$22(a0)
00015642 117C 0001 001D             		move.b	#1,$1D(a0)
00015648                            
00015648                            loc_13104:
00015648 D045                       		add.w	d5,d0
0001564A B046                       		cmp.w	d6,d0
0001564C 6D00                       		blt.s	loc_1310C
0001564E 9045                       		sub.w	d5,d0
00015650 B046                       		cmp.w	d6,d0
00015652 6C00                       		bge.s	loc_1310C
00015654 3006                       		move.w	d6,d0
00015656                            
00015656                            loc_1310C:
00015656 3140 0020                  		move.w	d0,obInertia(a0)
0001565A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015660 4E75                       		rts
00015662                            ; ===========================================================================
00015662                            
00015662                            loc_13118:
00015662 D044                       		add.w	d4,d0
00015664 6400                       		bcc.s	loc_13120
00015666 303C 0080                  		move.w	#$80,d0
0001566A                            
0001566A                            loc_13120:
0001566A 3140 0020                  		move.w	d0,obInertia(a0)
0001566E 1228 0026                  		move.b	obAngle(a0),d1
00015672 0601 0020                  		addi.b	#$20,d1
00015676 0201 00C0                  		andi.b	#$C0,d1
0001567A 6600                       		bne.s	locret_1314E
0001567C 0C40 FC00                  		cmpi.w	#-$400,d0
00015680 6E00                       		bgt.s	locret_1314E
00015682 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015688 08E8 0000 0022             		bset	#0,obStatus(a0)
00015698 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
0001569E 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
000156A4                            		
000156A4                            locret_1314E:
000156A4 4E75                       		rts	
000156A6                            ; End of function Sonic_MoveRight
000156A6                            ; End of function Sonic_MoveRight
000156A6                            		include	"_incObj\Sonic RollSpeed.asm"
000156A6                            ; ---------------------------------------------------------------------------
000156A6                            ; Subroutine to	change Sonic's speed as he rolls
000156A6                            ; ---------------------------------------------------------------------------
000156A6                            
000156A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156A6                            
000156A6                            
000156A6                            Sonic_RollSpeed:
000156A6 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000156AA E346                       		asl.w	#1,d6
000156AC 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
000156AE 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000156B2 E444                       		asr.w	#2,d4
000156B4 4A38 F7CA                  		tst.b	(f_jumponly).w
000156B8 6600 0000                  		bne.w	loc_131CC
000156BC 4A68 003E                  		tst.w	$3E(a0)
000156C0 6600                       		bne.s	@notright
000156C2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000156C8 6700                       		beq.s	@notleft	; if not, branch
000156CA 6100 0000                  		bsr.w	Sonic_RollLeft
000156CE                            
000156CE                            	@notleft:
000156CE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000156D4 6700                       		beq.s	@notright	; if not, branch
000156D6 6100 0000                  		bsr.w	Sonic_RollRight
000156DA                            
000156DA                            	@notright:
000156DA 3028 0020                  		move.w	obInertia(a0),d0
000156DE 6700                       		beq.s	loc_131AA
000156E0 6B00                       		bmi.s	loc_1319E
000156E2 9045                       		sub.w	d5,d0
000156E4 6400                       		bcc.s	loc_13198
000156E6 303C 0000                  		move.w	#0,d0
000156EA                            
000156EA                            loc_13198:
000156EA 3140 0020                  		move.w	d0,obInertia(a0)
000156EE 6000                       		bra.s	loc_131AA
000156F0                            ; ===========================================================================
000156F0                            
000156F0                            loc_1319E:
000156F0 D045                       		add.w	d5,d0
000156F2 6400                       		bcc.s	loc_131A6
000156F4 303C 0000                  		move.w	#0,d0
000156F8                            
000156F8                            loc_131A6:
000156F8 3140 0020                  		move.w	d0,obInertia(a0)
000156FC                            
000156FC                            loc_131AA:
000156FC 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015700 6600                       		bne.s	loc_131CC	; if yes, branch
00015702 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015708 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001570E 117C 0009 0017             		move.b	#9,obWidth(a0)
00015714 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001571A 5B68 000C                  		subq.w	#5,obY(a0)
0001571E                            
0001571E                            loc_131CC:
0001571E 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015724 6700                       		beq.s	@cont2
00015726 6400                       		bcc.s	@cont1
00015728 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001572C                            		
0001572C                            @cont1:
0001572C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015730                            		
00015730                            @cont2:
00015730 1028 0026                  		move.b	obAngle(a0),d0
00015734 4EB9 0000 3B42             		jsr	(CalcSine).l
0001573A C1E8 0020                  		muls.w	obInertia(a0),d0
0001573E E080                       		asr.l	#8,d0
00015740 3140 0012                  		move.w	d0,obVelY(a0)
00015744 C3E8 0020                  		muls.w	obInertia(a0),d1
00015748 E081                       		asr.l	#8,d1
0001574A 0C41 1000                  		cmpi.w	#$1000,d1
0001574E 6F00                       		ble.s	loc_131F0
00015750 323C 1000                  		move.w	#$1000,d1
00015754                            
00015754                            loc_131F0:
00015754 0C41 F000                  		cmpi.w	#-$1000,d1
00015758 6C00                       		bge.s	loc_131FA
0001575A 323C F000                  		move.w	#-$1000,d1
0001575E                            
0001575E                            loc_131FA:
0001575E 3141 0010                  		move.w	d1,obVelX(a0)
00015762 6000 FDDA                  		bra.w	loc_1300C
00015766                            ; End of function Sonic_RollSpeed
00015766                            
00015766                            
00015766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015766                            
00015766                            
00015766                            Sonic_RollLeft:
00015766 3028 0020                  		move.w	obInertia(a0),d0
0001576A 6700                       		beq.s	loc_1320A
0001576C 6A00                       		bpl.s	loc_13218
0001576E                            
0001576E                            loc_1320A:
0001576E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015774 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001577A 4E75                       		rts	
0001577C                            ; ===========================================================================
0001577C                            
0001577C                            loc_13218:
0001577C 9044                       		sub.w	d4,d0
0001577E 6400                       		bcc.s	loc_13220
00015780 303C FF80                  		move.w	#-$80,d0
00015784                            
00015784                            loc_13220:
00015784 3140 0020                  		move.w	d0,obInertia(a0)
00015788 4E75                       		rts	
0001578A                            ; End of function Sonic_RollLeft
0001578A                            
0001578A                            
0001578A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001578A                            
0001578A                            
0001578A                            Sonic_RollRight:
0001578A 3028 0020                  		move.w	obInertia(a0),d0
0001578E 6B00                       		bmi.s	loc_1323A
00015790 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015796 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001579C 4E75                       		rts	
0001579E                            ; ===========================================================================
0001579E                            
0001579E                            loc_1323A:
0001579E D044                       		add.w	d4,d0
000157A0 6400                       		bcc.s	loc_13242
000157A2 303C 0080                  		move.w	#$80,d0
000157A6                            
000157A6                            loc_13242:
000157A6 3140 0020                  		move.w	d0,obInertia(a0)
000157AA 4E75                       		rts	
000157AC                            ; End of function Sonic_RollRight
000157AC                            ; End of function Sonic_RollRight
000157AC                            		include	"_incObj\Sonic JumpDirection.asm"
000157AC                            ; ---------------------------------------------------------------------------
000157AC                            ; Subroutine to	change Sonic's direction while jumping
000157AC                            ; ---------------------------------------------------------------------------
000157AC                            
000157AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157AC                            
000157AC                            
000157AC                            Sonic_JumpDirection:
000157AC 3C38 F760                  		move.w	($FFFFF760).w,d6
000157B0 3A38 F762                  		move.w	($FFFFF762).w,d5
000157B4 E345                       		asl.w	#1,d5
000157B6 3028 0010                  		move.w	$10(a0),d0	
000157BA 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
000157C0 6700                       		beq.s	loc_13278; if not, branch	
000157C2 08E8 0000 0022             		bset	#0,$22(a0)	
000157C8 9045                       		sub.w	d5,d0	
000157CA 3206                       		move.w	d6,d1	
000157CC 4441                       		neg.w	d1	
000157CE B041                       		cmp.w	d1,d0	
000157D0 6E00                       		bgt.s	loc_13278	
000157D2 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
000157D4 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
000157D6 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
000157D8 3001                       		move.w	d1,d0
000157DA                            
000157DA                            loc_13278:
000157DA 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
000157E0 6700                       		beq.s	Obj01_JumpMove; if not, branch	
000157E2 08A8 0000 0022             		bclr	#0,$22(a0)	
000157E8 D045                       		add.w	d5,d0	
000157EA B046                       		cmp.w	d6,d0	
000157EC 6D00                       		blt.s	Obj01_JumpMove
000157EE 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
000157F0 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
000157F2 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
000157F4 3006                       		move.w	d6,d0
000157F6                            
000157F6                            Obj01_JumpMove:
000157F6 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
000157FA                            
000157FA                            Obj01_ResetScr2:
000157FA 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015800 6700                       		beq.s	loc_132A4	; if yes, branch
00015802 6400                       		bcc.s	loc_132A0
00015804 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015808                            
00015808                            loc_132A0:
00015808 5578 F73E                  		subq.w	#2,(v_lookshift).w
0001580C                            
0001580C                            loc_132A4:
0001580C 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015812 6500                       		bcs.s	locret_132D2	; if yes, branch
00015814 3028 0010                  		move.w	obVelX(a0),d0
00015818 3200                       		move.w	d0,d1
0001581A EA41                       		asr.w	#5,d1
0001581C 6700                       		beq.s	locret_132D2
0001581E 6B00                       		bmi.s	loc_132C6
00015820 9041                       		sub.w	d1,d0
00015822 6400                       		bcc.s	loc_132C0
00015824 303C 0000                  		move.w	#0,d0
00015828                            
00015828                            loc_132C0:
00015828 3140 0010                  		move.w	d0,obVelX(a0)
0001582C 4E75                       		rts	
0001582E                            ; ===========================================================================
0001582E                            
0001582E                            loc_132C6:
0001582E 9041                       		sub.w	d1,d0
00015830 6500                       		bcs.s	loc_132CE
00015832 303C 0000                  		move.w	#0,d0
00015836                            
00015836                            loc_132CE:
00015836 3140 0010                  		move.w	d0,obVelX(a0)
0001583A                            
0001583A                            locret_132D2:
0001583A 4E75                       		rts	
0001583C                            ; End of function Sonic_JumpDirection
0001583C                            ; End of function Sonic_JumpDirection
0001583C                            		include "_incObj\Sonic Peelout.asm"
0001583C                            ; ---------------------------------------------------------------------------
0001583C                            ; Subroutine to make Sonic perform a peelout
0001583C                            ; ---------------------------------------------------------------------------
0001583C                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
0001583C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001583C                            
0001583C                            Sonic_Peelout:
0001583C 0828 0001 0039             		btst	#1,$39(a0)
00015842 6600                       		bne.s	SCDPeelout_Launch
00015844 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
0001584A 6600                       		bne.s	@return
0001584C 1038 F603                  		move.b	($FFFFF603).w,d0
00015850 0200 0070                  		andi.b	#%01110000,d0
00015854 6700 0000                  		beq.w	@return
00015858 117C 0001 001C             		move.b	#1,$1C(a0)
0001585E 317C 0000 003A             		move.w	#0,$3A(a0)
00015864 303C 00D2                  		move.w	#$D2,d0
00015868 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
0001586E                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
0001586E 588F                       		addq.l	#4,sp
00015870 08E8 0001 0039             		bset	#1,$39(a0)
00015876                            		
00015876 4268 0020                  		clr.w	obInertia(a0)
0001587A                             
0001587A 6100 0000                  		bsr.w	Sonic_LevelBound
0001587E 6100 0000                  		bsr.w	Sonic_AnglePos
00015882                             
00015882                            	@return:
00015882 4E75                       		rts	
00015884                            ; ---------------------------------------------------------------------------
00015884                             
00015884                            SCDPeelout_Launch:
00015884 0828 0001 0039             		btst	#1,$39(a0)
0001588A 1038 F602                  		move.b	($FFFFF602).w,d0
0001588E 0800 0000                  		btst	#0,d0
00015892 6600 0000                  		bne.w	SCDPeelout_Charge
00015896 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
0001589C 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
000158A2 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
000158A6 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
000158AC 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
000158B2 3028 0020                  		move.w	obInertia(a0),d0
000158B6 0440 0800                  		subi.w	#$800,d0
000158BA D040                       		add.w	d0,d0
000158BC 0240 1F00                  		andi.w	#$1F00,d0
000158C0 4440                       		neg.w	d0
000158C2 0640 2000                  		addi.w	#$2000,d0
000158C6 31C0 C904                  		move.w	d0,($FFFFC904).w
000158CA 0828 0000 0022             		btst	#0,$22(a0)
000158D0 6700                       		beq.s	@dontflip
000158D2 4468 0020                  		neg.w	obInertia(a0)
000158D6                             
000158D6                            @dontflip:
000158D6 08A8 0007 0022             		bclr	#7,$22(a0)
000158DC 303C 00D3                  		move.w	#$D3,d0
000158E0 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
000158E6                            	;	sfx 	sfx_PeeloutRelease
000158E6 1028 0026                  		move.b	obAngle(a0),d0
000158EA 4EB9 0000 3B42             		jsr	(CalcSine).l
000158F0 C3E8 0020                  		muls.w	obInertia(a0),d1
000158F4 E081                       		asr.l	#8,d1
000158F6 3141 0010                  		move.w	d1,obVelX(a0)
000158FA C1E8 0020                  		muls.w	obInertia(a0),d0
000158FE E080                       		asr.l	#8,d0
00015900 3140 0012                  		move.w	d0,obVelY(a0)	
00015904 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015908                            ; ---------------------------------------------------------------------------
00015908                             
00015908                            SCDPeelout_Charge:				; If still charging the dash...
00015908 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
0001590C 3401                       		move.w	d1,d2
0001590E D241                       		add.w	d1,d1
00015910 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015914 6700                       		beq.s	@noshoes
00015916 E242                       		asr.w	#1,d2
00015918 9242                       		sub.w	d2,d1
0001591A                            
0001591A                            @noshoes:
0001591A 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015920 B268 0020                  		cmp.w	obInertia(a0),d1
00015924 6E00                       		bgt.s	@inctimer
00015926 3141 0020                  		move.w	d1,obInertia(a0)
0001592A                            
0001592A                            @inctimer:
0001592A 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
0001592E 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015934 6500                       		bcs.s	SCDPeelout_ResetScr
00015936 117C 001E 003A             		move.b	#$1E,$3A(a0)
0001593C 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015942                            		
00015942                            SCDPeelout_Stop_Sound:
00015942 303C 00D4                  		move.w	#$D4,d0
00015946 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
0001594C                            	;	sfx 	sfx_PeeloutStop
0001594C 4268 0020                  		clr.w	obInertia(a0)
00015950                            
00015950                            SCDPeelout_ResetScr:
00015950 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015952 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015958 6700                       		beq.s	@finish
0001595A 6400                       		bcc.s	@skip
0001595C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015960                             
00015960                            	@skip:
00015960 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015964                             
00015964                            	@finish:
00015964 6100 0000                  		bsr.w	Sonic_LevelBound
00015968 6100 0000                  		bsr.w	Sonic_AnglePos
0001596C 4E75                       		rts
0001596E                            		
0001596E                            		
0001596E                            		include "_incObj\Sonic Spindash.asm"
0001596E                            ; ---------------------------------------------------------------------------
0001596E                            ; Subroutine to make Sonic perform a spindash
0001596E                            ; ---------------------------------------------------------------------------
0001596E                             
0001596E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001596E                             
0001596E                             
0001596E                            Sonic_SpinDash:
0001596E 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015972 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015974 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
0001597A 6600                       		bne.s	locret2_1AC8C		; if not, return
0001597C 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015980 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015984 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015988 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
0001598E 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015992 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015998 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
0001599A 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
000159A0 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
000159A6                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
000159A6                            		;bcs.s	loc2_1AC84		; ??? branch if carry
000159A6 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
000159AC                            						; the smoke/dust object
000159AC                            loc2_1AC84:
000159AC 6100 0000                  		bsr.w	Sonic_LevelBound
000159B0 6100 0000                  		bsr.w	Sonic_AnglePos
000159B4                            
000159B4                            locret2_1AC8C:
000159B4 4E75                       		rts	
000159B6                            ; ---------------------------------------------------------------------------
000159B6                            
000159B6                            loc2_1AC8E:	
000159B6 117C 001F 001C             		move.b	#$1F,$1C(a0)
000159BC 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
000159C0 0800 0001                  		btst	#1,d0			; check down button
000159C4 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
000159C8 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
000159CE 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
000159D4 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
000159DA 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
000159DE 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
000159E4 7000                       		moveq	#0,d0
000159E6 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
000159EA D040                       		add.w	d0,d0			; double it
000159EC 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
000159F2 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
000159F6 0440 0800                  		subi.w	#$800,d0		; subtract $800
000159FA D040                       		add.w	d0,d0			; double it
000159FC 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015A00 4440                       		neg.w	d0			; negate it
00015A02 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015A06 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015A0A 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015A10 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015A12 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015A16                            
00015A16                            loc2_1ACF4:
00015A16 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015A1C 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015A22 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015A26 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015A2C 1028 0026                  		move.b	obAngle(a0),d0
00015A30 4EB9 0000 3B42             		jsr	(CalcSine).l
00015A36 C3E8 0020                  		muls.w	obInertia(a0),d1
00015A3A E081                       		asr.l	#8,d1
00015A3C 3141 0010                  		move.w	d1,obVelX(a0)
00015A40 C1E8 0020                  		muls.w	obInertia(a0),d0
00015A44 E080                       		asr.l	#8,d0
00015A46 3140 0012                  		move.w	d0,obVelY(a0)
00015A4A                            	
00015A4A 6000                       		bra.s	loc2_1AD78
00015A4C                            ; ===========================================================================
00015A4C                            Dash_Speeds:
00015A4C 0700                       		dc.w  $700		; 0
00015A4E 0780                       		dc.w  $780		; 1
00015A50 0800                       		dc.w  $800		; 2
00015A52 0880                       		dc.w  $880		; 3
00015A54 0900                       		dc.w  $900		; 4
00015A56 0980                       		dc.w  $980		; 5
00015A58 0A00                       		dc.w  $A00		; 6
00015A5A 0A80                       		dc.w  $A80		; 7
00015A5C 0B00                       		dc.w  $B00		; 8
00015A5E                            ; ===========================================================================
00015A5E                            
00015A5E                            loc2_1AD30:				; If still charging the dash...
00015A5E 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015A62 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015A64 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015A68 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015A6A 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015A6E 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015A70 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015A76                            
00015A76                            loc2_1AD48:
00015A76 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015A7A 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015A7E 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015A82 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015A88 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015A8C 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015A92 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015A98 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015A9E 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015AA4 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015AA6 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015AAC                            
00015AAC                            loc2_1AD78:
00015AAC 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015AAE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015AB4 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015AB6 6400                       		bcc.s	loc2_1AD88
00015AB8 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015ABC                            
00015ABC                            loc2_1AD88:
00015ABC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015AC0                            
00015AC0                            loc2_1AD8C:
00015AC0 6100 0000                  		bsr.w	Sonic_LevelBound
00015AC4 6100 0000                  		bsr.w	Sonic_AnglePos
00015AC8                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015AC8 4E75                       		rts
00015ACA                            ; End of subroutine Sonic_SpinDash
00015ACA                            ; End of subroutine Sonic_SpinDash
00015ACA                            
00015ACA                            Sonic_AirRoll:
00015ACA 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015AD0 6600                               bne.s   AirRoll_Return   ; if not, return
00015AD2                            
00015AD2                            AirRoll_CheckBtn:
00015AD2 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015AD6 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015ADA 6700                               beq.s	AirRoll_Return
00015ADC 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015AE2                                   ; move.w	#$BC,d0
00015AE2                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015AE2                            
00015AE2                            AirRoll_Return:
00015AE2 4E75                               rts
00015AE4                            ; ===========================================================================
00015AE4                            ; ---------------------------------------------------------------------------
00015AE4                            ; Unused subroutine to squash Sonic
00015AE4                            ; ---------------------------------------------------------------------------
00015AE4 1028 0026                  		move.b	obAngle(a0),d0
00015AE8 0600 0020                  		addi.b	#$20,d0
00015AEC 0200 00C0                  		andi.b	#$C0,d0
00015AF0 6600                       		bne.s	locret_13302
00015AF2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015AF6 4A41                       		tst.w	d1
00015AF8 6A00                       		bpl.s	locret_13302
00015AFA 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015B00 317C 0000 0010             		move.w	#0,obVelX(a0)
00015B06 317C 0000 0012             		move.w	#0,obVelY(a0)
00015B0C 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015B12                            
00015B12                            locret_13302:
00015B12 4E75                       		rts		
00015B14                            		include	"_incObj\Sonic LevelBound.asm"
00015B14                            ; ---------------------------------------------------------------------------
00015B14                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015B14                            ; ---------------------------------------------------------------------------
00015B14                            
00015B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B14                            
00015B14                            
00015B14                            Sonic_LevelBound:
00015B14 2228 0008                  		move.l	obX(a0),d1
00015B18 3028 0010                  		move.w	obVelX(a0),d0
00015B1C 48C0                       		ext.l	d0
00015B1E E180                       		asl.l	#8,d0
00015B20 D280                       		add.l	d0,d1
00015B22 4841                       		swap	d1
00015B24 3038 F728                  		move.w	(v_limitleft2).w,d0
00015B28 0640 0010                  		addi.w	#$10,d0
00015B2C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015B2E 6200                       		bhi.s	@sides		; if yes, branch
00015B30 3038 F72A                  		move.w	(v_limitright2).w,d0
00015B34 0640 0128                  		addi.w	#$128,d0
00015B38 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015B3C 6600                       		bne.s	@screenlocked
00015B3E 0640 0040                  		addi.w	#$40,d0
00015B42                            
00015B42                            	@screenlocked:
00015B42 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015B44 6300                       		bls.s	@sides		; if yes, branch
00015B46                            
00015B46                            	@chkbottom:
00015B46 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015B4A 0640 00E0                  		addi.w	#$E0,d0
00015B4E B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015B52 6D00                       		blt.s	@bottom		; if yes, branch
00015B54 4E75                       		rts	
00015B56                            ; ===========================================================================
00015B56                            
00015B56                            @bottom:
00015B56 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015B5A 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015B5E B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015B60 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015B62 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00015B68 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015B6C 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
00015B72 6500 0000                  		bcs.w	Kill_transport
00015B76 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015B7A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015B80 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015B86 4E75                       		rts	
00015B88                            @dontkill: 
00015B88 4E75                       		rts
00015B8A                            ; ===========================================================================
00015B8A                            
00015B8A                            @sides:
00015B8A 3140 0008                  		move.w	d0,obX(a0)
00015B8E 317C 0000 000A             		move.w	#0,obX+2(a0)
00015B94 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015B9A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015BA0 60A4                       		bra.s	@chkbottom
00015BA2                            
00015BA2                            Kill_transport: 
00015BA2 4EF9 0000 0000                     	jmp        (KillSonic).l
00015BA8                            
00015BA8                            ; End of function Sonic_LevelBound
00015BA8                            ; End of function Sonic_LevelBound
00015BA8                            		include	"_incObj\Sonic Roll.asm"
00015BA8                            ; ---------------------------------------------------------------------------
00015BA8                            ; Subroutine allowing Sonic to roll when he's moving
00015BA8                            ; ---------------------------------------------------------------------------
00015BA8                            
00015BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BA8                            
00015BA8                            
00015BA8                            Sonic_Roll:
00015BA8 4A38 F7CA                  		tst.b	(f_jumponly).w
00015BAC 6600                       		bne.s	@noroll
00015BAE 3028 0020                  		move.w	obInertia(a0),d0
00015BB2 6A00                       		bpl.s	@ispositive
00015BB4 4440                       		neg.w	d0
00015BB6                            
00015BB6                            	@ispositive:
00015BB6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015BBA 6500                       		bcs.s	@noroll		; if not, branch
00015BBC 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015BC0 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015BC4 6600                       		bne.s	@noroll		; if yes, branch
00015BC6 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015BCC 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015BCE                            
00015BCE                            	@noroll:
00015BCE 4E75                       		rts	
00015BD0                            ; ===========================================================================
00015BD0                            
00015BD0                            Sonic_ChkRoll:
00015BD0 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015BD6 6700                       		beq.s	@roll		; if not, branch
00015BD8 4E75                       		rts	
00015BDA                            ; ===========================================================================
00015BDA                            
00015BDA                            @roll:
00015BDA 08E8 0002 0022             		bset	#2,obStatus(a0)
00015BE0 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015BE6 117C 0007 0017             		move.b	#7,obWidth(a0)
00015BEC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BF2 5A68 000C                  		addq.w	#5,obY(a0)
00015C00 4A68 0020                  		tst.w	obInertia(a0)
00015C04 6600                       		bne.s	@ismoving
00015C06 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015C0C                            
00015C0C                            	@ismoving:
00015C0C 4E75                       		rts	
00015C0E                            ; End of function Sonic_Roll
00015C0E                            ; End of function Sonic_Roll
00015C0E                            		include	"_incObj\Sonic Jump.asm"
00015C0E                            ; ---------------------------------------------------------------------------
00015C0E                            ; Subroutine allowing Sonic to jump
00015C0E                            ; ---------------------------------------------------------------------------
00015C0E                            
00015C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C0E                            
00015C0E                            
00015C0E                            Sonic_Jump:
00015C0E 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015C12 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015C16 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015C1A 7000                       		moveq	#0,d0
00015C1C 1028 0026                  		move.b	obAngle(a0),d0
00015C20 0600 0080                  		addi.b	#$80,d0
00015C24 6100 0000                  		bsr.w	sub_14D48
00015C28 0C41 0006                  		cmpi.w	#6,d1
00015C2C 6D00 0000                  		blt.w	locret_1348E
00015C30 343C 0680                  		move.w	#$680,d2
00015C34 0828 0006 0022             		btst	#6,obStatus(a0)
00015C3A 6700                       		beq.s	loc_1341C
00015C3C 343C 0380                  		move.w	#$380,d2
00015C40                            
00015C40                            loc_1341C:
00015C40 7000                       		moveq	#0,d0
00015C42 1028 0026                  		move.b	obAngle(a0),d0
00015C46 0400 0040                  		subi.b	#$40,d0
00015C4A 4EB9 0000 3B42             		jsr	(CalcSine).l
00015C50 C3C2                       		muls.w	d2,d1
00015C52 E081                       		asr.l	#8,d1
00015C54 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015C58 C1C2                       		muls.w	d2,d0
00015C5A E080                       		asr.l	#8,d0
00015C5C D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015C60 08E8 0001 0022             		bset	#1,obStatus(a0)
00015C66 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015C6C 588F                       		addq.l	#4,sp
00015C6E 117C 0001 003C             		move.b	#1,$3C(a0)
00015C74 4228 0038                  		clr.b	$38(a0)
00015C82 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015C88 117C 0009 0017             		move.b	#9,obWidth(a0)
00015C8E 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015C94 117C 0007 0017             		move.b	#7,obWidth(a0)
00015C9A                            Result_Check:
00015C9A 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015C9E 6700                       		beq.s   NormalJump ; If not, branch
00015CA0 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
00015CA6 6000                       		bra.s   cont ; Continue
00015CA8                            NormalJump:
00015CA8 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015CAE                            cont:
00015CAE 08E8 0002 0022             		bset	#2,obStatus(a0)
00015CB4 5A68 000C                  		addq.w	#5,obY(a0)
00015CB8                            
00015CB8                            locret_1348E:
00015CB8 4E75                       		rts	
00015CBA                            ; ===========================================================================
00015CBA                            
00015CBA                            ; End of function Sonic_Jump
00015CBA                            ; End of function Sonic_Jump
00015CBA                            		include	"_incObj\Sonic JumpHeight.asm"
00015CBA                            ; ---------------------------------------------------------------------------
00015CBA                            ; Subroutine controlling Sonic's jump height/duration
00015CBA                            ; ---------------------------------------------------------------------------
00015CBA                            
00015CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CBA                            
00015CBA                            
00015CBA                            Sonic_JumpHeight:
00015CBA 4A28 003C                  		tst.b	$3C(a0)
00015CBE 6700                       		beq.s	loc_134C4
00015CC0 323C FC00                  		move.w	#-$400,d1
00015CC4 0828 0006 0022             		btst	#6,obStatus(a0)
00015CCA 6700                       		beq.s	loc_134AE
00015CCC 323C FE00                  		move.w	#-$200,d1
00015CD0                            
00015CD0                            loc_134AE:
00015CD0 B268 0012                  		cmp.w	obVelY(a0),d1
00015CD4 6F00                       		ble.s	locret_134C2
00015CD6 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015CDA 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015CDE 6600                       		bne.s	locret_134C2	; if yes, branch
00015CE0 3141 0012                  		move.w	d1,obVelY(a0)
00015CE4                            
00015CE4                            locret_134C2:
00015CE4 4E75                       		rts	
00015CE6                            ; ===========================================================================
00015CE6                            
00015CE6                            loc_134C4:
00015CE6 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015CEC 6C00                       		bge.s	locret_134D2
00015CEE 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015CF4                            
00015CF4                            locret_134D2:
00015CF4 4E75                       		rts	
00015CF6                            ; End of function Sonic_JumpHeight
00015CF6                            ; End of function Sonic_JumpHeight
00015CF6                            		include	"_incObj\Sonic SlopeResist.asm"
00015CF6                            ; ---------------------------------------------------------------------------
00015CF6                            ; Subroutine to	slow Sonic walking up a	slope
00015CF6                            ; ---------------------------------------------------------------------------
00015CF6                            
00015CF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CF6                            
00015CF6                            
00015CF6                            Sonic_SlopeResist:
00015CF6 1028 0026                  		move.b	obAngle(a0),d0
00015CFA 0600 0060                  		addi.b	#$60,d0
00015CFE 0C00 00C0                  		cmpi.b	#$C0,d0
00015D02 6400                       		bcc.s	locret_13508
00015D04 1028 0026                  		move.b	obAngle(a0),d0
00015D08 4EB9 0000 3B42             		jsr	(CalcSine).l
00015D0E C1FC 0020                  		muls.w	#$20,d0
00015D12 E080                       		asr.l	#8,d0
00015D14 4A68 0020                  		tst.w	obInertia(a0)
00015D18 6700                       		beq.s	locret_13508
00015D1A 6B00                       		bmi.s	loc_13504
00015D1C 4A40                       		tst.w	d0
00015D1E 6700                       		beq.s	locret_13502
00015D20 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00015D24                            
00015D24                            locret_13502:
00015D24 4E75                       		rts	
00015D26                            ; ===========================================================================
00015D26                            
00015D26                            loc_13504:
00015D26 D168 0020                  		add.w	d0,obInertia(a0)
00015D2A                            
00015D2A                            locret_13508:
00015D2A 4E75                       		rts	
00015D2C                            ; End of function Sonic_SlopeResist
00015D2C                            ; End of function Sonic_SlopeResist
00015D2C                            		include	"_incObj\Sonic RollRepel.asm"
00015D2C                            ; ---------------------------------------------------------------------------
00015D2C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015D2C                            ; ---------------------------------------------------------------------------
00015D2C                            
00015D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D2C                            
00015D2C                            
00015D2C                            Sonic_RollRepel:
00015D2C 1028 0026                  		move.b	obAngle(a0),d0
00015D30 0600 0060                  		addi.b	#$60,d0
00015D34 0C00 00C0                  		cmpi.b	#-$40,d0
00015D38 6400                       		bcc.s	locret_13544
00015D3A 1028 0026                  		move.b	obAngle(a0),d0
00015D3E 4EB9 0000 3B42             		jsr	(CalcSine).l
00015D44 C1FC 0050                  		muls.w	#$50,d0
00015D48 E080                       		asr.l	#8,d0
00015D4A 4A68 0020                  		tst.w	obInertia(a0)
00015D4E 6B00                       		bmi.s	loc_1353A
00015D50 4A40                       		tst.w	d0
00015D52 6A00                       		bpl.s	loc_13534
00015D54 E480                       		asr.l	#2,d0
00015D56                            
00015D56                            loc_13534:
00015D56 D168 0020                  		add.w	d0,obInertia(a0)
00015D5A 4E75                       		rts	
00015D5C                            ; ===========================================================================
00015D5C                            
00015D5C                            loc_1353A:
00015D5C 4A40                       		tst.w	d0
00015D5E 6B00                       		bmi.s	loc_13540
00015D60 E480                       		asr.l	#2,d0
00015D62                            
00015D62                            loc_13540:
00015D62 D168 0020                  		add.w	d0,obInertia(a0)
00015D66                            
00015D66                            locret_13544:
00015D66 4E75                       		rts	
00015D68                            ; End of function Sonic_RollRepel
00015D68                            ; End of function Sonic_RollRepel
00015D68                            		include	"_incObj\Sonic SlopeRepel.asm"
00015D68                            ; ---------------------------------------------------------------------------
00015D68                            ; Subroutine to	push Sonic down	a slope
00015D68                            ; ---------------------------------------------------------------------------
00015D68                            
00015D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D68                            
00015D68                            
00015D68                            Sonic_SlopeRepel:
00015D68 4E71                       		nop	
00015D6A 4A28 0038                  		tst.b	$38(a0)
00015D6E 6600                       		bne.s	locret_13580
00015D70 4A68 003E                  		tst.w	$3E(a0)
00015D74 6600                       		bne.s	loc_13582
00015D76 1028 0026                  		move.b	obAngle(a0),d0
00015D7A 0600 0020                  		addi.b	#$20,d0
00015D7E 0200 00C0                  		andi.b	#$C0,d0
00015D82 6700                       		beq.s	locret_13580
00015D84 3028 0020                  		move.w	obInertia(a0),d0
00015D88 6A00                       		bpl.s	loc_1356A
00015D8A 4440                       		neg.w	d0
00015D8C                            
00015D8C                            loc_1356A:
00015D8C 0C40 0280                  		cmpi.w	#$280,d0
00015D90 6400                       		bcc.s	locret_13580
00015D92 4268 0020                  		clr.w	obInertia(a0)
00015D96 08E8 0001 0022             		bset	#1,obStatus(a0)
00015D9C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015DA2                            
00015DA2                            locret_13580:
00015DA2 4E75                       		rts	
00015DA4                            ; ===========================================================================
00015DA4                            
00015DA4                            loc_13582:
00015DA4 5368 003E                  		subq.w	#1,$3E(a0)
00015DA8 4E75                       		rts	
00015DAA                            ; End of function Sonic_SlopeRepel
00015DAA                            ; End of function Sonic_SlopeRepel
00015DAA                            		include	"_incObj\Sonic JumpAngle.asm"
00015DAA                            ; ---------------------------------------------------------------------------
00015DAA                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015DAA                            ; ---------------------------------------------------------------------------
00015DAA                            
00015DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DAA                            
00015DAA                            
00015DAA                            Sonic_JumpAngle:
00015DAA 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00015DAE 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015DB0 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015DB2                            
00015DB2 5400                       		addq.b	#2,d0		; increase angle
00015DB4 6400                       		bcc.s	loc_13596
00015DB6 7000                       		moveq	#0,d0
00015DB8                            
00015DB8                            loc_13596:
00015DB8 6000                       		bra.s	loc_1359E
00015DBA                            ; ===========================================================================
00015DBA                            
00015DBA                            loc_13598:
00015DBA 5500                       		subq.b	#2,d0		; decrease angle
00015DBC 6400                       		bcc.s	loc_1359E
00015DBE 7000                       		moveq	#0,d0
00015DC0                            
00015DC0                            loc_1359E:
00015DC0 1140 0026                  		move.b	d0,obAngle(a0)
00015DC4                            
00015DC4                            locret_135A2:
00015DC4 4E75                       		rts	
00015DC6                            ; End of function Sonic_JumpAngle
00015DC6                            ; End of function Sonic_JumpAngle
00015DC6                            		include	"_incObj\Sonic Floor.asm"
00015DC6                            ; ---------------------------------------------------------------------------
00015DC6                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00015DC6                            ; ---------------------------------------------------------------------------
00015DC6                            
00015DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DC6                            
00015DC6                            
00015DC6                            Sonic_Floor:
00015DC6 3228 0010                  		move.w	obVelX(a0),d1
00015DCA 3428 0012                  		move.w	obVelY(a0),d2
00015DCE 4EB9 0000 3DD4             		jsr	(CalcAngle).l
00015DD4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015DD8 0400 0020                  		subi.b	#$20,d0
00015DDC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015DE0 0200 00C0                  		andi.b	#$C0,d0
00015DE4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015DE8 0C00 0040                  		cmpi.b	#$40,d0
00015DEC 6700 0000                  		beq.w	loc_13680
00015DF0 0C00 0080                  		cmpi.b	#$80,d0
00015DF4 6700 0000                  		beq.w	loc_136E2
00015DF8 0C00 00C0                  		cmpi.b	#$C0,d0
00015DFC 6700 0000                  		beq.w	loc_1373E
00015E00 6100 0000                  		bsr.w	Sonic_HitWall
00015E04 4A41                       		tst.w	d1
00015E06 6A00                       		bpl.s	loc_135F0
00015E08 9368 0008                  		sub.w	d1,obX(a0)
00015E0C 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E12                            
00015E12                            loc_135F0:
00015E12 6100 0000                  		bsr.w	sub_14EB4
00015E16 4A41                       		tst.w	d1
00015E18 6A00                       		bpl.s	loc_13602
00015E1A D368 0008                  		add.w	d1,obX(a0)
00015E1E 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E24                            
00015E24                            loc_13602:
00015E24 6100 0000                  		bsr.w	Sonic_HitFloor
00015E28 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015E2C 4A41                       		tst.w	d1
00015E2E 6A00                       		bpl.s	locret_1367E
00015E30 1428 0012                  		move.b	obVelY(a0),d2
00015E34 5002                       		addq.b	#8,d2
00015E36 4402                       		neg.b	d2
00015E38 B202                       		cmp.b	d2,d1
00015E3A 6C00                       		bge.s	loc_1361E
00015E3C B002                       		cmp.b	d2,d0
00015E3E 6D00                       		blt.s	locret_1367E
00015E40                            
00015E40                            loc_1361E:
00015E40 D368 000C                  		add.w	d1,obY(a0)
00015E44 1143 0026                  		move.b	d3,obAngle(a0)
00015E48 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015E4C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015E52 1003                       		move.b	d3,d0
00015E54 0600 0020                  		addi.b	#$20,d0
00015E58 0200 0040                  		andi.b	#$40,d0
00015E5C 6600                       		bne.s	loc_1365C
00015E5E 1003                       		move.b	d3,d0
00015E60 0600 0010                  		addi.b	#$10,d0
00015E64 0200 0020                  		andi.b	#$20,d0
00015E68 6700                       		beq.s	loc_1364E
00015E6A E0E8 0012                  		asr	obVelY(a0)
00015E6E 6000                       		bra.s	loc_13670
00015E70                            ; ===========================================================================
00015E70                            
00015E70                            loc_1364E:
00015E70 317C 0000 0012             		move.w	#0,obVelY(a0)
00015E76 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00015E7C 4E75                       		rts	
00015E7E                            ; ===========================================================================
00015E7E                            
00015E7E                            loc_1365C:
00015E7E 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E84 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00015E8A 6F00                       		ble.s	loc_13670
00015E8C 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00015E92                            
00015E92                            loc_13670:
00015E92 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00015E98 4A03                       		tst.b	d3
00015E9A 6A00                       		bpl.s	locret_1367E
00015E9C 4468 0020                  		neg.w	obInertia(a0)
00015EA0                            
00015EA0                            locret_1367E:
00015EA0 4E75                       		rts	
00015EA2                            ; ===========================================================================
00015EA2                            
00015EA2                            loc_13680:
00015EA2 6100 0000                  		bsr.w	Sonic_HitWall
00015EA6 4A41                       		tst.w	d1
00015EA8 6A00                       		bpl.s	loc_1369A
00015EAA 9368 0008                  		sub.w	d1,obX(a0)
00015EAE 317C 0000 0010             		move.w	#0,obVelX(a0)
00015EB4 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00015EBA 4E75                       		rts	
00015EBC                            ; ===========================================================================
00015EBC                            
00015EBC                            loc_1369A:
00015EBC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015EC0 4A41                       		tst.w	d1
00015EC2 6A00                       		bpl.s	loc_136B4
00015EC4 9368 000C                  		sub.w	d1,obY(a0)
00015EC8 4A68 0012                  		tst.w	obVelY(a0)
00015ECC 6A00                       		bpl.s	locret_136B2
00015ECE 317C 0000 0012             		move.w	#0,obVelY(a0)
00015ED4                            
00015ED4                            locret_136B2:
00015ED4 4E75                       		rts	
00015ED6                            ; ===========================================================================
00015ED6                            
00015ED6                            loc_136B4:
00015ED6 4A68 0012                  		tst.w	obVelY(a0)
00015EDA 6B00                       		bmi.s	locret_136E0
00015EDC 6100 0000                  		bsr.w	Sonic_HitFloor
00015EE0 4A41                       		tst.w	d1
00015EE2 6A00                       		bpl.s	locret_136E0
00015EE4 D368 000C                  		add.w	d1,obY(a0)
00015EE8 1143 0026                  		move.b	d3,obAngle(a0)
00015EEC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015EF0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015EF6 317C 0000 0012             		move.w	#0,obVelY(a0)
00015EFC 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00015F02                            
00015F02                            locret_136E0:
00015F02 4E75                       		rts	
00015F04                            ; ===========================================================================
00015F04                            
00015F04                            loc_136E2:
00015F04 6100 0000                  		bsr.w	Sonic_HitWall
00015F08 4A41                       		tst.w	d1
00015F0A 6A00                       		bpl.s	loc_136F4
00015F0C 9368 0008                  		sub.w	d1,obX(a0)
00015F10 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F16                            
00015F16                            loc_136F4:
00015F16 6100 0000                  		bsr.w	sub_14EB4
00015F1A 4A41                       		tst.w	d1
00015F1C 6A00                       		bpl.s	loc_13706
00015F1E D368 0008                  		add.w	d1,obX(a0)
00015F22 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F28                            
00015F28                            loc_13706:
00015F28 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015F2C 4A41                       		tst.w	d1
00015F2E 6A00                       		bpl.s	locret_1373C
00015F30 9368 000C                  		sub.w	d1,obY(a0)
00015F34 1003                       		move.b	d3,d0
00015F36 0600 0020                  		addi.b	#$20,d0
00015F3A 0200 0040                  		andi.b	#$40,d0
00015F3E 6600                       		bne.s	loc_13726
00015F40 317C 0000 0012             		move.w	#0,obVelY(a0)
00015F46 4E75                       		rts	
00015F48                            ; ===========================================================================
00015F48                            
00015F48                            loc_13726:
00015F48 1143 0026                  		move.b	d3,obAngle(a0)
00015F4C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015F50 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00015F56 4A03                       		tst.b	d3
00015F58 6A00                       		bpl.s	locret_1373C
00015F5A 4468 0020                  		neg.w	obInertia(a0)
00015F5E                            
00015F5E                            locret_1373C:
00015F5E 4E75                       		rts	
00015F60                            ; ===========================================================================
00015F60                            
00015F60                            loc_1373E:
00015F60 6100 0000                  		bsr.w	sub_14EB4
00015F64 4A41                       		tst.w	d1
00015F66 6A00                       		bpl.s	loc_13758
00015F68 D368 0008                  		add.w	d1,obX(a0)
00015F6C 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F72 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00015F78 4E75                       		rts	
00015F7A                            ; ===========================================================================
00015F7A                            
00015F7A                            loc_13758:
00015F7A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015F7E 4A41                       		tst.w	d1
00015F80 6A00                       		bpl.s	loc_13772
00015F82 9368 000C                  		sub.w	d1,obY(a0)
00015F86 4A68 0012                  		tst.w	obVelY(a0)
00015F8A 6A00                       		bpl.s	locret_13770
00015F8C 317C 0000 0012             		move.w	#0,obVelY(a0)
00015F92                            
00015F92                            locret_13770:
00015F92 4E75                       		rts	
00015F94                            ; ===========================================================================
00015F94                            
00015F94                            loc_13772:
00015F94 4A68 0012                  		tst.w	obVelY(a0)
00015F98 6B00                       		bmi.s	locret_1379E
00015F9A 6100 0000                  		bsr.w	Sonic_HitFloor
00015F9E 4A41                       		tst.w	d1
00015FA0 6A00                       		bpl.s	locret_1379E
00015FA2 D368 000C                  		add.w	d1,obY(a0)
00015FA6 1143 0026                  		move.b	d3,obAngle(a0)
00015FAA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015FAE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015FB4 317C 0000 0012             		move.w	#0,obVelY(a0)
00015FBA 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00015FC0                            
00015FC0                            locret_1379E:
00015FC0 4E75                       		rts	
00015FC2                            ; End of function Sonic_Floor
00015FC2                            ; End of function Sonic_Floor
00015FC2                            		include	"_incObj\Sonic ResetOnFloor.asm"
00015FC2                            ; ---------------------------------------------------------------------------
00015FC2                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00015FC2                            ; ---------------------------------------------------------------------------
00015FC2                            
00015FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FC2                            
00015FC2                            
00015FC2                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
00015FC2 08A8 0005 0022                     	bclr    #5,$22(a0)
00015FC8 08A8 0001 0022                     	bclr    #1,$22(a0)
00015FCE 0828 0002 0022                     	btst    #2,$22(a0)
00015FD4 6700                               	beq.s    loc_137E4
00015FD6 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015FDC 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015FE2 117C 0009 0017             		move.b	#9,obWidth(a0)
00015FE8 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00015FEE 5B68 000C                  		subq.w	#5,obY(a0)
00015FF2                            
00015FF2                            loc_137E4:
00015FF2 117C 0000 003C             		move.b	#0,$3C(a0)
00015FF8 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00015FFE 4E75                       		rts	
00016000                            ; End of function Sonic_ResetOnFloor
00016000                            ; End of function Sonic_ResetOnFloor
00016000                            		include	"_incObj\Sonic (part 2).asm"
00016000                            ; ---------------------------------------------------------------------------
00016000                            ; Sonic	when he	gets hurt
00016000                            ; ---------------------------------------------------------------------------
00016000                            
00016000                            Sonic_Hurt:	; Routine 4
00016000 4EB9 0000 F426             		jsr	(SpeedToPos).l
00016006 0668 0030 0012             		addi.w	#$30,obVelY(a0)
0001600C 0828 0006 0022             		btst	#6,obStatus(a0)
00016012 6700                       		beq.s	loc_1380C
00016014 0468 0020 0012             		subi.w	#$20,obVelY(a0)
0001601A                            
0001601A                            loc_1380C:
0001601A 6100 0000                  		bsr.w	Sonic_HurtStop
0001601E 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016022 6100 F150                  		bsr.w	Sonic_RecordPosition
00016026 6100 0000                  		bsr.w	Sonic_Animate
0001602A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001602E 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00016034                            
00016034                            ; ---------------------------------------------------------------------------
00016034                            ; Subroutine to	stop Sonic falling after he's been hurt
00016034                            ; ---------------------------------------------------------------------------
00016034                            
00016034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016034                            
00016034                            
00016034                            Sonic_HurtStop:
00016034 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016038 0640 00E0                  		addi.w	#$E0,d0
0001603C                            		;cmp.w	obY(a0),d0
0001603C                            		;bcs.w	KillSonic
0001603C 6100 FD88                  		bsr.w	Sonic_Floor
00016040 0828 0001 0022             		btst	#1,obStatus(a0)
00016046 6600                       		bne.s	locret_13860
00016048 7000                       		moveq	#0,d0
0001604A 3140 0012                  		move.w	d0,obVelY(a0)
0001604E 3140 0010                  		move.w	d0,obVelX(a0)
00016052 3140 0020                  		move.w	d0,obInertia(a0)
00016056 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001605C 5528 0024                  		subq.b	#2,obRoutine(a0)
00016060 317C 0078 0030             		move.w	#$78,$30(a0)
00016066                            
00016066                            locret_13860:
00016066 4E75                       		rts	
00016068                            ; End of function Sonic_HurtStop
00016068                            
00016068                            ; ---------------------------------------------------------------------------
00016068                            ; Sonic	when he	dies
00016068                            ; ---------------------------------------------------------------------------
00016068                            
00016068                            Sonic_Death:	; Routine 6
00016068 6100 0000                  		bsr.w	GameOver
0001606C 4EB9 0000 F3EE             		jsr	(ObjectFall).l
00016072 6100 F100                  		bsr.w	Sonic_RecordPosition
00016076 6100 0000                  		bsr.w	Sonic_Animate
0001607A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001607E 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00016084                            
00016084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016084                            
00016084                            GameOver:
00016084 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016088 0640 0100                  		addi.w	#$100,d0
0001608C B068 000C                  		cmp.w	obY(a0),d0
00016090 6400 0000                  		bcc.w	locret_13900
00016094 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
0001609A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001609E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000160A2 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000160A6 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000160AA 6600                       		bne.s	loc_138D4
000160AC 317C 0000 003A             		move.w	#0,$3A(a0)
000160B2 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000160B8 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000160BE 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000160C4 4238 FE1A                  		clr.b	(f_timeover).w
000160C8                            
000160C8                            loc_138C2:
000160D2 7003                       		moveq	#3,d0
000160D4 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000160DA                            		
000160DA                            loc_138C3:
000160E4 7003                       		moveq	#3,d0
000160E6 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000160EC                            ; ===========================================================================
000160EC                            
000160EC                            loc_138D4:
000160EC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000160F2 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
000160F6 6700                       		beq.s	locret_13900	; if not, branch
000160F8 317C 0000 003A             		move.w	#0,$3A(a0)
000160FE 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
00016104 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001610A 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016110 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00016116 60B0                       		bra.s	loc_138C2
00016118                            		
00016118                            
00016118                            ; ===========================================================================
00016118                            
00016118                            locret_13900:
00016118 4E75                       		rts	
0001611A                            ; End of function GameOver
0001611A                            
0001611A                            ; ---------------------------------------------------------------------------
0001611A                            ; Sonic	when the level is restarted
0001611A                            ; ---------------------------------------------------------------------------
0001611A                            
0001611A                            Sonic_ResetLevel:; Routine 8
0001611A 4A68 003A                  		tst.w	$3A(a0)
0001611E 6700                       		beq.s	locret_13914
00016120 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016124 6600                       		bne.s	locret_13914
00016126 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001612C                            
0001612C                            	locret_13914:
0001612C 4E75                       		rts	
0001612C 4E75                       		rts	
0001612E                            		include	"_incObj\Sonic Loops.asm"
0001612E                            ; ---------------------------------------------------------------------------
0001612E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001612E                            ; ---------------------------------------------------------------------------
0001612E                            
0001612E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001612E                            
0001612E                            
0001612E                            Sonic_Loops:
0001612E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016134 6700                       		beq.s	@isstarlight	; if yes, branch
00016136 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001613A 6600 0000                  		bne.w	@noloops	; if not, branch
0001613E                            
0001613E                            	@isstarlight:
0001613E 3028 000C                  		move.w	obY(a0),d0
00016142 E248                       		lsr.w	#1,d0
00016144 0240 0380                  		andi.w	#$380,d0
00016148 1228 0008                  		move.b	obX(a0),d1
0001614C 0241 007F                  		andi.w	#$7F,d1
00016150 D041                       		add.w	d1,d0
00016152 43F8 A400                  		lea	(v_lvllayout).w,a1
00016156 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001615A                            
0001615A B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
0001615E 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016162 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016166 6700 FA68                  		beq.w	Sonic_ChkRoll
0001616A                            
0001616A B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
0001616E 6700                       		beq.s	@chkifleft	; if yes, branch
00016170 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016174 6700                       		beq.s	@chkifinair
00016176 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
0001617C 4E75                       		rts	
0001617E                            ; ===========================================================================
0001617E                            
0001617E                            @chkifinair:
0001617E 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016184 6700                       		beq.s	@chkifleft	; if not, branch
00016186                            
00016186 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001618C 4E75                       		rts	
0001618E                            ; ===========================================================================
0001618E                            
0001618E                            @chkifleft:
0001618E 3428 0008                  		move.w	obX(a0),d2
00016192 0C02 002C                  		cmpi.b	#$2C,d2
00016196 6400                       		bcc.s	@chkifright
00016198                            
00016198 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001619E 4E75                       		rts	
000161A0                            ; ===========================================================================
000161A0                            
000161A0                            @chkifright:
000161A0 0C02 00E0                  		cmpi.b	#$E0,d2
000161A4 6500                       		bcs.s	@chkangle1
000161A6                            
000161A6 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000161AC 4E75                       		rts	
000161AE                            ; ===========================================================================
000161AE                            
000161AE                            @chkangle1:
000161AE 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000161B4 6600                       		bne.s	@chkangle2	; if yes, branch
000161B6                            
000161B6 1228 0026                  		move.b	obAngle(a0),d1
000161BA 6700                       		beq.s	@done
000161BC 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000161C0 6200                       		bhi.s	@done		; if yes, branch
000161C2 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000161C8 4E75                       		rts	
000161CA                            ; ===========================================================================
000161CA                            
000161CA                            @chkangle2:
000161CA 1228 0026                  		move.b	obAngle(a0),d1
000161CE 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000161D2 6300                       		bls.s	@done		; if yes, branch
000161D4 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000161DA                            
000161DA                            @noloops:
000161DA                            @done:
000161DA 4E75                       		rts	
000161DC                            ; End of function Sonic_Loops
000161DC                            ; End of function Sonic_Loops
000161DC                            		include	"_incObj\Sonic Animate.asm"
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            ; Subroutine to	animate	Sonic's sprites
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            
000161DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161DC                            
000161DC                            
000161DC                            Sonic_Animate:				; XREF: Obj01_Control; et al
000161DC 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000161E2 7000                       		moveq	#0,d0
000161E4 1028 001C                  		move.b	obAnim(a0),d0
000161E8 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000161EC 6700                       		beq.s	@do		; if not, branch
000161EE 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000161F2 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
000161F6 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
000161FA                            		
000161FA 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016200                            
00016200                            	@do:
00016200 D040                       		add.w	d0,d0
00016202 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016206 1011                       		move.b	(a1),d0
00016208 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001620A 1228 0022                  		move.b	obStatus(a0),d1
0001620E 0201 0001                  		andi.b	#1,d1
00016212 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016218 8328 0001                  		or.b	d1,obRender(a0)
0001621C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016220 6A00                       		bpl.s	@delay		; if time remains, branch
00016222 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016226                            
00016226                            @loadframe:
00016226 7200                       		moveq	#0,d1
00016228 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001622C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016230 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016234 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016238                            
00016238                            	@next:
00016238 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001623C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016240                            
00016240                            	@delay:
00016240 4E75                       		rts	
00016242                            ; ===========================================================================
00016242                            
00016242                            @end_FF:
00016242 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016244 6600                       		bne.s	@end_FE		; if not, branch
00016246 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001624A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001624E 60E8                       		bra.s	@next
00016250                            ; ===========================================================================
00016250                            
00016250                            @end_FE:
00016250 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016252 6600                       		bne.s	@end_FD		; if not, branch
00016254 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016258 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001625C 9200                       		sub.b	d0,d1
0001625E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016262 60D4                       		bra.s	@next
00016264                            ; ===========================================================================
00016264                            
00016264                            @end_FD:
00016264 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016266 6600                       		bne.s	@end		; if not, branch
00016268 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0001626E                            
0001626E                            	@end:
0001626E 4E75                       		rts	
00016270                            ; ===========================================================================
00016270                            
00016270                            @walkrunroll:
00016270 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016274 6ACA                       		bpl.s	@delay		; if time remains, branch
00016276 5200                       		addq.b	#1,d0		; is animation walking/running?
00016278 6600 0000                  		bne.w	@rolljump	; if not, branch
0001627C 7200                       		moveq	#0,d1
0001627E 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016282 6B00                       		bmi.s	@ble 			; better handling of angles
00016284 6700                       		beq.s	@ble
00016286 5300                       		subq.b	#1,d0
00016288                            
00016288                            	@ble:																
00016288 1428 0022                  		move.b	obStatus(a0),d2
0001628C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016290 6600                       		bne.s	@flip		; if yes, branch
00016292 4600                       		not.b	d0		; reverse angle
00016294                            
00016294                            	@flip:
00016294 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016298 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
0001629A 7203                       		moveq	#3,d1
0001629C                            
0001629C                            	@noinvert:
0001629C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000162A2 B302                       		eor.b	d1,d2
000162A4 8528 0001                  		or.b	d2,obRender(a0)
000162A8 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000162AE 6600 0000                  		bne.w	@push		; if yes, branch
000162B2                            
000162B2 E808                       		lsr.b	#4,d0		; divide angle by $10
000162B4 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000162B8 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000162BC 6A00                       		bpl.s	@nomodspeed
000162BE 4442                       		neg.w	d2		; modulus speed
000162C0                            
000162C0                            	@nomodspeed:
000162C0 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000162C6 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000162CA 6400                       		bcc.s	@maxrunning	; if yes, branch
000162CC                            
000162CC 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000162D2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000162D6 6400                       		bcc.s	@running	; if yes, branch
000162D8                            
000162D8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000162DE                            
000162DE                            	@running:
000162DE D000                       		add.b	d0,d0
000162E0 D000                       		add.b	d0,d0
000162E2 1600                       		move.b	d0,d3
000162E4 4442                       		neg.w	d2
000162E6 0642 0780                  		addi.w	#$780,d2
000162EA 6A00                       		bpl.s	@belowmax
000162EC 7400                       		moveq	#0,d2		; max animation speed
000162EE 6000                       		bra.s	@belowmax
000162F0                            
000162F0                            	@maxrunning:
000162F0 D000                       		add.b d0,d0
000162F2 1600                       		move.b d0,d3
000162F4 4442                       		neg.w d2
000162F6 0642 0800                  		addi.w #$800, d2
000162FA 6A00                       		bpl.s @belowmax
000162FC 7400                       		moveq #0, d2 
000162FE                            
000162FE                            	@belowmax:
000162FE E04A                       		lsr.w	#8,d2
00016300 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016304 6100 FF20                  		bsr.w	@loadframe
00016308 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
0001630C 4E75                       		rts	
0001630E                            ; ===========================================================================
0001630E                            
0001630E                            @rolljump:
0001630E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016310 6600                       		bne.s	@push		; if not, branch
00016312 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016316 6A00                       		bpl.s	@nomodspeed2
00016318 4442                       		neg.w	d2
0001631A                            
0001631A                            	@nomodspeed2:
0001631A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016320 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016324 6400                       		bcc.s	@rollfast	; if yes, branch
00016326 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001632C                            
0001632C                            	@rollfast:
0001632C 4442                       		neg.w	d2
0001632E 0642 0400                  		addi.w	#$400,d2
00016332 6A00                       		bpl.s	@belowmax2
00016334 7400                       		moveq	#0,d2
00016336                            
00016336                            	@belowmax2:
00016336 E04A                       		lsr.w	#8,d2
00016338 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001633C 1228 0022                  		move.b	obStatus(a0),d1
00016340 0201 0001                  		andi.b	#1,d1
00016344 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001634A 8328 0001                  		or.b	d1,obRender(a0)
0001634E 6000 FED6                  		bra.w	@loadframe
00016352                            ; ===========================================================================
00016352                            
00016352                            @push:
00016352 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016356 6B00                       		bmi.s	@negspeed
00016358 4442                       		neg.w	d2
0001635A                            
0001635A                            	@negspeed:
0001635A 0642 0800                  		addi.w	#$800,d2
0001635E 6A00                       		bpl.s	@belowmax3	
00016360 7400                       		moveq	#0,d2
00016362                            
00016362                            	@belowmax3:
00016362 EC4A                       		lsr.w	#6,d2
00016364 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016368 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001636E 1228 0022                  		move.b	obStatus(a0),d1
00016372 0201 0001                  		andi.b	#1,d1
00016376 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001637C 8328 0001                  		or.b	d1,obRender(a0)
00016380 6000 FEA4                  		bra.w	@loadframe
00016384                            
00016384                            ; End of function Sonic_Animate
00016384                            ; End of function Sonic_Animate
00016384                            		include	"_anim\Sonic.asm"
00016384                            ; ---------------------------------------------------------------------------
00016384                            ; Animation script - Sonic
00016384                            ; ---------------------------------------------------------------------------
00016384                            Ani_Sonic:
00016384                            
00016384 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016386 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016388 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001638A 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
0001638C 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
0001638E 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016390 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016392 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016394 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016396 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016398 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
0001639A 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
0001639C 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
0001639E 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000163A0 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000163A2 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000163A4 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000163A6 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000163A8 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000163AA 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000163AC 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000163AE 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000163B0 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000163B2 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000163B4 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000163B6 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000163B8 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000163BA 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000163BC 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000163BE 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000163C0 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000163C2 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000163C4 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000163C6 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000163C8 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000163CA 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000163CC 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000163CE 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000163D0 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
000163D2 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
000163D4                            
000163D4 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000163E2 00                         		even
000163E2 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
000163F0 00                         		even
000163F0 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000163F7 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000163FE 00                         		even
000163FE FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016405 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001640C 00                         		even
0001640C 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001641A 00                         		even
0001641A                            SonAni_Wait:	
0001641A 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016429 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016438 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016447 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016456 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016465 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016474 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016483 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016492 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
0001649A                            		even
0001649A 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000164A0                            		even
000164A0 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000164A6 00                         		even
000164A6 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
000164AC 00                         		even
000164AC 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000164B0 00                         		even
000164B0 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000164B4 00                         		even
000164B4 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000164B8 00                         		even
000164B8 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000164BC 00                         		even
000164BC 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000164C6                            		even
000164C6 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000164CC 00                         		even
000164CC 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000164D6 00                         		even
000164D6 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000164E0 00                         		even
000164E0 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000164E4                            		even
000164E4 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
000164F0                            		even
000164F0 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
000164F4                            		even
000164F4 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
000164F8 00                         		even
000164F8 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
000164FC                            		even
000164FC 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016500 00                         		even
00016500 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016504 00                         		even
00016504 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016508 00                         		even
00016508 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
0001650C 00                         		even
0001650C                            SonAni_WaterSlide:
0001650C 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016510                            		even
00016510 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016514                            		even
00016514 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
0001651C 00                         		even
0001651C 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016520                            		even
00016520 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
0001652E 00                         		even
0001652E 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
0001653A                            		even
0001653A 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016540 00                         		even
00016540 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016544                            		even
00016544 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016548                            		even
00016548 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016552 00                         		even
00016552 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
0001655B 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016563 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
0001656A 3334 35                    		dc.b	$33, $34, $35
0001656D 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016574                            		even
00016574 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
0001657A                            		even
0001657A 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
0001657E                            		even
0001657E                            SonAni_Transform:
0001657E 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016588 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016594                            		even
00016594                            
00016594 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016594 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016594 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016594 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016594 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016594 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016594 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016594 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016594 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016594 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016594 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016594 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016594 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016594 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016594 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016594 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016594 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016594 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016594 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016594 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016594 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016594 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016594 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016594 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016594 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016594 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016594 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016594 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016594 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016594 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016594 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016594 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016594 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016594 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016594 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016594 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016594 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016594 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016594 =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016594 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016594 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016594                            		include	"_incObj\Sonic LoadGfx.asm"
00016594                            ; ---------------------------------------------------------------------------
00016594                            ; Sonic	graphics loading subroutine
00016594                            ; ---------------------------------------------------------------------------
00016594                            
00016594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016594                            
00016594                            
00016594                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016594 7000                       		moveq	#0,d0
00016596 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001659A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001659E 6700                       		beq.s	locret_13C96
000165A0 11C0 F766                  		move.b	d0,($FFFFF766).w
000165A4 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000165AA D040                       		add.w	d0,d0
000165AC D4F2 0000                  		adda.w	(a2,d0.w),a2
000165B0 7A00                       		moveq	#0,d5
000165B2 1A1A                       		move.b	(a2)+,d5
000165B4 5345                       		subq.w	#1,d5
000165B6 6B00                       		bmi.s	locret_13C96
000165B8 383C F000                  		move.w	#$F000,d4
000165BC 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000165C2                            
000165C2                            SPLC_ReadEntry:
000165C2 7200                       		moveq	#0,d1
000165C4 121A                       		move.b	(a2)+,d1
000165C6 E149                       		lsl.w	#8,d1
000165C8 121A                       		move.b	(a2)+,d1
000165CA 3601                       		move.w	d1,d3
000165CC E04B                       		lsr.w	#8,d3
000165CE 0243 00F0                  		andi.w	#$F0,d3
000165D2 0643 0010                  		addi.w	#$10,d3
000165D6 0241 0FFF                  		andi.w	#$FFF,d1
000165DA EB89                       		lsl.l	#5,d1
000165DC D286                       		add.l	d6,d1
000165DE 3404                       		move.w	d4,d2
000165E0 D843                       		add.w	d3,d4
000165E2 D843                       		add.w	d3,d4
000165E4 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000165EA 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000165EE                            
000165EE                            locret_13C96:
000165EE 4E75                       		rts	
000165F0                            ; End of function Sonic_LoadGfx
000165F0                            ; End of function Sonic_LoadGfx
000165F0                            
000165F0                            		include	"_incObj\0A Drowning Countdown.asm"
000165F0                            ; ---------------------------------------------------------------------------
000165F0                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000165F0                            ; Sonic's mouth (LZ)
000165F0                            ; ---------------------------------------------------------------------------
000165F0                            
000165F0                            DrownCount:
000165F0 7000                       		moveq	#0,d0
000165F2 1028 0024                  		move.b	obRoutine(a0),d0
000165F6 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000165FA 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000165FE                            ; ===========================================================================
000165FE                            Drown_Index:
000165FE 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016600 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016602 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016604 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016606 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016608 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
0001660A 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
0001660C 0000                       			dc.w Drown_Display-Drown_Index
0001660E 0000                       			dc.w Drown_Delete-Drown_Index
00016610                            
00016610 =00000030                  drown_origX:		equ $30		; original x-axis position
00016610 =00000038                  drown_time:		equ $38		; time between each number changes
00016610                            
00016610 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016610 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016610 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016610 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016610 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016610 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016610 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016610                            ; ===========================================================================
00016610                            
00016610                            Drown_Main:	; Routine 0
00016610 5428 0024                  		addq.b	#2,obRoutine(a0)
00016614 217C 0001 49BA 0004        		move.l	#Map_Bub,obMap(a0)
0001661C 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00016622 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00016628 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
0001662A 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00016630                            
00016630                            	Drown_IsSYZ:	
00016630 117C 0084 0001             		move.b	#$84,obRender(a0)
00016636 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001663C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016642 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016646 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016648                            
00016648 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
0001664C 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016654 317C 0440 0002             		move.w	#$440,obGfx(a0)
0001665A 0240 007F                  		andi.w	#$7F,d0
0001665E 1140 0033                  		move.b	d0,$33(a0)
00016662 6000 0000                  		bra.w	Drown_Countdown
00016666                            ; ===========================================================================
00016666                            
00016666                            @smallbubble:
00016666 1140 001C                  		move.b	d0,obAnim(a0)
0001666A 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016670 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016676                            
00016676                            Drown_Animate:	; Routine 2
00016676 43F9 0000 0000             		lea	(Ani_Drown).l,a1
0001667C 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00016682                            
00016682                            Drown_ChkWater:	; Routine 4
00016682 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
00016688 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
0001668A 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
0001668E 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
00016692 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
00016696 6200                       		bhi.s	Display_Next		; if so, branch TIS
00016698                            		
00016698                            
00016698                            Normal_Water_Level:
00016698 3038 F646                  		move.w	(v_waterpos1).w,d0
0001669C B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
000166A0 6500                       		bcs.s	Wobble		; if not, branch
000166A2                            Display_Next:	;TIS		
000166A2 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
000166A8 5E28 001C                  		addq.b	#7,obAnim(a0)
000166AC 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
000166B2 6700                       		beq.s	Drown_Display
000166B4 6000                       		bra.s	Drown_Display
000166B6                            ; ===========================================================================
000166B6                            
000166B6                            Wobble:
000166B6 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
000166BA 6700                       		beq.s	@notunnel	; if not, branch
000166BC 5868 0030                  		addq.w	#4,drown_origX(a0)
000166C0                            
000166C0                            	@notunnel:
000166C0 1028 0026                  		move.b	obAngle(a0),d0
000166C4 5228 0026                  		addq.b	#1,obAngle(a0)
000166C8 0240 007F                  		andi.w	#$7F,d0
000166CC 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000166D2 1031 0000                  		move.b	(a1,d0.w),d0
000166D6 4880                       		ext.w	d0
000166D8 D068 0030                  		add.w	drown_origX(a0),d0
000166DC 3140 0008                  		move.w	d0,obX(a0)
000166E0 6100                       		bsr.s	Drown_ShowNumber
000166E2 4EB9 0000 F426             		jsr	(SpeedToPos).l
000166E8 4A28 0001                  		tst.b	obRender(a0)
000166EC 6A00                       		bpl.s	@delete
000166EE 4EF9 0000 F43A             		jmp	(DisplaySprite).l
000166F4                            
000166F4                            	@delete:
000166F4 4EF9 0000 F47A             		jmp	(DeleteObject).l
000166FA                            ; ===========================================================================
000166FA                            
000166FA                            Drown_Display:	; Routine 6, Routine $E
000166FA 6100                       		bsr.s	Drown_ShowNumber
000166FC 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016702 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00016708 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001670E                            ; ===========================================================================
0001670E                            
0001670E                            Drown_Delete:	; Routine 8, Routine $10
0001670E 4EF9 0000 F47A             		jmp	(DeleteObject).l
00016714                            ; ===========================================================================
00016714                            
00016714                            Drown_AirLeft:	; Routine $C
00016714 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001671A 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
0001671C 5368 0038                  		subq.w	#1,drown_time(a0)
00016720 6600                       		bne.s	@display
00016722 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016728 5E28 001C                  		addq.b	#7,obAnim(a0)
0001672C 60CC                       		bra.s	Drown_Display
0001672E                            ; ===========================================================================
0001672E                            
0001672E                            	@display:
0001672E 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016734 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001673A 4A28 0001                  		tst.b	obRender(a0)
0001673E 6A00                       		bpl.s	Drown_AirLeft_Delete
00016740 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00016746                            
00016746                            Drown_AirLeft_Delete:	
00016746 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001674C                            ; ===========================================================================
0001674C                            
0001674C                            Drown_ShowNumber:
0001674C 4A68 0038                  		tst.w	drown_time(a0)
00016750 6700                       		beq.s	@nonumber
00016752 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016756 6600                       		bne.s	@nonumber	; if time remains, branch
00016758 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
0001675E 6400                       		bcc.s	@nonumber
00016760                            
00016760 317C 000F 0038             		move.w	#15,drown_time(a0)
00016766 4268 0012                  		clr.w	obVelY(a0)
0001676A 117C 0080 0001             		move.b	#$80,obRender(a0)
00016770 3028 0008                  		move.w	obX(a0),d0
00016774 9078 F700                  		sub.w	(v_screenposx).w,d0
00016778 0640 0080                  		addi.w	#$80,d0
0001677C 3140 0008                  		move.w	d0,obX(a0)
00016780 3028 000C                  		move.w	obY(a0),d0
00016784 9078 F704                  		sub.w	(v_screenposy).w,d0
00016788 0640 0080                  		addi.w	#$80,d0
0001678C 3140 000A                  		move.w	d0,obScreenY(a0)
00016790 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016796                            
00016796                            	@nonumber:
00016796 4E75                       		rts	
00016798                            ; ===========================================================================
00016798                            Drown_WobbleData:
00016798 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000167A8 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000167B8 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
000167C8 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
000167D8 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000167E8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000167F8 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016808 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016818 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016828 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016838 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016848 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016858 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016868 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016878 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016888 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016898                            ; ===========================================================================
00016898                            
00016898                            Drown_Countdown:; Routine $A
00016898 4A68 002C                  		tst.w	$2C(a0)
0001689C 6600 0000                  		bne.w	@loc_13F86
000168A0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000168A6 6400 0000                  		bcc.w	@nocountdown
000168AA 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000168B0 6700 0000                  		beq.w	@nocountdown	; if not, branch
000168B4                            
000168B4 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000168B8 6A00 0000                  		bpl.w	@nochange	; branch if time remains
000168BC 317C 003B 0038             		move.w	#59,drown_time(a0)
000168C2 317C 0001 0036             		move.w	#1,$36(a0)
000168C8 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000168CE 0240 0001                  		andi.w	#1,d0
000168D2 1140 0034                  		move.b	d0,$34(a0)
000168D6 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
000168DA 0C40 0019                  		cmpi.w	#25,d0
000168DE 6700                       		beq.s	@warnsound	; play sound if	air is 25
000168E0 0C40 0014                  		cmpi.w	#20,d0
000168E4 6700                       		beq.s	@warnsound
000168E6 0C40 000F                  		cmpi.w	#15,d0
000168EA 6700                       		beq.s	@warnsound
000168EC 0C40 000C                  		cmpi.w	#12,d0
000168F0 6200                       		bhi.s	@reduceair	; if air is above 12, branch
000168F2                            
000168F2                            	@skipmusic:
000168FC 5328 0032                  		subq.b	#1,$32(a0)
00016900 6A00                       		bpl.s	@reduceair
00016902 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016908 08E8 0007 0036             		bset	#7,$36(a0)
0001690E 6000                       		bra.s	@reduceair
00016910                            ; ===========================================================================
00016910                            
00016910                            @warnsound:
0001691A                            
0001691A                            @reduceair:
0001691A 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
0001691E 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016922                            
00016922                            		; Sonic drowns here
00016922 6100 0000                  		bsr.w	ResumeMusic
00016926 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016936 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
0001693C 117C 000A 0034             		move.b	#$A,$34(a0)
00016942 317C 0001 0036             		move.w	#1,$36(a0)
00016948 317C 0078 002C             		move.w	#$78,$2C(a0)
0001694E 2F08                       		move.l	a0,-(sp)
00016950 41F8 D000                  		lea	(v_player).w,a0
00016954 6100 F66C                  		bsr.w	Sonic_ResetOnFloor
00016958 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
0001695E 08E8 0001 0022             		bset	#1,obStatus(a0)
00016964 08E8 0007 0002             		bset	#7,obGfx(a0)
0001696A 317C 0000 0012             		move.w	#0,obVelY(a0)
00016970 317C 0000 0010             		move.w	#0,obVelX(a0)
00016976 317C 0000 0020             		move.w	#0,obInertia(a0)
0001697C 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016982 205F                       		movea.l	(sp)+,a0
00016984 4E75                       		rts	
00016986                            ; ===========================================================================
00016986                            
00016986                            @loc_13F86:
00016986 5368 002C                  		subq.w	#1,$2C(a0)
0001698A 6600                       		bne.s	@loc_13F94
0001698C 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016992 4E75                       		rts	
00016994                            ; ===========================================================================
00016994                            
00016994                            	@loc_13F94:
00016994 2F08                       		move.l	a0,-(sp)
00016996 41F8 D000                  		lea	(v_player).w,a0
0001699A 4EB9 0000 F426             		jsr	(SpeedToPos).l
000169A0 0668 0010 0012             		addi.w	#$10,obVelY(a0)
000169A6 205F                       		movea.l	(sp)+,a0
000169A8 6000                       		bra.s	@nochange
000169AA                            ; ===========================================================================
000169AA                            
000169AA                            @gotomakenum:
000169AA 6000                       		bra.s	@makenum
000169AC                            ; ===========================================================================
000169AC                            
000169AC                            @nochange:
000169AC 4A68 0036                  		tst.w	$36(a0)
000169B0 6700 0000                  		beq.w	@nocountdown
000169B4 5368 003A                  		subq.w	#1,$3A(a0)
000169B8 6A00 0000                  		bpl.w	@nocountdown
000169BC                            
000169BC                            @makenum:
000169BC 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000169C2 0240 000F                  		andi.w	#$F,d0
000169C6 3140 003A                  		move.w	d0,$3A(a0)
000169CA 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
000169D0 6600 0000                  		bne.w	@nocountdown
000169D4 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
000169D8 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
000169DE 7006                       		moveq	#6,d0
000169E0 0838 0000 D022             		btst	#0,(v_player+obStatus).w
000169E6 6700                       		beq.s	@noflip
000169E8 4440                       		neg.w	d0
000169EA 137C 0040 0026             		move.b	#$40,obAngle(a1)
000169F0                            
000169F0                            	@noflip:
000169F0 D169 0008                  		add.w	d0,obX(a1)
000169F4 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
000169FA 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016A00 4A68 002C                  		tst.w	$2C(a0)
00016A04 6700 0000                  		beq.w	@loc_1403E
00016A08 0268 0007 003A             		andi.w	#7,$3A(a0)
00016A0E 0668 0000 003A             		addi.w	#0,$3A(a0)
00016A14 3038 D00C                  		move.w	(v_player+obY).w,d0
00016A18 0440 000C                  		subi.w	#$C,d0
00016A1C 3340 000C                  		move.w	d0,obY(a1)
00016A20 4EB9 0000 3B1C             		jsr	(RandomNumber).l
00016A26 1340 0026                  		move.b	d0,obAngle(a1)
00016A2A 3038 FE04                  		move.w	(v_framecount).w,d0
00016A2E 0200 0003                  		andi.b	#3,d0
00016A32 6600                       		bne.s	@loc_14082
00016A34 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016A3A 6000                       		bra.s	@loc_14082
00016A3C                            ; ===========================================================================
00016A3C                            
00016A3C                            @loc_1403E:
00016A3C 0828 0007 0036             		btst	#7,$36(a0)
00016A42 6700                       		beq.s	@loc_14082
00016A44 3438 FE14                  		move.w	(v_air).w,d2
00016A48 E24A                       		lsr.w	#1,d2
00016A4A 4EB9 0000 3B1C             		jsr	(RandomNumber).l
00016A50 0240 0003                  		andi.w	#3,d0
00016A54 6600                       		bne.s	@loc_1406A
00016A56 08E8 0006 0036             		bset	#6,$36(a0)
00016A5C 6600                       		bne.s	@loc_14082
00016A5E 1342 0028                  		move.b	d2,obSubtype(a1)
00016A62 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016A68                            
00016A68                            	@loc_1406A:
00016A68 4A28 0034                  		tst.b	$34(a0)
00016A6C 6600                       		bne.s	@loc_14082
00016A6E 08E8 0006 0036             		bset	#6,$36(a0)
00016A74 6600                       		bne.s	@loc_14082
00016A76 1342 0028                  		move.b	d2,obSubtype(a1)
00016A7A 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016A80                            
00016A80                            @loc_14082:
00016A80 5328 0034                  		subq.b	#1,$34(a0)
00016A84 6A00                       		bpl.s	@nocountdown
00016A86 4268 0036                  		clr.w	$36(a0)
00016A8A                            
00016A8A                            @nocountdown:
00016A8A 4E75                       		rts	
00016A8A 4E75                       		rts	
00016A8C                            
00016A8C                            
00016A8C                            ; ---------------------------------------------------------------------------
00016A8C                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016A8C                            ; ---------------------------------------------------------------------------
00016A8C                            
00016A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A8C                            
00016A8C                            
00016A8C                            ResumeMusic:
00016A8C                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016A8C                            		;bhi.s	@over12		; if yes, branch
00016A8C                            		;move.b	(v_Saved_music),d0
00016A8C                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016A8C                            		;beq.s	@notinvinc ; if not, branch
00016A8C                            		;move.w	#bgm_Invincible,d0
00016A8C                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016A8C                            		;beq.s	@notinvinc	; if not, branch
00016A8C                            		;move.w	#bgm_Ending,d0
00016A8C                            
00016A8C                            	;@notinvinc:
00016A8C                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016A8C                            		;beq.s	@playselected ; if not, branch
00016A8C                            		;move.w	#bgm_Boss,d0
00016A8C                            
00016A8C                            	;@playselected:
00016A8C                            		;jsr	(PlaySound).l
00016A8C                            
00016A8C                            	;@over12:
00016A8C 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016A92 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016A96 4E75                       		rts	
00016A98                            
00016A98                            ;End of function ResumeMusic
00016A98                            
00016A98                            ; ===========================================================================
00016A98                            
00016A98                            		include	"_anim\Drowning Countdown.asm"
00016A98                            ; ---------------------------------------------------------------------------
00016A98                            ; Animation script - countdown numbers and bubbles (LZ)
00016A98                            ; ---------------------------------------------------------------------------
00016A98 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016A9A 0000                       		dc.w @oneappear-Ani_Drown
00016A9C 0000                       		dc.w @twoappear-Ani_Drown
00016A9E 0000                       		dc.w @threeappear-Ani_Drown
00016AA0 0000                       		dc.w @fourappear-Ani_Drown
00016AA2 0000                       		dc.w @fiveappear-Ani_Drown
00016AA4 0000                       		dc.w @smallbubble-Ani_Drown
00016AA6 0000                       		dc.w @zeroflash-Ani_Drown
00016AA8 0000                       		dc.w @oneflash-Ani_Drown
00016AAA 0000                       		dc.w @twoflash-Ani_Drown
00016AAC 0000                       		dc.w @threeflash-Ani_Drown
00016AAE 0000                       		dc.w @fourflash-Ani_Drown
00016AB0 0000                       		dc.w @fiveflash-Ani_Drown
00016AB2 0000                       		dc.w @blank-Ani_Drown
00016AB4 0000                       		dc.w @mediumbubble-Ani_Drown
00016AB6 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016AC0 00                         		even
00016AC0 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016ACA 00                         		even
00016ACA 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016AD4 00                         		even
00016AD4 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016ADE 00                         		even
00016ADE 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016AE8 00                         		even
00016AE8 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016AF2 00                         		even
00016AF2 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016AF8 00                         		even
00016AF8 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016B00 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016B08 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016B10 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016B18 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016B20 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016B28 0EFC                       @blank:		dc.b $E, afRoutine
00016B2A 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016B30                            		even
00016B30                            		even
00016B30                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016B30                            ; ---------------------------------------------------------------------------
00016B30                            ; Sprite mappings - drowning countdown numbers (LZ)
00016B30                            ; ---------------------------------------------------------------------------
00016B30                            Map_Drown_internal:
00016B30 0000                       		dc.w @num-Map_Drown_internal
00016B32 01                         @num:		dc.b 1
00016B33 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016B38                            		even
00016B38                            		even
00016B38                            
00016B38                            ; --------------------------------------------------
00016B38                            ; Subroutine to load the shield's art over DMA
00016B38                            ; --------------------------------------------------
00016B38                            
00016B38                            PLCLoad_Shields:
00016B38 7000                       		moveq	#0,d0
00016B3A 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00016B3E B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
00016B42 6700                       		beq.s	locret2_13C96
00016B44 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
00016B48 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00016B4C D040                       		add.w   d0,d0
00016B4E D4F2 0000                  		adda.w  (a2,D0),a2
00016B52 3A1A                       		move.w  (a2)+,d5
00016B54 5345                       		subq.w  #1,d5
00016B56 6B00                       		bmi.s	locret2_13C96
00016B58 3828 0036                  		move.w  shield_vram_art(A0),d4
00016B5C                            
00016B5C                            loc_199BE:
00016B5C 7200                       		moveq	#0,d1
00016B5E 121A                       		move.b	(a2)+,d1
00016B60 E149                       		lsl.w	#8,d1
00016B62 121A                       		move.b	(a2)+,d1
00016B64 3601                       		move.w	d1,d3
00016B66 E04B                       		lsr.w	#8,d3
00016B68 0243 00F0                  		andi.w	#$F0,d3
00016B6C 0643 0010                  		addi.w	#$10,d3
00016B70 0241 0FFF                  		andi.w	#$FFF,d1
00016B74 EB89                       		lsl.l	#5,d1
00016B76 D2A8 0038                  		add.l   shield_Art_Address(a0),d1
00016B7A 3404                       		move.w  d4,d2
00016B7C D843                       		add.w   d3,d4
00016B7E D843                       		add.w   d3,d4
00016B80 4EB9 0000 1476             		jsr     (QueueDMATransfer).l
00016B86 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
00016B8A                            
00016B8A                            locret2_13C96:
00016B8A 4E75                       		rts	
00016B8C                            ; End of function PLCLoad_Shields
00016B8C                            
00016B8C                            		include	"_incObj\4E Silver Shield.asm"
00016B8C                            ; ---------------------------------------------------------------------------
00016B8C                            ; Object 4E - Silver Shield
00016B8C                            ; ---------------------------------------------------------------------------
00016B8C                            SPShieldItem: ; XREF: Obj_Index
00016B8C 7000                       		moveq	#0,d0
00016B8E 1028 0024                  		move.b	obRoutine(a0),d0
00016B92 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
00016B96 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
00016B9A                            ; ===========================================================================
00016B9A                            ; off_1D900:
00016B9A                            SPShieldItem_Index:
00016B9A 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
00016B9C 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
00016B9E                            ; ===========================================================================
00016B9E                            ; loc_1D904:
00016B9E                            SPShieldItem_Init:
00016B9E 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016BA6 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016BAE 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016BB6 117C 0004 0001             		move.b	#4,obRender(a0)
00016BBC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016BC2 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016BC8 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016BCE 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016BD4 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016BDA 6700                       		beq.s	@animclear
00016BDC 08E8 0007 0002             		bset	#7,obGfx(a0)
00016BE2                            
00016BE2                            @animclear:
00016BE2 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016BE8 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016BEE 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016BF2                            ; loc_1D92C:
00016BF2                            SPShieldItem_Main:
00016BF2 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016BF6 4A38 FE2D                  		tst.b	(v_invinc).w
00016BFA 6600                       		bne.s	@return
00016BFC                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016BFC                            		;beq.s	@return	; If so, do not display and do not update variables
00016BFC 4A38 F5CA                  		tst.b	(v_SpShield).w
00016C00 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
00016C04 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016C0A 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016C10 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016C16 4A6A 0002                  		tst.w	obGFX(a2)
00016C1A 6A00                       		bpl.s	@nothighpriority
00016C1C 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016C22                            
00016C22                            		@nothighpriority:
00016C22 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016C28 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00016C2E 4EB9 0001 6B38             		jsr	(PLCLoad_Shields).l
00016C34 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00016C3A                            ; ---------------------------------------------------------------------------
00016C3A                            ; ===========================================================================
00016C3A                            
00016C3A                            @return:
00016C3A 4E75                       		rts
00016C3C                            
00016C3C                            SPShieldItem_Destroy:
00016C3C 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016C40 4E75                       		rts
00016C42                            ; ===========================================================================
00016C42                            ; ===========================================================================
00016C42                            		include	"_incObj\04 Gold Shield.asm"
00016C42                            ; ---------------------------------------------------------------------------
00016C42                            ; Object 04 - Gold Shield
00016C42                            ; ---------------------------------------------------------------------------
00016C42                            GShieldItem: ; XREF: Obj_Index
00016C42 7000                       		moveq	#0,d0
00016C44 1028 0024                  		move.b	obRoutine(a0),d0
00016C48 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00016C4C 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
00016C50                            ; ===========================================================================
00016C50                            ; off_1D900:
00016C50                            GShieldItem_Index:
00016C50 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
00016C52 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
00016C54                            ; ===========================================================================
00016C54                            ; loc_1D904:
00016C54                            GShieldItem_Init:
00016C54 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016C5C 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016C64 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016C6C 117C 0004 0001             		move.b	#4,obRender(a0)
00016C72 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016C78 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016C7E 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016C84 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016C8A 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016C90 6700                       		beq.s	@animclear
00016C92 08E8 0007 0002             		bset	#7,obGfx(a0)
00016C98                            
00016C98                            @animclear:
00016C98 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016C9E 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016CA4 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016CA8                            ; loc_1D92C:
00016CA8                            GShieldItem_Main:
00016CA8 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016CAC 4A38 FE2D                  		tst.b	(v_invinc).w
00016CB0 6600                       		bne.s	@return
00016CB2                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016CB2                            		;beq.s	@return	; If so, do not display and do not update variables
00016CB2 4A38 F5C9                  		tst.b	(v_GShield).w
00016CB6 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
00016CBA 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016CC0 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016CC6 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016CCC 4A6A 0002                  		tst.w	obGFX(a2)
00016CD0 6A00                       		bpl.s	@nothighpriority
00016CD2 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016CD8                            
00016CD8                            		@nothighpriority:
00016CD8 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016CDE 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00016CE4 4EB9 0001 6B38             		jsr	(PLCLoad_Shields).l
00016CEA 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00016CF0                            ; ---------------------------------------------------------------------------
00016CF0                            ; ===========================================================================
00016CF0                            
00016CF0                            @return:
00016CF0 4E75                       		rts
00016CF2                            
00016CF2                            GShieldItem_Destroy:
00016CF2 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016CF6 4E75                       		rts
00016CF8                            ; ===========================================================================
00016CF8                            ; ===========================================================================
00016CF8                            		include	"_incObj\07 Red Shield.asm"
00016CF8                            ; ---------------------------------------------------------------------------
00016CF8                            ; Object 07 - Red Shield
00016CF8                            ; ---------------------------------------------------------------------------
00016CF8                            RShieldItem: ; XREF: Obj_Index
00016CF8 7000                       		moveq	#0,d0
00016CFA 1028 0024                  		move.b	obRoutine(a0),d0
00016CFE 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
00016D02 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
00016D06                            ; ===========================================================================
00016D06                            ; off_1D900:
00016D06                            RShieldItem_Index:
00016D06 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
00016D08 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
00016D0A                            ; ===========================================================================
00016D0A                            ; loc_1D904:
00016D0A                            RShieldItem_Init:
00016D0A 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016D12 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016D1A 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016D22 117C 0004 0001             		move.b	#4,obRender(a0)
00016D28 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016D2E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016D34 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016D3A 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016D40 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016D46 6700                       		beq.s	@animclear
00016D48 08E8 0007 0002             		bset	#7,obGfx(a0)
00016D4E                            
00016D4E                            @animclear:
00016D4E 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016D54 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016D5A 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016D5E                            ; loc_1D92C:
00016D5E                            RShieldItem_Main:
00016D5E 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016D62 4A38 FE2D                  		tst.b	(v_invinc).w
00016D66 6600                       		bne.s	@return
00016D68                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016D68                            		;beq.s	@return	; If so, do not display and do not update variables
00016D68 4A38 F5C8                  		tst.b	(v_RShield).w
00016D6C 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
00016D70 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016D76 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016D7C 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016D82 4A6A 0002                  		tst.w	obGFX(a2)
00016D86 6A00                       		bpl.s	@nothighpriority
00016D88 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016D8E                            
00016D8E                            		@nothighpriority:
00016D8E 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016D94 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00016D9A 4EB9 0001 6B38             		jsr	(PLCLoad_Shields).l
00016DA0 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00016DA6                            ; ---------------------------------------------------------------------------
00016DA6                            ; ===========================================================================
00016DA6                            
00016DA6                            @return:
00016DA6 4E75                       		rts
00016DA8                            
00016DA8                            RShieldItem_Destroy:
00016DA8 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016DAC 4E75                       		rts
00016DAE                            ; ===========================================================================
00016DAE                            ; ===========================================================================
00016DAE                            		include	"_incObj\38 Shield.asm"
00016DAE                            ; ---------------------------------------------------------------------------
00016DAE                            ; Object 38 - Shield
00016DAE                            ; ---------------------------------------------------------------------------
00016DAE                            ShieldItem: ; XREF: Obj_Index
00016DAE 7000                       		moveq	#0,d0
00016DB0 1028 0024                  		move.b	obRoutine(a0),d0
00016DB4 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
00016DB8 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
00016DBC                            ; ===========================================================================
00016DBC                            ; off_1D900:
00016DBC                            ShieldItem_Index:
00016DBC 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
00016DBE 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
00016DC0                            ; ===========================================================================
00016DC0                            ; loc_1D904:
00016DC0                            ShieldItem_Init:
00016DC0 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016DC8 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016DD0 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016DD8 117C 0004 0001             		move.b	#4,obRender(a0)
00016DDE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016DE4 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016DEA 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016DF0 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016DF6 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016DFC 6700                       		beq.s	loc_195F0S
00016DFE 08E8 0007 0002             		bset	#7,obGfx(a0)
00016E04                            
00016E04                            loc_195F0S:
00016E04 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016E0A 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016E10 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016E14                            ; loc_1D92C:
00016E14                            ShieldItem_Main:
00016E14 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016E18 4A38 FE2D                  		tst.b	(v_invinc).w
00016E1C 6600                       		bne.s	return_1D976
00016E1E                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016E1E                            		;beq.s	return_1D976	; If so, do not display and do not update variables
00016E1E 4A38 FE2C                  		tst.b	(v_shield).w
00016E22 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
00016E26 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016E2C 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016E32 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016E38 4A6A 0002                  		tst.w	obGFX(a2)
00016E3C 6A00                       		bpl.s	@nothighpriority
00016E3E 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016E44                            
00016E44                            		@nothighpriority:
00016E44 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016E4A 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00016E50 4EB9 0001 6B38             		jsr	(PLCLoad_Shields).l
00016E56 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00016E5C                            ; ---------------------------------------------------------------------------
00016E5C                            ; ===========================================================================
00016E5C                            
00016E5C                            return_1D976:
00016E5C 4E75                       		rts
00016E5E                            
00016E5E                            ShieldItem_Destroy:
00016E5E 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016E62 4E75                       		rts
00016E64                            ; ===========================================================================
00016E64                            ; ===========================================================================
00016E64                            		include	"_incObj\19 Invincibility Stars.asm"		
00016E64                            ; ---------------------------------------------------------------------------
00016E64                            ; Object 10 - invincibility stars
00016E64                            ; ---------------------------------------------------------------------------
00016E64 =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
00016E64 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
00016E64 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
00016E64 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
00016E64                            
00016E64                            InvStarsObj: 
00016E64 7000                       		moveq	#0,d0
00016E66 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
00016E6A 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00016E6E 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
00016E72                            ; ===========================================================================
00016E72 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
00016E74 0000                       		dc.w @MainObject-InvStars_Index
00016E76 0000                       		dc.w @SubObject-InvStars_Index
00016E78                            ; ===========================================================================
00016E78                            
00016E78                            	@SubObjectsData:
00016E78 0000 0000                  		dc.l Ani_InvStars2 ; animation script
00016E7C 0B00                       		dc.w $0B00 ; speed index,sub3 anim
00016E7E 0000 0000                  		dc.l Ani_InvStars3
00016E82 160D                       		dc.w $160D
00016E84 0000 0000                  		dc.l Ani_InvStars4
00016E88 2C0D                       		dc.w $2C0D
00016E8A                            ; ===========================================================================
00016E8A                            
00016E8A                            	@InitObjects:
00016E8A 223C 0000 0000             		move.l	#Unc_Stars,d1
00016E90 343C ABC0                  		move.w	#$ABC0,d2
00016E94 363C 0220                  		move.w	#$220,d3
00016E98 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00016E9E 7400                       		moveq	#0,d2
00016EA0 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
00016EA4 43D0                       		lea	(a0),a1
00016EA6 7203                       		moveq	#3,d1
00016EA8                            		
00016EA8                            	@initStars:
00016EA8 1290                       		move.b	(a0),(a1) ; load obj35
00016EAA 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
00016EB0 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
00016EB8 337C 055E 0002             		move.w	#$55E,obGfx(a1)
00016EBE 137C 0044 0001             		move.b  #%001000100,obRender(a1)
00016EC4 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
00016ECA 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
00016ED0 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00016ED4 5242                       		addq.w	#1,d2
00016ED6 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
00016EDA 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
00016EDE 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00016EE2 51C9 FFC4                  		dbf	d1,@initStars
00016EE6                            
00016EE6 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
00016EEC 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00016EF2                            
00016EF2                            	@MainObject:
00016EF2 43F8 D000                  		lea (v_player).w,a1 ; a1=character
00016EF6 4A38 FE2D                  		tst.b   (v_invinc).w
00016EFA 6700 857E                  		beq.w	DeleteObject
00016EFE 3029 0008                  		move.w	obX(a1),d0
00016F02 3140 0008                  		move.w	d0,obX(a0)
00016F06 3229 000C                  		move.w	obY(a1),d1
00016F0A 3141 000C                  		move.w	d1,obY(a0)
00016F0E 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016F12 47F9 0000 0000             		lea	Ani_InvStars1,a3
00016F18 7A00                       		moveq	#0,d5
00016F1A                            
00016F1A                            	@getFrame_main:
00016F1A 3428 0038                  		move.w	$38(a0),d2
00016F1E 1A33 2000                  		move.b	(a3,d2.w),d5
00016F22 6A00                       		bpl.s	@setFrameAndPosition_main
00016F24 4268 0038                  		clr.w	$38(a0)
00016F28 60F0                       		bra.s	@getFrame_main
00016F2A                            ; ===========================================================================
00016F2A                            
00016F2A                            	@setFrameAndPosition_main:
00016F2A 5268 0038                  		addq.w	#1,$38(a0)
00016F2E 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00016F34 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016F38 6100 0000                  		bsr.w	InvStars_get_speed
00016F3C 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016F3E 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016F40 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016F42 0646 0020                  		addi.w	#$20,d6
00016F46 6100 0000                  		bsr.w	InvStars_get_speed
00016F4A 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016F4C 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016F4E 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016F50 7012                       		moveq	#$12,d0
00016F52 0829 0000 0022             		btst	#0,obStatus(a1)
00016F58 6700                       		beq.s	@display_main
00016F5A 4440                       		neg.w	d0
00016F5C                            
00016F5C                            	@display_main:
00016F5C D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
00016F60 303C 0080                  		move.w	#(1*$80),d0
00016F64 6000 8500                  		bra.w	DisplaySprite2
00016F68                            ; ===========================================================================
00016F68                            
00016F68                            	@SubObject:
00016F68 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
00016F6C 4A38 FE2D                  		tst.b   (v_invinc).w
00016F70 6700 8508                  		beq.w	DeleteObject
00016F74 4BF8 F7A8                  		lea		(v_trackpos).w,a5
00016F78 4DF8 CB00                  		lea		(v_tracksonic).w,a6
00016F7C                            
00016F7C                            	@getPosition_sub:
00016F7C 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
00016F80 E509                       		lsl.b	#2,d1
00016F82 3401                       		move.w	d1,d2
00016F84 D241                       		add.w	d1,d1
00016F86 D242                       		add.w	d2,d1
00016F88 3015                       		move.w	(a5),d0
00016F8A 9001                       		sub.b	d1,d0
00016F8C 45F6 0000                  		lea	(a6,d0.w),a2
00016F90 301A                       		move.w	(a2)+,d0
00016F92 321A                       		move.w	(a2)+,d1
00016F94 3140 0008                  		move.w	d0,obX(a0)
00016F98 3141 000C                  		move.w	d1,obY(a0)
00016F9C 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016FA0 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
00016FA4                            
00016FA4                            	@getFrame_sub:
00016FA4 3428 0038                  		move.w	$38(a0),d2
00016FA8 1A33 2000                  		move.b	(a3,d2.w),d5
00016FAC 6A00                       		bpl.s	@setFrameAndPosition_sub
00016FAE 4268 0038                  		clr.w	$38(a0)
00016FB2 60F0                       		bra.s	@getFrame_sub
00016FB4                            ; ===========================================================================
00016FB4                            
00016FB4                            	@setFrameAndPosition_sub:
00016FB4 4845                       		swap	d5
00016FB6 D428 0035                  		add.b	$35(a0),d2
00016FBA 1A33 2000                  		move.b	(a3,d2.w),d5
00016FBE 5268 0038                  		addq.w	#1,$38(a0)
00016FC2 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
00016FC6 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016FCA 6100                       		bsr.s	InvStars_get_speed
00016FCC 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016FCE 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016FD0 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016FD2 0646 0020                  		addi.w	#$20,d6
00016FD6 4845                       		swap	d5
00016FD8 6100                       		bsr.s	InvStars_get_speed
00016FDA 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016FDC 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016FDE 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016FE0 7002                       		moveq	#2,d0
00016FE2 0829 0000 0022             		btst	#0,obStatus(a1)
00016FE8 6700                       		beq.s	loc_1DB20
00016FEA 4440                       		neg.w	d0
00016FEC                            
00016FEC                            loc_1DB20:
00016FEC D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00016FF0 303C 0080                  		move.w    #(1*$80),d0
00016FF4 6000 8470                  		bra.w    DisplaySprite2
00016FF8                            ; ===========================================================================
00016FF8                            
00016FF8                            InvStars_get_speed:
00016FF8 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
00016FFC 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00017000 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00017004 4882                       		ext.w	d2
00017006 4883                       		ext.w	d3
00017008 D440                       		add.w	d0,d2 ; add object x position to x-move speed
0001700A D641                       		add.w	d1,d3 ; add object y position to y-move speed
0001700C 4E75                       		rts
0001700E                            
0001700E                            InvStars_Speeds: ; x-move speed,	y-move speed	
0001700E 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
0001701E 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
0001702E F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
0001703E FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
0001704E                            
0001704E                            ; ---------------------------------------------------------------------------
0001704E                            ; Animation script - invincibility stars
0001704E                            ; ---------------------------------------------------------------------------
0001704E                            
0001704E                            ; The animation script differs from the animate_sprite subroutine
0001704E                            ; Every positive byte - mapping
0001704E                            ; Every negative byte - loop flag 
0001704E                            
0001704E 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
0001705C 00                         		even
0001705C 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
00017067 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
00017072 00                         		even
00017072 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
0001707F 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
0001708C 00                         		even
0001708C 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
00017099 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
000170A6 00                         		even			
000170A6 00                         		even			
000170A6                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000170A6                            ; ---------------------------------------------------------------------------
000170A6                            ; Object 4A - special stage entry from beta
000170A6                            ; ---------------------------------------------------------------------------
000170A6                            
000170A6                            VanishSonic:
000170A6 7000                       		moveq	#0,d0
000170A8 1028 0024                  		move.b	obRoutine(a0),d0
000170AC 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000170B0 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000170B4                            ; ===========================================================================
000170B4 0000                       Van_Index:	dc.w Van_Main-Van_Index
000170B6 0000                       		dc.w Van_RmvSonic-Van_Index
000170B8 0000                       		dc.w Van_LoadSonic-Van_Index
000170BA                            
000170BA =00000030                  van_time:	equ $30		; time for Sonic to disappear
000170BA                            ; ===========================================================================
000170BA                            
000170BA                            Van_Main:	; Routine 0
000170BA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
000170BE 6700                       		beq.s	@isempty	; if yes, branch
000170C0 4E75                       		rts	
000170C2                            
000170C2                            	@isempty:
000170C2 5428 0024                  		addq.b	#2,obRoutine(a0)
000170C6 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
000170CE 117C 0004 0001             		move.b	#4,obRender(a0)
000170D4 317C 0080 0018             		move.w	#$80,obPriority(a0)
000170DA 117C 0038 0014             		move.b	#$38,obActWid(a0)
000170E0 317C 0541 0002             		move.w	#$541,obGfx(a0)
000170E6 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
000170EC                            
000170EC                            Van_RmvSonic:	; Routine 2
000170EC 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
000170F2 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
000170F8 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
000170FE 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017104 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001710A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017110 6600                       		bne.s	@display
00017112 4A38 D000                  		tst.b	(v_player).w
00017116 6700                       		beq.s	@display
00017118 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017128                            
00017128                            	@display:
00017128 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001712E                            ; ===========================================================================
0001712E                            
0001712E                            Van_LoadSonic:	; Routine 4
0001712E 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017132 6600                       		bne.s	@wait		; if time remains, branch
00017134 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0001713A 4EF9 0000 F47A             		jmp	(DeleteObject).l
00017140                            
00017140                            	@wait:
00017140 4E75                       		rts	
00017140 4E75                       		rts	
00017142                            		include	"_incObj\08 Water Splash.asm"
00017142                            ; ---------------------------------------------------------------------------
00017142                            ; Object 08 - water splash (LZ)
00017142                            ; ---------------------------------------------------------------------------
00017142                            
00017142                            Splash:
00017142 7000                       		moveq	#0,d0
00017144 1028 0024                  		move.b	obRoutine(a0),d0
00017148 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
0001714C 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017150                            ; ===========================================================================
00017150 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017152 0000                       		dc.w Spla_Display-Spla_Index
00017154 0000                       		dc.w Spla_Delete-Spla_Index
00017156                            ; ===========================================================================
00017156                            
00017156                            Spla_Main:    ; Routine 0
00017156 5428 0024                          addq.b    #2,obRoutine(a0)
0001715A 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017162 0028 0004 0001                     ori.b    #4,obRender(a0)
00017168 117C 0001 0018                     move.b    #1,obPriority(a0)
0001716E 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017174 317C 4259 0002                     move.w    #$4259,obGfx(a0)
0001717A 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017180                            
00017180                            Spla_Display:    ; Routine 2
00017180                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017180 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017186 43F9 0000 0000                     lea    (Ani_Splash).l,a1
0001718C 4EB9 0000 C4F4                     jsr    (AnimateSprite).l
00017192 4EF9 0000 F43A                     jmp    (DisplaySprite).l
00017198                            ; ===========================================================================
00017198                            
00017198                            Spla_Delete:	; Routine 4
00017198 4EF9 0000 F47A             		jmp	(DeleteObject).l	; delete when animation	is complete
00017198 4EF9 0000 F47A             		jmp	(DeleteObject).l	; delete when animation	is complete
0001719E                            		include	"_anim\Shield and Invincibility.asm"
0001719E                            ; ---------------------------------------------------------------------------
0001719E                            ; Animation script - shield and invincibility stars
0001719E                            ; ---------------------------------------------------------------------------
0001719E 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000171A0 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
000171A0 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
000171BA                            Map_Shield:	include	"_maps\Shield.asm"
000171BA                            ; --------------------------------------------------------------------------------
000171BA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000171BA                            ; --------------------------------------------------------------------------------
000171BA                            
000171BA                            SME_ocN6K:	
000171BA 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
000171BE 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
000171C2 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
000171C6 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
000171CA 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
000171CE 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
000171D2 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
000171D4 00                         SME_ocN6K_1A:	dc.b 0	
000171D5 04                         SME_ocN6K_1B:	dc.b 4	
000171D6 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
000171DB E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
000171E0 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
000171E5 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
000171EA 04                         SME_ocN6K_30:	dc.b 4	
000171EB E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
000171F0 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
000171F5 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
000171FA 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
000171FF 04                         SME_ocN6K_45:	dc.b 4	
00017200 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
00017205 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
0001720A 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
0001720F 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
00017214 04                         SME_ocN6K_5A:	dc.b 4	
00017215 E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
0001721A E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
0001721F 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
00017224 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017229 02                         SME_ocN6K_6F:	dc.b 2	
0001722A E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
0001722F 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017234 02                         SME_ocN6K_7A:	dc.b 2	
00017235 E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
0001723A 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
0001723F 02                         SME_ocN6K_85:	dc.b 2	
00017240 E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017245 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
0001724A 02                         SME_ocN6K_90:	dc.b 2	
0001724B E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
00017250 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
00017255 02                         SME_ocN6K_9B:	dc.b 2	
00017256 E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
0001725B 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
00017260 04                         SME_ocN6K_A6:	dc.b 4	
00017261 E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
00017266 E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
0001726B 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
00017270 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
00017275 04                         SME_ocN6K_BB:	dc.b 4	
00017276 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
0001727B E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017280 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017285 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
0001728A 04                         SME_ocN6K_D0:	dc.b 4	
0001728B E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017290 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017295 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
0001729A 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
000172A0 00                         		even
000172A0 00                         		even
000172A0                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
000172A0                            ; --------------------------------------------------------------------------------
000172A0                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
000172A0                            
000172A0                            SME_yRIsY:	
000172A0 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
000172A4 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
000172A8 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
000172AC 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
000172B0 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
000172B4 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
000172B8 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
000172BA 0000                       SME_yRIsY_1A:	dc.b 0, 0	
000172BC 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
000172C6 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
000172D0 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
000172DA 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
000172E4 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
000172EA 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
000172F0 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
000172F6 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
000172FC 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
00017302 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
0001730C 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017316 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
00017320                            		even
00017320                            		even
00017320                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
00017320                            ; ================================================================================
00017320                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
00017320                            ; ================================================================================
00017320                            
00017320                            InvStarMap:
00017320 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
00017324 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
00017328 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
0001732C 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00017330 0000                       	dc.w InvStarMap_8-InvStarMap
00017332 01                         InvStarMap_1: dc.b $1
00017333 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00017338 01                         InvStarMap_2: dc.b $1
00017339 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
0001733E 01                         InvStarMap_3: dc.b $1
0001733F F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00017344 01                         InvStarMap_4: dc.b $1
00017345 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
0001734A 01                         InvStarMap_5: dc.b $1
0001734B F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00017350 01                         InvStarMap_6: dc.b $1
00017351 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00017356 01                         InvStarMap_7: dc.b $1
00017357 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
0001735C 01                         InvStarMap_8: dc.b $1
0001735D F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00017362                            	even
00017362                            	even
00017362                            		include	"_anim\Special Stage Entry (Unused).asm"
00017362                            ; ---------------------------------------------------------------------------
00017362                            ; Animation script - special stage entry effect from beta
00017362                            ; ---------------------------------------------------------------------------
00017362 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017364 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017378                            		even
00017378                            		even
00017378                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017378                            ; ---------------------------------------------------------------------------
00017378                            ; Sprite mappings - special stage entry	from beta
00017378                            ; ---------------------------------------------------------------------------
00017378                            Map_Vanish_internal:
00017378 0000                       		dc.w @flash1-Map_Vanish_internal
0001737A 0000                       		dc.w @flash2-Map_Vanish_internal
0001737C 0000                       		dc.w @flash3-Map_Vanish_internal
0001737E 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017380 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017382 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017384 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017386 0000                       		dc.w @blank-Map_Vanish_internal
00017388 03                         @flash1:	dc.b 3
00017389 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001738E 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017393 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017398 03                         @flash2:	dc.b 3
00017399 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001739E 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000173A3 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000173A8 05                         @flash3:	dc.b 5
000173A9 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000173AE EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000173B3 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000173B8 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000173BD 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000173C2 09                         @sparkle1:	dc.b 9
000173C3 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000173C8 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000173CD 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000173D2 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000173D7 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000173DC F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000173E1 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000173E6 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000173EB F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000173F0 12                         @sparkle2:	dc.b $12
000173F1 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000173F6 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000173FB F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00017400 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00017405 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001740A 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001740F 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017414 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00017419 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001741E 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017423 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00017428 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001742D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017432 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017437 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001743C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017441 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017446 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001744B 11                         @sparkle3:	dc.b $11
0001744C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017451 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017456 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001745B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017460 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017465 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001746A 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001746F F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017474 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017479 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001747E 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017483 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017488 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001748D 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017492 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017497 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001749C 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000174A1 09                         @sparkle4:	dc.b 9
000174A2 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000174A7 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000174AC 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000174B1 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000174B6 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000174BB FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000174C0 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000174C5 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000174CA 04                         		dc.b 4
000174CB 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000174D0                            		even
000174D0                            		even
000174D0                            		include	"_anim\Water Splash.asm"
000174D0                            ; ---------------------------------------------------------------------------
000174D0                            ; Animation script - water splash (LZ)
000174D0                            ; ---------------------------------------------------------------------------
000174D0 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000174D2 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000174D8 00                         		even
000174D8 00                         		even
000174D8                            Map_Splash:	include	"_maps\Water Splash.asm"
000174D8                            ; ---------------------------------------------------------------------------
000174D8                            ; Sprite mappings - water splash (LZ)
000174D8                            ; ---------------------------------------------------------------------------
000174D8                            Map_Splash_internal:
000174D8 0000                       		dc.w @splash1-Map_Splash_internal
000174DA 0000                       		dc.w @splash2-Map_Splash_internal
000174DC 0000                       		dc.w @splash3-Map_Splash_internal
000174DE 02                         @splash1:	dc.b 2
000174DF F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000174E4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000174E9 02                         @splash2:	dc.b 2
000174EA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000174EF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000174F4 01                         @splash3:	dc.b 1
000174F5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000174FA                            		even
000174FA                            		even
000174FA                            
000174FA                            		include	"_incObj\Sonic AnglePos.asm"
000174FA                            ; ---------------------------------------------------------------------------
000174FA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000174FA                            ; ---------------------------------------------------------------------------
000174FA                            
000174FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000174FA                            
000174FA                            
000174FA                            Sonic_AnglePos:
000174FA 0828 0003 0022             		btst	#3,obStatus(a0)
00017500 6700                       		beq.s	loc_14602
00017502 7000                       		moveq	#0,d0
00017504 11C0 F768                  		move.b	d0,($FFFFF768).w
00017508 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001750C 4E75                       		rts	
0001750E                            ; ===========================================================================
0001750E                            
0001750E                            loc_14602:
0001750E 7003                       		moveq	#3,d0
00017510 11C0 F768                  		move.b	d0,($FFFFF768).w
00017514 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017518 1028 0026                  		move.b	obAngle(a0),d0
0001751C 0600 0020                  		addi.b	#$20,d0
00017520 6A00                       		bpl.s	loc_14624
00017522 1028 0026                  		move.b	obAngle(a0),d0
00017526 6A00                       		bpl.s	loc_1461E
00017528 5300                       		subq.b	#1,d0
0001752A                            
0001752A                            loc_1461E:
0001752A 0600 0020                  		addi.b	#$20,d0
0001752E 6000                       		bra.s	loc_14630
00017530                            ; ===========================================================================
00017530                            
00017530                            loc_14624:
00017530 1028 0026                  		move.b	obAngle(a0),d0
00017534 6A00                       		bpl.s	loc_1462C
00017536 5200                       		addq.b	#1,d0
00017538                            
00017538                            loc_1462C:
00017538 0600 001F                  		addi.b	#$1F,d0
0001753C                            
0001753C                            loc_14630:
0001753C 0200 00C0                  		andi.b	#$C0,d0
00017540 0C00 0040                  		cmpi.b	#$40,d0
00017544 6700 0000                  		beq.w	Sonic_WalkVertL
00017548 0C00 0080                  		cmpi.b	#$80,d0
0001754C 6700 0000                  		beq.w	Sonic_WalkCeiling
00017550 0C00 00C0                  		cmpi.b	#$C0,d0
00017554 6700 0000                  		beq.w	Sonic_WalkVertR
00017558 3428 000C                  		move.w	obY(a0),d2
0001755C 3628 0008                  		move.w	obX(a0),d3
00017560 7000                       		moveq	#0,d0
00017562 1028 0016                  		move.b	obHeight(a0),d0
00017566 4880                       		ext.w	d0
00017568 D440                       		add.w	d0,d2
0001756A 1028 0017                  		move.b	obWidth(a0),d0
0001756E 4880                       		ext.w	d0
00017570 D640                       		add.w	d0,d3
00017572 49F8 F768                  		lea	($FFFFF768).w,a4
00017576 367C 0010                  		movea.w	#$10,a3
0001757A 3C3C 0000                  		move.w	#0,d6
0001757E 7A0D                       		moveq	#$D,d5
00017580 6100 0000                  		bsr.w	FindFloor
00017584 3F01                       		move.w	d1,-(sp)
00017586 3428 000C                  		move.w	obY(a0),d2
0001758A 3628 0008                  		move.w	obX(a0),d3
0001758E 7000                       		moveq	#0,d0
00017590 1028 0016                  		move.b	obHeight(a0),d0
00017594 4880                       		ext.w	d0
00017596 D440                       		add.w	d0,d2
00017598 1028 0017                  		move.b	obWidth(a0),d0
0001759C 4880                       		ext.w	d0
0001759E 4440                       		neg.w	d0
000175A0 D640                       		add.w	d0,d3
000175A2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000175A6 367C 0010                  		movea.w	#$10,a3
000175AA 3C3C 0000                  		move.w	#0,d6
000175AE 7A0D                       		moveq	#$D,d5
000175B0 6100 0000                  		bsr.w	FindFloor
000175B4 301F                       		move.w	(sp)+,d0
000175B6 6100 0000                  		bsr.w	Sonic_Angle
000175BA 4A41                       		tst.w	d1
000175BC 6700                       		beq.s	locret_146BE
000175BE 6A00                       		bpl.s	loc_146C0
000175C0 0C41 FFF2                  		cmpi.w	#-$E,d1
000175C4 6D00                       		blt.s	locret_146E6
000175C6 D368 000C                  		add.w	d1,obY(a0)
000175CA                            
000175CA                            locret_146BE:
000175CA 4E75                       		rts	
000175CC                            ; ===========================================================================
000175CC                            
000175CC                            loc_146C0:
000175CC 0C41 000E                  		cmpi.w	#$E,d1
000175D0 6E00                       		bgt.s	loc_146CC
000175D2                            
000175D2                            loc_146C6:
000175D2 D368 000C                  		add.w	d1,obY(a0)
000175D6 4E75                       		rts	
000175D8                            ; ===========================================================================
000175D8                            
000175D8                            loc_146CC:
000175D8 4A28 0038                  		tst.b	$38(a0)
000175DC 66F4                       		bne.s	loc_146C6
000175DE 08E8 0001 0022             		bset	#1,obStatus(a0)
000175E4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000175EA 117C 0001 001D             		move.b	#1,obNextAni(a0)
000175F0 4E75                       		rts	
000175F2                            ; ===========================================================================
000175F2                            
000175F2                            locret_146E6:
000175F2 4E75                       		rts	
000175F4                            ; End of function Sonic_AnglePos
000175F4                            
000175F4                            ; ===========================================================================
000175F4 2428 0008                  		move.l	obX(a0),d2
000175F8 3028 0010                  		move.w	obVelX(a0),d0
000175FC 48C0                       		ext.l	d0
000175FE E180                       		asl.l	#8,d0
00017600 9480                       		sub.l	d0,d2
00017602 2142 0008                  		move.l	d2,obX(a0)
00017606 303C 0038                  		move.w	#$38,d0
0001760A 48C0                       		ext.l	d0
0001760C E180                       		asl.l	#8,d0
0001760E 9680                       		sub.l	d0,d3
00017610 2143 000C                  		move.l	d3,obY(a0)
00017614 4E75                       		rts	
00017616                            ; ===========================================================================
00017616                            
00017616                            locret_1470A:
00017616 4E75                       		rts	
00017618                            ; ===========================================================================
00017618 2628 000C                  		move.l	obY(a0),d3
0001761C 3028 0012                  		move.w	obVelY(a0),d0
00017620 0440 0038                  		subi.w	#$38,d0
00017624 3140 0012                  		move.w	d0,obVelY(a0)
00017628 48C0                       		ext.l	d0
0001762A E180                       		asl.l	#8,d0
0001762C 9680                       		sub.l	d0,d3
0001762E 2143 000C                  		move.l	d3,obY(a0)
00017632 4E75                       		rts	
00017634 4E75                       		rts	
00017636                            ; ===========================================================================
00017636 2428 0008                  		move.l	obX(a0),d2
0001763A 2628 000C                  		move.l	obY(a0),d3
0001763E 3028 0010                  		move.w	obVelX(a0),d0
00017642 48C0                       		ext.l	d0
00017644 E180                       		asl.l	#8,d0
00017646 9480                       		sub.l	d0,d2
00017648 3028 0012                  		move.w	obVelY(a0),d0
0001764C 48C0                       		ext.l	d0
0001764E E180                       		asl.l	#8,d0
00017650 9680                       		sub.l	d0,d3
00017652 2142 0008                  		move.l	d2,obX(a0)
00017656 2143 000C                  		move.l	d3,obY(a0)
0001765A 4E75                       		rts	
0001765C                            
0001765C                            ; ---------------------------------------------------------------------------
0001765C                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001765C                            ; ---------------------------------------------------------------------------
0001765C                            
0001765C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001765C                            
0001765C                            
0001765C                            Sonic_Angle:
0001765C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017660 B240                       		cmp.w	d0,d1
00017662 6F00                       		ble.s	loc_1475E
00017664 1438 F768                  		move.b	($FFFFF768).w,d2
00017668 3200                       		move.w	d0,d1
0001766A                            
0001766A                            loc_1475E:
0001766A 0802 0000                  		btst	#0,d2
0001766E 6600                       		bne.s	loc_1476A
00017670 1142 0026                  		move.b	d2,obAngle(a0)
00017674 4E75                       		rts	
00017676                            ; ===========================================================================
00017676                            
00017676                            loc_1476A:
00017676 1428 0026                  		move.b	obAngle(a0),d2
0001767A 0602 0020                  		addi.b	#$20,d2
0001767E 0202 00C0                  		andi.b	#$C0,d2
00017682 1142 0026                  		move.b	d2,obAngle(a0)
00017686 4E75                       		rts	
00017688                            ; End of function Sonic_Angle
00017688                            
00017688                            ; ---------------------------------------------------------------------------
00017688                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017688                            ; ---------------------------------------------------------------------------
00017688                            
00017688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017688                            
00017688                            
00017688                            Sonic_WalkVertR:
00017688 3428 000C                  		move.w	obY(a0),d2
0001768C 3628 0008                  		move.w	obX(a0),d3
00017690 7000                       		moveq	#0,d0
00017692 1028 0017                  		move.b	obWidth(a0),d0
00017696 4880                       		ext.w	d0
00017698 4440                       		neg.w	d0
0001769A D440                       		add.w	d0,d2
0001769C 1028 0016                  		move.b	obHeight(a0),d0
000176A0 4880                       		ext.w	d0
000176A2 D640                       		add.w	d0,d3
000176A4 49F8 F768                  		lea	($FFFFF768).w,a4
000176A8 367C 0010                  		movea.w	#$10,a3
000176AC 3C3C 0000                  		move.w	#0,d6
000176B0 7A0D                       		moveq	#$D,d5
000176B2 6100 0000                  		bsr.w	FindWall
000176B6 3F01                       		move.w	d1,-(sp)
000176B8 3428 000C                  		move.w	obY(a0),d2
000176BC 3628 0008                  		move.w	obX(a0),d3
000176C0 7000                       		moveq	#0,d0
000176C2 1028 0017                  		move.b	obWidth(a0),d0
000176C6 4880                       		ext.w	d0
000176C8 D440                       		add.w	d0,d2
000176CA 1028 0016                  		move.b	obHeight(a0),d0
000176CE 4880                       		ext.w	d0
000176D0 D640                       		add.w	d0,d3
000176D2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000176D6 367C 0010                  		movea.w	#$10,a3
000176DA 3C3C 0000                  		move.w	#0,d6
000176DE 7A0D                       		moveq	#$D,d5
000176E0 6100 0000                  		bsr.w	FindWall
000176E4 301F                       		move.w	(sp)+,d0
000176E6 6100 FF74                  		bsr.w	Sonic_Angle
000176EA 4A41                       		tst.w	d1
000176EC 6700                       		beq.s	locret_147F0
000176EE 6A00                       		bpl.s	loc_147F2
000176F0 0C41 FFF2                  		cmpi.w	#-$E,d1
000176F4 6D00 FF20                  		blt.w	locret_1470A
000176F8 D368 0008                  		add.w	d1,obX(a0)
000176FC                            
000176FC                            locret_147F0:
000176FC 4E75                       		rts	
000176FE                            ; ===========================================================================
000176FE                            
000176FE                            loc_147F2:
000176FE 0C41 000E                  		cmpi.w	#$E,d1
00017702 6E00                       		bgt.s	loc_147FE
00017704                            
00017704                            loc_147F8:
00017704 D368 0008                  		add.w	d1,obX(a0)
00017708 4E75                       		rts	
0001770A                            ; ===========================================================================
0001770A                            
0001770A                            loc_147FE:
0001770A 4A28 0038                  		tst.b	$38(a0)
0001770E 66F4                       		bne.s	loc_147F8
00017710 08E8 0001 0022             		bset	#1,obStatus(a0)
00017716 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001771C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017722 4E75                       		rts	
00017724                            ; End of function Sonic_WalkVertR
00017724                            
00017724                            ; ---------------------------------------------------------------------------
00017724                            ; Subroutine allowing Sonic to walk upside-down
00017724                            ; ---------------------------------------------------------------------------
00017724                            
00017724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017724                            
00017724                            
00017724                            Sonic_WalkCeiling:
00017724 3428 000C                  		move.w	obY(a0),d2
00017728 3628 0008                  		move.w	obX(a0),d3
0001772C 7000                       		moveq	#0,d0
0001772E 1028 0016                  		move.b	obHeight(a0),d0
00017732 4880                       		ext.w	d0
00017734 9440                       		sub.w	d0,d2
00017736 0A42 000F                  		eori.w	#$F,d2
0001773A 1028 0017                  		move.b	obWidth(a0),d0
0001773E 4880                       		ext.w	d0
00017740 D640                       		add.w	d0,d3
00017742 49F8 F768                  		lea	($FFFFF768).w,a4
00017746 367C FFF0                  		movea.w	#-$10,a3
0001774A 3C3C 1000                  		move.w	#$1000,d6
0001774E 7A0D                       		moveq	#$D,d5
00017750 6100 0000                  		bsr.w	FindFloor
00017754 3F01                       		move.w	d1,-(sp)
00017756 3428 000C                  		move.w	obY(a0),d2
0001775A 3628 0008                  		move.w	obX(a0),d3
0001775E 7000                       		moveq	#0,d0
00017760 1028 0016                  		move.b	obHeight(a0),d0
00017764 4880                       		ext.w	d0
00017766 9440                       		sub.w	d0,d2
00017768 0A42 000F                  		eori.w	#$F,d2
0001776C 1028 0017                  		move.b	obWidth(a0),d0
00017770 4880                       		ext.w	d0
00017772 9640                       		sub.w	d0,d3
00017774 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017778 367C FFF0                  		movea.w	#-$10,a3
0001777C 3C3C 1000                  		move.w	#$1000,d6
00017780 7A0D                       		moveq	#$D,d5
00017782 6100 0000                  		bsr.w	FindFloor
00017786 301F                       		move.w	(sp)+,d0
00017788 6100 FED2                  		bsr.w	Sonic_Angle
0001778C 4A41                       		tst.w	d1
0001778E 6700                       		beq.s	locret_14892
00017790 6A00                       		bpl.s	loc_14894
00017792 0C41 FFF2                  		cmpi.w	#-$E,d1
00017796 6D00 FE5A                  		blt.w	locret_146E6
0001779A 9368 000C                  		sub.w	d1,obY(a0)
0001779E                            
0001779E                            locret_14892:
0001779E 4E75                       		rts	
000177A0                            ; ===========================================================================
000177A0                            
000177A0                            loc_14894:
000177A0 0C41 000E                  		cmpi.w	#$E,d1
000177A4 6E00                       		bgt.s	loc_148A0
000177A6                            
000177A6                            loc_1489A:
000177A6 9368 000C                  		sub.w	d1,obY(a0)
000177AA 4E75                       		rts	
000177AC                            ; ===========================================================================
000177AC                            
000177AC                            loc_148A0:
000177AC 4A28 0038                  		tst.b	$38(a0)
000177B0 66F4                       		bne.s	loc_1489A
000177B2 08E8 0001 0022             		bset	#1,obStatus(a0)
000177B8 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177BE 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177C4 4E75                       		rts	
000177C6                            ; End of function Sonic_WalkCeiling
000177C6                            
000177C6                            ; ---------------------------------------------------------------------------
000177C6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000177C6                            ; ---------------------------------------------------------------------------
000177C6                            
000177C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177C6                            
000177C6                            
000177C6                            Sonic_WalkVertL:
000177C6 3428 000C                  		move.w	obY(a0),d2
000177CA 3628 0008                  		move.w	obX(a0),d3
000177CE 7000                       		moveq	#0,d0
000177D0 1028 0017                  		move.b	obWidth(a0),d0
000177D4 4880                       		ext.w	d0
000177D6 9440                       		sub.w	d0,d2
000177D8 1028 0016                  		move.b	obHeight(a0),d0
000177DC 4880                       		ext.w	d0
000177DE 9640                       		sub.w	d0,d3
000177E0 0A43 000F                  		eori.w	#$F,d3
000177E4 49F8 F768                  		lea	($FFFFF768).w,a4
000177E8 367C FFF0                  		movea.w	#-$10,a3
000177EC 3C3C 0800                  		move.w	#$800,d6
000177F0 7A0D                       		moveq	#$D,d5
000177F2 6100 0000                  		bsr.w	FindWall
000177F6 3F01                       		move.w	d1,-(sp)
000177F8 3428 000C                  		move.w	obY(a0),d2
000177FC 3628 0008                  		move.w	obX(a0),d3
00017800 7000                       		moveq	#0,d0
00017802 1028 0017                  		move.b	obWidth(a0),d0
00017806 4880                       		ext.w	d0
00017808 D440                       		add.w	d0,d2
0001780A 1028 0016                  		move.b	obHeight(a0),d0
0001780E 4880                       		ext.w	d0
00017810 9640                       		sub.w	d0,d3
00017812 0A43 000F                  		eori.w	#$F,d3
00017816 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001781A 367C FFF0                  		movea.w	#-$10,a3
0001781E 3C3C 0800                  		move.w	#$800,d6
00017822 7A0D                       		moveq	#$D,d5
00017824 6100 0000                  		bsr.w	FindWall
00017828 301F                       		move.w	(sp)+,d0
0001782A 6100 FE30                  		bsr.w	Sonic_Angle
0001782E 4A41                       		tst.w	d1
00017830 6700                       		beq.s	locret_14934
00017832 6A00                       		bpl.s	loc_14936
00017834 0C41 FFF2                  		cmpi.w	#-$E,d1
00017838 6D00 FDDC                  		blt.w	locret_1470A
0001783C 9368 0008                  		sub.w	d1,obX(a0)
00017840                            
00017840                            locret_14934:
00017840 4E75                       		rts	
00017842                            ; ===========================================================================
00017842                            
00017842                            loc_14936:
00017842 0C41 000E                  		cmpi.w	#$E,d1
00017846 6E00                       		bgt.s	loc_14942
00017848                            
00017848                            loc_1493C:
00017848 9368 0008                  		sub.w	d1,obX(a0)
0001784C 4E75                       		rts	
0001784E                            ; ===========================================================================
0001784E                            
0001784E                            loc_14942:
0001784E 4A28 0038                  		tst.b	$38(a0)
00017852 66F4                       		bne.s	loc_1493C
00017854 08E8 0001 0022             		bset	#1,obStatus(a0)
0001785A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017860 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017866 4E75                       		rts	
00017868                            ; End of function Sonic_WalkVertL
00017868                            ; End of function Sonic_WalkVertL
00017868                            
00017868                            		include	"_incObj\sub FindNearestTile.asm"
00017868                            ; ---------------------------------------------------------------------------
00017868                            ; Subroutine to	find which tile	the object is standing on
00017868                            
00017868                            ; input:
00017868                            ;	d2 = y-position of object's bottom edge
00017868                            ;	d3 = x-position of object
00017868                            
00017868                            ; output:
00017868                            ;	a1 = address within 256x256 mappings where object is standing
00017868                            ;	     (refers to a 16x16 tile number)
00017868                            ; ---------------------------------------------------------------------------
00017868                            
00017868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017868                            
00017868                            
00017868                            FindNearestTile:
00017868 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
0001786A E248                       		lsr.w	#1,d0
0001786C 0240 0380                  		andi.w	#$380,d0
00017870 3203                       		move.w	d3,d1		; get x-pos. of object
00017872 E049                       		lsr.w	#8,d1
00017874 0241 007F                  		andi.w	#$7F,d1
00017878 D041                       		add.w	d1,d0		; combine
0001787A 72FF                       		moveq	#-1,d1
0001787C 43F8 A400                  		lea	(v_lvllayout).w,a1
00017880 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017884 6700                       		beq.s	@blanktile	; branch if 0
00017886 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017888 5301                       		subq.b	#1,d1
0001788A 4881                       		ext.w	d1
0001788C EE59                       		ror.w	#7,d1
0001788E 3002                       		move.w	d2,d0
00017890 D040                       		add.w	d0,d0
00017892 0240 01E0                  		andi.w	#$1E0,d0
00017896 D240                       		add.w	d0,d1
00017898 3003                       		move.w	d3,d0
0001789A E648                       		lsr.w	#3,d0
0001789C 0240 001E                  		andi.w	#$1E,d0
000178A0 D240                       		add.w	d0,d1
000178A2                            
000178A2                            @blanktile:
000178A2 2241                       		movea.l	d1,a1
000178A4 4E75                       		rts	
000178A6                            ; ===========================================================================
000178A6                            
000178A6                            @specialtile:
000178A6 0241 007F                  		andi.w	#$7F,d1
000178AA 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
000178B0 6700                       		beq.s	@treatasnormal	; if not, branch
000178B2 5241                       		addq.w	#1,d1
000178B4 0C41 0029                  		cmpi.w	#$29,d1
000178B8 6600                       		bne.s	@treatasnormal
000178BA 323C 0051                  		move.w	#$51,d1
000178BE                            
000178BE                            	@treatasnormal:
000178BE 5301                       		subq.b	#1,d1
000178C0 EE59                       		ror.w	#7,d1
000178C2 3002                       		move.w	d2,d0
000178C4 D040                       		add.w	d0,d0
000178C6 0240 01E0                  		andi.w	#$1E0,d0
000178CA D240                       		add.w	d0,d1
000178CC 3003                       		move.w	d3,d0
000178CE E648                       		lsr.w	#3,d0
000178D0 0240 001E                  		andi.w	#$1E,d0
000178D4 D240                       		add.w	d0,d1
000178D6 2241                       		movea.l	d1,a1
000178D8 4E75                       		rts	
000178DA                            ; End of function FindNearestTile
000178DA                            ; End of function FindNearestTile
000178DA                            		include	"_incObj\sub FindFloor.asm"
000178DA                            ; ---------------------------------------------------------------------------
000178DA                            ; Subroutine to	find the floor
000178DA                            
000178DA                            ; input:
000178DA                            ;	d2 = y-position of object's bottom edge
000178DA                            ;	d3 = x-position of object
000178DA                            ;	d5 = bit to test for solidness
000178DA                            
000178DA                            ; output:
000178DA                            ;	d1 = distance to the floor
000178DA                            ;	a1 = address within 256x256 mappings where object is standing
000178DA                            ;	     (refers to a 16x16 tile number)
000178DA                            ;	(a4) = floor angle
000178DA                            ; ---------------------------------------------------------------------------
000178DA                            
000178DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178DA                            
000178DA                            
000178DA                            FindFloor:
000178DA 618C                       		bsr.s	FindNearestTile
000178DC 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
000178DE 3800                       		move.w	d0,d4
000178E0 0240 07FF                  		andi.w	#$7FF,d0
000178E4 6700                       		beq.s	@isblank	; branch if tile is blank
000178E6 0B04                       		btst	d5,d4		; is the tile solid?
000178E8 6600                       		bne.s	@issolid	; if yes, branch
000178EA                            
000178EA                            @isblank:
000178EA D44B                       		add.w	a3,d2
000178EC 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
000178F0 944B                       		sub.w	a3,d2
000178F2 0641 0010                  		addi.w	#$10,d1		; return distance to floor
000178F6 4E75                       		rts	
000178F8                            ; ===========================================================================
000178F8                            
000178F8                            @issolid:
000178F8 2478 F796                  		movea.l	(v_collindex).w,a2
000178FC 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017900 0240 00FF                  		andi.w	#$FF,d0
00017904 67E4                       		beq.s	@isblank	; branch if 0
00017906 45F9 0000 0000             		lea	(AngleMap).l,a2
0001790C 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017910 E948                       		lsl.w	#4,d0
00017912 3203                       		move.w	d3,d1		; get x-pos. of object
00017914 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017918 6700                       		beq.s	@noflip		; if not, branch
0001791A 4641                       		not.w	d1
0001791C 4414                       		neg.b	(a4)
0001791E                            
0001791E                            	@noflip:
0001791E 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017922 6700                       		beq.s	@noflip2	; if not, branch
00017924 0614 0040                  		addi.b	#$40,(a4)
00017928 4414                       		neg.b	(a4)
0001792A 0414 0040                  		subi.b	#$40,(a4)
0001792E                            
0001792E                            	@noflip2:
0001792E 0241 000F                  		andi.w	#$F,d1
00017932 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017934 45F9 0000 0000             		lea	(CollArray1).l,a2
0001793A 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
0001793E 4880                       		ext.w	d0
00017940 BD44                       		eor.w	d6,d4
00017942 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017946 6700                       		beq.s	@noflip3	; if not, branch
00017948 4440                       		neg.w	d0
0001794A                            
0001794A                            	@noflip3:
0001794A 4A40                       		tst.w	d0
0001794C 679C                       		beq.s	@isblank	; branch if height is 0
0001794E 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017950 0C00 0010                  		cmpi.b	#$10,d0
00017954 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017956 3202                       		move.w	d2,d1		; get y-pos. of object
00017958 0241 000F                  		andi.w	#$F,d1
0001795C D041                       		add.w	d1,d0
0001795E 323C 000F                  		move.w	#$F,d1
00017962 9240                       		sub.w	d0,d1		; return distance to floor
00017964 4E75                       		rts	
00017966                            ; ===========================================================================
00017966                            
00017966                            @negfloor:
00017966 3202                       		move.w	d2,d1
00017968 0241 000F                  		andi.w	#$F,d1
0001796C D041                       		add.w	d1,d0
0001796E 6A00 FF7A                  		bpl.w	@isblank
00017972                            
00017972                            @maxfloor:
00017972 944B                       		sub.w	a3,d2
00017974 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017978 D44B                       		add.w	a3,d2
0001797A 0441 0010                  		subi.w	#$10,d1		; return distance to floor
0001797E 4E75                       		rts	
00017980                            ; End of function FindFloor
00017980                            
00017980                            
00017980                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017980                            
00017980                            
00017980                            FindFloor2:
00017980 6100 FEE6                  		bsr.w	FindNearestTile
00017984 3011                       		move.w	(a1),d0
00017986 3800                       		move.w	d0,d4
00017988 0240 07FF                  		andi.w	#$7FF,d0
0001798C 6700                       		beq.s	@isblank2
0001798E 0B04                       		btst	d5,d4
00017990 6600                       		bne.s	@issolid
00017992                            
00017992                            @isblank2:
00017992 323C 000F                  		move.w	#$F,d1
00017996 3002                       		move.w	d2,d0
00017998 0240 000F                  		andi.w	#$F,d0
0001799C 9240                       		sub.w	d0,d1
0001799E 4E75                       		rts	
000179A0                            ; ===========================================================================
000179A0                            
000179A0                            @issolid:
000179A0 2478 F796                  		movea.l	(v_collindex).w,a2
000179A4 1032 0000                  		move.b	(a2,d0.w),d0
000179A8 0240 00FF                  		andi.w	#$FF,d0
000179AC 67E4                       		beq.s	@isblank2
000179AE 45F9 0000 0000             		lea	(AngleMap).l,a2
000179B4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000179B8 E948                       		lsl.w	#4,d0
000179BA 3203                       		move.w	d3,d1
000179BC 0804 000B                  		btst	#$B,d4
000179C0 6700                       		beq.s	@noflip
000179C2 4641                       		not.w	d1
000179C4 4414                       		neg.b	(a4)
000179C6                            
000179C6                            	@noflip:
000179C6 0804 000C                  		btst	#$C,d4
000179CA 6700                       		beq.s	@noflip2
000179CC 0614 0040                  		addi.b	#$40,(a4)
000179D0 4414                       		neg.b	(a4)
000179D2 0414 0040                  		subi.b	#$40,(a4)
000179D6                            
000179D6                            	@noflip2:
000179D6 0241 000F                  		andi.w	#$F,d1
000179DA D240                       		add.w	d0,d1
000179DC 45F9 0000 0000             		lea	(CollArray1).l,a2
000179E2 1032 1000                  		move.b	(a2,d1.w),d0
000179E6 4880                       		ext.w	d0
000179E8 BD44                       		eor.w	d6,d4
000179EA 0804 000C                  		btst	#$C,d4
000179EE 6700                       		beq.s	@noflip3
000179F0 4440                       		neg.w	d0
000179F2                            
000179F2                            	@noflip3:
000179F2 4A40                       		tst.w	d0
000179F4 679C                       		beq.s	@isblank2
000179F6 6B00                       		bmi.s	@negfloor
000179F8 3202                       		move.w	d2,d1
000179FA 0241 000F                  		andi.w	#$F,d1
000179FE D041                       		add.w	d1,d0
00017A00 323C 000F                  		move.w	#$F,d1
00017A04 9240                       		sub.w	d0,d1
00017A06 4E75                       		rts	
00017A08                            ; ===========================================================================
00017A08                            
00017A08                            @negfloor:
00017A08 3202                       		move.w	d2,d1
00017A0A 0241 000F                  		andi.w	#$F,d1
00017A0E D041                       		add.w	d1,d0
00017A10 6A00 FF80                  		bpl.w	@isblank2
00017A14 4641                       		not.w	d1
00017A16 4E75                       		rts	
00017A18                            ; End of function FindFloor2
00017A18                            ; End of function FindFloor2
00017A18                            		include	"_incObj\sub FindWall.asm"
00017A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A18                            
00017A18                            
00017A18                            FindWall:
00017A18 6100 FE4E                  		bsr.w	FindNearestTile
00017A1C 3011                       		move.w	(a1),d0
00017A1E 3800                       		move.w	d0,d4
00017A20 0240 07FF                  		andi.w	#$7FF,d0
00017A24 6700                       		beq.s	loc_14B1E
00017A26 0B04                       		btst	d5,d4
00017A28 6600                       		bne.s	loc_14B2C
00017A2A                            
00017A2A                            loc_14B1E:
00017A2A D64B                       		add.w	a3,d3
00017A2C 6100 0000                  		bsr.w	FindWall2
00017A30 964B                       		sub.w	a3,d3
00017A32 0641 0010                  		addi.w	#$10,d1
00017A36 4E75                       		rts	
00017A38                            ; ===========================================================================
00017A38                            
00017A38                            loc_14B2C:
00017A38 2478 F796                  		movea.l	(v_collindex).w,a2
00017A3C 1032 0000                  		move.b	(a2,d0.w),d0
00017A40 0240 00FF                  		andi.w	#$FF,d0
00017A44 67E4                       		beq.s	loc_14B1E
00017A46 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A4C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017A50 E948                       		lsl.w	#4,d0
00017A52 3202                       		move.w	d2,d1
00017A54 0804 000C                  		btst	#$C,d4
00017A58 6700                       		beq.s	loc_14B5A
00017A5A 4641                       		not.w	d1
00017A5C 0614 0040                  		addi.b	#$40,(a4)
00017A60 4414                       		neg.b	(a4)
00017A62 0414 0040                  		subi.b	#$40,(a4)
00017A66                            
00017A66                            loc_14B5A:
00017A66 0804 000B                  		btst	#$B,d4
00017A6A 6700                       		beq.s	loc_14B62
00017A6C 4414                       		neg.b	(a4)
00017A6E                            
00017A6E                            loc_14B62:
00017A6E 0241 000F                  		andi.w	#$F,d1
00017A72 D240                       		add.w	d0,d1
00017A74 45F9 0000 0000             		lea	(CollArray2).l,a2
00017A7A 1032 1000                  		move.b	(a2,d1.w),d0
00017A7E 4880                       		ext.w	d0
00017A80 BD44                       		eor.w	d6,d4
00017A82 0804 000B                  		btst	#$B,d4
00017A86 6700                       		beq.s	loc_14B7E
00017A88 4440                       		neg.w	d0
00017A8A                            
00017A8A                            loc_14B7E:
00017A8A 4A40                       		tst.w	d0
00017A8C 679C                       		beq.s	loc_14B1E
00017A8E 6B00                       		bmi.s	loc_14B9A
00017A90 0C00 0010                  		cmpi.b	#$10,d0
00017A94 6700                       		beq.s	loc_14BA6
00017A96 3203                       		move.w	d3,d1
00017A98 0241 000F                  		andi.w	#$F,d1
00017A9C D041                       		add.w	d1,d0
00017A9E 323C 000F                  		move.w	#$F,d1
00017AA2 9240                       		sub.w	d0,d1
00017AA4 4E75                       		rts	
00017AA6                            ; ===========================================================================
00017AA6                            
00017AA6                            loc_14B9A:
00017AA6 3203                       		move.w	d3,d1
00017AA8 0241 000F                  		andi.w	#$F,d1
00017AAC D041                       		add.w	d1,d0
00017AAE 6A00 FF7A                  		bpl.w	loc_14B1E
00017AB2                            
00017AB2                            loc_14BA6:
00017AB2 964B                       		sub.w	a3,d3
00017AB4 6100 0000                  		bsr.w	FindWall2
00017AB8 D64B                       		add.w	a3,d3
00017ABA 0441 0010                  		subi.w	#$10,d1
00017ABE 4E75                       		rts	
00017AC0                            ; End of function FindWall
00017AC0                            
00017AC0                            
00017AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AC0                            
00017AC0                            
00017AC0                            FindWall2:
00017AC0 6100 FDA6                  		bsr.w	FindNearestTile
00017AC4 3011                       		move.w	(a1),d0
00017AC6 3800                       		move.w	d0,d4
00017AC8 0240 07FF                  		andi.w	#$7FF,d0
00017ACC 6700                       		beq.s	loc_14BC6
00017ACE 0B04                       		btst	d5,d4
00017AD0 6600                       		bne.s	loc_14BD4
00017AD2                            
00017AD2                            loc_14BC6:
00017AD2 323C 000F                  		move.w	#$F,d1
00017AD6 3003                       		move.w	d3,d0
00017AD8 0240 000F                  		andi.w	#$F,d0
00017ADC 9240                       		sub.w	d0,d1
00017ADE 4E75                       		rts	
00017AE0                            ; ===========================================================================
00017AE0                            
00017AE0                            loc_14BD4:
00017AE0 2478 F796                  		movea.l	(v_collindex).w,a2
00017AE4 1032 0000                  		move.b	(a2,d0.w),d0
00017AE8 0240 00FF                  		andi.w	#$FF,d0
00017AEC 67E4                       		beq.s	loc_14BC6
00017AEE 45F9 0000 0000             		lea	(AngleMap).l,a2
00017AF4 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017AF8 E948                       		lsl.w	#4,d0
00017AFA 3202                       		move.w	d2,d1
00017AFC 0804 000C                  		btst	#$C,d4
00017B00 6700                       		beq.s	loc_14C02
00017B02 4641                       		not.w	d1
00017B04 0614 0040                  		addi.b	#$40,(a4)
00017B08 4414                       		neg.b	(a4)
00017B0A 0414 0040                  		subi.b	#$40,(a4)
00017B0E                            
00017B0E                            loc_14C02:
00017B0E 0804 000B                  		btst	#$B,d4
00017B12 6700                       		beq.s	loc_14C0A
00017B14 4414                       		neg.b	(a4)
00017B16                            
00017B16                            loc_14C0A:
00017B16 0241 000F                  		andi.w	#$F,d1
00017B1A D240                       		add.w	d0,d1
00017B1C 45F9 0000 0000             		lea	(CollArray2).l,a2
00017B22 1032 1000                  		move.b	(a2,d1.w),d0
00017B26 4880                       		ext.w	d0
00017B28 BD44                       		eor.w	d6,d4
00017B2A 0804 000B                  		btst	#$B,d4
00017B2E 6700                       		beq.s	loc_14C26
00017B30 4440                       		neg.w	d0
00017B32                            
00017B32                            loc_14C26:
00017B32 4A40                       		tst.w	d0
00017B34 679C                       		beq.s	loc_14BC6
00017B36 6B00                       		bmi.s	loc_14C3C
00017B38 3203                       		move.w	d3,d1
00017B3A 0241 000F                  		andi.w	#$F,d1
00017B3E D041                       		add.w	d1,d0
00017B40 323C 000F                  		move.w	#$F,d1
00017B44 9240                       		sub.w	d0,d1
00017B46 4E75                       		rts	
00017B48                            ; ===========================================================================
00017B48                            
00017B48                            loc_14C3C:
00017B48 3203                       		move.w	d3,d1
00017B4A 0241 000F                  		andi.w	#$F,d1
00017B4E D041                       		add.w	d1,d0
00017B50 6A00 FF80                  		bpl.w	loc_14BC6
00017B54 4641                       		not.w	d1
00017B56 4E75                       		rts	
00017B58                            ; End of function FindWall2
00017B58                            ; End of function FindWall2
00017B58                            
00017B58                            ; ---------------------------------------------------------------------------
00017B58                            ; Unused floor/wall subroutine - logs something	to do with collision
00017B58                            ; ---------------------------------------------------------------------------
00017B58                            
00017B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B58                            
00017B58                            
00017B58                            FloorLog_Unk:
00017B58 4E75                       		rts	
00017B5A                            
00017B5A 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B60 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B66 363C 00FF                  		move.w	#$FF,d3
00017B6A                            
00017B6A                            loc_14C5E:
00017B6A 7A10                       		moveq	#$10,d5
00017B6C 343C 000F                  		move.w	#$F,d2
00017B70                            
00017B70                            loc_14C64:
00017B70 7800                       		moveq	#0,d4
00017B72 323C 000F                  		move.w	#$F,d1
00017B76                            
00017B76                            loc_14C6A:
00017B76 3019                       		move.w	(a1)+,d0
00017B78 EAA8                       		lsr.l	d5,d0
00017B7A D944                       		addx.w	d4,d4
00017B7C 51C9 FFF8                  		dbf	d1,loc_14C6A
00017B80                            
00017B80 34C4                       		move.w	d4,(a2)+
00017B82 92FC 0020                  		suba.w	#$20,a1
00017B86 5345                       		subq.w	#1,d5
00017B88 51CA FFE6                  		dbf	d2,loc_14C64
00017B8C                            
00017B8C D2FC 0020                  		adda.w	#$20,a1
00017B90 51CB FFD8                  		dbf	d3,loc_14C5E
00017B94                            
00017B94 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B9A 45F9 0000 0000             		lea	(CollArray2).l,a2
00017BA0 6100                       		bsr.s	FloorLog_Unk2
00017BA2 43F9 0000 0000             		lea	(CollArray1).l,a1
00017BA8 45F9 0000 0000             		lea	(CollArray1).l,a2
00017BAE                            
00017BAE                            ; End of function FloorLog_Unk
00017BAE                            
00017BAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BAE                            
00017BAE                            
00017BAE                            FloorLog_Unk2:
00017BAE 363C 0FFF                  		move.w	#$FFF,d3
00017BB2                            
00017BB2                            loc_14CA6:
00017BB2 7400                       		moveq	#0,d2
00017BB4 323C 000F                  		move.w	#$F,d1
00017BB8 3019                       		move.w	(a1)+,d0
00017BBA 6700                       		beq.s	loc_14CD4
00017BBC 6B00                       		bmi.s	loc_14CBE
00017BBE                            
00017BBE                            loc_14CB2:
00017BBE E248                       		lsr.w	#1,d0
00017BC0 6400                       		bhs.s	loc_14CB8
00017BC2 5202                       		addq.b	#1,d2
00017BC4                            
00017BC4                            loc_14CB8:
00017BC4 51C9 FFF8                  		dbf	d1,loc_14CB2
00017BC8                            
00017BC8 6000                       		bra.s	loc_14CD6
00017BCA                            ; ===========================================================================
00017BCA                            
00017BCA                            loc_14CBE:
00017BCA 0C40 FFFF                  		cmpi.w	#-1,d0
00017BCE 6700                       		beq.s	loc_14CD0
00017BD0                            
00017BD0                            loc_14CC4:
00017BD0 E348                       		lsl.w	#1,d0
00017BD2 6400                       		bhs.s	loc_14CCA
00017BD4 5302                       		subq.b	#1,d2
00017BD6                            
00017BD6                            loc_14CCA:
00017BD6 51C9 FFF8                  		dbf	d1,loc_14CC4
00017BDA                            
00017BDA 6000                       		bra.s	loc_14CD6
00017BDC                            ; ===========================================================================
00017BDC                            
00017BDC                            loc_14CD0:
00017BDC 303C 0010                  		move.w	#$10,d0
00017BE0                            
00017BE0                            loc_14CD4:
00017BE0 3400                       		move.w	d0,d2
00017BE2                            
00017BE2                            loc_14CD6:
00017BE2 14C2                       		move.b	d2,(a2)+
00017BE4 51CB FFCC                  		dbf	d3,loc_14CA6
00017BE8                            
00017BE8 4E75                       		rts	
00017BEA                            
00017BEA                            ; End of function FloorLog_Unk2
00017BEA                            
00017BEA                            
00017BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BEA                            
00017BEA                            
00017BEA                            Sonic_WalkSpeed:
00017BEA 2628 0008                  		move.l	obX(a0),d3
00017BEE 2428 000C                  		move.l	obY(a0),d2
00017BF2 3228 0010                  		move.w	obVelX(a0),d1
00017BF6 48C1                       		ext.l	d1
00017BF8 E181                       		asl.l	#8,d1
00017BFA D681                       		add.l	d1,d3
00017BFC 3228 0012                  		move.w	obVelY(a0),d1
00017C00 48C1                       		ext.l	d1
00017C02 E181                       		asl.l	#8,d1
00017C04 D481                       		add.l	d1,d2
00017C06 4842                       		swap	d2
00017C08 4843                       		swap	d3
00017C0A 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017C0E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017C12 1200                       		move.b	d0,d1
00017C14 0600 0020                  		addi.b	#$20,d0
00017C18 6A00                       		bpl.s	loc_14D1A
00017C1A 1001                       		move.b	d1,d0
00017C1C 6A00                       		bpl.s	loc_14D14
00017C1E 5300                       		subq.b	#1,d0
00017C20                            
00017C20                            loc_14D14:
00017C20 0600 0020                  		addi.b	#$20,d0
00017C24 6000                       		bra.s	loc_14D24
00017C26                            ; ===========================================================================
00017C26                            
00017C26                            loc_14D1A:
00017C26 1001                       		move.b	d1,d0
00017C28 6A00                       		bpl.s	loc_14D20
00017C2A 5200                       		addq.b	#1,d0
00017C2C                            
00017C2C                            loc_14D20:
00017C2C 0600 001F                  		addi.b	#$1F,d0
00017C30                            
00017C30                            loc_14D24:
00017C30 0200 00C0                  		andi.b	#$C0,d0
00017C34 6700 0000                  		beq.w	loc_14DF0
00017C38 0C00 0080                  		cmpi.b	#$80,d0
00017C3C 6700 0000                  		beq.w	loc_14F7C
00017C40 0201 0038                  		andi.b	#$38,d1
00017C44 6600                       		bne.s	loc_14D3C
00017C46 5042                       		addq.w	#8,d2
00017C48                            
00017C48                            loc_14D3C:
00017C48 0C00 0040                  		cmpi.b	#$40,d0
00017C4C 6700 0000                  		beq.w	loc_1504A
00017C50 6000 0000                  		bra.w	loc_14EBC
00017C54                            
00017C54                            ; End of function Sonic_WalkSpeed
00017C54                            
00017C54                            
00017C54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C54                            
00017C54                            
00017C54                            sub_14D48:
00017C54 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017C58 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017C5C 0600 0020                  		addi.b	#$20,d0
00017C60 0200 00C0                  		andi.b	#$C0,d0
00017C64 0C00 0040                  		cmpi.b	#$40,d0
00017C68 6700 0000                  		beq.w	loc_14FD6
00017C6C 0C00 0080                  		cmpi.b	#$80,d0
00017C70 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017C74 0C00 00C0                  		cmpi.b	#$C0,d0
00017C78 6700 0000                  		beq.w	sub_14E50
00017C7C                            
00017C7C                            ; End of function sub_14D48
00017C7C                            
00017C7C                            ; ---------------------------------------------------------------------------
00017C7C                            ; Subroutine to	make Sonic land	on the floor after jumping
00017C7C                            ; ---------------------------------------------------------------------------
00017C7C                            
00017C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C7C                            
00017C7C                            
00017C7C                            Sonic_HitFloor:
00017C7C 3428 000C                  		move.w	obY(a0),d2
00017C80 3628 0008                  		move.w	obX(a0),d3
00017C84 7000                       		moveq	#0,d0
00017C86 1028 0016                  		move.b	obHeight(a0),d0
00017C8A 4880                       		ext.w	d0
00017C8C D440                       		add.w	d0,d2
00017C8E 1028 0017                  		move.b	obWidth(a0),d0
00017C92 4880                       		ext.w	d0
00017C94 D640                       		add.w	d0,d3
00017C96 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C9A 367C 0010                  		movea.w	#$10,a3
00017C9E 3C3C 0000                  		move.w	#0,d6
00017CA2 7A0D                       		moveq	#$D,d5
00017CA4 6100 FC34                  		bsr.w	FindFloor
00017CA8 3F01                       		move.w	d1,-(sp)
00017CAA 3428 000C                  		move.w	obY(a0),d2
00017CAE 3628 0008                  		move.w	obX(a0),d3
00017CB2 7000                       		moveq	#0,d0
00017CB4 1028 0016                  		move.b	obHeight(a0),d0
00017CB8 4880                       		ext.w	d0
00017CBA D440                       		add.w	d0,d2
00017CBC 1028 0017                  		move.b	obWidth(a0),d0
00017CC0 4880                       		ext.w	d0
00017CC2 9640                       		sub.w	d0,d3
00017CC4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017CC8 367C 0010                  		movea.w	#$10,a3
00017CCC 3C3C 0000                  		move.w	#0,d6
00017CD0 7A0D                       		moveq	#$D,d5
00017CD2 6100 FC06                  		bsr.w	FindFloor
00017CD6 301F                       		move.w	(sp)+,d0
00017CD8 143C 0000                  		move.b	#0,d2
00017CDC                            
00017CDC                            loc_14DD0:
00017CDC 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017CE0 B240                       		cmp.w	d0,d1
00017CE2 6F00                       		ble.s	loc_14DDE
00017CE4 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017CE8 C141                       		exg	d0,d1
00017CEA                            
00017CEA                            loc_14DDE:
00017CEA 0803 0000                  		btst	#0,d3
00017CEE 6700                       		beq.s	locret_14DE6
00017CF0 1602                       		move.b	d2,d3
00017CF2                            
00017CF2                            locret_14DE6:
00017CF2 4E75                       		rts	
00017CF4                            
00017CF4                            ; End of function Sonic_HitFloor
00017CF4                            
00017CF4                            ; ===========================================================================
00017CF4 3428 000C                  		move.w	obY(a0),d2
00017CF8 3628 0008                  		move.w	obX(a0),d3
00017CFC                            
00017CFC                            loc_14DF0:
00017CFC 0642 000A                  		addi.w	#$A,d2
00017D00 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D04 367C 0010                  		movea.w	#$10,a3
00017D08 3C3C 0000                  		move.w	#0,d6
00017D0C 7A0E                       		moveq	#$E,d5
00017D0E 6100 FBCA                  		bsr.w	FindFloor
00017D12 143C 0000                  		move.b	#0,d2
00017D16                            
00017D16                            loc_14E0A:
00017D16 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D1A 0803 0000                  		btst	#0,d3
00017D1E 6700                       		beq.s	locret_14E16
00017D20 1602                       		move.b	d2,d3
00017D22                            
00017D22                            locret_14E16:
00017D22 4E75                       		rts	
00017D24                            
00017D24                            		include	"_incObj\sub ObjFloorDist.asm"
00017D24                            ; ---------------------------------------------------------------------------
00017D24                            ; Subroutine to find the distance of an object to the floor
00017D24                            
00017D24                            ; input:
00017D24                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017D24                            
00017D24                            ; output:
00017D24                            ;	d1 = distance to the floor
00017D24                            ;	d3 = floor angle
00017D24                            ;	a1 = address within 256x256 mappings where object is standing
00017D24                            ;	     (refers to a 16x16 tile number)
00017D24                            ;	(a4) = floor angle
00017D24                            ; ---------------------------------------------------------------------------
00017D24                            
00017D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D24                            
00017D24                            
00017D24                            ObjFloorDist:
00017D24 3628 0008                  		move.w	obX(a0),d3
00017D28                            
00017D28                            
00017D28                            ObjFloorDist2:
00017D28 3428 000C                  		move.w	obY(a0),d2
00017D2C 7000                       		moveq	#0,d0
00017D2E 1028 0016                  		move.b	obHeight(a0),d0
00017D32 4880                       		ext.w	d0
00017D34 D440                       		add.w	d0,d2
00017D36 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D3A 18BC 0000                  		move.b	#0,(a4)
00017D3E 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017D42 3C3C 0000                  		move.w	#0,d6
00017D46 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017D48 6100 FB90                  		bsr.w	FindFloor
00017D4C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D50 0803 0000                  		btst	#0,d3
00017D54 6700                       		beq.s	locret_14E4E
00017D56 163C 0000                  		move.b	#0,d3
00017D5A                            
00017D5A                            	locret_14E4E:
00017D5A 4E75                       		rts	
00017D5C                            
00017D5C                            ; End of function ObjFloorDist2
00017D5C                            ; End of function ObjFloorDist2
00017D5C                            
00017D5C                            
00017D5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D5C                            
00017D5C                            
00017D5C                            sub_14E50:
00017D5C 3428 000C                  		move.w	obY(a0),d2
00017D60 3628 0008                  		move.w	obX(a0),d3
00017D64 7000                       		moveq	#0,d0
00017D66 1028 0017                  		move.b	obWidth(a0),d0
00017D6A 4880                       		ext.w	d0
00017D6C 9440                       		sub.w	d0,d2
00017D6E 1028 0016                  		move.b	obHeight(a0),d0
00017D72 4880                       		ext.w	d0
00017D74 D640                       		add.w	d0,d3
00017D76 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D7A 367C 0010                  		movea.w	#$10,a3
00017D7E 3C3C 0000                  		move.w	#0,d6
00017D82 7A0E                       		moveq	#$E,d5
00017D84 6100 FC92                  		bsr.w	FindWall
00017D88 3F01                       		move.w	d1,-(sp)
00017D8A 3428 000C                  		move.w	obY(a0),d2
00017D8E 3628 0008                  		move.w	obX(a0),d3
00017D92 7000                       		moveq	#0,d0
00017D94 1028 0017                  		move.b	obWidth(a0),d0
00017D98 4880                       		ext.w	d0
00017D9A D440                       		add.w	d0,d2
00017D9C 1028 0016                  		move.b	obHeight(a0),d0
00017DA0 4880                       		ext.w	d0
00017DA2 D640                       		add.w	d0,d3
00017DA4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017DA8 367C 0010                  		movea.w	#$10,a3
00017DAC 3C3C 0000                  		move.w	#0,d6
00017DB0 7A0E                       		moveq	#$E,d5
00017DB2 6100 FC64                  		bsr.w	FindWall
00017DB6 301F                       		move.w	(sp)+,d0
00017DB8 143C 00C0                  		move.b	#-$40,d2
00017DBC 6000 FF1E                  		bra.w	loc_14DD0
00017DC0                            
00017DC0                            ; End of function sub_14E50
00017DC0                            
00017DC0                            
00017DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DC0                            
00017DC0                            
00017DC0                            sub_14EB4:
00017DC0 3428 000C                  		move.w	obY(a0),d2
00017DC4 3628 0008                  		move.w	obX(a0),d3
00017DC8                            
00017DC8                            loc_14EBC:
00017DC8 0643 000A                  		addi.w	#$A,d3
00017DCC 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DD0 367C 0010                  		movea.w	#$10,a3
00017DD4 3C3C 0000                  		move.w	#0,d6
00017DD8 7A0E                       		moveq	#$E,d5
00017DDA 6100 FC3C                  		bsr.w	FindWall
00017DDE 143C 00C0                  		move.b	#-$40,d2
00017DE2 6000 FF32                  		bra.w	loc_14E0A
00017DE6                            
00017DE6                            ; End of function sub_14EB4
00017DE6                            
00017DE6                            ; ---------------------------------------------------------------------------
00017DE6                            ; Subroutine to	detect when an object hits a wall to its right
00017DE6                            ; ---------------------------------------------------------------------------
00017DE6                            
00017DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DE6                            
00017DE6                            
00017DE6                            ObjHitWallRight:
00017DE6 D668 0008                  		add.w	obX(a0),d3
00017DEA 3428 000C                  		move.w	obY(a0),d2
00017DEE 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DF2 18BC 0000                  		move.b	#0,(a4)
00017DF6 367C 0010                  		movea.w	#$10,a3
00017DFA 3C3C 0000                  		move.w	#0,d6
00017DFE 7A0E                       		moveq	#$E,d5
00017E00 6100 FC16                  		bsr.w	FindWall
00017E04 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017E08 0803 0000                  		btst	#0,d3
00017E0C 6700                       		beq.s	locret_14F06
00017E0E 163C 00C0                  		move.b	#-$40,d3
00017E12                            
00017E12                            locret_14F06:
00017E12 4E75                       		rts	
00017E14                            
00017E14                            ; End of function ObjHitWallRight
00017E14                            
00017E14                            ; ---------------------------------------------------------------------------
00017E14                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017E14                            ; touches them
00017E14                            ; ---------------------------------------------------------------------------
00017E14                            
00017E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E14                            
00017E14                            
00017E14                            Sonic_DontRunOnWalls:
00017E14 3428 000C                  		move.w	obY(a0),d2
00017E18 3628 0008                  		move.w	obX(a0),d3
00017E1C 7000                       		moveq	#0,d0
00017E1E 1028 0016                  		move.b	obHeight(a0),d0
00017E22 4880                       		ext.w	d0
00017E24 9440                       		sub.w	d0,d2
00017E26 0A42 000F                  		eori.w	#$F,d2
00017E2A 1028 0017                  		move.b	obWidth(a0),d0
00017E2E 4880                       		ext.w	d0
00017E30 D640                       		add.w	d0,d3
00017E32 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E36 367C FFF0                  		movea.w	#-$10,a3
00017E3A 3C3C 1000                  		move.w	#$1000,d6
00017E3E 7A0E                       		moveq	#$E,d5
00017E40 6100 FA98                  		bsr.w	FindFloor
00017E44 3F01                       		move.w	d1,-(sp)
00017E46 3428 000C                  		move.w	obY(a0),d2
00017E4A 3628 0008                  		move.w	obX(a0),d3
00017E4E 7000                       		moveq	#0,d0
00017E50 1028 0016                  		move.b	obHeight(a0),d0
00017E54 4880                       		ext.w	d0
00017E56 9440                       		sub.w	d0,d2
00017E58 0A42 000F                  		eori.w	#$F,d2
00017E5C 1028 0017                  		move.b	obWidth(a0),d0
00017E60 4880                       		ext.w	d0
00017E62 9640                       		sub.w	d0,d3
00017E64 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E68 367C FFF0                  		movea.w	#-$10,a3
00017E6C 3C3C 1000                  		move.w	#$1000,d6
00017E70 7A0E                       		moveq	#$E,d5
00017E72 6100 FA66                  		bsr.w	FindFloor
00017E76 301F                       		move.w	(sp)+,d0
00017E78 143C 0080                  		move.b	#-$80,d2
00017E7C 6000 FE5E                  		bra.w	loc_14DD0
00017E80                            ; End of function Sonic_DontRunOnWalls
00017E80                            
00017E80                            ; ===========================================================================
00017E80 3428 000C                  		move.w	obY(a0),d2
00017E84 3628 0008                  		move.w	obX(a0),d3
00017E88                            
00017E88                            loc_14F7C:
00017E88 0442 000A                  		subi.w	#$A,d2
00017E8C 0A42 000F                  		eori.w	#$F,d2
00017E90 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E94 367C FFF0                  		movea.w	#-$10,a3
00017E98 3C3C 1000                  		move.w	#$1000,d6
00017E9C 7A0E                       		moveq	#$E,d5
00017E9E 6100 FA3A                  		bsr.w	FindFloor
00017EA2 143C 0080                  		move.b	#-$80,d2
00017EA6 6000 FE6E                  		bra.w	loc_14E0A
00017EAA                            
00017EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EAA                            
00017EAA                            
00017EAA                            ObjHitCeiling:
00017EAA 3428 000C                  		move.w	obY(a0),d2
00017EAE 3628 0008                  		move.w	obX(a0),d3
00017EB2 7000                       		moveq	#0,d0
00017EB4 1028 0016                  		move.b	obHeight(a0),d0
00017EB8 4880                       		ext.w	d0
00017EBA 9440                       		sub.w	d0,d2
00017EBC 0A42 000F                  		eori.w	#$F,d2
00017EC0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EC4 367C FFF0                  		movea.w	#-$10,a3
00017EC8 3C3C 1000                  		move.w	#$1000,d6
00017ECC 7A0E                       		moveq	#$E,d5
00017ECE 6100 FA0A                  		bsr.w	FindFloor
00017ED2 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017ED6 0803 0000                  		btst	#0,d3
00017EDA 6700                       		beq.s	locret_14FD4
00017EDC 163C 0080                  		move.b	#-$80,d3
00017EE0                            
00017EE0                            locret_14FD4:
00017EE0 4E75                       		rts	
00017EE2                            ; End of function ObjHitCeiling
00017EE2                            
00017EE2                            ; ===========================================================================
00017EE2                            
00017EE2                            loc_14FD6:
00017EE2 3428 000C                  		move.w	obY(a0),d2
00017EE6 3628 0008                  		move.w	obX(a0),d3
00017EEA 7000                       		moveq	#0,d0
00017EEC 1028 0017                  		move.b	obWidth(a0),d0
00017EF0 4880                       		ext.w	d0
00017EF2 9440                       		sub.w	d0,d2
00017EF4 1028 0016                  		move.b	obHeight(a0),d0
00017EF8 4880                       		ext.w	d0
00017EFA 9640                       		sub.w	d0,d3
00017EFC 0A43 000F                  		eori.w	#$F,d3
00017F00 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F04 367C FFF0                  		movea.w	#-$10,a3
00017F08 3C3C 0800                  		move.w	#$800,d6
00017F0C 7A0E                       		moveq	#$E,d5
00017F0E 6100 FB08                  		bsr.w	FindWall
00017F12 3F01                       		move.w	d1,-(sp)
00017F14 3428 000C                  		move.w	obY(a0),d2
00017F18 3628 0008                  		move.w	obX(a0),d3
00017F1C 7000                       		moveq	#0,d0
00017F1E 1028 0017                  		move.b	obWidth(a0),d0
00017F22 4880                       		ext.w	d0
00017F24 D440                       		add.w	d0,d2
00017F26 1028 0016                  		move.b	obHeight(a0),d0
00017F2A 4880                       		ext.w	d0
00017F2C 9640                       		sub.w	d0,d3
00017F2E 0A43 000F                  		eori.w	#$F,d3
00017F32 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F36 367C FFF0                  		movea.w	#-$10,a3
00017F3A 3C3C 0800                  		move.w	#$800,d6
00017F3E 7A0E                       		moveq	#$E,d5
00017F40 6100 FAD6                  		bsr.w	FindWall
00017F44 301F                       		move.w	(sp)+,d0
00017F46 143C 0040                  		move.b	#$40,d2
00017F4A 6000 FD90                  		bra.w	loc_14DD0
00017F4E                            
00017F4E                            ; ---------------------------------------------------------------------------
00017F4E                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017F4E                            ; ---------------------------------------------------------------------------
00017F4E                            
00017F4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F4E                            
00017F4E                            
00017F4E                            Sonic_HitWall:
00017F4E 3428 000C                  		move.w	obY(a0),d2
00017F52 3628 0008                  		move.w	obX(a0),d3
00017F56                            
00017F56                            loc_1504A:
00017F56 0443 000A                  		subi.w	#$A,d3
00017F5A 0A43 000F                  		eori.w	#$F,d3
00017F5E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F62 367C FFF0                  		movea.w	#-$10,a3
00017F66 3C3C 0800                  		move.w	#$800,d6
00017F6A 7A0E                       		moveq	#$E,d5
00017F6C 6100 FAAA                  		bsr.w	FindWall
00017F70 143C 0040                  		move.b	#$40,d2
00017F74 6000 FDA0                  		bra.w	loc_14E0A
00017F78                            ; End of function Sonic_HitWall
00017F78                            
00017F78                            ; ---------------------------------------------------------------------------
00017F78                            ; Subroutine to	detect when an object hits a wall to its left
00017F78                            ; ---------------------------------------------------------------------------
00017F78                            
00017F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F78                            
00017F78                            
00017F78                            ObjHitWallLeft:
00017F78 D668 0008                  		add.w	obX(a0),d3
00017F7C 3428 000C                  		move.w	obY(a0),d2
00017F80                            		; Engine bug: colliding with left walls is erratic with this function.
00017F80                            		; The cause is this: a missing instruction to flip collision on the found
00017F80                            		; 16x16 block; this one:
00017F80                            		;eori.w	#$F,d3
00017F80 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F84 18BC 0000                  		move.b	#0,(a4)
00017F88 367C FFF0                  		movea.w	#-$10,a3
00017F8C 3C3C 0800                  		move.w	#$800,d6
00017F90 7A0E                       		moveq	#$E,d5
00017F92 6100 FA84                  		bsr.w	FindWall
00017F96 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F9A 0803 0000                  		btst	#0,d3
00017F9E 6700                       		beq.s	locret_15098
00017FA0 163C 0040                  		move.b	#$40,d3
00017FA4                            
00017FA4                            locret_15098:
00017FA4 4E75                       		rts	
00017FA6                            ; End of function ObjHitWallLeft
00017FA6                            
00017FA6                            ; ===========================================================================
00017FA6                            
00017FA6                            		include	"_incObj\66 Rotating Junction.asm"
00017FA6                            ; ---------------------------------------------------------------------------
00017FA6                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00017FA6                            ; ---------------------------------------------------------------------------
00017FA6                            
00017FA6                            Junction:
00017FA6 7000                       		moveq	#0,d0
00017FA8 1028 0024                  		move.b	obRoutine(a0),d0
00017FAC 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00017FB0 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00017FB4                            ; ===========================================================================
00017FB4 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00017FB6 0000                       		dc.w Jun_Action-Jun_Index
00017FB8 0000                       		dc.w Jun_Display-Jun_Index
00017FBA 0000                       		dc.w Jun_Release-Jun_Index
00017FBC                            
00017FBC =00000034                  jun_frame:	equ $34		; current frame
00017FBC =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00017FBC =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00017FBC                            ; ===========================================================================
00017FBC                            
00017FBC                            Jun_Main:	; Routine 0
00017FBC 5428 0024                  		addq.b	#2,obRoutine(a0)
00017FC0 323C 0001                  		move.w	#1,d1
00017FC4 2248                       		movea.l	a0,a1
00017FC6 6000                       		bra.s	@makeitem
00017FC8                            ; ===========================================================================
00017FC8                            
00017FC8                            	@repeat:
00017FC8 4EB9 0000 F9D4             		jsr	FindFreeObj
00017FCE 6600                       		bne.s	@fail
00017FD0 12BC 0066                  		move.b	#id_Junction,0(a1)
00017FD4 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00017FD8 3368 0008 0008             		move.w	obX(a0),obX(a1)
00017FDE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00017FE4 337C 0180 0018             		move.w	#$180,obPriority(a1)
00017FEA 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00017FF0                            
00017FF0                            @makeitem:
00017FF0 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00017FF8 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00017FFE 0029 0004 0001             		ori.b	#4,obRender(a1)
00018004 137C 0038 0014             		move.b	#$38,obActWid(a1)
0001800A                            
0001800A                            	@fail:
0001800A 51C9 FFBC                  		dbf	d1,@repeat
0001800E                            
0001800E 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018014 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001801A 317C 003C 0030             		move.w	#$3C,$30(a0)
00018020 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018026 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
0001802C                            
0001802C                            Jun_Action:	; Routine 2
0001802C 6100 0000                  		bsr.w	Jun_ChkSwitch
00018030 4A28 0001                  		tst.b	obRender(a0)
00018034 6A00 0000                  		bpl.w	Jun_Display
00018038 323C 0030                  		move.w	#$30,d1
0001803C 3401                       		move.w	d1,d2
0001803E 3602                       		move.w	d2,d3
00018040 5243                       		addq.w	#1,d3
00018042 3828 0008                  		move.w	obX(a0),d4
00018046 6100 992A                  		bsr.w	SolidObject
0001804A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018050 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018054                            
00018054 43F8 D000                  		lea	(v_player).w,a1
00018058 720E                       		moveq	#$E,d1
0001805A 3029 0008                  		move.w	obX(a1),d0
0001805E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018062 6500                       		bcs.s	@isleft		; if yes, branch
00018064 7207                       		moveq	#7,d1		
00018066                            
00018066                            	@isleft:
00018066 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
0001806A 6600                       		bne.s	Jun_Display	; if not, branch
0001806C                            
0001806C 1141 0032                  		move.b	d1,$32(a0)
00018070 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018074 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001807A 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018080 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018086 337C 0000 0010             		move.w	#0,obVelX(a1)
0001808C 337C 0000 0012             		move.w	#0,obVelY(a1)
00018092 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018098 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001809E 08E9 0001 0022             		bset	#1,obStatus(a1)
000180A4 3429 0008                  		move.w	obX(a1),d2
000180A8 3629 000C                  		move.w	obY(a1),d3
000180AC 6100 0000                  		bsr.w	Jun_ChgPos
000180B0 D569 0008                  		add.w	d2,obX(a1)
000180B4 D769 000C                  		add.w	d3,obY(a1)
000180B8 E0E9 0008                  		asr	obX(a1)
000180BC E0E9 000C                  		asr	obY(a1)
000180C0                            
000180C0                            Jun_Display:	; Routine 4
000180C0 6000 9418                  		bra.w	RememberState
000180C4                            ; ===========================================================================
000180C4                            
000180C4                            Jun_Release:	; Routine 6
000180C4 1028 001A                  		move.b	obFrame(a0),d0
000180C8 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
000180CC 6700                       		beq.s	@release	; if yes, branch
000180CE 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000180D2 6600                       		bne.s	@dontrelease	; if not, branch
000180D4                            
000180D4                            	@release:
000180D4 B028 0032                  		cmp.b	$32(a0),d0
000180D8 6700                       		beq.s	@dontrelease
000180DA 43F8 D000                  		lea	(v_player).w,a1
000180DE 337C 0000 0010             		move.w	#0,obVelX(a1)
000180E4 337C 0800 0012             		move.w	#$800,obVelY(a1)
000180EA 0C00 0004                  		cmpi.b	#4,d0
000180EE 6700                       		beq.s	@isdown
000180F0 337C 0800 0010             		move.w	#$800,obVelX(a1)
000180F6 337C 0800 0012             		move.w	#$800,obVelY(a1)
000180FC                            
000180FC                            	@isdown:
000180FC 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
00018100 5928 0024                  		subq.b	#4,obRoutine(a0)
00018104                            
00018104                            	@dontrelease:
00018104 6100                       		bsr.s	Jun_ChkSwitch
00018106 6100                       		bsr.s	Jun_ChgPos
00018108 6000 93D0                  		bra.w	RememberState
0001810C                            
0001810C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001810C                            
0001810C                            
0001810C                            Jun_ChkSwitch:
0001810C 45F8 F7E0                  		lea	(f_switch).w,a2
00018110 7000                       		moveq	#0,d0
00018112 1028 0038                  		move.b	jun_switch(a0),d0
00018116 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001811C 6700                       		beq.s	@unpressed	; if not, branch
0001811E                            
0001811E 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018122 6600                       		bne.s	@animate	; if yes, branch
00018124 4428 0034                  		neg.b	jun_frame(a0)
00018128 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
0001812E 6000                       		bra.s	@animate
00018130                            ; ===========================================================================
00018130                            
00018130                            @unpressed:
00018130 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018134                            
00018134                            @animate:
00018134 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018138 6A00                       		bpl.s	@nochange	; if time remains, branch
0001813A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018140 1228 0034                  		move.b	jun_frame(a0),d1
00018144 1028 001A                  		move.b	obFrame(a0),d0
00018148 D001                       		add.b	d1,d0
0001814A 0200 000F                  		andi.b	#$F,d0
0001814E 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018152                            
00018152                            	@nochange:
00018152 4E75                       		rts	
00018154                            ; End of function Jun_ChkSwitch
00018154                            
00018154                            
00018154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018154                            
00018154                            
00018154                            Jun_ChgPos:
00018154 43F8 D000                  		lea	(v_player).w,a1
00018158 7000                       		moveq	#0,d0
0001815A 1028 001A                  		move.b	obFrame(a0),d0
0001815E D040                       		add.w	d0,d0
00018160 45FB 0000                  		lea	@data(pc,d0.w),a2
00018164 101A                       		move.b	(a2)+,d0
00018166 4880                       		ext.w	d0
00018168 D068 0008                  		add.w	obX(a0),d0
0001816C 3340 0008                  		move.w	d0,obX(a1)
00018170 101A                       		move.b	(a2)+,d0
00018172 4880                       		ext.w	d0
00018174 D068 000C                  		add.w	obY(a0),d0
00018178 3340 000C                  		move.w	d0,obY(a1)
0001817C 4E75                       		rts	
0001817E                            
0001817E                            
0001817E E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018182 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018186 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
0001818A 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
0001818E 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018192 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018196 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
0001819A E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001819A E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001819E                            Map_Jun:	include	"_maps\Rotating Junction.asm"
0001819E                            ; ---------------------------------------------------------------------------
0001819E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001819E                            ; ---------------------------------------------------------------------------
0001819E                            Map_Jun_internal:
0001819E 0000                       		dc.w @gap0-Map_Jun_internal
000181A0 0000                       		dc.w @gap1-Map_Jun_internal
000181A2 0000                       		dc.w @gap2-Map_Jun_internal
000181A4 0000                       		dc.w @gap3-Map_Jun_internal
000181A6 0000                       		dc.w @gap4-Map_Jun_internal
000181A8 0000                       		dc.w @gap5-Map_Jun_internal
000181AA 0000                       		dc.w @gap6-Map_Jun_internal
000181AC 0000                       		dc.w @gap7-Map_Jun_internal
000181AE 0000                       		dc.w @gap8-Map_Jun_internal
000181B0 0000                       		dc.w @gap9-Map_Jun_internal
000181B2 0000                       		dc.w @gapA-Map_Jun_internal
000181B4 0000                       		dc.w @gapB-Map_Jun_internal
000181B6 0000                       		dc.w @gapC-Map_Jun_internal
000181B8 0000                       		dc.w @gapD-Map_Jun_internal
000181BA 0000                       		dc.w @gapE-Map_Jun_internal
000181BC 0000                       		dc.w @gapF-Map_Jun_internal
000181BE 0000                       		dc.w @circle-Map_Jun_internal
000181C0 06                         @gap0:		dc.b 6
000181C1 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000181C6 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000181CB E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000181D0 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000181D5 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000181DA 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000181DF 06                         @gap1:		dc.b 6
000181E0 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000181E5 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000181EA F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000181EF F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000181F4 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000181F9 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000181FE 06                         @gap2:		dc.b 6
000181FF 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00018204 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00018209 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001820E 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018213 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018218 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001821D 06                         @gap3:		dc.b 6
0001821E 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018223 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018228 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001822D 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018232 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018237 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001823C 06                         @gap4:		dc.b 6
0001823D 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018242 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018247 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001824C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018251 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018256 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001825B 06                         @gap5:		dc.b 6
0001825C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018261 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018266 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001826B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018270 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018275 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001827A 06                         @gap6:		dc.b 6
0001827B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018280 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018285 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001828A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001828F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018294 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018299 06                         @gap7:		dc.b 6
0001829A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001829F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000182A4 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000182A9 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000182AE 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000182B3 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000182B8 06                         @gap8:		dc.b 6
000182B9 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000182BE 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000182C3 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000182C8 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000182CD 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000182D2 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000182D7 06                         @gap9:		dc.b 6
000182D8 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000182DD E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000182E2 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000182E7 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000182EC F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000182F1 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000182F6 06                         @gapA:		dc.b 6
000182F7 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000182FC E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00018301 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00018306 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001830B E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018310 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018315 06                         @gapB:		dc.b 6
00018316 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001831B D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018320 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018325 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001832A E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001832F E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018334 06                         @gapC:		dc.b 6
00018335 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001833A D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001833F C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018344 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018349 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001834E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018353 06                         @gapD:		dc.b 6
00018354 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018359 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001835E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018363 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018368 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001836D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018372 06                         @gapE:		dc.b 6
00018373 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018378 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001837D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018382 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018387 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001838C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018391 06                         @gapF:		dc.b 6
00018392 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018397 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001839C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000183A1 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000183A6 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000183AB F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000183B0 0C                         @circle:	dc.b $C
000183B1 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000183B6 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000183BB E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000183C0 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000183C5 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000183CA E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000183CF 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000183D4 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000183D9 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000183DE 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000183E3 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000183E8 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000183EE 00                         		even
000183EE 00                         		even
000183EE                            		include	"_incObj\67 Running Disc.asm"
000183EE                            ; ---------------------------------------------------------------------------
000183EE                            ; Object 67 - disc that	you run	around (SBZ)
000183EE                            ; ---------------------------------------------------------------------------
000183EE                            
000183EE                            RunningDisc:
000183EE 7000                       		moveq	#0,d0
000183F0 1028 0024                  		move.b	obRoutine(a0),d0
000183F4 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000183F8 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000183FC                            ; ===========================================================================
000183FC 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000183FE 0000                       		dc.w Disc_Action-Disc_Index
00018400                            
00018400 =00000032                  disc_origX:	equ $32		; original x-axis position
00018400 =00000030                  disc_origY:	equ $30		; original y-axis position
00018400                            ; ===========================================================================
00018400                            
00018400                            Disc_Main:	; Routine 0
00018400 5428 0024                  		addq.b	#2,obRoutine(a0)
00018404 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
0001840C 317C C344 0002             		move.w	#$C344,obGfx(a0)
00018412 117C 0004 0001             		move.b	#4,obRender(a0)
00018418 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001841E 117C 0008 0014             		move.b	#8,obActWid(a0)
00018424 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001842A 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018430 117C 0018 0034             		move.b	#$18,$34(a0)
00018436 117C 0048 0038             		move.b	#$48,$38(a0)
0001843C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018440 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018444 6700                       		beq.s	@typeis0	; branch if 0
00018446 117C 0010 0034             		move.b	#$10,$34(a0)
0001844C 117C 0038 0038             		move.b	#$38,$38(a0)
00018452                            
00018452                            	@typeis0:
00018452 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018456 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001845A 4881                       		ext.w	d1
0001845C E741                       		asl.w	#3,d1
0001845E 3141 0036                  		move.w	d1,$36(a0)
00018462 1028 0022                  		move.b	obStatus(a0),d0
00018466 E418                       		ror.b	#2,d0
00018468 0200 00C0                  		andi.b	#$C0,d0
0001846C 1140 0026                  		move.b	d0,obAngle(a0)
00018470                            
00018470                            Disc_Action:	; Routine 2
00018470 6100 0000                  		bsr.w	Disc_MoveSonic
00018474 6100 0000                  		bsr.w	Disc_MoveSpot
00018478 6000 0000                  		bra.w	Disc_ChkDel
0001847C                            ; ===========================================================================
0001847C                            
0001847C                            Disc_MoveSonic:
0001847C 7400                       		moveq	#0,d2
0001847E 1428 0038                  		move.b	$38(a0),d2
00018482 3602                       		move.w	d2,d3
00018484 D643                       		add.w	d3,d3
00018486 43F8 D000                  		lea	(v_player).w,a1
0001848A 3029 0008                  		move.w	obX(a1),d0
0001848E 9068 0032                  		sub.w	disc_origX(a0),d0
00018492 D042                       		add.w	d2,d0
00018494 B043                       		cmp.w	d3,d0
00018496 6400                       		bcc.s	loc_155A8
00018498 3229 000C                  		move.w	obY(a1),d1
0001849C 9268 0030                  		sub.w	disc_origY(a0),d1
000184A0 D242                       		add.w	d2,d1
000184A2 B243                       		cmp.w	d3,d1
000184A4 6400                       		bcc.s	loc_155A8
000184A6 0829 0001 0022             		btst	#1,obStatus(a1)
000184AC 6700                       		beq.s	loc_155B8
000184AE 4228 003A                  		clr.b	$3A(a0)
000184B2 4E75                       		rts	
000184B4                            ; ===========================================================================
000184B4                            
000184B4                            loc_155A8:
000184B4 4A28 003A                  		tst.b	$3A(a0)
000184B8 6700                       		beq.s	locret_155B6
000184BA 4229 0038                  		clr.b	$38(a1)
000184BE 4228 003A                  		clr.b	$3A(a0)
000184C2                            
000184C2                            locret_155B6:
000184C2 4E75                       		rts	
000184C4                            ; ===========================================================================
000184C4                            
000184C4                            loc_155B8:
000184C4 4A28 003A                  		tst.b	$3A(a0)
000184C8 6600                       		bne.s	loc_155E2
000184CA 117C 0001 003A             		move.b	#1,$3A(a0)
000184D0 0829 0002 0022             		btst	#2,obStatus(a1)
000184D6 6600                       		bne.s	loc_155D0
000184D8 4229 001C                  		clr.b	obAnim(a1)
000184DC                            
000184DC                            loc_155D0:
000184DC 08A9 0005 0022             		bclr	#5,obStatus(a1)
000184E2 137C 0001 001D             		move.b	#1,obNextAni(a1)
000184E8 137C 0001 0038             		move.b	#1,$38(a1)
000184EE                            
000184EE                            loc_155E2:
000184EE 3029 0020                  		move.w	obInertia(a1),d0
000184F2 4A68 0036                  		tst.w	$36(a0)
000184F6 6A00                       		bpl.s	loc_15608
000184F8 0C40 FC00                  		cmpi.w	#-$400,d0
000184FC 6F00                       		ble.s	loc_155FA
000184FE 337C FC00 0020             		move.w	#-$400,obInertia(a1)
00018504 4E75                       		rts	
00018506                            ; ===========================================================================
00018506                            
00018506                            loc_155FA:
00018506 0C40 F100                  		cmpi.w	#-$F00,d0
0001850A 6C00                       		bge.s	locret_15606
0001850C 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00018512                            
00018512                            locret_15606:
00018512 4E75                       		rts	
00018514                            ; ===========================================================================
00018514                            
00018514                            loc_15608:
00018514 0C40 0400                  		cmpi.w	#$400,d0
00018518 6C00                       		bge.s	loc_15616
0001851A 337C 0400 0020             		move.w	#$400,obInertia(a1)
00018520 4E75                       		rts	
00018522                            ; ===========================================================================
00018522                            
00018522                            loc_15616:
00018522 0C40 0F00                  		cmpi.w	#$F00,d0
00018526 6F00                       		ble.s	locret_15622
00018528 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
0001852E                            
0001852E                            locret_15622:
0001852E 4E75                       		rts	
00018530                            ; ===========================================================================
00018530                            
00018530                            Disc_MoveSpot:
00018530 3028 0036                  		move.w	$36(a0),d0
00018534 D168 0026                  		add.w	d0,obAngle(a0)
00018538 1028 0026                  		move.b	obAngle(a0),d0
0001853C 4EB9 0000 3B42             		jsr	(CalcSine).l
00018542 3428 0030                  		move.w	disc_origY(a0),d2
00018546 3628 0032                  		move.w	disc_origX(a0),d3
0001854A 7800                       		moveq	#0,d4
0001854C 1828 0034                  		move.b	$34(a0),d4
00018550 E14C                       		lsl.w	#8,d4
00018552 2A04                       		move.l	d4,d5
00018554 C9C0                       		muls.w	d0,d4
00018556 4844                       		swap	d4
00018558 CBC1                       		muls.w	d1,d5
0001855A 4845                       		swap	d5
0001855C D842                       		add.w	d2,d4
0001855E DA43                       		add.w	d3,d5
00018560 3144 000C                  		move.w	d4,obY(a0)
00018564 3145 0008                  		move.w	d5,obX(a0)
00018568 4E75                       		rts	
0001856A                            ; ===========================================================================
0001856A                            
0001856A                            Disc_ChkDel:
00018586 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001858C                            
0001858C                            	@delete:
0001858C 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001858C 4EF9 0000 F47A             		jmp	(DeleteObject).l
00018592                            Map_Disc:	include	"_maps\Running Disc.asm"
00018592                            ; ---------------------------------------------------------------------------
00018592                            ; Sprite mappings - disc that you run around (SBZ)
00018592                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018592                            ; part of the level tiles.)
00018592                            ; ---------------------------------------------------------------------------
00018592                            Map_Disc_internal:
00018592 0000                       		dc.w @spot-Map_Disc_internal
00018594 01                         @spot:		dc.b 1
00018595 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001859A                            		even
0001859A                            		even
0001859A                            		include	"_incObj\68 Conveyor Belt.asm"
0001859A                            ; ---------------------------------------------------------------------------
0001859A                            ; Object 68 - conveyor belts (SBZ)
0001859A                            ; ---------------------------------------------------------------------------
0001859A                            
0001859A                            Conveyor:
0001859A 7000                       		moveq	#0,d0
0001859C 1028 0024                  		move.b	obRoutine(a0),d0
000185A0 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
000185A4 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
000185A8                            ; ===========================================================================
000185A8 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
000185AA 0000                       		dc.w Conv_Action-Conv_Index
000185AC                            
000185AC =00000036                  conv_speed:	equ $36
000185AC =00000038                  conv_width:	equ $38
000185AC                            ; ===========================================================================
000185AC                            
000185AC                            Conv_Main:	; Routine 0
000185AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000185B0 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
000185B6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000185BA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000185BE 6700                       		beq.s	@typeis0	; if zero, branch
000185C0 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
000185C6                            
000185C6                            	@typeis0:
000185C6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000185CA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000185CE 4881                       		ext.w	d1
000185D0 E841                       		asr.w	#4,d1
000185D2 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000185D6                            
000185D6                            Conv_Action:	; Routine 2
000185D6 6100                       		bsr.s	@movesonic
000185F4 4E75                       		rts	
000185F6                            
000185F6                            	@delete:
000185F6 4EF9 0000 F47A             		jmp	(DeleteObject).l
000185FC                            ; ===========================================================================
000185FC                            
000185FC                            @movesonic:
000185FC 7400                       		moveq	#0,d2
000185FE 1428 0038                  		move.b	conv_width(a0),d2
00018602 3602                       		move.w	d2,d3
00018604 D643                       		add.w	d3,d3
00018606 43F8 D000                  		lea	(v_player).w,a1
0001860A 3029 0008                  		move.w	obX(a1),d0
0001860E 9068 0008                  		sub.w	obX(a0),d0
00018612 D042                       		add.w	d2,d0
00018614 B043                       		cmp.w	d3,d0
00018616 6400                       		bcc.s	@notonconveyor
00018618 3229 000C                  		move.w	obY(a1),d1
0001861C 9268 000C                  		sub.w	obY(a0),d1
00018620 0641 0030                  		addi.w	#$30,d1
00018624 0C41 0030                  		cmpi.w	#$30,d1
00018628 6400                       		bcc.s	@notonconveyor
0001862A 0829 0001 0022             		btst	#1,obStatus(a1)
00018630 6600                       		bne.s	@notonconveyor
00018632 3028 0036                  		move.w	conv_speed(a0),d0
00018636 D169 0008                  		add.w	d0,obX(a1)
0001863A                            
0001863A                            	@notonconveyor:
0001863A 4E75                       		rts	
0001863A 4E75                       		rts	
0001863C                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001863C                            ; ---------------------------------------------------------------------------
0001863C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001863C                            ; ---------------------------------------------------------------------------
0001863C                            
0001863C                            SpinPlatform:
0001863C 7000                       		moveq	#0,d0
0001863E 1028 0024                  		move.b	obRoutine(a0),d0
00018642 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018646 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001864A                            ; ===========================================================================
0001864A 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001864C 0000                       		dc.w Spin_Trapdoor-Spin_Index
0001864E 0000                       		dc.w Spin_Spinner-Spin_Index
00018650                            
00018650 =00000030                  spin_timer:	equ $30		; time counter until change
00018650 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018650                            ; ===========================================================================
00018650                            
00018650                            Spin_Main:	; Routine 0
00018650 5428 0024                  		addq.b	#2,obRoutine(a0)
00018654 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
0001865C 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00018662 0028 0004 0001             		ori.b	#4,obRender(a0)
00018668 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001866E 7000                       		moveq	#0,d0
00018670 1028 0028                  		move.b	obSubtype(a0),d0
00018674 0240 000F                  		andi.w	#$F,d0
00018678 C0FC 003C                  		mulu.w	#$3C,d0
0001867C 3140 0032                  		move.w	d0,spin_timelen(a0)
00018680 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018684 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018686                            
00018686 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
0001868A 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00018692 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018698 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001869E 117C 0002 001C             		move.b	#2,obAnim(a0)
000186A4 7000                       		moveq	#0,d0
000186A6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000186AA 3200                       		move.w	d0,d1
000186AC 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000186B0 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000186B4 3140 0030                  		move.w	d0,spin_timer(a0)
000186B8 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
000186BC 0241 0070                  		andi.w	#$70,d1
000186C0 0641 0010                  		addi.w	#$10,d1
000186C4 E549                       		lsl.w	#2,d1
000186C6 5341                       		subq.w	#1,d1
000186C8 3141 0036                  		move.w	d1,$36(a0)
000186CC 6000                       		bra.s	Spin_Spinner
000186CE                            ; ===========================================================================
000186CE                            
000186CE                            Spin_Trapdoor:	; Routine 2
000186CE 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000186D2 6A00                       		bpl.s	@animate	; if time remains, branch
000186D4                            
000186D4 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000186DA 0868 0000 001C             		bchg	#0,obAnim(a0)
000186E0 4A28 0001                  		tst.b	obRender(a0)
000186E4 6A00                       		bpl.s	@animate
000186F0                            
000186F0                            	@animate:
000186F0 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000186F6 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
000186FC 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00018700 6600                       		bne.s	@notsolid	; if not, branch
00018702 323C 004B                  		move.w	#$4B,d1
00018706 343C 000C                  		move.w	#$C,d2
0001870A 3602                       		move.w	d2,d3
0001870C 5243                       		addq.w	#1,d3
0001870E 3828 0008                  		move.w	obX(a0),d4
00018712 6100 925E                  		bsr.w	SolidObject
00018716 6000 8DC2                  		bra.w	RememberState
0001871A                            ; ===========================================================================
0001871A                            
0001871A                            @notsolid:
0001871A 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00018720 6700                       		beq.s	@display	; if not, branch
00018722 43F8 D000                  		lea	(v_player).w,a1
00018726 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001872C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018732 4228 0025                  		clr.b	obSolid(a0)
00018736                            
00018736                            	@display:
00018736 6000 8DA2                  		bra.w	RememberState
0001873A                            ; ===========================================================================
0001873A                            
0001873A                            Spin_Spinner:	; Routine 4
0001873A 3038 FE04                  		move.w	(v_framecount).w,d0
0001873E C068 0036                  		and.w	$36(a0),d0
00018742 6600                       		bne.s	@delay
00018744 117C 0001 0034             		move.b	#1,$34(a0)
0001874A                            
0001874A                            	@delay:
0001874A 4A28 0034                  		tst.b	$34(a0)
0001874E 6700                       		beq.s	@animate
00018750 5368 0030                  		subq.w	#1,spin_timer(a0)
00018754 6A00                       		bpl.s	@animate
00018756 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001875C 4228 0034                  		clr.b	$34(a0)
00018760 0868 0000 001C             		bchg	#0,obAnim(a0)
00018766                            
00018766                            	@animate:
00018766 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001876C 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00018772 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018776 6600                       		bne.s	@notsolid2	; if not, branch
00018778 323C 001B                  		move.w	#$1B,d1
0001877C 343C 0007                  		move.w	#7,d2
00018780 3602                       		move.w	d2,d3
00018782 5243                       		addq.w	#1,d3
00018784 3828 0008                  		move.w	obX(a0),d4
00018788 6100 91E8                  		bsr.w	SolidObject
0001878C 6000 8D4C                  		bra.w	RememberState
00018790                            ; ===========================================================================
00018790                            
00018790                            @notsolid2:
00018790 0828 0003 0022             		btst	#3,obStatus(a0)
00018796 6700                       		beq.s	@display
00018798 43F8 D000                  		lea	(v_player).w,a1
0001879C 08A9 0003 0022             		bclr	#3,obStatus(a1)
000187A2 08A8 0003 0022             		bclr	#3,obStatus(a0)
000187A8 4228 0025                  		clr.b	obSolid(a0)
000187AC                            
000187AC                            	@display:
000187AC 6000 8D2C                  		bra.w	RememberState
000187AC 6000 8D2C                  		bra.w	RememberState
000187B0                            		include	"_anim\SBZ Spinning Platforms.asm"
000187B0                            ; ---------------------------------------------------------------------------
000187B0                            ; Animation script - trapdoor (SBZ)
000187B0                            ; ---------------------------------------------------------------------------
000187B0 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
000187B2 0000                       		dc.w @trapclose-Ani_Spin
000187B4 0000                       		dc.w @spin1-Ani_Spin
000187B6 0000                       		dc.w @spin2-Ani_Spin
000187B8 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
000187BE 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
000187C4 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000187D8 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000187EC                            		even
000187EC                            		even
000187EC                            Map_Trap:	include	"_maps\Trapdoor.asm"
000187EC                            ; ---------------------------------------------------------------------------
000187EC                            ; Sprite mappings - trapdoor (SBZ)
000187EC                            ; ---------------------------------------------------------------------------
000187EC                            Map_Trap_internal:
000187EC 0000                       		dc.w @closed-Map_Trap_internal
000187EE 0000                       		dc.w @half-Map_Trap_internal
000187F0 0000                       		dc.w @open-Map_Trap_internal
000187F2 04                         @closed:	dc.b 4
000187F3 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000187F8 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000187FD F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018802 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00018807 08                         @half:		dc.b 8
00018808 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001880D 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018812 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018817 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001881C F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018821 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018826 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001882B 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018830 04                         @open:		dc.b 4
00018831 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018836 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001883B 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018840 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018846 00                         		even
00018846 00                         		even
00018846                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018846                            ; ---------------------------------------------------------------------------
00018846                            ; Sprite mappings - spinning platforms (SBZ)
00018846                            ; ---------------------------------------------------------------------------
00018846                            Map_Spin_internal:
00018846 0000                       		dc.w @flat-Map_Spin_internal
00018848 0000                       		dc.w @spin1-Map_Spin_internal
0001884A 0000                       		dc.w @spin2-Map_Spin_internal
0001884C 0000                       		dc.w @spin3-Map_Spin_internal
0001884E 0000                       		dc.w @spin4-Map_Spin_internal
00018850 02                         @flat:		dc.b 2
00018851 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018856 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001885B 02                         @spin1:		dc.b 2
0001885C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018861 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018866 02                         @spin2:		dc.b 2
00018867 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001886C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018871 02                         @spin3:		dc.b 2
00018872 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018877 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001887C 02                         @spin4:		dc.b 2
0001887D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018882 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018888 00                         		even
00018888 00                         		even
00018888                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018888                            ; ---------------------------------------------------------------------------
00018888                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018888                            ; ---------------------------------------------------------------------------
00018888                            
00018888                            Saws:
00018888 7000                       		moveq	#0,d0
0001888A 1028 0024                  		move.b	obRoutine(a0),d0
0001888E 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018892 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018896                            ; ===========================================================================
00018896 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018898 0000                       		dc.w Saw_Action-Saw_Index
0001889A                            
0001889A =0000003A                  saw_origX:	equ $3A		; original x-axis position
0001889A =00000038                  saw_origY:	equ $38		; original y-axis position
0001889A =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
0001889A                            ; ===========================================================================
0001889A                            
0001889A                            Saw_Main:	; Routine 0
0001889A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001889E 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
000188A6 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
000188AC 117C 0004 0001             		move.b	#4,obRender(a0)
000188B2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000188B8 117C 0020 0014             		move.b	#$20,obActWid(a0)
000188BE 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000188C4 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
000188CA 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
000188D0 6400                       		bcc.s	Saw_Action	; if yes, branch
000188D2 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000188D8                            
000188D8                            Saw_Action:	; Routine 2
000188D8 7000                       		moveq	#0,d0
000188DA 1028 0028                  		move.b	obSubtype(a0),d0
000188DE 0240 0007                  		andi.w	#7,d0
000188E2 D040                       		add.w	d0,d0
000188E4 323B 0000                  		move.w	@index(pc,d0.w),d1
000188E8 4EBB 1000                  		jsr	@index(pc,d1.w)
00018908 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001890E                            
0001890E                            	@delete:
0001890E 4EF9 0000 F47A             		jmp	(DeleteObject).l
00018914                            ; ===========================================================================
00018914 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
0001891A 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
0001891E                            ; ===========================================================================
0001891E                            
0001891E                            @type00:
0001891E 4E75                       		rts			; doesn't move
00018920                            ; ===========================================================================
00018920                            
00018920                            @type01:
00018920 323C 0060                  		move.w	#$60,d1
00018924 7000                       		moveq	#0,d0
00018926 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001892A 0828 0000 0022             		btst	#0,obStatus(a0)
00018930 6700                       		beq.s	@noflip01
00018932 4440                       		neg.w	d0
00018934 D041                       		add.w	d1,d0
00018936                            
00018936                            	@noflip01:
00018936 3228 003A                  		move.w	saw_origX(a0),d1
0001893A 9240                       		sub.w	d0,d1
0001893C 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018940                            
00018940 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018944 6A00                       		bpl.s	@sameframe01
00018946 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
0001894C 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018952                            
00018952                            	@sameframe01:
00018952 4A28 0001                  		tst.b	obRender(a0)
00018956 6A00                       		bpl.s	@nosound01
00018958 3038 FE04                  		move.w	(v_framecount).w,d0
0001895C 0240 000F                  		andi.w	#$F,d0
00018960 6600                       		bne.s	@nosound01
0001896C                            
0001896C                            	@nosound01:
0001896C 4E75                       		rts	
0001896E                            ; ===========================================================================
0001896E                            
0001896E                            @type02:
0001896E 323C 0030                  		move.w	#$30,d1
00018972 7000                       		moveq	#0,d0
00018974 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018978 0828 0000 0022             		btst	#0,obStatus(a0)
0001897E 6700                       		beq.s	@noflip02
00018980 4440                       		neg.w	d0
00018982 0640 0080                  		addi.w	#$80,d0
00018986                            
00018986                            	@noflip02:
00018986 3228 0038                  		move.w	saw_origY(a0),d1
0001898A 9240                       		sub.w	d0,d1
0001898C 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018990 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018994 6A00                       		bpl.s	@sameframe02
00018996 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
0001899C 0868 0000 001A             		bchg	#0,obFrame(a0)
000189A2                            
000189A2                            	@sameframe02:
000189A2 4A28 0001                  		tst.b	obRender(a0)
000189A6 6A00                       		bpl.s	@nosound02
000189A8 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000189AC 0C00 0018                  		cmpi.b	#$18,d0
000189B0 6600                       		bne.s	@nosound02
000189BC                            
000189BC                            	@nosound02:
000189BC 4E75                       		rts	
000189BE                            ; ===========================================================================
000189BE                            
000189BE                            @type03:
000189BE 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
000189C2 6600                       		bne.s	@here03		; if yes, branch
000189C4                            
000189C4 3038 D008                  		move.w	(v_player+obX).w,d0
000189C8 0440 00C0                  		subi.w	#$C0,d0
000189CC 6500                       		bcs.s	@nosaw03x
000189CE 9068 0008                  		sub.w	obX(a0),d0
000189D2 6500                       		bcs.s	@nosaw03x
000189D4 3038 D00C                  		move.w	(v_player+obY).w,d0
000189D8 0440 0080                  		subi.w	#$80,d0
000189DC B068 000C                  		cmp.w	obY(a0),d0
000189E0 6400                       		bcc.s	@nosaw03y
000189E2 0640 0100                  		addi.w	#$100,d0
000189E6 B068 000C                  		cmp.w	obY(a0),d0
000189EA 6500                       		bcs.s	@nosaw03y
000189EC 117C 0001 003D             		move.b	#1,saw_here(a0)
000189F2 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
000189F8 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000189FE 117C 0002 001A             		move.b	#2,obFrame(a0)
00018A0E                            
00018A0E                            	@nosaw03x:
00018A0E 588F                       		addq.l	#4,sp
00018A10                            
00018A10                            	@nosaw03y:
00018A10 4E75                       		rts	
00018A12                            ; ===========================================================================
00018A12                            
00018A12                            @here03:
00018A12 4EB9 0000 F426             		jsr	(SpeedToPos).l
00018A18 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A1E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A22 6A00                       		bpl.s	@sameframe03
00018A24 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A2A 0868 0000 001A             		bchg	#0,obFrame(a0)
00018A30                            
00018A30                            	@sameframe03:
00018A30 4E75                       		rts	
00018A32                            ; ===========================================================================
00018A32                            
00018A32                            @type04:
00018A32 4A28 003D                  		tst.b	saw_here(a0)
00018A36 6600                       		bne.s	@here04
00018A38 3038 D008                  		move.w	(v_player+obX).w,d0
00018A3C 0640 00E0                  		addi.w	#$E0,d0
00018A40 9068 0008                  		sub.w	obX(a0),d0
00018A44 6400                       		bcc.s	@nosaw04x
00018A46 3038 D00C                  		move.w	(v_player+obY).w,d0
00018A4A 0440 0080                  		subi.w	#$80,d0
00018A4E B068 000C                  		cmp.w	obY(a0),d0
00018A52 6400                       		bcc.s	@nosaw04y
00018A54 0640 0100                  		addi.w	#$100,d0
00018A58 B068 000C                  		cmp.w	obY(a0),d0
00018A5C 6500                       		bcs.s	@nosaw04y
00018A5E 117C 0001 003D             		move.b	#1,saw_here(a0)
00018A64 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018A6A 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018A70 117C 0002 001A             		move.b	#2,obFrame(a0)
00018A80                            
00018A80                            	@nosaw04x:
00018A80 588F                       		addq.l	#4,sp
00018A82                            
00018A82                            	@nosaw04y:
00018A82 4E75                       		rts	
00018A84                            ; ===========================================================================
00018A84                            
00018A84                            @here04:
00018A84 4EB9 0000 F426             		jsr	(SpeedToPos).l
00018A8A 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A90 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A94 6A00                       		bpl.s	@sameframe04
00018A96 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A9C 0868 0000 001A             		bchg	#0,obFrame(a0)
00018AA2                            
00018AA2                            	@sameframe04:
00018AA2 4E75                       		rts	
00018AA2 4E75                       		rts	
00018AA4                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018AA4                            ; ---------------------------------------------------------------------------
00018AA4                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018AA4                            ; ---------------------------------------------------------------------------
00018AA4                            Map_Saw_internal:
00018AA4 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018AA6 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018AA8 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018AAA 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018AAC 07                         @pizzacutter1:	dc.b 7
00018AAD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018AB2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018AB7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018ABC E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018AC1 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018AC6 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018ACB 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018AD0 07                         @pizzacutter2:	dc.b 7
00018AD1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018AD6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018ADB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018AE0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018AE5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018AEA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018AEF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018AF4 04                         @groundsaw1:	dc.b 4
00018AF5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018AFA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018AFF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018B04 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018B09 04                         @groundsaw2:	dc.b 4
00018B0A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018B0F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018B14 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018B19 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018B1E                            		even
00018B1E                            		even
00018B1E                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018B1E                            ; ---------------------------------------------------------------------------
00018B1E                            ; Object 6B - stomper and sliding door (SBZ)
00018B1E                            ; ---------------------------------------------------------------------------
00018B1E                            
00018B1E                            ScrapStomp:
00018B1E 7000                       		moveq	#0,d0
00018B20 1028 0024                  		move.b	obRoutine(a0),d0
00018B24 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018B28 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018B2C                            ; ===========================================================================
00018B2C 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018B2E 0000                       		dc.w Sto_Action-Sto_Index
00018B30                            
00018B30 =00000016                  sto_height:	equ $16
00018B30 =00000034                  sto_origX:	equ $34		; original x-axis position
00018B30 =00000030                  sto_origY:	equ $30		; original y-axis position
00018B30 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018B30                            
00018B30 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018B34 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018B38 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018B3C 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018B40 8040 0005                  		dc.b  $80, $40,	  0,   5
00018B44                            ; ===========================================================================
00018B44                            
00018B44                            Sto_Main:	; Routine 0
00018B44 5428 0024                  		addq.b	#2,obRoutine(a0)
00018B48 7000                       		moveq	#0,d0
00018B4A 1028 0028                  		move.b	obSubtype(a0),d0
00018B4E E448                       		lsr.w	#2,d0
00018B50 0240 001C                  		andi.w	#$1C,d0
00018B54 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018B58 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018B5C 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018B60 E448                       		lsr.w	#2,d0
00018B62 1140 001A                  		move.b	d0,obFrame(a0)
00018B66 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018B6E 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018B74 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018B7A 6600                       		bne.s	@isSBZ12	; if not, branch
00018B7C 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018B82 6700                       		beq.s	@isSBZ3
00018B84                            
00018B84                            @chkdel:
00018B84 45F8 FC00                  		lea	(v_objstate).w,a2
00018B88 7000                       		moveq	#0,d0
00018B8A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B8E 6700                       		beq.s	@delete
00018B90 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018B96                            
00018B96                            	@delete:
00018B96 4EF9 0000 F47A             		jmp	(DeleteObject).l
00018B9C                            ; ===========================================================================
00018B9C                            
00018B9C                            @isSBZ3:
00018B9C 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018BA2 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018BA8 6600                       		bne.s	@isSBZ12
00018BAA 45F8 FC00                  		lea	(v_objstate).w,a2
00018BAE 7000                       		moveq	#0,d0
00018BB0 1028 0023                  		move.b	obRespawnNo(a0),d0
00018BB4 6700                       		beq.s	@isSBZ12
00018BB6 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018BBC 6700                       		beq.s	@isSBZ12
00018BBE 4238 F7CB                  		clr.b	(v_obj6B).w
00018BC2 60C0                       		bra.s	@chkdel
00018BC4                            ; ===========================================================================
00018BC4                            
00018BC4                            @isSBZ12:
00018BC4 0028 0004 0001             		ori.b	#4,obRender(a0)
00018BCA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018BD0 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018BD6 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018BDC 7000                       		moveq	#0,d0
00018BDE 101B                       		move.b	(a3)+,d0
00018BE0 3140 003C                  		move.w	d0,$3C(a0)
00018BE4 7000                       		moveq	#0,d0
00018BE6 1028 0028                  		move.b	obSubtype(a0),d0
00018BEA 6A00                       		bpl.s	Sto_Action
00018BEC 0200 000F                  		andi.b	#$F,d0
00018BF0 1140 003E                  		move.b	d0,$3E(a0)
00018BF4 1153 0028                  		move.b	(a3),obSubtype(a0)
00018BF8 0C13 0005                  		cmpi.b	#5,(a3)
00018BFC 6600                       		bne.s	@chkgone
00018BFE 08E8 0004 0001             		bset	#4,obRender(a0)
00018C04                            
00018C04                            	@chkgone:
00018C04 45F8 FC00                  		lea	(v_objstate).w,a2
00018C08 7000                       		moveq	#0,d0
00018C0A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C0E 6700                       		beq.s	Sto_Action
00018C10 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C16                            
00018C16                            Sto_Action:	; Routine 2
00018C16 3F28 0008                  		move.w	obX(a0),-(sp)
00018C1A 7000                       		moveq	#0,d0
00018C1C 1028 0028                  		move.b	obSubtype(a0),d0
00018C20 0240 000F                  		andi.w	#$F,d0
00018C24 D040                       		add.w	d0,d0
00018C26 323B 0000                  		move.w	@index(pc,d0.w),d1
00018C2A 4EBB 1000                  		jsr	@index(pc,d1.w)
00018C2E 381F                       		move.w	(sp)+,d4
00018C30 4A28 0001                  		tst.b	obRender(a0)
00018C34 6A00                       		bpl.s	@chkdel
00018C36 7200                       		moveq	#0,d1
00018C38 1228 0014                  		move.b	obActWid(a0),d1
00018C3C 0641 000B                  		addi.w	#$B,d1
00018C40 7400                       		moveq	#0,d2
00018C42 1428 0016                  		move.b	sto_height(a0),d2
00018C46 3602                       		move.w	d2,d3
00018C48 5243                       		addq.w	#1,d3
00018C4A 6100 8D26                  		bsr.w	SolidObject
00018C4E                            
00018C4E                            	@chkdel:
00018C6A 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00018C70                            
00018C70                            	@chkgone:
00018C70 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018C76 6600                       		bne.s	@delete
00018C78 4238 F7CB                  		clr.b	(v_obj6B).w
00018C7C 45F8 FC00                  		lea	(v_objstate).w,a2
00018C80 7000                       		moveq	#0,d0
00018C82 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C86 6700                       		beq.s	@delete
00018C88 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C8E                            
00018C8E                            	@delete:
00018C8E 4EF9 0000 F47A             		jmp	(DeleteObject).l
00018C94                            ; ===========================================================================
00018C94 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018C98 0000 0000                  		dc.w @type02-@index, @type03-@index
00018C9C 0000 0000                  		dc.w @type04-@index, @type05-@index
00018CA0                            ; ===========================================================================
00018CA0                            
00018CA0                            @type00:
00018CA0 4E75                       		rts
00018CA2                            ; ===========================================================================
00018CA2                            
00018CA2                            @type01:
00018CA2 4A28 0038                  		tst.b	sto_active(a0)
00018CA6 6600                       		bne.s	@isactive01
00018CA8 45F8 F7E0                  		lea	(f_switch).w,a2
00018CAC 7000                       		moveq	#0,d0
00018CAE 1028 003E                  		move.b	$3E(a0),d0
00018CB2 0832 0000 0000             		btst	#0,(a2,d0.w)
00018CB8 6700                       		beq.s	@loc_15DC2
00018CBA 117C 0001 0038             		move.b	#1,sto_active(a0)
00018CC0                            
00018CC0                            	@isactive01:
00018CC0 3028 003C                  		move.w	$3C(a0),d0
00018CC4 B068 003A                  		cmp.w	$3A(a0),d0
00018CC8 6700                       		beq.s	@loc_15DE0
00018CCA 5468 003A                  		addq.w	#2,$3A(a0)
00018CCE                            
00018CCE                            	@loc_15DC2:
00018CCE 3028 003A                  		move.w	$3A(a0),d0
00018CD2 0828 0000 0022             		btst	#0,obStatus(a0)
00018CD8 6700                       		beq.s	@noflip01
00018CDA 4440                       		neg.w	d0
00018CDC 0640 0080                  		addi.w	#$80,d0
00018CE0                            
00018CE0                            	@noflip01:
00018CE0 3228 0034                  		move.w	sto_origX(a0),d1
00018CE4 9240                       		sub.w	d0,d1
00018CE6 3141 0008                  		move.w	d1,obX(a0)
00018CEA 4E75                       		rts	
00018CEC                            ; ===========================================================================
00018CEC                            
00018CEC                            @loc_15DE0:
00018CEC 5228 0028                  		addq.b	#1,obSubtype(a0)
00018CF0 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018CF6 4228 0038                  		clr.b	sto_active(a0)
00018CFA 45F8 FC00                  		lea	(v_objstate).w,a2
00018CFE 7000                       		moveq	#0,d0
00018D00 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D04 67C8                       		beq.s	@loc_15DC2
00018D06 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018D0C 60C0                       		bra.s	@loc_15DC2
00018D0E                            ; ===========================================================================
00018D0E                            
00018D0E                            @type02:
00018D0E 4A28 0038                  		tst.b	sto_active(a0)
00018D12 6600                       		bne.s	@isactive02
00018D14 5368 0036                  		subq.w	#1,$36(a0)
00018D18 6600                       		bne.s	@loc_15E1E
00018D1A 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D20                            
00018D20                            	@isactive02:
00018D20 4A68 003A                  		tst.w	$3A(a0)
00018D24 6700                       		beq.s	@loc_15E3C
00018D26 5568 003A                  		subq.w	#2,$3A(a0)
00018D2A                            
00018D2A                            	@loc_15E1E:
00018D2A 3028 003A                  		move.w	$3A(a0),d0
00018D2E 0828 0000 0022             		btst	#0,obStatus(a0)
00018D34 6700                       		beq.s	@noflip02
00018D36 4440                       		neg.w	d0
00018D38 0640 0080                  		addi.w	#$80,d0
00018D3C                            
00018D3C                            	@noflip02:
00018D3C 3228 0034                  		move.w	sto_origX(a0),d1
00018D40 9240                       		sub.w	d0,d1
00018D42 3141 0008                  		move.w	d1,obX(a0)
00018D46 4E75                       		rts	
00018D48                            ; ===========================================================================
00018D48                            
00018D48                            @loc_15E3C:
00018D48 5328 0028                  		subq.b	#1,obSubtype(a0)
00018D4C 4228 0038                  		clr.b	sto_active(a0)
00018D50 45F8 FC00                  		lea	(v_objstate).w,a2
00018D54 7000                       		moveq	#0,d0
00018D56 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D5A 67CE                       		beq.s	@loc_15E1E
00018D5C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018D62 60C6                       		bra.s	@loc_15E1E
00018D64                            ; ===========================================================================
00018D64                            
00018D64                            @type03:
00018D64 4A28 0038                  		tst.b	sto_active(a0)
00018D68 6600                       		bne.s	@isactive03
00018D6A 4A68 003A                  		tst.w	$3A(a0)
00018D6E 6700                       		beq.s	@loc_15E6A
00018D70 5368 003A                  		subq.w	#1,$3A(a0)
00018D74 6000                       		bra.s	@loc_15E8E
00018D76                            ; ===========================================================================
00018D76                            
00018D76                            @loc_15E6A:
00018D76 5368 0036                  		subq.w	#1,$36(a0)
00018D7A 6A00                       		bpl.s	@loc_15E8E
00018D7C 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D82 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D88                            
00018D88                            @isactive03:
00018D88 5068 003A                  		addq.w	#8,$3A(a0)
00018D8C 3028 003A                  		move.w	$3A(a0),d0
00018D90 B068 003C                  		cmp.w	$3C(a0),d0
00018D94 6600                       		bne.s	@loc_15E8E
00018D96 4228 0038                  		clr.b	sto_active(a0)
00018D9A                            
00018D9A                            @loc_15E8E:
00018D9A 3028 003A                  		move.w	$3A(a0),d0
00018D9E 0828 0000 0022             		btst	#0,obStatus(a0)
00018DA4 6700                       		beq.s	@noflip03
00018DA6 4440                       		neg.w	d0
00018DA8 0640 0038                  		addi.w	#$38,d0
00018DAC                            
00018DAC                            	@noflip03:
00018DAC 3228 0030                  		move.w	sto_origY(a0),d1
00018DB0 D240                       		add.w	d0,d1
00018DB2 3141 000C                  		move.w	d1,obY(a0)
00018DB6 4E75                       		rts	
00018DB8                            ; ===========================================================================
00018DB8                            
00018DB8                            @type04:
00018DB8 4A28 0038                  		tst.b	sto_active(a0)
00018DBC 6600                       		bne.s	@isactive04
00018DBE 4A68 003A                  		tst.w	$3A(a0)
00018DC2 6700                       		beq.s	@loc_15EBE
00018DC4 5168 003A                  		subq.w	#8,$3A(a0)
00018DC8 6000                       		bra.s	@loc_15EF0
00018DCA                            ; ===========================================================================
00018DCA                            
00018DCA                            @loc_15EBE:
00018DCA 5368 0036                  		subq.w	#1,$36(a0)
00018DCE 6A00                       		bpl.s	@loc_15EF0
00018DD0 317C 003C 0036             		move.w	#$3C,$36(a0)
00018DD6 117C 0001 0038             		move.b	#1,sto_active(a0)
00018DDC                            
00018DDC                            @isactive04:
00018DDC 3028 003A                  		move.w	$3A(a0),d0
00018DE0 B068 003C                  		cmp.w	$3C(a0),d0
00018DE4 6700                       		beq.s	@loc_15EE0
00018DE6 5068 003A                  		addq.w	#8,$3A(a0)
00018DEA 6000                       		bra.s	@loc_15EF0
00018DEC                            ; ===========================================================================
00018DEC                            
00018DEC                            @loc_15EE0:
00018DEC 5368 0036                  		subq.w	#1,$36(a0)
00018DF0 6A00                       		bpl.s	@loc_15EF0
00018DF2 317C 003C 0036             		move.w	#$3C,$36(a0)
00018DF8 4228 0038                  		clr.b	sto_active(a0)
00018DFC                            
00018DFC                            @loc_15EF0:
00018DFC 3028 003A                  		move.w	$3A(a0),d0
00018E00 0828 0000 0022             		btst	#0,obStatus(a0)
00018E06 6700                       		beq.s	@noflip04
00018E08 4440                       		neg.w	d0
00018E0A 0640 0038                  		addi.w	#$38,d0
00018E0E                            
00018E0E                            	@noflip04:
00018E0E 3228 0030                  		move.w	sto_origY(a0),d1
00018E12 D240                       		add.w	d0,d1
00018E14 3141 000C                  		move.w	d1,obY(a0)
00018E18 4E75                       		rts	
00018E1A                            ; ===========================================================================
00018E1A                            
00018E1A                            @type05:
00018E1A 4A28 0038                  		tst.b	sto_active(a0)
00018E1E 6600                       		bne.s	@loc_15F3E
00018E20 45F8 F7E0                  		lea	(f_switch).w,a2
00018E24 7000                       		moveq	#0,d0
00018E26 1028 003E                  		move.b	$3E(a0),d0
00018E2A 0832 0000 0000             		btst	#0,(a2,d0.w)
00018E30 6700                       		beq.s	@locret_15F5C
00018E32 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E38 45F8 FC00                  		lea	(v_objstate).w,a2
00018E3C 7000                       		moveq	#0,d0
00018E3E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E42 6700                       		beq.s	@loc_15F3E
00018E44 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018E4A                            
00018E4A                            @loc_15F3E:
00018E4A 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018E52 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018E5A 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018E60 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018E66 6700                       		beq.s	@loc_15F5E
00018E68                            
00018E68                            @locret_15F5C:
00018E68 4E75                       		rts	
00018E6A                            ; ===========================================================================
00018E6A                            
00018E6A                            @loc_15F5E:
00018E6A 4228 0028                  		clr.b	obSubtype(a0)
00018E6E 4228 0038                  		clr.b	sto_active(a0)
00018E72 4E75                       		rts	
00018E72 4E75                       		rts	
00018E74                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018E74                            ; ---------------------------------------------------------------------------
00018E74                            ; Sprite mappings - stomper and	platforms (SBZ)
00018E74                            ; ---------------------------------------------------------------------------
00018E74                            Map_Stomp_internal:
00018E74 0000                       		dc.w @door-Map_Stomp_internal
00018E76 0000                       		dc.w @stomper-Map_Stomp_internal
00018E78 0000                       		dc.w @stomper-Map_Stomp_internal
00018E7A 0000                       		dc.w @stomper-Map_Stomp_internal
00018E7C 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018E7E 04                         @door:		dc.b 4
00018E7F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018E84 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018E89 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018E8E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018E93 08                         @stomper:	dc.b 8
00018E94 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018E99 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018E9E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018EA3 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018EA8 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018EAD 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018EB2 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018EB7 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018EBC 0E                         @bigdoor:	dc.b $E
00018EBD C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018EC2 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018EC7 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018ECC C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018ED1 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018ED6 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018EDB C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018EE0 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018EE5 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018EEA E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018EEF E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018EF4 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018EF9 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018EFE 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018F04 00                         		even
00018F04 00                         		even
00018F04                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018F04                            ; ---------------------------------------------------------------------------
00018F04                            ; Object 6C - vanishing	platforms (SBZ)
00018F04                            ; ---------------------------------------------------------------------------
00018F04                            
00018F04                            VanishPlatform:
00018F04 7000                       		moveq	#0,d0
00018F06 1028 0024                  		move.b	obRoutine(a0),d0
00018F0A 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018F0E 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018F12                            ; ===========================================================================
00018F12 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018F14 0000                       		dc.w VanP_Vanish-VanP_Index
00018F16 0000                       		dc.w VanP_Appear-VanP_Index
00018F18 0000                       		dc.w loc_16068-VanP_Index
00018F1A                            
00018F1A =00000030                  vanp_timer:	equ $30		; counter for time until event
00018F1A =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018F1A                            ; ===========================================================================
00018F1A                            
00018F1A                            VanP_Main:	; Routine 0
00018F1A 5C28 0024                  		addq.b	#6,obRoutine(a0)
00018F1E 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00018F26 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00018F2C 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00018F32 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00018F34 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
00018F3A                            
00018F3A                            	VanP_IsSYZ:	
00018F3A 0028 0004 0001             		ori.b	#4,obRender(a0)
00018F40 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018F46 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018F4C 7000                       		moveq	#0,d0
00018F4E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018F52 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018F56 5240                       		addq.w	#1,d0		; add 1
00018F58 EF48                       		lsl.w	#7,d0		; multiply by $80
00018F5A 3200                       		move.w	d0,d1
00018F5C 5340                       		subq.w	#1,d0
00018F5E 3140 0030                  		move.w	d0,vanp_timer(a0)
00018F62 3140 0032                  		move.w	d0,vanp_timelen(a0)
00018F66 7000                       		moveq	#0,d0
00018F68 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018F6C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018F70 0641 0080                  		addi.w	#$80,d1
00018F74 C0C1                       		mulu.w	d1,d0
00018F76 E088                       		lsr.l	#8,d0
00018F78 3140 0036                  		move.w	d0,$36(a0)
00018F7C 5341                       		subq.w	#1,d1
00018F7E 3141 0038                  		move.w	d1,$38(a0)
00018F82                            
00018F82                            loc_16068:	; Routine 6
00018F82 3038 FE04                  		move.w	(v_framecount).w,d0
00018F86 9068 0036                  		sub.w	$36(a0),d0
00018F8A C068 0038                  		and.w	$38(a0),d0
00018F8E 6600                       		bne.s	@animate
00018F90 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00018F94 6000                       		bra.s	VanP_Vanish
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            @animate:
00018F96 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018F9C 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00018FA2 6000 8536                  		bra.w	RememberState
00018FA6                            ; ===========================================================================
00018FA6                            
00018FA6                            VanP_Vanish:	; Routine 2
00018FA6                            VanP_Appear:	; Routine 4
00018FA6 5368 0030                  		subq.w	#1,vanp_timer(a0)
00018FAA 6A00                       		bpl.s	@wait
00018FAC 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00018FB2 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00018FB6 6700                       		beq.s	@isvanishing	; if yes, branch
00018FB8 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00018FBE                            
00018FBE                            	@isvanishing:
00018FBE 0868 0000 001C             		bchg	#0,obAnim(a0)
00018FC4                            
00018FC4                            	@wait:
00018FC4 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018FCA 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
00018FD0 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00018FD6 6600                       		bne.s	@notsolid	; if yes, branch
00018FD8 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00018FDE 6600                       		bne.s	@loc_160D6
00018FE0 7200                       		moveq	#0,d1
00018FE2 1228 0014                  		move.b	obActWid(a0),d1
00018FE6 4EB9 0000 8AF8             		jsr	(PlatformObject).l
00018FEC 6000 84EC                  		bra.w	RememberState
00018FF0                            ; ===========================================================================
00018FF0                            
00018FF0                            @loc_160D6:
00018FF0 7200                       		moveq	#0,d1
00018FF2 1228 0014                  		move.b	obActWid(a0),d1
00018FF6 4EB9 0000 8C6C             		jsr	(ExitPlatform).l
00018FFC 3428 0008                  		move.w	obX(a0),d2
00019000 4EB9 0000 91D6             		jsr	(MvSonicOnPtfm2).l
00019006 6000 84D2                  		bra.w	RememberState
0001900A                            ; ===========================================================================
0001900A                            
0001900A                            @notsolid:
0001900A 0828 0003 0022             		btst	#3,obStatus(a0)
00019010 6700                       		beq.s	@display
00019012 43F8 D000                  		lea	(v_player).w,a1
00019016 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001901C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019022 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019028 4228 0025                  		clr.b	obSolid(a0)
0001902C                            
0001902C                            	@display:
0001902C 6000 84AC                  		bra.w	RememberState
0001902C 6000 84AC                  		bra.w	RememberState
00019030                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019030                            ; ---------------------------------------------------------------------------
00019030                            ; Animation script - vanishing platforms (SBZ)
00019030                            ; ---------------------------------------------------------------------------
00019030 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019032 0000                       		dc.w @appear-Ani_Van
00019034 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
0001903E                            		even
0001903E 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
00019048                            		even
00019048                            		even
00019048                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019048                            ; --------------------------------------------------------------------------------
00019048                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019048                            ; --------------------------------------------------------------------------------
00019048                            
00019048                            SME_Mrcg1:	
00019048 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
0001904C 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
00019050 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
00019054 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
00019056 01                         SME_Mrcg1_E:	dc.b 1	
00019057 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
0001905C 04                         SME_Mrcg1_14:	dc.b 4	
0001905D F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019062 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019067 F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
0001906C F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
00019071 01                         SME_Mrcg1_29:	dc.b 1	
00019072 F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
00019077 02                         SME_Mrcg1_2F:	dc.b 2	
00019078 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
0001907D F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019082 01                         SME_Mrcg1_3A:	dc.b 1	
00019083 F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
00019088 01                         SME_Mrcg1_40:	dc.b 1	
00019089 F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
0001908E 00                         SME_Mrcg1_46:	dc.b 0	
00019090 00                         		even
00019090 00                         		even
00019090                            		include	"_incObj\6E Electrocuter.asm"
00019090                            ; ---------------------------------------------------------------------------
00019090                            ; Object 6E - electrocution orbs (SBZ)
00019090                            ; ---------------------------------------------------------------------------
00019090                            
00019090                            Electro:
00019090 7000                       		moveq	#0,d0
00019092 1028 0024                  		move.b	obRoutine(a0),d0
00019096 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
0001909A 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
0001909E                            ; ===========================================================================
0001909E 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
000190A0 0000                       		dc.w Elec_Shock-Elec_Index
000190A2                            
000190A2 =00000034                  elec_freq:	equ $34		; frequency
000190A2                            ; ===========================================================================
000190A2                            
000190A2                            Elec_Main:	; Routine 0
000190A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000190A6 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
000190AE 317C 047E 0002             		move.w	#$47E,obGfx(a0)
000190B4 0028 0004 0001             		ori.b	#4,obRender(a0)
000190BA 117C 0028 0014             		move.b	#$28,obActWid(a0)
000190C0 7000                       		moveq	#0,d0
000190C2 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
000190C6 E948                       		lsl.w	#4,d0		; multiply by $10
000190C8 5340                       		subq.w	#1,d0
000190CA 3140 0034                  		move.w	d0,elec_freq(a0)
000190CE                            
000190CE                            Elec_Shock:	; Routine 2
000190CE 3038 FE04                  		move.w	(v_framecount).w,d0
000190D2 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
000190D6 6600                       		bne.s	@animate	; if not, branch
000190D8                            
000190D8 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
000190DE 4A28 0001                  		tst.b	obRender(a0)
000190E2 6A00                       		bpl.s	@animate
000190EE                            
000190EE                            	@animate:
000190EE 43F9 0000 0000             		lea	(Ani_Elec).l,a1
000190F4 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
000190FA 117C 0000 0020             		move.b	#0,obColType(a0)
00019100 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019106 6600                       		bne.s	@display	; if not, branch
00019108 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
0001910E                            
0001910E                            	@display:
0001910E 6000 83CA                  		bra.w	RememberState
0001910E 6000 83CA                  		bra.w	RememberState
00019112                            		include	"_anim\Electrocuter.asm"
00019112                            ; ---------------------------------------------------------------------------
00019112                            ; Animation script - electrocution orbs (SBZ)
00019112                            ; ---------------------------------------------------------------------------
00019112 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019114 0000                       		dc.w byte_161D0-Ani_Elec
00019116 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
0001911A 00                         		even
0001911A 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
0001912A                            		even
0001912A                            		even
0001912A                            Map_Elec:	include	"_maps\Electrocuter.asm"
0001912A                            ; --------------------------------------------------------------------------------
0001912A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001912A                            ; --------------------------------------------------------------------------------
0001912A                            
0001912A                            SME_KiF9w:	
0001912A 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
0001912E 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019132 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
00019136 02                         SME_KiF9w_C:	dc.b 2	
00019137 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
0001913C 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019141 03                         SME_KiF9w_17:	dc.b 3	
00019142 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019147 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
0001914C 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019151 05                         SME_KiF9w_27:	dc.b 5	
00019152 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019157 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
0001915C 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019161 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019166 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
0001916B 04                         SME_KiF9w_41:	dc.b 4	
0001916C F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019171 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019176 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001917B F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019180 06                         SME_KiF9w_56:	dc.b 6	
00019181 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019186 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001918B F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019190 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019195 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
0001919A F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
0001919F 04                         SME_KiF9w_75:	dc.b 4	
000191A0 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000191A5 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000191AA F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
000191AF F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
000191B4                            		even
000191B4                            		even
000191B4                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
000191B4                            ; ---------------------------------------------------------------------------
000191B4                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000191B4                            ; ---------------------------------------------------------------------------
000191B4                            
000191B4                            SpinConvey:
000191B4 7000                       		moveq	#0,d0
000191B6 1028 0024                  		move.b	obRoutine(a0),d0
000191BA 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
000191BE 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
000191DE                            
000191DE                            SpinC_Display:
000191DE 4EF9 0000 F43A             		jmp	(DisplaySprite).l
000191E4                            ; ===========================================================================
000191E4                            
000191E4                            loc_1629A:
000191E4 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
000191EA 6600                       		bne.s	SpinC_Act1or2	; if not, branch
000191EC 0C40 FF80                  		cmpi.w	#-$80,d0
000191F0 64EC                       		bcc.s	SpinC_Display
000191F2                            
000191F2                            SpinC_Act1or2:
000191F2 1028 002F                  		move.b	$2F(a0),d0
000191F6 6A00                       		bpl.s	SpinC_Delete
000191F8 0240 007F                  		andi.w	#$7F,d0
000191FC 45F8 F7C1                  		lea	(v_obj63).w,a2
00019200 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019206                            
00019206                            SpinC_Delete:
00019206 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001920C                            ; ===========================================================================
0001920C 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
0001920E 0000                       		dc.w loc_163D8-SpinC_Index
00019210                            ; ===========================================================================
00019210                            
00019210                            SpinC_Main:	; Routine 0
00019210 1028 0028                  		move.b	obSubtype(a0),d0
00019214 6B00 0000                  		bmi.w	loc_16380
00019218 5428 0024                  		addq.b	#2,obRoutine(a0)
0001921C 217C 0001 8846 0004        		move.l	#Map_Spin,obMap(a0)
00019224 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
0001922A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019230 0028 0004 0001             		ori.b	#4,obRender(a0)
00019236 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001923C 7000                       		moveq	#0,d0
0001923E 1028 0028                  		move.b	obSubtype(a0),d0
00019242 3200                       		move.w	d0,d1
00019244 E648                       		lsr.w	#3,d0
00019246 0240 001E                  		andi.w	#$1E,d0
0001924A 45FA 0000                  		lea	off_164A6(pc),a2
0001924E D4F2 0000                  		adda.w	(a2,d0.w),a2
00019252 315A 0038                  		move.w	(a2)+,$38(a0)
00019256 315A 0030                  		move.w	(a2)+,$30(a0)
0001925A 214A 003C                  		move.l	a2,$3C(a0)
0001925E 0241 000F                  		andi.w	#$F,d1
00019262 E549                       		lsl.w	#2,d1
00019264 1141 0038                  		move.b	d1,$38(a0)
00019268 117C 0004 003A             		move.b	#4,$3A(a0)
0001926E 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019272 6700                       		beq.s	loc_16356
00019274 117C 0001 003B             		move.b	#1,$3B(a0)
0001927A 4428 003A                  		neg.b	$3A(a0)
0001927E 7200                       		moveq	#0,d1
00019280 1228 0038                  		move.b	$38(a0),d1
00019284 D228 003A                  		add.b	$3A(a0),d1
00019288 B228 0039                  		cmp.b	$39(a0),d1
0001928C 6500                       		bcs.s	loc_16352
0001928E 1001                       		move.b	d1,d0
00019290 7200                       		moveq	#0,d1
00019292 4A00                       		tst.b	d0
00019294 6A00                       		bpl.s	loc_16352
00019296 1228 0039                  		move.b	$39(a0),d1
0001929A 5901                       		subq.b	#4,d1
0001929C                            
0001929C                            loc_16352:
0001929C 1141 0038                  		move.b	d1,$38(a0)
000192A0                            
000192A0                            loc_16356:
000192A0 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000192A6 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000192AC 4A41                       		tst.w	d1
000192AE 6600                       		bne.s	loc_1636C
000192B0 117C 0001 001C             		move.b	#1,obAnim(a0)
000192B6                            
000192B6                            loc_1636C:
000192B6 0C41 0008                  		cmpi.w	#8,d1
000192BA 6600                       		bne.s	loc_16378
000192BC 117C 0000 001C             		move.b	#0,obAnim(a0)
000192C2                            
000192C2                            loc_16378:
000192C2 6100 B29C                  		bsr.w	LCon_ChangeDir
000192C6 6000 0000                  		bra.w	loc_163D8
000192CA                            ; ===========================================================================
000192CA                            
000192CA                            loc_16380:
000192CA 1140 002F                  		move.b	d0,$2F(a0)
000192CE 0240 007F                  		andi.w	#$7F,d0
000192D2 45F8 F7C1                  		lea	(v_obj63).w,a2
000192D6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000192DC 6700                       		beq.s	loc_1639A
000192DE 4EF9 0000 F47A             		jmp	(DeleteObject).l
000192E4                            ; ===========================================================================
000192E4                            
000192E4                            loc_1639A:
000192E4 D040                       		add.w	d0,d0
000192E6 0240 001E                  		andi.w	#$1E,d0
000192EA 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
000192EE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000192F4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000192F8 321A                       		move.w	(a2)+,d1
000192FA 2248                       		movea.l	a0,a1
000192FC 6000                       		bra.s	SpinC_LoadPform
000192FE                            ; ===========================================================================
000192FE                            
000192FE                            SpinC_Loop:
000192FE 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
00019304 6600                       		bne.s	loc_163D0
00019306                            
00019306                            SpinC_LoadPform:
00019306 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
0001930A 335A 0008                  		move.w	(a2)+,obX(a1)
0001930E 335A 000C                  		move.w	(a2)+,obY(a1)
00019312 301A                       		move.w	(a2)+,d0
00019314 1340 0028                  		move.b	d0,obSubtype(a1)
00019318                            
00019318                            loc_163D0:
00019318 51C9 FFE4                  		dbf	d1,SpinC_Loop
0001931C                            
0001931C 588F                       		addq.l	#4,sp
0001931E 4E75                       		rts	
00019320                            ; ===========================================================================
00019320                            
00019320                            loc_163D8:	; Routine 2
00019320 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019326 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001932C 4A28 001A                  		tst.b	obFrame(a0)
00019330 6600                       		bne.s	loc_16404
00019332 3F28 0008                  		move.w	obX(a0),-(sp)
00019336 6100 0000                  		bsr.w	loc_16424
0001933A 323C 001B                  		move.w	#$1B,d1
0001933E 343C 0007                  		move.w	#7,d2
00019342 3602                       		move.w	d2,d3
00019344 5243                       		addq.w	#1,d3
00019346 381F                       		move.w	(sp)+,d4
00019348 6000 8628                  		bra.w	SolidObject
0001934C                            ; ===========================================================================
0001934C                            
0001934C                            loc_16404:
0001934C 0828 0003 0022             		btst	#3,obStatus(a0)
00019352 6700                       		beq.s	loc_16420
00019354 43F8 D000                  		lea	(v_objspace).w,a1
00019358 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001935E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019364 4228 0025                  		clr.b	obSolid(a0)
00019368                            
00019368                            loc_16420:
00019368 6000 0000                  		bra.w	loc_16424
0001936C                            
0001936C                            loc_16424:
0001936C 3028 0008                  		move.w	obX(a0),d0
00019370 B068 0034                  		cmp.w	$34(a0),d0
00019374 6600                       		bne.s	loc_16484
00019376 3028 000C                  		move.w	obY(a0),d0
0001937A B068 0036                  		cmp.w	$36(a0),d0
0001937E 6600                       		bne.s	loc_16484
00019380 7200                       		moveq	#0,d1
00019382 1228 0038                  		move.b	$38(a0),d1
00019386 D228 003A                  		add.b	$3A(a0),d1
0001938A B228 0039                  		cmp.b	$39(a0),d1
0001938E 6500                       		bcs.s	loc_16456
00019390 1001                       		move.b	d1,d0
00019392 7200                       		moveq	#0,d1
00019394 4A00                       		tst.b	d0
00019396 6A00                       		bpl.s	loc_16456
00019398 1228 0039                  		move.b	$39(a0),d1
0001939C 5901                       		subq.b	#4,d1
0001939E                            
0001939E                            loc_16456:
0001939E 1141 0038                  		move.b	d1,$38(a0)
000193A2 2268 003C                  		movea.l	$3C(a0),a1
000193A6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000193AC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000193B2 4A41                       		tst.w	d1
000193B4 6600                       		bne.s	loc_16474
000193B6 117C 0001 001C             		move.b	#1,obAnim(a0)
000193BC                            
000193BC                            loc_16474:
000193BC 0C41 0008                  		cmpi.w	#8,d1
000193C0 6600                       		bne.s	loc_16480
000193C2 117C 0000 001C             		move.b	#0,obAnim(a0)
000193C8                            
000193C8                            loc_16480:
000193C8 6100 B196                  		bsr.w	LCon_ChangeDir
000193CC                            
000193CC                            loc_16484:
000193CC 4EF9 0000 F426             		jmp	(SpeedToPos).l
000193CC 4EF9 0000 F426             		jmp	(SpeedToPos).l
000193D2                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
000193D2                            ; ---------------------------------------------------------------------------
000193D2                            ; Animation script - platform on conveyor belt (SBZ)
000193D2                            ; ---------------------------------------------------------------------------
000193D2 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
000193D4 0000                       		dc.w @still-Ani_SpinConvey
000193D6 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000193E3 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
000193EA 00                         		even
000193EA 0F00 FF                    @still:		dc.b $F, 0, afEnd
000193EE 00                         		even
000193EE 00                         		even
000193EE                            
000193EE 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000193F4 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000193FA 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001940E 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019422 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00019436 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001944A 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001945E 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019472                            ; ===========================================================================
00019472                            
00019472                            		include	"_incObj\70 Girder Block.asm"
00019472                            ; ---------------------------------------------------------------------------
00019472                            ; Object 70 - large girder block (SBZ)
00019472                            ; ---------------------------------------------------------------------------
00019472                            
00019472                            Girder:
00019472 7000                       		moveq	#0,d0
00019474 1028 0024                  		move.b	obRoutine(a0),d0
00019478 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001947C 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019480                            ; ===========================================================================
00019480 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019482 0000                       		dc.w Gird_Action-Gird_Index
00019484                            
00019484 =00000016                  gird_height:	equ $16
00019484 =00000032                  gird_origX:	equ $32		; original x-axis position
00019484 =00000030                  gird_origY:	equ $30		; original y-axis position
00019484 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019484 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019484 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019484                            ; ===========================================================================
00019484                            
00019484                            Gird_Main:	; Routine 0
00019484 5428 0024                  		addq.b	#2,obRoutine(a0)
00019488 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019490 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019496 0028 0004 0001             		ori.b	#4,obRender(a0)
0001949C 317C 0200 0018             		move.w	#$200,obPriority(a0)
000194A2 117C 0060 0014             		move.b	#$60,obActWid(a0)
000194A8 117C 0018 0016             		move.b	#$18,gird_height(a0)
000194AE 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
000194B4 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
000194BA 6100 0000                  		bsr.w	Gird_ChgMove
000194BE                            
000194BE                            Gird_Action:	; Routine 2
000194BE 3F28 0008                  		move.w	obX(a0),-(sp)
000194C2 4A68 003A                  		tst.w	gird_delay(a0)
000194C6 6700                       		beq.s	@beginmove
000194C8 5368 003A                  		subq.w	#1,gird_delay(a0)
000194CC 6600                       		bne.s	@solid
000194CE                            
000194CE                            	@beginmove:
000194CE 4EB9 0000 F426             		jsr	(SpeedToPos).l
000194D4 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
000194D8 6600                       		bne.s	@solid		; if time remains, branch
000194DA 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
000194DE                            
000194DE                            	@solid:
000194DE 381F                       		move.w	(sp)+,d4
000194E0 4A28 0001                  		tst.b	obRender(a0)
000194E4 6A00                       		bpl.s	@chkdel
000194E6 7200                       		moveq	#0,d1
000194E8 1228 0014                  		move.b	obActWid(a0),d1
000194EC 0641 000B                  		addi.w	#$B,d1
000194F0 7400                       		moveq	#0,d2
000194F2 1428 0016                  		move.b	gird_height(a0),d2
000194F6 3602                       		move.w	d2,d3
000194F8 5243                       		addq.w	#1,d3
000194FA 6100 8476                  		bsr.w	SolidObject
000194FE                            
000194FE                            	@chkdel:
0001951A 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00019520                            
00019520                            	@delete:
00019520 4EF9 0000 F47A             		jmp	(DeleteObject).l
00019526                            ; ===========================================================================
00019526                            
00019526                            Gird_ChgMove:
00019526 1028 0038                  		move.b	gird_set(a0),d0
0001952A 0240 0018                  		andi.w	#$18,d0
0001952E 43F9 0000 0000             		lea	(@settings).l,a1
00019534 43F1 0000                  		lea	(a1,d0.w),a1
00019538 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001953C 3159 0012                  		move.w	(a1)+,obVelY(a0)
00019540 3159 0034                  		move.w	(a1)+,gird_time(a0)
00019544 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
00019548 317C 0007 003A             		move.w	#7,gird_delay(a0)
0001954E 4E75                       		rts	
00019550                            ; ===========================================================================
00019550                            @settings:	;   x-speed, y-speed, duration
00019550 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
00019558 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00019560 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
00019568 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019568 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019570                            Map_Gird:	include	"_maps\Girder Block.asm"
00019570                            ; ---------------------------------------------------------------------------
00019570                            ; Sprite mappings - large girder block (SBZ)
00019570                            ; ---------------------------------------------------------------------------
00019570                            Map_Gird_internal:
00019570 0000                       		dc.w @girder-Map_Gird_internal
00019572 0C                         @girder:	dc.b $C
00019573 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00019578 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001957D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019582 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019587 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001958C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019591 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019596 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001959B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000195A0 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000195A5 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000195AA 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000195B0 00                         		even
000195B0 00                         		even
000195B0                            		include	"_incObj\72 Teleporter.asm"
000195B0                            ; ---------------------------------------------------------------------------
000195B0                            ; Object 72 - teleporter (SBZ)
000195B0                            ; ---------------------------------------------------------------------------
000195B0                            
000195B0                            Teleport:
000195B0 7000                       		moveq	#0,d0
000195B2 1028 0024                  		move.b	obRoutine(a0),d0
000195B6 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
000195BA 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
000195DA 4E75                       		rts	
000195DC                            
000195DC                            	@delete:
000195DC 4EF9 0000 F47A             		jmp	(DeleteObject).l
000195E2                            ; ===========================================================================
000195E2 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
000195E4 0000                       		dc.w loc_166C8-Tele_Index
000195E6 0000                       		dc.w loc_1675E-Tele_Index
000195E8 0000                       		dc.w loc_16798-Tele_Index
000195EA                            ; ===========================================================================
000195EA                            
000195EA                            Tele_Main:	; Routine 0
000195EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000195EE 1028 0028                  		move.b	obSubtype(a0),d0
000195F2 D040                       		add.w	d0,d0
000195F4 0240 001E                  		andi.w	#$1E,d0
000195F8 45FA 0000                  		lea	Tele_Data(pc),a2
000195FC D4F2 0000                  		adda.w	(a2,d0.w),a2
00019600 315A 003A                  		move.w	(a2)+,$3A(a0)
00019604 214A 003C                  		move.l	a2,$3C(a0)
00019608 315A 0036                  		move.w	(a2)+,$36(a0)
0001960C 315A 0038                  		move.w	(a2)+,$38(a0)
00019610                            
00019610                            loc_166C8:	; Routine 2
00019610 43F8 D000                  		lea	(v_player).w,a1
00019614 3029 0008                  		move.w	obX(a1),d0
00019618 9068 0008                  		sub.w	obX(a0),d0
0001961C 0828 0000 0022             		btst	#0,obStatus(a0)
00019622 6700                       		beq.s	loc_166E0
00019624 0640 000F                  		addi.w	#$F,d0
00019628                            
00019628                            loc_166E0:
00019628 0C40 0010                  		cmpi.w	#$10,d0
0001962C 6400                       		bcc.s	locret_1675C
0001962E 3229 000C                  		move.w	obY(a1),d1
00019632 9268 000C                  		sub.w	obY(a0),d1
00019636 0641 0020                  		addi.w	#$20,d1
0001963A 0C41 0040                  		cmpi.w	#$40,d1
0001963E 6400                       		bcc.s	locret_1675C
00019640 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019644 6600                       		bne.s	locret_1675C
00019646 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
0001964C 6600                       		bne.s	loc_1670E
0001964E 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
00019654 6500                       		bcs.s	locret_1675C
00019656                            
00019656                            loc_1670E:
00019656 5428 0024                  		addq.b	#2,obRoutine(a0)
0001965A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00019660 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
00019666 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001966C 337C 0000 0010             		move.w	#0,obVelX(a1)
00019672 337C 0000 0012             		move.w	#0,obVelY(a1)
00019678 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001967E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019684 08E9 0001 0022             		bset	#1,obStatus(a1)
0001968A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019690 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019696 4228 0032                  		clr.b	$32(a0)
000196A4                            
000196A4                            locret_1675C:
000196A4 4E75                       		rts	
000196A6                            ; ===========================================================================
000196A6                            
000196A6                            loc_1675E:	; Routine 4
000196A6 43F8 D000                  		lea	(v_player).w,a1
000196AA 1028 0032                  		move.b	$32(a0),d0
000196AE 5428 0032                  		addq.b	#2,$32(a0)
000196B2 4EB9 0000 3B42             		jsr	(CalcSine).l
000196B8 EA40                       		asr.w	#5,d0
000196BA 3428 000C                  		move.w	obY(a0),d2
000196BE 9440                       		sub.w	d0,d2
000196C0 3342 000C                  		move.w	d2,obY(a1)
000196C4 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000196CA 6600                       		bne.s	locret_16796
000196CC 6100 0000                  		bsr.w	sub_1681C
000196D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000196DE                            
000196DE                            locret_16796:
000196DE 4E75                       		rts	
000196E0                            ; ===========================================================================
000196E0                            
000196E0                            loc_16798:	; Routine 6
000196E0 588F                       		addq.l	#4,sp
000196E2 43F8 D000                  		lea	(v_player).w,a1
000196E6 5328 002E                  		subq.b	#1,$2E(a0)
000196EA 6A00                       		bpl.s	loc_167DA
000196EC 3368 0036 0008             		move.w	$36(a0),obX(a1)
000196F2 3368 0038 000C             		move.w	$38(a0),obY(a1)
000196F8 7200                       		moveq	#0,d1
000196FA 1228 003A                  		move.b	$3A(a0),d1
000196FE 5801                       		addq.b	#4,d1
00019700 B228 003B                  		cmp.b	$3B(a0),d1
00019704 6500                       		bcs.s	loc_167C2
00019706 7200                       		moveq	#0,d1
00019708 6000                       		bra.s	loc_16800
0001970A                            ; ===========================================================================
0001970A                            
0001970A                            loc_167C2:
0001970A 1141 003A                  		move.b	d1,$3A(a0)
0001970E 2468 003C                  		movea.l	$3C(a0),a2
00019712 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00019718 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001971E 6000 0000                  		bra.w	sub_1681C
00019722                            ; ===========================================================================
00019722                            
00019722                            loc_167DA:
00019722 2429 0008                  		move.l	obX(a1),d2
00019726 2629 000C                  		move.l	obY(a1),d3
0001972A 3029 0010                  		move.w	obVelX(a1),d0
0001972E 48C0                       		ext.l	d0
00019730 E180                       		asl.l	#8,d0
00019732 D480                       		add.l	d0,d2
00019734 3029 0012                  		move.w	obVelY(a1),d0
00019738 48C0                       		ext.l	d0
0001973A E180                       		asl.l	#8,d0
0001973C D680                       		add.l	d0,d3
0001973E 2342 0008                  		move.l	d2,obX(a1)
00019742 2343 000C                  		move.l	d3,obY(a1)
00019746 4E75                       		rts	
00019748                            ; ===========================================================================
00019748                            
00019748                            loc_16800:
00019748 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
0001974E 4228 0024                  		clr.b	obRoutine(a0)
00019752 4238 F7C8                  		clr.b	(f_lockmulti).w
00019756 337C 0000 0010             		move.w	#0,obVelX(a1)
0001975C 337C 0200 0012             		move.w	#$200,obVelY(a1)
00019762 4E75                       		rts	
00019764                            
00019764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019764                            
00019764                            
00019764                            sub_1681C:
00019764 7000                       		moveq	#0,d0
00019766 343C 1000                  		move.w	#$1000,d2
0001976A 3028 0036                  		move.w	$36(a0),d0
0001976E 9069 0008                  		sub.w	obX(a1),d0
00019772 6C00                       		bge.s	loc_16830
00019774 4440                       		neg.w	d0
00019776 4442                       		neg.w	d2
00019778                            
00019778                            loc_16830:
00019778 7200                       		moveq	#0,d1
0001977A 363C 1000                  		move.w	#$1000,d3
0001977E 3228 0038                  		move.w	$38(a0),d1
00019782 9269 000C                  		sub.w	obY(a1),d1
00019786 6C00                       		bge.s	loc_16844
00019788 4441                       		neg.w	d1
0001978A 4443                       		neg.w	d3
0001978C                            
0001978C                            loc_16844:
0001978C B240                       		cmp.w	d0,d1
0001978E 6500                       		bcs.s	loc_1687A
00019790 7200                       		moveq	#0,d1
00019792 3228 0038                  		move.w	$38(a0),d1
00019796 9269 000C                  		sub.w	obY(a1),d1
0001979A 4841                       		swap	d1
0001979C 83C3                       		divs.w	d3,d1
0001979E 7000                       		moveq	#0,d0
000197A0 3028 0036                  		move.w	$36(a0),d0
000197A4 9069 0008                  		sub.w	obX(a1),d0
000197A8 6700                       		beq.s	loc_16866
000197AA 4840                       		swap	d0
000197AC 81C1                       		divs.w	d1,d0
000197AE                            
000197AE                            loc_16866:
000197AE 3340 0010                  		move.w	d0,obVelX(a1)
000197B2 3343 0012                  		move.w	d3,obVelY(a1)
000197B6 4A41                       		tst.w	d1
000197B8 6A00                       		bpl.s	loc_16874
000197BA 4441                       		neg.w	d1
000197BC                            
000197BC                            loc_16874:
000197BC 3141 002E                  		move.w	d1,$2E(a0)
000197C0 4E75                       		rts	
000197C2                            ; ===========================================================================
000197C2                            
000197C2                            loc_1687A:
000197C2 7000                       		moveq	#0,d0
000197C4 3028 0036                  		move.w	$36(a0),d0
000197C8 9069 0008                  		sub.w	obX(a1),d0
000197CC 4840                       		swap	d0
000197CE 81C2                       		divs.w	d2,d0
000197D0 7200                       		moveq	#0,d1
000197D2 3228 0038                  		move.w	$38(a0),d1
000197D6 9269 000C                  		sub.w	obY(a1),d1
000197DA 6700                       		beq.s	loc_16898
000197DC 4841                       		swap	d1
000197DE 83C0                       		divs.w	d0,d1
000197E0                            
000197E0                            loc_16898:
000197E0 3341 0012                  		move.w	d1,obVelY(a1)
000197E4 3342 0010                  		move.w	d2,obVelX(a1)
000197E8 4A40                       		tst.w	d0
000197EA 6A00                       		bpl.s	loc_168A6
000197EC 4440                       		neg.w	d0
000197EE                            
000197EE                            loc_168A6:
000197EE 3140 002E                  		move.w	d0,$2E(a0)
000197F2 4E75                       		rts	
000197F4                            ; End of function sub_1681C
000197F4                            
000197F4                            ; ===========================================================================
000197F4 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
000197FA 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019800 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019804 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001980A 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
00019810 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
00019816 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001981C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019822 0884 0298 0894             		dc.w $884, $298, $894
00019828 0270 0894 0190             		dc.w $270, $894, $190
0001982E 0004 0894 0690             @type03:	dc.w 4,	$894, $690
00019834 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
0001983A 1184 0498 1158             		dc.w $1184, $498, $1158
00019840 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019846 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001984C 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019852 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
00019858 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001985E 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019864 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001986A 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019870 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019876 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019876 0004 0894 0090             @type07:	dc.w 4,	$894, $90
0001987C                            
0001987C                            		include	"_incObj\78 Caterkiller.asm"
0001987C                            ; ---------------------------------------------------------------------------
0001987C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001987C                            ; ---------------------------------------------------------------------------
0001987C                            
0001987C                            Caterkiller:
0001987C 7000                       		moveq	#0,d0
0001987E 1028 0024                  		move.b	obRoutine(a0),d0
00019882 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019886 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
0001988A                            ; ===========================================================================
0001988A 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
0001988C 0000                       		dc.w Cat_Head-Cat_Index
0001988E 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019890 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019892 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019894 0000                       		dc.w Cat_Delete-Cat_Index
00019896 0000                       		dc.w loc_16CC0-Cat_Index
00019898                            
00019898 =0000003C                  cat_parent:	equ $3C		; address of parent object
00019898                            ; ===========================================================================
00019898                            
00019898                            locret_16950:
00019898 4E75                       		rts	
0001989A                            ; ===========================================================================
0001989A                            
0001989A                            Cat_Main:	; Routine 0
0001989A 117C 0007 0016             		move.b	#7,obHeight(a0)
000198A0 117C 0008 0017             		move.b	#8,obWidth(a0)
000198A6 4EB9 0000 F3EE             		jsr	(ObjectFall).l
000198AC 4EB9 0001 7D24             		jsr	(ObjFloorDist).l
000198B2 4A41                       		tst.w	d1
000198B4 6AE2                       		bpl.s	locret_16950
000198B6 D368 000C                  		add.w	d1,obY(a0)
000198BA 4268 0012                  		clr.w	obVelY(a0)
000198BE 5428 0024                  		addq.b	#2,obRoutine(a0)
000198C2 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
000198CA 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
000198D0 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
000198D6 6700                       		beq.s	@isscrapbrain
000198D8 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
000198DE                            
000198DE                            	@isscrapbrain:
000198DE 0228 0003 0001             		andi.b	#3,obRender(a0)
000198E4 0028 0004 0001             		ori.b	#4,obRender(a0)
000198EA 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
000198F0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000198F6 117C 0008 0014             		move.b	#8,obActWid(a0)
000198FC 117C 000B 0020             		move.b	#$B,obColType(a0)
00019902 3428 0008                  		move.w	obX(a0),d2
00019906 7A0C                       		moveq	#$C,d5
00019908 0828 0000 0022             		btst	#0,obStatus(a0)
0001990E 6700                       		beq.s	@noflip
00019910 4445                       		neg.w	d5
00019912                            
00019912                            	@noflip:
00019912 1C3C 0004                  		move.b	#4,d6
00019916 7600                       		moveq	#0,d3
00019918 7804                       		moveq	#4,d4
0001991A 2448                       		movea.l	a0,a2
0001991C 7202                       		moveq	#2,d1
0001991E                            
0001991E                            Cat_Loop:
0001991E 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
00019924 6600 0000                  			bne.w	Cat_ChkGone
00019928 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001992C 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019930 5406                       		addq.b	#2,d6		; alternate between the two
00019932 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019938 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001993E 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019944 137C 0008 0014             		move.b	#8,obActWid(a1)
0001994A 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019950 D445                       		add.w	d5,d2
00019952 3342 0008                  		move.w	d2,obX(a1)
00019956 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001995C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019962 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019968 137C 0008 001A             		move.b	#8,obFrame(a1)
0001996E 234A 003C                  		move.l	a2,cat_parent(a1)
00019972 1344 003C                  		move.b	d4,cat_parent(a1)
00019976 5804                       		addq.b	#4,d4
00019978 2449                       		movea.l	a1,a2
0001997A                            
0001997A                            	@fail:
0001997A 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
0001997E                            
0001997E 117C 0007 002A             		move.b	#7,$2A(a0)
00019984 4228 003C                  		clr.b	cat_parent(a0)
00019988                            
00019988                            Cat_Head:	; Routine 2
00019988 4A28 0022                  		tst.b	obStatus(a0)
0001998C 6B00 0000                  		bmi.w	loc_16C96
00019990 7000                       		moveq	#0,d0
00019992 1028 0025                  		move.b	ob2ndRout(a0),d0
00019996 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
0001999A 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
0001999E 1228 002B                  		move.b	$2B(a0),d1
000199A2 6A00                       		bpl.s	@display
000199A4 43F9 0000 0000             		lea	(Ani_Cat).l,a1
000199AA 1028 0026                  		move.b	obAngle(a0),d0
000199AE 0240 007F                  		andi.w	#$7F,d0
000199B2 5828 0026                  		addq.b	#4,obAngle(a0)
000199B6 1031 0000                  		move.b	(a1,d0.w),d0
000199BA 6A00                       		bpl.s	@animate
000199BC 08A8 0007 002B             		bclr	#7,$2B(a0)
000199C2 6000                       		bra.s	@display
000199C4                            
000199C4                            	@animate:
000199C4 0201 0010                  		andi.b	#$10,d1
000199C8 D001                       		add.b	d1,d0
000199CA 1140 001A                  		move.b	d0,obFrame(a0)
000199CE                            
000199CE                            	@display:
000199EC 4EF9 0000 F43A             		jmp	(DisplaySprite).l
000199F2                            
000199F2                            	Cat_ChkGone:
000199F2 45F8 FC00                  		lea	(v_objstate).w,a2
000199F6 7000                       		moveq	#0,d0
000199F8 1028 0023                  		move.b	obRespawnNo(a0),d0
000199FC 6700                       		beq.s	@delete
000199FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019A04                            
00019A04                            	@delete:
00019A04 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019A0A 4E75                       		rts	
00019A0C                            ; ===========================================================================
00019A0C                            
00019A0C                            Cat_Delete:	; Routine $A
00019A0C 4EF9 0000 F47A             		jmp	(DeleteObject).l
00019A12                            ; ===========================================================================
00019A12 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019A14 0000                       		dc.w loc_16B02-Cat_Index2
00019A16                            ; ===========================================================================
00019A16                            
00019A16                            @wait:
00019A16 5328 002A                  		subq.b	#1,$2A(a0)
00019A1A 6B00                       		bmi.s	@move
00019A1C 4E75                       		rts	
00019A1E                            ; ===========================================================================
00019A1E                            
00019A1E                            @move:
00019A1E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019A22 117C 0010 002A             		move.b	#$10,$2A(a0)
00019A28 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019A2E 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019A34 0868 0004 002B             		bchg	#4,$2B(a0)
00019A3A 6600                       		bne.s	loc_16AFC
00019A3C 4268 0010                  		clr.w	obVelX(a0)
00019A40 4468 001C                  		neg.w	obAnim(a0)
00019A44                            
00019A44                            loc_16AFC:
00019A44 08E8 0007 002B             		bset	#7,$2B(a0)
00019A4A                            
00019A4A                            loc_16B02:
00019A4A 5328 002A                  		subq.b	#1,$2A(a0)
00019A4E 6B00                       		bmi.s	@loc_16B5E
00019A50 4A68 0010                  			tst.w	obVelX(a0)
00019A54 6700                       			beq.s	@notmoving
00019A56 2428 0008                  			move.l	obX(a0),d2
00019A5A 2602                       			move.l	d2,d3
00019A5C 3028 0010                  		move.w	obVelX(a0),d0
00019A60 0828 0000 0022             		btst	#0,obStatus(a0)
00019A66 6700                       		beq.s	@noflip
00019A68 4440                       		neg.w	d0
00019A6A                            
00019A6A                            	@noflip:
00019A6A 48C0                       		ext.l	d0
00019A6C E180                       		asl.l	#8,d0
00019A6E D480                       		add.l	d0,d2
00019A70 2142 0008                  		move.l	d2,obX(a0)
00019A74 4843                       			swap	d3
00019A76 B668 0008                  			cmp.w	obX(a0),d3
00019A7A 6700                       			beq.s	@notmoving
00019A7C 4EB9 0001 7D24             			jsr	(ObjFloorDist).l
00019A82 0C41 FFF8                  			cmpi.w	#-8,d1
00019A86 6D00                       			blt.s	@loc_16B70
00019A88 0C41 000C                  			cmpi.w	#$C,d1
00019A8C 6C00                       			bge.s	@loc_16B70
00019A8E D368 000C                  			add.w	d1,obY(a0)
00019A92 7000                       		moveq	#0,d0
00019A94 1028 003C                  		move.b	cat_parent(a0),d0
00019A98 5228 003C                  		addq.b	#1,cat_parent(a0)
00019A9C 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019AA2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019AA6                            
00019AA6                            	@notmoving:
00019AA6 4E75                       		rts	
00019AA8                            ; ===========================================================================
00019AA8                            
00019AA8                            @loc_16B5E:
00019AA8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019AAC 117C 0007 002A             		move.b	#7,$2A(a0)
00019AB2 4268 0010                  			clr.w	obVelX(a0)
00019AB6 4268 001C                  			clr.w	obAnim(a0)
00019ABA 4E75                       		rts	
00019ABC                            ; ===========================================================================
00019ABC                            
00019ABC                            @loc_16B70:
00019ABC 7000                       			moveq	#0,d0
00019ABE 1028 003C                  			move.b	cat_parent(a0),d0
00019AC2 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019AC8 4468 000A                  			neg.w	obX+2(a0)
00019ACC 6700                       			beq.s	@loc_1730A
00019ACE 0828 0000 0022             			btst	#0,obStatus(a0)
00019AD4 6700                       			beq.s	@loc_1730A
00019AD6 5368 0008                  			subq.w	#1,obX(a0)
00019ADA 5228 003C                  			addq.b	#1,cat_parent(a0)
00019ADE 7000                       			moveq	#0,d0
00019AE0 1028 003C                  			move.b	cat_parent(a0),d0
00019AE4 4230 002C                  			clr.b	$2C(a0,d0)
00019AE8                            	@loc_1730A:
00019AE8 0868 0000 0022             			bchg	#0,obStatus(a0)
00019AEE 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019AF4 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AF8 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019AFE 4E75                       		rts	
00019B00                            ; ===========================================================================
00019B00                            
00019B00                            Cat_BodySeg2:	; Routine 6
00019B00 2268 003C                  		movea.l	cat_parent(a0),a1
00019B04 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019B0A 6A00                       		bpl.s	Cat_BodySeg1
00019B0C 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019B12 1028 0026                  		move.b	obAngle(a0),d0
00019B16 0240 007F                  		andi.w	#$7F,d0
00019B1A 5828 0026                  		addq.b	#4,obAngle(a0)
00019B1E 4A31 0004                  		tst.b	4(a1,d0.w)
00019B22 6A00                       		bpl.s	Cat_AniBody
00019B24 5828 0026                  		addq.b	#4,obAngle(a0)
00019B28                            
00019B28                            Cat_AniBody:
00019B28 1031 0000                  		move.b	(a1,d0.w),d0
00019B2C 5000                       		addq.b	#8,d0
00019B2E 1140 001A                  		move.b	d0,obFrame(a0)
00019B32                            
00019B32                            Cat_BodySeg1:	; Routine 4, 8
00019B32 2268 003C                  		movea.l	cat_parent(a0),a1
00019B36 4A28 0022                  		tst.b	obStatus(a0)
00019B3A 6B00 0000                  		bmi.w	loc_16C90
00019B3E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019B44 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019B4A 6700 0000                  		beq.w	loc_16C64
00019B4E 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019B54 3029 0010                  		move.w	obVelX(a1),d0
00019B58 D068 001C                  			add.w	obAnim(a0),d0
00019B5C 3140 0010                  		move.w	d0,obVelX(a0)
00019B60 2428 0008                  		move.l	obX(a0),d2
00019B64 2602                       		move.l	d2,d3
00019B66 3028 0010                  		move.w	obVelX(a0),d0
00019B6A 0828 0000 0022             		btst	#0,obStatus(a0)
00019B70 6700                       		beq.s	loc_16C0C
00019B72 4440                       		neg.w	d0
00019B74                            
00019B74                            loc_16C0C:
00019B74 48C0                       		ext.l	d0
00019B76 E180                       		asl.l	#8,d0
00019B78 D480                       		add.l	d0,d2
00019B7A 2142 0008                  		move.l	d2,obX(a0)
00019B7E 4843                       		swap	d3
00019B80 B668 0008                  		cmp.w	obX(a0),d3
00019B84 6700                       		beq.s	loc_16C64
00019B86 7000                       		moveq	#0,d0
00019B88 1028 003C                  		move.b	cat_parent(a0),d0
00019B8C 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019B90 0C01 0080                  		cmpi.b	#$80,d1
00019B94 6600                       		bne.s	loc_16C50
00019B96 1181 002C                  			move.b	d1,$2C(a0,d0)
00019B9A 4468 000A                  			neg.w	obX+2(a0)
00019B9E 6700                       			beq.s	locj_173E4
00019BA0 0828 0000 0022             			btst	#0,obStatus(a0)
00019BA6 6700                       			beq.s	locj_173E4
00019BA8 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019BAE 6600                       			bne.s	locj_173E4
00019BB0 5368 0008                  			subq.w	#1,obX(a0)
00019BB4 5228 003C                  			addq.b	#1,cat_parent(a0)
00019BB8 7000                       			moveq	#0,d0
00019BBA 1028 003C                  			move.b	cat_parent(a0),d0
00019BBE 4230 002C                  			clr.b	$2C(a0,d0)
00019BC2                            	locj_173E4:
00019BC2 0868 0000 0022             		bchg	#0,obStatus(a0)
00019BC8 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019BCE 5228 003C                  		addq.b	#1,cat_parent(a0)
00019BD2 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019BD8 6000                       		bra.s	loc_16C64
00019BDA                            ; ===========================================================================
00019BDA                            
00019BDA                            loc_16C50:
00019BDA 4881                       		ext.w	d1
00019BDC D368 000C                  		add.w	d1,obY(a0)
00019BE0 5228 003C                  		addq.b	#1,cat_parent(a0)
00019BE4 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019BEA 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019BEE                            
00019BEE                            loc_16C64:
00019BEE 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019BF4 6700                       		beq.s	loc_16C90
00019BF6 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019BFA 6700                       		beq.s	loc_16C7C
00019BFC 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019C02 6600                       		bne.s	loc_16C82
00019C04                            
00019C04                            loc_16C7C:
00019C04 4229 0020                  		clr.b    $20(a1)
00019C08 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019C0E                            
00019C0E                            loc_16C82:
00019C0E 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00019C14                            
00019C14                            ; ===========================================================================
00019C14 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019C1C                            ; ===========================================================================
00019C1C                            
00019C1C                            loc_16C90:
00019C1C 08E9 0007 0022             		bset	#7,obStatus(a1)
00019C22                            
00019C22                            loc_16C96:
00019C22 7000                       		moveq	#0,d0
00019C24 1028 0024                  		move.b	obRoutine(a0),d0
00019C28 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019C2C 0828 0000 0022             		btst	#0,obStatus(a0)
00019C32 6700                       		beq.s	loc_16CAA
00019C34 4440                       		neg.w	d0
00019C36                            
00019C36                            loc_16CAA:
00019C36 3140 0010                  		move.w	d0,obVelX(a0)
00019C3A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019C40 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019C46 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019C4C                            
00019C4C                            loc_16CC0:	; Routine $C
00019C4C 4EB9 0000 F3EE             		jsr	(ObjectFall).l
00019C52 4A68 0012                  		tst.w	obVelY(a0)
00019C56 6B00                       		bmi.s	loc_16CE0
00019C58 4EB9 0001 7D24             		jsr	(ObjFloorDist).l
00019C5E 4A41                       		tst.w	d1
00019C60 6A00                       		bpl.s	loc_16CE0
00019C62 D368 000C                  		add.w	d1,obY(a0)
00019C66 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019C6C                            
00019C6C                            loc_16CE0:
00019C6C 4A28 0001                  		tst.b	obRender(a0)
00019C70 6A00 FD80                  		bpl.w	Cat_ChkGone
00019C74 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00019C74 4EF9 0000 F43A             		jmp	(DisplaySprite).l
00019C7A                            		include	"_anim\Caterkiller.asm"
00019C7A                            ; ---------------------------------------------------------------------------
00019C7A                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019C7A                            ; ---------------------------------------------------------------------------
00019C7A 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019C8A 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019C9A 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019CAA 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019CBA 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019CCA 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019CDA 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019CEA 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019CFA                            		even
00019CFA                            		even
00019CFA                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019CFA                            ; ---------------------------------------------------------------------------
00019CFA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019CFA                            ; ---------------------------------------------------------------------------
00019CFA                            Map_Cat_internal:
00019CFA 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019CFC 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019CFE 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019D00 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019D02 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019D04 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019D06 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019D08 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019D0A 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019D0C 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019D0E 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019D10 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019D12 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019D14 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019D16 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019D18 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019D1A 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019D1C 0000                       		dc.w byte_16E04-Map_Cat_internal
00019D1E 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019D20 0000                       		dc.w byte_16E10-Map_Cat_internal
00019D22 0000                       		dc.w byte_16E16-Map_Cat_internal
00019D24 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019D26 0000                       		dc.w byte_16E22-Map_Cat_internal
00019D28 0000                       		dc.w byte_16E28-Map_Cat_internal
00019D2A 01                         byte_16D9E:	dc.b 1
00019D2B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019D30 01                         byte_16DA4:	dc.b 1
00019D31 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019D36 01                         byte_16DAA:	dc.b 1
00019D37 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019D3C 01                         byte_16DB0:	dc.b 1
00019D3D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019D42 01                         byte_16DB6:	dc.b 1
00019D43 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019D48 01                         byte_16DBC:	dc.b 1
00019D49 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019D4E 01                         byte_16DC2:	dc.b 1
00019D4F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019D54 01                         byte_16DC8:	dc.b 1
00019D55 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019D5A 01                         byte_16DCE:	dc.b 1
00019D5B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019D60 01                         byte_16DD4:	dc.b 1
00019D61 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019D66 01                         byte_16DDA:	dc.b 1
00019D67 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019D6C 01                         byte_16DE0:	dc.b 1
00019D6D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019D72 01                         byte_16DE6:	dc.b 1
00019D73 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019D78 01                         byte_16DEC:	dc.b 1
00019D79 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019D7E 01                         byte_16DF2:	dc.b 1
00019D7F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019D84 01                         byte_16DF8:	dc.b 1
00019D85 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019D8A 01                         byte_16DFE:	dc.b 1
00019D8B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019D90 01                         byte_16E04:	dc.b 1
00019D91 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019D96 01                         byte_16E0A:	dc.b 1
00019D97 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019D9C 01                         byte_16E10:	dc.b 1
00019D9D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019DA2 01                         byte_16E16:	dc.b 1
00019DA3 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019DA8 01                         byte_16E1C:	dc.b 1
00019DA9 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019DAE 01                         byte_16E22:	dc.b 1
00019DAF EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019DB4 01                         byte_16E28:	dc.b 1
00019DB5 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019DBA                            		even
00019DBA                            		even
00019DBA                            
00019DBA                            		include	"_incObj\79 Lamppost.asm"
00019DBA                            ; ---------------------------------------------------------------------------
00019DBA                            ; Object 79 - lamppost
00019DBA                            ; ---------------------------------------------------------------------------
00019DBA                            
00019DBA                            Lamppost:
00019DBA 7000                       		moveq	#0,d0
00019DBC 1028 0024                  		move.b	obRoutine(a0),d0
00019DC0 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019DC4 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019DC8 4EF9 0001 14DA             		jmp	(RememberState).l
00019DCE                            ; ===========================================================================
00019DCE 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019DD0 0000                       		dc.w Lamp_Blue-Lamp_Index
00019DD2 0000                       		dc.w Lamp_Finish-Lamp_Index
00019DD4 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019DD6                            
00019DD6 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019DD6 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019DD6 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019DD6                            ; ===========================================================================
00019DD6                            
00019DD6                            Lamp_Main:	; Routine 0
00019DD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00019DDA 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019DE2 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019DE8 117C 0004 0001             		move.b	#4,obRender(a0)
00019DEE 117C 0008 0014             		move.b	#8,obActWid(a0)
00019DF4 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019DFA 45F8 FC00                  		lea	(v_objstate).w,a2
00019DFE 7000                       		moveq	#0,d0
00019E00 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E04 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019E0A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019E10 6600                       		bne.s	@red
00019E12 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019E16 0201 007F                  		andi.b	#$7F,d1
00019E1A 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019E1E 0202 007F                  		andi.b	#$7F,d2
00019E22 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019E24 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019E26                            
00019E26                            @red:
00019E26 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E2C 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019E32 117C 0003 001A             		move.b	#3,obFrame(a0)
00019E38 4E75                       		rts	
00019E3A                            
00019E3A                            ; ===========================================================================
00019E3A                            
00019E3A                            Lamp_Blue:	; Routine 2
00019E3A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019E3E 6600 0000                  		bne.w	@donothing	; if yes, branch
00019E42 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019E46 6B00 0000                  		bmi.w	@donothing
00019E4A 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019E4E 0201 007F                  		andi.b	#$7F,d1
00019E52 1428 0028                  		move.b	obSubtype(a0),d2
00019E56 0202 007F                  		andi.b	#$7F,d2
00019E5A B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019E5C 6500                       		bcs.s	@chkhit		; if yes, branch
00019E5E 45F8 FC00                  		lea	(v_objstate).w,a2
00019E62 7000                       		moveq	#0,d0
00019E64 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E68 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E6E 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019E74 117C 0003 001A             		move.b	#3,obFrame(a0)
00019E7A 6000 0000                  		bra.w	@donothing
00019E7E                            ; ===========================================================================
00019E7E                            
00019E7E                            @chkhit:
00019E7E 3038 D008                  		move.w	(v_player+obX).w,d0
00019E82 9068 0008                  		sub.w	obX(a0),d0
00019E86 5040                       		addq.w	#8,d0
00019E88 0C40 0010                  		cmpi.w	#$10,d0
00019E8C 6400 0000                  		bcc.w	@donothing
00019E90 3038 D00C                  		move.w	(v_player+obY).w,d0
00019E94 9068 000C                  		sub.w	obY(a0),d0
00019E98 0640 0040                  		addi.w	#$40,d0
00019E9C 0C40 0068                  		cmpi.w	#$68,d0
00019EA0 6400                       		bcc.s	@donothing
00019EA2                            
00019EAC 5428 0024                  		addq.b	#2,obRoutine(a0)
00019EB0 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
00019EB6 6600                       		bne.s	@fail
00019EB8 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019EBC 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019EC2 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019EC8 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019ECE 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019ED4 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019EDC 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019EE2 137C 0004 0001             		move.b	#4,obRender(a1)
00019EE8 137C 0008 0014             		move.b	#8,obActWid(a1)
00019EEE 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019EF4 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019EFA 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019F00                            
00019F00                            	@fail:
00019F00 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019F06 6100 0000                  		bsr.w	Lamp_StoreInfo
00019F0A 45F8 FC00                  		lea	(v_objstate).w,a2
00019F0E 7000                       		moveq	#0,d0
00019F10 1028 0023                  		move.b	obRespawnNo(a0),d0
00019F14 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019F1A                            
00019F1A                            	@donothing:
00019F1A 4E75                       		rts	
00019F1C                            ; ===========================================================================
00019F1C                            
00019F1C                            Lamp_Finish:	; Routine 4	
00019F1C 4E75                       		rts	
00019F1E                            ; ===========================================================================
00019F1E                            
00019F1E                            Lamp_Twirl:	; Routine 6
00019F1E 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019F22 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019F24 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019F2A                            
00019F2A                            	@continue:
00019F2A 1028 0026                  		move.b	obAngle(a0),d0
00019F2E 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019F34 0400 0040                  		subi.b	#$40,d0
00019F38 4EB9 0000 3B42             		jsr	(CalcSine).l
00019F3E C3FC 0C00                  		muls.w	#$C00,d1
00019F42 4841                       		swap	d1
00019F44 D268 0030                  		add.w	lamp_origX(a0),d1
00019F48 3141 0008                  		move.w	d1,obX(a0)
00019F4C C1FC 0C00                  		muls.w	#$C00,d0
00019F50 4840                       		swap	d0
00019F52 D068 0032                  		add.w	lamp_origY(a0),d0
00019F56 3140 000C                  		move.w	d0,obY(a0)
00019F5A 4E75                       		rts	
00019F5C                            ; ===========================================================================
00019F5C                            ; ---------------------------------------------------------------------------
00019F5C                            ; Subroutine to	store information when you hit a lamppost
00019F5C                            ; ---------------------------------------------------------------------------
00019F5C                            
00019F5C                            Lamp_StoreInfo:
00019F5C 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00019F62 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00019F68 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
00019F6E 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
00019F74 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
00019F7A 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
00019F80 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
00019F86 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
00019F8C 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
00019F92 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
00019F98 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
00019F9E 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
00019FA4 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
00019FAA 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
00019FB0 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
00019FB6 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
00019FBC 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
00019FC2 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
00019FC8 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
00019FCE 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
00019FD4 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
00019FDA 4E75                       		rts	
00019FDC                            
00019FDC                            ; ---------------------------------------------------------------------------
00019FDC                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019FDC                            ; ---------------------------------------------------------------------------
00019FDC                            
00019FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019FDC                            
00019FDC                            
00019FDC                            Lamp_LoadInfo:
00019FDC 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
00019FE2 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
00019FE8 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
00019FEE 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
00019FF4 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
00019FFA 4278 FE20                  		clr.w	(v_rings).w
00019FFE 4238 FE1B                  		clr.b	(v_lifecount).w
0001A002 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A008 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A00E 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A012 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A018 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A01E 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A024 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A02A 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A030 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A036 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A03C 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A042 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A048 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A04E 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A054 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A05A 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A060 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A066 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A068                            
0001A068 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A06E 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A074 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A07A                            
0001A07A                            	@notlabyrinth:
0001A07A 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A07E 6A00                       		bpl.s	locret_170F6
0001A080 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A084 0440 00A0                  		subi.w	#$A0,d0
0001A088 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A08C                            
0001A08C                            locret_170F6:
0001A08C 4E75                       		rts	
0001A08C 4E75                       		rts	
0001A08E                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A08E                            ; --------------------------------------------------------------------------------
0001A08E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A08E                            ; --------------------------------------------------------------------------------
0001A08E                            
0001A08E                            SME_JfaKr:	
0001A08E 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A092 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A096 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A098 0A                         SME_JfaKr_A:	dc.b $A	
0001A099 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A09E E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A0A3 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A0A8 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A0AD F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A0B2 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A0B7 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A0BC 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A0C1 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A0C6 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A0CB 08                         SME_JfaKr_3D:	dc.b 8	
0001A0CC E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A0D1 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A0D6 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A0DB F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A0E0 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A0E5 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A0EA 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A0EF 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A0F4 02                         SME_JfaKr_66:	dc.b 2	
0001A0F5 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A0FA F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A0FF 0A                         SME_JfaKr_71:	dc.b $A	
0001A100 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A105 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A10A F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A10F F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A114 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A119 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A11E 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A123 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A128 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A12D D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A132 0A                         SME_JfaKr_A4:	dc.b $A	
0001A133 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A138 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A13D F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A142 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A147 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A14C 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A151 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A156 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A15B D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A160 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A166 00                         		even
0001A166 00                         		even
0001A166                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A166                            ; ---------------------------------------------------------------------------
0001A166                            ; Object 7D - hidden points at the end of a level
0001A166                            ; ---------------------------------------------------------------------------
0001A166                            
0001A166                            HiddenBonus:
0001A166 7000                       		moveq	#0,d0
0001A168 1028 0024                  		move.b	obRoutine(a0),d0
0001A16C 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A170 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A174                            ; ===========================================================================
0001A174 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A176 0000                       		dc.w Bonus_Display-Bonus_Index
0001A178                            
0001A178 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A178                            ; ===========================================================================
0001A178                            
0001A178                            Bonus_Main:	; Routine 0
0001A178 7410                       		moveq	#$10,d2
0001A17A 3602                       		move.w	d2,d3
0001A17C D643                       		add.w	d3,d3
0001A17E 43F8 D000                  		lea	(v_player).w,a1
0001A182 3029 0008                  		move.w	obX(a1),d0
0001A186 9068 0008                  		sub.w	obX(a0),d0
0001A18A D042                       		add.w	d2,d0
0001A18C B043                       		cmp.w	d3,d0
0001A18E 6400                       		bcc.s	bonu_chkdel
0001A190 3229 000C                  		move.w	obY(a1),d1
0001A194 9268 000C                  		sub.w	obY(a0),d1
0001A198 D242                       		add.w	d2,d1
0001A19A B243                       		cmp.w	d3,d1
0001A19C 6400                       		bcc.s	bonu_chkdel
0001A19E 4A78 FE08                  		tst.w	(v_debuguse).w
0001A1A2 6600                       		bne.s	bonu_chkdel
0001A1A4 4A38 F7CD                  		tst.b	(f_bigring).w
0001A1A8 6600                       		bne.s	bonu_chkdel
0001A1AA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A1AE 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A1B6 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A1BC 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A1C2 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A1C8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A1CE 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A1D4 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A1E4 7000                       		moveq	#0,d0
0001A1E6 1028 0028                  		move.b	obSubtype(a0),d0
0001A1EA D040                       		add.w	d0,d0
0001A1EC 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A1F0 4EB9 0000 0000             		jsr	(AddPoints).l
0001A1F6                            
0001A1F6                            bonu_chkdel:
0001A212 4E75                       		rts	
0001A214                            
0001A214                            	@delete:
0001A214 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001A21A                            
0001A21A                            ; ===========================================================================
0001A21A 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A21C 03E8                       		dc.w 1000
0001A21E 0064                       		dc.w 100
0001A220 000A                       		dc.w 10
0001A222                            ; ===========================================================================
0001A222                            
0001A222                            Bonus_Display:	; Routine 2
0001A222 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A226 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A244 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001A24A                            
0001A24A                            Bonus_Display_Delete:	
0001A24A 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001A24A 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001A250                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A250                            ; ---------------------------------------------------------------------------
0001A250                            ; Sprite mappings - hidden points at the end of	a level
0001A250                            ; ---------------------------------------------------------------------------
0001A250                            Map_Bonus_internal:
0001A250 0000                       		dc.w @blank-Map_Bonus_internal
0001A252 0000                       		dc.w @10000-Map_Bonus_internal
0001A254 0000                       		dc.w @1000-Map_Bonus_internal
0001A256 0000                       		dc.w @100-Map_Bonus_internal
0001A258 00                         @blank:		dc.b 0
0001A259 01                         @10000:		dc.b 1
0001A25A F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A25F 01                         @1000:		dc.b 1
0001A260 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A265 01                         @100:		dc.b 1
0001A266 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A26C 00                         		even
0001A26C 00                         		even
0001A26C                            
0001A26C                            		include	"_incObj\8A Credits.asm"
0001A26C                            ; ---------------------------------------------------------------------------
0001A26C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A26C                            ; ---------------------------------------------------------------------------
0001A26C                            
0001A26C                            CreditsText:
0001A26C 7000                       		moveq	#0,d0
0001A26E 1028 0024                  		move.b	obRoutine(a0),d0
0001A272 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A276 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A27A                            ; ===========================================================================
0001A27A 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A27C 0000                       		dc.w Cred_Display-Cred_Index
0001A27E                            ; ===========================================================================
0001A27E                            
0001A27E                            Cred_Main:	; Routine 0
0001A27E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A282 317C 0120 0008             		move.w	#$120,obX(a0)
0001A288 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A28E 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A296 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A29C 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A2A0 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A2A4 117C 0000 0001             		move.b	#0,obRender(a0)
0001A2AA 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A2B0                            
0001A2B0 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A2B6 6600                       		bne.s	Cred_Display	; if not, branch
0001A2B8                            
0001A2B8 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A2BE 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A2C4 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A2C8 6700                       		beq.s	Cred_Display	; if not, branch
0001A2CA 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A2D0 6600                       		bne.s	Cred_Display	; if not, branch
0001A2D2 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A2D8 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A2DE 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001A2E4                            ; ===========================================================================
0001A2E4                            
0001A2E4                            Cred_Display:	; Routine 2
0001A2E4 4EF9 0000 F43A             		jmp	DisplaySprite
0001A2E4 4EF9 0000 F43A             		jmp	DisplaySprite
0001A2EA                            Map_Cred:	include	"_maps\Credits.asm"
0001A2EA                            ; ---------------------------------------------------------------------------
0001A2EA                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A2EA                            ; ---------------------------------------------------------------------------
0001A2EA                            Map_Cred_internal:
0001A2EA 0000                       		dc.w @staff-Map_Cred_internal
0001A2EC 0000                       		dc.w @gameplan-Map_Cred_internal
0001A2EE 0000                       		dc.w @program-Map_Cred_internal
0001A2F0 0000                       		dc.w @character-Map_Cred_internal
0001A2F2 0000                       		dc.w @design-Map_Cred_internal
0001A2F4 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A2F6 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A2F8 0000                       		dc.w @thanks-Map_Cred_internal
0001A2FA 0000                       		dc.w @presentedby-Map_Cred_internal
0001A2FC 0000                       		dc.w @tryagain-Map_Cred_internal
0001A2FE 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A300 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A301 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A306 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A30B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A310 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A315 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A31A F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A31F F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A324 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A329 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A32E F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A333 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A338 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A33D F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A342 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A347 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A348 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A34D 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A352 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A357 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A35C 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A361 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A366 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A36B 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A370 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A375                            
0001A375 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A37A B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A37F B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A384 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A389 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A38E 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A38F 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A394 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A399 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A39E 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A3A3 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A3A8 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A3AD 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A3B2                            
0001A3B2 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A3B7 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A3BC B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A3C1 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A3C6 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A3CB B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A3D0 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A3D5 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A3DA                            
0001A3DA D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A3DF D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A3E4                            
0001A3E4 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A3E9 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A3EE D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A3F3 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A3F8 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A3FD D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A402                            
0001A402 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A407 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A40C F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A411 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A412 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A417 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A41C 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A421                            
0001A421 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A426 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A42B B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A430 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A435 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A43A 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A43B 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A440 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A445 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A44A 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A44F 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A454 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A459                            
0001A459 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A45E B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A463 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A468 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A46D B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A472 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A473 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A478 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A47D 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A482 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A487 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A48C 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A491 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A496 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A49B 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A4A0 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A4A5                            
0001A4A5 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A4AA B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A4AF B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A4B4 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A4B9 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A4BE B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A4C3 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A4C8 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A4CD                            
0001A4CD D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A4D2 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A4D7 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A4DC D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A4E1 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A4E6 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A4EB D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A4F0 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A4F5 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A4FA D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A4FF 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A500 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A505 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A50A D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A50F D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A514 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A519 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A51E D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A523 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A528 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A52D D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A532 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A537 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A53C 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A541 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A546 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A54B 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A550 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A555 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A55A 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A55F 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A564 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A569 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A56E 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A573 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A574 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A579 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A57E 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A583 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A588 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A58D 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A592 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A597 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A59C                            
0001A59C B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A5A1 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A5A6 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A5AB B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A5B0 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A5B5 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A5BA                            
0001A5BA D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A5BF D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A5C4 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A5C9 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A5CA 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A5CF 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A5D4 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A5D9 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A5DE 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A5E3 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A5E8 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A5ED 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A5F2 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A5F7                            
0001A5F7 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A5FC B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A601                            
0001A601 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A606 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A60B D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A610 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A615 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A61A 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A61B 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A620 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A625 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A62A 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A62F 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A634 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A639 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A63E 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A643 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A644 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A649 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A64E E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A653 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A658 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A65D E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A662                            
0001A662 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A667 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A66C 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A671 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A676 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A67B 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A680 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A685 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A68A                            		even
0001A68A                            		even
0001A68A                            
0001A68A                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A68A                            ; ---------------------------------------------------------------------------
0001A68A                            ; Object 3D - Eggman (GHZ)
0001A68A                            ; ---------------------------------------------------------------------------
0001A68A                            
0001A68A                            BossGreenHill:
0001A68A 7000                       		moveq	#0,d0
0001A68C 1028 0024                  		move.b	obRoutine(a0),d0
0001A690 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A694 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A698                            ; ===========================================================================
0001A698 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A69A 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A69C 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A69E 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A6A0                            
0001A6A0 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A6A2 0401                       		dc.b 4,	1
0001A6A4 0607                       		dc.b 6,	7
0001A6A6                            ; ===========================================================================
0001A6A6                            
0001A6A6                            BGHZ_Main:	; Routine 0
0001A6A6 45F9 0001 A6A0             		lea	(BGHZ_ObjData).l,a2
0001A6AC 2248                       		movea.l	a0,a1
0001A6AE 7202                       		moveq	#2,d1
0001A6B0 6000                       		bra.s	BGHZ_LoadBoss
0001A6B2                            ; ===========================================================================
0001A6B2                            
0001A6B2                            BGHZ_Loop:
0001A6B2 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001A6B8 6600                       		bne.s	loc_17772
0001A6BA                            
0001A6BA                            BGHZ_LoadBoss:
0001A6BA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A6BE 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A6C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A6C8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A6CE 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A6D6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A6DC 137C 0004 0001             		move.b	#4,obRender(a1)
0001A6E2 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A6E8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A6EE 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A6F2 2348 0034                  		move.l	a0,$34(a1)
0001A6F6 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A6FA                            
0001A6FA                            loc_17772:
0001A6FA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A700 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A706 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A70C 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A712                            
0001A712                            
0001A712                            BGHZ_ShipMain:	; Routine 2
0001A712 7000                       		moveq	#0,d0
0001A714 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A718 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A71C 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A720 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A726 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001A72C 1028 0022                  		move.b	obStatus(a0),d0
0001A730 0200 0003                  		andi.b	#3,d0
0001A734 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A73A 8128 0001                  		or.b	d0,obRender(a0)
0001A73E 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001A744                            ; ===========================================================================
0001A744 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A746 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A748 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A74A 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A74C 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A74E 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A750 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A752                            ; ===========================================================================
0001A752                            
0001A752                            BGHZ_ShipStart:
0001A752 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A758 6100 0000                  		bsr.w	BossMove
0001A75C 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A762 6600                       		bne.s	loc_177E6
0001A764 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A76A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A76E                            
0001A76E                            loc_177E6:
0001A76E 1028 003F                  		move.b	$3F(a0),d0
0001A772 4EB9 0000 3B42             		jsr	(CalcSine).l
0001A778 EC40                       		asr.w	#6,d0
0001A77A D068 0038                  		add.w	$38(a0),d0
0001A77E 3140 000C                  		move.w	d0,obY(a0)
0001A782 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A788 5428 003F                  		addq.b	#2,$3F(a0)
0001A78C 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A792 6400                       		bcc.s	locret_1784A
0001A794 4A28 0022                  		tst.b	obStatus(a0)
0001A798 6B00                       		bmi.s	loc_1784C
0001A79A 4A28 0020                  		tst.b	obColType(a0)
0001A79E 6600                       		bne.s	locret_1784A
0001A7A0 4A28 003E                  		tst.b	$3E(a0)
0001A7A4 6600                       		bne.s	BGHZ_ShipFlash
0001A7A6 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A7B6                            
0001A7B6                            BGHZ_ShipFlash:
0001A7B6 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A7BA 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A7BC 4A51                       		tst.w	(a1)
0001A7BE 6600                       		bne.s	loc_1783C
0001A7C0 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A7C4                            
0001A7C4                            loc_1783C:
0001A7C4 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A7C6 5328 003E                  		subq.b	#1,$3E(a0)
0001A7CA 6600                       		bne.s	locret_1784A
0001A7CC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A7D2                            
0001A7D2                            locret_1784A:
0001A7D2 4E75                       		rts	
0001A7D4                            ; ===========================================================================
0001A7D4                            
0001A7D4                            loc_1784C:
0001A7D4 7064                       		moveq	#100,d0
0001A7D6 6100 0000                  		bsr.w	AddPoints
0001A7DA 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A7E0 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A7E6 4E75                       		rts	
0001A7E6 4E75                       		rts	
0001A7E8                            
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            ; Defeated boss	subroutine
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            
0001A7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A7E8                            
0001A7E8                            
0001A7E8                            BossDefeated:
0001A7E8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A7EC 0200 0007                  		andi.b	#7,d0
0001A7F0 6600                       		bne.s	locret_178A2
0001A7F2 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001A7F8 6600                       		bne.s	locret_178A2
0001A7FA 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A7FE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A804 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A80A 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001A810 3200                       		move.w	d0,d1
0001A812 7200                       		moveq	#0,d1
0001A814 1200                       		move.b	d0,d1
0001A816 E409                       		lsr.b	#2,d1
0001A818 0441 0020                  		subi.w	#$20,d1
0001A81C D369 0008                  		add.w	d1,obX(a1)
0001A820 E048                       		lsr.w	#8,d0
0001A822 E608                       		lsr.b	#3,d0
0001A824 D169 000C                  		add.w	d0,obY(a1)
0001A828                            
0001A828                            locret_178A2:
0001A828 4E75                       		rts	
0001A82A                            ; End of function BossDefeated
0001A82A                            
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            ; Subroutine to	move a boss
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            
0001A82A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A82A                            
0001A82A                            
0001A82A                            BossMove:
0001A82A 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A830 E188                       		lsl.l	#8,d0
0001A832 D1A8 0030                  		add.l	d0,$30(a0)
0001A836 E18A                       		lsl.l	#8,d2
0001A838 D5A8 0038                  		add.l	d2,$38(a0)
0001A83C 4E75                       		rts
0001A83E                            ; End of function BossMove
0001A83E                            
0001A83E                            ; ===========================================================================
0001A83E                            
0001A83E                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A83E                            
0001A83E                            BGHZ_MakeBall:
0001A83E 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A844 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A84A 6100 FFDE                  		bsr.w	BossMove
0001A84E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001A854 6600                       		bne.s	loc_17916
0001A856 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A85C 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A862 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A866 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001A86C 6600                       		bne.s	loc_17910
0001A86E 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A872 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A878 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A87E 2348 0034                  		move.l	a0,$34(a1)
0001A882                            
0001A882                            loc_17910:
0001A882 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A888                            
0001A888                            loc_17916:
0001A888 6000 FEE4                  		bra.w	loc_177E6
0001A88C                            ; ===========================================================================
0001A88C                            
0001A88C                            BGHZ_ShipMove:
0001A88C 5368 003C                  		subq.w	#1,$3C(a0)
0001A890 6A00                       		bpl.s	BGHZ_Reverse
0001A892 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A896 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A89C 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A8A2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001A8A8 6600                       		bne.s	BGHZ_Reverse
0001A8AA 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A8B0 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A8B6                            
0001A8B6                            BGHZ_Reverse:
0001A8B6 0828 0000 0022             		btst	#0,obStatus(a0)
0001A8BC 6600                       		bne.s	loc_17950
0001A8BE 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A8C2                            
0001A8C2                            loc_17950:
0001A8C2 6000 FEAA                  		bra.w	loc_177E6
0001A8C6                            ; ===========================================================================
0001A8C6                            
0001A8C6                            loc_17954:
0001A8C6 5368 003C                  		subq.w	#1,$3C(a0)
0001A8CA 6B00                       		bmi.s	loc_17960
0001A8CC 6100 FF5C                  		bsr.w	BossMove
0001A8D0 6000                       		bra.s	loc_17976
0001A8D2                            ; ===========================================================================
0001A8D2                            
0001A8D2                            loc_17960:
0001A8D2 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A8D8 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A8DE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A8E2 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A8E8                            
0001A8E8                            loc_17976:
0001A8E8 6000 FE84                  		bra.w	loc_177E6
0001A8EC                            ; ===========================================================================
0001A8EC                            
0001A8EC                            loc_1797A:
0001A8EC 5368 003C                  		subq.w	#1,$3C(a0)
0001A8F0 6B00                       		bmi.s	loc_17984
0001A8F2 6000 FEF4                  		bra.w	BossDefeated
0001A8F6                            ; ===========================================================================
0001A8F6                            
0001A8F6                            loc_17984:
0001A8F6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A8FC 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A902 4268 0010                  		clr.w	obVelX(a0)
0001A906 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A90A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A910 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A914 6600                       		bne.s	locret_179AA
0001A916 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A91C                            
0001A91C                            locret_179AA:
0001A91C 4E75                       		rts	
0001A91E                            ; ===========================================================================
0001A91E                            
0001A91E                            loc_179AC:
0001A91E 5268 003C                  		addq.w	#1,$3C(a0)
0001A922 6700                       		beq.s	loc_179BC
0001A924 6A00                       		bpl.s	loc_179C2
0001A926 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A92C 6000                       		bra.s	loc_179EE
0001A92E                            ; ===========================================================================
0001A92E                            
0001A92E                            loc_179BC:
0001A92E 4268 0012                  		clr.w	obVelY(a0)
0001A932 6000                       		bra.s	loc_179EE
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            loc_179C2:
0001A934 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A93A 6500                       		bcs.s	loc_179DA
0001A93C 6700                       		beq.s	loc_179E0
0001A93E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A944 6500                       		bcs.s	loc_179EE
0001A946 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A94A 6000                       		bra.s	loc_179EE
0001A94C                            ; ===========================================================================
0001A94C                            
0001A94C                            loc_179DA:
0001A94C 5168 0012                  		subq.w	#8,obVelY(a0)
0001A950 6000                       		bra.s	loc_179EE
0001A952                            ; ===========================================================================
0001A952                            
0001A952                            loc_179E0:
0001A952 4268 0012                          clr.w    obVelY(a0)
0001A956 4A38 FE2D                          tst.b     (v_invinc).w
0001A95A 6600                               bne.s   @boss_invinc
0001A95C 4A38 FE2E                          tst.b     (v_shoes).w
0001A960 6600                               bne.s   @boss_shoes
0001A962                            
0001A962 1038 F5C6                          move.b   (v_Saved_music),d0
0001A966 6000 0000                          bra.w      @boss_play
0001A96A                            
0001A96A                            @boss_invinc:
0001A96A 103C 0000                          move.b #bgm_Invincible,d0
0001A96E                            
0001A96E                            @boss_shoes:
0001A96E 103C 0000                          move.b #bgm_Ending,d0
0001A972                            
0001A972                            @boss_play:
0001A972 4EB8 129A                          jsr PlaySound
0001A976                            
0001A976                            loc_179EE:
0001A976 6100 FEB2                  		bsr.w	BossMove
0001A97A 6000 FDF2                  		bra.w	loc_177E6
0001A97E                            ; ===========================================================================
0001A97E                            
0001A97E                            loc_179F6:
0001A97E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A984 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A98A 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001A990 6700                       		beq.s	loc_17A10
0001A992 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A996 6000                       		bra.s	loc_17A16
0001A998                            ; ===========================================================================
0001A998                            
0001A998                            loc_17A10:
0001A998 4A28 0001                  		tst.b	obRender(a0)
0001A99C 6A00                       		bpl.s	BGHZ_ShipDel
0001A99E                            
0001A99E                            loc_17A16:
0001A99E 6100 FE8A                  		bsr.w	BossMove
0001A9A2 6000 FDCA                  		bra.w	loc_177E6
0001A9A6                            ; ===========================================================================
0001A9A6                            
0001A9A6                            BGHZ_ShipDel:
0001A9A6 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001A9AC                            ; ===========================================================================
0001A9AC                            
0001A9AC                            BGHZ_FaceMain:	; Routine 4
0001A9AC 7000                       		moveq	#0,d0
0001A9AE 7201                       		moveq	#1,d1
0001A9B0 2268 0034                  		movea.l	$34(a0),a1
0001A9B4 1029 0025                  		move.b	ob2ndRout(a1),d0
0001A9B8 5900                       		subq.b	#4,d0
0001A9BA 6600                       		bne.s	loc_17A3E
0001A9BC 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001A9C2 6600                       		bne.s	loc_17A46
0001A9C4 7204                       		moveq	#4,d1
0001A9C6                            
0001A9C6                            loc_17A3E:
0001A9C6 5D00                       		subq.b	#6,d0
0001A9C8 6B00                       		bmi.s	loc_17A46
0001A9CA 720A                       		moveq	#$A,d1
0001A9CC 6000                       		bra.s	loc_17A5A
0001A9CE                            ; ===========================================================================
0001A9CE                            
0001A9CE                            loc_17A46:
0001A9CE 4A29 0020                  		tst.b	obColType(a1)
0001A9D2 6600                       		bne.s	loc_17A50
0001A9D4 7205                       		moveq	#5,d1
0001A9D6 6000                       		bra.s	loc_17A5A
0001A9D8                            ; ===========================================================================
0001A9D8                            
0001A9D8                            loc_17A50:
0001A9D8 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001A9DE 6500                       		bcs.s	loc_17A5A
0001A9E0 7204                       		moveq	#4,d1
0001A9E2                            
0001A9E2                            loc_17A5A:
0001A9E2 1141 001C                  		move.b	d1,obAnim(a0)
0001A9E6 5500                       		subq.b	#2,d0
0001A9E8 6600                       		bne.s	BGHZ_FaceDisp
0001A9EA 117C 0006 001C             		move.b	#6,obAnim(a0)
0001A9F0 4A28 0001                  		tst.b	obRender(a0)
0001A9F4 6A00                       		bpl.s	BGHZ_FaceDel
0001A9F6                            
0001A9F6                            BGHZ_FaceDisp:
0001A9F6 6000                       		bra.s	BGHZ_Display
0001A9F8                            ; ===========================================================================
0001A9F8                            
0001A9F8                            BGHZ_FaceDel:
0001A9F8 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001A9FE                            ; ===========================================================================
0001A9FE                            
0001A9FE                            BGHZ_FlameMain:	; Routine 6
0001A9FE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AA04 2268 0034                  		movea.l	$34(a0),a1
0001AA08 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001AA0E 6600                       		bne.s	loc_17A96
0001AA10 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001AA16 4A28 0001                  		tst.b	obRender(a0)
0001AA1A 6A00                       		bpl.s	BGHZ_FlameDel
0001AA1C 6000                       		bra.s	BGHZ_FlameDisp
0001AA1E                            ; ===========================================================================
0001AA1E                            
0001AA1E                            loc_17A96:
0001AA1E 3029 0010                  		move.w	obVelX(a1),d0
0001AA22 6700                       		beq.s	BGHZ_FlameDisp
0001AA24 117C 0008 001C             		move.b	#8,obAnim(a0)
0001AA2A                            
0001AA2A                            BGHZ_FlameDisp:
0001AA2A 6000                       		bra.s	BGHZ_Display
0001AA2C                            ; ===========================================================================
0001AA2C                            
0001AA2C                            BGHZ_FlameDel:
0001AA2C 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001AA32                            ; ===========================================================================
0001AA32                            
0001AA32                            BGHZ_Display:
0001AA32 2268 0034                  		movea.l	$34(a0),a1
0001AA36 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AA3C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AA42 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AA48 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AA4E 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001AA54 1028 0022                  		move.b	obStatus(a0),d0
0001AA58 0200 0003                  		andi.b	#3,d0
0001AA5C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AA62 8128 0001                  		or.b	d0,obRender(a0)
0001AA66 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001AA66 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001AA6C                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001AA6C                            ; ---------------------------------------------------------------------------
0001AA6C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001AA6C                            ; ---------------------------------------------------------------------------
0001AA6C                            
0001AA6C                            BossBall:
0001AA6C 7000                       		moveq	#0,d0
0001AA6E 1028 0024                  		move.b	obRoutine(a0),d0
0001AA72 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AA76 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AA7A                            ; ===========================================================================
0001AA7A 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AA7C 0000                       		dc.w GBall_Base-GBall_Index
0001AA7E 0000                       		dc.w GBall_Display2-GBall_Index
0001AA80 0000                       		dc.w loc_17C68-GBall_Index
0001AA82 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AA84                            ; ===========================================================================
0001AA84                            
0001AA84                            GBall_Main:	; Routine 0
0001AA84 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA88 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AA8E 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AA94 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AA9C 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AAA2 45E8 0028                  		lea	obSubtype(a0),a2
0001AAA6 14FC 0000                  		move.b	#0,(a2)+
0001AAAA 7205                       		moveq	#5,d1
0001AAAC 2248                       		movea.l	a0,a1
0001AAAE 6000                       		bra.s	loc_17B60
0001AAB0                            ; ===========================================================================
0001AAB0                            
0001AAB0                            GBall_MakeLinks:
0001AAB0 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001AAB6 6600                       		bne.s	GBall_MakeBall
0001AAB8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AABE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AAC4 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AAC8 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AACE 237C 0000 92F0 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AAD6 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AADC 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AAE2 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AAE6                            
0001AAE6                            loc_17B60:
0001AAE6 3A09                       		move.w	a1,d5
0001AAE8 0445 D000                  		subi.w	#$D000,d5
0001AAEC EC4D                       		lsr.w	#6,d5
0001AAEE 0245 007F                  		andi.w	#$7F,d5
0001AAF2 14C5                       		move.b	d5,(a2)+
0001AAF4 137C 0004 0001             		move.b	#4,obRender(a1)
0001AAFA 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AB00 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AB06 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AB0C 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AB10                            
0001AB10                            GBall_MakeBall:
0001AB10 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AB16 237C 0000 984C 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AB1E 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AB24 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AB2A 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AB30 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AB36 4E75                       		rts	
0001AB38                            ; ===========================================================================
0001AB38                            
0001AB38 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AB3E                            
0001AB3E                            ; ===========================================================================
0001AB3E                            
0001AB3E                            GBall_Base:	; Routine 2
0001AB3E 47F9 0001 AB38             		lea	(GBall_PosData).l,a3
0001AB44 45E8 0028                  		lea	obSubtype(a0),a2
0001AB48 7C00                       		moveq	#0,d6
0001AB4A 1C1A                       		move.b	(a2)+,d6
0001AB4C                            
0001AB4C                            loc_17BC6:
0001AB4C 7800                       		moveq	#0,d4
0001AB4E 181A                       		move.b	(a2)+,d4
0001AB50 ED4C                       		lsl.w	#6,d4
0001AB52 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AB58 2244                       		movea.l	d4,a1
0001AB5A 101B                       		move.b	(a3)+,d0
0001AB5C B029 003C                  		cmp.b	$3C(a1),d0
0001AB60 6700                       		beq.s	loc_17BE0
0001AB62 5229 003C                  		addq.b	#1,$3C(a1)
0001AB66                            
0001AB66                            loc_17BE0:
0001AB66 51CE FFE4                  		dbf	d6,loc_17BC6
0001AB6A                            
0001AB6A B029 003C                  		cmp.b	$3C(a1),d0
0001AB6E 6600                       		bne.s	loc_17BFA
0001AB70 2268 0034                  		movea.l	$34(a0),a1
0001AB74 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AB7A 6600                       		bne.s	loc_17BFA
0001AB7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AB80                            
0001AB80                            loc_17BFA:
0001AB80 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AB86 6700                       		beq.s	GBall_Display
0001AB88 5268 0032                  		addq.w	#1,$32(a0)
0001AB8C                            
0001AB8C                            GBall_Display:
0001AB8C 6100 0000                  		bsr.w	sub_17C2A
0001AB90 1028 0026                  		move.b	obAngle(a0),d0
0001AB94 4EB9 0000 9262             		jsr	(Swing_Move2).l
0001AB9A 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001ABA0                            ; ===========================================================================
0001ABA0                            
0001ABA0                            GBall_Display2:	; Routine 4
0001ABA0 6100 0000                  		bsr.w	sub_17C2A
0001ABA4 4EB9 0000 9222             		jsr	(Obj48_Move).l
0001ABAA 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001ABB0                            
0001ABB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ABB0                            
0001ABB0                            
0001ABB0                            sub_17C2A:
0001ABB0 2268 0034                  		movea.l	$34(a0),a1
0001ABB4 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001ABBA 6400                       		bcc.s	loc_17C3C
0001ABBC 0868 0000 001A             		bchg	#0,obFrame(a0)
0001ABC2                            
0001ABC2                            loc_17C3C:
0001ABC2 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001ABC8 3029 000C                  		move.w	obY(a1),d0
0001ABCC D068 0032                  		add.w	$32(a0),d0
0001ABD0 3140 0038                  		move.w	d0,$38(a0)
0001ABD4 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001ABDA 4A29 0022                  		tst.b	obStatus(a1)
0001ABDE 6A00                       		bpl.s	locret_17C66
0001ABE0 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001ABE4 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ABEA                            
0001ABEA                            locret_17C66:
0001ABEA 4E75                       		rts	
0001ABEC                            ; End of function sub_17C2A
0001ABEC                            
0001ABEC                            ; ===========================================================================
0001ABEC                            
0001ABEC                            loc_17C68:	; Routine 6
0001ABEC 2268 0034                  		movea.l	$34(a0),a1
0001ABF0 4A29 0022                  		tst.b	obStatus(a1)
0001ABF4 6A00                       		bpl.s	GBall_Display3
0001ABF6 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001ABFA 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AC00                            
0001AC00                            GBall_Display3:
0001AC00 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001AC06                            ; ===========================================================================
0001AC06                            
0001AC06                            GBall_ChkVanish:; Routine 8
0001AC06 7000                       		moveq	#0,d0
0001AC08 4A28 001A                  		tst.b	obFrame(a0)
0001AC0C 6600                       		bne.s	GBall_Vanish
0001AC0E 5200                       		addq.b	#1,d0
0001AC10                            
0001AC10                            GBall_Vanish:
0001AC10 1140 001A                  		move.b	d0,obFrame(a0)
0001AC14 2268 0034                  		movea.l	$34(a0),a1
0001AC18 4A29 0022                  		tst.b	obStatus(a1)
0001AC1C 6A00                       		bpl.s	GBall_Display4
0001AC1E 117C 0000 0020             		move.b	#0,obColType(a0)
0001AC24 6100 FBC2                  		bsr.w	BossDefeated
0001AC28 5328 003C                  		subq.b	#1,$3C(a0)
0001AC2C 6A00                       		bpl.s	GBall_Display4
0001AC2E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AC32 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AC38                            
0001AC38                            GBall_Display4:
0001AC38 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001AC38 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001AC3E                            		include	"_anim\Eggman.asm"
0001AC3E                            ; ---------------------------------------------------------------------------
0001AC3E                            ; Animation script - Eggman (bosses)
0001AC3E                            ; ---------------------------------------------------------------------------
0001AC3E 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AC40 0000                       		dc.w @facenormal1-Ani_Eggman
0001AC42 0000                       		dc.w @facenormal2-Ani_Eggman
0001AC44 0000                       		dc.w @facenormal3-Ani_Eggman
0001AC46 0000                       		dc.w @facelaugh-Ani_Eggman
0001AC48 0000                       		dc.w @facehit-Ani_Eggman
0001AC4A 0000                       		dc.w @facepanic-Ani_Eggman
0001AC4C 0000                       		dc.w @blank-Ani_Eggman
0001AC4E 0000                       		dc.w @flame1-Ani_Eggman
0001AC50 0000                       		dc.w @flame2-Ani_Eggman
0001AC52 0000                       		dc.w @facedefeat-Ani_Eggman
0001AC54 0000                       		dc.w @escapeflame-Ani_Eggman
0001AC56 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AC5A 00                         		even
0001AC5A 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AC5E                            		even
0001AC5E 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AC62                            		even
0001AC62 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AC66                            		even
0001AC66 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AC6A                            		even
0001AC6A 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AC6E                            		even
0001AC6E 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AC72                            		even
0001AC72 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AC76 00                         		even
0001AC76 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AC7A                            		even
0001AC7A 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AC7E                            		even
0001AC7E 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AC82 00                         		even
0001AC82 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AC8E 00                         		even
0001AC8E 00                         		even
0001AC8E                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AC8E                            ; --------------------------------------------------------------------------------
0001AC8E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AC8E                            ; --------------------------------------------------------------------------------
0001AC8E                            
0001AC8E                            SME_F_pyS:	
0001AC8E 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AC92 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AC96 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AC9A 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AC9E 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001ACA2 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001ACA6 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001ACA8 05                         SME_F_pyS_1A:	dc.b 5	
0001ACA9 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001ACAE FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001ACB3 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001ACB8 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001ACBD 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001ACC2 03                         SME_F_pyS_34:	dc.b 3	
0001ACC3 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ACC8 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001ACCD EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ACD2 03                         SME_F_pyS_44:	dc.b 3	
0001ACD3 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ACD8 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001ACDD EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ACE2 04                         SME_F_pyS_54:	dc.b 4	
0001ACE3 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001ACE8 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001ACED EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001ACF2 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ACF7 04                         SME_F_pyS_69:	dc.b 4	
0001ACF8 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001ACFD EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AD02 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AD07 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD0C 04                         SME_F_pyS_7E:	dc.b 4	
0001AD0D E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AD12 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AD17 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AD1C EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD21 04                         SME_F_pyS_93:	dc.b 4	
0001AD22 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AD27 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AD2C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AD31 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AD36 07                         SME_F_pyS_A8:	dc.b 7	
0001AD37 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AD3C E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AD41 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AD46 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AD4B F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AD50 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AD55 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD5A 01                         SME_F_pyS_CC:	dc.b 1	
0001AD5B 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AD60 01                         SME_F_pyS_D2:	dc.b 1	
0001AD61 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AD66 00                         SME_F_pyS_D8:	dc.b 0	
0001AD67 02                         SME_F_pyS_D9:	dc.b 2	
0001AD68 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AD6D 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AD72 02                         SME_F_pyS_E4:	dc.b 2	
0001AD73 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AD78 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AD7E 00                         		even
0001AD7E 00                         		even
0001AD7E                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AD7E                            ; ---------------------------------------------------------------------------
0001AD7E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AD7E                            ; ---------------------------------------------------------------------------
0001AD7E                            Map_BossItems_internal:
0001AD7E 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AD80 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AD82 0000                       		dc.w @cross-Map_BossItems_internal
0001AD84 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AD86 0000                       		dc.w @pipe-Map_BossItems_internal
0001AD88 0000                       		dc.w @spike-Map_BossItems_internal
0001AD8A 0000                       		dc.w @legmask-Map_BossItems_internal
0001AD8C 0000                       		dc.w @legs-Map_BossItems_internal
0001AD8E 01                         @chainanchor1:	dc.b 1
0001AD8F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AD94 02                         @chainanchor2:	dc.b 2
0001AD95 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AD9A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001ADA0 00                         		even
0001ADA0 01                         @cross:		dc.b 1
0001ADA1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001ADA6 01                         @widepipe:	dc.b 1
0001ADA7 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001ADAC 01                         @pipe:		dc.b 1
0001ADAD 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001ADB2 04                         @spike:		dc.b 4
0001ADB3 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001ADB8 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001ADBD F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001ADC2 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001ADC8 00                         		even
0001ADC8 02                         @legmask:	dc.b 2
0001ADC9 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001ADCE 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001ADD4 00                         		even
0001ADD4 02                         @legs:		dc.b 2
0001ADD5 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001ADDA 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001ADE0 00                         		even
0001ADE0 00                         		even
0001ADE0                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001ADE0                            ; ---------------------------------------------------------------------------
0001ADE0                            ; Object 77 - Eggman (LZ)
0001ADE0                            ; ---------------------------------------------------------------------------
0001ADE0                            
0001ADE0                            BossLabyrinth:
0001ADE0 7000                       		moveq	#0,d0
0001ADE2 1028 0024                  		move.b	obRoutine(a0),d0
0001ADE6 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001ADEA 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001ADEE                            ; ===========================================================================
0001ADEE 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001ADF0 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001ADF2 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001ADF4 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001ADF6                            
0001ADF6 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001ADF8 0401                       		dc.b 4,	1
0001ADFA 0607                       		dc.b 6,	7
0001ADFC                            ; ===========================================================================
0001ADFC                            
0001ADFC                            Obj77_Main:	; Routine 0
0001ADFC 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AE02 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AE08 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AE0E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AE14 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AE1A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AE20 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AE26 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AE2A 2248                       		movea.l	a0,a1
0001AE2C 7202                       		moveq	#2,d1
0001AE2E 6000                       		bra.s	Obj77_LoadBoss
0001AE30                            ; ===========================================================================
0001AE30                            
0001AE30                            Obj77_Loop:
0001AE30 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001AE36 6600                       		bne.s	Obj77_ShipMain
0001AE38 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AE3C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AE42 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AE48                            
0001AE48                            Obj77_LoadBoss:
0001AE48 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AE4E 4229 0025                  		clr.b	ob2ndRout(a1)
0001AE52 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AE56 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AE5A 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AE60 237C 0001 AC8E 0004        		move.l	#Map_Eggman,obMap(a1)
0001AE68 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AE6E 137C 0004 0001             		move.b	#4,obRender(a1)
0001AE74 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001AE7A 2348 0034                  		move.l	a0,$34(a1)
0001AE7E 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001AE82                            
0001AE82                            Obj77_ShipMain:	; Routine 2
0001AE82 43F8 D000                  		lea	(v_player).w,a1
0001AE86 7000                       		moveq	#0,d0
0001AE88 1028 0025                  		move.b	ob2ndRout(a0),d0
0001AE8C 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001AE90 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AE94 43F9 0001 AC3E             		lea	(Ani_Eggman).l,a1
0001AE9A 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001AEA0 7003                       		moveq	#3,d0
0001AEA2 C028 0022                  		and.b	obStatus(a0),d0
0001AEA6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AEAC 8128 0001                  		or.b	d0,obRender(a0)
0001AEB0 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001AEB6                            ; ===========================================================================
0001AEB6 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001AEBA 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001AEBE 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001AEC2 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001AEC6                            ; ===========================================================================
0001AEC6                            
0001AEC6                            loc_17F1E:
0001AEC6 3029 0008                  		move.w	obX(a1),d0
0001AECA 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001AECE 6500                       		bcs.s	loc_17F38
0001AED0 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AED6 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001AEDC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AEE0                            
0001AEE0                            loc_17F38:
0001AEE0 6100 F948                  		bsr.w	BossMove
0001AEE4 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AEEA 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001AEF0                            
0001AEF0                            loc_17F48:
0001AEF0 4A28 003D                  		tst.b	$3D(a0)
0001AEF4 6600                       		bne.s	loc_17F8E
0001AEF6 4A28 0022                  		tst.b	obStatus(a0)
0001AEFA 6B00                       		bmi.s	loc_17F92
0001AEFC 4A28 0020                  		tst.b	obColType(a0)
0001AF00 6600                       		bne.s	locret_17F8C
0001AF02 4A28 003E                  		tst.b	$3E(a0)
0001AF06 6600                       		bne.s	loc_17F70
0001AF08 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AF18                            
0001AF18                            loc_17F70:
0001AF18 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AF1C 7000                       		moveq	#0,d0
0001AF1E 4A51                       		tst.w	(a1)
0001AF20 6600                       		bne.s	loc_17F7E
0001AF22 303C 0EEE                  		move.w	#cWhite,d0
0001AF26                            
0001AF26                            loc_17F7E:
0001AF26 3280                       		move.w	d0,(a1)
0001AF28 5328 003E                  		subq.b	#1,$3E(a0)
0001AF2C 6600                       		bne.s	locret_17F8C
0001AF2E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AF34                            
0001AF34                            locret_17F8C:
0001AF34 4E75                       		rts	
0001AF36                            ; ===========================================================================
0001AF36                            
0001AF36                            loc_17F8E:
0001AF36 6000 F8B0                  		bra.w	BossDefeated
0001AF3A                            ; ===========================================================================
0001AF3A                            
0001AF3A                            loc_17F92:
0001AF3A 7064                       		moveq	#100,d0
0001AF3C 6100 0000                  		bsr.w	AddPoints
0001AF40 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AF46 4E75                       		rts	
0001AF48                            ; ===========================================================================
0001AF48                            
0001AF48                            loc_17FA0:
0001AF48 70FE                       		moveq	#-2,d0
0001AF4A 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AF50 6500                       		bcs.s	loc_17FB6
0001AF52 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AF58 4268 0010                  		clr.w	obVelX(a0)
0001AF5C 5240                       		addq.w	#1,d0
0001AF5E                            
0001AF5E                            loc_17FB6:
0001AF5E 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001AF64 6E00                       		bgt.s	loc_17FCA
0001AF66 317C 0500 0038             		move.w	#$500,$38(a0)
0001AF6C 4268 0012                  		clr.w	obVelY(a0)
0001AF70 5240                       		addq.w	#1,d0
0001AF72                            
0001AF72                            loc_17FCA:
0001AF72 6600                       		bne.s	loc_17FDC
0001AF74 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AF7A 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001AF80 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF84                            
0001AF84                            loc_17FDC:
0001AF84 6000 FF5A                  		bra.w	loc_17F38
0001AF88                            ; ===========================================================================
0001AF88                            
0001AF88                            loc_17FE0:
0001AF88 70FE                       		moveq	#-2,d0
0001AF8A 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001AF90 6500                       		bcs.s	loc_17FF6
0001AF92 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001AF98 4268 0010                  		clr.w	obVelX(a0)
0001AF9C 5240                       		addq.w	#1,d0
0001AF9E                            
0001AF9E                            loc_17FF6:
0001AF9E 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001AFA4 6E00                       		bgt.s	loc_1800A
0001AFA6 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001AFAC 4268 0012                  		clr.w	obVelY(a0)
0001AFB0 5240                       		addq.w	#1,d0
0001AFB2                            
0001AFB2                            loc_1800A:
0001AFB2 6600                       		bne.s	loc_1801A
0001AFB4 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AFBA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AFBE 4228 003F                  		clr.b	$3F(a0)
0001AFC2                            
0001AFC2                            loc_1801A:
0001AFC2 6000 FF1C                  		bra.w	loc_17F38
0001AFC6                            ; ===========================================================================
0001AFC6                            
0001AFC6                            loc_1801E:
0001AFC6 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001AFCC 6E00                       		bgt.s	loc_1804E
0001AFCE 317C 0100 0038             		move.w	#$100,$38(a0)
0001AFD4 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AFDA 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001AFE0 4A28 003D                  		tst.b	$3D(a0)
0001AFE4 6700                       		beq.s	loc_18046
0001AFE6 E1E8 0010                  		asl	obVelX(a0)
0001AFEA E1E8 0012                  		asl	obVelY(a0)
0001AFEE                            
0001AFEE                            loc_18046:
0001AFEE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AFF2 6000 FEEC                  		bra.w	loc_17F38
0001AFF6                            ; ===========================================================================
0001AFF6                            
0001AFF6                            loc_1804E:
0001AFF6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AFFC 5428 003F                  		addq.b	#2,$3F(a0)
0001B000 1028 003F                  		move.b	$3F(a0),d0
0001B004 4EB9 0000 3B42             		jsr	(CalcSine).l
0001B00A 4A41                       		tst.w	d1
0001B00C 6A00                       		bpl.s	loc_1806C
0001B00E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B014                            
0001B014                            loc_1806C:
0001B014 E840                       		asr.w	#4,d0
0001B016 4840                       		swap	d0
0001B018 4240                       		clr.w	d0
0001B01A D0A8 0030                  		add.l	$30(a0),d0
0001B01E 4840                       		swap	d0
0001B020 3140 0008                  		move.w	d0,obX(a0)
0001B024 3028 0012                  		move.w	obVelY(a0),d0
0001B028 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B02C 9268 000C                  		sub.w	obY(a0),d1
0001B030 6500                       		bcs.s	loc_180A2
0001B032 0441 0048                  		subi.w	#$48,d1
0001B036 6500                       		bcs.s	loc_180A2
0001B038 E240                       		asr.w	#1,d0
0001B03A 0441 0028                  		subi.w	#$28,d1
0001B03E 6500                       		bcs.s	loc_180A2
0001B040 E240                       		asr.w	#1,d0
0001B042 0441 0028                  		subi.w	#$28,d1
0001B046 6500                       		bcs.s	loc_180A2
0001B048 7000                       		moveq	#0,d0
0001B04A                            
0001B04A                            loc_180A2:
0001B04A 48C0                       		ext.l	d0
0001B04C E180                       		asl.l	#8,d0
0001B04E 4A28 003D                  		tst.b	$3D(a0)
0001B052 6700                       		beq.s	loc_180AE
0001B054 D080                       		add.l	d0,d0
0001B056                            
0001B056                            loc_180AE:
0001B056 D1A8 0038                  		add.l	d0,$38(a0)
0001B05A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B060 6000 FE8E                  		bra.w	loc_17F48
0001B064                            ; ===========================================================================
0001B064                            
0001B064                            loc_180BC:
0001B064 70FE                       		moveq	#-2,d0
0001B066 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B06C 6500                       		bcs.s	loc_180D2
0001B06E 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B074 4268 0010                  		clr.w	obVelX(a0)
0001B078 5240                       		addq.w	#1,d0
0001B07A                            
0001B07A                            loc_180D2:
0001B07A 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B080 6E00                       		bgt.s	loc_180E6
0001B082 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B088 4268 0012                  		clr.w	obVelY(a0)
0001B08C 5240                       		addq.w	#1,d0
0001B08E                            
0001B08E                            loc_180E6:
0001B08E 6600                       		bne.s	loc_180F2
0001B090 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B094 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B09A                            
0001B09A                            loc_180F2:
0001B09A 6000 FE44                  		bra.w	loc_17F38
0001B09E                            ; ===========================================================================
0001B09E                            
0001B09E                            loc_180F6:
0001B09E 4A28 003D                  		tst.b	$3D(a0)
0001B0A2 6600                       		bne.s	loc_18112
0001B0A4 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B0AA 6D00                       		blt.s	loc_18126
0001B0AC 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B0B2 6E00                       		bgt.s	loc_18126
0001B0B4 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B0BA                            
0001B0BA                            loc_18112:
0001B0BA 4A38 FE2D                          tst.b     (v_invinc).w
0001B0BE 6600                               bne.s   @boss_invinc
0001B0C0                            
0001B0C0 1038 F5C6                          move.b   (v_Saved_music),d0
0001B0C4 6000 0000                          bra.w      @boss_play
0001B0C8                            
0001B0C8                            @boss_invinc:
0001B0C8 103C 0000                          move.b #bgm_Invincible,d0
0001B0CC                            
0001B0CC                            @boss_play:
0001B0CC 4EB8 129A                          jsr PlaySound
0001B0D0 4238 F7AA                          clr.b    (f_lockscreen).w
0001B0D4 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B0DA 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B0DE                            
0001B0DE                            loc_18126:
0001B0DE 6000 FE00                  		bra.w	loc_17F38
0001B0E2                            ; ===========================================================================
0001B0E2                            
0001B0E2                            loc_1812A:
0001B0E2 4A28 003D                  		tst.b	$3D(a0)
0001B0E6 6600                       		bne.s	loc_18136
0001B0E8 5328 003C                  		subq.b	#1,$3C(a0)
0001B0EC 6600                       		bne.s	loc_1814E
0001B0EE                            
0001B0EE                            loc_18136:
0001B0EE 4228 003C                  		clr.b	$3C(a0)
0001B0F2 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B0F8 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B0FE 4228 003D                  		clr.b	$3D(a0)
0001B102 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B106                            
0001B106                            loc_1814E:
0001B106 6000 FDD8                  		bra.w	loc_17F38
0001B10A                            ; ===========================================================================
0001B10A                            
0001B10A                            loc_18152:
0001B10A 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B110 6400                       		bcc.s	loc_18160
0001B112 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B116 6000                       		bra.s	loc_18166
0001B118                            ; ===========================================================================
0001B118                            
0001B118                            loc_18160:
0001B118 4A28 0001                  		tst.b	obRender(a0)
0001B11C 6A00                       		bpl.s	Obj77_ShipDel
0001B11E                            
0001B11E                            loc_18166:
0001B11E 6000 FDC0                  		bra.w	loc_17F38
0001B122                            ; ===========================================================================
0001B122                            
0001B122                            Obj77_ShipDel:
0001B122 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            Obj77_FaceMain:	; Routine 4
0001B128 2268 0034                  		movea.l	$34(a0),a1
0001B12C 1011                       		move.b	(a1),d0
0001B12E B010                       		cmp.b	(a0),d0
0001B130 6600                       		bne.s	Obj77_FaceDel
0001B132 7000                       		moveq	#0,d0
0001B134 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B138 7201                       		moveq	#1,d1
0001B13A 4A28 003D                  		tst.b	$3D(a0)
0001B13E 6700                       		beq.s	loc_1818C
0001B140 720A                       		moveq	#$A,d1
0001B142 6000                       		bra.s	loc_181A0
0001B144                            ; ===========================================================================
0001B144                            
0001B144                            loc_1818C:
0001B144 4A29 0020                  		tst.b	obColType(a1)
0001B148 6600                       		bne.s	loc_18196
0001B14A 7205                       		moveq	#5,d1
0001B14C 6000                       		bra.s	loc_181A0
0001B14E                            ; ===========================================================================
0001B14E                            
0001B14E                            loc_18196:
0001B14E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B154 6500                       		bcs.s	loc_181A0
0001B156 7204                       		moveq	#4,d1
0001B158                            
0001B158                            loc_181A0:
0001B158 1141 001C                  		move.b	d1,obAnim(a0)
0001B15C 0C00 000E                  		cmpi.b	#$E,d0
0001B160 6600                       		bne.s	loc_181B6
0001B162 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B168 4A28 0001                  		tst.b	obRender(a0)
0001B16C 6A00                       		bpl.s	Obj77_FaceDel
0001B16E                            
0001B16E                            loc_181B6:
0001B16E 6000                       		bra.s	Obj77_Display
0001B170                            ; ===========================================================================
0001B170                            
0001B170                            Obj77_FaceDel:
0001B170 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B176                            ; ===========================================================================
0001B176                            
0001B176                            Obj77_FlameMain:; Routine 6
0001B176 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B17C 2268 0034                  		movea.l	$34(a0),a1
0001B180 1011                       		move.b	(a1),d0
0001B182 B010                       		cmp.b	(a0),d0
0001B184 6600                       		bne.s	Obj77_FlameDel
0001B186 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B18C 6600                       		bne.s	loc_181F0
0001B18E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B194 4A28 0001                  		tst.b	1(a0)
0001B198 6A00                       		bpl.s	Obj77_FlameDel
0001B19A 6000                       		bra.s	loc_181F0
0001B19C                            ; ===========================================================================
0001B19C 4A69 0010                  		tst.w	obVelX(a1)
0001B1A0 6700                       		beq.s	loc_181F0
0001B1A2 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B1A8                            
0001B1A8                            loc_181F0:
0001B1A8 6000                       		bra.s	Obj77_Display
0001B1AA                            ; ===========================================================================
0001B1AA                            
0001B1AA                            Obj77_FlameDel:
0001B1AA 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B1B0                            ; ===========================================================================
0001B1B0                            
0001B1B0                            Obj77_Display:
0001B1B0 43F9 0001 AC3E             		lea	(Ani_Eggman).l,a1
0001B1B6 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001B1BC 2268 0034                  		movea.l	$34(a0),a1
0001B1C0 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B1C6 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B1CC 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B1D2 7003                       		moveq	#3,d0
0001B1D4 C028 0022                  		and.b	obStatus(a0),d0
0001B1D8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B1DE 8128 0001                  		or.b	d0,obRender(a0)
0001B1E2 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001B1E2 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001B1E8                            		include	"_incObj\73 Boss - Marble.asm"
0001B1E8                            ; ---------------------------------------------------------------------------
0001B1E8                            ; Object 73 - Eggman (MZ)
0001B1E8                            ; ---------------------------------------------------------------------------
0001B1E8                            
0001B1E8                            BossMarble:
0001B1E8 7000                       		moveq	#0,d0
0001B1EA 1028 0024                  		move.b	obRoutine(a0),d0
0001B1EE 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B1F2 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B1F6                            ; ===========================================================================
0001B1F6 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B1F8 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B1FA 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B1FC 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B1FE 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B200                            
0001B200 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B204 0401 0200                  		dc.b 4,	1, $02, $00
0001B208 0607 0200                  		dc.b 6,	7, $02, $00
0001B20C 0800 0180                  		dc.b 8,	0, $01, $80
0001B210                            ; ===========================================================================
0001B210                            
0001B210                            Obj73_Main:	; Routine 0
0001B210 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B216 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B21C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B222 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B228 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B22C 2248                       		movea.l	a0,a1
0001B22E 7203                       		moveq	#3,d1
0001B230 6000                       		bra.s	Obj73_LoadBoss
0001B232                            ; ===========================================================================
0001B232                            
0001B232                            Obj73_Loop:
0001B232 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001B238 6600                       		bne.s	Obj73_ShipMain
0001B23A 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B23E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B244 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B24A                            
0001B24A                            Obj73_LoadBoss:
0001B24A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B250 4229 0025                  		clr.b	ob2ndRout(a1)
0001B254 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B258 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B25C 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B260 237C 0001 AC8E 0004        		move.l	#Map_Eggman,obMap(a1)
0001B268 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B26E 137C 0004 0001             		move.b	#4,obRender(a1)
0001B274 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B27A 2348 0034                  		move.l	a0,$34(a1)
0001B27E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B282                            
0001B282                            Obj73_ShipMain:	; Routine 2
0001B282 7000                       		moveq	#0,d0
0001B284 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B288 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B28C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B290 43F9 0001 AC3E             		lea	(Ani_Eggman).l,a1
0001B296 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001B29C 7003                       		moveq	#3,d0
0001B29E C028 0022                  		and.b	obStatus(a0),d0
0001B2A2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B2A8 8128 0001                  		or.b	d0,obRender(a0)
0001B2AC 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001B2B2                            ; ===========================================================================
0001B2B2 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B2B4 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B2B6 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B2B8 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B2BA 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B2BC                            ; ===========================================================================
0001B2BC                            
0001B2BC                            loc_18302:
0001B2BC 1028 003F                  		move.b	$3F(a0),d0
0001B2C0 5428 003F                  		addq.b	#2,$3F(a0)
0001B2C4 4EB9 0000 3B42             		jsr	(CalcSine).l
0001B2CA E440                       		asr.w	#2,d0
0001B2CC 3140 0012                  		move.w	d0,obVelY(a0)
0001B2D0 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B2D6 6100 F552                  		bsr.w	BossMove
0001B2DA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B2E0 6600                       		bne.s	loc_18334
0001B2E2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2E6 4228 0028                  		clr.b	obSubtype(a0)
0001B2EA 42A8 0010                  		clr.l	obVelX(a0)
0001B2EE                            
0001B2EE                            loc_18334:
0001B2EE 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001B2F4 1140 0034                  		move.b	d0,$34(a0)
0001B2F8                            
0001B2F8                            loc_1833E:
0001B2F8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B2FE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B304 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B30A 6400                       		bcc.s	locret_18390
0001B30C 4A28 0022                  		tst.b	obStatus(a0)
0001B310 6B00                       		bmi.s	loc_18392
0001B312 4A28 0020                  		tst.b	obColType(a0)
0001B316 6600                       		bne.s	locret_18390
0001B318 4A28 003E                  		tst.b	$3E(a0)
0001B31C 6600                       		bne.s	loc_18374
0001B31E 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B32E                            
0001B32E                            loc_18374:
0001B32E 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B332 7000                       		moveq	#0,d0
0001B334 4A51                       		tst.w	(a1)
0001B336 6600                       		bne.s	loc_18382
0001B338 303C 0EEE                  		move.w	#cWhite,d0
0001B33C                            
0001B33C                            loc_18382:
0001B33C 3280                       		move.w	d0,(a1)
0001B33E 5328 003E                  		subq.b	#1,$3E(a0)
0001B342 6600                       		bne.s	locret_18390
0001B344 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B34A                            
0001B34A                            locret_18390:
0001B34A 4E75                       		rts	
0001B34C                            ; ===========================================================================
0001B34C                            
0001B34C                            loc_18392:
0001B34C 7064                       		moveq	#100,d0
0001B34E 6100 0000                  		bsr.w	AddPoints
0001B352 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B358 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B35E 4268 0010                  		clr.w	obVelX(a0)
0001B362 4E75                       		rts	
0001B364                            ; ===========================================================================
0001B364                            
0001B364                            loc_183AA:
0001B364 7000                       		moveq	#0,d0
0001B366 1028 0028                  		move.b	obSubtype(a0),d0
0001B36A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B36E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B372 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B378 6000 FF7E                  		bra.w	loc_1833E
0001B37C                            ; ===========================================================================
0001B37C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B37E 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B380 0000                       		dc.w loc_183CA-off_183C2
0001B382 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B384                            ; ===========================================================================
0001B384                            
0001B384                            loc_183CA:
0001B384 4A68 0010                  		tst.w	obVelX(a0)
0001B388 6600                       		bne.s	loc_183FE
0001B38A 7040                       		moveq	#$40,d0
0001B38C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B392 6700                       		beq.s	loc_183E6
0001B394 6500                       		bcs.s	loc_183DE
0001B396 4440                       		neg.w	d0
0001B398                            
0001B398                            loc_183DE:
0001B398 3140 0012                  		move.w	d0,obVelY(a0)
0001B39C 6000 F48C                  		bra.w	BossMove
0001B3A0                            ; ===========================================================================
0001B3A0                            
0001B3A0                            loc_183E6:
0001B3A0 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B3A6 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B3AC 0828 0000 0022             		btst	#0,obStatus(a0)
0001B3B2 6600                       		bne.s	loc_183FE
0001B3B4 4468 0010                  		neg.w	obVelX(a0)
0001B3B8                            
0001B3B8                            loc_183FE:
0001B3B8 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B3BE 6400                       		bcc.s	Obj73_MakeLava
0001B3C0 6100 F468                  		bsr.w	BossMove
0001B3C4 5968 0012                  		subq.w	#4,obVelY(a0)
0001B3C8                            
0001B3C8                            Obj73_MakeLava:
0001B3C8 5328 0034                  		subq.b	#1,$34(a0)
0001B3CC 6400                       		bcc.s	loc_1845C
0001B3CE 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001B3D4 6600                       		bne.s	loc_1844A
0001B3D6 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B3DA 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B3E0 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001B3E6 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B3EC 80FC 0050                  		divu.w	#$50,d0
0001B3F0 4840                       		swap	d0
0001B3F2 0640 1878                  		addi.w	#$1878,d0
0001B3F6 3340 0008                  		move.w	d0,obX(a1)
0001B3FA EE09                       		lsr.b	#7,d1
0001B3FC 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B402                            
0001B402                            loc_1844A:
0001B402 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001B408 0200 001F                  		andi.b	#$1F,d0
0001B40C 0600 0040                  		addi.b	#$40,d0
0001B410 1140 0034                  		move.b	d0,$34(a0)
0001B414                            
0001B414                            loc_1845C:
0001B414 0828 0000 0022             		btst	#0,obStatus(a0)
0001B41A 6700                       		beq.s	loc_18474
0001B41C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B422 6D00                       		blt.s	locret_1849C
0001B424 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B42A 6000                       		bra.s	loc_18482
0001B42C                            ; ===========================================================================
0001B42C                            
0001B42C                            loc_18474:
0001B42C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B432 6E00                       		bgt.s	locret_1849C
0001B434 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B43A                            
0001B43A                            loc_18482:
0001B43A 4268 0010                  		clr.w	obVelX(a0)
0001B43E 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B444 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B44A 6400                       		bcc.s	loc_18498
0001B44C 4468 0012                  		neg.w	obVelY(a0)
0001B450                            
0001B450                            loc_18498:
0001B450 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B454                            
0001B454                            locret_1849C:
0001B454 4E75                       		rts	
0001B456                            ; ===========================================================================
0001B456                            
0001B456                            Obj73_MakeLava2:
0001B456 6100 F3D2                  		bsr.w	BossMove
0001B45A 3028 0038                  		move.w	$38(a0),d0
0001B45E 0440 022C                  		subi.w	#$22C,d0
0001B462 6E00                       		bgt.s	locret_184F4
0001B464 303C 022C                  		move.w	#$22C,d0
0001B468 4A68 0012                  		tst.w	obVelY(a0)
0001B46C 6700                       		beq.s	loc_184EA
0001B46E 4268 0012                  		clr.w	obVelY(a0)
0001B472 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B478 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B47E 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001B484 6600                       		bne.s	loc_184EA
0001B486 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B48C 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B492 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B498 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B49C 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B4A2                            
0001B4A2                            loc_184EA:
0001B4A2 5368 003C                  		subq.w	#1,$3C(a0)
0001B4A6 6600                       		bne.s	locret_184F4
0001B4A8 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B4AC                            
0001B4AC                            locret_184F4:
0001B4AC 4E75                       		rts	
0001B4AE                            ; ===========================================================================
0001B4AE                            
0001B4AE                            loc_184F6:
0001B4AE 5368 003C                  		subq.w	#1,$3C(a0)
0001B4B2 6B00                       		bmi.s	loc_18500
0001B4B4 6000 F332                  		bra.w	BossDefeated
0001B4B8                            ; ===========================================================================
0001B4B8                            
0001B4B8                            loc_18500:
0001B4B8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B4BE 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B4C4 4268 0010                  		clr.w	obVelX(a0)
0001B4C8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B4CC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B4D2 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B4D6 6600                       		bne.s	locret_1852A
0001B4D8 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B4DE 4268 0012                  		clr.w	obVelY(a0)
0001B4E2                            
0001B4E2                            locret_1852A:
0001B4E2 4E75                       		rts	
0001B4E4                            ; ===========================================================================
0001B4E4                            
0001B4E4                            loc_1852C:
0001B4E4 5268 003C                  		addq.w	#1,$3C(a0)
0001B4E8 6700                       		beq.s	loc_18544
0001B4EA 6A00                       		bpl.s	loc_1854E
0001B4EC 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B4F2 6400                       		bcc.s	loc_18544
0001B4F4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B4FA 6000                       		bra.s	loc_1857A
0001B4FC                            ; ===========================================================================
0001B4FC                            
0001B4FC                            loc_18544:
0001B4FC 4268 0012                  		clr.w	obVelY(a0)
0001B500 4268 003C                  		clr.w	$3C(a0)
0001B504 6000                       		bra.s	loc_1857A
0001B506                            ; ===========================================================================
0001B506                            
0001B506                            loc_1854E:
0001B506 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B50C 6500                       		bcs.s	loc_18566
0001B50E 6700                       		beq.s	loc_1856C
0001B510 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B516 6500                       		bcs.s	loc_1857A
0001B518 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B51C 6000                       		bra.s	loc_1857A
0001B51E                            ; ===========================================================================
0001B51E                            
0001B51E                            loc_18566:
0001B51E 5168 0012                  		subq.w	#8,obVelY(a0)
0001B522 6000                       		bra.s	loc_1857A
0001B524                            ; ===========================================================================
0001B524                            
0001B524                            loc_1856C:
0001B524 4268 0012                  		clr.w	obVelY(a0)
0001B532                            
0001B532                            loc_1857A:
0001B532 6100 F2F6                  		bsr.w	BossMove
0001B536 6000 FDC0                  		bra.w	loc_1833E
0001B53A                            ; ===========================================================================
0001B53A                            
0001B53A                            loc_18582:
0001B53A 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B540 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B546 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B54C 6400                       		bcc.s	loc_1859C
0001B54E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B552 6000                       		bra.s	loc_185A2
0001B554                            ; ===========================================================================
0001B554                            
0001B554                            loc_1859C:
0001B554 4A28 0001                  		tst.b	obRender(a0)
0001B558 6A00                       		bpl.s	Obj73_ShipDel
0001B55A                            
0001B55A                            loc_185A2:
0001B55A 6100 F2CE                  		bsr.w	BossMove
0001B55E 6000 FD98                  		bra.w	loc_1833E
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            Obj73_ShipDel:
0001B562 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B568                            ; ===========================================================================
0001B568                            
0001B568                            Obj73_FaceMain:	; Routine 4
0001B568 7000                       		moveq	#0,d0
0001B56A 7201                       		moveq	#1,d1
0001B56C 2268 0034                  		movea.l	$34(a0),a1
0001B570 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B574 5540                       		subq.w	#2,d0
0001B576 6600                       		bne.s	loc_185D2
0001B578 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B57E 6700                       		beq.s	loc_185DA
0001B580 4A69 0012                  		tst.w	obVelY(a1)
0001B584 6600                       		bne.s	loc_185DA
0001B586 7204                       		moveq	#4,d1
0001B588 6000                       		bra.s	loc_185EE
0001B58A                            ; ===========================================================================
0001B58A                            
0001B58A                            loc_185D2:
0001B58A 5500                       		subq.b	#2,d0
0001B58C 6B00                       		bmi.s	loc_185DA
0001B58E 720A                       		moveq	#$A,d1
0001B590 6000                       		bra.s	loc_185EE
0001B592                            ; ===========================================================================
0001B592                            
0001B592                            loc_185DA:
0001B592 4A29 0020                  		tst.b	obColType(a1)
0001B596 6600                       		bne.s	loc_185E4
0001B598 7205                       		moveq	#5,d1
0001B59A 6000                       		bra.s	loc_185EE
0001B59C                            ; ===========================================================================
0001B59C                            
0001B59C                            loc_185E4:
0001B59C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B5A2 6500                       		bcs.s	loc_185EE
0001B5A4 7204                       		moveq	#4,d1
0001B5A6                            
0001B5A6                            loc_185EE:
0001B5A6 1141 001C                  		move.b	d1,obAnim(a0)
0001B5AA 5900                       		subq.b	#4,d0
0001B5AC 6600                       		bne.s	loc_18602
0001B5AE 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B5B4 4A28 0001                  		tst.b	obRender(a0)
0001B5B8 6A00                       		bpl.s	Obj73_FaceDel
0001B5BA                            
0001B5BA                            loc_18602:
0001B5BA 6000                       		bra.s	Obj73_Display
0001B5BC                            ; ===========================================================================
0001B5BC                            
0001B5BC                            Obj73_FaceDel:
0001B5BC 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B5C2                            ; ===========================================================================
0001B5C2                            
0001B5C2                            Obj73_FlameMain:; Routine 6
0001B5C2 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B5C8 2268 0034                  		movea.l	$34(a0),a1
0001B5CC 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B5D2 6D00                       		blt.s	loc_1862A
0001B5D4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B5DA 4A28 0001                  		tst.b	obRender(a0)
0001B5DE 6A00                       		bpl.s	Obj73_FlameDel
0001B5E0 6000                       		bra.s	loc_18636
0001B5E2                            ; ===========================================================================
0001B5E2                            
0001B5E2                            loc_1862A:
0001B5E2 4A69 0010                  		tst.w	obVelX(a1)
0001B5E6 6700                       		beq.s	loc_18636
0001B5E8 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B5EE                            
0001B5EE                            loc_18636:
0001B5EE 6000                       		bra.s	Obj73_Display
0001B5F0                            ; ===========================================================================
0001B5F0                            
0001B5F0                            Obj73_FlameDel:
0001B5F0 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B5F6                            ; ===========================================================================
0001B5F6                            
0001B5F6                            Obj73_Display:
0001B5F6 43F9 0001 AC3E             		lea	(Ani_Eggman).l,a1
0001B5FC 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001B602                            
0001B602                            loc_1864A:
0001B602 2268 0034                  		movea.l	$34(a0),a1
0001B606 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B60C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B612 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B618 7003                       		moveq	#3,d0
0001B61A C028 0022                  		and.b	obStatus(a0),d0
0001B61E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B624 8128 0001                  		or.b	d0,obRender(a0)
0001B628 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001B62E                            ; ===========================================================================
0001B62E                            
0001B62E                            Obj73_TubeMain:	; Routine 8
0001B62E 2268 0034                  		movea.l	$34(a0),a1
0001B632 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B638 6600                       		bne.s	loc_18688
0001B63A 4A28 0001                  		tst.b	obRender(a0)
0001B63E 6A00                       		bpl.s	Obj73_TubeDel
0001B640                            
0001B640                            loc_18688:
0001B640 217C 0001 AD7E 0004        		move.l	#Map_BossItems,obMap(a0)
0001B648 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B64E 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B654 60AC                       		bra.s	loc_1864A
0001B656                            ; ===========================================================================
0001B656                            
0001B656                            Obj73_TubeDel:
0001B656 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B656 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B65C                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B65C                            ; ---------------------------------------------------------------------------
0001B65C                            ; Object 74 - lava that	Eggman drops (MZ)
0001B65C                            ; ---------------------------------------------------------------------------
0001B65C                            
0001B65C                            BossFire:
0001B65C 7000                       		moveq	#0,d0
0001B65E 1028 0024                  		move.b	obRoutine(a0),d0
0001B662 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B666 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B66A 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001B670                            ; ===========================================================================
0001B670 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B672 0000                       		dc.w Obj74_Action-Obj74_Index
0001B674 0000                       		dc.w loc_18886-Obj74_Index
0001B676 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B678                            ; ===========================================================================
0001B678                            
0001B678                            Obj74_Main:	; Routine 0
0001B678 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B67E 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B684 217C 0000 D146 0004        		move.l	#Map_Fire,obMap(a0)
0001B68C 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B692 117C 0004 0001             		move.b	#4,obRender(a0)
0001B698 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B69E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B6A4 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B6AA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B6AE 4A28 0028                  		tst.b	obSubtype(a0)
0001B6B2 6600                       		bne.s	loc_1870A
0001B6B4 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B6BA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B6BE 6000 0000                  		bra.w	loc_18886
0001B6C2                            ; ===========================================================================
0001B6C2                            
0001B6C2                            loc_1870A:
0001B6C2 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B6D2                            
0001B6D2                            Obj74_Action:	; Routine 2
0001B6D2 7000                       		moveq	#0,d0
0001B6D4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B6D8 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B6DC 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B6E0 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001B6E6 43F9 0001 040C             		lea	(Ani_Fire).l,a1
0001B6EC 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001B6F2 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B6F8 6200                       		bhi.s	Obj74_Delete
0001B6FA 4E75                       		rts	
0001B6FC                            ; ===========================================================================
0001B6FC                            
0001B6FC                            Obj74_Delete:
0001B6FC 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B702                            ; ===========================================================================
0001B702 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B704 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B706 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B708 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B70A                            ; ===========================================================================
0001B70A                            
0001B70A                            Obj74_Drop:
0001B70A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B710 5328 0029                  		subq.b	#1,$29(a0)
0001B714 6A00                       		bpl.s	locret_18780
0001B716 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B71C 4228 0028                  		clr.b	obSubtype(a0)
0001B720 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B726 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B72C 6100 C5F6                  		bsr.w	ObjFloorDist
0001B730 4A41                       		tst.w	d1
0001B732 6A00                       		bpl.s	locret_18780
0001B734 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B738                            
0001B738                            locret_18780:
0001B738 4E75                       		rts	
0001B73A                            ; ===========================================================================
0001B73A                            
0001B73A                            Obj74_MakeFlame:
0001B73A 5568 000C                  		subq.w	#2,obY(a0)
0001B73E 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B744 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B74A 4268 0012                  		clr.w	obVelY(a0)
0001B74E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B754 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B75A 117C 0003 0029             		move.b	#3,$29(a0)
0001B760 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001B766 6600                       		bne.s	loc_187CA
0001B768 47D1                       		lea	(a1),a3
0001B76A 45D0                       		lea	(a0),a2
0001B76C 7003                       		moveq	#3,d0
0001B76E                            
0001B76E                            Obj74_Loop:
0001B76E 26DA                       		move.l	(a2)+,(a3)+
0001B770 26DA                       		move.l	(a2)+,(a3)+
0001B772 26DA                       		move.l	(a2)+,(a3)+
0001B774 26DA                       		move.l	(a2)+,(a3)+
0001B776 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B77A                            
0001B77A 4469 0010                  		neg.w	obVelX(a1)
0001B77E 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B782                            
0001B782                            loc_187CA:
0001B782 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B786 4E75                       		rts	
0001B788                            
0001B788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B788                            
0001B788                            
0001B788                            Obj74_Duplicate2:
0001B788 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001B78E 6600                       		bne.s	locret_187EE
0001B790 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B796 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B79C 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B7A0 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B7A6                            
0001B7A6                            locret_187EE:
0001B7A6 4E75                       		rts	
0001B7A8                            ; End of function Obj74_Duplicate2
0001B7A8                            
0001B7A8                            ; ===========================================================================
0001B7A8                            
0001B7A8                            Obj74_Duplicate:
0001B7A8 6100 C57A                  		bsr.w	ObjFloorDist
0001B7AC 4A41                       		tst.w	d1
0001B7AE 6A00                       		bpl.s	loc_18826
0001B7B0 3028 0008                  		move.w	obX(a0),d0
0001B7B4 0C40 1940                  		cmpi.w	#$1940,d0
0001B7B8 6E00                       		bgt.s	loc_1882C
0001B7BA 3228 0030                  		move.w	$30(a0),d1
0001B7BE B240                       		cmp.w	d0,d1
0001B7C0 6700                       		beq.s	loc_1881E
0001B7C2 0240 0010                  		andi.w	#$10,d0
0001B7C6 0241 0010                  		andi.w	#$10,d1
0001B7CA B240                       		cmp.w	d0,d1
0001B7CC 6700                       		beq.s	loc_1881E
0001B7CE 61B8                       		bsr.s	Obj74_Duplicate2
0001B7D0 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B7D6                            
0001B7D6                            loc_1881E:
0001B7D6 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B7DC 4E75                       		rts	
0001B7DE                            ; ===========================================================================
0001B7DE                            
0001B7DE                            loc_18826:
0001B7DE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B7E2 4E75                       		rts	
0001B7E4                            ; ===========================================================================
0001B7E4                            
0001B7E4                            loc_1882C:
0001B7E4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B7E8 4E75                       		rts	
0001B7EA                            ; ===========================================================================
0001B7EA                            
0001B7EA                            Obj74_FallEdge:
0001B7EA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B7F0 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B7F6 3028 0008                  		move.w	obX(a0),d0
0001B7FA 9068 0032                  		sub.w	$32(a0),d0
0001B7FE 6A00                       		bpl.s	loc_1884A
0001B800 4440                       		neg.w	d0
0001B802                            
0001B802                            loc_1884A:
0001B802 0C40 0012                  		cmpi.w	#$12,d0
0001B806 6600                       		bne.s	loc_18856
0001B808 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B80E                            
0001B80E                            loc_18856:
0001B80E 6100 C514                  		bsr.w	ObjFloorDist
0001B812 4A41                       		tst.w	d1
0001B814 6A00                       		bpl.s	locret_1887E
0001B816 5328 0029                  		subq.b	#1,$29(a0)
0001B81A 6700                       		beq.s	Obj74_Delete2
0001B81C 4268 0012                  		clr.w	obVelY(a0)
0001B820 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B826 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B82C 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B832 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B836                            
0001B836                            locret_1887E:
0001B836 4E75                       		rts	
0001B838                            ; ===========================================================================
0001B838                            
0001B838                            Obj74_Delete2:
0001B838 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B83E                            ; ===========================================================================
0001B83E                            
0001B83E                            loc_18886:	; Routine 4
0001B83E 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B844 5328 0029                  		subq.b	#1,$29(a0)
0001B848 6600                       		bne.s	Obj74_Animate
0001B84A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B850 5968 000C                  		subq.w	#4,obY(a0)
0001B854 4228 0020                  		clr.b	obColType(a0)
0001B858                            
0001B858                            Obj74_Animate:
0001B858 43F9 0001 040C             		lea	(Ani_Fire).l,a1
0001B85E 4EF9 0000 C4F4             		jmp	(AnimateSprite).l
0001B864                            ; ===========================================================================
0001B864                            
0001B864                            Obj74_Delete3:	; Routine 6
0001B864 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B864 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B86A                            
0001B86A                            	Obj7A_Delete:
0001B86A 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001B870                            
0001B870                            		include	"_incObj\7A Boss - Star Light.asm"
0001B870                            ; ---------------------------------------------------------------------------
0001B870                            ; Object 7A - Eggman (SLZ)
0001B870                            ; ---------------------------------------------------------------------------
0001B870                            
0001B870                            BossStarLight:
0001B870 7000                       		moveq	#0,d0
0001B872 1028 0024                  		move.b	obRoutine(a0),d0
0001B876 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B87A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B87E                            ; ===========================================================================
0001B87E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B880 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B882 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B884 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B886 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B888                            
0001B888 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B88C 0401 0200                  		dc.b 4,	1, $02, $00
0001B890 0607 0200                  		dc.b 6,	7, $02, $00
0001B894 0800 0180                  		dc.b 8,	0, $01, $80
0001B898                            ; ===========================================================================
0001B898                            
0001B898                            Obj7A_Main:
0001B898 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B89E 317C 0228 000C             		move.w	#$228,obY(a0)
0001B8A4 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B8AA 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B8B0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B8B6 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B8BC 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B8C0 2248                       		movea.l	a0,a1
0001B8C2 7203                       		moveq	#3,d1
0001B8C4 6000                       		bra.s	Obj7A_LoadBoss
0001B8C6                            ; ===========================================================================
0001B8C6                            
0001B8C6                            Obj7A_Loop:
0001B8C6 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001B8CC 6600                       		bne.s	loc_1895C
0001B8CE 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B8D2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B8D8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B8DE                            
0001B8DE                            Obj7A_LoadBoss:
0001B8DE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B8E4 4229 0025                  		clr.b	ob2ndRout(a1)
0001B8E8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B8EC 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B8F0 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B8F4 237C 0001 AC8E 0004        		move.l	#Map_Eggman,obMap(a1)
0001B8FC 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B902 137C 0004 0001             		move.b	#4,obRender(a1)
0001B908 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B90E 2348 0034                  		move.l	a0,$34(a1)
0001B912 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B916                            
0001B916                            loc_1895C:
0001B916 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B91A 45E8 002A                  		lea	$2A(a0),a2
0001B91E 705E                       		moveq	#$5E,d0
0001B920 723E                       		moveq	#$3E,d1
0001B922                            
0001B922                            loc_18968:
0001B922 B011                       		cmp.b	(a1),d0
0001B924 6600                       		bne.s	loc_18974
0001B926 4A29 0028                  		tst.b	obSubtype(a1)
0001B92A 6700                       		beq.s	loc_18974
0001B92C 34C9                       		move.w	a1,(a2)+
0001B92E                            
0001B92E                            loc_18974:
0001B92E D2FC 0040                  		adda.w	#$40,a1
0001B932 51C9 FFEE                  		dbf	d1,loc_18968
0001B936                            
0001B936                            Obj7A_ShipMain:	; Routine 2
0001B936 7000                       		moveq	#0,d0
0001B938 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B93C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B940 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B944 43F9 0001 AC3E             		lea	(Ani_Eggman).l,a1
0001B94A 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001B950 7003                       		moveq	#3,d0
0001B952 C028 0022                  		and.b	obStatus(a0),d0
0001B956 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B95C 8128 0001                  		or.b	d0,obRender(a0)
0001B960 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001B966                            ; ===========================================================================
0001B966 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001B968 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001B96A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001B96C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001B96E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001B970 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001B972                            ; ===========================================================================
0001B972                            
0001B972                            loc_189B8:
0001B972 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B978 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001B97E 6400                       		bcc.s	loc_189CA
0001B980 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B984                            
0001B984                            loc_189CA:
0001B984 6100 EEA4                  		bsr.w	BossMove
0001B988 1028 003F                  		move.b	$3F(a0),d0
0001B98C 5428 003F                  		addq.b	#2,$3F(a0)
0001B990 4EB9 0000 3B42             		jsr	(CalcSine).l
0001B996 EC40                       		asr.w	#6,d0
0001B998 D068 0038                  		add.w	$38(a0),d0
0001B99C 3140 000C                  		move.w	d0,obY(a0)
0001B9A0 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B9A6 6000                       		bra.s	loc_189FE
0001B9A8                            ; ===========================================================================
0001B9A8                            
0001B9A8                            loc_189EE:
0001B9A8 6100 EE80                  		bsr.w	BossMove
0001B9AC 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B9B2 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B9B8                            
0001B9B8                            loc_189FE:
0001B9B8 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001B9BE 6400                       		bcc.s	locret_18A44
0001B9C0 4A28 0022                  		tst.b	obStatus(a0)
0001B9C4 6B00                       		bmi.s	loc_18A46
0001B9C6 4A28 0020                  		tst.b	obColType(a0)
0001B9CA 6600                       		bne.s	locret_18A44
0001B9CC 4A28 003E                  		tst.b	$3E(a0)
0001B9D0 6600                       		bne.s	loc_18A28
0001B9D2 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B9E2                            
0001B9E2                            loc_18A28:
0001B9E2 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B9E6 7000                       		moveq	#0,d0
0001B9E8 4A51                       		tst.w	(a1)
0001B9EA 6600                       		bne.s	loc_18A36
0001B9EC 303C 0EEE                  		move.w	#cWhite,d0
0001B9F0                            
0001B9F0                            loc_18A36:
0001B9F0 3280                       		move.w	d0,(a1)
0001B9F2 5328 003E                  		subq.b	#1,$3E(a0)
0001B9F6 6600                       		bne.s	locret_18A44
0001B9F8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B9FE                            
0001B9FE                            locret_18A44:
0001B9FE 4E75                       		rts	
0001BA00                            ; ===========================================================================
0001BA00                            
0001BA00                            loc_18A46:
0001BA00 7064                       		moveq	#100,d0
0001BA02 6100 0000                  		bsr.w	AddPoints
0001BA06 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BA0C 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BA12 4268 0010                  		clr.w	obVelX(a0)
0001BA16 4E75                       		rts	
0001BA18                            ; ===========================================================================
0001BA18                            
0001BA18                            loc_18A5E:
0001BA18 3028 0030                  		move.w	$30(a0),d0
0001BA1C 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BA22 0828 0000 0022             		btst	#0,obStatus(a0)
0001BA28 6600                       		bne.s	loc_18A7C
0001BA2A 4468 0010                  		neg.w	obVelX(a0)
0001BA2E 0C40 2008                  		cmpi.w	#$2008,d0
0001BA32 6E00                       		bgt.s	loc_18A88
0001BA34 6000                       		bra.s	loc_18A82
0001BA36                            ; ===========================================================================
0001BA36                            
0001BA36                            loc_18A7C:
0001BA36 0C40 2138                  		cmpi.w	#$2138,d0
0001BA3A 6D00                       		blt.s	loc_18A88
0001BA3C                            
0001BA3C                            loc_18A82:
0001BA3C 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BA42                            
0001BA42                            loc_18A88:
0001BA42 3028 0008                  		move.w	8(a0),d0
0001BA46 72FF                       		moveq	#-1,d1
0001BA48 7402                       		moveq	#2,d2
0001BA4A 45E8 002A                  		lea	$2A(a0),a2
0001BA4E 7828                       		moveq	#$28,d4
0001BA50 4A68 0010                  		tst.w	obVelX(a0)
0001BA54 6A00                       		bpl.s	loc_18A9E
0001BA56 4444                       		neg.w	d4
0001BA58                            
0001BA58                            loc_18A9E:
0001BA58 321A                       		move.w	(a2)+,d1
0001BA5A 2641                       		movea.l	d1,a3
0001BA5C 082B 0003 0022             		btst	#3,obStatus(a3)
0001BA62 6600                       		bne.s	loc_18AB4
0001BA64 362B 0008                  		move.w	8(a3),d3
0001BA68 D644                       		add.w	d4,d3
0001BA6A 9640                       		sub.w	d0,d3
0001BA6C 6700                       		beq.s	loc_18AC0
0001BA6E                            
0001BA6E                            loc_18AB4:
0001BA6E 51CA FFE8                  		dbf	d2,loc_18A9E
0001BA72                            
0001BA72 1142 0028                  		move.b	d2,obSubtype(a0)
0001BA76 6000 FF0C                  		bra.w	loc_189CA
0001BA7A                            ; ===========================================================================
0001BA7A                            
0001BA7A                            loc_18AC0:
0001BA7A 1142 0028                  		move.b	d2,obSubtype(a0)
0001BA7E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA82 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BA88 6000 FEFA                  		bra.w	loc_189CA
0001BA8C                            ; ===========================================================================
0001BA8C                            
0001BA8C                            Obj7A_MakeBall:
0001BA8C 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BA92 6600                       		bne.s	loc_18B36
0001BA94 70FF                       		moveq	#-1,d0
0001BA96 1028 0028                  		move.b	obSubtype(a0),d0
0001BA9A 4880                       		ext.w	d0
0001BA9C 6B00                       		bmi.s	loc_18B40
0001BA9E 5540                       		subq.w	#2,d0
0001BAA0 4440                       		neg.w	d0
0001BAA2 D040                       		add.w	d0,d0
0001BAA4 43E8 002A                  		lea	$2A(a0),a1
0001BAA8 3031 0000                  		move.w	(a1,d0.w),d0
0001BAAC 2440                       		movea.l	d0,a2
0001BAAE 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BAB2 723E                       		moveq	#$3E,d1
0001BAB4                            
0001BAB4                            loc_18AFA:
0001BAB4 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BAB8 6700                       		beq.s	loc_18B40
0001BABA D2FC 0040                  		adda.w	#$40,a1
0001BABE 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BAC2                            
0001BAC2 2F08                       		move.l	a0,-(sp)
0001BAC4 41D2                       		lea	(a2),a0
0001BAC6 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001BACC 205F                       		movea.l	(sp)+,a0
0001BACE 6600                       		bne.s	loc_18B40
0001BAD0 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BAD4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BADA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BAE0 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BAE6 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BAEC 234A 003C                  		move.l	a2,$3C(a1)
0001BAF0                            
0001BAF0                            loc_18B36:
0001BAF0 5328 003C                  		subq.b	#1,$3C(a0)
0001BAF4 6700                       		beq.s	loc_18B40
0001BAF6 6000 FEC0                  		bra.w	loc_189FE
0001BAFA                            ; ===========================================================================
0001BAFA                            
0001BAFA                            loc_18B40:
0001BAFA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BAFE 6000 FE84                  		bra.w	loc_189CA
0001BB02                            ; ===========================================================================
0001BB02                            
0001BB02                            loc_18B48:
0001BB02 5328 003C                  		subq.b	#1,$3C(a0)
0001BB06 6B00                       		bmi.s	loc_18B52
0001BB08 6000 ECDE                  		bra.w	BossDefeated
0001BB0C                            ; ===========================================================================
0001BB0C                            
0001BB0C                            loc_18B52:
0001BB0C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB10 4268 0012                  		clr.w	obVelY(a0)
0001BB14 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BB1A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BB20 4268 0010                  		clr.w	obVelX(a0)
0001BB24 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BB2A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BB2E 6600                       		bne.s	loc_18B7C
0001BB30 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BB36                            
0001BB36                            loc_18B7C:
0001BB36 6000 FE80                  		bra.w	loc_189FE
0001BB3A                            ; ===========================================================================
0001BB3A                            
0001BB3A                            loc_18B80:
0001BB3A 5228 003C                  		addq.b	#1,$3C(a0)
0001BB3E 6700                       		beq.s	loc_18B90
0001BB40 6A00                       		bpl.s	loc_18B96
0001BB42 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BB48 6000                       		bra.s	loc_18BC2
0001BB4A                            ; ===========================================================================
0001BB4A                            
0001BB4A                            loc_18B90:
0001BB4A 4268 0012                  		clr.w	obVelY(a0)
0001BB4E 6000                       		bra.s	loc_18BC2
0001BB50                            ; ===========================================================================
0001BB50                            
0001BB50                            loc_18B96:
0001BB50 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BB56 6500                       		bcs.s	loc_18BAE
0001BB58 6700                       		beq.s	loc_18BB4
0001BB5A 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BB60 6500                       		bcs.s	loc_18BC2
0001BB62 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB66 6000                       		bra.s	loc_18BC2
0001BB68                            ; ===========================================================================
0001BB68                            
0001BB68                            loc_18BAE:
0001BB68 5168 0012                  		subq.w	#8,obVelY(a0)
0001BB6C 6000                       		bra.s	loc_18BC2
0001BB6E                            ; ===========================================================================
0001BB6E                            
0001BB6E                            loc_18BB4:
0001BB6E 4268 0012                          	clr.w    obVelY(a0)
0001BB72 4A38 FE2D                          	tst.b     (v_invinc).w
0001BB76 6600                               	bne.s   @boss_invinc
0001BB78                            
0001BB78 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BB7C 6000 0000                          	bra.w      @boss_play
0001BB80                            
0001BB80                            	@boss_invinc:
0001BB80 103C 0000                          	move.b #bgm_Invincible,d0
0001BB84                            
0001BB84                            	@boss_play:
0001BB84 4EB8 129A                          	jsr PlaySound
0001BB88                            
0001BB88                            loc_18BC2:
0001BB88 6000 FE1E                  		bra.w	loc_189EE
0001BB8C                            ; ===========================================================================
0001BB8C                            
0001BB8C                            loc_18BC6:
0001BB8C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BB92 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BB98 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BB9E 6400                       		bcc.s	loc_18BE0
0001BBA0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BBA4 6000                       		bra.s	loc_18BE8
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            loc_18BE0:
0001BBA6 4A28 0001                  		tst.b	obRender(a0)
0001BBAA 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BBAE                            
0001BBAE                            loc_18BE8:
0001BBAE 6100 EC7A                  		bsr.w	BossMove
0001BBB2 6000 FDD0                  		bra.w	loc_189CA
0001BBB6                            ; ===========================================================================
0001BBB6                            
0001BBB6                            Obj7A_FaceMain:	; Routine 4
0001BBB6 7000                       		moveq	#0,d0
0001BBB8 7201                       		moveq	#1,d1
0001BBBA 2268 0034                  		movea.l	$34(a0),a1
0001BBBE 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BBC2 0C00 0006                  		cmpi.b	#6,d0
0001BBC6 6B00                       		bmi.s	loc_18C06
0001BBC8 720A                       		moveq	#$A,d1
0001BBCA 6000                       		bra.s	loc_18C1A
0001BBCC                            ; ===========================================================================
0001BBCC                            
0001BBCC                            loc_18C06:
0001BBCC 4A29 0020                  		tst.b	obColType(a1)
0001BBD0 6600                       		bne.s	loc_18C10
0001BBD2 7205                       		moveq	#5,d1
0001BBD4 6000                       		bra.s	loc_18C1A
0001BBD6                            ; ===========================================================================
0001BBD6                            
0001BBD6                            loc_18C10:
0001BBD6 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BBDC 6500                       		bcs.s	loc_18C1A
0001BBDE 7204                       		moveq	#4,d1
0001BBE0                            
0001BBE0                            loc_18C1A:
0001BBE0 1141 001C                  		move.b	d1,obAnim(a0)
0001BBE4 0C00 000A                  		cmpi.b	#$A,d0
0001BBE8 6600                       		bne.s	loc_18C32
0001BBEA 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BBF0 4A28 0001                  		tst.b	obRender(a0)
0001BBF4 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BBF8                            
0001BBF8                            loc_18C32:
0001BBF8 6000                       		bra.s	loc_18C6C
0001BBFA                            ; ===========================================================================
0001BBFA                            
0001BBFA                            Obj7A_FlameMain:; Routine 6
0001BBFA 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BC00 2268 0034                  		movea.l	$34(a0),a1
0001BC04 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BC0A 6600                       		bne.s	loc_18C56
0001BC0C 4A28 0001                  		tst.b	obRender(a0)
0001BC10 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BC14 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BC1A 6000                       		bra.s	loc_18C6C
0001BC1C                            ; ===========================================================================
0001BC1C                            
0001BC1C                            loc_18C56:
0001BC1C 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BC22 6E00                       		bgt.s	loc_18C6C
0001BC24 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BC2A 6D00                       		blt.s	loc_18C6C
0001BC2C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BC32                            
0001BC32                            loc_18C6C:
0001BC32 43F9 0001 AC3E             		lea	(Ani_Eggman).l,a1
0001BC38 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001BC3E                            
0001BC3E                            loc_18C78:
0001BC3E 2268 0034                  		movea.l	$34(a0),a1
0001BC42 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BC48 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BC4E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BC54 7003                       		moveq	#3,d0
0001BC56 C028 0022                  		and.b	obStatus(a0),d0
0001BC5A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BC60 8128 0001                  		or.b	d0,obRender(a0)
0001BC64 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001BC6A                            ; ===========================================================================
0001BC6A                            
0001BC6A                            Obj7A_TubeMain:	; Routine 8
0001BC6A 2268 0034                  		movea.l	$34(a0),a1
0001BC6E 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BC74 6600                       		bne.s	loc_18CB8
0001BC76 4A28 0001                  		tst.b	obRender(a0)
0001BC7A 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BC7E                            
0001BC7E                            loc_18CB8:
0001BC7E 217C 0001 AD7E 0004        		move.l	#Map_BossItems,obMap(a0)
0001BC86 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BC8C 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BC92 60AA                       		bra.s	loc_18C78
0001BC92 60AA                       		bra.s	loc_18C78
0001BC94                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BC94                            ; ---------------------------------------------------------------------------
0001BC94                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BC94                            ; ---------------------------------------------------------------------------
0001BC94                            
0001BC94                            BossSpikeball:
0001BC94 7000                       		moveq	#0,d0
0001BC96 1028 0024                  		move.b	obRoutine(a0),d0
0001BC9A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BC9E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BCA2 3028 0030                  		move.w	$30(a0),d0
0001BCA6 0240 FF80                  		andi.w	#$FF80,d0
0001BCAA 3238 F700                  		move.w	(v_screenposx).w,d1
0001BCAE 0441 0080                  		subi.w	#$80,d1
0001BCB2 0241 FF80                  		andi.w	#$FF80,d1
0001BCB6 9041                       		sub.w	d1,d0
0001BCB8 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BCBC 0C40 0280                  		cmpi.w	#$280,d0
0001BCC0 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BCC4 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001BCCA                            ; ===========================================================================
0001BCCA 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BCCC 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BCCE 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BCD0 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BCD2 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BCD4 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BCD6                            ; ===========================================================================
0001BCD6                            
0001BCD6                            Obj7B_Main:	; Routine 0
0001BCD6 217C 0001 39E6 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BCDE 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BCE4 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BCEA 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BCF0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BCF6 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BCFC 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BD02 2268 003C                  		movea.l	$3C(a0),a1
0001BD06 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BD0C 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BD12 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BD18 3028 0008                  		move.w	obX(a0),d0
0001BD1C B069 0008                  		cmp.w	obX(a1),d0
0001BD20 6E00                       		bgt.s	loc_18D68
0001BD22 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BD28 117C 0002 003A             		move.b	#2,$3A(a0)
0001BD2E                            
0001BD2E                            loc_18D68:
0001BD2E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BD32                            
0001BD32                            Obj7B_Fall:	; Routine 2
0001BD32 4EB9 0000 F3EE             		jsr	(ObjectFall).l
0001BD38 2268 003C                  		movea.l	$3C(a0),a1
0001BD3C 45F9 0000 0000             		lea	(word_19018).l,a2
0001BD42 7000                       		moveq	#0,d0
0001BD44 1029 001A                  		move.b	obFrame(a1),d0
0001BD48 3228 0008                  		move.w	8(a0),d1
0001BD4C 9268 0030                  		sub.w	$30(a0),d1
0001BD50 6400                       		bcc.s	loc_18D8E
0001BD52 5440                       		addq.w	#2,d0
0001BD54                            
0001BD54                            loc_18D8E:
0001BD54 D040                       		add.w	d0,d0
0001BD56 3228 0034                  		move.w	$34(a0),d1
0001BD5A D272 0000                  		add.w	(a2,d0.w),d1
0001BD5E B268 000C                  		cmp.w	obY(a0),d1
0001BD62 6E00                       		bgt.s	locret_18DC4
0001BD64 2268 003C                  		movea.l	$3C(a0),a1
0001BD68 7202                       		moveq	#2,d1
0001BD6A 0828 0000 0022             		btst	#0,obStatus(a0)
0001BD70 6700                       		beq.s	loc_18DAE
0001BD72 7200                       		moveq	#0,d1
0001BD74                            
0001BD74                            loc_18DAE:
0001BD74 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BD7A 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BD80 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BD86 6000 0000                  		bra.w	loc_18FA2
0001BD8A                            ; ===========================================================================
0001BD8A                            
0001BD8A                            locret_18DC4:
0001BD8A 4E75                       		rts	
0001BD8C                            ; ===========================================================================
0001BD8C                            
0001BD8C                            loc_18DC6:	; Routine 4
0001BD8C 2268 003C                  		movea.l	$3C(a0),a1
0001BD90 7000                       		moveq	#0,d0
0001BD92 1028 003A                  		move.b	$3A(a0),d0
0001BD96 9029 003A                  		sub.b	$3A(a1),d0
0001BD9A 6700                       		beq.s	loc_18E2A
0001BD9C 6400                       		bcc.s	loc_18DDA
0001BD9E 4400                       		neg.b	d0
0001BDA0                            
0001BDA0                            loc_18DDA:
0001BDA0 323C F7E8                  		move.w	#-$818,d1
0001BDA4 343C FEEC                  		move.w	#-$114,d2
0001BDA8 0C00 0001                  		cmpi.b	#1,d0
0001BDAC 6700                       		beq.s	loc_18E00
0001BDAE 323C F6A0                  		move.w	#-$960,d1
0001BDB2 343C FF0C                  		move.w	#-$F4,d2
0001BDB6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BDBC 6D00                       		blt.s	loc_18E00
0001BDBE 323C F5E0                  		move.w	#-$A20,d1
0001BDC2 343C FF80                  		move.w	#-$80,d2
0001BDC6                            
0001BDC6                            loc_18E00:
0001BDC6 3141 0012                  		move.w	d1,obVelY(a0)
0001BDCA 3142 0010                  		move.w	d2,obVelX(a0)
0001BDCE 3028 0008                  		move.w	obX(a0),d0
0001BDD2 9068 0030                  		sub.w	$30(a0),d0
0001BDD6 6400                       		bcc.s	loc_18E16
0001BDD8 4468 0010                  		neg.w	obVelX(a0)
0001BDDC                            
0001BDDC                            loc_18E16:
0001BDDC 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BDE2 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BDE8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BDEC 6000 0000                  		bra.w	loc_18EAA
0001BDF0                            ; ===========================================================================
0001BDF0                            
0001BDF0                            loc_18E2A:
0001BDF0 45F9 0000 0000             		lea	(word_19018).l,a2
0001BDF6 7000                       		moveq	#0,d0
0001BDF8 1029 001A                  		move.b	obFrame(a1),d0
0001BDFC 343C 0028                  		move.w	#$28,d2
0001BE00 3228 0008                  		move.w	obX(a0),d1
0001BE04 9268 0030                  		sub.w	$30(a0),d1
0001BE08 6400                       		bcc.s	loc_18E48
0001BE0A 4442                       		neg.w	d2
0001BE0C 5440                       		addq.w	#2,d0
0001BE0E                            
0001BE0E                            loc_18E48:
0001BE0E D040                       		add.w	d0,d0
0001BE10 3228 0034                  		move.w	$34(a0),d1
0001BE14 D272 0000                  		add.w	(a2,d0.w),d1
0001BE18 3141 000C                  		move.w	d1,obY(a0)
0001BE1C D468 0030                  		add.w	$30(a0),d2
0001BE20 3142 0008                  		move.w	d2,obX(a0)
0001BE24 4268 000E                  		clr.w	obY+2(a0)
0001BE28 4268 000A                  		clr.w	obX+2(a0)
0001BE2C 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BE30 6600                       		bne.s	loc_18E7A
0001BE32 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BE38 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BE3E 4E75                       		rts	
0001BE40                            ; ===========================================================================
0001BE40                            
0001BE40                            loc_18E7A:
0001BE40 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BE46 6600                       		bne.s	loc_18E88
0001BE48 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BE4E                            
0001BE4E                            loc_18E88:
0001BE4E 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BE54 6600                       		bne.s	loc_18E96
0001BE56 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BE5C                            
0001BE5C                            loc_18E96:
0001BE5C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BE60 6E00                       		bgt.s	locret_18EA8
0001BE62 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BE68 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BE6E                            
0001BE6E                            locret_18EA8:
0001BE6E 4E75                       		rts	
0001BE70                            ; ===========================================================================
0001BE70                            
0001BE70                            loc_18EAA:	; Routine 6
0001BE70 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BE74 707A                       		moveq	#id_BossStarLight,d0
0001BE76 7240                       		moveq	#$40,d1
0001BE78 743E                       		moveq	#$3E,d2
0001BE7A                            
0001BE7A                            loc_18EB4:
0001BE7A B011                       		cmp.b	(a1),d0
0001BE7C 6700                       		beq.s	loc_18EC0
0001BE7E D2C1                       		adda.w	d1,a1
0001BE80 51CA FFF8                  		dbf	d2,loc_18EB4
0001BE84                            
0001BE84 6000                       		bra.s	loc_18F38
0001BE86                            ; ===========================================================================
0001BE86                            
0001BE86                            loc_18EC0:
0001BE86 3029 0008                  		move.w	obX(a1),d0
0001BE8A 3229 000C                  		move.w	obY(a1),d1
0001BE8E 3428 0008                  		move.w	obX(a0),d2
0001BE92 3628 000C                  		move.w	obY(a0),d3
0001BE96 45FA 0000                  		lea	byte_19022(pc),a2
0001BE9A 47FA 0000                  		lea	byte_19026(pc),a3
0001BE9E 181A                       		move.b	(a2)+,d4
0001BEA0 4884                       		ext.w	d4
0001BEA2 D044                       		add.w	d4,d0
0001BEA4 181B                       		move.b	(a3)+,d4
0001BEA6 4884                       		ext.w	d4
0001BEA8 D444                       		add.w	d4,d2
0001BEAA B440                       		cmp.w	d0,d2
0001BEAC 6500                       		bcs.s	loc_18F38
0001BEAE 181A                       		move.b	(a2)+,d4
0001BEB0 4884                       		ext.w	d4
0001BEB2 D044                       		add.w	d4,d0
0001BEB4 181B                       		move.b	(a3)+,d4
0001BEB6 4884                       		ext.w	d4
0001BEB8 D444                       		add.w	d4,d2
0001BEBA B042                       		cmp.w	d2,d0
0001BEBC 6500                       		bcs.s	loc_18F38
0001BEBE 181A                       		move.b	(a2)+,d4
0001BEC0 4884                       		ext.w	d4
0001BEC2 D244                       		add.w	d4,d1
0001BEC4 181B                       		move.b	(a3)+,d4
0001BEC6 4884                       		ext.w	d4
0001BEC8 D644                       		add.w	d4,d3
0001BECA B641                       		cmp.w	d1,d3
0001BECC 6500                       		bcs.s	loc_18F38
0001BECE 181A                       		move.b	(a2)+,d4
0001BED0 4884                       		ext.w	d4
0001BED2 D244                       		add.w	d4,d1
0001BED4 181B                       		move.b	(a3)+,d4
0001BED6 4884                       		ext.w	d4
0001BED8 D644                       		add.w	d4,d3
0001BEDA B243                       		cmp.w	d3,d1
0001BEDC 6500                       		bcs.s	loc_18F38
0001BEDE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BEE2 4268 0028                  		clr.w	obSubtype(a0)
0001BEE6 4229 0020                  		clr.b	obColType(a1)
0001BEEA 5329 0021                  		subq.b	#1,obColProp(a1)
0001BEEE 6600                       		bne.s	loc_18F38
0001BEF0 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BEF6 4268 0010                  		clr.w	obVelX(a0)
0001BEFA 4268 0012                  		clr.w	obVelY(a0)
0001BEFE                            
0001BEFE                            loc_18F38:
0001BEFE 4A68 0012                  		tst.w	obVelY(a0)
0001BF02 6A00                       		bpl.s	loc_18F5C
0001BF04 4EB9 0000 F3EE             		jsr	(ObjectFall).l
0001BF0A 3028 0034                  		move.w	$34(a0),d0
0001BF0E 0440 002F                  		subi.w	#$2F,d0
0001BF12 B068 000C                  		cmp.w	obY(a0),d0
0001BF16 6E00                       		bgt.s	loc_18F58
0001BF18 4EB9 0000 F3EE             		jsr	(ObjectFall).l
0001BF1E                            
0001BF1E                            loc_18F58:
0001BF1E 6000 FF20                  		bra.w	loc_18E7A
0001BF22                            ; ===========================================================================
0001BF22                            
0001BF22                            loc_18F5C:
0001BF22 4EB9 0000 F3EE             		jsr	(ObjectFall).l
0001BF28 2268 003C                  		movea.l	$3C(a0),a1
0001BF2C 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF32 7000                       		moveq	#0,d0
0001BF34 1029 001A                  		move.b	obFrame(a1),d0
0001BF38 3228 0008                  		move.w	obX(a0),d1
0001BF3C 9268 0030                  		sub.w	$30(a0),d1
0001BF40 6400                       		bcc.s	loc_18F7E
0001BF42 5440                       		addq.w	#2,d0
0001BF44                            
0001BF44                            loc_18F7E:
0001BF44 D040                       		add.w	d0,d0
0001BF46 3228 0034                  		move.w	$34(a0),d1
0001BF4A D272 0000                  		add.w	(a2,d0.w),d1
0001BF4E B268 000C                  		cmp.w	obY(a0),d1
0001BF52 6ECA                       		bgt.s	loc_18F58
0001BF54 2268 003C                  		movea.l	$3C(a0),a1
0001BF58 7202                       		moveq	#2,d1
0001BF5A 4A68 0010                  		tst.w	obVelX(a0)
0001BF5E 6B00                       		bmi.s	loc_18F9C
0001BF60 7200                       		moveq	#0,d1
0001BF62                            
0001BF62                            loc_18F9C:
0001BF62 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001BF68                            
0001BF68                            loc_18FA2:
0001BF68 1341 003A                  		move.b	d1,$3A(a1)
0001BF6C 1141 003A                  		move.b	d1,$3A(a0)
0001BF70 B229 001A                  		cmp.b	obFrame(a1),d1
0001BF74 6700                       		beq.s	loc_19008
0001BF76 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001BF7C 6700                       		beq.s	loc_19008
0001BF7E 4229 0025                  		clr.b	ob2ndRout(a1)
0001BF82 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001BF88 45F8 D000                  		lea	(v_objspace).w,a2
0001BF8C 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001BF92 446A 0012                  		neg.w	obVelY(a2)
0001BF96 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001BF9C 6600                       		bne.s	loc_18FDC
0001BF9E E0EA 0012                  		asr	obVelY(a2)
0001BFA2                            
0001BFA2                            loc_18FDC:
0001BFA2 08EA 0001 0022             		bset	#1,obStatus(a2)
0001BFA8 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001BFAE 422A 003C                  		clr.b	$3C(a2)
0001BFB2 2F08                       		move.l	a0,-(sp)
0001BFB4 41D2                       		lea	(a2),a0
0001BFB6 4EB9 0001 5BD0             		jsr	(Sonic_ChkRoll).l
0001BFBC 205F                       		movea.l	(sp)+,a0
0001BFBE 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001BFCE                            
0001BFCE                            loc_19008:
0001BFCE 4268 0010                  		clr.w	obVelX(a0)
0001BFD2 4268 0012                  		clr.w	obVelY(a0)
0001BFD6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BFDA 6000 FE64                  		bra.w	loc_18E7A
0001BFDE                            ; ===========================================================================
0001BFDE FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001BFE8                            		even
0001BFE8 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001BFEC                            		even
0001BFEC 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001BFF0                            		even
0001BFF0                            ; ===========================================================================
0001BFF0                            
0001BFF0                            Obj7B_Explode:	; Routine 8
0001BFF0 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001BFF4 4228 0024                  		clr.b	obRoutine(a0)
0001BFF8 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001BFFE 6700                       		beq.s	Obj7B_MakeFrag
0001C000 4E75                       		rts	
0001C002                            ; ===========================================================================
0001C002                            
0001C002                            Obj7B_MakeFrag:
0001C002 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C008 7203                       		moveq	#3,d1
0001C00A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C00E                            
0001C00E                            Obj7B_Loop:
0001C00E 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001C014 6600                       		bne.s	loc_1909A
0001C016 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C01A 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C020 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C028 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C02E 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C034 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C03A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C040 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C044 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C048 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C04E 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C054 08E9 0007 0001             		bset	#7,obRender(a1)
0001C05A 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C060                            
0001C060                            loc_1909A:
0001C060 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C064                            
0001C064 4E75                       		rts	
0001C066                            ; ===========================================================================
0001C066 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C06A FF60 FDC0                  		dc.w -$A0, -$240
0001C06E 0100 FCC0                  		dc.w $100, -$340
0001C072 00A0 FDC0                  		dc.w $A0, -$240
0001C076                            ; ===========================================================================
0001C076                            
0001C076                            Obj7B_MoveFrag:	; Routine $A
0001C076 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001C07C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C082 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C088 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C08E 7004                       		moveq	#4,d0
0001C090 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C094 E448                       		lsr.w	#2,d0
0001C096 1140 001A                  		move.b	d0,obFrame(a0)
0001C09A 4A28 0001                  		tst.b	1(a0)
0001C09E 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C0A2 4E75                       		rts	
0001C0A2 4E75                       		rts	
0001C0A4                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C0A4                            ; ---------------------------------------------------------------------------
0001C0A4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C0A4                            ; ---------------------------------------------------------------------------
0001C0A4                            Map_BSBall_internal:
0001C0A4 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C0A6 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C0A8 01                         @fireball1:	dc.b 1
0001C0A9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C0AE 01                         @fireball2:	dc.b 1
0001C0AF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C0B4                            		even
0001C0B4                            		even
0001C0B4                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C0B4                            ; ---------------------------------------------------------------------------
0001C0B4                            ; Object 75 - Eggman (SYZ)
0001C0B4                            ; ---------------------------------------------------------------------------
0001C0B4                            
0001C0B4                            BossSpringYard:
0001C0B4 7000                       		moveq	#0,d0
0001C0B6 1028 0024                  		move.b	obRoutine(a0),d0
0001C0BA 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C0BE 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C0C2                            ; ===========================================================================
0001C0C2 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C0C4 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C0C6 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C0C8 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C0CA 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C0CC                            
0001C0CC 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C0D0 0401 0280                  		dc.b 4,	1, $02, $80
0001C0D4 0607 0280                  		dc.b 6,	7, $02, $80
0001C0D8 0800 0280                  		dc.b 8,	0, $02, $80
0001C0DC                            ; ===========================================================================
0001C0DC                            
0001C0DC                            Obj75_Main:	; Routine 0
0001C0DC 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C0E2 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C0E8 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C0EE 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C0F4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C0FA 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C100 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C104 2248                       		movea.l	a0,a1
0001C106 7203                       		moveq	#3,d1
0001C108 6000                       		bra.s	Obj75_LoadBoss
0001C10A                            ; ===========================================================================
0001C10A                            
0001C10A                            Obj75_Loop:
0001C10A 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001C110 6600                       		bne.s	Obj75_ShipMain
0001C112 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C116 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C11C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C122                            
0001C122                            Obj75_LoadBoss:
0001C122 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C128 4229 0025                  		clr.b	ob2ndRout(a1)
0001C12C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C130 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C134 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C138 237C 0001 AC8E 0004        		move.l	#Map_Eggman,obMap(a1)
0001C140 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C146 137C 0004 0001             		move.b	#4,obRender(a1)
0001C14C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C152 2348 0034                  		move.l	a0,$34(a1)
0001C156 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C15A                            
0001C15A                            Obj75_ShipMain:	; Routine 2
0001C15A 7000                       		moveq	#0,d0
0001C15C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C160 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C164 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C168 43F9 0001 AC3E             		lea	(Ani_Eggman).l,a1
0001C16E 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001C174 7003                       		moveq	#3,d0
0001C176 C028 0022                  		and.b	obStatus(a0),d0
0001C17A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C180 8128 0001                  		or.b	d0,obRender(a0)
0001C184 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001C18A                            ; ===========================================================================
0001C18A 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C18E 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C192 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C196                            ; ===========================================================================
0001C196                            
0001C196                            loc_191CC:
0001C196 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C19C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C1A2 6400                       		bcc.s	loc_191DE
0001C1A4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C1A8                            
0001C1A8                            loc_191DE:
0001C1A8 1028 003F                  		move.b	$3F(a0),d0
0001C1AC 5428 003F                  		addq.b	#2,$3F(a0)
0001C1B0 4EB9 0000 3B42             		jsr	(CalcSine).l
0001C1B6 E440                       		asr.w	#2,d0
0001C1B8 3140 0012                  		move.w	d0,obVelY(a0)
0001C1BC                            
0001C1BC                            loc_191F2:
0001C1BC 6100 E66C                  		bsr.w	BossMove
0001C1C0 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C1C6 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C1CC                            
0001C1CC                            loc_19202:
0001C1CC 3028 0008                  		move.w	8(a0),d0
0001C1D0 0440 2C00                  		subi.w	#$2C00,d0
0001C1D4 EA48                       		lsr.w	#5,d0
0001C1D6 1140 0034                  		move.b	d0,$34(a0)
0001C1DA 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C1E0 6400                       		bcc.s	locret_19256
0001C1E2 4A28 0022                  		tst.b	obStatus(a0)
0001C1E6 6B00                       		bmi.s	loc_19258
0001C1E8 4A28 0020                  		tst.b	obColType(a0)
0001C1EC 6600                       		bne.s	locret_19256
0001C1EE 4A28 003E                  		tst.b	$3E(a0)
0001C1F2 6600                       		bne.s	loc_1923A
0001C1F4 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C204                            
0001C204                            loc_1923A:
0001C204 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C208 7000                       		moveq	#0,d0
0001C20A 4A51                       		tst.w	(a1)
0001C20C 6600                       		bne.s	loc_19248
0001C20E 303C 0EEE                  		move.w	#cWhite,d0
0001C212                            
0001C212                            loc_19248:
0001C212 3280                       		move.w	d0,(a1)
0001C214 5328 003E                  		subq.b	#1,$3E(a0)
0001C218 6600                       		bne.s	locret_19256
0001C21A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C220                            
0001C220                            locret_19256:
0001C220 4E75                       		rts	
0001C222                            ; ===========================================================================
0001C222                            
0001C222                            loc_19258:
0001C222 7064                       		moveq	#100,d0
0001C224 6100 0000                  		bsr.w	AddPoints
0001C228 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C22E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C234 4268 0010                  		clr.w	obVelX(a0)
0001C238 4E75                       		rts	
0001C23A                            ; ===========================================================================
0001C23A                            
0001C23A                            loc_19270:
0001C23A 3028 0030                  		move.w	$30(a0),d0
0001C23E 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C244 0828 0000 0022             		btst	#0,obStatus(a0)
0001C24A 6600                       		bne.s	loc_1928E
0001C24C 4468 0010                  		neg.w	obVelX(a0)
0001C250 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C254 6E00                       		bgt.s	loc_1929E
0001C256 6000                       		bra.s	loc_19294
0001C258                            ; ===========================================================================
0001C258                            
0001C258                            loc_1928E:
0001C258 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C25C 6D00                       		blt.s	loc_1929E
0001C25E                            
0001C25E                            loc_19294:
0001C25E 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C264 4228 003D                  		clr.b	$3D(a0)
0001C268                            
0001C268                            loc_1929E:
0001C268 0440 2C10                  		subi.w	#$2C10,d0
0001C26C 0240 001F                  		andi.w	#$1F,d0
0001C270 0440 001F                  		subi.w	#$1F,d0
0001C274 6A00                       		bpl.s	loc_192AE
0001C276 4440                       		neg.w	d0
0001C278                            
0001C278                            loc_192AE:
0001C278 5340                       		subq.w	#1,d0
0001C27A 6E00                       		bgt.s	loc_192E8
0001C27C 4A28 003D                  		tst.b	$3D(a0)
0001C280 6600                       		bne.s	loc_192E8
0001C282 3238 D008                  		move.w	(v_player+obX).w,d1
0001C286 0441 2C00                  		subi.w	#$2C00,d1
0001C28A EA41                       		asr.w	#5,d1
0001C28C B228 0034                  		cmp.b	$34(a0),d1
0001C290 6600                       		bne.s	loc_192E8
0001C292 7000                       		moveq	#0,d0
0001C294 1028 0034                  		move.b	$34(a0),d0
0001C298 EB40                       		asl.w	#5,d0
0001C29A 0640 2C10                  		addi.w	#$2C10,d0
0001C29E 3140 0030                  		move.w	d0,$30(a0)
0001C2A2 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C2A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C2AA 4268 0028                  		clr.w	obSubtype(a0)
0001C2AE 4268 0010                  		clr.w	obVelX(a0)
0001C2B2                            
0001C2B2                            loc_192E8:
0001C2B2 6000 FEF4                  		bra.w	loc_191DE
0001C2B6                            ; ===========================================================================
0001C2B6                            
0001C2B6                            loc_192EC:
0001C2B6 7000                       		moveq	#0,d0
0001C2B8 1028 0028                  		move.b	obSubtype(a0),d0
0001C2BC 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C2C0 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C2C4                            ; ===========================================================================
0001C2C4 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C2C6 0000                       		dc.w loc_19348-off_192FA
0001C2C8 0000                       		dc.w loc_1938E-off_192FA
0001C2CA 0000                       		dc.w loc_193D0-off_192FA
0001C2CC                            ; ===========================================================================
0001C2CC                            
0001C2CC                            loc_19302:
0001C2CC 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C2D2 3028 0038                  		move.w	$38(a0),d0
0001C2D6 0C40 0556                  		cmpi.w	#$556,d0
0001C2DA 6500                       		bcs.s	loc_19344
0001C2DC 317C 0556 0038             		move.w	#$556,$38(a0)
0001C2E2 4268 003C                  		clr.w	$3C(a0)
0001C2E6 70FF                       		moveq	#-1,d0
0001C2E8 3028 0036                  		move.w	$36(a0),d0
0001C2EC 6700                       		beq.s	loc_1933C
0001C2EE 2240                       		movea.l	d0,a1
0001C2F0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C2F6 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C2FC 2348 0034                  		move.l	a0,$34(a1)
0001C300 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C306                            
0001C306                            loc_1933C:
0001C306 4268 0012                  		clr.w	obVelY(a0)
0001C30A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C30E                            
0001C30E                            loc_19344:
0001C30E 6000 FEAC                  		bra.w	loc_191F2
0001C312                            ; ===========================================================================
0001C312                            
0001C312                            loc_19348:
0001C312 5368 003C                  		subq.w	#1,$3C(a0)
0001C316 6A00                       		bpl.s	loc_19366
0001C318 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C31C 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C322 4A68 0036                  		tst.w	$36(a0)
0001C326 6600                       		bne.s	loc_19362
0001C328 E0E8 0012                  		asr	obVelY(a0)
0001C32C                            
0001C32C                            loc_19362:
0001C32C 7000                       		moveq	#0,d0
0001C32E 6000                       		bra.s	loc_1937C
0001C330                            ; ===========================================================================
0001C330                            
0001C330                            loc_19366:
0001C330 7000                       		moveq	#0,d0
0001C332 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C338 6E00                       		bgt.s	loc_1937C
0001C33A 7002                       		moveq	#2,d0
0001C33C 0828 0001 003D             		btst	#1,$3D(a0)
0001C342 6700                       		beq.s	loc_1937C
0001C344 4440                       		neg.w	d0
0001C346                            
0001C346                            loc_1937C:
0001C346 D068 0038                  		add.w	$38(a0),d0
0001C34A 3140 000C                  		move.w	d0,obY(a0)
0001C34E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C354 6000 FE76                  		bra.w	loc_19202
0001C358                            ; ===========================================================================
0001C358                            
0001C358                            loc_1938E:
0001C358 303C 04DA                  		move.w	#$4DA,d0
0001C35C 4A68 0036                  		tst.w	$36(a0)
0001C360 6700                       		beq.s	loc_1939C
0001C362 0440 0018                  		subi.w	#$18,d0
0001C366                            
0001C366                            loc_1939C:
0001C366 B068 0038                  		cmp.w	$38(a0),d0
0001C36A 6D00                       		blt.s	loc_193BE
0001C36C 317C 0008 003C             		move.w	#8,$3C(a0)
0001C372 4A68 0036                  		tst.w	$36(a0)
0001C376 6700                       		beq.s	loc_193B4
0001C378 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C37E                            
0001C37E                            loc_193B4:
0001C37E 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C382 4268 0012                  		clr.w	obVelY(a0)
0001C386 6000                       		bra.s	loc_193CC
0001C388                            ; ===========================================================================
0001C388                            
0001C388                            loc_193BE:
0001C388 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C38E 6C00                       		bge.s	loc_193CC
0001C390 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C396                            
0001C396                            loc_193CC:
0001C396 6000 FE24                  		bra.w	loc_191F2
0001C39A                            ; ===========================================================================
0001C39A                            
0001C39A                            loc_193D0:
0001C39A 5368 003C                  		subq.w	#1,$3C(a0)
0001C39E 6E00                       		bgt.s	loc_19406
0001C3A0 6B00                       		bmi.s	loc_193EE
0001C3A2 70FF                       		moveq	#-1,d0
0001C3A4 3028 0036                  		move.w	$36(a0),d0
0001C3A8 6700                       		beq.s	loc_193E8
0001C3AA 2240                       		movea.l	d0,a1
0001C3AC 137C 000A 0029             		move.b	#$A,$29(a1)
0001C3B2                            
0001C3B2                            loc_193E8:
0001C3B2 4268 0036                  		clr.w	$36(a0)
0001C3B6 6000                       		bra.s	loc_19406
0001C3B8                            ; ===========================================================================
0001C3B8                            
0001C3B8                            loc_193EE:
0001C3B8 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C3BE 6600                       		bne.s	loc_19406
0001C3C0 4228 0029                  		clr.b	$29(a0)
0001C3C4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C3C8 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C3CE 6000                       		bra.s	loc_19446
0001C3D0                            ; ===========================================================================
0001C3D0                            
0001C3D0                            loc_19406:
0001C3D0 7001                       		moveq	#1,d0
0001C3D2 4A68 0036                  		tst.w	$36(a0)
0001C3D6 6700                       		beq.s	loc_19410
0001C3D8 7002                       		moveq	#2,d0
0001C3DA                            
0001C3DA                            loc_19410:
0001C3DA 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C3E0 6700                       		beq.s	loc_19424
0001C3E2 6D00                       		blt.s	loc_1941C
0001C3E4 4440                       		neg.w	d0
0001C3E6                            
0001C3E6                            loc_1941C:
0001C3E6 4A68 0036                  		tst.w	$36(a0)
0001C3EA D168 0038                  		add.w	d0,$38(a0)
0001C3EE                            
0001C3EE                            loc_19424:
0001C3EE 7000                       		moveq	#0,d0
0001C3F0 4A68 0036                  		tst.w	$36(a0)
0001C3F4 6700                       		beq.s	loc_19438
0001C3F6 7002                       		moveq	#2,d0
0001C3F8 0828 0000 003D             		btst	#0,$3D(a0)
0001C3FE 6700                       		beq.s	loc_19438
0001C400 4440                       		neg.w	d0
0001C402                            
0001C402                            loc_19438:
0001C402 D068 0038                  		add.w	$38(a0),d0
0001C406 3140 000C                  		move.w	d0,obY(a0)
0001C40A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C410                            
0001C410                            loc_19446:
0001C410 6000 FDBA                  		bra.w	loc_19202
0001C414                            
0001C414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C414                            
0001C414                            
0001C414                            Obj75_FindBlocks:
0001C414 4268 0036                  		clr.w	$36(a0)
0001C418 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C41C 703E                       		moveq	#$3E,d0
0001C41E 7276                       		moveq	#$76,d1
0001C420 1428 0034                  		move.b	$34(a0),d2
0001C424                            
0001C424                            Obj75_FindLoop:
0001C424 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C426 6600                       		bne.s	loc_1946A	; if not, branch
0001C428 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C42C 6600                       		bne.s	loc_1946A
0001C42E 3149 0036                  		move.w	a1,$36(a0)
0001C432 6000                       		bra.s	locret_19472
0001C434                            ; ===========================================================================
0001C434                            
0001C434                            loc_1946A:
0001C434 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C438 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C43C                            
0001C43C                            locret_19472:
0001C43C 4E75                       		rts	
0001C43E                            ; End of function Obj75_FindBlocks
0001C43E                            
0001C43E                            ; ===========================================================================
0001C43E                            
0001C43E                            loc_19474:
0001C43E 5368 003C                  		subq.w	#1,$3C(a0)
0001C442 6B00                       		bmi.s	loc_1947E
0001C444 6000 E3A2                  		bra.w	BossDefeated
0001C448                            ; ===========================================================================
0001C448                            
0001C448                            loc_1947E:
0001C448 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C44C 4268 0012                  		clr.w	obVelY(a0)
0001C450 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C456 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C45C 4268 0010                  		clr.w	obVelX(a0)
0001C460 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C466 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C46A 6600                       		bne.s	loc_194A8
0001C46C 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C472                            
0001C472                            loc_194A8:
0001C472 6000 FD58                  		bra.w	loc_19202
0001C476                            ; ===========================================================================
0001C476                            
0001C476                            loc_194AC:
0001C476 5268 003C                  		addq.w	#1,$3C(a0)
0001C47A 6700                       		beq.s	loc_194BC
0001C47C 6A00                       		bpl.s	loc_194C2
0001C47E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C484 6000                       		bra.s	loc_194EE
0001C486                            ; ===========================================================================
0001C486                            
0001C486                            loc_194BC:
0001C486 4268 0012                  		clr.w	obVelY(a0)
0001C48A 6000                       		bra.s	loc_194EE
0001C48C                            ; ===========================================================================
0001C48C                            
0001C48C                            loc_194C2:
0001C48C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C492 6500                       		bcs.s	loc_194DA
0001C494 6700                       		beq.s	loc_194E0
0001C496 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C49C 6500                       		bcs.s	loc_194EE
0001C49E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4A2 6000                       		bra.s	loc_194EE
0001C4A4                            ; ===========================================================================
0001C4A4                            
0001C4A4                            loc_194DA:
0001C4A4 5168 0012                  		subq.w	#8,obVelY(a0)
0001C4A8 6000                       		bra.s	loc_194EE
0001C4AA                            ; ===========================================================================
0001C4AA                            
0001C4AA                            loc_194E0:
0001C4AA 4268 0012                  		clr.w    obVelY(a0)
0001C4AE 4A38 FE2D                          	tst.b     (v_invinc).w
0001C4B2 6600                               	bne.s   @boss_invinc
0001C4B4                            
0001C4B4 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C4B8 6000 0000                          	bra.w      @boss_play
0001C4BC                            
0001C4BC                            @boss_invinc:
0001C4BC 103C 0000                          	move.b #bgm_Invincible,d0
0001C4C0                            
0001C4C0                            @boss_play:
0001C4C0 4EB8 129A                          	jsr PlaySound
0001C4C4                            
0001C4C4                            loc_194EE:
0001C4C4 6000 FCF6                  		bra.w	loc_191F2
0001C4C8                            ; ===========================================================================
0001C4C8                            
0001C4C8                            loc_194F2:
0001C4C8 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C4CE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C4D4 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C4DA 6400                       		bcc.s	loc_1950C
0001C4DC 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C4E0 6000                       		bra.s	loc_19512
0001C4E2                            ; ===========================================================================
0001C4E2                            
0001C4E2                            loc_1950C:
0001C4E2 4A28 0001                  		tst.b	obRender(a0)
0001C4E6 6A00                       		bpl.s	Obj75_ShipDelete
0001C4E8                            
0001C4E8                            loc_19512:
0001C4E8 6100 E340                  		bsr.w	BossMove
0001C4EC 6000 FCBA                  		bra.w	loc_191DE
0001C4F0                            ; ===========================================================================
0001C4F0                            
0001C4F0                            Obj75_ShipDelete:
0001C4F0 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001C4F6                            ; ===========================================================================
0001C4F6                            
0001C4F6                            Obj75_FaceMain:	; Routine 4
0001C4F6 7201                       		moveq	#1,d1
0001C4F8 2268 0034                  		movea.l	$34(a0),a1
0001C4FC 7000                       		moveq	#0,d0
0001C4FE 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C502 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C506 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C50A 1141 001C                  		move.b	d1,obAnim(a0)
0001C50E 1010                       		move.b	(a0),d0
0001C510 B011                       		cmp.b	(a1),d0
0001C512 6600                       		bne.s	Obj75_FaceDelete
0001C514 6000                       		bra.s	loc_195BE
0001C516                            ; ===========================================================================
0001C516                            
0001C516                            Obj75_FaceDelete:
0001C516 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001C51C                            ; ===========================================================================
0001C51C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C520 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C524 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C528                            ; ===========================================================================
0001C528                            
0001C528                            loc_19552:
0001C528 720A                       		moveq	#$A,d1
0001C52A 4E75                       		rts	
0001C52C                            ; ===========================================================================
0001C52C                            
0001C52C                            loc_19556:
0001C52C 7206                       		moveq	#6,d1
0001C52E 4E75                       		rts	
0001C530                            ; ===========================================================================
0001C530                            
0001C530                            loc_1955A:
0001C530 7000                       		moveq	#0,d0
0001C532 1029 0028                  		move.b	obSubtype(a1),d0
0001C536 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C53A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C53E                            ; ===========================================================================
0001C53E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C542 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C546                            ; ===========================================================================
0001C546                            
0001C546                            loc_19570:
0001C546 6000                       		bra.s	loc_19574
0001C548                            ; ===========================================================================
0001C548                            
0001C548                            loc_19572:
0001C548 7206                       		moveq	#6,d1
0001C54A                            
0001C54A                            loc_19574:
0001C54A 4A29 0020                  		tst.b	obColType(a1)
0001C54E 6600                       		bne.s	loc_1957E
0001C550 7205                       		moveq	#5,d1
0001C552 4E75                       		rts	
0001C554                            ; ===========================================================================
0001C554                            
0001C554                            loc_1957E:
0001C554 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C55A 6500                       		bcs.s	locret_19588
0001C55C 7204                       		moveq	#4,d1
0001C55E                            
0001C55E                            locret_19588:
0001C55E 4E75                       		rts	
0001C560                            ; ===========================================================================
0001C560                            
0001C560                            Obj75_FlameMain:; Routine 6
0001C560 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C566 2268 0034                  		movea.l	$34(a0),a1
0001C56A 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C570 6600                       		bne.s	loc_195AA
0001C572 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C578 4A28 0001                  		tst.b	1(a0)
0001C57C 6A00                       		bpl.s	Obj75_FlameDelete
0001C57E 6000                       		bra.s	loc_195B6
0001C580                            ; ===========================================================================
0001C580                            
0001C580                            loc_195AA:
0001C580 4A69 0010                  		tst.w	obVelX(a1)
0001C584 6700                       		beq.s	loc_195B6
0001C586 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C58C                            
0001C58C                            loc_195B6:
0001C58C 6000                       		bra.s	loc_195BE
0001C58E                            ; ===========================================================================
0001C58E                            
0001C58E                            Obj75_FlameDelete:
0001C58E 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001C594                            ; ===========================================================================
0001C594                            
0001C594                            loc_195BE:
0001C594 43F9 0001 AC3E             		lea	(Ani_Eggman).l,a1
0001C59A 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001C5A0 2268 0034                  		movea.l	$34(a0),a1
0001C5A4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C5AA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C5B0                            
0001C5B0                            loc_195DA:
0001C5B0 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C5B6 7003                       		moveq	#3,d0
0001C5B8 C028 0022                  		and.b	obStatus(a0),d0
0001C5BC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C5C2 8128 0001                  		or.b	d0,obRender(a0)
0001C5C6 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001C5CC                            ; ===========================================================================
0001C5CC                            
0001C5CC                            Obj75_SpikeMain:; Routine 8
0001C5CC 217C 0001 AD7E 0004        		move.l	#Map_BossItems,obMap(a0)
0001C5D4 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C5DA 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C5E0 2268 0034                  		movea.l	$34(a0),a1
0001C5E4 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C5EA 6600                       		bne.s	loc_1961C
0001C5EC 4A28 0001                  		tst.b	obRender(a0)
0001C5F0 6A00                       		bpl.s	Obj75_SpikeDelete
0001C5F2                            
0001C5F2                            loc_1961C:
0001C5F2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C5F8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C5FE 3028 003C                  		move.w	$3C(a0),d0
0001C602 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C608 6600                       		bne.s	loc_19652
0001C60A 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C610 6700                       		beq.s	loc_1964C
0001C612 4A29 0028                  		tst.b	obSubtype(a1)
0001C616 6600                       		bne.s	loc_19658
0001C618 0C40 0094                  		cmpi.w	#$94,d0
0001C61C 6C00                       		bge.s	loc_19658
0001C61E 5E40                       		addq.w	#7,d0
0001C620 6000                       		bra.s	loc_19658
0001C622                            ; ===========================================================================
0001C622                            
0001C622                            loc_1964C:
0001C622 4A69 003C                  		tst.w	$3C(a1)
0001C626 6A00                       		bpl.s	loc_19658
0001C628                            
0001C628                            loc_19652:
0001C628 4A40                       		tst.w	d0
0001C62A 6F00                       		ble.s	loc_19658
0001C62C 5B40                       		subq.w	#5,d0
0001C62E                            
0001C62E                            loc_19658:
0001C62E 3140 003C                  		move.w	d0,$3C(a0)
0001C632 E440                       		asr.w	#2,d0
0001C634 D168 000C                  		add.w	d0,obY(a0)
0001C638 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C63E 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C644 4228 0020                  		clr.b	obColType(a0)
0001C648 2268 0034                  		movea.l	$34(a0),a1
0001C64C 4A29 0020                  		tst.b	obColType(a1)
0001C650 6700                       		beq.s	loc_19688
0001C652 4A29 0029                  		tst.b	$29(a1)
0001C656 6600                       		bne.s	loc_19688
0001C658 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C65E                            
0001C65E                            loc_19688:
0001C65E 6000 FF50                  		bra.w	loc_195DA
0001C662                            ; ===========================================================================
0001C662                            
0001C662                            Obj75_SpikeDelete:
0001C662 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001C662 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001C668                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C668                            ; ---------------------------------------------------------------------------
0001C668                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C668                            ; ---------------------------------------------------------------------------
0001C668                            
0001C668                            BossBlock:
0001C668 7000                       		moveq	#0,d0
0001C66A 1028 0024                  		move.b	obRoutine(a0),d0
0001C66E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C672 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C676                            ; ===========================================================================
0001C676 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C678 0000                       		dc.w Obj76_Action-Obj76_Index
0001C67A 0000                       		dc.w loc_19762-Obj76_Index
0001C67C                            ; ===========================================================================
0001C67C                            
0001C67C                            Obj76_Main:	; Routine 0
0001C67C 7800                       		moveq	#0,d4
0001C67E 3A3C 2C10                  		move.w	#$2C10,d5
0001C682 7C09                       		moveq	#9,d6
0001C684 43D0                       		lea	(a0),a1
0001C686 6000                       		bra.s	Obj76_MakeBlock
0001C688                            ; ===========================================================================
0001C688                            
0001C688                            Obj76_Loop:
0001C688 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001C68E 6600                       		bne.s	Obj76_ExitLoop
0001C690                            
0001C690                            Obj76_MakeBlock:
0001C690 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C694 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C69C 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C6A2 137C 0004 0001             		move.b	#4,obRender(a1)
0001C6A8 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C6AE 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C6B4 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C6BA 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C6BE 337C 0582 000C             		move.w	#$582,obY(a1)
0001C6C4 3344 0028                  		move.w	d4,obSubtype(a1)
0001C6C8 0644 0101                  		addi.w	#$101,d4
0001C6CC 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C6D0 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C6D4 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C6D8                            
0001C6D8                            Obj76_ExitLoop:
0001C6D8 4E75                       		rts	
0001C6DA                            ; ===========================================================================
0001C6DA                            
0001C6DA                            Obj76_Action:	; Routine 2
0001C6DA 1028 0029                  		move.b	$29(a0),d0
0001C6DE B028 0028                  		cmp.b	obSubtype(a0),d0
0001C6E2 6700                       		beq.s	Obj76_Solid
0001C6E4 4A00                       		tst.b	d0
0001C6E6 6B00                       		bmi.s	loc_19718
0001C6E8                            
0001C6E8                            loc_19712:
0001C6E8 6100 0000                  		bsr.w	Obj76_Break
0001C6EC 6000                       		bra.s	Obj76_Display
0001C6EE                            ; ===========================================================================
0001C6EE                            
0001C6EE                            loc_19718:
0001C6EE 2268 0034                  		movea.l	$34(a0),a1
0001C6F2 4A29 0021                  		tst.b	obColProp(a1)
0001C6F6 67F0                       		beq.s	loc_19712
0001C6F8 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C6FE 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C704 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C70A B2C8                       		cmpa.w	a0,a1
0001C70C 6500                       		bcs.s	Obj76_Display
0001C70E 3029 0012                  		move.w	obVelY(a1),d0
0001C712 48C0                       		ext.l	d0
0001C714 E080                       		asr.l	#8,d0
0001C716 D168 000C                  		add.w	d0,obY(a0)
0001C71A 6000                       		bra.s	Obj76_Display
0001C71C                            ; ===========================================================================
0001C71C                            
0001C71C                            Obj76_Solid:
0001C71C 323C 001B                  		move.w	#$1B,d1
0001C720 343C 0010                  		move.w	#$10,d2
0001C724 363C 0011                  		move.w	#$11,d3
0001C728 3828 0008                  		move.w	obX(a0),d4
0001C72C 4EB9 0001 1972             		jsr	(SolidObject).l
0001C732                            
0001C732                            Obj76_Display:
0001C732 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001C738                            ; ===========================================================================
0001C738                            
0001C738                            loc_19762:	; Routine 4
0001C738 4A28 0001                  		tst.b	obRender(a0)
0001C73C 6A00                       		bpl.s	Obj76_Delete
0001C73E 4EB9 0000 F3EE             		jsr	(ObjectFall).l
0001C744 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001C74A                            ; ===========================================================================
0001C74A                            
0001C74A                            Obj76_Delete:
0001C74A 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001C750                            
0001C750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C750                            
0001C750                            
0001C750                            Obj76_Break:
0001C750 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C754 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C758 7801                       		moveq	#1,d4
0001C75A 7203                       		moveq	#3,d1
0001C75C 7438                       		moveq	#$38,d2
0001C75E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C762 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C768 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C76E 43D0                       		lea	(a0),a1
0001C770 6000                       		bra.s	Obj76_MakeFrag
0001C772                            ; ===========================================================================
0001C772                            
0001C772                            Obj76_LoopFrag:
0001C772 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001C778 6600                       		bne.s	loc_197D4
0001C77A                            
0001C77A                            Obj76_MakeFrag:
0001C77A 45D0                       		lea	(a0),a2
0001C77C 47D1                       		lea	(a1),a3
0001C77E 7603                       		moveq	#3,d3
0001C780                            
0001C780                            loc_197AA:
0001C780 26DA                       		move.l	(a2)+,(a3)+
0001C782 26DA                       		move.l	(a2)+,(a3)+
0001C784 26DA                       		move.l	(a2)+,(a3)+
0001C786 26DA                       		move.l	(a2)+,(a3)+
0001C788 51CB FFF6                  		dbf	d3,loc_197AA
0001C78C                            
0001C78C 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C790 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C794 361D                       		move.w	(a5)+,d3
0001C796 D769 0008                  		add.w	d3,obX(a1)
0001C79A 361D                       		move.w	(a5)+,d3
0001C79C D769 000C                  		add.w	d3,obY(a1)
0001C7A0 1344 001A                  		move.b	d4,obFrame(a1)
0001C7A4 5244                       		addq.w	#1,d4
0001C7A6 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C7AA                            
0001C7AA                            loc_197D4:
0001C7B4                            ; End of function Obj76_Break
0001C7B4                            
0001C7B4                            ; ===========================================================================
0001C7B4 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C7B8 0180 FE00                  		dc.w $180, -$200
0001C7BC FF00 FF00                  		dc.w -$100, -$100
0001C7C0 0100 FF00                  		dc.w $100, -$100
0001C7C4 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C7C8 0010 0000                  		dc.w $10, 0
0001C7CC 0000 0010                  		dc.w 0,	$10
0001C7D0 0010 0010                  		dc.w $10, $10
0001C7D0 0010 0010                  		dc.w $10, $10
0001C7D4                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C7D4                            ; ---------------------------------------------------------------------------
0001C7D4                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C7D4                            ; ---------------------------------------------------------------------------
0001C7D4                            Map_BossBlock_internal:
0001C7D4 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C7D6 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C7D8 0000                       		dc.w @topright-Map_BossBlock_internal
0001C7DA 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C7DC 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C7DE 02                         @wholeblock:	dc.b 2
0001C7DF F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C7E4 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C7E9 00                         		dc.b 0
0001C7EA 01                         @topleft:	dc.b 1
0001C7EB F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C7F0 01                         @topright:	dc.b 1
0001C7F1 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C7F6 01                         @bottomleft:	dc.b 1
0001C7F7 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C7FC 01                         @bottomright:	dc.b 1
0001C7FD F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C802                            		even
0001C802                            		even
0001C802                            
0001C802                            loc_1982C:
0001C802 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001C808                            
0001C808                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C808                            ; ---------------------------------------------------------------------------
0001C808                            ; Object 82 - Eggman (SBZ2)
0001C808                            ; ---------------------------------------------------------------------------
0001C808                            
0001C808                            ScrapEggman:
0001C808 7000                       		moveq	#0,d0
0001C80A 1028 0024                  		move.b	obRoutine(a0),d0
0001C80E 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C812 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C816                            ; ===========================================================================
0001C816 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C818 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C81A 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C81C                            
0001C81C 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C81F 0400 03                    		dc.b 4,	0, 3
0001C822                            ; ===========================================================================
0001C822                            
0001C822                            SEgg_Main:	; Routine 0
0001C822 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C826 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001C82C 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001C832 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C838 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C83E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C844 4228 0025                  		clr.b	ob2ndRout(a0)
0001C848 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C84C 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C850 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C854 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C85C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C862 117C 0004 0001             		move.b	#4,obRender(a0)
0001C868 08E8 0007 0001             		bset	#7,obRender(a0)
0001C86E 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C874 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001C87A 6600                       		bne.s	SEgg_Eggman
0001C87C 2348 0034                  		move.l	a0,$34(a1)
0001C880 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C884 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001C88A 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001C890 4228 0025                  		clr.b	ob2ndRout(a0)
0001C894 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C898 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C89C 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C8A0 237C 0000 DC76 0004        		move.l	#Map_But,obMap(a1)
0001C8A8 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C8AE 137C 0004 0001             		move.b	#4,obRender(a1)
0001C8B4 08E9 0007 0001             		bset	#7,obRender(a1)
0001C8BA 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C8C0 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C8C6                            
0001C8C6                            SEgg_Eggman:	; Routine 2
0001C8C6 7000                       		moveq	#0,d0
0001C8C8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C8CC 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C8D0 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C8D4 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C8D8 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001C8DE 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001C8E4                            ; ===========================================================================
0001C8E4 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C8E6 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C8E8 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C8EA 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C8EC                            ; ===========================================================================
0001C8EC                            
0001C8EC                            SEgg_ChkSonic:
0001C8EC 3028 0008                  		move.w	obX(a0),d0
0001C8F0 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C8F4 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C8F8 6400                       		bcc.s	loc_19934	; if not, branch
0001C8FA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8FE 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C904 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C90A                            
0001C90A                            loc_19934:
0001C90A 4EF9 0000 F426             		jmp	(SpeedToPos).l
0001C910                            ; ===========================================================================
0001C910                            
0001C910                            SEgg_PreLeap:
0001C910 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C914 6600                       		bne.s	loc_19954	; if time remains, branch
0001C916 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C91A 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C920 5868 000C                  		addq.w	#4,obY(a0)
0001C924 317C 000F 003C             		move.w	#15,$3C(a0)
0001C92A                            
0001C92A                            loc_19954:
0001C92A 60DE                       		bra.s	loc_19934
0001C92C                            ; ===========================================================================
0001C92C                            
0001C92C                            SEgg_Leap:
0001C92C 5368 003C                  		subq.w	#1,$3C(a0)
0001C930 6E00                       		bgt.s	loc_199D0
0001C932 6600                       		bne.s	loc_1996A
0001C934 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C93A 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C940                            
0001C940                            loc_1996A:
0001C940 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001C946 6E00                       		bgt.s	loc_19976
0001C948 4268 0010                  		clr.w	obVelX(a0)
0001C94C                            
0001C94C                            loc_19976:
0001C94C 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C952 4A68 0012                  		tst.w	obVelY(a0)
0001C956 6B00                       		bmi.s	SEgg_FindBlocks
0001C958 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001C95E 6500                       		bcs.s	SEgg_FindBlocks
0001C960 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001C966 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001C96C 6500                       		bcs.s	SEgg_FindBlocks
0001C96E 317C 029B 000C             		move.w	#$29B,obY(a0)
0001C974 4268 0012                  		clr.w	obVelY(a0)
0001C978                            
0001C978                            SEgg_FindBlocks:
0001C978 3028 0010                  		move.w	obVelX(a0),d0
0001C97C 8068 0012                  		or.w	obVelY(a0),d0
0001C980 6600                       		bne.s	loc_199D0
0001C982 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001C986 703E                       		moveq	#$3E,d0
0001C988 7240                       		moveq	#$40,d1
0001C98A                            
0001C98A                            SEgg_FindLoop:	
0001C98A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001C98C 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001C990 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001C994                            
0001C994 6600                       		bne.s	loc_199D0
0001C996 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001C99C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C9A0 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C9A6                            
0001C9A6                            loc_199D0:
0001C9A6 6000 FF62                  		bra.w	loc_19934
0001C9AA                            ; ===========================================================================
0001C9AA                            
0001C9AA                            SEgg_Switch:	; Routine 4
0001C9AA 7000                       		moveq	#0,d0
0001C9AC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C9B0 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001C9B4 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001C9B8                            ; ===========================================================================
0001C9B8 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001C9BA 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001C9BC                            ; ===========================================================================
0001C9BC                            
0001C9BC                            loc_199E6:
0001C9BC 2268 0034                  		movea.l	$34(a0),a1
0001C9C0 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001C9C6 6600                       		bne.s	SEgg_SwDisplay
0001C9C8 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C9CE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C9D2                            
0001C9D2                            SEgg_SwDisplay:
0001C9D2 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001C9D2 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001C9D8                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8                            ; Animation script - Eggman (SBZ2)
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001C9DA 0000                       		dc.w @laugh-Ani_SEgg
0001C9DC 0000                       		dc.w @jump1-Ani_SEgg
0001C9DE 0000                       		dc.w @intube-Ani_SEgg
0001C9E0 0000                       		dc.w @running-Ani_SEgg
0001C9E2 0000                       		dc.w @jump2-Ani_SEgg
0001C9E4 0000                       		dc.w @starjump-Ani_SEgg
0001C9E6 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001C9EA 00                         		even
0001C9EA 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001C9EE 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001C9F6 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001C9FA 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CA00 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CA06 00                         		even
0001CA06 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CA0A 00                         		even
0001CA0A 00                         		even
0001CA0A                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CA0A                            ; --------------------------------------------------------------------------------
0001CA0A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001CA0A                            ; --------------------------------------------------------------------------------
0001CA0A                            
0001CA0A                            SME_y00JM:	
0001CA0A 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001CA0E 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001CA12 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001CA16 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001CA1A 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001CA1E 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001CA20 03                         SME_y00JM_16:	dc.b 3	
0001CA21 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CA26 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CA2B 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CA30 07                         SME_y00JM_26:	dc.b 7	
0001CA31 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001CA36 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CA3B FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CA40 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001CA45 F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001CA4A F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001CA4F F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001CA54 07                         SME_y00JM_4A:	dc.b 7	
0001CA55 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001CA5A FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001CA5F F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001CA64 F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001CA69 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001CA6E F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001CA73 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001CA78 04                         SME_y00JM_6E:	dc.b 4	
0001CA79 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001CA7E F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001CA83 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001CA88 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001CA8D 07                         SME_y00JM_83:	dc.b 7	
0001CA8E F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CA93 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CA98 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001CA9D E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001CAA2 E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001CAA7 E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001CAAC E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001CAB1 04                         SME_y00JM_A7:	dc.b 4	
0001CAB2 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CAB7 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CABC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CAC1 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CAC6 07                         SME_y00JM_BC:	dc.b 7	
0001CAC7 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CACC E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CAD1 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CAD6 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CADB F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CAE0 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001CAE5 F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001CAEA 05                         SME_y00JM_E0:	dc.b 5	
0001CAEB F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CAF0 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CAF5 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CAFA 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CAFF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CB04 06                         SME_y00JM_FA:	dc.b 6	
0001CB05 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001CB0A EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001CB0F 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001CB14 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001CB19 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001CB1E E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001CB23 08                         SME_y00JM_119:	dc.b 8	
0001CB24 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CB29 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CB2E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CB33 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CB38 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001CB3D F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001CB42 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001CB47 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001CB4C 03                         SME_y00JM_142:	dc.b 3	
0001CB4D EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001CB52 F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001CB57 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001CB5C                            		even
0001CB5C                            		even
0001CB5C                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CB5C                            ; ---------------------------------------------------------------------------
0001CB5C                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CB5C                            ; ---------------------------------------------------------------------------
0001CB5C                            
0001CB5C                            FalseFloor:
0001CB5C 7000                       		moveq	#0,d0
0001CB5E 1028 0024                  		move.b	obRoutine(a0),d0
0001CB62 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CB66 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CB6A                            ; ===========================================================================
0001CB6A 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CB6C 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CB6E 0000                       		dc.w loc_19C36-FFloor_Index
0001CB70 0000                       		dc.w loc_19C62-FFloor_Index
0001CB72 0000                       		dc.w loc_19C72-FFloor_Index
0001CB74 0000                       		dc.w loc_19C80-FFloor_Index
0001CB76                            ; ===========================================================================
0001CB76                            
0001CB76                            FFloor_Main:	; Routine 0
0001CB76 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001CB7C 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001CB82 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CB88 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CB8E 117C 0004 0001             		move.b	#4,obRender(a0)
0001CB94 08E8 0007 0001             		bset	#7,obRender(a0)
0001CB9A 7800                       		moveq	#0,d4
0001CB9C 3A3C 1B10                  		move.w	#$1B10,d5
0001CBA0 7C07                       		moveq	#7,d6
0001CBA2 45E8 0030                  		lea	$30(a0),a2
0001CBA6                            
0001CBA6                            FFloor_MakeBlock:
0001CBA6 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001CBAC 6600                       		bne.s	FFloor_ExitMake
0001CBAE 34C9                       		move.w	a1,(a2)+
0001CBB0 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CBB4 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CBBC 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CBC2 137C 0004 0001             		move.b	#4,obRender(a1)
0001CBC8 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CBCE 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CBD4 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CBDA 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CBDE 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001CBE4 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CBE8 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CBEE 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CBF2                            
0001CBF2                            FFloor_ExitMake:
0001CBF2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CBF6 4E75                       		rts	
0001CBF8                            ; ===========================================================================
0001CBF8                            
0001CBF8                            FFloor_ChkBreak:; Routine 2
0001CBF8 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CBFE 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CC00 4228 001A                  		clr.b	obFrame(a0)
0001CC04 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CC08                            
0001CC08                            FFloor_Solid:
0001CC08 7000                       		moveq	#0,d0
0001CC0A 1028 001A                  		move.b	obFrame(a0),d0
0001CC0E 4400                       		neg.b	d0
0001CC10 4880                       		ext.w	d0
0001CC12 5040                       		addq.w	#8,d0
0001CC14 E940                       		asl.w	#4,d0
0001CC16 383C 1C00                  		move.w	#$1C00,d4
0001CC1A 9840                       		sub.w	d0,d4
0001CC1C 1140 0014                  		move.b	d0,obActWid(a0)
0001CC20 3144 0008                  		move.w	d4,obX(a0)
0001CC24 720B                       		moveq	#$B,d1
0001CC26 D240                       		add.w	d0,d1
0001CC28 7410                       		moveq	#$10,d2
0001CC2A 7611                       		moveq	#$11,d3
0001CC2C 4EF9 0001 1972             		jmp	(SolidObject).l
0001CC32                            ; ===========================================================================
0001CC32                            
0001CC32                            loc_19C36:	; Routine 4
0001CC32 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CC38 6400                       		bcc.s	FFloor_Solid2
0001CC3A 70FF                       		moveq	#-1,d0
0001CC3C 1028 001A                  		move.b	obFrame(a0),d0
0001CC40 4880                       		ext.w	d0
0001CC42 D040                       		add.w	d0,d0
0001CC44 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CC48 2240                       		movea.l	d0,a1
0001CC4A 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CC50 5228 001A                  		addq.b	#1,obFrame(a0)
0001CC54 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CC5A 6700                       		beq.s	loc_19C62
0001CC5C                            
0001CC5C                            FFloor_Solid2:
0001CC5C 60AA                       		bra.s	FFloor_Solid
0001CC5E                            ; ===========================================================================
0001CC5E                            
0001CC5E                            loc_19C62:	; Routine 6
0001CC5E 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CC64 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CC6A 6000 FB96                  		bra.w	loc_1982C
0001CC6E                            ; ===========================================================================
0001CC6E                            
0001CC6E                            loc_19C72:	; Routine 8
0001CC6E 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CC74 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CC76 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001CC7C                            ; ===========================================================================
0001CC7C                            
0001CC7C                            loc_19C80:	; Routine $A
0001CC7C 4A28 0001                  		tst.b	obRender(a0)
0001CC80 6A00 FB80                  		bpl.w	loc_1982C
0001CC84 4EB9 0000 F3EE             		jsr	(ObjectFall).l
0001CC8A 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001CC90                            ; ===========================================================================
0001CC90                            
0001CC90                            FFloor_Break:
0001CC90 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CC94 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CC98 7801                       		moveq	#1,d4
0001CC9A 7203                       		moveq	#3,d1
0001CC9C 7438                       		moveq	#$38,d2
0001CC9E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CCA2 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CCA8 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CCAE 43D0                       		lea	(a0),a1
0001CCB0 6000                       		bra.s	FFloor_MakeFrag
0001CCB2                            ; ===========================================================================
0001CCB2                            
0001CCB2                            FFloor_LoopFrag:
0001CCB2 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001CCB8 6600                       		bne.s	FFloor_BreakSnd
0001CCBA                            
0001CCBA                            FFloor_MakeFrag:
0001CCBA 45D0                       		lea	(a0),a2
0001CCBC 47D1                       		lea	(a1),a3
0001CCBE 7603                       		moveq	#3,d3
0001CCC0                            
0001CCC0                            loc_19CC4:
0001CCC0 26DA                       		move.l	(a2)+,(a3)+
0001CCC2 26DA                       		move.l	(a2)+,(a3)+
0001CCC4 26DA                       		move.l	(a2)+,(a3)+
0001CCC6 26DA                       		move.l	(a2)+,(a3)+
0001CCC8 51CB FFF6                  		dbf	d3,loc_19CC4
0001CCCC                            
0001CCCC 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CCD0 361D                       		move.w	(a5)+,d3
0001CCD2 D769 0008                  		add.w	d3,obX(a1)
0001CCD6 361D                       		move.w	(a5)+,d3
0001CCD8 D769 000C                  		add.w	d3,obY(a1)
0001CCDC 1344 001A                  		move.b	d4,obFrame(a1)
0001CCE0 5244                       		addq.w	#1,d4
0001CCE2 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CCE6                            
0001CCE6                            FFloor_BreakSnd:
0001CCF0 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001CCF6                            ; ===========================================================================
0001CCF6 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CCFA 0120 00C0                  		dc.w $120, $C0
0001CCFE FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CD02 0010 0000                  		dc.w $10, 0
0001CD06 0000 0010                  		dc.w 0,	$10
0001CD0A 0010 0010                  		dc.w $10, $10
0001CD0A 0010 0010                  		dc.w $10, $10
0001CD0E                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CD0E                            ; ---------------------------------------------------------------------------
0001CD0E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CD0E                            ; ---------------------------------------------------------------------------
0001CD0E                            Map_FFloor_internal:
0001CD0E 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CD10 0000                       		dc.w @topleft-Map_FFloor_internal
0001CD12 0000                       		dc.w @topright-Map_FFloor_internal
0001CD14 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CD16 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CD18 01                         @wholeblock:	dc.b 1
0001CD19 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CD1E 02                         @topleft:	dc.b 2
0001CD1F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CD24 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CD29 00                         		dc.b 0
0001CD2A 02                         @topright:	dc.b 2
0001CD2B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CD30 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CD35 00                         		dc.b 0
0001CD36 02                         @bottomleft:	dc.b 2
0001CD37 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CD3C F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CD41 00                         		dc.b 0
0001CD42 02                         @bottomright:	dc.b 2
0001CD43 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CD48 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CD4E 00                         		even
0001CD4E 00                         		even
0001CD4E                            		include	"_incObj\85 Boss - Final.asm"
0001CD4E                            ; ---------------------------------------------------------------------------
0001CD4E                            ; Object 85 - Eggman (FZ)
0001CD4E                            ; ---------------------------------------------------------------------------
0001CD4E                            
0001CD4E                            Obj85_Delete:
0001CD4E 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001CD54                            ; ===========================================================================
0001CD54                            
0001CD54                            BossFinal:
0001CD54 7000                       		moveq	#0,d0
0001CD56 1028 0024                  		move.b	obRoutine(a0),d0
0001CD5A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CD5E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CD62                            ; ===========================================================================
0001CD62 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CD64 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CD66 0000                       		dc.w loc_1A38E-Obj85_Index
0001CD68 0000                       		dc.w loc_1A346-Obj85_Index
0001CD6A 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CD6C 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CD6E 0000                       		dc.w loc_1A264-Obj85_Index
0001CD70                            
0001CD70 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CD76 0001 CA0A                  		dc.l Map_SEgg		; mappings pointer
0001CD7A 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CD80 0000 0000                  		dc.l Map_EggCyl
0001CD84 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CD8A 0000 0000                  		dc.l Map_FZLegs
0001CD8E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CD94 0001 CA0A                  		dc.l Map_SEgg
0001CD98 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CD9E 0001 AC8E                  		dc.l Map_Eggman
0001CDA2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CDA8 0001 AC8E                  		dc.l Map_Eggman
0001CDAC                            
0001CDAC                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CDAC 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CDB2 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CDB8 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CDBE 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CDC4 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CDCA 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CDD0                            ; ===========================================================================
0001CDD0                            
0001CDD0                            Obj85_Main:	; Routine 0
0001CDD0 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CDD4 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CDD8 2248                       		movea.l	a0,a1
0001CDDA 7205                       		moveq	#5,d1
0001CDDC 6000                       		bra.s	Obj85_LoadBoss
0001CDDE                            ; ===========================================================================
0001CDDE                            
0001CDDE                            Obj85_Loop:
0001CDDE 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001CDE4 6600                       		bne.s	loc_19E20
0001CDE6                            
0001CDE6                            Obj85_LoadBoss:
0001CDE6 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CDEA 335A 0008                  		move.w	(a2)+,obX(a1)
0001CDEE 335A 000C                  		move.w	(a2)+,obY(a1)
0001CDF2 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CDF6 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CDFA 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CDFE 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CE02 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CE06 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CE0A 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CE0E 137C 0004 0001             		move.b	#4,obRender(a1)
0001CE14 08E8 0007 0001             		bset	#7,obRender(a0)
0001CE1A 2348 0034                  		move.l	a0,$34(a1)
0001CE1E 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CE22                            
0001CE22                            loc_19E20:
0001CE22 45E8 0036                  		lea	$36(a0),a2
0001CE26 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001CE2C 6600                       		bne.s	loc_19E5A
0001CE2E 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CE32 3489                       		move.w	a1,(a2)
0001CE34 2348 0034                  		move.l	a0,$34(a1)
0001CE38 45E8 0038                  		lea	$38(a0),a2
0001CE3C 7400                       		moveq	#0,d2
0001CE3E 7203                       		moveq	#3,d1
0001CE40                            
0001CE40                            loc_19E3E:
0001CE40 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001CE46 6600                       		bne.s	loc_19E5A
0001CE48 34C9                       		move.w	a1,(a2)+
0001CE4A 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CE4E 2348 0034                  		move.l	a0,$34(a1)
0001CE52 1342 0028                  		move.b	d2,obSubtype(a1)
0001CE56 5442                       		addq.w	#2,d2
0001CE58 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CE5C                            
0001CE5C                            loc_19E5A:
0001CE5C 317C 0000 0034             		move.w	#0,$34(a0)
0001CE62 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001CE68 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CE6E                            
0001CE6E                            Obj85_Eggman:	; Routine 2
0001CE6E 7000                       		moveq	#0,d0
0001CE70 1028 0034                  		move.b	$34(a0),d0
0001CE74 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CE78 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CE7C 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001CE82                            ; ===========================================================================
0001CE82 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CE86 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CE8A 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CE8E 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CE92                            ; ===========================================================================
0001CE92                            
0001CE92                            loc_19E90:
0001CE92 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CE96 6600                       		bne.s	loc_19EA2
0001CE98 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CE9E 6500                       		bcs.s	loc_19EA2
0001CEA0 5428 0034                  		addq.b	#2,$34(a0)
0001CEA4                            
0001CEA4                            loc_19EA2:
0001CEA4 52B8 F636                  		addq.l	#1,(v_random).w
0001CEA8 4E75                       		rts	
0001CEAA                            ; ===========================================================================
0001CEAA                            
0001CEAA                            loc_19EA8:
0001CEAA 4A68 0030                  		tst.w	$30(a0)
0001CEAE 6A00                       		bpl.s	loc_19F10
0001CEB0 4268 0030                  		clr.w	$30(a0)
0001CEB4 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001CEBA 0240 000C                  		andi.w	#$C,d0
0001CEBE 3200                       		move.w	d0,d1
0001CEC0 5441                       		addq.w	#2,d1
0001CEC2 4A80                       		tst.l	d0
0001CEC4 6A00                       		bpl.s	loc_19EC6
0001CEC6 C340                       		exg	d1,d0
0001CEC8                            
0001CEC8                            loc_19EC6:
0001CEC8 43FA 0000                  		lea	word_19FD6(pc),a1
0001CECC 3031 0000                  		move.w	(a1,d0.w),d0
0001CED0 3231 1000                  		move.w	(a1,d1.w),d1
0001CED4 3140 0030                  		move.w	d0,$30(a0)
0001CED8 74FF                       		moveq	#-1,d2
0001CEDA 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CEDE 2242                       		movea.l	d2,a1
0001CEE0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CEE6 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CEEC 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CEF0 2242                       		movea.l	d2,a1
0001CEF2 137C 0001 0029             		move.b	#1,$29(a1)
0001CEF8 337C 0000 0030             		move.w	#0,$30(a1)
0001CEFE 317C 0001 0032             		move.w	#1,$32(a0)
0001CF04 4228 0035                  		clr.b	$35(a0)
0001CF12                            
0001CF12                            loc_19F10:
0001CF12 4A68 0032                  		tst.w	$32(a0)
0001CF16 6B00 0000                  		bmi.w	loc_19FA6
0001CF1A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CF20 3038 D008                  		move.w	(v_player+obX).w,d0
0001CF24 9068 0008                  		sub.w	obX(a0),d0
0001CF28 6500                       		bcs.s	loc_19F2E
0001CF2A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CF30                            
0001CF30                            loc_19F2E:
0001CF30 323C 002B                  		move.w	#$2B,d1
0001CF34 343C 0014                  		move.w	#$14,d2
0001CF38 363C 0014                  		move.w	#$14,d3
0001CF3C 3828 0008                  		move.w	obX(a0),d4
0001CF40 4EB9 0001 1972             		jsr	(SolidObject).l
0001CF46 4A44                       		tst.w	d4
0001CF48 6E00                       		bgt.s	loc_19F50
0001CF4A                            
0001CF4A                            loc_19F48:
0001CF4A 4A28 0035                  		tst.b	$35(a0)
0001CF4E 6600                       		bne.s	loc_19F88
0001CF50 6000                       		bra.s	loc_19F96
0001CF52                            ; ===========================================================================
0001CF52                            
0001CF52                            loc_19F50:
0001CF52 5E78 F636                  		addq.w	#7,(v_random).w
0001CF56 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CF5C 66EC                       		bne.s	loc_19F48
0001CF5E 303C 0300                  		move.w	#$300,d0
0001CF62 0828 0000 0022             		btst	#0,obStatus(a0)
0001CF68 6600                       		bne.s	loc_19F6A
0001CF6A 4440                       		neg.w	d0
0001CF6C                            
0001CF6C                            loc_19F6A:
0001CF6C 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CF70 4A28 0035                  		tst.b	$35(a0)
0001CF74 6600                       		bne.s	loc_19F88
0001CF76 5328 0021                  		subq.b	#1,obColProp(a0)
0001CF7A 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CF80 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001CF86                            
0001CF86                            loc_19F88:
0001CF86 5328 0035                  		subq.b	#1,$35(a0)
0001CF8A 6700                       		beq.s	loc_19F96
0001CF8C 117C 0003 001C             		move.b	#3,obAnim(a0)
0001CF92 6000                       		bra.s	loc_19F9C
0001CF94                            ; ===========================================================================
0001CF94                            
0001CF94                            loc_19F96:
0001CF94 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CF9A                            
0001CF9A                            loc_19F9C:
0001CF9A 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001CF9E 4EF9 0000 C4F4             		jmp	(AnimateSprite).l
0001CFA4                            ; ===========================================================================
0001CFA4                            
0001CFA4                            loc_19FA6:
0001CFA4 4A28 0021                  		tst.b	obColProp(a0)
0001CFA8 6700                       		beq.s	loc_19FBC
0001CFAA 5428 0034                  		addq.b	#2,$34(a0)
0001CFAE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CFB4 4268 0032                  		clr.w	$32(a0)
0001CFB8 4E75                       		rts	
0001CFBA                            ; ===========================================================================
0001CFBA                            
0001CFBA                            loc_19FBC:
0001CFBA 7064                       			moveq	#100,d0
0001CFBC 6100 0000                  			bsr.w	AddPoints
0001CFC0 117C 0006 0034             		move.b	#6,$34(a0)
0001CFC6 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001CFCC 317C 053C 000C             		move.w	#$53C,obY(a0)
0001CFD2 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001CFD8 4E75                       		rts	
0001CFDA                            ; ===========================================================================
0001CFDA 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001CFEA                            ; ===========================================================================
0001CFEA                            
0001CFEA                            loc_19FE6:
0001CFEA 70FF                       		moveq	#-1,d0
0001CFEC 3028 0036                  		move.w	$36(a0),d0
0001CFF0 2240                       		movea.l	d0,a1
0001CFF2 4A68 0030                  		tst.w	$30(a0)
0001CFF6 6A00                       		bpl.s	loc_1A000
0001CFF8 4268 0030                  		clr.w	$30(a0)
0001CFFC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D002 6100                       		bsr.s	loc_1A020
0001D004                            
0001D004                            loc_1A000:
0001D004 700F                       		moveq	#$F,d0
0001D006 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D00A 6600                       		bne.s	loc_1A00A
0001D00C 6100                       		bsr.s	loc_1A020
0001D00E                            
0001D00E                            loc_1A00A:
0001D00E 4A68 0032                  		tst.w	$32(a0)
0001D012 6700                       		beq.s	locret_1A01E
0001D014 5528 0034                  		subq.b	#2,$34(a0)
0001D018 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D01E 4268 0032                  		clr.w	$32(a0)
0001D022                            
0001D022                            locret_1A01E:
0001D022 4E75                       		rts	
0001D024                            ; ===========================================================================
0001D024                            
0001D024                            loc_1A020:
0001D02E                            ; ===========================================================================
0001D02E                            
0001D02E                            loc_1A02A:
0001D02E 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D034 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D03A 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001D040 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D046 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D04C 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D052 6500                       		bcs.s	loc_1A070
0001D054 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D05A 5428 0034                  		addq.b	#2,$34(a0)
0001D05E 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D064 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D06A 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D070 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D074                            
0001D074                            loc_1A070:
0001D074 6000 0000                  		bra.w	loc_1A166
0001D078                            ; ===========================================================================
0001D078                            
0001D078                            loc_1A074:
0001D078 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D07E 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D084 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001D08A 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D090 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D096 6500                       		bcs.s	loc_1A09A
0001D098 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D09E                            
0001D09E                            loc_1A09A:
0001D09E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D0A4 3028 0008                  		move.w	obX(a0),d0
0001D0A8 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D0AC 6A00                       		bpl.s	loc_1A0B4
0001D0AE 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D0B4 6000 0000                  		bra.w	loc_1A0F2
0001D0B8                            ; ===========================================================================
0001D0B8                            
0001D0B8                            loc_1A0B4:
0001D0B8 0440 0070                  		subi.w	#$70,d0
0001D0BC 6500                       		bcs.s	loc_1A0F2
0001D0BE 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D0C4 5140                       		subq.w	#8,d0
0001D0C6 6500                       		bcs.s	loc_1A0F2
0001D0C8 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D0CE 5140                       		subq.w	#8,d0
0001D0D0 6500                       		bcs.s	loc_1A0F2
0001D0D2 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D0D8 5140                       		subq.w	#8,d0
0001D0DA 6500                       		bcs.s	loc_1A0F2
0001D0DC 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D0E2 5140                       		subq.w	#8,d0
0001D0E4 6500                       		bcs.s	loc_1A0F2
0001D0E6 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D0EC 0440 0038                  		subi.w	#$38,d0
0001D0F0 6500                       		bcs.s	loc_1A0F2
0001D0F2 4268 0010                  		clr.w	obVelX(a0)
0001D0F6                            
0001D0F6                            loc_1A0F2:
0001D0F6 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D0FC 6500                       		bcs.s	loc_1A110
0001D0FE 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D104 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D10A 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D110 5428 0034                  		addq.b	#2,$34(a0)
0001D114                            
0001D114                            loc_1A110:
0001D114 6000                       		bra.s	loc_1A15C
0001D116                            ; ===========================================================================
0001D116                            
0001D116                            loc_1A112:
0001D116 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001D11C 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D122 6500                       		bcs.s	loc_1A124
0001D124 4268 0010                  		clr.w	obVelX(a0)
0001D128                            
0001D128                            loc_1A124:
0001D128 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D12E 4A68 0012                  		tst.w	obVelY(a0)
0001D132 6B00                       		bmi.s	loc_1A142
0001D134 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D13A 6500                       		bcs.s	loc_1A142
0001D13C 317C 0592 000C             		move.w	#$592,obY(a0)
0001D142 4268 0012                  		clr.w	obVelY(a0)
0001D146                            
0001D146                            loc_1A142:
0001D146 3028 0010                  		move.w	obVelX(a0),d0
0001D14A 8068 0012                  		or.w	obVelY(a0),d0
0001D14E 6600                       		bne.s	loc_1A15C
0001D150 5428 0034                  		addq.b	#2,$34(a0)
0001D154 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D15A 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D160                            
0001D160                            loc_1A15C:
0001D160 43FA F876                  		lea	Ani_SEgg(pc),a1
0001D164 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001D16A                            
0001D16A                            loc_1A166:
0001D16A 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D170 6C00                       		bge.s	loc_1A172
0001D172 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D176                            
0001D176                            loc_1A172:
0001D176 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D17C 6C00                       		bge.s	locret_1A190
0001D17E 323C 001B                  		move.w	#$1B,d1
0001D182 343C 0070                  		move.w	#$70,d2
0001D186 363C 0071                  		move.w	#$71,d3
0001D18A 3828 0008                  		move.w	obX(a0),d4
0001D18E 4EF9 0001 1972             		jmp	(SolidObject).l
0001D194                            ; ===========================================================================
0001D194                            
0001D194                            locret_1A190:
0001D194 4E75                       		rts	
0001D196                            ; ===========================================================================
0001D196                            
0001D196                            loc_1A192:
0001D196 217C 0001 AC8E 0004        		move.l	#Map_Eggman,obMap(a0)
0001D19E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D1A4 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D1AA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1B0 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001D1B6 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D1BC 6400                       		bcc.s	loc_1A1D0
0001D1BE 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D1C4 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D1CA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D1D0 5428 0034                  		addq.b	#2,$34(a0)
0001D1D4                            
0001D1D4                            loc_1A1D0:
0001D1D4 6000 FF8A                  		bra.w	loc_1A15C
0001D1D8                            ; ===========================================================================
0001D1D8                            
0001D1D8                            loc_1A1D4:
0001D1D8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1DE 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001D1E4 4A68 0030                  		tst.w	$30(a0)
0001D1E8 6600                       		bne.s	loc_1A1FC
0001D1EA 4A28 0020                  		tst.b	obColType(a0)
0001D1EE 6600                       		bne.s	loc_1A216
0001D1F0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D1F6 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D1FC                            
0001D1FC                            loc_1A1FC:
0001D1FC 5368 0030                  		subq.w	#1,$30(a0)
0001D200 6600                       		bne.s	loc_1A216
0001D202 4A28 0022                  		tst.b	obStatus(a0)
0001D206 6A00                       		bpl.s	loc_1A210
0001D208 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D20E 6000                       		bra.s	loc_1A216
0001D210                            ; ===========================================================================
0001D210                            
0001D210                            loc_1A210:
0001D210 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D216                            
0001D216                            loc_1A216:
0001D216 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D21C 6D00                       		blt.s	loc_1A23A
0001D21E 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D224 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D22A 4278 D020                  		clr.w	(v_player+obInertia).w
0001D22E 4A68 0012                  		tst.w	obVelY(a0)
0001D232 6A00                       		bpl.s	loc_1A248
0001D234 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D23A                            
0001D23A                            loc_1A23A:
0001D23A 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D240 6D00                       		blt.s	loc_1A248
0001D242 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D248                            
0001D248                            loc_1A248:
0001D248 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D24E 6500                       		bcs.s	loc_1A260
0001D250 4A28 0001                  		tst.b	obRender(a0)
0001D254 6B00                       		bmi.s	loc_1A260
0001D256 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D25C 6000 FAF0                  		bra.w	Obj85_Delete
0001D260                            ; ===========================================================================
0001D260                            
0001D260                            loc_1A260:
0001D260 6000 FEFE                  		bra.w	loc_1A15C
0001D264                            ; ===========================================================================
0001D264                            
0001D264                            loc_1A264:	; Routine 4
0001D264 2268 0034                  		movea.l	$34(a0),a1
0001D268 1011                       		move.b	(a1),d0
0001D26A B010                       		cmp.b	(a0),d0
0001D26C 6600 FAE0                  		bne.w	Obj85_Delete
0001D270 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D276 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D27C 6C00                       		bge.s	loc_1A280
0001D27E 6000                       		bra.s	loc_1A2A6
0001D280                            ; ===========================================================================
0001D280                            
0001D280                            loc_1A280:
0001D280 4A69 0010                  		tst.w	obVelX(a1)
0001D284 6700                       		beq.s	loc_1A28C
0001D286 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D28C                            
0001D28C                            loc_1A28C:
0001D28C 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001D290 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001D296                            
0001D296                            loc_1A296:
0001D296 2268 0034                  		movea.l	$34(a0),a1
0001D29A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D2A0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D2A6                            
0001D2A6                            loc_1A2A6:
0001D2A6 2268 0034                  		movea.l	$34(a0),a1
0001D2AA 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D2B0 7003                       		moveq	#3,d0
0001D2B2 C028 0022                  		and.b	obStatus(a0),d0
0001D2B6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D2BC 8128 0001                  		or.b	d0,obRender(a0)
0001D2C0 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001D2C6                            ; ===========================================================================
0001D2C6                            
0001D2C6                            loc_1A2C6:	; Routine 6
0001D2C6 2268 0034                  		movea.l	$34(a0),a1
0001D2CA 1011                       		move.b	(a1),d0
0001D2CC B010                       		cmp.b	(a0),d0
0001D2CE 6600 FA7E                  		bne.w	Obj85_Delete
0001D2D2 0CA9 0001 AC8E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D2DA 6700                       		beq.s	loc_1A2E4
0001D2DC 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D2E2 60C2                       		bra.s	loc_1A2A6
0001D2E4                            ; ===========================================================================
0001D2E4                            
0001D2E4                            loc_1A2E4:
0001D2E4 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D2EA 4A29 0021                  		tst.b	obColProp(a1)
0001D2EE 6F00                       		ble.s	loc_1A312
0001D2F0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D2F6 217C 0001 AC8E 0004        		move.l	#Map_Eggman,obMap(a0)
0001D2FE 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D304 43FA D938                  		lea	Ani_Eggman(pc),a1
0001D308 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001D30E 6000 FF86                  		bra.w	loc_1A296
0001D312                            ; ===========================================================================
0001D312                            
0001D312                            loc_1A312:
0001D312 4A28 0001                  		tst.b	1(a0)
0001D316 6A00 FA36                  		bpl.w	Obj85_Delete
0001D31A 6100 D4CC                  		bsr.w	BossDefeated
0001D31E 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D324 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D32A 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D332 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D338 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D33C 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001D342 6000 FF52                  		bra.w	loc_1A296
0001D346                            ; ===========================================================================
0001D346                            
0001D346                            loc_1A346:	; Routine 8
0001D346 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D34C 2268 0034                  		movea.l	$34(a0),a1
0001D350 0CA9 0001 AC8E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D358 6700                       		beq.s	loc_1A35E
0001D35A 6000 FF4A                  		bra.w	loc_1A2A6
0001D35E                            ; ===========================================================================
0001D35E                            
0001D35E                            loc_1A35E:
0001D35E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D364 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D36A 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D36E 6600                       		bne.s	loc_1A376
0001D370 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D376                            
0001D376                            loc_1A376:
0001D376 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D37A 6E00                       		bgt.s	loc_1A38A
0001D37C 5228 001A                  		addq.b	#1,obFrame(a0)
0001D380 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D386 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D38A                            
0001D38A                            loc_1A38A:
0001D38A 6000 FF0A                  		bra.w	loc_1A296
0001D38E                            ; ===========================================================================
0001D38E                            
0001D38E                            loc_1A38E:	; Routine $A
0001D38E 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D394 3038 D008                  		move.w	(v_player+obX).w,d0
0001D398 9068 0008                  		sub.w	obX(a0),d0
0001D39C 6500                       		bcs.s	loc_1A3A6
0001D39E 4A28 0001                  		tst.b	obRender(a0)
0001D3A2 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D3A6                            
0001D3A6                            loc_1A3A6:
0001D3A6 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001D3AC                            ; ===========================================================================
0001D3AC                            
0001D3AC                            loc_1A3AC:	; Routine $C
0001D3AC 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D3B2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D3B8 2268 0034                  		movea.l	$34(a0),a1
0001D3BC 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D3C2 6600                       		bne.s	loc_1A3D0
0001D3C4 0CA9 0001 AC8E 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D3CC 6700 F980                  		beq.w	Obj85_Delete
0001D3D0                            
0001D3D0                            loc_1A3D0:
0001D3D0 6000 FED4                  		bra.w	loc_1A2A6
0001D3D4                            		
0001D3D4                            BossModeMusic:
0001D3D4 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001D3DA 6600 0000                  		bne.w	NormalMode
0001D3DE 4EF9 0000 0000             		jmp	PinchMode
0001D3E4                            
0001D3E4                            NormalMode:
0001D3E4 303C 00AC                  		move.w	#$AC,d0
0001D3E8 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D3EE 4E75                       		rts
0001D3F0                            
0001D3F0                            PinchMode:
0001D3F0 303C 0094                  		move.w	#$94,d0
0001D3F4 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D3FA 303C 00E2                  		move.w	#$E2,d0
0001D3FE 4EB9 0000 129A             		jsr	(PlaySound).l
0001D404 4E75                       		rts		
0001D404 4E75                       		rts		
0001D406                            		include	"_anim\FZ Eggman in Ship.asm"
0001D406                            ; ---------------------------------------------------------------------------
0001D406                            ; Animation script - Eggman (FZ)
0001D406                            ; ---------------------------------------------------------------------------
0001D406 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D408 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D40C                            		even
0001D40C                            		even
0001D40C                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D40C                            ; ---------------------------------------------------------------------------
0001D40C                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D40C                            ; ---------------------------------------------------------------------------
0001D40C                            Map_FZDamaged_internal:
0001D40C 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D40E 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D410 06                         @damage1:	dc.b 6
0001D411 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D416 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D41B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D420 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D425 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D42A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D42F 06                         @damage2:	dc.b 6
0001D430 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D435 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D43A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D43F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D444 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D449 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D44E                            		even
0001D44E                            		even
0001D44E                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D44E                            ; ---------------------------------------------------------------------------
0001D44E                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D44E                            ; ---------------------------------------------------------------------------
0001D44E                            Map_FZLegs_internal:
0001D44E 0000                       		dc.w @extended-Map_FZLegs_internal
0001D450 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D452 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D454 02                         @extended:	dc.b 2
0001D455 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D45A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D45F 03                         @halfway:	dc.b 3
0001D460 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D465 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D46A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D46F 02                         @retracted:	dc.b 2
0001D470 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D475 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D47A                            		even
0001D47A                            		even
0001D47A                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D47A                            ; ---------------------------------------------------------------------------
0001D47A                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D47A                            ; ---------------------------------------------------------------------------
0001D47A                            
0001D47A                            Obj84_Delete:
0001D47A 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001D480                            ; ===========================================================================
0001D480                            
0001D480                            EggmanCylinder:
0001D480 7000                       		moveq	#0,d0
0001D482 1028 0024                  		move.b	obRoutine(a0),d0
0001D486 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D48A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D48E                            ; ===========================================================================
0001D48E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D490 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D492 0000                       		dc.w loc_1A57E-Obj84_Index
0001D494                            
0001D494 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D498 2550 0620                  		dc.w $2550, $620
0001D49C 2490 04C0                  		dc.w $2490, $4C0
0001D4A0 2510 04C0                  		dc.w $2510, $4C0
0001D4A4                            ; ===========================================================================
0001D4A4                            
0001D4A4                            Obj84_Main:	; Routine
0001D4A4 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D4A8 7000                       		moveq	#0,d0
0001D4AA 1028 0028                  		move.b	obSubtype(a0),d0
0001D4AE D040                       		add.w	d0,d0
0001D4B0 D2C0                       		adda.w	d0,a1
0001D4B2 117C 0004 0001             		move.b	#4,obRender(a0)
0001D4B8 08E8 0007 0001             		bset	#7,obRender(a0)
0001D4BE 08E8 0004 0001             		bset	#4,obRender(a0)
0001D4C4 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D4CA 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D4D2 3159 0008                  		move.w	(a1)+,obX(a0)
0001D4D6 3151 000C                  		move.w	(a1),obY(a0)
0001D4DA 3159 0038                  		move.w	(a1)+,$38(a0)
0001D4DE 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D4E4 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D4EA 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D4F0 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D4F6 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D4FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D500                            
0001D500                            loc_1A4CE:	; Routine 2
0001D500 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D506 6F00                       		ble.s	loc_1A4DC
0001D508 08E8 0001 0001             		bset	#1,obRender(a0)
0001D50E                            
0001D50E                            loc_1A4DC:
0001D50E 42A8 003C                  		clr.l	$3C(a0)
0001D512 4A28 0029                  		tst.b	$29(a0)
0001D516 6700                       		beq.s	loc_1A4EA
0001D518 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D51C                            
0001D51C                            loc_1A4EA:
0001D51C 2028 003C                  		move.l	$3C(a0),d0
0001D520 2228 0038                  		move.l	$38(a0),d1
0001D524 D280                       		add.l	d0,d1
0001D526 4841                       		swap	d1
0001D528 3141 000C                  		move.w	d1,obY(a0)
0001D52C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D532 6600                       		bne.s	loc_1A524
0001D534 4A68 0030                  		tst.w	$30(a0)
0001D538 6A00                       		bpl.s	loc_1A524
0001D53A 70F6                       		moveq	#-$A,d0
0001D53C 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D542 6F00                       		ble.s	loc_1A514
0001D544 700E                       		moveq	#$E,d0
0001D546                            
0001D546                            loc_1A514:
0001D546 D240                       		add.w	d0,d1
0001D548 2268 0034                  		movea.l	$34(a0),a1
0001D54C 3341 000C                  		move.w	d1,obY(a1)
0001D550 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D556                            
0001D556                            loc_1A524:
0001D556 323C 002B                  		move.w	#$2B,d1
0001D55A 343C 0060                  		move.w	#$60,d2
0001D55E 363C 0061                  		move.w	#$61,d3
0001D562 3828 0008                  		move.w	obX(a0),d4
0001D566 4EB9 0001 1972             		jsr	(SolidObject).l
0001D56C 7000                       		moveq	#0,d0
0001D56E 3228 003C                  		move.w	$3C(a0),d1
0001D572 6A00                       		bpl.s	loc_1A550
0001D574 4441                       		neg.w	d1
0001D576 5141                       		subq.w	#8,d1
0001D578 6500                       		bcs.s	loc_1A55C
0001D57A 5200                       		addq.b	#1,d0
0001D57C E841                       		asr.w	#4,d1
0001D57E D041                       		add.w	d1,d0
0001D580 6000                       		bra.s	loc_1A55C
0001D582                            ; ===========================================================================
0001D582                            
0001D582                            loc_1A550:
0001D582 0441 0027                  		subi.w	#$27,d1
0001D586 6500                       		bcs.s	loc_1A55C
0001D588 5200                       		addq.b	#1,d0
0001D58A E841                       		asr.w	#4,d1
0001D58C D041                       		add.w	d1,d0
0001D58E                            
0001D58E                            loc_1A55C:
0001D58E 1140 001A                  		move.b	d0,obFrame(a0)
0001D592 3038 D008                  		move.w	(v_player+obX).w,d0
0001D596 9068 0008                  		sub.w	obX(a0),d0
0001D59A 6B00                       		bmi.s	loc_1A578
0001D59C 0440 0140                  		subi.w	#$140,d0
0001D5A0 6B00                       		bmi.s	loc_1A578
0001D5A2 4A28 0001                  		tst.b	obRender(a0)
0001D5A6 6A00 FED2                  		bpl.w	Obj84_Delete
0001D5AA                            
0001D5AA                            loc_1A578:
0001D5AA 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001D5B0                            ; ===========================================================================
0001D5B0                            
0001D5B0                            loc_1A57E:	; Routine 4
0001D5B0 7000                       		moveq	#0,d0
0001D5B2 1028 0028                  		move.b	obSubtype(a0),d0
0001D5B6 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D5BA 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D5BE 6000 FF5C                  		bra.w	loc_1A4EA
0001D5C2                            ; ===========================================================================
0001D5C2 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D5C4 0000                       		dc.w loc_1A598-off_1A590
0001D5C6 0000                       		dc.w loc_1A604-off_1A590
0001D5C8 0000                       		dc.w loc_1A604-off_1A590
0001D5CA                            ; ===========================================================================
0001D5CA                            
0001D5CA                            loc_1A598:
0001D5CA 4A28 0029                  		tst.b	$29(a0)
0001D5CE 6600                       		bne.s	loc_1A5D4
0001D5D0 2268 0034                  		movea.l	$34(a0),a1
0001D5D4 4A29 0021                  		tst.b	obColProp(a1)
0001D5D8 6600                       		bne.s	loc_1A5B4
0001D5DA 6100 D20C                  		bsr.w	BossDefeated
0001D5DE 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D5E6                            
0001D5E6                            loc_1A5B4:
0001D5E6 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D5EE 6400                       		bcc.s	locret_1A602
0001D5F0 42A8 003C                  		clr.l	$3C(a0)
0001D5F4 2268 0034                  		movea.l	$34(a0),a1
0001D5F8 5369 0032                  		subq.w	#1,$32(a1)
0001D5FC 4269 0030                  		clr.w	$30(a1)
0001D600 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D604 4E75                       		rts	
0001D606                            ; ===========================================================================
0001D606                            
0001D606                            loc_1A5D4:
0001D606 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D60C 6C00                       		bge.s	loc_1A5E4
0001D60E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D616                            
0001D616                            loc_1A5E4:
0001D616 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D61E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D624 6E00                       		bgt.s	locret_1A602
0001D626 4268 003E                  		clr.w	$3E(a0)
0001D62A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D630 4228 0029                  		clr.b	$29(a0)
0001D634                            
0001D634                            locret_1A602:
0001D634 4E75                       		rts	
0001D636                            ; ===========================================================================
0001D636                            
0001D636                            loc_1A604:
0001D636 08E8 0001 0001             		bset	#1,obRender(a0)
0001D63C 4A28 0029                  		tst.b	$29(a0)
0001D640 6600                       		bne.s	loc_1A646
0001D642 2268 0034                  		movea.l	$34(a0),a1
0001D646 4A29 0021                  		tst.b	obColProp(a1)
0001D64A 6600                       		bne.s	loc_1A626
0001D64C 6100 D19A                  		bsr.w	BossDefeated
0001D650 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D658                            
0001D658                            loc_1A626:
0001D658 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D660 6400                       		bcc.s	locret_1A674
0001D662 42A8 003C                  		clr.l	$3C(a0)
0001D666 2268 0034                  		movea.l	$34(a0),a1
0001D66A 5369 0032                  		subq.w	#1,$32(a1)
0001D66E 4269 0030                  		clr.w	$30(a1)
0001D672 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D676 4E75                       		rts	
0001D678                            ; ===========================================================================
0001D678                            
0001D678                            loc_1A646:
0001D678 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D67E 6D00                       		blt.s	loc_1A656
0001D680 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D688                            
0001D688                            loc_1A656:
0001D688 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D690 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D696 6D00                       		blt.s	locret_1A674
0001D698 4268 003E                  		clr.w	$3E(a0)
0001D69C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D6A2 4228 0029                  		clr.b	$29(a0)
0001D6A6                            
0001D6A6                            locret_1A674:
0001D6A6 4E75                       		rts	
0001D6A6 4E75                       		rts	
0001D6A8                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D6A8                            ; --------------------------------------------------------------------------------
0001D6A8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D6A8                            ; --------------------------------------------------------------------------------
0001D6A8                            
0001D6A8                            SME_SCUpI:	
0001D6A8 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D6AC 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D6B0 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D6B4 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D6B8 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D6BC 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D6C0 06                         SME_SCUpI_18:	dc.b 6	
0001D6C1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6C6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6CB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6D0 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6D5 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6DA A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6DF 08                         SME_SCUpI_37:	dc.b 8	
0001D6E0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6E5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6EA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6EF B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6F4 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6F9 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6FE D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D703 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D708 0A                         SME_SCUpI_60:	dc.b $A	
0001D709 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D70E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D713 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D718 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D71D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D722 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D727 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D72C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D731 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D736 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D73B 0C                         SME_SCUpI_93:	dc.b $C	
0001D73C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D741 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D746 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D74B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D750 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D755 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D75A D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D75F F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D764 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D769 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D76E 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D773 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D778 0D                         SME_SCUpI_D0:	dc.b $D	
0001D779 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D77E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D783 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D788 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D78D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D792 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D797 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D79C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7A1 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7A6 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7AB 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7B0 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7B5 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7BA 0E                         SME_SCUpI_112:	dc.b $E	
0001D7BB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7C0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7C5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7CA B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7CF B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7D4 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7D9 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7DE F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7E3 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7E8 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7ED 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7F2 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7F7 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7FC A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D801 0E                         SME_SCUpI_159:	dc.b $E	
0001D802 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D807 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D80C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D811 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D816 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D81B D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D820 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D825 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D82A F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D82F 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D834 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D839 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D83E 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D843 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D848 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D849 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D84E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D853 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D858 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D85D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D862 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D867 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D86C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D871 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D876 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D87B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D880 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D885 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D88A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D88F 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D890 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D895 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D89A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D89F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8A4 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8A9 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8AE D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8B3 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8B8 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8BD 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8C2 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8C7 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D8CC 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D8D1 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8D6 0E                         SME_SCUpI_22E:	dc.b $E	
0001D8D7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8DC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8E1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8E6 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8EB B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8F0 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8F5 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8FA F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8FF F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D904 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D909 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D90E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D913 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D918 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D91D 0E                         SME_SCUpI_275:	dc.b $E	
0001D91E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D923 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D928 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D92D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D932 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D937 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D93C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D941 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D946 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D94B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D950 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D955 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D95A 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D95F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D964 02                         SME_SCUpI_2BC:	dc.b 2	
0001D965 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D96A 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D970 00                         		even
0001D970 00                         		even
0001D970                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D970                            ; ---------------------------------------------------------------------------
0001D970                            ; Object 86 - energy balls (FZ)
0001D970                            ; ---------------------------------------------------------------------------
0001D970                            
0001D970                            BossPlasma:
0001D970 7000                       		moveq	#0,d0
0001D972 1028 0024                  		move.b	obRoutine(a0),d0
0001D976 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D97A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D97E                            ; ===========================================================================
0001D97E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D980 0000                       		dc.w Obj86_Generator-Obj86_Index
0001D982 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001D984 0000                       		dc.w loc_1A962-Obj86_Index
0001D986 0000                       		dc.w loc_1A982-Obj86_Index
0001D988                            ; ===========================================================================
0001D988                            
0001D988                            Obj86_Main:	; Routine 0
0001D988 317C 2588 0008             		move.w	#$2588,obX(a0)
0001D98E 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D994 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D99A 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001D9A2 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D9A8 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D9AE 117C 0008 0017             		move.b	#8,obWidth(a0)
0001D9B4 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D9BA 117C 0004 0001             		move.b	#4,obRender(a0)
0001D9C0 08E8 0007 0001             		bset	#7,obRender(a0)
0001D9C6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D9CA                            
0001D9CA                            Obj86_Generator:; Routine 2
0001D9CA 2268 0034                  		movea.l	$34(a0),a1
0001D9CE 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001D9D4 6600                       		bne.s	loc_1A850
0001D9D6 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001D9DA 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001D9E0 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001D9E6                            ; ===========================================================================
0001D9E6                            
0001D9E6                            loc_1A850:
0001D9E6 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D9EC 4A28 0029                  		tst.b	$29(a0)
0001D9F0 6700                       		beq.s	loc_1A86C
0001D9F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D9F6 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D9FC 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DA02                            
0001DA02                            loc_1A86C:
0001DA02 323C 0013                  		move.w	#$13,d1
0001DA06 343C 0008                  		move.w	#8,d2
0001DA0A 363C 0011                  		move.w	#$11,d3
0001DA0E 3828 0008                  		move.w	obX(a0),d4
0001DA12 4EB9 0001 1972             		jsr	(SolidObject).l
0001DA18 3038 D008                  		move.w	(v_player+obX).w,d0
0001DA1C 9068 0008                  		sub.w	obX(a0),d0
0001DA20 6B00                       		bmi.s	loc_1A89A
0001DA22 0440 0140                  		subi.w	#$140,d0
0001DA26 6B00                       		bmi.s	loc_1A89A
0001DA28 4A28 0001                  		tst.b	obRender(a0)
0001DA2C 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DA30                            
0001DA30                            loc_1A89A:
0001DA30 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DA34 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001DA3A 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001DA40                            ; ===========================================================================
0001DA40                            
0001DA40                            Obj86_MakeBalls:; Routine 4
0001DA40 4A28 0029                  		tst.b	$29(a0)
0001DA44 6700 0000                  		beq.w	loc_1A954
0001DA48 4228 0029                  		clr.b	$29(a0)
0001DA4C D068 0030                  		add.w	$30(a0),d0
0001DA50 0240 001E                  		andi.w	#$1E,d0
0001DA54 D4C0                       		adda.w	d0,a2
0001DA56 5868 0030                  		addq.w	#4,$30(a0)
0001DA5A 4268 0032                  		clr.w	$32(a0)
0001DA5E 7403                       		moveq	#3,d2
0001DA60                            
0001DA60                            Obj86_Loop:
0001DA60 4EB9 0000 F9EA             		jsr	(FindNextFreeObj).l
0001DA66 6600 0000                  		bne.w	loc_1A954
0001DA6A 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DA6E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DA74 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DA7A 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DA80 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DA86 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DA8E 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DA94 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DA9A 137C 0000 0020             		move.b	#0,obColType(a1)
0001DAA0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DAA6 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DAAC 137C 0004 0001             		move.b	#4,obRender(a1)
0001DAB2 08E9 0007 0001             		bset	#7,obRender(a1)
0001DAB8 2348 0034                  		move.l	a0,$34(a1)
0001DABC 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001DAC2 3228 0032                  		move.w	$32(a0),d1
0001DAC6 C3FC FFB1                  		muls.w	#-$4F,d1
0001DACA 0641 2578                  		addi.w	#$2578,d1
0001DACE 0240 001F                  		andi.w	#$1F,d0
0001DAD2 0440 0010                  		subi.w	#$10,d0
0001DAD6 D041                       		add.w	d1,d0
0001DAD8 3340 0030                  		move.w	d0,$30(a1)
0001DADC 5268 0032                  		addq.w	#1,$32(a0)
0001DAE0 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DAE6 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DAEA                            
0001DAEA                            loc_1A954:
0001DAEA 4A68 0032                  		tst.w	$32(a0)
0001DAEE 6600                       		bne.s	loc_1A95E
0001DAF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DAF4                            
0001DAF4                            loc_1A95E:
0001DAF4 6000 FF0C                  		bra.w	loc_1A86C
0001DAF8                            ; ===========================================================================
0001DAF8                            
0001DAF8                            loc_1A962:	; Routine 6
0001DAF8 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DAFE 4A68 0038                  		tst.w	$38(a0)
0001DB02 6600                       		bne.s	loc_1A97E
0001DB04 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DB0A 2268 0034                  		movea.l	$34(a0),a1
0001DB0E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DB14                            
0001DB14                            loc_1A97E:
0001DB14 6000 FEEC                  		bra.w	loc_1A86C
0001DB18                            ; ===========================================================================
0001DB18                            
0001DB18                            loc_1A982:	; Routine 8
0001DB18 7000                       		moveq	#0,d0
0001DB1A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DB1E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DB22 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DB26 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DB2A 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001DB30 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001DB36                            ; ===========================================================================
0001DB36 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DB38 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DB3A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DB3C                            ; ===========================================================================
0001DB3C                            
0001DB3C                            loc_1A9A6:
0001DB3C 3028 0030                  		move.w	$30(a0),d0
0001DB40 9068 0008                  		sub.w	obX(a0),d0
0001DB44 E940                       		asl.w	#4,d0
0001DB46 3140 0010                  		move.w	d0,obVelX(a0)
0001DB4A 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DB50 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DB54 4E75                       		rts	
0001DB56                            ; ===========================================================================
0001DB56                            
0001DB56                            loc_1A9C0:
0001DB56 4A68 0010                  		tst.w	obVelX(a0)
0001DB5A 6700                       		beq.s	loc_1A9E6
0001DB5C 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001DB62 3028 0008                  		move.w	obX(a0),d0
0001DB66 9068 0030                  		sub.w	$30(a0),d0
0001DB6A 6400                       		bcc.s	loc_1A9E6
0001DB6C 4268 0010                  		clr.w	obVelX(a0)
0001DB70 D168 0008                  		add.w	d0,obX(a0)
0001DB74 2268 0034                  		movea.l	$34(a0),a1
0001DB78 5369 0032                  		subq.w	#1,$32(a1)
0001DB7C                            
0001DB7C                            loc_1A9E6:
0001DB7C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB82 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DB86 6600                       		bne.s	locret_1AA1C
0001DB88 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DB8C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DB92 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DB98 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DB9E 7000                       		moveq	#0,d0
0001DBA0 3038 D008                  		move.w	(v_player+obX).w,d0
0001DBA4 9068 0008                  		sub.w	obX(a0),d0
0001DBA8 3140 0010                  		move.w	d0,obVelX(a0)
0001DBAC 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DBB2                            
0001DBB2                            locret_1AA1C:
0001DBB2 4E75                       		rts	
0001DBB4                            ; ===========================================================================
0001DBB4                            
0001DBB4                            loc_1AA1E:
0001DBB4 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001DBBA 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DBC0 6400                       		bcc.s	loc_1AA34
0001DBC2 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DBC6 6700                       		beq.s	loc_1AA34
0001DBC8 4E75                       		rts	
0001DBCA                            ; ===========================================================================
0001DBCA                            
0001DBCA                            loc_1AA34:
0001DBCA 2268 0034                  		movea.l	$34(a0),a1
0001DBCE 5369 0038                  		subq.w	#1,$38(a1)
0001DBD2 6000 F8A6                  		bra.w	Obj84_Delete
0001DBD2 6000 F8A6                  		bra.w	Obj84_Delete
0001DBD6                            		include	"_anim\Plasma Ball Launcher.asm"
0001DBD6                            ; ---------------------------------------------------------------------------
0001DBD6                            ; Animation script - energy ball launcher (FZ)
0001DBD6                            ; ---------------------------------------------------------------------------
0001DBD6 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DBD8 0000                       		dc.w @redsparking-Ani_PLaunch
0001DBDA 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DBDC 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DBE0 00                         		even
0001DBE0 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DBE6                            		even
0001DBE6 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DBEC                            		even
0001DBEC                            		even
0001DBEC                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DBEC                            ; ---------------------------------------------------------------------------
0001DBEC                            ; Sprite mappings - energy ball	launcher (FZ)
0001DBEC                            ; ---------------------------------------------------------------------------
0001DBEC                            Map_PLaunch_internal:
0001DBEC 0000                       		dc.w @red-Map_PLaunch_internal
0001DBEE 0000                       		dc.w @white-Map_PLaunch_internal
0001DBF0 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DBF2 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DBF4 01                         @red:		dc.b 1
0001DBF5 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DBFA 01                         @white:		dc.b 1
0001DBFB F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DC00 01                         @sparking1:	dc.b 1
0001DC01 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DC06 01                         @sparking2:	dc.b 1
0001DC07 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DC0C                            		even
0001DC0C                            		even
0001DC0C                            		include	"_anim\Plasma Balls.asm"
0001DC0C                            ; ---------------------------------------------------------------------------
0001DC0C                            ; Animation script - energy balls (FZ)
0001DC0C                            ; ---------------------------------------------------------------------------
0001DC0C 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DC0E 0000                       		dc.w @short-Ani_Plasma
0001DC10 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DC1F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DC2E 0A05 FF                    		dc.b $A, 5, afEnd
0001DC32 00                         		even
0001DC32 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DC3C                            		even
0001DC3C                            		even
0001DC3C                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DC3C                            ; ---------------------------------------------------------------------------
0001DC3C                            ; Sprite mappings - energy balls (FZ)
0001DC3C                            ; ---------------------------------------------------------------------------
0001DC3C                            Map_Plasma_internal:
0001DC3C 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DC3E 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DC40 0000                       		dc.w @white1-Map_Plasma_internal
0001DC42 0000                       		dc.w @white2-Map_Plasma_internal
0001DC44 0000                       		dc.w @white3-Map_Plasma_internal
0001DC46 0000                       		dc.w @white4-Map_Plasma_internal
0001DC48 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DC4A 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DC4C 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DC4E 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DC50 0000                       		dc.w @blank-Map_Plasma_internal
0001DC52 02                         @fuzzy1:	dc.b 2
0001DC53 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DC58 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DC5D 02                         @fuzzy2:	dc.b 2
0001DC5E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DC63 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DC68 02                         @white1:	dc.b 2
0001DC69 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DC6E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DC73 02                         @white2:	dc.b 2
0001DC74 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DC79 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DC7E 02                         @white3:	dc.b 2
0001DC7F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DC84 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DC89 02                         @white4:	dc.b 2
0001DC8A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DC8F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DC94 01                         @fuzzy3:	dc.b 1
0001DC95 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DC9A 01                         @fuzzy4:	dc.b 1
0001DC9B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DCA0 02                         @fuzzy5:	dc.b 2
0001DCA1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DCA6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DCAB 02                         @fuzzy6:	dc.b 2
0001DCAC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DCB1 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DCB6 00                         @blank:		dc.b 0
0001DCB8 00                         		even
0001DCB8 00                         		even
0001DCB8                            
0001DCB8                            		include	"_incObj\3E Prison Capsule.asm"
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8                            ; Object 3E - prison capsule
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8                            
0001DCB8                            Prison:
0001DCB8 7000                       		moveq	#0,d0
0001DCBA 1028 0024                  		move.b	obRoutine(a0),d0
0001DCBE 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DCC2 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DCE2 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001DCE8                            
0001DCE8                            	@delete:
0001DCE8 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001DCEE                            ; ===========================================================================
0001DCEE 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DCF0 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DCF2 0000                       		dc.w Pri_Switched-Pri_Index
0001DCF4 0000                       		dc.w Pri_Explosion-Pri_Index
0001DCF6 0000                       		dc.w Pri_Explosion-Pri_Index
0001DCF8 0000                       		dc.w Pri_Explosion-Pri_Index
0001DCFA 0000                       		dc.w Pri_Animals-Pri_Index
0001DCFC 0000                       		dc.w Pri_EndAct-Pri_Index
0001DCFE                            
0001DCFE =00000030                  pri_origY:	equ $30		; original y-axis position
0001DCFE                            
0001DCFE 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DD02 040C 0501                  		dc.b 4,	$C, 5, 1
0001DD06 0610 0403                  		dc.b 6,	$10, 4,	3
0001DD0A 0810 0305                  		dc.b 8,	$10, 3,	5
0001DD0E                            ; ===========================================================================
0001DD0E                            
0001DD0E                            Pri_Main:	; Routine 0
0001DD0E 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DD16 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DD1C 117C 0004 0001             		move.b	#4,obRender(a0)
0001DD22 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DD28 7000                       		moveq	#0,d0
0001DD2A 1028 0028                  		move.b	obSubtype(a0),d0
0001DD2E E548                       		lsl.w	#2,d0
0001DD30 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DD34 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DD38 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DD3C 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DD40 3028 0018                  		move.w obPriority(a0),d0 
0001DD44 E248                       		lsr.w #1,d0 
0001DD46 0240 0380                  		andi.w #$380,d0 
0001DD4A 3140 0018                  		move.w d0,obPriority(a0)		
0001DD4E 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DD52 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DD56 6600                       		bne.s	@not02		; if not, branch
0001DD58                            
0001DD58 117C 0006 0020             		move.b	#6,obColType(a0)
0001DD5E 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DD64                            
0001DD64                            	@not02:
0001DD64 4E75                       		rts	
0001DD66                            ; ===========================================================================
0001DD66                            
0001DD66                            Pri_BodyMain:	; Routine 2
0001DD66 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DD6C 6700                       		beq.s	@chkopened
0001DD6E 323C 002B                  		move.w	#$2B,d1
0001DD72 343C 0018                  		move.w	#$18,d2
0001DD76 363C 0018                  		move.w	#$18,d3
0001DD7A 3828 0008                  		move.w	obX(a0),d4
0001DD7E 4EF9 0001 1972             		jmp	(SolidObject).l
0001DD84                            ; ===========================================================================
0001DD84                            
0001DD84                            @chkopened:
0001DD84 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DD88 6700                       		beq.s	@open		; if yes, branch
0001DD8A 4228 0025                  		clr.b	ob2ndRout(a0)
0001DD8E 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DD94 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DD9A                            
0001DD9A                            	@open:
0001DD9A 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DDA0                            		
0001DDA0                            	@rts:
0001DDA0 4E75                       		rts
0001DDA2                            ; ===========================================================================
0001DDA2                            
0001DDA2                            Pri_Switched:	; Routine 4
0001DDA2 323C 0017                  		move.w	#$17,d1
0001DDA6 343C 0008                  		move.w	#8,d2
0001DDAA 363C 0008                  		move.w	#8,d3
0001DDAE 3828 0008                  		move.w	obX(a0),d4
0001DDB2 4EB9 0001 1972             		jsr	(SolidObject).l
0001DDB8 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DDBE 4EB9 0000 C4F4             		jsr	(AnimateSprite).l
0001DDC4 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DDCA 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DDCE 6700                       		beq.s	@open2		; if yes, branch
0001DDD0                            
0001DDD0 5068 000C                  		addq.w	#8,obY(a0)
0001DDD4 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DDDA 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DDE0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DDE4 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DDE8 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DDEE 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DDF4 4228 0025                  		clr.b	ob2ndRout(a0)
0001DDF8 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DDFE 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DE04 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001DE08 6700                       		beq.s	@open2
0001DE0A 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001DE18                            
0001DE18                            	@open2:
0001DE18 4E75                       		rts	
0001DE1A                            ; ===========================================================================
0001DE1A                            
0001DE1A                            Pri_Explosion:	; Routine 6, 8, $A
0001DE1A 7007                       		moveq	#7,d0
0001DE1C C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DE20 6600                       		bne.s	@noexplosion
0001DE22 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001DE28 6600                       		bne.s	@noexplosion
0001DE2A 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DE2E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE34 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE3A 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001DE40 7200                       		moveq	#0,d1
0001DE42 1200                       		move.b	d0,d1
0001DE44 E409                       		lsr.b	#2,d1
0001DE46 0441 0020                  		subi.w	#$20,d1
0001DE4A D369 0008                  		add.w	d1,obX(a1)
0001DE4E E048                       		lsr.w	#8,d0
0001DE50 E608                       		lsr.b	#3,d0
0001DE52 D169 000C                  		add.w	d0,obY(a1)
0001DE56                            
0001DE56                            	@noexplosion:
0001DE56 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DE5A 6700                       		beq.s	@makeanimal
0001DE5C 4E75                       		rts	
0001DE5E                            ; ===========================================================================
0001DE5E                            
0001DE5E                            @makeanimal:
0001DE5E 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DE64 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DE6A 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DE70 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DE76 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DE7C 7C07                       		moveq	#7,d6
0001DE7E 3A3C 009A                  		move.w	#$9A,d5
0001DE82 78E4                       		moveq	#-$1C,d4
0001DE84                            
0001DE84                            	@loop:
0001DE84 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001DE8A 6600                       		bne.s	@fail
0001DE8C 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DE90 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE96 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE9C D969 0008                  		add.w	d4,obX(a1)
0001DEA0 5E44                       		addq.w	#7,d4
0001DEA2 3345 0036                  		move.w	d5,$36(a1)
0001DEA6 5145                       		subq.w	#8,d5
0001DEA8 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DEAC                            
0001DEAC                            	@fail:
0001DEAC 4E75                       		rts	
0001DEAE                            ; ===========================================================================
0001DEAE                            
0001DEAE                            Pri_Animals:	; Routine $C
0001DEAE 7007                       		moveq	#7,d0
0001DEB0 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DEB4 6600                       		bne.s	@noanimal
0001DEB6 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001DEBC 6600                       		bne.s	@noanimal
0001DEBE 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DEC2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DEC8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DECE 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001DED4 0240 001F                  		andi.w	#$1F,d0
0001DED8 5D40                       		subq.w	#6,d0
0001DEDA 4A41                       		tst.w	d1
0001DEDC 6A00                       		bpl.s	@ispositive
0001DEDE 4440                       		neg.w	d0
0001DEE0                            
0001DEE0                            	@ispositive:
0001DEE0 D169 0008                  		add.w	d0,obX(a1)
0001DEE4 337C 000C 0036             		move.w	#$C,$36(a1)
0001DEEA                            
0001DEEA                            	@noanimal:
0001DEEA 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DEEE 6600                       		bne.s	@wait
0001DEF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DEF4 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DEFA                            
0001DEFA                            	@wait:
0001DEFA 4E75                       		rts	
0001DEFC                            ; ===========================================================================
0001DEFC                            
0001DEFC                            Pri_EndAct:	; Routine $E
0001DEFC 703E                       		moveq	#$3E,d0
0001DEFE 7228                       		moveq	#id_Animals,d1
0001DF00 7440                       		moveq	#$40,d2
0001DF02 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DF06                            
0001DF06                            	@findanimal:
0001DF06 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DF08 6700                       		beq.s	@found		; if yes, branch
0001DF0A D2C2                       		adda.w	d2,a1		; next object RAM
0001DF0C 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DF10                            
0001DF10 4EB9 0001 0C94             		jsr	(GotThroughAct1).l
0001DF16 4EF9 0000 F47A             		jmp	(DeleteObject).l
0001DF1C                            
0001DF1C                            	@found:
0001DF1C 4E75                       		rts	
0001DF1C 4E75                       		rts	
0001DF1E                            		include	"_anim\Prison Capsule.asm"
0001DF1E                            ; ---------------------------------------------------------------------------
0001DF1E                            ; Animation script - prison capsule
0001DF1E                            ; ---------------------------------------------------------------------------
0001DF1E 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DF20 0000                       		dc.w @switchflash-Ani_Pri
0001DF22 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DF26                            		even
0001DF26                            		even
0001DF26                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DF26                            ; ---------------------------------------------------------------------------
0001DF26                            ; Sprite mappings - prison capsule
0001DF26                            ; ---------------------------------------------------------------------------
0001DF26                            Map_Pri_internal:
0001DF26 0000                       		dc.w @capsule-Map_Pri_internal
0001DF28 0000                       		dc.w @switch1-Map_Pri_internal
0001DF2A 0000                       		dc.w @broken-Map_Pri_internal
0001DF2C 0000                       		dc.w @switch2-Map_Pri_internal
0001DF2E 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DF30 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DF32 0000                       		dc.w @blank-Map_Pri_internal
0001DF34 07                         @capsule:	dc.b 7
0001DF35 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DF3A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DF3F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DF44 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DF49 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DF4E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DF53 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DF58 01                         @switch1:	dc.b 1
0001DF59 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DF5E 06                         @broken:	dc.b 6
0001DF5F 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DF64 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DF69 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DF6E 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DF73 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DF78 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DF7D 01                         @switch2:	dc.b 1
0001DF7E F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DF83 02                         @unusedthing1:	dc.b 2
0001DF84 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DF89 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DF8E 01                         @unusedthing2:	dc.b 1
0001DF8F F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DF94 00                         @blank:		dc.b 0
0001DF96 00                         		even
0001DF96 00                         		even
0001DF96                            
0001DF96                            		include	"_incObj\sub ReactToItem.asm"
0001DF96                            ; ---------------------------------------------------------------------------
0001DF96                            ; Subroutine to react to obColType(a0)
0001DF96                            ; ---------------------------------------------------------------------------
0001DF96                            
0001DF96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF96                            
0001DF96                            
0001DF96                            ReactToItem:
0001DF96 4E71                       		nop	
0001DF98 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001DF9C 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001DFA0 5142                       		subq.w	#8,d2
0001DFA2 7A00                       		moveq	#0,d5
0001DFA4 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001DFA8 5705                       		subq.b	#3,d5
0001DFAA 9645                       		sub.w	d5,d3
0001DFAC 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001DFB2 6600                       		bne.s	@notducking	; if not, branch
0001DFB4 0643 000C                  		addi.w	#$C,d3
0001DFB8 7A0A                       		moveq	#$A,d5
0001DFBA                            
0001DFBA                            	@notducking:
0001DFBA 383C 0010                  		move.w	#$10,d4
0001DFBE DA45                       		add.w	d5,d5
0001DFC0 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001DFC4 3C3C 005F                  		move.w	#$5F,d6
0001DFC8                            
0001DFC8                            @loop:
0001DFC8 4A29 0001                  		tst.b	obRender(a1)
0001DFCC 6A00                       		bpl.s	@next
0001DFCE 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001DFD2 6600                       		bne.s	@proximity	; if nonzero, branch
0001DFD4                            
0001DFD4                            	@next:
0001DFD4 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001DFD8 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001DFDC                            
0001DFDC 7000                       		moveq	#0,d0
0001DFDE 4E75                       		rts	
0001DFE0                            ; ===========================================================================
0001DFE0                            @sizes:		;   width, height
0001DFE0 1414                       		dc.b  $14, $14		; $01
0001DFE2 0C14                       		dc.b   $C, $14		; $02
0001DFE4 140C                       		dc.b  $14,  $C		; $03
0001DFE6 0410                       		dc.b	4, $10		; $04
0001DFE8 0C12                       		dc.b   $C, $12		; $05
0001DFEA 1010                       		dc.b  $10, $10		; $06
0001DFEC 0606                       		dc.b	6,   6		; $07
0001DFEE 180C                       		dc.b  $18,  $C		; $08
0001DFF0 0C10                       		dc.b   $C, $10		; $09
0001DFF2 100C                       		dc.b  $10,  $C		; $0A
0001DFF4 0808                       		dc.b	8,   8		; $0B
0001DFF6 1410                       		dc.b  $14, $10		; $0C
0001DFF8 1408                       		dc.b  $14,   8		; $0D
0001DFFA 0E0E                       		dc.b   $E,  $E		; $0E
0001DFFC 1818                       		dc.b  $18, $18		; $0F
0001DFFE 2810                       		dc.b  $28, $10		; $10
0001E000 1018                       		dc.b  $10, $18		; $11
0001E002 0810                       		dc.b	8, $10		; $12
0001E004 2070                       		dc.b  $20, $70		; $13
0001E006 4020                       		dc.b  $40, $20		; $14
0001E008 8020                       		dc.b  $80, $20		; $15
0001E00A 2020                       		dc.b  $20, $20		; $16
0001E00C 0808                       		dc.b	8,   8		; $17
0001E00E 0404                       		dc.b	4,   4		; $18
0001E010 2008                       		dc.b  $20,   8		; $19
0001E012 0C0C                       		dc.b   $C,  $C		; $1A
0001E014 0804                       		dc.b	8,   4		; $1B
0001E016 1804                       		dc.b  $18,   4		; $1C
0001E018 2804                       		dc.b  $28,   4		; $1D
0001E01A 0408                       		dc.b	4,   8		; $1E
0001E01C 0418                       		dc.b	4, $18		; $1F
0001E01E 0428                       		dc.b	4, $28		; $20
0001E020 0420                       		dc.b	4, $20		; $21
0001E022 1818                       		dc.b  $18, $18		; $22
0001E024 0C18                       		dc.b   $C, $18		; $23
0001E026 4808                       		dc.b  $48,   8		; $24
0001E028                            ; ===========================================================================
0001E028                            
0001E028                            @proximity:
0001E028 0240 003F                  		andi.w	#$3F,d0
0001E02C D040                       		add.w	d0,d0
0001E02E 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E032 7200                       		moveq	#0,d1
0001E034 121A                       		move.b	(a2)+,d1
0001E036 3029 0008                  		move.w	obX(a1),d0
0001E03A 9041                       		sub.w	d1,d0
0001E03C 9042                       		sub.w	d2,d0
0001E03E 6400                       		bcc.s	@outsidex	; branch if not touching
0001E040 D241                       		add.w	d1,d1
0001E042 D041                       		add.w	d1,d0
0001E044 6500                       		bcs.s	@withinx	; branch if touching
0001E046 6000 FF8C                  		bra.w	@next
0001E04A                            ; ===========================================================================
0001E04A                            
0001E04A                            @outsidex:
0001E04A 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E04E B044                       		cmp.w	d4,d0
0001E050 6200 FF82                  		bhi.w	@next
0001E054                            
0001E054                            @withinx:
0001E054 7200                       		moveq	#0,d1
0001E056 121A                       		move.b	(a2)+,d1
0001E058 3029 000C                  		move.w	obY(a1),d0
0001E05C 9041                       		sub.w	d1,d0
0001E05E 9043                       		sub.w	d3,d0
0001E060 6400                       		bcc.s	@outsidey	; branch if not touching
0001E062 D241                       		add.w	d1,d1
0001E064 D240                       		add.w	d0,d1
0001E066 6500                       		bcs.s	@withiny	; branch if touching
0001E068 6000 FF6A                  		bra.w	@next
0001E06C                            
0001E06C                            ; ===========================================================================
0001E06C                            
0001E06C                            @outsidey:
0001E06C 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E070 B045                       		cmp.w	d5,d0
0001E072 6200 FF60                  		bhi.w	@next
0001E076                            
0001E076                            @withiny:
0001E076                            	@chktype:
0001E076 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E07C 6600 0000                          	bne	NotGHZReact  ;TIS
0001E080 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E084 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E088 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E08C 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E090 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E094 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E098 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E09C                            NotGHZReact:                      ;TIS
0001E09C 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E0A0 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E0A4 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E0A8 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E0AC 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E0B0 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E0B2 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E0B6                            
0001E0B6                            ; obColType is $40-$7F (powerups)
0001E0B6                            
0001E0B6 1029 0020                  		move.b	obColType(a1),d0
0001E0BA 0200 003F                  		andi.b	#$3F,d0
0001E0BE 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E0C2 6700                       		beq.s	React_Monitor	; if yes, branch
0001E0C4 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E0CA 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E0CE 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E0D2                            
0001E0D2                            	@invincible:
0001E0D2 4E75                       		rts	
0001E0D4                            ; ===========================================================================
0001E0D4                            
0001E0D4                            React_Monitor:
0001E0D4 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E0D8 6A00                       		bpl.s	@movingdown	; if not, branch
0001E0DA                            
0001E0DA 3028 000C                  		move.w	obY(a0),d0
0001E0DE 0440 0010                  		subi.w	#$10,d0
0001E0E2 B069 000C                  		cmp.w	obY(a1),d0
0001E0E6 6500                       		bcs.s	@donothing
0001E0E8 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E0EC 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E0F2 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E0F6 6600                       		bne.s	@donothing
0001E0F8 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E0FC 4E75                       		rts	
0001E0FE                            ; ===========================================================================
0001E0FE                            
0001E0FE                            @movingdown:
0001E0FE 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E104 6600                       		bne.s	@donothing
0001E106 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E10A 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E10E                            
0001E10E                            	@donothing:
0001E10E 4E75                       		rts	
0001E110                            ; ===========================================================================
0001E110                            
0001E110                            React_Enemy:
0001E110 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E114 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E116 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E11C 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E120 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E126 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E12A                            
0001E12A                            	@donthurtsonic:
0001E12A 4A29 0021                  		tst.b	obColProp(a1)
0001E12E 6700                       		beq.s	breakenemy
0001E130                            
0001E130 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E134 4468 0012                  		neg.w	obVelY(a0)
0001E138 E0E8 0010                  		asr	obVelX(a0)
0001E13C E0E8 0012                  		asr	obVelY(a0)
0001E140 137C 0000 0020             		move.b	#0,obColType(a1)
0001E146 5329 0021                  		subq.b	#1,obColProp(a1)
0001E14A 6600                       		bne.s	@flagnotclear
0001E14C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E152                            
0001E152                            	@flagnotclear:
0001E152 4E75                       		rts	
0001E154                            ; ===========================================================================
0001E154                            
0001E154                            breakenemy:
0001E154 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E15A 7000                       		moveq	#0,d0
0001E15C 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E160 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E164 0C40 0006                  		cmpi.w	#6,d0
0001E168 6500                       		bcs.s	@bonusokay
0001E16A 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E16C                            
0001E16C                            	@bonusokay:
0001E16C 3340 003E                  		move.w	d0,$3E(a1)
0001E170 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E174 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E17A 6500                       		bcs.s	@lessthan16	; if not, branch
0001E17C 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E180 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E186                            
0001E186                            	@lessthan16:
0001E186 6100 0000                  		bsr.w	AddPoints
0001E18A 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E18E 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E194 4A68 0012                  		tst.w	obVelY(a0)
0001E198 6B00                       		bmi.s	@bouncedown
0001E19A 3028 000C                  		move.w	obY(a0),d0
0001E19E B069 000C                  		cmp.w	obY(a1),d0
0001E1A2 6400                       		bcc.s	@bounceup
0001E1A4 4468 0012                  		neg.w	obVelY(a0)
0001E1A8 4E75                       		rts	
0001E1AA                            ; ===========================================================================
0001E1AA                            
0001E1AA                            	@bouncedown:
0001E1AA 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E1B0 4E75                       		rts	
0001E1B2                            
0001E1B2                            	@bounceup:
0001E1B2 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E1B8 4E75                       		rts	
0001E1BA                            
0001E1BA 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E1C2                            
0001E1C2                            ; ===========================================================================
0001E1C2                            
0001E1C2                            React_Caterkiller:
0001E1C2 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E1C8                            
0001E1C8                            React_ChkHurt:
0001E1C8 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E1CC 6700                       		beq.s	notinvincible	; if not, branch
0001E1CE                            
0001E1CE                            	isflashing:
0001E1CE 70FF                       		moveq	#-1,d0
0001E1D0 4E75                       		rts	
0001E1D2                            ; ===========================================================================
0001E1D2                            
0001E1D2                            	notinvincible:
0001E1D2 4E71                       		nop	
0001E1D4 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E1D8 66F4                       		bne.s	isflashing	; if yes, branch
0001E1DA 2449                       		movea.l	a1,a2
0001E1DC                            
0001E1DC                            ; End of function ReactToItem
0001E1DC                            ; continue straight to HurtSonic
0001E1DC                            
0001E1DC                            ; ---------------------------------------------------------------------------
0001E1DC                            ; Hurting Sonic	subroutine
0001E1DC                            ; ---------------------------------------------------------------------------
0001E1DC                            
0001E1DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1DC                            
0001E1DC                            
0001E1DC                            HurtSonic:
0001E1DC 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E1E0 6600                       		bne.s	@hasshield	; if yes, branch
0001E1E2 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E1E6 6600                       		bne.s	@hasshield	; if yes, branch
0001E1E8 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E1EC 6600                       		bne.s	@hasshield	; if yes, branch
0001E1EE 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E1F2 6600                       		bne.s	@hasshield	; if yes, branch
0001E1F4 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E1F8 6700 0000                  		beq.w	@norings	; if not, branch
0001E1FC                            
0001E1FC 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
0001E202 6600                       		bne.s	@hasshield
0001E204 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E208 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E20E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E214                            
0001E214                            	@hasshield:
0001E214 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E21A 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E21C 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E220 6700 FFAC                  		beq.w	isflashing
0001E224 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E228 6700 FFA4                  		beq.w	isflashing
0001E22C                            
0001E22C                            	@hasrshield:
0001E22C 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E232 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E234 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E238 6700 FF94                  		beq.w 	isflashing
0001E23C 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E240 6700 FF8C                  		beq.w 	isflashing
0001E244 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E248 6700 FF84                  		beq.w 	isflashing
0001E24C 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E250 6700 FF7C                  		beq.w 	isflashing
0001E254 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E258 6700 FF74                  		beq.w 	isflashing
0001E25C 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E260 6700 FF6C                  		beq.w 	isflashing
0001E264 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E268 6700 FF64                  		beq.w 	isflashing
0001E26C 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E270 6700 FF5C                  		beq.w 	isflashing
0001E274                            
0001E274                            	@hasspshield:
0001E274 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E27A 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E27E 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E282 6700 FF4A                  		beq.w 	isflashing
0001E286 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E28A 6700 FF42                  		beq.w 	isflashing
0001E28E 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001E292 6700 FF3A                  		beq.w 	isflashing
0001E296 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E29A 6700 FF32                  		beq.w 	isflashing
0001E29E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E2A2 6700 FF2A                  		beq.w 	isflashing
0001E2A6 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E2AA 6700 FF22                  		beq.w 	isflashing
0001E2AE 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E2B2 6700 FF1A                  		beq.w 	isflashing
0001E2B6 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E2BA 6700 FF12                  		beq.w 	isflashing
0001E2BE 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E2C2 6700 FF0A                  		beq.w 	isflashing
0001E2C6 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E2CA 6700 FF02                  		beq.w 	isflashing
0001E2CE                            
0001E2CE 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E2D2 6700 FE80                  		beq.w 	breakenemy
0001E2D6 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001E2DA 6700 FE78                  		beq.w 	breakenemy
0001E2DE 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001E2E2 6700 FEEA                  		beq.w 	isflashing
0001E2E6 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E2EA 6700 FE68                  		beq.w 	breakenemy
0001E2EE                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001E2EE                            		;beq.w 	breakenemy
0001E2EE 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E2F2 6700 FE60                  		beq.w 	breakenemy
0001E2F6 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E2FA 6700 FE58                  		beq.w 	breakenemy
0001E2FE                            
0001E2FE                            	@hurtcont:
0001E2FE 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E304                            		;move.b	#0,(v_gshield).w	; remove g shield
0001E304 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E30A                            		
0001E30A 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E310 6700                       		beq.s	@gshieldcheck	;if not, branch
0001E312 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E316                            		
0001E316                            	@gshieldcheck:
0001E316 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001E31C 6700                       		beq.s	@hurtcont2			;if not, branch
0001E31E 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001E322                            		
0001E322                            	@hurtcont2:
0001E322 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E328 4EB9 0001 5FC2             		jsr		Sonic_ResetOnFloor
0001E32E 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E334 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E33A 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E340 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E346 6700                       		beq.s	@isdry		; if not, branch
0001E348                            
0001E348 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E34E 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E354                            
0001E354                            	@isdry:
0001E354 3028 0008                  		move.w	obX(a0),d0
0001E358 B06A 0008                  		cmp.w	obX(a2),d0
0001E35C 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E35E 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E362                            
0001E362                            	@isleft:
0001E362 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E368 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E36E 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E374 317C 0120 0030             		move.w	#$120,$30(a0)
0001E37A 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E37E 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E380 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E384 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E386 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E38C 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E392 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E398 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E39C 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E3A0 6600                       		bne.s	@sound		; if not, branch
0001E3A2 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E3A6 6600                       		bne.s	@sound		; if not, branch
0001E3A8 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E3AC                            
0001E3AC                            	@sound:
0001E3AC 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E3B2 70FF                       		moveq	#-1,d0
0001E3B4 4E75                       		rts	
0001E3B6                            
0001E3B6                            	@hurtelec:
0001E3B6 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E3BC 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E3C2 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E3C6 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E3CA 66E0                       		bne.s	@sound		; if not, branch
0001E3CC 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E3D0 66DA                       		bne.s	@sound		; if not, branch
0001E3D2 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E3D6                            ; ===========================================================================
0001E3D6                            
0001E3D6                            @norings:
0001E3D6 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E3DA 6600 FE38                  		bne.w	@hasshield	; if yes, branch
0001E3DE                            
0001E3DE                            ; ---------------------------------------------------------------------------
0001E3DE                            ; Subroutine to	kill Sonic
0001E3DE                            ; ---------------------------------------------------------------------------
0001E3DE                            
0001E3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3DE                            
0001E3DE                            
0001E3DE                            KillSonic:
0001E3DE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E3E2 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E3E6 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E3EC 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E3F2 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E3F8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E3FE 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001E404 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E40A 4EB9 0001 5FC2             		jsr		Sonic_ResetOnFloor
0001E410 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E416 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E41C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E422 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E428 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E42E 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E432 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E434 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E438 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E43A 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E440 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E446 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E44A 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E44E 6600                       		bne.s	@sound
0001E450 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E454                            
0001E454                            	@sound:
0001E454 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E45A                            
0001E45A                            	@dontdie:
0001E45A 70FF                       		moveq	#-1,d0
0001E45C 4E75                       		rts	
0001E45E                            ; End of function KillSonic
0001E45E                            Kill_Lava:	
0001E45E 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E464 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E46A 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E46E 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001E474                            
0001E474                            
0001E474                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E474                            
0001E474                            
0001E474                            React_Special:
0001E474 1229 0020                  		move.b	obColType(a1),d1
0001E478 0201 003F                  		andi.b	#$3F,d1
0001E47C 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E480 6700                       		beq.s	@caterkiller	; if yes, branch
0001E482 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E486 6700                       		beq.s	@yadrin		; if yes, branch
0001E488 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E48C 6700                       		beq.s	@D7orE1		; if yes, branch
0001E48E 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E492 6700                       		beq.s	@D7orE1		; if yes, branch
0001E494 4E75                       		rts	
0001E496                            ; ===========================================================================
0001E496                            
0001E496                            @caterkiller:
0001E496 6000 FD2A                  		bra.w	React_Caterkiller
0001E49A                            ; ===========================================================================
0001E49A                            
0001E49A                            @yadrin:
0001E49A 9A40                       		sub.w	d0,d5
0001E49C 0C45 0008                  		cmpi.w	#8,d5
0001E4A0 6400                       		bcc.s	@normalenemy
0001E4A2 3029 0008                  		move.w	obX(a1),d0
0001E4A6 5940                       		subq.w	#4,d0
0001E4A8 0829 0000 0022             		btst	#0,obStatus(a1)
0001E4AE 6700                       		beq.s	@noflip
0001E4B0 0440 0010                  		subi.w	#$10,d0
0001E4B4                            
0001E4B4                            	@noflip:
0001E4B4 9042                       		sub.w	d2,d0
0001E4B6 6400                       		bcc.s	@loc_1B13C
0001E4B8 0640 0018                  		addi.w	#$18,d0
0001E4BC 6500                       		bcs.s	@loc_1B140
0001E4BE 6000                       		bra.s	@normalenemy
0001E4C0                            ; ===========================================================================
0001E4C0                            
0001E4C0                            	@loc_1B13C:
0001E4C0 B044                       		cmp.w	d4,d0
0001E4C2 6200                       		bhi.s	@normalenemy
0001E4C4                            
0001E4C4                            	@loc_1B140:
0001E4C4 6000 FD02                  		bra.w	React_ChkHurt
0001E4C8                            ; ===========================================================================
0001E4C8                            
0001E4C8                            	@normalenemy:
0001E4C8 6000 FC46                  		bra.w	React_Enemy
0001E4CC                            ; ===========================================================================
0001E4CC                            
0001E4CC                            @D7orE1:
0001E4CC 5229 0021                  		addq.b	#1,obColProp(a1)
0001E4D0 4E75                       		rts	
0001E4D2                            ; End of function React_Special
0001E4D2                            
0001E4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4D2                            
0001E4D2                            React_ChkWaterTag:
0001E4D2 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E4D8 6600 0000                  		bne	NotWaterTag
0001E4DC 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E4E2                            	NotWaterTag:
0001E4E2 4E75                       		rts
0001E4E4                            
0001E4E4                            React_WaterTag:
0001E4E4 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E4EA 6700 0000                  		beq	SkipWaterTag
0001E4EE 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E4F4                            	SkipWaterTag:
0001E4F4 4E75                       		rts
0001E4F4 4E75                       		rts
0001E4F6                            
0001E4F6                            ; ---------------------------------------------------------------------------
0001E4F6                            ; Subroutine to	show the special stage layout
0001E4F6                            ; ---------------------------------------------------------------------------
0001E4F6                            
0001E4F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4F6                            
0001E4F6                            
0001E4F6                            SS_ShowLayout:
0001E4F6 6100 0000                  		bsr.w	SS_AniWallsRings
0001E4FA 6100 0000                  		bsr.w	SS_AniItems
0001E4FE 3F05                       		move.w	d5,-(sp)
0001E500 43F8 8000                  		lea	($FFFF8000).w,a1
0001E504 1038 F780                  		move.b	(v_ssangle).w,d0
0001E508 0200 00FC                  		andi.b	#$FC,d0
0001E50C 4EB9 0000 3B42             		jsr	(CalcSine).l
0001E512 3800                       		move.w	d0,d4
0001E514 3A01                       		move.w	d1,d5
0001E516 C9FC 0018                  		muls.w	#$18,d4
0001E51A CBFC 0018                  		muls.w	#$18,d5
0001E51E 7400                       		moveq	#0,d2
0001E520 3438 F700                  		move.w	(v_screenposx).w,d2
0001E524 84FC 0018                  		divu.w	#$18,d2
0001E528 4842                       		swap	d2
0001E52A 4442                       		neg.w	d2
0001E52C 0642 FF4C                  		addi.w	#-$B4,d2
0001E530 7600                       		moveq	#0,d3
0001E532 3638 F704                  		move.w	(v_screenposy).w,d3
0001E536 86FC 0018                  		divu.w	#$18,d3
0001E53A 4843                       		swap	d3
0001E53C 4443                       		neg.w	d3
0001E53E 0643 FF4C                  		addi.w	#-$B4,d3
0001E542 3E3C 000F                  		move.w	#$F,d7
0001E546                            
0001E546                            loc_1B19E:
0001E546 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E54A 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E54E 4440                       		neg.w	d0
0001E550 C3C2                       		muls.w	d2,d1
0001E552 C1C3                       		muls.w	d3,d0
0001E554 2C00                       		move.l	d0,d6
0001E556 DC81                       		add.l	d1,d6
0001E558 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E55C C1C2                       		muls.w	d2,d0
0001E55E C3C3                       		muls.w	d3,d1
0001E560 D280                       		add.l	d0,d1
0001E562 2406                       		move.l	d6,d2
0001E564 3C3C 000F                  		move.w	#$F,d6
0001E568                            
0001E568                            loc_1B1C0:
0001E568 2002                       		move.l	d2,d0
0001E56A E080                       		asr.l	#8,d0
0001E56C 32C0                       		move.w	d0,(a1)+
0001E56E 2001                       		move.l	d1,d0
0001E570 E080                       		asr.l	#8,d0
0001E572 32C0                       		move.w	d0,(a1)+
0001E574 D485                       		add.l	d5,d2
0001E576 D284                       		add.l	d4,d1
0001E578 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E57C                            
0001E57C 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E580 0643 0018                  		addi.w	#$18,d3
0001E584 51CF FFC0                  		dbf	d7,loc_1B19E
0001E588                            
0001E588 3A1F                       		move.w	(sp)+,d5
0001E58A 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E590 7000                       		moveq	#0,d0
0001E592 3038 F704                  		move.w	(v_screenposy).w,d0
0001E596 80FC 0018                  		divu.w	#$18,d0
0001E59A C0FC 0080                  		mulu.w	#$80,d0
0001E59E D1C0                       		adda.l	d0,a0
0001E5A0 7000                       		moveq	#0,d0
0001E5A2 3038 F700                  		move.w	(v_screenposx).w,d0
0001E5A6 80FC 0018                  		divu.w	#$18,d0
0001E5AA D0C0                       		adda.w	d0,a0
0001E5AC 49F8 8000                  		lea	($FFFF8000).w,a4
0001E5B0 3E3C 000F                  		move.w	#$F,d7
0001E5B4                            
0001E5B4                            loc_1B20C:
0001E5B4 3C3C 000F                  		move.w	#$F,d6
0001E5B8                            
0001E5B8                            loc_1B210:
0001E5B8 7000                       		moveq	#0,d0
0001E5BA 1018                       		move.b	(a0)+,d0
0001E5BC 6700                       		beq.s	loc_1B268
0001E5BE 0C00 004E                  		cmpi.b	#$4E,d0
0001E5C2 6200                       		bhi.s	loc_1B268
0001E5C4 3614                       		move.w	(a4),d3
0001E5C6 0643 0120                  		addi.w	#$120,d3
0001E5CA 0C43 0070                  		cmpi.w	#$70,d3
0001E5CE 6500                       		blo.s	loc_1B268
0001E5D0 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E5D4 6400                       		bhs.s	loc_1B268
0001E5D6 342C 0002                  		move.w	2(a4),d2
0001E5DA 0642 00F0                  		addi.w	#$F0,d2
0001E5DE 0C42 0070                  		cmpi.w	#$70,d2
0001E5E2 6500                       		blo.s	loc_1B268
0001E5E4 0C42 0170                  		cmpi.w	#$170,d2
0001E5E8 6400                       		bhs.s	loc_1B268
0001E5EA 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E5F0 E748                       		lsl.w	#3,d0
0001E5F2 4BF5 0000                  		lea	(a5,d0.w),a5
0001E5F6 225D                       		movea.l	(a5)+,a1
0001E5F8 321D                       		move.w	(a5)+,d1
0001E5FA D241                       		add.w	d1,d1
0001E5FC D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E600 365D                       		movea.w	(a5)+,a3
0001E602 7200                       		moveq	#0,d1
0001E604 1219                       		move.b	(a1)+,d1
0001E606 5301                       		subq.b	#1,d1
0001E608 6B00                       		bmi.s	loc_1B268
0001E60A 4EB9 0000 F6AC             		jsr	(sub_D762).l
0001E610                            
0001E610                            loc_1B268:
0001E610 584C                       		addq.w	#4,a4
0001E612 51CE FFA4                  		dbf	d6,loc_1B210
0001E616                            
0001E616 41E8 0070                  		lea	$70(a0),a0
0001E61A 51CF FF98                  		dbf	d7,loc_1B20C
0001E61E                            
0001E61E 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E622 0C05 0050                  		cmpi.b	#$50,d5
0001E626 6700                       		beq.s	loc_1B288
0001E628 24BC 0000 0000             		move.l	#0,(a2)
0001E62E 4E75                       		rts	
0001E630                            ; ===========================================================================
0001E630                            
0001E630                            loc_1B288:
0001E630 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E636 4E75                       		rts	
0001E638                            ; End of function SS_ShowLayout
0001E638                            
0001E638                            ; ---------------------------------------------------------------------------
0001E638                            ; Subroutine to	animate	walls and rings	in the special stage
0001E638                            ; ---------------------------------------------------------------------------
0001E638                            
0001E638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E638                            
0001E638                            
0001E638                            SS_AniWallsRings:
0001E638 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E63E 7000                       		moveq	#0,d0
0001E640 1038 F780                  		move.b	(v_ssangle).w,d0
0001E644 E408                       		lsr.b	#2,d0
0001E646 0240 000F                  		andi.w	#$F,d0
0001E64A 7223                       		moveq	#$23,d1
0001E64C                            
0001E64C                            loc_1B2A4:
0001E64C 3280                       		move.w	d0,(a1)
0001E64E 5049                       		addq.w	#8,a1
0001E650 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E654                            
0001E654 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E65A 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E65E 6A00                       		bpl.s	loc_1B2C8
0001E660 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E666 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E66A 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E670                            
0001E670                            loc_1B2C8:
0001E670 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E676 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E67A 6A00                       		bpl.s	loc_1B2E4
0001E67C 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E682 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E686 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E68C                            
0001E68C                            loc_1B2E4:
0001E68C 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E690 1340 0138                  		move.b	d0,$138(a1)
0001E694 1340 0160                  		move.b	d0,$160(a1)
0001E698 1340 0148                  		move.b	d0,$148(a1)
0001E69C 1340 0150                  		move.b	d0,$150(a1)
0001E6A0 1340 01D8                  		move.b	d0,$1D8(a1)
0001E6A4 1340 01E0                  		move.b	d0,$1E0(a1)
0001E6A8 1340 01E8                  		move.b	d0,$1E8(a1)
0001E6AC 1340 01F0                  		move.b	d0,$1F0(a1)
0001E6B0 1340 01F8                  		move.b	d0,$1F8(a1)
0001E6B4 1340 0200                  		move.b	d0,$200(a1)
0001E6B8 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E6BC 6A00                       		bpl.s	loc_1B326
0001E6BE 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E6C4 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E6C8 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E6CE                            
0001E6CE                            loc_1B326:
0001E6CE 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E6D2 1340 0168                  		move.b	d0,$168(a1)
0001E6D6 1340 0170                  		move.b	d0,$170(a1)
0001E6DA 1340 0178                  		move.b	d0,$178(a1)
0001E6DE 1340 0180                  		move.b	d0,$180(a1)
0001E6E2 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E6E6 6A00                       		bpl.s	loc_1B350
0001E6E8 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E6EE 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E6F2 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E6F8                            
0001E6F8                            loc_1B350:
0001E6F8 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E6FE 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E704 7000                       		moveq	#0,d0
0001E706 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E70A D040                       		add.w	d0,d0
0001E70C 41F0 0000                  		lea	(a0,d0.w),a0
0001E710 3290                       		move.w	(a0),(a1)
0001E712 3368 0002 0008             		move.w	2(a0),8(a1)
0001E718 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E71E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E724 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E72A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E730 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E736 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E73C D0FC 0020                  		adda.w	#$20,a0
0001E740 D2FC 0048                  		adda.w	#$48,a1
0001E744 3290                       		move.w	(a0),(a1)
0001E746 3368 0002 0008             		move.w	2(a0),8(a1)
0001E74C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E752 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E758 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E75E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E764 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E76A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E770 D0FC 0020                  		adda.w	#$20,a0
0001E774 D2FC 0048                  		adda.w	#$48,a1
0001E778 3290                       		move.w	(a0),(a1)
0001E77A 3368 0002 0008             		move.w	2(a0),8(a1)
0001E780 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E786 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E78C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E792 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E798 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E79E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E7A4 D0FC 0020                  		adda.w	#$20,a0
0001E7A8 D2FC 0048                  		adda.w	#$48,a1
0001E7AC 3290                       		move.w	(a0),(a1)
0001E7AE 3368 0002 0008             		move.w	2(a0),8(a1)
0001E7B4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E7BA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E7C0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E7C6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E7CC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E7D2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E7D8 D0FC 0020                  		adda.w	#$20,a0
0001E7DC D2FC 0048                  		adda.w	#$48,a1
0001E7E0 4E75                       		rts	
0001E7E2                            ; End of function SS_AniWallsRings
0001E7E2                            
0001E7E2                            ; ===========================================================================
0001E7E2 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E7F2 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E802 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E812 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E822 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E832 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E842 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E852 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E862                            ; ---------------------------------------------------------------------------
0001E862                            ; Subroutine to	remove items when you collect them in the special stage
0001E862                            ; ---------------------------------------------------------------------------
0001E862                            
0001E862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E862                            
0001E862                            
0001E862                            SS_RemoveCollectedItem:
0001E862 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E868 303C 001F                  		move.w	#$1F,d0
0001E86C                            
0001E86C                            loc_1B4C4:
0001E86C 4A12                       		tst.b	(a2)
0001E86E 6700                       		beq.s	locret_1B4CE
0001E870 504A                       		addq.w	#8,a2
0001E872 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E876                            
0001E876                            locret_1B4CE:
0001E876 4E75                       		rts	
0001E878                            ; End of function SS_RemoveCollectedItem
0001E878                            
0001E878                            ; ---------------------------------------------------------------------------
0001E878                            ; Subroutine to	animate	special	stage items when you touch them
0001E878                            ; ---------------------------------------------------------------------------
0001E878                            
0001E878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E878                            
0001E878                            
0001E878                            SS_AniItems:
0001E878 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E87E 3E3C 001F                  		move.w	#$1F,d7
0001E882                            
0001E882                            loc_1B4DA:
0001E882 7000                       		moveq	#0,d0
0001E884 1010                       		move.b	(a0),d0
0001E886 6700                       		beq.s	loc_1B4E8
0001E888 E548                       		lsl.w	#2,d0
0001E88A 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E88E 4E91                       		jsr	(a1)
0001E890                            
0001E890                            loc_1B4E8:
0001E890 5048                       		addq.w	#8,a0
0001E892                            
0001E892                            loc_1B4EA:
0001E892 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E896                            
0001E896 4E75                       		rts	
0001E898                            ; End of function SS_AniItems
0001E898                            
0001E898                            ; ===========================================================================
0001E898 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E89C 0000 0000                  		dc.l SS_AniBumper
0001E8A0 0000 0000                  		dc.l SS_Ani1Up
0001E8A4 0000 0000                  		dc.l SS_AniReverse
0001E8A8 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E8AC 0000 0000                  		dc.l SS_AniGlassBlock
0001E8B0                            ; ===========================================================================
0001E8B0                            
0001E8B0                            SS_AniRingSparks:
0001E8B0 5328 0002                  		subq.b	#1,2(a0)
0001E8B4 6A00                       		bpl.s	locret_1B530
0001E8B6 117C 0005 0002             		move.b	#5,2(a0)
0001E8BC 7000                       		moveq	#0,d0
0001E8BE 1028 0003                  		move.b	3(a0),d0
0001E8C2 5228 0003                  		addq.b	#1,3(a0)
0001E8C6 2268 0004                  		movea.l	4(a0),a1
0001E8CA 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E8CE 1280                       		move.b	d0,(a1)
0001E8D0 6600                       		bne.s	locret_1B530
0001E8D2 4290                       		clr.l	(a0)
0001E8D4 42A8 0004                  		clr.l	4(a0)
0001E8D8                            
0001E8D8                            locret_1B530:
0001E8D8 4E75                       		rts	
0001E8DA                            ; ===========================================================================
0001E8DA 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E8E0                            ; ===========================================================================
0001E8E0                            
0001E8E0                            SS_AniBumper:
0001E8E0 5328 0002                  		subq.b	#1,2(a0)
0001E8E4 6A00                       		bpl.s	locret_1B566
0001E8E6 117C 0007 0002             		move.b	#7,2(a0)
0001E8EC 7000                       		moveq	#0,d0
0001E8EE 1028 0003                  		move.b	3(a0),d0
0001E8F2 5228 0003                  		addq.b	#1,3(a0)
0001E8F6 2268 0004                  		movea.l	4(a0),a1
0001E8FA 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E8FE 6600                       		bne.s	loc_1B564
0001E900 4290                       		clr.l	(a0)
0001E902 42A8 0004                  		clr.l	4(a0)
0001E906 12BC 0025                  		move.b	#$25,(a1)
0001E90A 4E75                       		rts	
0001E90C                            ; ===========================================================================
0001E90C                            
0001E90C                            loc_1B564:
0001E90C 1280                       		move.b	d0,(a1)
0001E90E                            
0001E90E                            locret_1B566:
0001E90E 4E75                       		rts	
0001E910                            ; ===========================================================================
0001E910 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E916                            ; ===========================================================================
0001E916                            
0001E916                            SS_Ani1Up:
0001E916 5328 0002                  		subq.b	#1,2(a0)
0001E91A 6A00                       		bpl.s	locret_1B596
0001E91C 117C 0005 0002             		move.b	#5,2(a0)
0001E922 7000                       		moveq	#0,d0
0001E924 1028 0003                  		move.b	3(a0),d0
0001E928 5228 0003                  		addq.b	#1,3(a0)
0001E92C 2268 0004                  		movea.l	4(a0),a1
0001E930 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E934 1280                       		move.b	d0,(a1)
0001E936 6600                       		bne.s	locret_1B596
0001E938 4290                       		clr.l	(a0)
0001E93A 42A8 0004                  		clr.l	4(a0)
0001E93E                            
0001E93E                            locret_1B596:
0001E93E 4E75                       		rts	
0001E940                            ; ===========================================================================
0001E940 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E946                            ; ===========================================================================
0001E946                            
0001E946                            SS_AniReverse:
0001E946 5328 0002                  		subq.b	#1,2(a0)
0001E94A 6A00                       		bpl.s	locret_1B5CC
0001E94C 117C 0007 0002             		move.b	#7,2(a0)
0001E952 7000                       		moveq	#0,d0
0001E954 1028 0003                  		move.b	3(a0),d0
0001E958 5228 0003                  		addq.b	#1,3(a0)
0001E95C 2268 0004                  		movea.l	4(a0),a1
0001E960 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E964 6600                       		bne.s	loc_1B5CA
0001E966 4290                       		clr.l	(a0)
0001E968 42A8 0004                  		clr.l	4(a0)
0001E96C 12BC 002B                  		move.b	#$2B,(a1)
0001E970 4E75                       		rts	
0001E972                            ; ===========================================================================
0001E972                            
0001E972                            loc_1B5CA:
0001E972 1280                       		move.b	d0,(a1)
0001E974                            
0001E974                            locret_1B5CC:
0001E974 4E75                       		rts	
0001E976                            ; ===========================================================================
0001E976 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E97C                            ; ===========================================================================
0001E97C                            
0001E97C                            SS_AniEmeraldSparks:
0001E97C 5328 0002                  		subq.b	#1,2(a0)
0001E980 6A00                       		bpl.s	locret_1B60C
0001E982 117C 0005 0002             		move.b	#5,2(a0)
0001E988 7000                       		moveq	#0,d0
0001E98A 1028 0003                  		move.b	3(a0),d0
0001E98E 5228 0003                  		addq.b	#1,3(a0)
0001E992 2268 0004                  		movea.l	4(a0),a1
0001E996 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E99A 1280                       		move.b	d0,(a1)
0001E99C 6600                       		bne.s	locret_1B60C
0001E99E 4290                       		clr.l	(a0)
0001E9A0 42A8 0004                  		clr.l	4(a0)
0001E9A4 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E9B4                            
0001E9B4                            locret_1B60C:
0001E9B4 4E75                       		rts	
0001E9B6                            ; ===========================================================================
0001E9B6 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001E9BC                            ; ===========================================================================
0001E9BC                            
0001E9BC                            SS_AniGlassBlock:
0001E9BC 5328 0002                  		subq.b	#1,2(a0)
0001E9C0 6A00                       		bpl.s	locret_1B640
0001E9C2 117C 0001 0002             		move.b	#1,2(a0)
0001E9C8 7000                       		moveq	#0,d0
0001E9CA 1028 0003                  		move.b	3(a0),d0
0001E9CE 5228 0003                  		addq.b	#1,3(a0)
0001E9D2 2268 0004                  		movea.l	4(a0),a1
0001E9D6 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001E9DA 1280                       		move.b	d0,(a1)
0001E9DC 6600                       		bne.s	locret_1B640
0001E9DE 12A8 0004                  		move.b	4(a0),(a1)
0001E9E2 4290                       		clr.l	(a0)
0001E9E4 42A8 0004                  		clr.l	4(a0)
0001E9E8                            
0001E9E8                            locret_1B640:
0001E9E8 4E75                       		rts	
0001E9EA                            ; ===========================================================================
0001E9EA 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001E9F4                            
0001E9F4                            ; ---------------------------------------------------------------------------
0001E9F4                            ; Special stage	layout pointers
0001E9F4                            ; ---------------------------------------------------------------------------
0001E9F4                            SS_LayoutIndex:
0001E9F4 0000 0000                  		dc.l SS_1
0001E9F8 0000 0000                  		dc.l SS_2
0001E9FC 0000 0000                  		dc.l SS_3
0001EA00 0000 0000                  		dc.l SS_4
0001EA04 0000 0000                  		dc.l SS_5
0001EA08 0000 0000                  		dc.l SS_6
0001EA0C                            		even
0001EA0C                            
0001EA0C                            ; ---------------------------------------------------------------------------
0001EA0C                            ; Special stage start locations
0001EA0C                            ; ---------------------------------------------------------------------------
0001EA0C                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EA0C                            ; ---------------------------------------------------------------------------
0001EA0C                            ; Special stage start locations
0001EA0C                            ; ---------------------------------------------------------------------------
0001EA0C                            
0001EA0C                            		incbin	"startpos\ss1.bin"
0001EA10                            		incbin	"startpos\ss2.bin"
0001EA14                            		incbin	"startpos\ss3.bin"
0001EA18                            		incbin	"startpos\ss4.bin"
0001EA1C                            		incbin	"startpos\ss5.bin"
0001EA20                            		incbin	"startpos\ss6.bin"
0001EA24                            		even
0001EA24                            		even
0001EA24                            
0001EA24                            ; ---------------------------------------------------------------------------
0001EA24                            ; Subroutine to	load special stage layout
0001EA24                            ; ---------------------------------------------------------------------------
0001EA24                            
0001EA24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA24                            
0001EA24                            
0001EA24                            SS_Load:
0001EA24 7000                       		moveq	#0,d0
0001EA26 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EA2A 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EA2E 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EA34 6500                       		blo.s	SS_ChkEmldNum
0001EA36 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EA3C                            
0001EA3C                            SS_ChkEmldNum:
0001EA3C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EA42 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EA44 7200                       		moveq	#0,d1
0001EA46 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EA4A 5301                       		subq.b	#1,d1
0001EA4C 6500                       		blo.s	SS_LoadData
0001EA4E 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EA52                            
0001EA52                            SS_ChkEmldLoop:	
0001EA52 B033 1000                  		cmp.b	(a3,d1.w),d0
0001EA56 6600                       		bne.s	SS_ChkEmldRepeat
0001EA58 60CA                       		bra.s	SS_Load
0001EA5A                            ; ===========================================================================
0001EA5A                            
0001EA5A                            SS_ChkEmldRepeat:
0001EA5A 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EA5E                            
0001EA5E                            SS_LoadData:
0001EA5E E548                       		lsl.w	#2,d0
0001EA60 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EA64 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EA68 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EA6C 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EA70 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EA76 303C 0000                  		move.w	#0,d0
0001EA7A 4EB9 0000 18D8             		jsr	(EniDec).l
0001EA80 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EA86 303C 0FFF                  		move.w	#$FFF,d0
0001EA8A                            
0001EA8A                            SS_ClrRAM3:
0001EA8A 4299                       		clr.l	(a1)+
0001EA8C 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EA90                            
0001EA90 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EA96 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EA9C 723F                       		moveq	#$3F,d1
0001EA9E                            
0001EA9E                            loc_1B6F6:
0001EA9E 743F                       		moveq	#$3F,d2
0001EAA0                            
0001EAA0                            loc_1B6F8:
0001EAA0 12D8                       		move.b	(a0)+,(a1)+
0001EAA2 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EAA6                            
0001EAA6 43E9 0040                  		lea	$40(a1),a1
0001EAAA 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EAAE                            
0001EAAE 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EAB4 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EABA 724D                       		moveq	#$4D,d1
0001EABC                            
0001EABC                            loc_1B714:
0001EABC 22D8                       		move.l	(a0)+,(a1)+
0001EABE 32FC 0000                  		move.w	#0,(a1)+
0001EAC2 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EAC8 32D8                       		move.w	(a0)+,(a1)+
0001EACA 51C9 FFF0                  		dbf	d1,loc_1B714
0001EACE                            
0001EACE 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EAD4 323C 003F                  		move.w	#$3F,d1
0001EAD8                            
0001EAD8                            loc_1B730:
0001EAD8                            
0001EAD8 4299                       		clr.l	(a1)+
0001EADA 51C9 FFFC                  		dbf	d1,loc_1B730
0001EADE                            
0001EADE 4E75                       		rts	
0001EAE0                            ; End of function SS_Load
0001EAE0                            
0001EAE0                            ; ===========================================================================
0001EAE0                            
0001EAE0                            SS_MapIndex:
0001EAE0                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EAE0                            ; ---------------------------------------------------------------------------
0001EAE0                            ; Special stage	mappings and VRAM pointers
0001EAE0                            ; ---------------------------------------------------------------------------
0001EAE0 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EAE4 0142                       	dc.w $142		; VRAM setting
0001EAE6 0000 0000                  	dc.l Map_SSWalls
0001EAEA 0142                       	dc.w $142
0001EAEC 0000 0000                  	dc.l Map_SSWalls
0001EAF0 0142                       	dc.w $142
0001EAF2 0000 0000                  	dc.l Map_SSWalls
0001EAF6 0142                       	dc.w $142
0001EAF8 0000 0000                  	dc.l Map_SSWalls
0001EAFC 0142                       	dc.w $142
0001EAFE 0000 0000                  	dc.l Map_SSWalls
0001EB02 0142                       	dc.w $142
0001EB04 0000 0000                  	dc.l Map_SSWalls
0001EB08 0142                       	dc.w $142
0001EB0A 0000 0000                  	dc.l Map_SSWalls
0001EB0E 0142                       	dc.w $142
0001EB10 0000 0000                  	dc.l Map_SSWalls
0001EB14 0142                       	dc.w $142
0001EB16 0000 0000                  	dc.l Map_SSWalls
0001EB1A 2142                       	dc.w $2142
0001EB1C 0000 0000                  	dc.l Map_SSWalls
0001EB20 2142                       	dc.w $2142
0001EB22 0000 0000                  	dc.l Map_SSWalls
0001EB26 2142                       	dc.w $2142
0001EB28 0000 0000                  	dc.l Map_SSWalls
0001EB2C 2142                       	dc.w $2142
0001EB2E 0000 0000                  	dc.l Map_SSWalls
0001EB32 2142                       	dc.w $2142
0001EB34 0000 0000                  	dc.l Map_SSWalls
0001EB38 2142                       	dc.w $2142
0001EB3A 0000 0000                  	dc.l Map_SSWalls
0001EB3E 2142                       	dc.w $2142
0001EB40 0000 0000                  	dc.l Map_SSWalls
0001EB44 2142                       	dc.w $2142
0001EB46 0000 0000                  	dc.l Map_SSWalls
0001EB4A 2142                       	dc.w $2142
0001EB4C 0000 0000                  	dc.l Map_SSWalls
0001EB50 4142                       	dc.w $4142
0001EB52 0000 0000                  	dc.l Map_SSWalls
0001EB56 4142                       	dc.w $4142
0001EB58 0000 0000                  	dc.l Map_SSWalls
0001EB5C 4142                       	dc.w $4142
0001EB5E 0000 0000                  	dc.l Map_SSWalls
0001EB62 4142                       	dc.w $4142
0001EB64 0000 0000                  	dc.l Map_SSWalls
0001EB68 4142                       	dc.w $4142
0001EB6A 0000 0000                  	dc.l Map_SSWalls
0001EB6E 4142                       	dc.w $4142
0001EB70 0000 0000                  	dc.l Map_SSWalls
0001EB74 4142                       	dc.w $4142
0001EB76 0000 0000                  	dc.l Map_SSWalls
0001EB7A 4142                       	dc.w $4142
0001EB7C 0000 0000                  	dc.l Map_SSWalls
0001EB80 4142                       	dc.w $4142
0001EB82 0000 0000                  	dc.l Map_SSWalls
0001EB86 6142                       	dc.w $6142
0001EB88 0000 0000                  	dc.l Map_SSWalls
0001EB8C 6142                       	dc.w $6142
0001EB8E 0000 0000                  	dc.l Map_SSWalls
0001EB92 6142                       	dc.w $6142
0001EB94 0000 0000                  	dc.l Map_SSWalls
0001EB98 6142                       	dc.w $6142
0001EB9A 0000 0000                  	dc.l Map_SSWalls
0001EB9E 6142                       	dc.w $6142
0001EBA0 0000 0000                  	dc.l Map_SSWalls
0001EBA4 6142                       	dc.w $6142
0001EBA6 0000 0000                  	dc.l Map_SSWalls
0001EBAA 6142                       	dc.w $6142
0001EBAC 0000 0000                  	dc.l Map_SSWalls
0001EBB0 6142                       	dc.w $6142
0001EBB2 0000 0000                  	dc.l Map_SSWalls
0001EBB6 6142                       	dc.w $6142
0001EBB8 0001 0A6C                  	dc.l Map_Bump
0001EBBC 023B                       	dc.w $23B
0001EBBE 0000 0000                  	dc.l Map_SS_R
0001EBC2 0570                       	dc.w $570
0001EBC4 0000 0000                  	dc.l Map_SS_R
0001EBC8 0251                       	dc.w $251
0001EBCA 0000 0000                  	dc.l Map_SS_R
0001EBCE 0370                       	dc.w $370
0001EBD0 0000 0000                  	dc.l Map_SS_Up
0001EBD4 0263                       	dc.w $263
0001EBD6 0000 0000                  	dc.l Map_SS_Down
0001EBDA 0263                       	dc.w $263
0001EBDC 0000 0000                  	dc.l Map_SS_R
0001EBE0 22F0                       	dc.w $22F0
0001EBE2 0000 0000                  	dc.l Map_SS_Glass
0001EBE6 0470                       	dc.w $470
0001EBE8 0000 0000                  	dc.l Map_SS_Glass
0001EBEC 05F0                       	dc.w $5F0
0001EBEE 0000 0000                  	dc.l Map_SS_Glass
0001EBF2 65F0                       	dc.w $65F0
0001EBF4 0000 0000                  	dc.l Map_SS_Glass
0001EBF8 25F0                       	dc.w $25F0
0001EBFA 0000 0000                  	dc.l Map_SS_Glass
0001EBFE 45F0                       	dc.w $45F0
0001EC00 0000 0000                  	dc.l Map_SS_R
0001EC04 02F0                       	dc.w $2F0
0001EC06 0101 0A6C                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EC0A 023B                       	dc.w $23B
0001EC0C 0201 0A6C                  	dc.l Map_Bump+$2000000
0001EC10 023B                       	dc.w $23B
0001EC12 0000 0000                  	dc.l Map_SS_R
0001EC16 0797                       	dc.w $797
0001EC18 0000 0000                  	dc.l Map_SS_R
0001EC1C 07A0                       	dc.w $7A0
0001EC1E 0000 0000                  	dc.l Map_SS_R
0001EC22 07A9                       	dc.w $7A9
0001EC24 0000 0000                  	dc.l Map_SS_R
0001EC28 0797                       	dc.w $797
0001EC2A 0000 0000                  	dc.l Map_SS_R
0001EC2E 07A0                       	dc.w $7A0
0001EC30 0000 0000                  	dc.l Map_SS_R
0001EC34 07A9                       	dc.w $7A9
0001EC36 0000 BA5A                  	dc.l Map_Ring
0001EC3A 2798                       	dc.w $2798
0001EC3C 0000 0000                  	dc.l Map_SS_Chaos3
0001EC40 0770                       	dc.w $770
0001EC42 0000 0000                  	dc.l Map_SS_Chaos3
0001EC46 2770                       	dc.w $2770
0001EC48 0000 0000                  	dc.l Map_SS_Chaos3
0001EC4C 4770                       	dc.w $4770
0001EC4E 0000 0000                  	dc.l Map_SS_Chaos3
0001EC52 6770                       	dc.w $6770
0001EC54 0000 0000                  	dc.l Map_SS_Chaos1
0001EC58 0770                       	dc.w $770
0001EC5A 0000 0000                  	dc.l Map_SS_Chaos2
0001EC5E 0770                       	dc.w $770
0001EC60 0000 0000                  	dc.l Map_SS_R
0001EC64 04F0                       	dc.w $4F0
0001EC66 0400 BA5A                  	dc.l Map_Ring+$4000000
0001EC6A 2798                       	dc.w $2798
0001EC6C 0500 BA5A                  	dc.l Map_Ring+$5000000
0001EC70 2798                       	dc.w $2798
0001EC72 0600 BA5A                  	dc.l Map_Ring+$6000000
0001EC76 2798                       	dc.w $2798
0001EC78 0700 BA5A                  	dc.l Map_Ring+$7000000
0001EC7C 2798                       	dc.w $2798
0001EC7E 0000 0000                  	dc.l Map_SS_Glass
0001EC82 23F0                       	dc.w $23F0
0001EC84 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EC88 23F0                       	dc.w $23F0
0001EC8A 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EC8E 23F0                       	dc.w $23F0
0001EC90 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EC94 23F0                       	dc.w $23F0
0001EC96 0000 0000                  	dc.l Map_SS_R+$2000000
0001EC9A 04F0                       	dc.w $4F0
0001EC9C 0000 0000                  	dc.l Map_SS_Glass
0001ECA0 05F0                       	dc.w $5F0
0001ECA2 0000 0000                  	dc.l Map_SS_Glass
0001ECA6 65F0                       	dc.w $65F0
0001ECA8 0000 0000                  	dc.l Map_SS_Glass
0001ECAC 25F0                       	dc.w $25F0
0001ECAE 0000 0000                  	dc.l Map_SS_Glass
0001ECB2 45F0                       	dc.w $45F0
0001ECB2 45F0                       	dc.w $45F0
0001ECB4                            
0001ECB4                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001ECB4                            ; ---------------------------------------------------------------------------
0001ECB4                            ; Sprite mappings - special stage "R" block
0001ECB4                            ; ---------------------------------------------------------------------------
0001ECB4                            Map_SS_R_internal:
0001ECB4 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001ECB6 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001ECB8 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001ECBA 01                         byte_1B912:	dc.b 1
0001ECBB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ECC0 01                         byte_1B918:	dc.b 1
0001ECC1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001ECC6 00                         byte_1B91E:	dc.b 0
0001ECC8 00                         		even
0001ECC8 00                         		even
0001ECC8                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001ECC8                            ; ---------------------------------------------------------------------------
0001ECC8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001ECC8                            ; ---------------------------------------------------------------------------
0001ECC8                            Map_SS_Glass_internal:
0001ECC8 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001ECCA 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001ECCC 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001ECCE 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001ECD0 01                         byte_1B928:	dc.b 1
0001ECD1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ECD6 01                         byte_1B92E:	dc.b 1
0001ECD7 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001ECDC 01                         byte_1B934:	dc.b 1
0001ECDD F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001ECE2 01                         byte_1B93A:	dc.b 1
0001ECE3 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001ECE8                            		even
0001ECE8                            		even
0001ECE8                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001ECE8                            ; ---------------------------------------------------------------------------
0001ECE8                            ; Sprite mappings - special stage "UP" block
0001ECE8                            ; ---------------------------------------------------------------------------
0001ECE8                            Map_SS_Up_internal:
0001ECE8 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001ECEA 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001ECEC 01                         byte_1B944:	dc.b 1
0001ECED F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ECF2 01                         byte_1B94A:	dc.b 1
0001ECF3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001ECF8                            		even
0001ECF8                            		even
0001ECF8                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001ECF8                            ; ---------------------------------------------------------------------------
0001ECF8                            ; Sprite mappings - special stage "DOWN" block
0001ECF8                            ; ---------------------------------------------------------------------------
0001ECF8                            Map_SS_Down_internal:
0001ECF8 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001ECFA 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001ECFC 01                         byte_1B954:	dc.b 1
0001ECFD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001ED02 01                         byte_1B95A:	dc.b 1
0001ED03 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001ED08                            		even
0001ED08                            		even
0001ED08                            		include	"_maps\SS Chaos Emeralds.asm"
0001ED08                            ; ---------------------------------------------------------------------------
0001ED08                            ; Sprite mappings - special stage chaos	emeralds
0001ED08                            ; ---------------------------------------------------------------------------
0001ED08 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001ED0A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001ED0C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001ED0E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001ED10 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001ED12 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001ED14 01                         byte_1B96C:	dc.b 1
0001ED15 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001ED1A 01                         byte_1B972:	dc.b 1
0001ED1B F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001ED20 01                         byte_1B978:	dc.b 1
0001ED21 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001ED26 01                         byte_1B97E:	dc.b 1
0001ED27 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001ED2C                            		even
0001ED2C                            		even
0001ED2C                            
0001ED2C                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001ED2C                            ; ---------------------------------------------------------------------------
0001ED2C                            ; Object 09 - Sonic (special stage)
0001ED2C                            ; ---------------------------------------------------------------------------
0001ED2C                            
0001ED2C                            SonicSpecial:
0001ED2C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001ED30 6700                       		beq.s	Obj09_Normal	; if not, branch
0001ED32 6100 0000                  		bsr.w	SS_FixCamera
0001ED36 6000 0000                  		bra.w	DebugMode
0001ED3A                            ; ===========================================================================
0001ED3A                            
0001ED3A                            Obj09_Normal:
0001ED3A 7000                       		moveq	#0,d0
0001ED3C 1028 0024                  		move.b	obRoutine(a0),d0
0001ED40 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001ED44 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001ED48                            ; ===========================================================================
0001ED48 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001ED4A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001ED4C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001ED4E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001ED50                            ; ===========================================================================
0001ED50                            
0001ED50                            Obj09_Main:	; Routine 0
0001ED50 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ED54 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001ED5A 117C 0007 0017             		move.b	#7,obWidth(a0)
0001ED60 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001ED68 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001ED6E 117C 0004 0001             		move.b	#4,obRender(a0)
0001ED74 317C 0000 0018             		move.w	#0,obPriority(a0)
0001ED7A 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001ED80 08E8 0002 0022             		bset	#2,obStatus(a0)
0001ED86 08E8 0001 0022             		bset	#1,obStatus(a0)
0001ED8C                            
0001ED8C                            Obj09_ChkDebug:	; Routine 2
0001ED8C 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001ED90 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ED92 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001ED98 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ED9A 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EDA0                            
0001EDA0                            Obj09_NoDebug:
0001EDA0 117C 0000 0030             		move.b	#0,$30(a0)
0001EDA6 7000                       		moveq	#0,d0
0001EDA8 1028 0022                  		move.b	obStatus(a0),d0
0001EDAC 0240 0002                  		andi.w	#2,d0
0001EDB0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EDB4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EDB8 4EB9 0001 6594             		jsr	(Sonic_LoadGfx).l
0001EDBE 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001EDC4                            ; ===========================================================================
0001EDC4 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EDC6 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EDC8                            ; ===========================================================================
0001EDC8                            
0001EDC8                            Obj09_OnWall:
0001EDC8 6100 0000                  		bsr.w	Obj09_Jump
0001EDCC 6100 0000                  		bsr.w	Obj09_Move
0001EDD0 6100 0000                  		bsr.w	Obj09_Fall
0001EDD4 6000                       		bra.s	Obj09_Display
0001EDD6                            ; ===========================================================================
0001EDD6                            
0001EDD6                            Obj09_InAir:
0001EDD6 6100 0000                  		bsr.w	nullsub_2
0001EDDA 6100 0000                  		bsr.w	Obj09_Move
0001EDDE 6100 0000                  		bsr.w	Obj09_Fall
0001EDE2                            
0001EDE2                            Obj09_Display:
0001EDE2 6100 0000                  		bsr.w	Obj09_ChkItems
0001EDE6 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EDEA 4EB9 0000 F426             		jsr	(SpeedToPos).l
0001EDF0 6100 0000                  		bsr.w	SS_FixCamera
0001EDF4 3038 F780                  		move.w	(v_ssangle).w,d0
0001EDF8 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EDFC 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EE00 4EB9 0001 61DC             		jsr	(Sonic_Animate).l
0001EE06 4E75                       		rts	
0001EE08                            
0001EE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE08                            
0001EE08                            
0001EE08                            Obj09_Move:
0001EE08 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EE0E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EE10 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EE14                            
0001EE14                            Obj09_ChkRight:
0001EE14 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001EE1A 6700                       		beq.s	loc_1BA78	; if not, branch
0001EE1C 6100 0000                  		bsr.w	Obj09_MoveRight
0001EE20                            
0001EE20                            loc_1BA78:
0001EE20 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EE24 0200 000C                  		andi.b	#btnL+btnR,d0
0001EE28 6600                       		bne.s	loc_1BAA8
0001EE2A 3028 0020                  		move.w	obInertia(a0),d0
0001EE2E 6700                       		beq.s	loc_1BAA8
0001EE30 6B00                       		bmi.s	loc_1BA9A
0001EE32 0440 000C                  		subi.w	#$C,d0
0001EE36 6400                       		bcc.s	loc_1BA94
0001EE38 303C 0000                  		move.w	#0,d0
0001EE3C                            
0001EE3C                            loc_1BA94:
0001EE3C 3140 0020                  		move.w	d0,obInertia(a0)
0001EE40 6000                       		bra.s	loc_1BAA8
0001EE42                            ; ===========================================================================
0001EE42                            
0001EE42                            loc_1BA9A:
0001EE42 0640 000C                  		addi.w	#$C,d0
0001EE46 6400                       		bcc.s	loc_1BAA4
0001EE48 303C 0000                  		move.w	#0,d0
0001EE4C                            
0001EE4C                            loc_1BAA4:
0001EE4C 3140 0020                  		move.w	d0,obInertia(a0)
0001EE50                            
0001EE50                            loc_1BAA8:
0001EE50 1038 F780                  		move.b	(v_ssangle).w,d0
0001EE54 0600 0020                  		addi.b	#$20,d0
0001EE58 0200 00C0                  		andi.b	#$C0,d0
0001EE5C 4400                       		neg.b	d0
0001EE5E 4EB9 0000 3B42             		jsr	(CalcSine).l
0001EE64 C3E8 0020                  		muls.w	obInertia(a0),d1
0001EE68 D3A8 0008                  		add.l	d1,obX(a0)
0001EE6C C1E8 0020                  		muls.w	obInertia(a0),d0
0001EE70 D1A8 000C                  		add.l	d0,obY(a0)
0001EE74 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EE78 2428 000C                  		move.l	obY(a0),d2
0001EE7C 2628 0008                  		move.l	obX(a0),d3
0001EE80 6100 0000                  		bsr.w	sub_1BCE8
0001EE84 6700                       		beq.s	loc_1BAF2
0001EE86 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EE8A 93A8 0008                  		sub.l	d1,obX(a0)
0001EE8E 91A8 000C                  		sub.l	d0,obY(a0)
0001EE92 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EE98 4E75                       		rts	
0001EE9A                            ; ===========================================================================
0001EE9A                            
0001EE9A                            loc_1BAF2:
0001EE9A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EE9E 4E75                       		rts	
0001EEA0                            ; End of function Obj09_Move
0001EEA0                            
0001EEA0                            
0001EEA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEA0                            
0001EEA0                            
0001EEA0                            Obj09_MoveLeft:
0001EEA0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EEA6 3028 0020                  		move.w	obInertia(a0),d0
0001EEAA 6700                       		beq.s	loc_1BB06
0001EEAC 6A00                       		bpl.s	loc_1BB1A
0001EEAE                            
0001EEAE                            loc_1BB06:
0001EEAE 0440 000C                  		subi.w	#$C,d0
0001EEB2 0C40 F800                  		cmpi.w	#-$800,d0
0001EEB6 6E00                       		bgt.s	loc_1BB14
0001EEB8 303C F800                  		move.w	#-$800,d0
0001EEBC                            
0001EEBC                            loc_1BB14:
0001EEBC 3140 0020                  		move.w	d0,obInertia(a0)
0001EEC0 4E75                       		rts	
0001EEC2                            ; ===========================================================================
0001EEC2                            
0001EEC2                            loc_1BB1A:
0001EEC2 0440 0040                  		subi.w	#$40,d0
0001EEC6 6400                       		bcc.s	loc_1BB22
0001EEC8 4E71                       		nop	
0001EECA                            
0001EECA                            loc_1BB22:
0001EECA 3140 0020                  		move.w	d0,obInertia(a0)
0001EECE 4E75                       		rts	
0001EED0                            ; End of function Obj09_MoveLeft
0001EED0                            
0001EED0                            
0001EED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EED0                            
0001EED0                            
0001EED0                            Obj09_MoveRight:
0001EED0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001EED6 3028 0020                  		move.w	obInertia(a0),d0
0001EEDA 6B00                       		bmi.s	loc_1BB48
0001EEDC 0640 000C                  		addi.w	#$C,d0
0001EEE0 0C40 0800                  		cmpi.w	#$800,d0
0001EEE4 6D00                       		blt.s	loc_1BB42
0001EEE6 303C 0800                  		move.w	#$800,d0
0001EEEA                            
0001EEEA                            loc_1BB42:
0001EEEA 3140 0020                  		move.w	d0,obInertia(a0)
0001EEEE 6000                       		bra.s	locret_1BB54
0001EEF0                            ; ===========================================================================
0001EEF0                            
0001EEF0                            loc_1BB48:
0001EEF0 0640 0040                  		addi.w	#$40,d0
0001EEF4 6400                       		bcc.s	loc_1BB50
0001EEF6 4E71                       		nop	
0001EEF8                            
0001EEF8                            loc_1BB50:
0001EEF8 3140 0020                  		move.w	d0,obInertia(a0)
0001EEFC                            
0001EEFC                            locret_1BB54:
0001EEFC 4E75                       		rts	
0001EEFE                            ; End of function Obj09_MoveRight
0001EEFE                            
0001EEFE                            
0001EEFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEFE                            
0001EEFE                            
0001EEFE                            Obj09_Jump:
0001EEFE 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001EF02 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001EF06 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001EF08 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF0C 0200 00FC                  		andi.b	#$FC,d0
0001EF10 4400                       		neg.b	d0
0001EF12 0400 0040                  		subi.b	#$40,d0
0001EF16 4EB9 0000 3B42             		jsr	(CalcSine).l
0001EF1C C3FC 0680                  		muls.w	#$680,d1
0001EF20 E081                       		asr.l	#8,d1
0001EF22 3141 0010                  		move.w	d1,obVelX(a0)
0001EF26 C1FC 0680                  		muls.w	#$680,d0
0001EF2A E080                       		asr.l	#8,d0
0001EF2C 3140 0012                  		move.w	d0,obVelY(a0)
0001EF30 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EF40                            
0001EF40                            Obj09_NoJump:
0001EF40 4E75                       		rts	
0001EF42                            ; End of function Obj09_Jump
0001EF42                            
0001EF42                            
0001EF42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF42                            
0001EF42                            
0001EF42                            nullsub_2:
0001EF42 4E75                       		rts	
0001EF44                            ; End of function nullsub_2
0001EF44                            
0001EF44                            ; ===========================================================================
0001EF44                            ; ---------------------------------------------------------------------------
0001EF44                            ; unused subroutine to limit Sonic's upward vertical speed
0001EF44                            ; ---------------------------------------------------------------------------
0001EF44 323C FC00                  		move.w	#-$400,d1
0001EF48 B268 0012                  		cmp.w	obVelY(a0),d1
0001EF4C 6F00                       		ble.s	locret_1BBB4
0001EF4E 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EF52 0200 0070                  		andi.b	#btnABC,d0
0001EF56 6600                       		bne.s	locret_1BBB4
0001EF58 3141 0012                  		move.w	d1,obVelY(a0)
0001EF5C                            
0001EF5C                            locret_1BBB4:
0001EF5C 4E75                       		rts	
0001EF5E                            ; ---------------------------------------------------------------------------
0001EF5E                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EF5E                            ; ---------------------------------------------------------------------------
0001EF5E                            
0001EF5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF5E                            
0001EF5E                            
0001EF5E                            SS_FixCamera:
0001EF5E 3428 000C                  		move.w	obY(a0),d2
0001EF62 3628 0008                  		move.w	obX(a0),d3
0001EF66 3038 F700                  		move.w	(v_screenposx).w,d0
0001EF6A 0443 00A0                  		subi.w	#$A0,d3
0001EF6E 6500                       		bcs.s	loc_1BBCE
0001EF70 9043                       		sub.w	d3,d0
0001EF72 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EF76                            
0001EF76                            loc_1BBCE:
0001EF76 3038 F704                  		move.w	(v_screenposy).w,d0
0001EF7A 0442 0070                  		subi.w	#$70,d2
0001EF7E 6500                       		bcs.s	locret_1BBDE
0001EF80 9042                       		sub.w	d2,d0
0001EF82 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EF86                            
0001EF86                            locret_1BBDE:
0001EF86 4E75                       		rts	
0001EF88                            ; End of function SS_FixCamera
0001EF88                            
0001EF88                            ; ===========================================================================
0001EF88                            
0001EF88                            Obj09_ExitStage:
0001EF88 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EF8E 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EF94 6600                       		bne.s	loc_1BBF4
0001EF96 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EF9C                            
0001EF9C                            loc_1BBF4:
0001EF9C 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EFA2 6D00                       		blt.s	loc_1BC12
0001EFA4 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EFAA 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EFB0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EFB4 317C 003C 0038             		move.w	#$3C,$38(a0)
0001EFBA                            
0001EFBA                            loc_1BC12:
0001EFBA 3038 F780                  		move.w	(v_ssangle).w,d0
0001EFBE D078 F782                  		add.w	(v_ssrotate).w,d0
0001EFC2 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EFC6 4EB9 0001 61DC             		jsr	(Sonic_Animate).l
0001EFCC 4EB9 0001 6594             		jsr	(Sonic_LoadGfx).l
0001EFD2 6100 FF8A                  		bsr.w	SS_FixCamera
0001EFD6 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001EFDC                            ; ===========================================================================
0001EFDC                            
0001EFDC                            Obj09_Exit2:
0001EFDC 5368 0038                  		subq.w	#1,$38(a0)
0001EFE0 6600                       		bne.s	loc_1BC40
0001EFE2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EFE8                            
0001EFE8                            loc_1BC40:
0001EFE8 4EB9 0001 61DC             		jsr	(Sonic_Animate).l
0001EFEE 4EB9 0001 6594             		jsr	(Sonic_LoadGfx).l
0001EFF4 6100 FF68                  		bsr.w	SS_FixCamera
0001EFF8 4EF9 0000 F43A             		jmp	(DisplaySprite).l
0001EFFE                            
0001EFFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFFE                            
0001EFFE                            
0001EFFE                            Obj09_Fall:
0001EFFE 2428 000C                  		move.l	obY(a0),d2
0001F002 2628 0008                  		move.l	obX(a0),d3
0001F006 1038 F780                  		move.b	(v_ssangle).w,d0
0001F00A 0200 00FC                  		andi.b	#$FC,d0
0001F00E 4EB9 0000 3B42             		jsr	(CalcSine).l
0001F014 3828 0010                  		move.w	obVelX(a0),d4
0001F018 48C4                       		ext.l	d4
0001F01A E184                       		asl.l	#8,d4
0001F01C C1FC 002A                  		muls.w	#$2A,d0
0001F020 D084                       		add.l	d4,d0
0001F022 3828 0012                  		move.w	obVelY(a0),d4
0001F026 48C4                       		ext.l	d4
0001F028 E184                       		asl.l	#8,d4
0001F02A C3FC 002A                  		muls.w	#$2A,d1
0001F02E D284                       		add.l	d4,d1
0001F030 D680                       		add.l	d0,d3
0001F032 6100 0000                  		bsr.w	sub_1BCE8
0001F036 6700                       		beq.s	loc_1BCB0
0001F038 9680                       		sub.l	d0,d3
0001F03A 7000                       		moveq	#0,d0
0001F03C 3140 0010                  		move.w	d0,obVelX(a0)
0001F040 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F046 D481                       		add.l	d1,d2
0001F048 6100 0000                  		bsr.w	sub_1BCE8
0001F04C 6700                       		beq.s	loc_1BCC6
0001F04E 9481                       		sub.l	d1,d2
0001F050 7200                       		moveq	#0,d1
0001F052 3141 0012                  		move.w	d1,obVelY(a0)
0001F056 4E75                       		rts	
0001F058                            ; ===========================================================================
0001F058                            
0001F058                            loc_1BCB0:
0001F058 D481                       		add.l	d1,d2
0001F05A 6100 0000                  		bsr.w	sub_1BCE8
0001F05E 6700                       		beq.s	loc_1BCD4
0001F060 9481                       		sub.l	d1,d2
0001F062 7200                       		moveq	#0,d1
0001F064 3141 0012                  		move.w	d1,obVelY(a0)
0001F068 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F06E                            
0001F06E                            loc_1BCC6:
0001F06E E080                       		asr.l	#8,d0
0001F070 E081                       		asr.l	#8,d1
0001F072 3140 0010                  		move.w	d0,obVelX(a0)
0001F076 3141 0012                  		move.w	d1,obVelY(a0)
0001F07A 4E75                       		rts	
0001F07C                            ; ===========================================================================
0001F07C                            
0001F07C                            loc_1BCD4:
0001F07C E080                       		asr.l	#8,d0
0001F07E E081                       		asr.l	#8,d1
0001F080 3140 0010                  		move.w	d0,obVelX(a0)
0001F084 3141 0012                  		move.w	d1,obVelY(a0)
0001F088 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F08E 4E75                       		rts	
0001F090                            ; End of function Obj09_Fall
0001F090                            
0001F090                            
0001F090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F090                            
0001F090                            
0001F090                            sub_1BCE8:
0001F090 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F096 7800                       		moveq	#0,d4
0001F098 4842                       		swap	d2
0001F09A 3802                       		move.w	d2,d4
0001F09C 4842                       		swap	d2
0001F09E 0644 0044                  		addi.w	#$44,d4
0001F0A2 88FC 0018                  		divu.w	#$18,d4
0001F0A6 C8FC 0080                  		mulu.w	#$80,d4
0001F0AA D3C4                       		adda.l	d4,a1
0001F0AC 7800                       		moveq	#0,d4
0001F0AE 4843                       		swap	d3
0001F0B0 3803                       		move.w	d3,d4
0001F0B2 4843                       		swap	d3
0001F0B4 0644 0014                  		addi.w	#$14,d4
0001F0B8 88FC 0018                  		divu.w	#$18,d4
0001F0BC D2C4                       		adda.w	d4,a1
0001F0BE 7A00                       		moveq	#0,d5
0001F0C0 1819                       		move.b	(a1)+,d4
0001F0C2 6100                       		bsr.s	sub_1BD30
0001F0C4 1819                       		move.b	(a1)+,d4
0001F0C6 6100                       		bsr.s	sub_1BD30
0001F0C8 D2FC 007E                  		adda.w	#$7E,a1
0001F0CC 1819                       		move.b	(a1)+,d4
0001F0CE 6100                       		bsr.s	sub_1BD30
0001F0D0 1819                       		move.b	(a1)+,d4
0001F0D2 6100                       		bsr.s	sub_1BD30
0001F0D4 4A05                       		tst.b	d5
0001F0D6 4E75                       		rts	
0001F0D8                            ; End of function sub_1BCE8
0001F0D8                            
0001F0D8                            
0001F0D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0D8                            
0001F0D8                            
0001F0D8                            sub_1BD30:
0001F0D8 6700                       		beq.s	locret_1BD44
0001F0DA 0C04 0028                  		cmpi.b	#$28,d4
0001F0DE 6700                       		beq.s	locret_1BD44
0001F0E0 0C04 003A                  		cmpi.b	#$3A,d4
0001F0E4 6500                       		bcs.s	loc_1BD46
0001F0E6 0C04 004B                  		cmpi.b	#$4B,d4
0001F0EA 6400                       		bcc.s	loc_1BD46
0001F0EC                            
0001F0EC                            locret_1BD44:
0001F0EC 4E75                       		rts	
0001F0EE                            ; ===========================================================================
0001F0EE                            
0001F0EE                            loc_1BD46:
0001F0EE 1144 0030                  		move.b	d4,$30(a0)
0001F0F2 2149 0032                  		move.l	a1,$32(a0)
0001F0F6 7AFF                       		moveq	#-1,d5
0001F0F8 4E75                       		rts	
0001F0FA                            ; End of function sub_1BD30
0001F0FA                            
0001F0FA                            
0001F0FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0FA                            
0001F0FA                            
0001F0FA                            Obj09_ChkItems:
0001F0FA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F100 7800                       		moveq	#0,d4
0001F102 3828 000C                  		move.w	obY(a0),d4
0001F106 0644 0050                  		addi.w	#$50,d4
0001F10A 88FC 0018                  		divu.w	#$18,d4
0001F10E C8FC 0080                  		mulu.w	#$80,d4
0001F112 D3C4                       		adda.l	d4,a1
0001F114 7800                       		moveq	#0,d4
0001F116 3828 0008                  		move.w	obX(a0),d4
0001F11A 0644 0020                  		addi.w	#$20,d4
0001F11E 88FC 0018                  		divu.w	#$18,d4
0001F122 D2C4                       		adda.w	d4,a1
0001F124 1811                       		move.b	(a1),d4
0001F126 6600                       		bne.s	Obj09_ChkCont
0001F128 4A28 003A                  		tst.b	$3A(a0)
0001F12C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F130 7800                       		moveq	#0,d4
0001F132 4E75                       		rts	
0001F134                            ; ===========================================================================
0001F134                            
0001F134                            Obj09_ChkCont:
0001F134 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F138 6600                       		bne.s	Obj09_Chk1Up
0001F13A 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F13E 6600                       		bne.s	Obj09_GetCont
0001F140 14BC 0001                  		move.b	#1,(a2)
0001F144 2549 0004                  		move.l	a1,4(a2)
0001F148                            
0001F148                            Obj09_GetCont:
0001F148 4EB9 0000 B5C2             		jsr	(CollectRing).l
0001F14E 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F154 6500                       		bcs.s	Obj09_NoCont
0001F156 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F15C 6600                       		bne.s	Obj09_NoCont
0001F15E 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F16C                            
0001F16C                            Obj09_NoCont:
0001F16C 7800                       		moveq	#0,d4
0001F16E 4E75                       		rts	
0001F170                            ; ===========================================================================
0001F170                            
0001F170                            Obj09_Chk1Up:
0001F170 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F174 6600                       		bne.s	Obj09_ChkEmer
0001F176 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F17A 6600                       		bne.s	Obj09_Get1Up
0001F17C 14BC 0003                  		move.b	#3,(a2)
0001F180 2549 0004                  		move.l	a1,4(a2)
0001F184                            
0001F184                            Obj09_Get1Up:
0001F184 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F188 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F196 7800                       		moveq	#0,d4
0001F198 4E75                       		rts	
0001F19A                            ; ===========================================================================
0001F19A                            
0001F19A                            Obj09_ChkEmer:
0001F19A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F19E 6500                       		bcs.s	Obj09_ChkGhost
0001F1A0 0C04 0040                  		cmpi.b	#$40,d4
0001F1A4 6200                       		bhi.s	Obj09_ChkGhost
0001F1A6 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F1AA 6600                       		bne.s	Obj09_GetEmer
0001F1AC 14BC 0005                  		move.b	#5,(a2)
0001F1B0 2549 0004                  		move.l	a1,4(a2)
0001F1B4                            
0001F1B4                            Obj09_GetEmer:
0001F1B4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F1BA 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F1BC 0404 003B                  		subi.b	#$3B,d4
0001F1C0 7000                       		moveq	#0,d0
0001F1C2 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F1C6 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F1CA 1584 0000                  		move.b	d4,(a2,d0.w)
0001F1CE 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F1D2                            
0001F1D2                            Obj09_NoEmer:
0001F1DC 7800                       		moveq	#0,d4
0001F1DE 4E75                       		rts	
0001F1E0                            ; ===========================================================================
0001F1E0                            
0001F1E0                            Obj09_ChkGhost:
0001F1E0 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F1E4 6600                       		bne.s	Obj09_ChkGhostTag
0001F1E6 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F1EC                            
0001F1EC                            Obj09_ChkGhostTag:
0001F1EC 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F1F0 6600                       		bne.s	Obj09_NoGhost
0001F1F2 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F1F8 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F1FA 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F200                            
0001F200                            Obj09_NoGhost:
0001F200 78FF                       		moveq	#-1,d4
0001F202 4E75                       		rts	
0001F204                            ; ===========================================================================
0001F204                            
0001F204                            Obj09_MakeGhostSolid:
0001F204 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F20A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F20C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F212 723F                       		moveq	#$3F,d1
0001F214                            
0001F214                            Obj09_GhostLoop2:
0001F214 743F                       		moveq	#$3F,d2
0001F216                            
0001F216                            Obj09_GhostLoop:
0001F216 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F21A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F21C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F220                            
0001F220                            Obj09_NoReplace:
0001F220 5249                       		addq.w	#1,a1
0001F222 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F226 43E9 0040                  		lea	$40(a1),a1
0001F22A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F22E                            
0001F22E                            Obj09_GhostNotSolid:
0001F22E 4228 003A                  		clr.b	$3A(a0)
0001F232 7800                       		moveq	#0,d4
0001F234 4E75                       		rts	
0001F236                            ; End of function Obj09_ChkItems
0001F236                            
0001F236                            
0001F236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F236                            
0001F236                            
0001F236                            Obj09_ChkItems2:
0001F236 1028 0030                  		move.b	$30(a0),d0
0001F23A 6600                       		bne.s	Obj09_ChkBumper
0001F23C 5328 0036                  		subq.b	#1,$36(a0)
0001F240 6A00                       		bpl.s	loc_1BEA0
0001F242 117C 0000 0036             		move.b	#0,$36(a0)
0001F248                            
0001F248                            loc_1BEA0:
0001F248 5328 0037                  		subq.b	#1,$37(a0)
0001F24C 6A00                       		bpl.s	locret_1BEAC
0001F24E 117C 0000 0037             		move.b	#0,$37(a0)
0001F254                            
0001F254                            locret_1BEAC:
0001F254 4E75                       		rts	
0001F256                            ; ===========================================================================
0001F256                            
0001F256                            Obj09_ChkBumper:
0001F256 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F25A 6600                       		bne.s	Obj09_GOAL
0001F25C 2228 0032                  		move.l	$32(a0),d1
0001F260 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F266 3401                       		move.w	d1,d2
0001F268 0241 007F                  		andi.w	#$7F,d1
0001F26C C2FC 0018                  		mulu.w	#$18,d1
0001F270 0441 0014                  		subi.w	#$14,d1
0001F274 EE4A                       		lsr.w	#7,d2
0001F276 0242 007F                  		andi.w	#$7F,d2
0001F27A C4FC 0018                  		mulu.w	#$18,d2
0001F27E 0442 0044                  		subi.w	#$44,d2
0001F282 9268 0008                  		sub.w	obX(a0),d1
0001F286 9468 000C                  		sub.w	obY(a0),d2
0001F28A 4EB9 0000 3DD4             		jsr	(CalcAngle).l
0001F290 4EB9 0000 3B42             		jsr	(CalcSine).l
0001F296 C3FC F900                  		muls.w	#-$700,d1
0001F29A E081                       		asr.l	#8,d1
0001F29C 3141 0010                  		move.w	d1,obVelX(a0)
0001F2A0 C1FC F900                  		muls.w	#-$700,d0
0001F2A4 E080                       		asr.l	#8,d0
0001F2A6 3140 0012                  		move.w	d0,obVelY(a0)
0001F2AA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F2B0 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F2B4 6600                       		bne.s	Obj09_BumpSnd
0001F2B6 14BC 0002                  		move.b	#2,(a2)
0001F2BA 2028 0032                  		move.l	$32(a0),d0
0001F2BE 5380                       		subq.l	#1,d0
0001F2C0 2540 0004                  		move.l	d0,4(a2)
0001F2C4                            
0001F2C4                            Obj09_BumpSnd:
0001F2CE                            ; ===========================================================================
0001F2CE                            
0001F2CE                            Obj09_GOAL:
0001F2CE 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F2D2 6600                       		bne.s	Obj09_UPblock
0001F2D4 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F2E2 4E75                       		rts	
0001F2E4                            ; ===========================================================================
0001F2E4                            
0001F2E4                            Obj09_UPblock:
0001F2E4 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F2E8 6600                       		bne.s	Obj09_DOWNblock
0001F2EA 4A28 0036                  		tst.b	$36(a0)
0001F2EE 6600 0000                  		bne.w	Obj09_NoGlass
0001F2F2 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F2F8 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F2FE 6700                       		beq.s	Obj09_UPsnd
0001F300 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F304 2268 0032                  		movea.l	$32(a0),a1
0001F308 5389                       		subq.l	#1,a1
0001F30A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F30E                            
0001F30E                            Obj09_UPsnd:
0001F318                            ; ===========================================================================
0001F318                            
0001F318                            Obj09_DOWNblock:
0001F318 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F31C 6600                       		bne.s	Obj09_Rblock
0001F31E 4A28 0036                  		tst.b	$36(a0)
0001F322 6600 0000                  		bne.w	Obj09_NoGlass
0001F326 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F32C 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F332 6600                       		bne.s	Obj09_DOWNsnd
0001F334 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F338 2268 0032                  		movea.l	$32(a0),a1
0001F33C 5389                       		subq.l	#1,a1
0001F33E 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F342                            
0001F342                            Obj09_DOWNsnd:
0001F34C                            ; ===========================================================================
0001F34C                            
0001F34C                            Obj09_Rblock:
0001F34C 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F350 6600                       		bne.s	Obj09_ChkGlass
0001F352 4A28 0037                  		tst.b	$37(a0)
0001F356 6600 0000                  		bne.w	Obj09_NoGlass
0001F35A 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F360 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F364 6600                       		bne.s	Obj09_RevStage
0001F366 14BC 0004                  		move.b	#4,(a2)
0001F36A 2028 0032                  		move.l	$32(a0),d0
0001F36E 5380                       		subq.l	#1,d0
0001F370 2540 0004                  		move.l	d0,4(a2)
0001F374                            
0001F374                            Obj09_RevStage:
0001F374 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F382                            ; ===========================================================================
0001F382                            
0001F382                            Obj09_ChkGlass:
0001F382 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F386 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F388 0C00 002E                  		cmpi.b	#$2E,d0
0001F38C 6700                       		beq.s	Obj09_Glass
0001F38E 0C00 002F                  		cmpi.b	#$2F,d0
0001F392 6700                       		beq.s	Obj09_Glass
0001F394 0C00 0030                  		cmpi.b	#$30,d0
0001F398 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F39A                            
0001F39A                            Obj09_Glass:
0001F39A 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F39E 6600                       		bne.s	Obj09_GlassSnd
0001F3A0 14BC 0006                  		move.b	#6,(a2)
0001F3A4 2268 0032                  		movea.l	$32(a0),a1
0001F3A8 5389                       		subq.l	#1,a1
0001F3AA 2549 0004                  		move.l	a1,4(a2)
0001F3AE 1011                       		move.b	(a1),d0
0001F3B0 5200                       		addq.b	#1,d0		; change glass type when touched
0001F3B2 0C00 0030                  		cmpi.b	#$30,d0
0001F3B6 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F3B8 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F3BA                            
0001F3BA                            Obj09_GlassUpdate:
0001F3BA 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F3BE                            
0001F3BE                            Obj09_GlassSnd:
0001F3C8                            ; ===========================================================================
0001F3C8                            
0001F3C8                            Obj09_NoGlass:
0001F3C8 4E75                       		rts	
0001F3CA                            ; End of function Obj09_ChkItems2
0001F3CA                            ; End of function Obj09_ChkItems2
0001F3CA                            
0001F3CA                            		include	"_incObj\10.asm"
0001F3CA                            ; ---------------------------------------------------------------------------
0001F3CA                            ; Object 10 - After-Image
0001F3CA                            ; ---------------------------------------------------------------------------
0001F3CA                            
0001F3CA                            Obj10:
0001F3CA 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F3D0 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F3D4                            
0001F3D4 7000                             moveq   #0,d0
0001F3D6 1028 0024                        move.b   obRoutine(a0),d0
0001F3DA 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F3DE 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F3E2                            
0001F3E2                            ; ===========================================================================
0001F3E2                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F3E2                            ; ===========================================================================
0001F3E2                            Afterimage_Index:
0001F3E2 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3E4 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3E6 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3E8 0000                             dc.w AfterimageStart-Afterimage_Index
0001F3EA 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3EC 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3EE 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3F0 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F3F2 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F3F4                            ; ===========================================================================
0001F3F4                            NoAfterImage:
0001F3F4 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F3F8 4E75                             rts
0001F3FA                            ; ===========================================================================
0001F3FA                            AfterimageStart:
0001F3FA 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F400 6000                             bra.s   Afterimage_Show
0001F402                            ; ===========================================================================
0001F402                            AfterimageLPrio:
0001F402 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F406                            ; ===========================================================================
0001F406                            Afterimage_Show:
0001F406 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F40A 4EB9 0000 3B1C                   jsr   (RandomNumber).l         ; get a random number
0001F410 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F414 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F416 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F418                            
0001F418                            AfterimageException:
0001F418 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F41E 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F424 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F42A 4EF9 0000 F43A                   jmp   DisplaySprite
0001F430                            ; ===========================================================================
0001F430                            AfterimageEnd:
0001F430 4EF9 0000 F47A                   jmp   DeleteObject
0001F430 4EF9 0000 F47A                   jmp   DeleteObject
0001F436                            
0001F436                            		include	"_inc\AnimateLevelGfx.asm"
0001F436                            ; ---------------------------------------------------------------------------
0001F436                            ; Subroutine to	animate	level graphics
0001F436                            ; ---------------------------------------------------------------------------
0001F436                            
0001F436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F436                            
0001F436                            
0001F436                            AnimateLevelGfx:
0001F436 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001F43A 6600                       		bne.s	@ispaused	; if yes, branch
0001F43C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F442 6100 0000                  		bsr.w	AniArt_GiantRing
0001F446 7000                       		moveq	#0,d0
0001F448 1038 FE10                  		move.b	(v_zone).w,d0
0001F44C D040                       		add.w	d0,d0
0001F44E 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F452 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F456                            
0001F456                            	@ispaused:
0001F456 4E75                       		rts	
0001F458                            
0001F458                            ; ===========================================================================
0001F458 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F45C 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F460 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F464 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F466                            ; ===========================================================================
0001F466                            ; ---------------------------------------------------------------------------
0001F466                            ; Animated pattern routine - Green Hill
0001F466                            ; ---------------------------------------------------------------------------
0001F466                            
0001F466                            AniArt_GHZ:
0001F466                            
0001F466                            AniArt_GHZ_Waterfall:
0001F466                            
0001F466 =00000008                  @size:		equ 8	; number of tiles per frame
0001F466                            
0001F466 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F46A 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F46C                            
0001F46C 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F472 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F478 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F47C 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F480 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F484 6700                       		beq.s	@isframe0	; branch if frame 0
0001F486 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F48A                            
0001F48A                            	@isframe0:
0001F494 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F498 6000 0000                  		bra.w	LoadTiles
0001F49C                            ; ===========================================================================
0001F49C                            
0001F49C                            AniArt_GHZ_Bigflower:
0001F49C                            
0001F49C =00000010                  @size:		equ 16	; number of tiles per frame
0001F49C                            
0001F49C 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F4A0 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F4A2                            
0001F4A2 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F4A8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F4AE 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F4B2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F4B6 0240 0001                  		andi.w	#1,d0
0001F4BA 6700                       		beq.s	@isframe0
0001F4BC 43E9 0200                  		lea	@size*$20(a1),a1
0001F4C0                            
0001F4C0                            	@isframe0:
0001F4CA 323C 000F                  		move.w	#@size-1,d1
0001F4CE 6000 0000                  		bra.w	LoadTiles
0001F4D2                            ; ===========================================================================
0001F4D2                            
0001F4D2                            AniArt_GHZ_Smallflower:
0001F4D2                            
0001F4D2 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F4D2                            
0001F4D2 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F4D6 6A00                       		bpl.s	@end
0001F4D8                            
0001F4D8 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F4DE 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F4E2 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F4E6 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F4EA 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F4EE 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F4F2 6600                       		bne.s	@isframe1	; if not, branch
0001F4F4 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F4FA                            
0001F4FA                            	@isframe1:
0001F4FA EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F4FC 3200                       		move.w	d0,d1
0001F4FE D040                       		add.w	d0,d0
0001F500 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F50C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F512 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F516 323C 000B                  		move.w	#@size-1,d1
0001F51A 6100 0000                  		bsr.w	LoadTiles
0001F51E                            
0001F51E                            @end:
0001F51E 4E75                       		rts	
0001F520                            
0001F520 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F524                            ; ===========================================================================
0001F524                            ; ---------------------------------------------------------------------------
0001F524                            ; Animated pattern routine - Marble
0001F524                            ; ---------------------------------------------------------------------------
0001F524                            
0001F524                            AniArt_MZ:
0001F524                            
0001F524                            AniArt_MZ_Lava:
0001F524                            
0001F524 =00000008                  @size:		equ 8	; number of tiles per frame
0001F524                            
0001F524 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F528 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F52A                            
0001F52A 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F530 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F536 7000                       		moveq	#0,d0
0001F538 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F53C 5200                       		addq.b	#1,d0		; increment frame counter
0001F53E 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F542 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F544 7000                       		moveq	#0,d0
0001F546                            
0001F546                            	@frame01or2:
0001F546 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F54A C0FC 0100                  		mulu.w	#@size*$20,d0
0001F54E D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F55A 323C 0007                  		move.w	#@size-1,d1
0001F55E 6100 0000                  		bsr.w	LoadTiles
0001F562                            
0001F562                            AniArt_MZ_Magma:
0001F562 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F566 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F568                            		
0001F568 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F56E 7000                       		moveq	#0,d0
0001F570 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F574 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F57A EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F57C D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F588 7600                       		moveq	#0,d3
0001F58A 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F58E 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F592 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F596 343C 0003                  		move.w	#3,d2
0001F59A                            
0001F59A                            	@loop:
0001F59A 3003                       		move.w	d3,d0
0001F59C D040                       		add.w	d0,d0
0001F59E 0240 001E                  		andi.w	#$1E,d0
0001F5A2 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F5A8 3033 0000                  		move.w	(a3,d0.w),d0
0001F5AC 47F3 0000                  		lea	(a3,d0.w),a3
0001F5B0 224C                       		movea.l	a4,a1
0001F5B2 323C 001F                  		move.w	#$1F,d1
0001F5B6 4E93                       		jsr	(a3)
0001F5B8 5843                       		addq.w	#4,d3
0001F5BA 51CA FFDE                  		dbf	d2,@loop
0001F5BE 4E75                       		rts	
0001F5C0                            ; ===========================================================================
0001F5C0                            
0001F5C0                            AniArt_MZ_Torch:
0001F5C0                            
0001F5C0 =00000006                  @size:		equ 6	; number of tiles per frame
0001F5C0                            
0001F5C0 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F5C4 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F5C8                            		
0001F5C8 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F5CE 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F5D4 7000                       		moveq	#0,d0
0001F5D6 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F5DA 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F5DE 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F5E4 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F5E8 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F5F4 323C 0005                  		move.w	#@size-1,d1
0001F5F8 6000 0000                  		bra.w	LoadTiles
0001F5FC                            
0001F5FC                            @end:
0001F5FC 4E75                       		rts	
0001F5FE                            ; ===========================================================================
0001F5FE                            ; ---------------------------------------------------------------------------
0001F5FE                            ; Animated pattern routine - Scrap Brain
0001F5FE                            ; ---------------------------------------------------------------------------
0001F5FE                            
0001F5FE                            AniArt_SBZ:
0001F5FE                            
0001F5FE =0000000C                  @size:		equ 12	; number of tiles per frame
0001F5FE                            
0001F5FE 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F602 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F604                            		
0001F604 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F608 6000                       		bra.s	@chk_smokepuff2
0001F60A                            ; ===========================================================================
0001F60A                            
0001F60A                            @smokepuff:
0001F60A 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F60E 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F610                            		
0001F610 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F616 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F626 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F62A 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F62E 0240 0007                  		andi.w	#7,d0
0001F632 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F634 5340                       		subq.w	#1,d0
0001F636 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F63A 43F1 0000                  		lea	(a1,d0.w),a1
0001F63E 323C 000B                  		move.w	#@size-1,d1
0001F642 6000 0000                  		bra.w	LoadTiles
0001F646                            ; ===========================================================================
0001F646                            
0001F646                            @untilnextpuff:
0001F646 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F64C                            
0001F64C                            @clearsky:
0001F64C 323C 0005                  		move.w	#(@size/2)-1,d1
0001F650 6100 0000                  		bsr.w	LoadTiles
0001F654 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F65A 323C 0005                  		move.w	#(@size/2)-1,d1
0001F65E 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F662                            ; ===========================================================================
0001F662                            
0001F662                            @chk_smokepuff2:
0001F662 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F666 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F668                            		
0001F668 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F66C 6000                       		bra.s	@end
0001F66E                            ; ===========================================================================
0001F66E                            
0001F66E                            @smokepuff2:
0001F66E 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F672 6A00                       		bpl.s	@end		; branch if not 0
0001F674                            		
0001F674 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F67A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F68A 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F68E 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F692 0240 0007                  		andi.w	#7,d0
0001F696 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F698 5340                       		subq.w	#1,d0
0001F69A C0FC 0180                  		mulu.w	#@size*$20,d0
0001F69E 43F1 0000                  		lea	(a1,d0.w),a1
0001F6A2 323C 000B                  		move.w	#@size-1,d1
0001F6A6 6000 0000                  		bra.w	LoadTiles
0001F6AA                            ; ===========================================================================
0001F6AA                            
0001F6AA                            @untilnextpuff2:
0001F6AA 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F6B0 609A                       		bra.s	@clearsky
0001F6B2                            ; ===========================================================================
0001F6B2                            
0001F6B2                            @end:
0001F6B2 4E75                       		rts	
0001F6B4                            ; ===========================================================================
0001F6B4                            ; ---------------------------------------------------------------------------
0001F6B4                            ; Animated pattern routine - ending sequence
0001F6B4                            ; ---------------------------------------------------------------------------
0001F6B4                            
0001F6B4                            AniArt_Ending:
0001F6B4                            
0001F6B4                            AniArt_Ending_BigFlower:
0001F6B4                            
0001F6B4 =00000010                  @size:		equ 16	; number of tiles per frame
0001F6B4                            
0001F6B4 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F6B8 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F6BA                            		
0001F6BA 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F6C0 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F6C6 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F6CA 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F6CE 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F6D2 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F6D6 6700                       		beq.s	@isframe0	; branch if frame 0
0001F6D8 43E9 0200                  		lea	@size*$20(a1),a1
0001F6DC 45EA 0200                  		lea	@size*$20(a2),a2
0001F6E0                            
0001F6E0                            	@isframe0:
0001F6EA 323C 000F                  		move.w	#@size-1,d1
0001F6EE 6100 0000                  		bsr.w	LoadTiles
0001F6F2 224A                       		movea.l	a2,a1
0001F6FE 323C 000F                  		move.w	#@size-1,d1
0001F702 6000 0000                  		bra.w	LoadTiles
0001F706                            ; ===========================================================================
0001F706                            
0001F706                            AniArt_Ending_SmallFlower:
0001F706                            
0001F706 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F706                            
0001F706 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F70A 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F70C                            		
0001F70C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F712 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F716 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F71A 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F71E 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F722 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F724 3200                       		move.w	d0,d1
0001F726 D040                       		add.w	d0,d0
0001F728 D041                       		add.w	d1,d0		; multiply by 3
0001F734 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F73A 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F73E 323C 000B                  		move.w	#@size-1,d1
0001F742 6000 0000                  		bra.w	LoadTiles
0001F746                            ; ===========================================================================
0001F746 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F74E                            ; ===========================================================================
0001F74E                            
0001F74E                            AniArt_Ending_Flower3:
0001F74E                            
0001F74E =00000010                  @size:		equ 16	; number of tiles per frame
0001F74E                            
0001F74E 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F752 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F754                            		
0001F754 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F75A 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F75E 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F762 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F766 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F76A E148                       		lsl.w	#8,d0		; multiply by $100
0001F76C D040                       		add.w	d0,d0		; multiply by 2
0001F778 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F77C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F780 323C 000F                  		move.w	#@size-1,d1
0001F784 6000 0000                  		bra.w	LoadTiles
0001F788                            ; ===========================================================================
0001F788 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F78C                            ; ===========================================================================
0001F78C                            
0001F78C                            AniArt_Ending_Flower4:
0001F78C                            
0001F78C =00000010                  @size:		equ 16	; number of tiles per frame
0001F78C                            
0001F78C 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F790 6A00                       		bpl.s	@end		; branch if not 0
0001F792                            		
0001F792 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F798 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F79C 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F7A0 0240 0003                  		andi.w	#3,d0
0001F7A4 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F7A8 E148                       		lsl.w	#8,d0		; multiply by $100
0001F7AA D040                       		add.w	d0,d0		; multiply by 2
0001F7B6 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F7BA 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F7BE 323C 000F                  		move.w	#@size-1,d1
0001F7C2 6000 0000                  		bra.w	LoadTiles
0001F7C6                            ; ===========================================================================
0001F7C6                            
0001F7C6                            @end:
0001F7C6 4E75                       		rts	
0001F7C8                            ; ===========================================================================
0001F7C8                            
0001F7C8                            AniArt_none:
0001F7C8 4E75                       		rts	
0001F7CA                            
0001F7CA                            ; ---------------------------------------------------------------------------
0001F7CA                            ; Subroutine to	transfer graphics to VRAM
0001F7CA                            
0001F7CA                            ; input:
0001F7CA                            ;	a1 = source address
0001F7CA                            ;	a6 = vdp_data_port ($C00000)
0001F7CA                            ;	d1 = number of tiles to load (minus one)
0001F7CA                            ; ---------------------------------------------------------------------------
0001F7CA                            
0001F7CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F7CA                            
0001F7CA                            
0001F7CA                            LoadTiles:
0001F7CA 2C99                       		move.l	(a1)+,(a6)
0001F7CC 2C99                       		move.l	(a1)+,(a6)
0001F7CE 2C99                       		move.l	(a1)+,(a6)
0001F7D0 2C99                       		move.l	(a1)+,(a6)
0001F7D2 2C99                       		move.l	(a1)+,(a6)
0001F7D4 2C99                       		move.l	(a1)+,(a6)
0001F7D6 2C99                       		move.l	(a1)+,(a6)
0001F7D8 2C99                       		move.l	(a1)+,(a6)
0001F7DA 51C9 FFEE                  		dbf	d1,LoadTiles
0001F7DE 4E75                       		rts	
0001F7E0                            ; End of function LoadTiles
0001F7E0                            
0001F7E0                            ; ===========================================================================
0001F7E0                            ; ---------------------------------------------------------------------------
0001F7E0                            ; Animated pattern routine - more Marble Zone
0001F7E0                            ; ---------------------------------------------------------------------------
0001F7E0 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F7E4 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F7E8 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F7EC 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F7F0 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F7F4 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F7F8 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F7FC 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F800                            ; ===========================================================================
0001F800                            
0001F800                            loc_1C3EE:
0001F800 2C91                       		move.l	(a1),(a6)
0001F802 43E9 0010                  		lea	$10(a1),a1
0001F806 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F80A 4E75                       		rts	
0001F80C                            ; ===========================================================================
0001F80C                            
0001F80C                            loc_1C3FA:
0001F80C 2029 0002                  		move.l	2(a1),d0
0001F810 1029 0001                  		move.b	1(a1),d0
0001F814 E098                       		ror.l	#8,d0
0001F816 2C80                       		move.l	d0,(a6)
0001F818 43E9 0010                  		lea	$10(a1),a1
0001F81C 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F820 4E75                       		rts	
0001F822                            ; ===========================================================================
0001F822                            
0001F822                            loc_1C410:
0001F822 2CA9 0002                  		move.l	2(a1),(a6)
0001F826 43E9 0010                  		lea	$10(a1),a1
0001F82A 51C9 FFF6                  		dbf	d1,loc_1C410
0001F82E 4E75                       		rts	
0001F830                            ; ===========================================================================
0001F830                            
0001F830                            loc_1C41E:
0001F830 2029 0004                  		move.l	4(a1),d0
0001F834 1029 0003                  		move.b	3(a1),d0
0001F838 E098                       		ror.l	#8,d0
0001F83A 2C80                       		move.l	d0,(a6)
0001F83C 43E9 0010                  		lea	$10(a1),a1
0001F840 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F844 4E75                       		rts	
0001F846                            ; ===========================================================================
0001F846                            
0001F846                            loc_1C434:
0001F846 2CA9 0004                  		move.l	4(a1),(a6)
0001F84A 43E9 0010                  		lea	$10(a1),a1
0001F84E 51C9 FFF6                  		dbf	d1,loc_1C434
0001F852 4E75                       		rts	
0001F854                            ; ===========================================================================
0001F854                            
0001F854                            loc_1C442:
0001F854 2029 0006                  		move.l	6(a1),d0
0001F858 1029 0005                  		move.b	5(a1),d0
0001F85C E098                       		ror.l	#8,d0
0001F85E 2C80                       		move.l	d0,(a6)
0001F860 43E9 0010                  		lea	$10(a1),a1
0001F864 51C9 FFEE                  		dbf	d1,loc_1C442
0001F868 4E75                       		rts	
0001F86A                            ; ===========================================================================
0001F86A                            
0001F86A                            loc_1C458:
0001F86A 2CA9 0006                  		move.l	6(a1),(a6)
0001F86E 43E9 0010                  		lea	$10(a1),a1
0001F872 51C9 FFF6                  		dbf	d1,loc_1C458
0001F876 4E75                       		rts	
0001F878                            ; ===========================================================================
0001F878                            
0001F878                            loc_1C466:
0001F878 2029 0008                  		move.l	8(a1),d0
0001F87C 1029 0007                  		move.b	7(a1),d0
0001F880 E098                       		ror.l	#8,d0
0001F882 2C80                       		move.l	d0,(a6)
0001F884 43E9 0010                  		lea	$10(a1),a1
0001F888 51C9 FFEE                  		dbf	d1,loc_1C466
0001F88C 4E75                       		rts	
0001F88E                            ; ===========================================================================
0001F88E                            
0001F88E                            loc_1C47C:
0001F88E 2CA9 0008                  		move.l	8(a1),(a6)
0001F892 43E9 0010                  		lea	$10(a1),a1
0001F896 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F89A 4E75                       		rts	
0001F89C                            ; ===========================================================================
0001F89C                            
0001F89C                            loc_1C48A:
0001F89C 2029 000A                  		move.l	$A(a1),d0
0001F8A0 1029 0009                  		move.b	9(a1),d0
0001F8A4 E098                       		ror.l	#8,d0
0001F8A6 2C80                       		move.l	d0,(a6)
0001F8A8 43E9 0010                  		lea	$10(a1),a1
0001F8AC 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F8B0 4E75                       		rts	
0001F8B2                            ; ===========================================================================
0001F8B2                            
0001F8B2                            loc_1C4A0:
0001F8B2 2CA9 000A                  		move.l	$A(a1),(a6)
0001F8B6 43E9 0010                  		lea	$10(a1),a1
0001F8BA 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F8BE 4E75                       		rts	
0001F8C0                            ; ===========================================================================
0001F8C0                            
0001F8C0                            loc_1C4AE:
0001F8C0 2029 000C                  		move.l	$C(a1),d0
0001F8C4 1029 000B                  		move.b	$B(a1),d0
0001F8C8 E098                       		ror.l	#8,d0
0001F8CA 2C80                       		move.l	d0,(a6)
0001F8CC 43E9 0010                  		lea	$10(a1),a1
0001F8D0 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F8D4 4E75                       		rts	
0001F8D6                            ; ===========================================================================
0001F8D6                            
0001F8D6                            loc_1C4C4:
0001F8D6 2CA9 000C                  		move.l	$C(a1),(a6)
0001F8DA 43E9 0010                  		lea	$10(a1),a1
0001F8DE 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F8E2 4E75                       		rts	
0001F8E4                            ; ===========================================================================
0001F8E4                            
0001F8E4                            loc_1C4D2:
0001F8E4 2029 000C                  		move.l	$C(a1),d0
0001F8E8 E198                       		rol.l	#8,d0
0001F8EA 1011                       		move.b	0(a1),d0
0001F8EC 2C80                       		move.l	d0,(a6)
0001F8EE 43E9 0010                  		lea	$10(a1),a1
0001F8F2 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F8F6 4E75                       		rts	
0001F8F8                            ; ===========================================================================
0001F8F8                            
0001F8F8                            loc_1C4E8:
0001F8F8 3CA9 000E                  		move.w	$E(a1),(a6)
0001F8FC 3C91                       		move.w	0(a1),(a6)
0001F8FE 43E9 0010                  		lea	$10(a1),a1
0001F902 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F906 4E75                       		rts	
0001F908                            ; ===========================================================================
0001F908                            
0001F908                            loc_1C4FA:
0001F908 2011                       		move.l	0(a1),d0
0001F90A 1029 000F                  		move.b	$F(a1),d0
0001F90E E098                       		ror.l	#8,d0
0001F910 2C80                       		move.l	d0,(a6)
0001F912 43E9 0010                  		lea	$10(a1),a1
0001F916 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F91A 4E75                       		rts	
0001F91C                            
0001F91C                            ; ---------------------------------------------------------------------------
0001F91C                            ; Animated pattern routine - giant ring
0001F91C                            ; ---------------------------------------------------------------------------
0001F91C                            
0001F91C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F91C                            
0001F91C                            
0001F91C                            AniArt_GiantRing:
0001F91C                            
0001F91C =0000000E                  @size:		equ 14
0001F91C                            
0001F91C 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F920 6600                       		bne.s	@loadTiles		; If so, get to work
0001F922 4E75                       		rts	
0001F924                            ; ===========================================================================
0001F924                            ; loc_1C518:
0001F924                            @loadTiles:
0001F924 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F92A 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F930 7000                       		moveq	#0,d0
0001F932 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F936 43F1 0000                  		lea	(a1,d0.w),a1
0001F93A                            		; Turn VRAM address into VDP command
0001F93A 0640 8000                  		addi.w	#$8000,d0
0001F93E E588                       		lsl.l	#2,d0
0001F940 E448                       		lsr.w	#2,d0
0001F942 0040 4000                  		ori.w	#$4000,d0
0001F946 4840                       		swap	d0
0001F948                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F948 2D40 0004                  		move.l	d0,4(a6)
0001F94C                            
0001F94C 323C 000D                  		move.w	#@size-1,d1
0001F950 6000 FE78                  		bra.w	LoadTiles
0001F954                            
0001F954                            ; End of function AniArt_GiantRing
0001F954                            ; End of function AniArt_GiantRing
0001F954                            
0001F954                            		include	"_incObj\21 HUD.asm"
0001F954                            ; ---------------------------------------------------------------------------
0001F954                            ; Object 21 - SCORE, TIME, RINGS
0001F954                            ; ---------------------------------------------------------------------------
0001F954                            
0001F954                            HUD:
0001F954 7000                       		moveq	#0,d0
0001F956 1028 0024                  		move.b	obRoutine(a0),d0
0001F95A 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F95E 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F962                            ; ===========================================================================
0001F962 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F964 0000                       		dc.w HUD_Flash-HUD_Index
0001F966                            ; ===========================================================================
0001F966                            
0001F966                            HUD_Main:	; Routine 0
0001F966 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F96A 317C 0090 0008             		move.w	#$90,obX(a0)
0001F970 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F976 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F97E 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F984 117C 0000 0001             		move.b	#0,obRender(a0)
0001F98A 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F990                            
0001F990                            HUD_Flash:	; Routine 2
0001F990 7000                       		moveq	#0,d0
0001F992 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F998 6600                       		bne.s	@display
0001F99A 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F99E 6600                       		bne.s	@norings	; if so, branch
0001F9A0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F9A2                            ; ===========================================================================
0001F9A2                            
0001F9A2                            @norings:
0001F9A2 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F9A8 6600                       		bne.s	@display	; if not, branch
0001F9AA 5440                       		addq.w	#2,d0		; make time counter flash red
0001F9AC                            
0001F9AC                            	@display:
0001F9AC 1140 001A                  		move.b	d0,obFrame(a0)
0001F9B0 4EF9 0000 F43A             		jmp	DisplaySprite
0001F9B0 4EF9 0000 F43A             		jmp	DisplaySprite
0001F9B6                            Map_HUD:	include	"_maps\HUD.asm"
0001F9B6                            ; ---------------------------------------------------------------------------
0001F9B6                            ; Sprite mappings - SCORE, TIME, RINGS
0001F9B6                            ; ---------------------------------------------------------------------------
0001F9B6                            Map_HUD_internal:
0001F9B6 0000                       		dc.w @allyellow-Map_HUD_internal
0001F9B8 0000                       		dc.w @ringred-Map_HUD_internal
0001F9BA 0000                       		dc.w @timered-Map_HUD_internal
0001F9BC 0000                       		dc.w @allred-Map_HUD_internal
0001F9BE 0A                         @allyellow:	dc.b $A
0001F9BF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F9C4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F9C9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F9CE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F9D3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F9D8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F9DD A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F9E2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F9E7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F9EC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F9F1 00                         		dc.b 0
0001F9F2 0A                         @ringred:	dc.b $A
0001F9F3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F9F8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F9FD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA02 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FA07 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA0C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FA11 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FA16 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA1B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA20 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA25 00                         		dc.b 0
0001FA26 0A                         @timered:	dc.b $A
0001FA27 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FA2C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FA31 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA36 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FA3B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA40 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FA45 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FA4A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA4F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA54 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA59 00                         		dc.b 0
0001FA5A 0A                         @allred:	dc.b $A
0001FA5B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FA60 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FA65 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA6A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FA6F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA74 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FA79 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FA7E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA83 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA88 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA8E 00                         		even
0001FA8E 00                         		even
0001FA8E                            
0001FA8E                            ; ---------------------------------------------------------------------------
0001FA8E                            ; Add points subroutine
0001FA8E                            ; ---------------------------------------------------------------------------
0001FA8E                            
0001FA8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA8E                            
0001FA8E                            
0001FA8E                            AddPoints:
0001FA8E 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FA94                            
0001FA94                            
0001FA94 47F8 FE26                  			lea     (v_score).w,a3
0001FA98 D193                       			add.l   d0,(a3)
0001FA9A 223C 000F 423F             			move.l  #999999,d1
0001FAA0 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FAA2 6200                       			bhi.s   @belowmax ; if yes, branch
0001FAA4 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FAA6                            		@belowmax:
0001FAA6 2013                       			move.l  (a3),d0
0001FAA8 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FAAC 6500                       			blo.s   @noextralife ; if not, branch
0001FAAE                            
0001FAAE 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FAB6 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FABA 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FABC 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FAC0 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FACE                            
0001FACE                            @locret_1C6B6:
0001FACE                            @noextralife:
0001FACE 4E75                       		rts	
0001FAD0                            ; End of function AddPoints
0001FAD0                            
0001FAD0                            		include	"_inc\HUD_Update.asm"
0001FAD0                            ; ---------------------------------------------------------------------------
0001FAD0                            ; Subroutine to	update the HUD
0001FAD0                            ; ---------------------------------------------------------------------------
0001FAD0                            
0001FAD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FAD0                            
0001FAD0                            hudVRAM:	macro loc
0001FAD0                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FAD0                            		endm
0001FAD0                            
0001FAD0                            
0001FAD0                            HUD_Update:
0001FAD0 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FAD4 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FAD8 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FADC 6700                       		beq.s	@chkrings	; if not, branch
0001FADE                            
0001FADE 4238 FE1F                  		clr.b	(f_scorecount).w
0001FAE2 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FAE8 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FAEC 6100 0000                  		bsr.w	Hud_Score
0001FAF0                            
0001FAF0                            	@chkrings:
0001FAF0 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FAF4 6700                       		beq.s	@chktime	; if not, branch
0001FAF6 6A00                       		bpl.s	@notzero
0001FAF8 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FAFC                            
0001FAFC                            	@notzero:
0001FAFC 4238 FE1D                  		clr.b	(f_ringcount).w
0001FB00 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FB06 7200                       		moveq	#0,d1
0001FB08 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FB0C 6100 0000                  		bsr.w	Hud_Rings
0001FB10                            
0001FB10                            	@chktime:
0001FB10 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FB14 6700                       		beq.s	@chklives	; if not, branch
0001FB16 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FB1A 6600                       		bne.s	@chklives	; if yes, branch
0001FB1C 43F8 FE22                  		lea	(v_time).w,a1
0001FB20 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FB26 6700                       		beq.s	TimeOver	; if yes, branch
0001FB28                            
0001FB28 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FB2A 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FB2E 6500                       		bcs.s	@chklives
0001FB30 12BC 0000                  		move.b	#0,(a1)
0001FB34 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FB36 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FB3A 6500                       		bcs.s	@updatetime
0001FB3C 12BC 0000                  		move.b	#0,(a1)
0001FB40 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FB42 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FB46 6500                       		bcs.s	@updatetime
0001FB48 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FB4C                            
0001FB4C                            	@updatetime:
0001FB4C 203C 5E40 0003             		hudVRAM	$DE40
0001FB52 7200                       		moveq	#0,d1
0001FB54 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FB58 6100 0000                  		bsr.w	Hud_Mins
0001FB5C 203C 5EC0 0003             		hudVRAM	$DEC0
0001FB62 7200                       		moveq	#0,d1
0001FB64 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FB68 6100 0000                  		bsr.w	Hud_Secs
0001FB6C                            
0001FB6C                            	@chklives:
0001FB6C 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FB70 6700                       		beq.s	@chkbonus	; if not, branch
0001FB72 4238 FE1C                  		clr.b	(f_lifecount).w
0001FB76 6100 0000                  		bsr.w	Hud_Lives
0001FB7A                            
0001FB7A                            	@chkbonus:
0001FB7A 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FB7E 6700                       		beq.s	@finish		; if not, branch
0001FB80 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FB8E 7200                       		moveq	#0,d1
0001FB90 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FB94 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB98 7200                       		moveq	#0,d1
0001FB9A 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FB9E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FBA2                            
0001FBA2                            	@finish:
0001FBA2 4E75                       		rts	
0001FBA4                            ; ===========================================================================
0001FBA4                            
0001FBA4                            TimeOver:
0001FBA4 4238 FE1E                  		clr.b	(f_timecount).w
0001FBA8 41F8 D000                  		lea	(v_player).w,a0
0001FBAC 2448                       		movea.l	a0,a2
0001FBAE 6100 E82E                  		bsr.w	KillSonic
0001FBB2 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FBB8 4E75                       		rts	
0001FBBA                            ; ===========================================================================
0001FBBA                            
0001FBBA                            HudDebug:
0001FBBA 6100 0000                  		bsr.w	HudDb_XY
0001FBBE 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FBC2 6700                       		beq.s	@objcounter	; if not, branch
0001FBC4 6A00                       		bpl.s	@notzero
0001FBC6 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FBCA                            
0001FBCA                            	@notzero:
0001FBCA 4238 FE1D                  		clr.b	(f_ringcount).w
0001FBCE 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FBD4 7200                       		moveq	#0,d1
0001FBD6 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FBDA 6100 0000                  		bsr.w	Hud_Rings
0001FBDE                            
0001FBDE                            	@objcounter:
0001FBDE 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FBE4 7200                       		moveq	#0,d1
0001FBE6 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FBEA 6100 0000                  		bsr.w	Hud_Secs
0001FBEE 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FBF2 6700                       		beq.s	@chkbonus	; if not, branch
0001FBF4 4238 FE1C                  		clr.b	(f_lifecount).w
0001FBF8 6100 0000                  		bsr.w	Hud_Lives
0001FBFC                            
0001FBFC                            	@chkbonus:
0001FBFC 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FC00 6700                       		beq.s	@finish		; if not, branch
0001FC02 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FC10 7200                       		moveq	#0,d1
0001FC12 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FC16 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FC1A 7200                       		moveq	#0,d1
0001FC1C 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FC20 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FC24                            
0001FC24                            	@finish:
0001FC24 4E75                       		rts	
0001FC26                            ; End of function HUD_Update
0001FC26                            
0001FC26                            ; ---------------------------------------------------------------------------
0001FC26                            ; Subroutine to	load "0" on the	HUD
0001FC26                            ; ---------------------------------------------------------------------------
0001FC26                            
0001FC26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC26                            
0001FC26                            
0001FC26                            Hud_LoadZero:
0001FC30 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FC34 343C 0002                  		move.w	#2,d2
0001FC38 6000                       		bra.s	loc_1C83E
0001FC3A                            ; End of function Hud_LoadZero
0001FC3A                            
0001FC3A                            ; ---------------------------------------------------------------------------
0001FC3A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FC3A                            ; ---------------------------------------------------------------------------
0001FC3A                            
0001FC3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC3A                            
0001FC3A                            
0001FC3A                            Hud_Base:
0001FC3A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FC40 6100 0000                  		bsr.w	Hud_Lives
0001FC4E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FC52 343C 000E                  		move.w	#$E,d2
0001FC56                            
0001FC56                            loc_1C83E:
0001FC56 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC5A                            
0001FC5A                            loc_1C842:
0001FC5A 323C 000F                  		move.w	#$F,d1
0001FC5E 101A                       		move.b	(a2)+,d0
0001FC60 6B00                       		bmi.s	loc_1C85E
0001FC62 4880                       		ext.w	d0
0001FC64 EB48                       		lsl.w	#5,d0
0001FC66 47F1 0000                  		lea	(a1,d0.w),a3
0001FC6A                            
0001FC6A                            loc_1C852:
0001FC6A 2C9B                       		move.l	(a3)+,(a6)
0001FC6C 51C9 FFFC                  		dbf	d1,loc_1C852
0001FC70                            
0001FC70                            loc_1C858:
0001FC70 51CA FFE8                  		dbf	d2,loc_1C842
0001FC74                            
0001FC74 4E75                       		rts	
0001FC76                            ; ===========================================================================
0001FC76                            
0001FC76                            loc_1C85E:
0001FC76 2CBC 0000 0000             		move.l	#0,(a6)
0001FC7C 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FC80                            
0001FC80 60EE                       		bra.s	loc_1C858
0001FC82                            ; End of function Hud_Base
0001FC82                            
0001FC82                            ; ===========================================================================
0001FC82 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FC8E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FC92                            ; ---------------------------------------------------------------------------
0001FC92                            ; Subroutine to	load debug mode	numbers	patterns
0001FC92                            ; ---------------------------------------------------------------------------
0001FC92                            
0001FC92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC92                            
0001FC92                            
0001FC92                            HudDb_XY:
0001FC9C 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FCA0 4841                       		swap	d1
0001FCA2 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FCA6 6100                       		bsr.s	HudDb_XY2
0001FCA8 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FCAC 4841                       		swap	d1
0001FCAE 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FCB2                            ; End of function HudDb_XY
0001FCB2                            
0001FCB2                            
0001FCB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCB2                            
0001FCB2                            
0001FCB2                            HudDb_XY2:
0001FCB2 7C07                       		moveq	#7,d6
0001FCB4 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FCBA                            
0001FCBA                            HudDb_XYLoop:
0001FCBA E959                       		rol.w	#4,d1
0001FCBC 3401                       		move.w	d1,d2
0001FCBE 0242 000F                  		andi.w	#$F,d2
0001FCC2 0C42 000A                  		cmpi.w	#$A,d2
0001FCC6 6500                       		bcs.s	loc_1C8B2
0001FCC8 5E42                       		addq.w	#7,d2
0001FCCA                            
0001FCCA                            loc_1C8B2:
0001FCCA EB4A                       		lsl.w	#5,d2
0001FCCC 47F1 2000                  		lea	(a1,d2.w),a3
0001FCD0 2C9B                       		move.l	(a3)+,(a6)
0001FCD2 2C9B                       		move.l	(a3)+,(a6)
0001FCD4 2C9B                       		move.l	(a3)+,(a6)
0001FCD6 2C9B                       		move.l	(a3)+,(a6)
0001FCD8 2C9B                       		move.l	(a3)+,(a6)
0001FCDA 2C9B                       		move.l	(a3)+,(a6)
0001FCDC 2C9B                       		move.l	(a3)+,(a6)
0001FCDE 2C9B                       		move.l	(a3)+,(a6)
0001FCE0 4841                       		swap	d1
0001FCE2 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FCE6                            
0001FCE6 4E75                       		rts	
0001FCE8                            ; End of function HudDb_XY2
0001FCE8                            
0001FCE8                            ; ---------------------------------------------------------------------------
0001FCE8                            ; Subroutine to	load rings numbers patterns
0001FCE8                            ; ---------------------------------------------------------------------------
0001FCE8                            
0001FCE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCE8                            
0001FCE8                            
0001FCE8                            Hud_Rings:
0001FCE8 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FCEE 7C02                       		moveq	#2,d6
0001FCF0 6000                       		bra.s	Hud_LoadArt
0001FCF2                            ; End of function Hud_Rings
0001FCF2                            
0001FCF2                            ; ---------------------------------------------------------------------------
0001FCF2                            ; Subroutine to	load score numbers patterns
0001FCF2                            ; ---------------------------------------------------------------------------
0001FCF2                            
0001FCF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCF2                            
0001FCF2                            
0001FCF2                            Hud_Score:
0001FCF2 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FCF8 7C05                       		moveq	#5,d6
0001FCFA                            
0001FCFA                            Hud_LoadArt:
0001FCFA 7800                       		moveq	#0,d4
0001FCFC 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD00                            
0001FD00                            Hud_ScoreLoop:
0001FD00 7400                       		moveq	#0,d2
0001FD02 261A                       		move.l	(a2)+,d3
0001FD04                            
0001FD04                            loc_1C8EC:
0001FD04 9283                       		sub.l	d3,d1
0001FD06 6500                       		bcs.s	loc_1C8F4
0001FD08 5242                       		addq.w	#1,d2
0001FD0A 60F8                       		bra.s	loc_1C8EC
0001FD0C                            ; ===========================================================================
0001FD0C                            
0001FD0C                            loc_1C8F4:
0001FD0C D283                       		add.l	d3,d1
0001FD0E 4A42                       		tst.w	d2
0001FD10 6700                       		beq.s	loc_1C8FE
0001FD12 383C 0001                  		move.w	#1,d4
0001FD16                            
0001FD16                            loc_1C8FE:
0001FD16 4A44                       		tst.w	d4
0001FD18 6700                       		beq.s	loc_1C92C
0001FD1A ED4A                       		lsl.w	#6,d2
0001FD1C 2D40 0004                  		move.l	d0,4(a6)
0001FD20 47F1 2000                  		lea	(a1,d2.w),a3
0001FD24 2C9B                       		move.l	(a3)+,(a6)
0001FD26 2C9B                       		move.l	(a3)+,(a6)
0001FD28 2C9B                       		move.l	(a3)+,(a6)
0001FD2A 2C9B                       		move.l	(a3)+,(a6)
0001FD2C 2C9B                       		move.l	(a3)+,(a6)
0001FD2E 2C9B                       		move.l	(a3)+,(a6)
0001FD30 2C9B                       		move.l	(a3)+,(a6)
0001FD32 2C9B                       		move.l	(a3)+,(a6)
0001FD34 2C9B                       		move.l	(a3)+,(a6)
0001FD36 2C9B                       		move.l	(a3)+,(a6)
0001FD38 2C9B                       		move.l	(a3)+,(a6)
0001FD3A 2C9B                       		move.l	(a3)+,(a6)
0001FD3C 2C9B                       		move.l	(a3)+,(a6)
0001FD3E 2C9B                       		move.l	(a3)+,(a6)
0001FD40 2C9B                       		move.l	(a3)+,(a6)
0001FD42 2C9B                       		move.l	(a3)+,(a6)
0001FD44                            
0001FD44                            loc_1C92C:
0001FD44 0680 0040 0000             		addi.l	#$400000,d0
0001FD4A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FD4E                            
0001FD4E 4E75                       		rts	
0001FD50                            
0001FD50                            ; End of function Hud_Score
0001FD50                            ; End of function Hud_Score
0001FD50                            
0001FD50                            ; ---------------------------------------------------------------------------
0001FD50                            ; Subroutine to	load countdown numbers on the continue screen
0001FD50                            ; ---------------------------------------------------------------------------
0001FD50                            
0001FD50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD50                            
0001FD50                            
0001FD50                            ContScrCounter:
0001FD5A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FD60 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FD66 7C01                       		moveq	#1,d6
0001FD68 7800                       		moveq	#0,d4
0001FD6A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FD6E                            
0001FD6E                            ContScr_Loop:
0001FD6E 7400                       		moveq	#0,d2
0001FD70 261A                       		move.l	(a2)+,d3
0001FD72                            
0001FD72                            loc_1C95A:
0001FD72 9283                       		sub.l	d3,d1
0001FD74 6500                       		blo.s	loc_1C962
0001FD76 5242                       		addq.w	#1,d2
0001FD78 60F8                       		bra.s	loc_1C95A
0001FD7A                            ; ===========================================================================
0001FD7A                            
0001FD7A                            loc_1C962:
0001FD7A D283                       		add.l	d3,d1
0001FD7C ED4A                       		lsl.w	#6,d2
0001FD7E 47F1 2000                  		lea	(a1,d2.w),a3
0001FD82 2C9B                       		move.l	(a3)+,(a6)
0001FD84 2C9B                       		move.l	(a3)+,(a6)
0001FD86 2C9B                       		move.l	(a3)+,(a6)
0001FD88 2C9B                       		move.l	(a3)+,(a6)
0001FD8A 2C9B                       		move.l	(a3)+,(a6)
0001FD8C 2C9B                       		move.l	(a3)+,(a6)
0001FD8E 2C9B                       		move.l	(a3)+,(a6)
0001FD90 2C9B                       		move.l	(a3)+,(a6)
0001FD92 2C9B                       		move.l	(a3)+,(a6)
0001FD94 2C9B                       		move.l	(a3)+,(a6)
0001FD96 2C9B                       		move.l	(a3)+,(a6)
0001FD98 2C9B                       		move.l	(a3)+,(a6)
0001FD9A 2C9B                       		move.l	(a3)+,(a6)
0001FD9C 2C9B                       		move.l	(a3)+,(a6)
0001FD9E 2C9B                       		move.l	(a3)+,(a6)
0001FDA0 2C9B                       		move.l	(a3)+,(a6)
0001FDA2 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FDA6                            
0001FDA6 4E75                       		rts	
0001FDA8                            ; End of function ContScrCounter
0001FDA8                            
0001FDA8                            ; ===========================================================================
0001FDA8                            
0001FDA8                            		include	"_inc\HUD (part 2).asm"
0001FDA8                            ; ---------------------------------------------------------------------------
0001FDA8                            ; HUD counter sizes
0001FDA8                            ; ---------------------------------------------------------------------------
0001FDA8 0001 86A0                  Hud_100000:	dc.l 100000
0001FDAC 0000 2710                  Hud_10000:	dc.l 10000
0001FDB0 0000 03E8                  Hud_1000:	dc.l 1000
0001FDB4 0000 0064                  Hud_100:	dc.l 100
0001FDB8 0000 000A                  Hud_10:		dc.l 10
0001FDBC 0000 0001                  Hud_1:		dc.l 1
0001FDC0                            
0001FDC0                            ; ---------------------------------------------------------------------------
0001FDC0                            ; Subroutine to	load time numbers patterns
0001FDC0                            ; ---------------------------------------------------------------------------
0001FDC0                            
0001FDC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDC0                            
0001FDC0                            
0001FDC0                            Hud_Mins:
0001FDC0 45F9 0001 FDBC             		lea	(Hud_1).l,a2
0001FDC6 7C00                       		moveq	#0,d6
0001FDC8 6000                       		bra.s	loc_1C9BA
0001FDCA                            ; End of function Hud_Mins
0001FDCA                            
0001FDCA                            
0001FDCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDCA                            
0001FDCA                            
0001FDCA                            Hud_Secs:
0001FDCA 45F9 0001 FDB8             		lea	(Hud_10).l,a2
0001FDD0 7C01                       		moveq	#1,d6
0001FDD2                            
0001FDD2                            loc_1C9BA:
0001FDD2 7800                       		moveq	#0,d4
0001FDD4 43FA 0000                  		lea	Art_Hud(pc),a1
0001FDD8                            
0001FDD8                            Hud_TimeLoop:
0001FDD8 7400                       		moveq	#0,d2
0001FDDA 261A                       		move.l	(a2)+,d3
0001FDDC                            
0001FDDC                            loc_1C9C4:
0001FDDC 9283                       		sub.l	d3,d1
0001FDDE 6500                       		bcs.s	loc_1C9CC
0001FDE0 5242                       		addq.w	#1,d2
0001FDE2 60F8                       		bra.s	loc_1C9C4
0001FDE4                            ; ===========================================================================
0001FDE4                            
0001FDE4                            loc_1C9CC:
0001FDE4 D283                       		add.l	d3,d1
0001FDE6 4A42                       		tst.w	d2
0001FDE8 6700                       		beq.s	loc_1C9D6
0001FDEA 383C 0001                  		move.w	#1,d4
0001FDEE                            
0001FDEE                            loc_1C9D6:
0001FDEE ED4A                       		lsl.w	#6,d2
0001FDF0 2D40 0004                  		move.l	d0,4(a6)
0001FDF4 47F1 2000                  		lea	(a1,d2.w),a3
0001FDF8 2C9B                       		move.l	(a3)+,(a6)
0001FDFA 2C9B                       		move.l	(a3)+,(a6)
0001FDFC 2C9B                       		move.l	(a3)+,(a6)
0001FDFE 2C9B                       		move.l	(a3)+,(a6)
0001FE00 2C9B                       		move.l	(a3)+,(a6)
0001FE02 2C9B                       		move.l	(a3)+,(a6)
0001FE04 2C9B                       		move.l	(a3)+,(a6)
0001FE06 2C9B                       		move.l	(a3)+,(a6)
0001FE08 2C9B                       		move.l	(a3)+,(a6)
0001FE0A 2C9B                       		move.l	(a3)+,(a6)
0001FE0C 2C9B                       		move.l	(a3)+,(a6)
0001FE0E 2C9B                       		move.l	(a3)+,(a6)
0001FE10 2C9B                       		move.l	(a3)+,(a6)
0001FE12 2C9B                       		move.l	(a3)+,(a6)
0001FE14 2C9B                       		move.l	(a3)+,(a6)
0001FE16 2C9B                       		move.l	(a3)+,(a6)
0001FE18 0680 0040 0000             		addi.l	#$400000,d0
0001FE1E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FE22                            
0001FE22 4E75                       		rts	
0001FE24                            ; End of function Hud_Secs
0001FE24                            
0001FE24                            ; ---------------------------------------------------------------------------
0001FE24                            ; Subroutine to	load time/ring bonus numbers patterns
0001FE24                            ; ---------------------------------------------------------------------------
0001FE24                            
0001FE24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE24                            
0001FE24                            
0001FE24                            Hud_TimeRingBonus:
0001FE24 45F9 0001 FDB0             		lea	(Hud_1000).l,a2
0001FE2A 7C03                       		moveq	#3,d6
0001FE2C 7800                       		moveq	#0,d4
0001FE2E 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE32                            
0001FE32                            Hud_BonusLoop:
0001FE32 7400                       		moveq	#0,d2
0001FE34 261A                       		move.l	(a2)+,d3
0001FE36                            
0001FE36                            loc_1CA1E:
0001FE36 9283                       		sub.l	d3,d1
0001FE38 6500                       		bcs.s	loc_1CA26
0001FE3A 5242                       		addq.w	#1,d2
0001FE3C 60F8                       		bra.s	loc_1CA1E
0001FE3E                            ; ===========================================================================
0001FE3E                            
0001FE3E                            loc_1CA26:
0001FE3E D283                       		add.l	d3,d1
0001FE40 4A42                       		tst.w	d2
0001FE42 6700                       		beq.s	loc_1CA30
0001FE44 383C 0001                  		move.w	#1,d4
0001FE48                            
0001FE48                            loc_1CA30:
0001FE48 4A44                       		tst.w	d4
0001FE4A 6700                       		beq.s	Hud_ClrBonus
0001FE4C ED4A                       		lsl.w	#6,d2
0001FE4E 47F1 2000                  		lea	(a1,d2.w),a3
0001FE52 2C9B                       		move.l	(a3)+,(a6)
0001FE54 2C9B                       		move.l	(a3)+,(a6)
0001FE56 2C9B                       		move.l	(a3)+,(a6)
0001FE58 2C9B                       		move.l	(a3)+,(a6)
0001FE5A 2C9B                       		move.l	(a3)+,(a6)
0001FE5C 2C9B                       		move.l	(a3)+,(a6)
0001FE5E 2C9B                       		move.l	(a3)+,(a6)
0001FE60 2C9B                       		move.l	(a3)+,(a6)
0001FE62 2C9B                       		move.l	(a3)+,(a6)
0001FE64 2C9B                       		move.l	(a3)+,(a6)
0001FE66 2C9B                       		move.l	(a3)+,(a6)
0001FE68 2C9B                       		move.l	(a3)+,(a6)
0001FE6A 2C9B                       		move.l	(a3)+,(a6)
0001FE6C 2C9B                       		move.l	(a3)+,(a6)
0001FE6E 2C9B                       		move.l	(a3)+,(a6)
0001FE70 2C9B                       		move.l	(a3)+,(a6)
0001FE72                            
0001FE72                            loc_1CA5A:
0001FE72 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FE76                            
0001FE76 4E75                       		rts	
0001FE78                            ; ===========================================================================
0001FE78                            
0001FE78                            Hud_ClrBonus:
0001FE78 7A0F                       		moveq	#$F,d5
0001FE7A                            
0001FE7A                            Hud_ClrBonusLoop:
0001FE7A 2CBC 0000 0000             		move.l	#0,(a6)
0001FE80 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FE84                            
0001FE84 60EC                       		bra.s	loc_1CA5A
0001FE86                            ; End of function Hud_TimeRingBonus
0001FE86                            
0001FE86                            ; ---------------------------------------------------------------------------
0001FE86                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FE86                            ; ---------------------------------------------------------------------------
0001FE86                            
0001FE86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE86                            
0001FE86                            
0001FE86                            Hud_Lives:
0001FE86 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FE8C 7200                       		moveq	#0,d1
0001FE8E 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FE92 45F9 0001 FDB8             		lea	(Hud_10).l,a2
0001FE98 7C01                       		moveq	#1,d6
0001FE9A 7800                       		moveq	#0,d4
0001FE9C 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FEA0                            		
0001FEA0                            
0001FEA0                            Hud_LivesLoop:
0001FEA0 2D40 0004                  		move.l	d0,4(a6)
0001FEA4 7400                       		moveq	#0,d2
0001FEA6 261A                       		move.l	(a2)+,d3
0001FEA8                            
0001FEA8                            loc_1CA90:
0001FEA8 9283                       		sub.l	d3,d1
0001FEAA 6500                       		bcs.s	loc_1CA98
0001FEAC 5242                       		addq.w	#1,d2
0001FEAE 60F8                       		bra.s	loc_1CA90
0001FEB0                            ; ===========================================================================
0001FEB0                            
0001FEB0                            loc_1CA98:
0001FEB0 D283                       		add.l	d3,d1
0001FEB2 4A42                       		tst.w	d2
0001FEB4 6700                       		beq.s	loc_1CAA2
0001FEB6 383C 0001                  		move.w	#1,d4
0001FEBA                            
0001FEBA                            loc_1CAA2:
0001FEBA 4A44                       		tst.w	d4
0001FEBC 6700                       		beq.s	Hud_ClrLives
0001FEBE                            
0001FEBE                            loc_1CAA6:
0001FEBE EB4A                       		lsl.w	#5,d2
0001FEC0 47F1 2000                  		lea	(a1,d2.w),a3
0001FEC4 2C9B                       		move.l	(a3)+,(a6)
0001FEC6 2C9B                       		move.l	(a3)+,(a6)
0001FEC8 2C9B                       		move.l	(a3)+,(a6)
0001FECA 2C9B                       		move.l	(a3)+,(a6)
0001FECC 2C9B                       		move.l	(a3)+,(a6)
0001FECE 2C9B                       		move.l	(a3)+,(a6)
0001FED0 2C9B                       		move.l	(a3)+,(a6)
0001FED2 2C9B                       		move.l	(a3)+,(a6)
0001FED4                            
0001FED4                            loc_1CABC:
0001FED4 0680 0040 0000             		addi.l	#$400000,d0
0001FEDA 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FEDE                            
0001FEDE 4E75                       		rts	
0001FEE0                            ; ===========================================================================
0001FEE0                            
0001FEE0                            Hud_ClrLives:
0001FEE0 4A46                       		tst.w	d6
0001FEE2 67DA                       		beq.s	loc_1CAA6
0001FEE4 7A07                       		moveq	#7,d5
0001FEE6                            
0001FEE6                            Hud_ClrLivesLoop:
0001FEE6 2CBC 0000 0000             		move.l	#0,(a6)
0001FEEC 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FEF0 60E2                       		bra.s	loc_1CABC
0001FEF2                            ; End of function Hud_Lives
0001FEF2                            ; End of function Hud_Lives
0001FEF2                            
0001FEF2                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
000201F2                            		even
000201F2                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020332                            		even
00020332                            
00020332                            		include	"_incObj\DebugMode.asm"
00020332                            ; ---------------------------------------------------------------------------
00020332                            ; When debug mode is currently in use
00020332                            ; ---------------------------------------------------------------------------
00020332                            
00020332                            DebugMode:
00020332 7000                       		moveq	#0,d0
00020334 1038 FE08                  		move.b	(v_debuguse).w,d0
00020338 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0002033C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020340                            ; ===========================================================================
00020340 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020342 0000                       		dc.w Debug_Action-Debug_Index
00020344                            ; ===========================================================================
00020344                            
00020344                            Debug_Main:	; Routine 0
00020344 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020348 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
0002034E 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020354 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
0002035A 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020360 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020366 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
0002036C 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00020372 117C 0000 001A             		move.b	#0,obFrame(a0)
00020378 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0002037E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00020384 6600                       		bne.s	@islevel	; if not, branch
00020386                            
00020386 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
0002038C 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
00020392 7006                       		moveq	#6,d0		; use 6th debug	item list
00020394 6000                       		bra.s	@selectlist
00020396                            ; ===========================================================================
00020396                            
00020396                            @islevel:
00020396 7000                       		moveq	#0,d0
00020398 1038 FE10                  		move.b	(v_zone).w,d0
0002039C                            
0002039C                            @selectlist:
0002039C 45F9 0000 0000             		lea	(DebugList).l,a2
000203A2 D040                       		add.w	d0,d0
000203A4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000203A8 3C1A                       		move.w	(a2)+,d6
000203AA BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000203AE 6200                       		bhi.s	@noreset	; if not, branch
000203B0 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000203B6                            
000203B6                            	@noreset:
000203B6 6100 0000                  		bsr.w	Debug_ShowItem
000203BA 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000203C0 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000203C6                            
000203C6                            Debug_Action:	; Routine 2
000203C6 7006                       		moveq	#6,d0
000203C8 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
000203CE 6700                       		beq.s	@isntlevel
000203D0                            
000203D0 7000                       		moveq	#0,d0
000203D2 1038 FE10                  		move.b	(v_zone).w,d0
000203D6                            
000203D6                            	@isntlevel:
000203D6 45F9 0000 0000             		lea	(DebugList).l,a2
000203DC D040                       		add.w	d0,d0
000203DE D4F2 0000                  		adda.w	(a2,d0.w),a2
000203E2 3C1A                       		move.w	(a2)+,d6
000203E4 6100 0000                  		bsr.w	Debug_Control
000203E8 4EF9 0000 F43A             		jmp	(DisplaySprite).l
000203EE                            
000203EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000203EE                            
000203EE                            
000203EE                            Debug_Control:
000203EE 7800                       		moveq	#0,d4
000203F0 323C 0001                  		move.w	#1,d1
000203F4 1838 F605                  		move.b	(v_jpadpress1).w,d4
000203F8 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
000203FC 6600                       		bne.s	@dirpressed	; if yes, branch
000203FE                            
000203FE 1038 F604                  		move.b	(v_jpadhold1).w,d0
00020402 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00020406 6600                       		bne.s	@dirheld	; if yes, branch
00020408                            
00020408 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002040E 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
00020414 6000 0000                  		bra.w	Debug_ChgItem
00020418                            ; ===========================================================================
00020418                            
00020418                            @dirheld:
00020418 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
0002041C 6600                       		bne.s	loc_1D01C
0002041E 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
00020424 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020428 6600                       		bne.s	@dirpressed
0002042A 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020430                            
00020430                            @dirpressed:
00020430 1838 F604                  		move.b	(v_jpadhold1).w,d4
00020434                            
00020434                            loc_1D01C:
00020434 7200                       		moveq	#0,d1
00020436 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
0002043A 5241                       		addq.w	#1,d1
0002043C 4841                       		swap	d1
0002043E E881                       		asr.l	#4,d1
00020440 2428 000C                  		move.l	obY(a0),d2
00020444 2628 0008                  		move.l	obX(a0),d3
00020448 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
0002044C 6700                       		beq.s	loc_1D03C	; if not, branch
0002044E 9481                       		sub.l	d1,d2
00020450 6400                       		bcc.s	loc_1D03C
00020452 7400                       		moveq	#0,d2
00020454                            
00020454                            loc_1D03C:
00020454 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020458 6700                       		beq.s	loc_1D052	; if not, branch
0002045A D481                       		add.l	d1,d2
0002045C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00020462 6500                       		bcs.s	loc_1D052
00020464 243C 07FF 0000             		move.l	#$7FF0000,d2
0002046A                            
0002046A                            loc_1D052:
0002046A 0804 0002                  		btst	#bitL,d4
0002046E 6700                       		beq.s	loc_1D05E
00020470 9681                       		sub.l	d1,d3
00020472 6400                       		bcc.s	loc_1D05E
00020474 7600                       		moveq	#0,d3
00020476                            
00020476                            loc_1D05E:
00020476 0804 0003                  		btst	#bitR,d4
0002047A 6700                       		beq.s	loc_1D066
0002047C D681                       		add.l	d1,d3
0002047E                            
0002047E                            loc_1D066:
0002047E 2142 000C                  		move.l	d2,obY(a0)
00020482 2143 0008                  		move.l	d3,obX(a0)
00020486                            
00020486                            Debug_ChgItem:
00020486 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
0002048C 6700                       		beq.s	@createitem	; if not, branch
0002048E 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020494 6700                       		beq.s	@nextitem	; if not, branch
00020496 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
0002049A 6400                       		bcc.s	@display
0002049C DD38 FE06                  		add.b	d6,(v_debugitem).w
000204A0 6000                       		bra.s	@display
000204A2                            ; ===========================================================================
000204A2                            
000204A2                            @nextitem:
000204A2 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000204A8 6700                       		beq.s	@createitem	; if not, branch
000204AA 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000204AE BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000204B2 6200                       		bhi.s	@display
000204B4 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000204BA                            
000204BA                            	@display:
000204BA 6000 0000                  		bra.w	Debug_ShowItem
000204BE                            ; ===========================================================================
000204BE                            
000204BE                            @createitem:
000204BE 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000204C4 6700                       		beq.s	@backtonormal	; if not, branch
000204C6 4EB9 0000 F9D4             		jsr	(FindFreeObj).l
000204CC 6600                       		bne.s	@backtonormal
000204CE 3368 0008 0008             		move.w	obX(a0),obX(a1)
000204D4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000204DA 12A8 0004                  		move.b	4(a0),0(a1)	; create object
000204DE 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000204E4 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
000204EA 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
000204F0 7000                       		moveq	#0,d0
000204F2 1038 FE06                  		move.b	(v_debugitem).w,d0
000204F6 E748                       		lsl.w	#3,d0
000204F8 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
000204FE 4E75                       		rts	
00020500                            ; ===========================================================================
00020500                            
00020500                            @backtonormal:
00020500 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00020506 6700                       		beq.s	@stayindebug	; if not, branch
00020508 7000                       		moveq	#0,d0
0002050A 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
0002050E 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020516 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002051C 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020520 3140 000A                  		move.w	d0,obX+2(a0)
00020524 3140 000E                  		move.w	d0,obY+2(a0)
00020528 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
0002052E 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
00020534 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
0002053A 6600                       		bne.s	@stayindebug	; if not, branch
0002053C                            
0002053C 4278 F780                  		clr.w	(v_ssangle).w
00020540 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020546 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002054E 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020554 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
0002055A 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020560 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
00020566                            
00020566                            	@stayindebug:
00020566 4E75                       		rts	
00020568                            ; End of function Debug_Control
00020568                            
00020568                            
00020568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020568                            
00020568                            
00020568                            Debug_ShowItem:
00020568 7000                       		moveq	#0,d0
0002056A 1038 FE06                  		move.b	(v_debugitem).w,d0
0002056E E748                       		lsl.w	#3,d0
00020570 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
00020576 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
0002057C 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
00020582 4E75                       		rts	
00020584                            ; End of function Debug_ShowItem
00020584                            ; End of function Debug_ShowItem
00020584                            		include	"_inc\DebugList.asm"
00020584                            ; ---------------------------------------------------------------------------
00020584                            ; Debug	mode item lists
00020584                            ; ---------------------------------------------------------------------------
00020584                            DebugList:
00020584 0000                       	dc.w @GHZ-DebugList
00020586 0000                       	dc.w @LZ-DebugList
00020588 0000                       	dc.w @MZ-DebugList
0002058A 0000                       	dc.w @SLZ-DebugList
0002058C 0000                       	dc.w @SYZ-DebugList
0002058E 0000                       	dc.w @SBZ-DebugList
00020590 0000                       	dc.w @Ending-DebugList
00020592                            
00020592                            dbug:	macro map,object,subtype,frame,vram
00020592                            	dc.l map+(object<<24)
00020592                            	dc.b subtype,frame
00020592                            	dc.w vram
00020592                            	endm
00020592                            
00020592                            @GHZ:
00020592 0000                       	dc.w (@GHZend-@GHZ-2)/8
00020594                            
00020594                            ;		mappings	object		subtype	frame	VRAM setting
00020594 2500 BA5A 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
0002059C 2600 C204 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000205A4 1F00 AE3A 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000205AC 2200 B2C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000205B4 2B00 C9A6 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000205BC 3600 EDE4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000205C4 1800 97E0 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
000205CC 3B00 EF0A 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
000205D4 4001 15CC 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
000205DC 4100 FC66 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000205E4 4200 FE8C 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
000205EC 4401 019A 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
000205F4 7901 A08E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000205FC 4B00 BAAA 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00020604 7D01 A250 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
0002060C                            	@GHZend:
0002060C                            
0002060C                            @LZ:
0002060C 0000                       	dc.w (@LZend-@LZ-2)/8
0002060E                            
0002060E                            ;		mappings	object		subtype	frame	VRAM setting
0002060E 2500 BA5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020616 2600 C204 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002061E 4100 FC66 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020626 2C00 CA4C 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
0002062E 2D00 CC38 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
00020636 1601 3F8E 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
0002063E 1601 3F8E 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
00020646 3300 E0B6 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
0002064E 3200 DC76 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020656 3600 EDE4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002065E 5201 2064 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
00020666 6101 41B6 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
0002066E 6101 41B6 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
00020676 6101 41B6 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
0002067E 6201 430A 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
00020686 6101 41B6 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
0002068E 6101 41B6 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
00020696 6301 466C 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
0002069E 6001 3ED8 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000206A6 6401 49BA 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000206AE 6501 4B42 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000206B6 6501 4B42 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000206BE 0B01 3324 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000206C6 0C01 33F4 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
000206CE 7901 A08E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000206D6                            	@LZend:
000206D6                            
000206D6                            @MZ:
000206D6 0000                       	dc.w (@MZend-@MZ-2)/8
000206D8                            
000206D8                            ;		mappings	object		subtype	frame	VRAM setting
000206D8 2500 BA5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000206E0 2600 C204 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206E8 2200 B2C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206F0 3600 EDE4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206F8 4100 FC66 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020700 1300 D146 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00020708 4601 084A 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00020710 6E01 912A 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020718 6A01 8AA4 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020720 3300 E0B6 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020728 1E00 A552 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020730 5101 1D8A 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020738 5201 200E 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
00020740 5300 9E22 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020748 5401 1132 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
00020750 5501 2202 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020758 7801 9CFA 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020760 7901 A08E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020768                            	@MZend:
00020768                            
00020768                            @SLZ:
00020768 0000                       	dc.w (@SLZend-@SLZ-2)/8
0002076A                            
0002076A                            ;		mappings	object		subtype	frame	VRAM setting
0002076A 2500 BA5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020772 2600 C204 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002077A 5901 2D4C 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
00020782 5300 9E22 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
0002078A 1800 983E 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
00020792 5A01 2E86 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
0002079A 5B01 303E 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000207A2 5D01 3612 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000207AA 5E01 39A4 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000207B2 4100 FC66 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000207BA 1300 D146 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000207C2 1C00 9F54 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
000207CA 5F01 3C22 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000207D2 6001 3ED8 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
000207DA 7901 A08E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000207E2                            	@SLZend:
000207E2                            
000207E2                            @SYZ:
000207E2 0000                       	dc.w (@SYZend-@SYZ-2)/8
000207E4                            
000207E4                            ;		mappings	object		subtype	frame	VRAM setting
000207E4 2500 BA5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207EC 2600 C204 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000207F4 3600 EDE4 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000207FC 4100 FC66 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020804 4301 00EC 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
0002080C 1201 08C8 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00020814 4701 0A6C 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
0002081C 1F00 AE3A 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020824 2200 B2C4 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002082C 5001 185C 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020834 1800 982C 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
0002083C 5601 270C 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020844 3200 DC76 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002084C 7801 9CFA 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020854 7901 A08E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002085C                            	@SYZend:
0002085C                            
0002085C                            @SBZ:
0002085C 0000                       	dc.w (@SBZend-@SBZ-2)/8
0002085E                            
0002085E                            ;		mappings	object		subtype	frame	VRAM setting
0002085E 2500 BA5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020866 2600 C204 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002086E 5F01 3C22 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020876 6001 3ED8 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
0002087E 7801 9CFA 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00020886 1501 2AA8 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
0002088E 6701 8592 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00020896 5201 200E 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
0002089E 3200 DC76 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000208A6 6901 87EC 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000208AE 6901 8846 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
000208B6 6A01 8AA4 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000208BE 5300 9E22 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
000208C6 5201 200E 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
000208CE 6B01 8E74 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
000208D6 2A00 A0E4 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
000208DE 6B01 8E74 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
000208E6 6A01 8AA4 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
000208EE 6B01 8E74 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
000208F6 6A01 8AA4 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
000208FE 6B01 8E74 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020906 6C01 9048 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
0002090E 6D01 053C 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020916 6D01 053C 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
0002091E 6E01 912A 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020926 7001 9570 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
0002092E 7101 34B8 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020936 1E00 A552 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
0002093E 7901 A08E 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020946                            	@SBZend:
00020946                            
00020946                            @Ending:
00020946 0000                       	dc.w (@Endingend-@Ending-2)/8
00020948                            
00020948                            ;		mappings	object		subtype	frame	VRAM setting
00020948 2500 BA5A 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020950 2500 BA5A 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020958                            	@Endingend:
00020958                            
00020958                            	even
00020958                            	even
00020958                            		include	"_inc\LevelHeaders.asm"
00020958                            ; ---------------------------------------------------------------------------
00020958                            ; Level Headers
00020958                            ; ---------------------------------------------------------------------------
00020958                            
00020958                            LevelHeaders:
00020958                            
00020958                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020958                            	dc.l (plc1<<24)+lvlgfx
00020958                            	dc.l (plc2<<24)+sixteen
00020958                            	dc.l twofivesix
00020958                            	dc.b 0, music, pal, pal
00020958                            	endm
00020958                            
00020958                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020958                            ; music (unused), palette (unused), palette
00020958                            
00020958                            ;		1st PLC				2nd PLC				256x256 data			palette
00020958                            ;				level gfx*			16x16 data			music*
00020958                            
00020958 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020968 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020978 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020988 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020998 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
000209A8 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
000209B8 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
000209C8                            	even
000209C8                            
000209C8                            ;	* music and level gfx are actually set elsewhere, so these values are useless
000209C8                            ;	* music and level gfx are actually set elsewhere, so these values are useless
000209C8                            		include	"_inc\Pattern Load Cues.asm"
000209C8                            ; ---------------------------------------------------------------------------
000209C8                            ; Pattern load cues
000209C8                            ; ---------------------------------------------------------------------------
000209C8                            ArtLoadCues:
000209C8                            
000209C8 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
000209CA 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
000209CC 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
000209CE 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
000209D0                            PLC_Levels:
000209D0 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
000209D2 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
000209D4 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
000209D6 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
000209D8 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
000209DA 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
000209DC 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
000209DE 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
000209E0 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
000209E2 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
000209E4 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
000209E6 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
000209E8 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
000209EA 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
000209EC 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
000209EE 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
000209F0 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
000209F2                            PLC_Animals:
000209F2 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
000209F4 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
000209F6 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
000209F8 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
000209FA 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
000209FC 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
000209FE 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020A00 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020A02 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020A04 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020A06 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020A08 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020A0A                            
00020A0A                            plcm:	macro gfx,vram
00020A0A                            	dc.l gfx
00020A0A                            	dc.w vram
00020A0A                            	endm
00020A0A                            
00020A0A                            ; ---------------------------------------------------------------------------
00020A0A                            ; Pattern load cues - standard block 1
00020A0A                            ; ---------------------------------------------------------------------------
00020A0A 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020A0C 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020A12 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020A18 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020A1E 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020A24 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
00020A2A                            	PLC_Mainend:
00020A2A                            ; ---------------------------------------------------------------------------
00020A2A                            ; Pattern load cues - standard block 2
00020A2A                            ; ---------------------------------------------------------------------------
00020A2A 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020A2C 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020A32                            	PLC_Main2end:
00020A32                            ; ---------------------------------------------------------------------------
00020A32                            ; Pattern load cues - explosion
00020A32                            ; ---------------------------------------------------------------------------
00020A32 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020A34 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020A3A                            	PLC_Explodeend:
00020A3A                            ; ---------------------------------------------------------------------------
00020A3A                            ; Pattern load cues - game/time	over
00020A3A                            ; ---------------------------------------------------------------------------
00020A3A 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020A3C 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020A42                            	PLC_GameOverend:
00020A42                            ; ---------------------------------------------------------------------------
00020A42                            ; Pattern load cues - Green Hill
00020A42                            ; ---------------------------------------------------------------------------
00020A42 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020A44 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020A4A 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020A50 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020A56 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020A5C 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020A62 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020A68 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020A6E 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020A74 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020A7A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A80 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A86 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A8C                            
00020A8C 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020A8E 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020A94 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020A9A 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020AA0 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020AA6 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020AAC 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020AB2                            		;plcm	Nem_Lives, $FA80	; lives	counter
00020AB2                            	PLC_GHZ2end:
00020AB2                            ; ---------------------------------------------------------------------------
00020AB2                            ; Pattern load cues - Labyrinth
00020AB2                            ; ---------------------------------------------------------------------------
00020AB2 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020AB4 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020ABA 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
00020AC0                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020AC0 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020AC6 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020ACC 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020AD2 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020AD8 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020ADE 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020AE4 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020AEA                            
00020AEA 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020AEC 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020AF2 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020AF8                            		;plcm	Nem_LzWheel, $7EC0	; wheel
00020AF8                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020AF8 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020AFE 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020B04 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020B0A 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020B10 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020B16 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B1C 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B22 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B28                            		;plcm	Nem_Lives, $FA80	; lives	counter
00020B28                            	PLC_LZ2end:
00020B28                            ; ---------------------------------------------------------------------------
00020B28                            ; Pattern load cues - Marble
00020B28                            ; ---------------------------------------------------------------------------
00020B28 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020B2A 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020B30 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
00020B36 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020B3C 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020B42 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020B48 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020B4E 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020B54 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020B5A 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020B60 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020B66                            
00020B66 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020B68 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020B6E 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020B74                            		;plcm	Nem_MzSwitch, $A260	; switch
00020B74 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B7A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B80 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B86 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020B8C 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020B92 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter
00020B98                            	PLC_MZ2end:
00020B98                            ; ---------------------------------------------------------------------------
00020B98                            ; Pattern load cues - Star Light
00020B98                            ; ---------------------------------------------------------------------------
00020B98 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020B9A 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020BA0 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020BA6 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020BAC 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020BB2 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020BB8 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020BBE 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020BC4 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020BCA 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BD0 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020BD6                            
00020BD6 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020BD8 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020BDE 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020BE4 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020BEA 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020BF0 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020BF6 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020BFC                            		;plcm	Nem_Lives, $FA80	; lives	counter
00020BFC                            	PLC_SLZ2end:
00020BFC                            ; ---------------------------------------------------------------------------
00020BFC                            ; Pattern load cues - Spring Yard
00020BFC                            ; ---------------------------------------------------------------------------
00020BFC 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020BFE 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020C04                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020C04                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020C04 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020C0A 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00020C10                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020C10 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020C16 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020C1C 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020C22 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
00020C28 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
00020C2E 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020C34                            
00020C34 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020C36                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020C36 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020C3C 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020C42 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020C48                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020C48 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
00020C4E                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020C4E 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C54 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C5A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C60 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C66 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter
00020C6C                            	PLC_SYZ2end:
00020C6C                            ; ---------------------------------------------------------------------------
00020C6C                            ; Pattern load cues - Scrap Brain
00020C6C                            ; ---------------------------------------------------------------------------
00020C6C 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020C6E 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020C74                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020C74                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020C74                            		;plcm	Nem_Girder, $5E00	; girder
00020C74 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020C7A 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020C80                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020C80 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020C86 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020C8C 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020C92 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020C98                            
00020C98 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020C9A 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
00020CA0 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020CA6 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020CAC                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020CAC 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020CB2 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020CB8 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020CBE 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020CC4 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020CCA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CD0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020CD6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CDC 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter
00020CE2                            	PLC_SBZ2end:
00020CE2                            ; ---------------------------------------------------------------------------
00020CE2                            ; Pattern load cues - title card
00020CE2                            ; ---------------------------------------------------------------------------
00020CE2 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020CE4 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020CEA                            	PLC_TitleCardend:
00020CEA                            ; ---------------------------------------------------------------------------
00020CEA                            ; Pattern load cues - act 3 boss
00020CEA                            ; ---------------------------------------------------------------------------
00020CEA 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020CEC 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020CF2 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020CF8 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020CFE 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020D04 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020D0A 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020D10 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020D16                            	PLC_Bossend:
00020D16                            ; ---------------------------------------------------------------------------
00020D16                            ; Pattern load cues - act 1/2 signpost
00020D16                            ; ---------------------------------------------------------------------------
00020D16 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020D18 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020D1E 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020D24 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020D2A                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020D2A                            	PLC_Signpostend:
00020D2A                            ; ---------------------------------------------------------------------------
00020D2A                            ; Pattern load cues - beta special stage warp effect
00020D2A                            ; ---------------------------------------------------------------------------
00020D2A                            PLC_Warp:
00020D2A                            	PLC_Warpend:
00020D2A                            ; ---------------------------------------------------------------------------
00020D2A                            ; Pattern load cues - special stage
00020D2A                            ; ---------------------------------------------------------------------------
00020D2A 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020D2C 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020D32 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020D38 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020D3E 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020D44 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020D4A 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020D50 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020D56 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020D5C 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020D62 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020D68 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020D6E 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020D74 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020D7A 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020D80                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020D80                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020D80                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020D80                            	PLC_SpeStageend:
00020D80                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020D80                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020D80                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020D80                            ; ---------------------------------------------------------------------------
00020D80                            ; Pattern load cues - GHZ animals
00020D80                            ; ---------------------------------------------------------------------------
00020D80 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020D82 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020D88 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020D8E                            	PLC_GHZAnimalsend:
00020D8E                            ; ---------------------------------------------------------------------------
00020D8E                            ; Pattern load cues - LZ animals
00020D8E                            ; ---------------------------------------------------------------------------
00020D8E 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020D90 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020D96 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020D9C                            	PLC_LZAnimalsend:
00020D9C                            ; ---------------------------------------------------------------------------
00020D9C                            ; Pattern load cues - MZ animals
00020D9C                            ; ---------------------------------------------------------------------------
00020D9C 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020D9E 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020DA4 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020DAA                            	PLC_MZAnimalsend:
00020DAA                            ; ---------------------------------------------------------------------------
00020DAA                            ; Pattern load cues - SLZ animals
00020DAA                            ; ---------------------------------------------------------------------------
00020DAA 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020DAC 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020DB2 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020DB8                            	PLC_SLZAnimalsend:
00020DB8                            ; ---------------------------------------------------------------------------
00020DB8                            ; Pattern load cues - SYZ animals
00020DB8                            ; ---------------------------------------------------------------------------
00020DB8 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020DBA 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020DC0 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020DC6                            	PLC_SYZAnimalsend:
00020DC6                            ; ---------------------------------------------------------------------------
00020DC6                            ; Pattern load cues - SBZ animals
00020DC6                            ; ---------------------------------------------------------------------------
00020DC6 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020DC8 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020DCE 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020DD4                            	PLC_SBZAnimalsend:
00020DD4                            ; ---------------------------------------------------------------------------
00020DD4                            ; Pattern load cues - special stage results screen
00020DD4                            ; ---------------------------------------------------------------------------
00020DD4 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020DD6 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020DDC 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020DE2                            	PLC_SpeStResultend:
00020DE2                            ; ---------------------------------------------------------------------------
00020DE2                            ; Pattern load cues - ending sequence
00020DE2                            ; ---------------------------------------------------------------------------
00020DE2 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020DE4 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020DEA 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020DF0 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020DF6                            		;plcm	Nem_EndFlower, $7400	; flowers
00020DF6 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020DFC 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020E02 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020E08 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020E0E 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020E14 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020E1A 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020E20 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020E26 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020E2C 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020E32                            	PLC_Endingend:
00020E32                            ; ---------------------------------------------------------------------------
00020E32                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020E32                            ; ---------------------------------------------------------------------------
00020E32 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020E34 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020E3A 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020E40 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020E46                            	PLC_TryAgainend:
00020E46                            ; ---------------------------------------------------------------------------
00020E46                            ; Pattern load cues - Eggman on SBZ 2
00020E46                            ; ---------------------------------------------------------------------------
00020E46 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020E48 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020E4E 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020E54 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020E5A                            	PLC_EggmanSBZ2end:
00020E5A                            ; ---------------------------------------------------------------------------
00020E5A                            ; Pattern load cues - final boss
00020E5A                            ; ---------------------------------------------------------------------------
00020E5A 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020E5C 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020E62 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020E68 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E6E 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020E74 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E7A                            	PLC_FZBossend:
00020E7A                            ; ---------------------------------------------------------------------------
00020E7A                            ; Pattern load cues - Eggman
00020E7A                            ; ---------------------------------------------------------------------------
00020E7A 0006                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020E7C 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E82 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020E88 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020E8E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020E94 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E9A 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020EA0                            	PLC_Eggend:
00020EA0                            		even
00020EA0                            ; ---------------------------------------------------------------------------
00020EA0                            ; Pattern load cue IDs
00020EA0                            ; ---------------------------------------------------------------------------
00020EA0 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020EA0 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020EA0 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020EA0 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020EA0 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020EA0 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020EA0 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020EA0 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020EA0 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020EA0 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020EA0 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020EA0 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020EA0 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020EA0 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020EA0 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020EA0 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020EA0 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020EA0 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020EA0 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020EA0 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020EA0 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020EA0 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020EA0 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020EA0 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020EA0 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020EA0 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020EA0 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020EA0 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020EA0 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020EA0 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020EA0 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020EA0 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020EA0 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020EA0 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020EA0                            
00021000                            			dcb.b	$300,$FF
00021300                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021770                            			even
00021770                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002186C                            			even
0002186C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002194C                            		even
0002194C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022DB8                            		even
00022DB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024898                            		even
00024898                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
000248CC                            		even
000248CC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024AFE 00                         		even		
00024AFE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024BBC                            		even
00024BBC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025064                            		even
00025064                            
00025064                            Map_Sonic:	include	"_maps\Sonic.asm"
00025064                            ; --------------------------------------------------------------------------------
00025064                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025064                            ; --------------------------------------------------------------------------------
00025064                            
00025064                            SME_xy6nv:	
00025064 0000 0000                  		dc.w SME_xy6nv_160-SME_xy6nv, SME_xy6nv_161-SME_xy6nv	
00025068 0000 0000                  		dc.w SME_xy6nv_176-SME_xy6nv, SME_xy6nv_1A4-SME_xy6nv	
0002506C 0000 0000                  		dc.w SME_xy6nv_1D7-SME_xy6nv, SME_xy6nv_1EC-SME_xy6nv	
00025070 0000 0000                  		dc.w SME_xy6nv_1FC-SME_xy6nv, SME_xy6nv_20C-SME_xy6nv	
00025074 0000 0000                  		dc.w SME_xy6nv_221-SME_xy6nv, SME_xy6nv_22C-SME_xy6nv	
00025078 0000 0000                  		dc.w SME_xy6nv_23C-SME_xy6nv, SME_xy6nv_24C-SME_xy6nv	
0002507C 0000 0000                  		dc.w SME_xy6nv_25C-SME_xy6nv, SME_xy6nv_271-SME_xy6nv	
00025080 0000 0000                  		dc.w SME_xy6nv_281-SME_xy6nv, SME_xy6nv_2A5-SME_xy6nv	
00025084 0000 0000                  		dc.w SME_xy6nv_2BF-SME_xy6nv, SME_xy6nv_2CA-SME_xy6nv	
00025088 0000 0000                  		dc.w SME_xy6nv_2DA-SME_xy6nv, SME_xy6nv_2EF-SME_xy6nv	
0002508C 0000 0000                  		dc.w SME_xy6nv_2FA-SME_xy6nv, SME_xy6nv_30A-SME_xy6nv	
00025090 0000 0000                  		dc.w SME_xy6nv_324-SME_xy6nv, SME_xy6nv_33E-SME_xy6nv	
00025094 0000 0000                  		dc.w SME_xy6nv_35D-SME_xy6nv, SME_xy6nv_372-SME_xy6nv	
00025098 0000 0000                  		dc.w SME_xy6nv_382-SME_xy6nv, SME_xy6nv_39C-SME_xy6nv	
0002509C 0000 0000                  		dc.w SME_xy6nv_3B1-SME_xy6nv, SME_xy6nv_3C1-SME_xy6nv	
000250A0 0000 0000                  		dc.w SME_xy6nv_3DB-SME_xy6nv, SME_xy6nv_3F0-SME_xy6nv	
000250A4 0000 0000                  		dc.w SME_xy6nv_3FB-SME_xy6nv, SME_xy6nv_406-SME_xy6nv	
000250A8 0000 0000                  		dc.w SME_xy6nv_420-SME_xy6nv, SME_xy6nv_435-SME_xy6nv	
000250AC 0000 0000                  		dc.w SME_xy6nv_440-SME_xy6nv, SME_xy6nv_450-SME_xy6nv	
000250B0 0000 0000                  		dc.w SME_xy6nv_460-SME_xy6nv, SME_xy6nv_47F-SME_xy6nv	
000250B4 0000 0000                  		dc.w SME_xy6nv_49E-SME_xy6nv, SME_xy6nv_4B3-SME_xy6nv	
000250B8 0000 0000                  		dc.w SME_xy6nv_4C3-SME_xy6nv, SME_xy6nv_4DD-SME_xy6nv	
000250BC 0000 0000                  		dc.w SME_xy6nv_4F2-SME_xy6nv, SME_xy6nv_502-SME_xy6nv	
000250C0 0000 0000                  		dc.w SME_xy6nv_51C-SME_xy6nv, SME_xy6nv_527-SME_xy6nv	
000250C4 0000 0000                  		dc.w SME_xy6nv_532-SME_xy6nv, SME_xy6nv_53D-SME_xy6nv	
000250C8 0000 0000                  		dc.w SME_xy6nv_548-SME_xy6nv, SME_xy6nv_553-SME_xy6nv	
000250CC 0000 0000                  		dc.w SME_xy6nv_55E-SME_xy6nv, SME_xy6nv_569-SME_xy6nv	
000250D0 0000 0000                  		dc.w SME_xy6nv_574-SME_xy6nv, SME_xy6nv_589-SME_xy6nv	
000250D4 0000 0000                  		dc.w SME_xy6nv_599-SME_xy6nv, SME_xy6nv_5A9-SME_xy6nv	
000250D8 0000 0000                  		dc.w SME_xy6nv_5B9-SME_xy6nv, SME_xy6nv_5CE-SME_xy6nv	
000250DC 0000 0000                  		dc.w SME_xy6nv_5DE-SME_xy6nv, SME_xy6nv_5EE-SME_xy6nv	
000250E0 0000 0000                  		dc.w SME_xy6nv_5FE-SME_xy6nv, SME_xy6nv_609-SME_xy6nv	
000250E4 0000 0000                  		dc.w SME_xy6nv_614-SME_xy6nv, SME_xy6nv_61F-SME_xy6nv	
000250E8 0000 0000                  		dc.w SME_xy6nv_62A-SME_xy6nv, SME_xy6nv_635-SME_xy6nv	
000250EC 0000 0000                  		dc.w SME_xy6nv_640-SME_xy6nv, SME_xy6nv_64B-SME_xy6nv	
000250F0 0000 0000                  		dc.w SME_xy6nv_656-SME_xy6nv, SME_xy6nv_66B-SME_xy6nv	
000250F4 0000 0000                  		dc.w SME_xy6nv_67B-SME_xy6nv, SME_xy6nv_686-SME_xy6nv	
000250F8 0000 0000                  		dc.w SME_xy6nv_696-SME_xy6nv, SME_xy6nv_6AB-SME_xy6nv	
000250FC 0000 0000                  		dc.w SME_xy6nv_6BB-SME_xy6nv, SME_xy6nv_6C6-SME_xy6nv	
00025100 0000 0000                  		dc.w SME_xy6nv_6D6-SME_xy6nv, SME_xy6nv_6E6-SME_xy6nv	
00025104 0000 0000                  		dc.w SME_xy6nv_6F6-SME_xy6nv, SME_xy6nv_724-SME_xy6nv	
00025108 0000 0000                  		dc.w SME_xy6nv_752-SME_xy6nv, SME_xy6nv_762-SME_xy6nv	
0002510C 0000 0000                  		dc.w SME_xy6nv_772-SME_xy6nv, SME_xy6nv_782-SME_xy6nv	
00025110 0000 0000                  		dc.w SME_xy6nv_79C-SME_xy6nv, SME_xy6nv_7AC-SME_xy6nv	
00025114 0000 0000                  		dc.w SME_xy6nv_7BC-SME_xy6nv, SME_xy6nv_7D6-SME_xy6nv	
00025118 0000 0000                  		dc.w SME_xy6nv_7F0-SME_xy6nv, SME_xy6nv_805-SME_xy6nv	
0002511C 0000 0000                  		dc.w SME_xy6nv_81A-SME_xy6nv, SME_xy6nv_82F-SME_xy6nv	
00025120 0000 0000                  		dc.w SME_xy6nv_844-SME_xy6nv, SME_xy6nv_84A-SME_xy6nv	
00025124 0000 0000                  		dc.w SME_xy6nv_850-SME_xy6nv, SME_xy6nv_856-SME_xy6nv	
00025128 0000 0000                  		dc.w SME_xy6nv_85C-SME_xy6nv, SME_xy6nv_862-SME_xy6nv	
0002512C 0000 0000                  		dc.w SME_xy6nv_868-SME_xy6nv, SME_xy6nv_86E-SME_xy6nv	
00025130 0000 0000                  		dc.w SME_xy6nv_87E-SME_xy6nv, SME_xy6nv_884-SME_xy6nv	
00025134 0000 0000                  		dc.w SME_xy6nv_88F-SME_xy6nv, SME_xy6nv_895-SME_xy6nv	
00025138 0000 0000                  		dc.w SME_xy6nv_8A0-SME_xy6nv, SME_xy6nv_8A6-SME_xy6nv	
0002513C 0000 0000                  		dc.w SME_xy6nv_8BB-SME_xy6nv, SME_xy6nv_8DF-SME_xy6nv	
00025140 0000 0000                  		dc.w SME_xy6nv_8F9-SME_xy6nv, SME_xy6nv_909-SME_xy6nv	
00025144 0000 0000                  		dc.w SME_xy6nv_923-SME_xy6nv, SME_xy6nv_938-SME_xy6nv	
00025148 0000 0000                  		dc.w SME_xy6nv_94D-SME_xy6nv, SME_xy6nv_962-SME_xy6nv	
0002514C 0000 0000                  		dc.w SME_xy6nv_990-SME_xy6nv, SME_xy6nv_9A0-SME_xy6nv	
00025150 0000 0000                  		dc.w SME_xy6nv_9B0-SME_xy6nv, SME_xy6nv_9C0-SME_xy6nv	
00025154 0000 0000                  		dc.w SME_xy6nv_9C1-SME_xy6nv, SME_xy6nv_9EA-SME_xy6nv	
00025158 0000 0000                  		dc.w SME_xy6nv_A0E-SME_xy6nv, SME_xy6nv_A23-SME_xy6nv	
0002515C 0000 0000                  		dc.w SME_xy6nv_A33-SME_xy6nv, SME_xy6nv_A43-SME_xy6nv	
00025160 0000 0000                  		dc.w SME_xy6nv_A53-SME_xy6nv, SME_xy6nv_A5E-SME_xy6nv	
00025164 0000 0000                  		dc.w SME_xy6nv_A6E-SME_xy6nv, SME_xy6nv_A7E-SME_xy6nv	
00025168 0000 0000                  		dc.w SME_xy6nv_A8E-SME_xy6nv, SME_xy6nv_A9E-SME_xy6nv	
0002516C 0000 0000                  		dc.w SME_xy6nv_AB3-SME_xy6nv, SME_xy6nv_ADC-SME_xy6nv	
00025170 0000 0000                  		dc.w SME_xy6nv_AF1-SME_xy6nv, SME_xy6nv_B06-SME_xy6nv	
00025174 0000 0000                  		dc.w SME_xy6nv_B20-SME_xy6nv, SME_xy6nv_B3A-SME_xy6nv	
00025178 0000 0000                  		dc.w SME_xy6nv_B45-SME_xy6nv, SME_xy6nv_B5F-SME_xy6nv	
0002517C 0000 0000                  		dc.w SME_xy6nv_B6F-SME_xy6nv, SME_xy6nv_B89-SME_xy6nv	
00025180 0000 0000                  		dc.w SME_xy6nv_B94-SME_xy6nv, SME_xy6nv_BA4-SME_xy6nv	
00025184 0000 0000                  		dc.w SME_xy6nv_BB4-SME_xy6nv, SME_xy6nv_BC4-SME_xy6nv	
00025188 0000 0000                  		dc.w SME_xy6nv_BCF-SME_xy6nv, SME_xy6nv_BDF-SME_xy6nv	
0002518C 0000 0000                  		dc.w SME_xy6nv_C17-SME_xy6nv, SME_xy6nv_C36-SME_xy6nv	
00025190 0000 0000                  		dc.w SME_xy6nv_C46-SME_xy6nv, SME_xy6nv_C6A-SME_xy6nv	
00025194 0000 0000                  		dc.w SME_xy6nv_C75-SME_xy6nv, SME_xy6nv_C8A-SME_xy6nv	
00025198 0000 0000                  		dc.w SME_xy6nv_C9A-SME_xy6nv, SME_xy6nv_CAA-SME_xy6nv	
0002519C 0000 0000                  		dc.w SME_xy6nv_CBF-SME_xy6nv, SME_xy6nv_CC5-SME_xy6nv	
000251A0 0000 0000                  		dc.w SME_xy6nv_CCB-SME_xy6nv, SME_xy6nv_CD1-SME_xy6nv	
000251A4 0000 0000                  		dc.w SME_xy6nv_CD7-SME_xy6nv, SME_xy6nv_CE2-SME_xy6nv	
000251A8 0000 0000                  		dc.w SME_xy6nv_CE8-SME_xy6nv, SME_xy6nv_CEE-SME_xy6nv	
000251AC 0000 0000                  		dc.w SME_xy6nv_CF4-SME_xy6nv, SME_xy6nv_D04-SME_xy6nv	
000251B0 0000 0000                  		dc.w SME_xy6nv_D14-SME_xy6nv, SME_xy6nv_D24-SME_xy6nv	
000251B4 0000 0000                  		dc.w SME_xy6nv_D34-SME_xy6nv, SME_xy6nv_D44-SME_xy6nv	
000251B8 0000 0000                  		dc.w SME_xy6nv_D6D-SME_xy6nv, SME_xy6nv_D7D-SME_xy6nv	
000251BC 0000 0000                  		dc.w SME_xy6nv_D8D-SME_xy6nv, SME_xy6nv_DB1-SME_xy6nv	
000251C0 0000 0000                  		dc.w SME_xy6nv_DD5-SME_xy6nv, SME_xy6nv_DEF-SME_xy6nv	
000251C4 00                         SME_xy6nv_160:	dc.b 0	
000251C5 04                         SME_xy6nv_161:	dc.b 4	
000251C6 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000251CB F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
000251D0 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
000251D5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000251DA 09                         SME_xy6nv_176:	dc.b 9	
000251DB EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000251E0 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000251E5 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000251EA F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000251EF FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000251F4 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251F9 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
000251FE FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00025203 F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025208 0A                         SME_xy6nv_1A4:	dc.b $A	
00025209 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002520E 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025213 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025218 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
0002521D FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025222 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025227 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
0002522C F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00025231 F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00025236 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
0002523B 04                         SME_xy6nv_1D7:	dc.b 4	
0002523C EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00025241 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025246 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
0002524B 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025250 03                         SME_xy6nv_1EC:	dc.b 3	
00025251 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025256 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0002525B 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025260 03                         SME_xy6nv_1FC:	dc.b 3	
00025261 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025266 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0002526B 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025270 04                         SME_xy6nv_20C:	dc.b 4	
00025271 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025276 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0002527B 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00025280 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00025285 02                         SME_xy6nv_221:	dc.b 2	
00025286 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
0002528B 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00025290 03                         SME_xy6nv_22C:	dc.b 3	
00025291 FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025296 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
0002529B 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
000252A0 03                         SME_xy6nv_23C:	dc.b 3	
000252A1 FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
000252A6 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
000252AB 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
000252B0 03                         SME_xy6nv_24C:	dc.b 3	
000252B1 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
000252B6 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
000252BB FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
000252C0 04                         SME_xy6nv_25C:	dc.b 4	
000252C1 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
000252C6 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
000252CB EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
000252D0 F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
000252D5 03                         SME_xy6nv_271:	dc.b 3	
000252D6 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
000252DB 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
000252E0 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000252E5 07                         SME_xy6nv_281:	dc.b 7	
000252E6 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
000252EB FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
000252F0 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
000252F5 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
000252FA EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
000252FF EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025304 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025309 05                         SME_xy6nv_2A5:	dc.b 5	
0002530A FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
0002530F F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025314 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025319 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
0002531E F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025323 02                         SME_xy6nv_2BF:	dc.b 2	
00025324 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025329 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
0002532E 03                         SME_xy6nv_2CA:	dc.b 3	
0002532F F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
00025334 EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
00025339 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
0002533E 04                         SME_xy6nv_2DA:	dc.b 4	
0002533F EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
00025344 FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025349 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
0002534E 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
00025353 02                         SME_xy6nv_2EF:	dc.b 2	
00025354 EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025359 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
0002535E 03                         SME_xy6nv_2FA:	dc.b 3	
0002535F ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
00025364 FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025369 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
0002536E 05                         SME_xy6nv_30A:	dc.b 5	
0002536F FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00025374 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025379 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
0002537E ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00025383 ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025388 05                         SME_xy6nv_324:	dc.b 5	
00025389 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002538E EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00025393 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025398 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
0002539D 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
000253A2 06                         SME_xy6nv_33E:	dc.b 6	
000253A3 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
000253A8 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
000253AD FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
000253B2 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
000253B7 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
000253BC F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
000253C1 04                         SME_xy6nv_35D:	dc.b 4	
000253C2 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253C7 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253CC FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
000253D1 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
000253D6 03                         SME_xy6nv_372:	dc.b 3	
000253D7 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
000253DC ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
000253E1 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
000253E6 05                         SME_xy6nv_382:	dc.b 5	
000253E7 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000253EC EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
000253F1 FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
000253F6 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
000253FB 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00025400 04                         SME_xy6nv_39C:	dc.b 4	
00025401 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00025406 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
0002540B FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00025410 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
00025415 03                         SME_xy6nv_3B1:	dc.b 3	
00025416 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
0002541B ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
00025420 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
00025425 05                         SME_xy6nv_3C1:	dc.b 5	
00025426 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
0002542B ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
00025430 FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
00025435 FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
0002543A 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
0002543F 04                         SME_xy6nv_3DB:	dc.b 4	
00025440 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00025445 EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
0002544A FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
0002544F 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
00025454 02                         SME_xy6nv_3F0:	dc.b 2	
00025455 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
0002545A EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
0002545F 02                         SME_xy6nv_3FB:	dc.b 2	
00025460 F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
00025465 F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
0002546A 05                         SME_xy6nv_406:	dc.b 5	
0002546B E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
00025470 F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00025475 F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
0002547A F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
0002547F F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00025484 04                         SME_xy6nv_420:	dc.b 4	
00025485 F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
0002548A EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
0002548F FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00025494 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025499 02                         SME_xy6nv_435:	dc.b 2	
0002549A F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
0002549F F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
000254A4 03                         SME_xy6nv_440:	dc.b 3	
000254A5 F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
000254AA FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
000254AF FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
000254B4 03                         SME_xy6nv_450:	dc.b 3	
000254B5 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000254BA EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
000254BF F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
000254C4 06                         SME_xy6nv_460:	dc.b 6	
000254C5 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000254CA EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
000254CF F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
000254D4 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
000254D9 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
000254DE FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
000254E3 06                         SME_xy6nv_47F:	dc.b 6	
000254E4 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000254E9 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
000254EE EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
000254F3 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
000254F8 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
000254FD 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00025502 04                         SME_xy6nv_49E:	dc.b 4	
00025503 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025508 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
0002550D EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00025512 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025517 03                         SME_xy6nv_4B3:	dc.b 3	
00025518 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
0002551D F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00025522 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00025527 05                         SME_xy6nv_4C3:	dc.b 5	
00025528 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
0002552D EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00025532 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00025537 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
0002553C 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
00025541 04                         SME_xy6nv_4DD:	dc.b 4	
00025542 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025547 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
0002554C EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
00025551 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00025556 03                         SME_xy6nv_4F2:	dc.b 3	
00025557 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
0002555C 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
00025561 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025566 05                         SME_xy6nv_502:	dc.b 5	
00025567 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
0002556C EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
00025571 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025576 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
0002557B 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
00025580 02                         SME_xy6nv_51C:	dc.b 2	
00025581 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025586 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002558B 02                         SME_xy6nv_527:	dc.b 2	
0002558C FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
00025591 EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025596 02                         SME_xy6nv_532:	dc.b 2	
00025597 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002559C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000255A1 02                         SME_xy6nv_53D:	dc.b 2	
000255A2 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000255A7 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000255AC 02                         SME_xy6nv_548:	dc.b 2	
000255AD EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000255B2 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000255B7 02                         SME_xy6nv_553:	dc.b 2	
000255B8 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000255BD FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000255C2 02                         SME_xy6nv_55E:	dc.b 2	
000255C3 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000255C8 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000255CD 02                         SME_xy6nv_569:	dc.b 2	
000255CE EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000255D3 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000255D8 04                         SME_xy6nv_574:	dc.b 4	
000255D9 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255DE EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255E3 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255E8 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255ED 03                         SME_xy6nv_589:	dc.b 3	
000255EE F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
000255F3 EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
000255F8 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
000255FD 03                         SME_xy6nv_599:	dc.b 3	
000255FE EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025603 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025608 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002560D 03                         SME_xy6nv_5A9:	dc.b 3	
0002560E FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
00025613 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
00025618 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002561D 04                         SME_xy6nv_5B9:	dc.b 4	
0002561E EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025623 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025628 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002562D FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025632 03                         SME_xy6nv_5CE:	dc.b 3	
00025633 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
00025638 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
0002563D FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025642 03                         SME_xy6nv_5DE:	dc.b 3	
00025643 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025648 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002564D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025652 03                         SME_xy6nv_5EE:	dc.b 3	
00025653 EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
00025658 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002565D FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025662 02                         SME_xy6nv_5FE:	dc.b 2	
00025663 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025668 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002566D 02                         SME_xy6nv_609:	dc.b 2	
0002566E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025673 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025678 02                         SME_xy6nv_614:	dc.b 2	
00025679 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002567E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025683 02                         SME_xy6nv_61F:	dc.b 2	
00025684 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025689 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002568E 02                         SME_xy6nv_62A:	dc.b 2	
0002568F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025694 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025699 02                         SME_xy6nv_635:	dc.b 2	
0002569A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002569F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000256A4 02                         SME_xy6nv_640:	dc.b 2	
000256A5 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000256AA F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000256AF 02                         SME_xy6nv_64B:	dc.b 2	
000256B0 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000256B5 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000256BA 04                         SME_xy6nv_656:	dc.b 4	
000256BB FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
000256C0 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
000256C5 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256CA 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000256CF 03                         SME_xy6nv_66B:	dc.b 3	
000256D0 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256D5 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256DA F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256DF 02                         SME_xy6nv_67B:	dc.b 2	
000256E0 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000256E5 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256EA 03                         SME_xy6nv_686:	dc.b 3	
000256EB EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256F0 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256F5 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256FA 04                         SME_xy6nv_696:	dc.b 4	
000256FB FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
00025700 F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00025705 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
0002570A 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002570F 03                         SME_xy6nv_6AB:	dc.b 3	
00025710 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00025715 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002571A F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002571F 02                         SME_xy6nv_6BB:	dc.b 2	
00025720 F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00025725 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
0002572A 03                         SME_xy6nv_6C6:	dc.b 3	
0002572B EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00025730 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025735 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002573A 03                         SME_xy6nv_6D6:	dc.b 3	
0002573B F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
00025740 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
00025745 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
0002574A 03                         SME_xy6nv_6E6:	dc.b 3	
0002574B F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
00025750 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
00025755 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
0002575A 09                         SME_xy6nv_6F6:	dc.b 9	
0002575B 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025760 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00025765 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
0002576A 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
0002576F 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00025774 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025779 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
0002577E F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00025783 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025788 09                         SME_xy6nv_724:	dc.b 9	
00025789 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
0002578E F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00025793 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025798 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
0002579D 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
000257A2 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
000257A7 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
000257AC F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
000257B1 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
000257B6 03                         SME_xy6nv_752:	dc.b 3	
000257B7 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
000257BC 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
000257C1 EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
000257C6 03                         SME_xy6nv_762:	dc.b 3	
000257C7 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
000257CC EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
000257D1 EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
000257D6 03                         SME_xy6nv_772:	dc.b 3	
000257D7 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
000257DC EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
000257E1 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
000257E6 05                         SME_xy6nv_782:	dc.b 5	
000257E7 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
000257EC 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
000257F1 F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
000257F6 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
000257FB E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
00025800 03                         SME_xy6nv_79C:	dc.b 3	
00025801 ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025806 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
0002580B 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
00025810 03                         SME_xy6nv_7AC:	dc.b 3	
00025811 ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025816 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
0002581B 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
00025820 05                         SME_xy6nv_7BC:	dc.b 5	
00025821 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
00025826 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
0002582B 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
00025830 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
00025835 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
0002583A 05                         SME_xy6nv_7D6:	dc.b 5	
0002583B ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
00025840 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
00025845 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
0002584A ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
0002584F ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
00025854 04                         SME_xy6nv_7F0:	dc.b 4	
00025855 F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
0002585A 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
0002585F E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
00025864 F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025869 04                         SME_xy6nv_805:	dc.b 4	
0002586A E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
0002586F 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00025874 F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025879 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
0002587E 04                         SME_xy6nv_81A:	dc.b 4	
0002587F EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00025884 F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025889 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
0002588E 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00025893 04                         SME_xy6nv_82F:	dc.b 4	
00025894 E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025899 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
0002589E F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
000258A3 F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
000258A8 01                         SME_xy6nv_844:	dc.b 1	
000258A9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258AE 01                         SME_xy6nv_84A:	dc.b 1	
000258AF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258B4 01                         SME_xy6nv_850:	dc.b 1	
000258B5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258BA 01                         SME_xy6nv_856:	dc.b 1	
000258BB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258C0 01                         SME_xy6nv_85C:	dc.b 1	
000258C1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258C6 01                         SME_xy6nv_862:	dc.b 1	
000258C7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258CC 01                         SME_xy6nv_868:	dc.b 1	
000258CD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258D2 03                         SME_xy6nv_86E:	dc.b 3	
000258D3 F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
000258D8 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
000258DD F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
000258E2 01                         SME_xy6nv_87E:	dc.b 1	
000258E3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258E8 02                         SME_xy6nv_884:	dc.b 2	
000258E9 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
000258EE F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
000258F3 01                         SME_xy6nv_88F:	dc.b 1	
000258F4 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258F9 02                         SME_xy6nv_895:	dc.b 2	
000258FA EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
000258FF 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00025904 01                         SME_xy6nv_8A0:	dc.b 1	
00025905 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002590A 04                         SME_xy6nv_8A6:	dc.b 4	
0002590B ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025910 FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00025915 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
0002591A F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
0002591F 07                         SME_xy6nv_8BB:	dc.b 7	
00025920 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025925 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
0002592A 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
0002592F F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
00025934 F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
00025939 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
0002593E FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
00025943 05                         SME_xy6nv_8DF:	dc.b 5	
00025944 F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
00025949 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
0002594E ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
00025953 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025958 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
0002595D 03                         SME_xy6nv_8F9:	dc.b 3	
0002595E F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
00025963 ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025968 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
0002596D 05                         SME_xy6nv_909:	dc.b 5	
0002596E F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00025973 E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00025978 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
0002597D 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00025982 F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00025987 04                         SME_xy6nv_923:	dc.b 4	
00025988 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
0002598D F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00025992 F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025997 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
0002599C 04                         SME_xy6nv_938:	dc.b 4	
0002599D F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
000259A2 FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
000259A7 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
000259AC 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
000259B1 04                         SME_xy6nv_94D:	dc.b 4	
000259B2 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
000259B7 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
000259BC F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
000259C1 EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
000259C6 09                         SME_xy6nv_962:	dc.b 9	
000259C7 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
000259CC EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
000259D1 F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
000259D6 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
000259DB F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
000259E0 F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
000259E5 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
000259EA 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
000259EF FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
000259F4 03                         SME_xy6nv_990:	dc.b 3	
000259F5 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
000259FA 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
000259FF 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00025A04 03                         SME_xy6nv_9A0:	dc.b 3	
00025A05 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025A0A 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
00025A0F EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
00025A14 03                         SME_xy6nv_9B0:	dc.b 3	
00025A15 F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
00025A1A EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
00025A1F F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
00025A24 00                         SME_xy6nv_9C0:	dc.b 0	
00025A25 08                         SME_xy6nv_9C1:	dc.b 8	
00025A26 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025A2B E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025A30 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025A35 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025A3A F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025A3F 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025A44 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
00025A49 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
00025A4E 07                         SME_xy6nv_9EA:	dc.b 7	
00025A4F E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025A54 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025A59 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025A5E F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025A63 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025A68 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025A6D 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00025A72 04                         SME_xy6nv_A0E:	dc.b 4	
00025A73 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025A78 F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025A7D E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025A82 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025A87 03                         SME_xy6nv_A23:	dc.b 3	
00025A88 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025A8D FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025A92 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025A97 03                         SME_xy6nv_A33:	dc.b 3	
00025A98 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A9D FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025AA2 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025AA7 03                         SME_xy6nv_A43:	dc.b 3	
00025AA8 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025AAD 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025AB2 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025AB7 02                         SME_xy6nv_A53:	dc.b 2	
00025AB8 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025ABD F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025AC2 03                         SME_xy6nv_A5E:	dc.b 3	
00025AC3 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025AC8 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025ACD FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025AD2 03                         SME_xy6nv_A6E:	dc.b 3	
00025AD3 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025AD8 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025ADD 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025AE2 03                         SME_xy6nv_A7E:	dc.b 3	
00025AE3 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025AE8 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025AED 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025AF2 03                         SME_xy6nv_A8E:	dc.b 3	
00025AF3 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025AF8 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025AFD 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025B02 04                         SME_xy6nv_A9E:	dc.b 4	
00025B03 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025B08 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025B0D 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025B12 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025B17 08                         SME_xy6nv_AB3:	dc.b 8	
00025B18 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025B1D F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025B22 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025B27 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025B2C F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025B31 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025B36 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025B3B 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025B40 04                         SME_xy6nv_ADC:	dc.b 4	
00025B41 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025B46 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025B4B F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025B50 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025B55 04                         SME_xy6nv_AF1:	dc.b 4	
00025B56 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025B5B 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025B60 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025B65 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025B6A 05                         SME_xy6nv_B06:	dc.b 5	
00025B6B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025B70 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025B75 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B7A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B7F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B84 05                         SME_xy6nv_B20:	dc.b 5	
00025B85 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025B8A E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025B8F 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B94 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B99 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B9E 02                         SME_xy6nv_B3A:	dc.b 2	
00025B9F ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025BA4 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025BA9 05                         SME_xy6nv_B45:	dc.b 5	
00025BAA 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025BAF ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025BB4 F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025BB9 ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025BBE ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025BC3 03                         SME_xy6nv_B5F:	dc.b 3	
00025BC4 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025BC9 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025BCE 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025BD3 05                         SME_xy6nv_B6F:	dc.b 5	
00025BD4 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025BD9 F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025BDE F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025BE3 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025BE8 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025BED 02                         SME_xy6nv_B89:	dc.b 2	
00025BEE ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025BF3 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025BF8 03                         SME_xy6nv_B94:	dc.b 3	
00025BF9 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025BFE 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025C03 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025C08 03                         SME_xy6nv_BA4:	dc.b 3	
00025C09 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025C0E 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025C13 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025C18 03                         SME_xy6nv_BB4:	dc.b 3	
00025C19 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025C1E 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025C23 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025C28 02                         SME_xy6nv_BC4:	dc.b 2	
00025C29 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025C2E FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025C33 03                         SME_xy6nv_BCF:	dc.b 3	
00025C34 E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025C39 E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025C3E F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025C43 0B                         SME_xy6nv_BDF:	dc.b $B	
00025C44 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025C49 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025C4E 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025C53 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025C58 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025C5D F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025C62 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025C67 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025C6C 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025C71 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025C76 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025C7B 06                         SME_xy6nv_C17:	dc.b 6	
00025C7C E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025C81 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025C86 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025C8B 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025C90 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025C95 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025C9A 03                         SME_xy6nv_C36:	dc.b 3	
00025C9B EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025CA0 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025CA5 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025CAA 07                         SME_xy6nv_C46:	dc.b 7	
00025CAB F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025CB0 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025CB5 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025CBA F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025CBF F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025CC4 F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025CC9 F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025CCE 02                         SME_xy6nv_C6A:	dc.b 2	
00025CCF F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025CD4 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025CD9 04                         SME_xy6nv_C75:	dc.b 4	
00025CDA F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025CDF F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025CE4 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025CE9 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025CEE 03                         SME_xy6nv_C8A:	dc.b 3	
00025CEF F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025CF4 F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025CF9 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025CFE 03                         SME_xy6nv_C9A:	dc.b 3	
00025CFF F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025D04 F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025D09 F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025D0E 04                         SME_xy6nv_CAA:	dc.b 4	
00025D0F 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025D14 F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025D19 F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025D1E F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025D23 01                         SME_xy6nv_CBF:	dc.b 1	
00025D24 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025D29 01                         SME_xy6nv_CC5:	dc.b 1	
00025D2A F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025D2F 01                         SME_xy6nv_CCB:	dc.b 1	
00025D30 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025D35 01                         SME_xy6nv_CD1:	dc.b 1	
00025D36 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025D3B 02                         SME_xy6nv_CD7:	dc.b 2	
00025D3C F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025D41 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025D46 01                         SME_xy6nv_CE2:	dc.b 1	
00025D47 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025D4C 01                         SME_xy6nv_CE8:	dc.b 1	
00025D4D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025D52 01                         SME_xy6nv_CEE:	dc.b 1	
00025D53 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
00025D58 03                         SME_xy6nv_CF4:	dc.b 3	
00025D59 E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
00025D5E 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
00025D63 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
00025D68 03                         SME_xy6nv_D04:	dc.b 3	
00025D69 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00025D6E E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
00025D73 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025D78 03                         SME_xy6nv_D14:	dc.b 3	
00025D79 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025D7E 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025D83 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025D88 03                         SME_xy6nv_D24:	dc.b 3	
00025D89 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025D8E 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025D93 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025D98 03                         SME_xy6nv_D34:	dc.b 3	
00025D99 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025D9E 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025DA3 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025DA8 08                         SME_xy6nv_D44:	dc.b 8	
00025DA9 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00025DAE 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00025DB3 F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00025DB8 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
00025DBD 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00025DC2 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00025DC7 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
00025DCC E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
00025DD1 03                         SME_xy6nv_D6D:	dc.b 3	
00025DD2 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00025DD7 EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025DDC E40C 0013 F0               		dc.b $E4, $C, 0, $13, $F0	
00025DE1 03                         SME_xy6nv_D7D:	dc.b 3	
00025DE2 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00025DE7 EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025DEC E408 0013 F0               		dc.b $E4, 8, 0, $13, $F0	
00025DF1 07                         SME_xy6nv_D8D:	dc.b 7	
00025DF2 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00025DF7 F402 0003 F8               		dc.b $F4, 2, 0, 3, $F8	
00025DFC F402 0006 00               		dc.b $F4, 2, 0, 6, 0	
00025E01 EC02 0009 08               		dc.b $EC, 2, 0, 9, 8	
00025E06 0400 000C F0               		dc.b 4, 0, 0, $C, $F0	
00025E0B E403 000D F0               		dc.b $E4, 3, 0, $D, $F0	
00025E10 E405 0011 F8               		dc.b $E4, 5, 0, $11, $F8	
00025E15 07                         SME_xy6nv_DB1:	dc.b 7	
00025E16 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025E1B FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025E20 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025E25 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025E2A EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025E2F EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025E34 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025E39 05                         SME_xy6nv_DD5:	dc.b 5	
00025E3A FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025E3F F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025E44 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025E49 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025E4E F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025E53 02                         SME_xy6nv_DEF:	dc.b 2	
00025E54 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025E59 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025E5E                            		even
00025E5E                            		even
00025E5E                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025E5E                            ; --------------------------------------------------------------------------------
00025E5E                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025E5E                            
00025E5E                            SME_7rBR2:	
00025E5E 0000 0000                  		dc.w SME_7rBR2_160-SME_7rBR2, SME_7rBR2_161-SME_7rBR2	
00025E62 0000 0000                  		dc.w SME_7rBR2_16A-SME_7rBR2, SME_7rBR2_17D-SME_7rBR2	
00025E66 0000 0000                  		dc.w SME_7rBR2_192-SME_7rBR2, SME_7rBR2_19B-SME_7rBR2	
00025E6A 0000 0000                  		dc.w SME_7rBR2_1A2-SME_7rBR2, SME_7rBR2_1A9-SME_7rBR2	
00025E6E 0000 0000                  		dc.w SME_7rBR2_1B2-SME_7rBR2, SME_7rBR2_1B7-SME_7rBR2	
00025E72 0000 0000                  		dc.w SME_7rBR2_1BE-SME_7rBR2, SME_7rBR2_1C5-SME_7rBR2	
00025E76 0000 0000                  		dc.w SME_7rBR2_1CC-SME_7rBR2, SME_7rBR2_1D5-SME_7rBR2	
00025E7A 0000 0000                  		dc.w SME_7rBR2_1DC-SME_7rBR2, SME_7rBR2_1EB-SME_7rBR2	
00025E7E 0000 0000                  		dc.w SME_7rBR2_1F6-SME_7rBR2, SME_7rBR2_1FD-SME_7rBR2	
00025E82 0000 0000                  		dc.w SME_7rBR2_204-SME_7rBR2, SME_7rBR2_20D-SME_7rBR2	
00025E86 0000 0000                  		dc.w SME_7rBR2_212-SME_7rBR2, SME_7rBR2_219-SME_7rBR2	
00025E8A 0000 0000                  		dc.w SME_7rBR2_224-SME_7rBR2, SME_7rBR2_22F-SME_7rBR2	
00025E8E 0000 0000                  		dc.w SME_7rBR2_23C-SME_7rBR2, SME_7rBR2_245-SME_7rBR2	
00025E92 0000 0000                  		dc.w SME_7rBR2_24C-SME_7rBR2, SME_7rBR2_257-SME_7rBR2	
00025E96 0000 0000                  		dc.w SME_7rBR2_260-SME_7rBR2, SME_7rBR2_267-SME_7rBR2	
00025E9A 0000 0000                  		dc.w SME_7rBR2_272-SME_7rBR2, SME_7rBR2_27B-SME_7rBR2	
00025E9E 0000 0000                  		dc.w SME_7rBR2_280-SME_7rBR2, SME_7rBR2_285-SME_7rBR2	
00025EA2 0000 0000                  		dc.w SME_7rBR2_290-SME_7rBR2, SME_7rBR2_299-SME_7rBR2	
00025EA6 0000 0000                  		dc.w SME_7rBR2_29E-SME_7rBR2, SME_7rBR2_2A5-SME_7rBR2	
00025EAA 0000 0000                  		dc.w SME_7rBR2_2AC-SME_7rBR2, SME_7rBR2_2B9-SME_7rBR2	
00025EAE 0000 0000                  		dc.w SME_7rBR2_2C6-SME_7rBR2, SME_7rBR2_2CF-SME_7rBR2	
00025EB2 0000 0000                  		dc.w SME_7rBR2_2D6-SME_7rBR2, SME_7rBR2_2E1-SME_7rBR2	
00025EB6 0000 0000                  		dc.w SME_7rBR2_2EA-SME_7rBR2, SME_7rBR2_2F1-SME_7rBR2	
00025EBA 0000 0000                  		dc.w SME_7rBR2_2FC-SME_7rBR2, SME_7rBR2_301-SME_7rBR2	
00025EBE 0000 0000                  		dc.w SME_7rBR2_306-SME_7rBR2, SME_7rBR2_30B-SME_7rBR2	
00025EC2 0000 0000                  		dc.w SME_7rBR2_310-SME_7rBR2, SME_7rBR2_315-SME_7rBR2	
00025EC6 0000 0000                  		dc.w SME_7rBR2_31A-SME_7rBR2, SME_7rBR2_31F-SME_7rBR2	
00025ECA 0000 0000                  		dc.w SME_7rBR2_324-SME_7rBR2, SME_7rBR2_32D-SME_7rBR2	
00025ECE 0000 0000                  		dc.w SME_7rBR2_334-SME_7rBR2, SME_7rBR2_33B-SME_7rBR2	
00025ED2 0000 0000                  		dc.w SME_7rBR2_342-SME_7rBR2, SME_7rBR2_34B-SME_7rBR2	
00025ED6 0000 0000                  		dc.w SME_7rBR2_352-SME_7rBR2, SME_7rBR2_359-SME_7rBR2	
00025EDA 0000 0000                  		dc.w SME_7rBR2_360-SME_7rBR2, SME_7rBR2_365-SME_7rBR2	
00025EDE 0000 0000                  		dc.w SME_7rBR2_36A-SME_7rBR2, SME_7rBR2_36F-SME_7rBR2	
00025EE2 0000 0000                  		dc.w SME_7rBR2_374-SME_7rBR2, SME_7rBR2_379-SME_7rBR2	
00025EE6 0000 0000                  		dc.w SME_7rBR2_37E-SME_7rBR2, SME_7rBR2_383-SME_7rBR2	
00025EEA 0000 0000                  		dc.w SME_7rBR2_388-SME_7rBR2, SME_7rBR2_391-SME_7rBR2	
00025EEE 0000 0000                  		dc.w SME_7rBR2_398-SME_7rBR2, SME_7rBR2_39D-SME_7rBR2	
00025EF2 0000 0000                  		dc.w SME_7rBR2_3A4-SME_7rBR2, SME_7rBR2_3AD-SME_7rBR2	
00025EF6 0000 0000                  		dc.w SME_7rBR2_3B4-SME_7rBR2, SME_7rBR2_3B9-SME_7rBR2	
00025EFA 0000 0000                  		dc.w SME_7rBR2_3C0-SME_7rBR2, SME_7rBR2_3C7-SME_7rBR2	
00025EFE 0000 0000                  		dc.w SME_7rBR2_3CE-SME_7rBR2, SME_7rBR2_3E1-SME_7rBR2	
00025F02 0000 0000                  		dc.w SME_7rBR2_3F4-SME_7rBR2, SME_7rBR2_3FB-SME_7rBR2	
00025F06 0000 0000                  		dc.w SME_7rBR2_402-SME_7rBR2, SME_7rBR2_409-SME_7rBR2	
00025F0A 0000 0000                  		dc.w SME_7rBR2_414-SME_7rBR2, SME_7rBR2_41B-SME_7rBR2	
00025F0E 0000 0000                  		dc.w SME_7rBR2_422-SME_7rBR2, SME_7rBR2_42D-SME_7rBR2	
00025F12 0000 0000                  		dc.w SME_7rBR2_438-SME_7rBR2, SME_7rBR2_441-SME_7rBR2	
00025F16 0000 0000                  		dc.w SME_7rBR2_44A-SME_7rBR2, SME_7rBR2_453-SME_7rBR2	
00025F1A 0000 0000                  		dc.w SME_7rBR2_45C-SME_7rBR2, SME_7rBR2_45F-SME_7rBR2	
00025F1E 0000 0000                  		dc.w SME_7rBR2_462-SME_7rBR2, SME_7rBR2_465-SME_7rBR2	
00025F22 0000 0000                  		dc.w SME_7rBR2_468-SME_7rBR2, SME_7rBR2_46B-SME_7rBR2	
00025F26 0000 0000                  		dc.w SME_7rBR2_46E-SME_7rBR2, SME_7rBR2_471-SME_7rBR2	
00025F2A 0000 0000                  		dc.w SME_7rBR2_478-SME_7rBR2, SME_7rBR2_47B-SME_7rBR2	
00025F2E 0000 0000                  		dc.w SME_7rBR2_480-SME_7rBR2, SME_7rBR2_483-SME_7rBR2	
00025F32 0000 0000                  		dc.w SME_7rBR2_488-SME_7rBR2, SME_7rBR2_48B-SME_7rBR2	
00025F36 0000 0000                  		dc.w SME_7rBR2_494-SME_7rBR2, SME_7rBR2_4A3-SME_7rBR2	
00025F3A 0000 0000                  		dc.w SME_7rBR2_4AE-SME_7rBR2, SME_7rBR2_4B5-SME_7rBR2	
00025F3E 0000 0000                  		dc.w SME_7rBR2_4C0-SME_7rBR2, SME_7rBR2_4C9-SME_7rBR2	
00025F42 0000 0000                  		dc.w SME_7rBR2_4D2-SME_7rBR2, SME_7rBR2_4DB-SME_7rBR2	
00025F46 0000 0000                  		dc.w SME_7rBR2_4EE-SME_7rBR2, SME_7rBR2_4F5-SME_7rBR2	
00025F4A 0000 0000                  		dc.w SME_7rBR2_4FC-SME_7rBR2, SME_7rBR2_503-SME_7rBR2	
00025F4E 0000 0000                  		dc.w SME_7rBR2_504-SME_7rBR2, SME_7rBR2_515-SME_7rBR2	
00025F52 0000 0000                  		dc.w SME_7rBR2_524-SME_7rBR2, SME_7rBR2_52D-SME_7rBR2	
00025F56 0000 0000                  		dc.w SME_7rBR2_534-SME_7rBR2, SME_7rBR2_53B-SME_7rBR2	
00025F5A 0000 0000                  		dc.w SME_7rBR2_542-SME_7rBR2, SME_7rBR2_545-SME_7rBR2	
00025F5E 0000 0000                  		dc.w SME_7rBR2_54C-SME_7rBR2, SME_7rBR2_553-SME_7rBR2	
00025F62 0000 0000                  		dc.w SME_7rBR2_55A-SME_7rBR2, SME_7rBR2_561-SME_7rBR2	
00025F66 0000 0000                  		dc.w SME_7rBR2_56A-SME_7rBR2, SME_7rBR2_57B-SME_7rBR2	
00025F6A 0000 0000                  		dc.w SME_7rBR2_584-SME_7rBR2, SME_7rBR2_58D-SME_7rBR2	
00025F6E 0000 0000                  		dc.w SME_7rBR2_598-SME_7rBR2, SME_7rBR2_5A3-SME_7rBR2	
00025F72 0000 0000                  		dc.w SME_7rBR2_5A8-SME_7rBR2, SME_7rBR2_5B3-SME_7rBR2	
00025F76 0000 0000                  		dc.w SME_7rBR2_5BA-SME_7rBR2, SME_7rBR2_5C5-SME_7rBR2	
00025F7A 0000 0000                  		dc.w SME_7rBR2_5CA-SME_7rBR2, SME_7rBR2_5D1-SME_7rBR2	
00025F7E 0000 0000                  		dc.w SME_7rBR2_5D8-SME_7rBR2, SME_7rBR2_5DF-SME_7rBR2	
00025F82 0000 0000                  		dc.w SME_7rBR2_5E4-SME_7rBR2, SME_7rBR2_5EB-SME_7rBR2	
00025F86 0000 0000                  		dc.w SME_7rBR2_602-SME_7rBR2, SME_7rBR2_60F-SME_7rBR2	
00025F8A 0000 0000                  		dc.w SME_7rBR2_616-SME_7rBR2, SME_7rBR2_625-SME_7rBR2	
00025F8E 0000 0000                  		dc.w SME_7rBR2_62A-SME_7rBR2, SME_7rBR2_633-SME_7rBR2	
00025F92 0000 0000                  		dc.w SME_7rBR2_63A-SME_7rBR2, SME_7rBR2_641-SME_7rBR2	
00025F96 0000 0000                  		dc.w SME_7rBR2_64A-SME_7rBR2, SME_7rBR2_64D-SME_7rBR2	
00025F9A 0000 0000                  		dc.w SME_7rBR2_650-SME_7rBR2, SME_7rBR2_653-SME_7rBR2	
00025F9E 0000 0000                  		dc.w SME_7rBR2_656-SME_7rBR2, SME_7rBR2_659-SME_7rBR2	
00025FA2 0000 0000                  		dc.w SME_7rBR2_65C-SME_7rBR2, SME_7rBR2_65F-SME_7rBR2	
00025FA6 0000 0000                  		dc.w SME_7rBR2_662-SME_7rBR2, SME_7rBR2_669-SME_7rBR2	
00025FAA 0000 0000                  		dc.w SME_7rBR2_670-SME_7rBR2, SME_7rBR2_677-SME_7rBR2	
00025FAE 0000 0000                  		dc.w SME_7rBR2_67E-SME_7rBR2, SME_7rBR2_685-SME_7rBR2	
00025FB2 0000 0000                  		dc.w SME_7rBR2_696-SME_7rBR2, SME_7rBR2_69D-SME_7rBR2	
00025FB6 0000 0000                  		dc.w SME_7rBR2_6A4-SME_7rBR2, SME_7rBR2_6B3-SME_7rBR2	
00025FBA 0000 0000                  		dc.w SME_7rBR2_6C2-SME_7rBR2, SME_7rBR2_6CD-SME_7rBR2	
00025FBE 00                         SME_7rBR2_160:	dc.b 0	
00025FBF 0420 0070 0320 0B20 0E     SME_7rBR2_161:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025FC8 0920 0020 0B20 0E10 0300+  SME_7rBR2_16A:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025FDB 0A20 0020 0B20 0E10 0300+  SME_7rBR2_17D:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025FF0 04B6 C606 D200 0920 0E     SME_7rBR2_192:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025FF9 0350 1150 1720 0E          SME_7rBR2_19B:	dc.b 3, $50, $11, $50, $17, $20, $E	
00026000 0350 2050 1720 0E          SME_7rBR2_1A2:	dc.b 3, $50, $20, $50, $17, $20, $E	
00026007 0450 2050 1710 2700 0E     SME_7rBR2_1A9:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00026010 02B6 D316 DF               SME_7rBR2_1B2:	dc.b 2, $B6, $D3, $16, $DF	
00026015 0356 E126 E736 EA          SME_7rBR2_1B7:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
0002601C 0356 E126 E736 EE          SME_7rBR2_1BE:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00026023 03B6 F226 FE27 01          SME_7rBR2_1C5:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
0002602A 0420 0B20 0E87 0A07 13     SME_7rBR2_1CC:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00026033 0380 2920 0B20 0E          SME_7rBR2_1D5:	dc.b 3, $80, $29, $20, $B, $20, $E	
0002603A 0750 3A50 4010 4600 3530+  SME_7rBR2_1DC:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00026049 05B0 4800 3530 3600 3400+  SME_7rBR2_1EB:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00026054 0380 5A57 0400 09          SME_7rBR2_1F6:	dc.b 3, $80, $5A, $57, 4, 0, 9	
0002605B 03F7 1437 2407 28          SME_7rBR2_1FD:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00026062 0450 5450 6350 6910 6F     SME_7rBR2_204:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
0002606B 0250 54B0 71               SME_7rBR2_20D:	dc.b 2, $50, $54, $B0, $71	
00026070 0357 0457 2907 2F          SME_7rBR2_212:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00026077 0530 7D50 8100 3310 3430+  SME_7rBR2_219:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00026082 0550 8750 8D20 9350 9600+  SME_7rBR2_224:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
0002608D 0650 8710 9D30 9F50 A330+  SME_7rBR2_22F:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
0002609A 0450 AE10 B470 B620 BE     SME_7rBR2_23C:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000260A3 03F9 7539 8539 89          SME_7rBR2_245:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000260AA 0550 C130 C770 CB20 D310+  SME_7rBR2_24C:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000260B5 0450 C110 D870 DA20 E2     SME_7rBR2_257:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000260BE 03F9 8D39 9D39 A1          SME_7rBR2_260:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000260C5 0550 8710 9D00 9370 E520+  SME_7rBR2_267:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
000260D0 0470 F050 F810 FE51 00     SME_7rBR2_272:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
000260D9 0270 F0B1 06               SME_7rBR2_27B:	dc.b 2, $70, $F0, $B1, 6	
000260DE 0281 1858 F9               SME_7rBR2_280:	dc.b 2, $81, $18, $58, $F9	
000260E3 0508 FF39 0009 04B9 0529+  SME_7rBR2_285:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
000260EE 0451 1251 2111 2751 29     SME_7rBR2_290:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
000260F7 0251 12B1 2F               SME_7rBR2_299:	dc.b 2, $51, $12, $B1, $2F	
000260FC 0329 1479 1719 1F          SME_7rBR2_29E:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00026103 0370 F001 0681 3B          SME_7rBR2_2A5:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
0002610A 0651 4411 4A11 4C81 4E01+  SME_7rBR2_2AC:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00026117 0651 4421 5911 5C11 5E81+  SME_7rBR2_2B9:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00026124 0451 6911 6F81 7111 7A     SME_7rBR2_2C6:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
0002612D 03F9 A529 B529 B8          SME_7rBR2_2CF:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00026134 0551 7C21 8211 8571 8721+  SME_7rBR2_2D6:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
0002613F 0451 7C11 9281 9411 9D     SME_7rBR2_2E1:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00026148 03F9 BB29 CB19 CE          SME_7rBR2_2EA:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
0002614F 0551 4481 9F11 5E11 A801+  SME_7rBR2_2F1:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
0002615A 0251 AAB1 B0               SME_7rBR2_2FC:	dc.b 2, $51, $AA, $B1, $B0	
0002615F 02B7 3057 3C               SME_7rBR2_301:	dc.b 2, $B7, $30, $57, $3C	
00026164 0250 54B1 BC               SME_7rBR2_306:	dc.b 2, $50, $54, $B1, $BC	
00026169 0257 3CB7 42               SME_7rBR2_30B:	dc.b 2, $57, $3C, $B7, $42	
0002616E 0251 AAB1 C8               SME_7rBR2_310:	dc.b 2, $51, $AA, $B1, $C8	
00026173 0257 3CB7 4E               SME_7rBR2_315:	dc.b 2, $57, $3C, $B7, $4E	
00026178 0250 54B1 D4               SME_7rBR2_31A:	dc.b 2, $50, $54, $B1, $D4	
0002617D 0257 3CB7 5A               SME_7rBR2_31F:	dc.b 2, $57, $3C, $B7, $5A	
00026182 0451 E011 E6B1 E801 F4     SME_7rBR2_324:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
0002618B 03F8 7128 8128 84          SME_7rBR2_32D:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00026192 0351 F511 FBB1 FD          SME_7rBR2_334:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00026199 03B8 BD78 C901 F4          SME_7rBR2_33B:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000261A0 0451 E012 09B2 0B01 F4     SME_7rBR2_342:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000261A9 03B8 D178 DD01 F4          SME_7rBR2_34B:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000261B0 0351 F511 FBB2 17          SME_7rBR2_352:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000261B7 0378 E5B8 ED01 F4          SME_7rBR2_359:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000261BE 0252 23B2 29               SME_7rBR2_360:	dc.b 2, $52, $23, $B2, $29	
000261C3 0258 87B8 8D               SME_7rBR2_365:	dc.b 2, $58, $87, $B8, $8D	
000261C8 0251 12B2 35               SME_7rBR2_36A:	dc.b 2, $51, $12, $B2, $35	
000261CD 0258 87B8 99               SME_7rBR2_36F:	dc.b 2, $58, $87, $B8, $99	
000261D2 0252 23B2 41               SME_7rBR2_374:	dc.b 2, $52, $23, $B2, $41	
000261D7 0258 87B8 A5               SME_7rBR2_379:	dc.b 2, $58, $87, $B8, $A5	
000261DC 0251 12B2 4D               SME_7rBR2_37E:	dc.b 2, $51, $12, $B2, $4D	
000261E1 0258 87B8 B1               SME_7rBR2_383:	dc.b 2, $58, $87, $B8, $B1	
000261E6 0452 5912 5FB2 6102 6D     SME_7rBR2_388:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
000261EF 03B9 2129 2D59 30          SME_7rBR2_391:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
000261F6 0272 6EB2 76               SME_7rBR2_398:	dc.b 2, $72, $6E, $B2, $76	
000261FB 03B9 3629 4259 45          SME_7rBR2_39D:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026202 0452 5912 82B2 8402 6D     SME_7rBR2_3A4:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002620B 03B9 4B29 5759 5A          SME_7rBR2_3AD:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026212 0272 6EB2 90               SME_7rBR2_3B4:	dc.b 2, $72, $6E, $B2, $90	
00026217 03B9 6029 6C59 6F          SME_7rBR2_3B9:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
0002621E 03B4 EE24 FA54 FD          SME_7rBR2_3C0:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026225 03B5 0325 0F55 12          SME_7rBR2_3C7:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002622C 0925 1E55 2105 3715 1815+  SME_7rBR2_3CE:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
0002623F 0925 2D55 3005 3615 2715+  SME_7rBR2_3E1:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00026252 03F6 6416 7436 76          SME_7rBR2_3F4:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00026259 03B6 8176 8D16 95          SME_7rBR2_3FB:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00026260 03F5 3835 4805 4C          SME_7rBR2_402:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00026267 05B5 4D35 5915 5D15 5F25+  SME_7rBR2_409:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00026272 03B5 6425 7055 73          SME_7rBR2_414:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00026279 03B5 7925 8555 88          SME_7rBR2_41B:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00026280 0555 9425 9A05 AD55 8E55+  SME_7rBR2_422:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
0002628B 0525 A355 A605 AC55 9D55+  SME_7rBR2_42D:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00026296 04B5 BA25 C625 C925 CC     SME_7rBR2_438:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
0002629F 04B5 AE25 CF25 D225 D5     SME_7rBR2_441:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000262A8 04F5 D825 E805 EB05 EC     SME_7rBR2_44A:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000262B1 04F5 ED25 FD16 0016 02     SME_7rBR2_453:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000262BA 01F2 9C                    SME_7rBR2_45C:	dc.b 1, $F2, $9C	
000262BD 01F6 2B                    SME_7rBR2_45F:	dc.b 1, $F6, $2B	
000262C0 01F2 AC                    SME_7rBR2_462:	dc.b 1, $F2, $AC	
000262C3 01F6 3B                    SME_7rBR2_465:	dc.b 1, $F6, $3B	
000262C6 01F2 BC                    SME_7rBR2_468:	dc.b 1, $F2, $BC	
000262C9 01F6 4B                    SME_7rBR2_46B:	dc.b 1, $F6, $4B	
000262CC 01F2 CC                    SME_7rBR2_46E:	dc.b 1, $F2, $CC	
000262CF 0386 5B36 7A26 7E          SME_7rBR2_471:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
000262D6 01F2 DC                    SME_7rBR2_478:	dc.b 1, $F2, $DC	
000262D9 02B2 EC22 F8               SME_7rBR2_47B:	dc.b 2, $B2, $EC, $22, $F8	
000262DE 01F2 FB                    SME_7rBR2_480:	dc.b 1, $F2, $FB	
000262E1 02B3 0B23 17               SME_7rBR2_483:	dc.b 2, $B3, $B, $23, $17	
000262E6 01F3 1A                    SME_7rBR2_488:	dc.b 1, $F3, $1A	
000262E9 0453 2AB3 3018 1508 17     SME_7rBR2_48B:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
000262F2 0753 3C73 4213 4A03 4C08+  SME_7rBR2_494:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00026301 0528 1BB8 1E28 2A18 2D08+  SME_7rBR2_4A3:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002630C 03B8 3038 3C18 40          SME_7rBR2_4AE:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026313 05B4 8834 9413 FD03 FF0A+  SME_7rBR2_4B5:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
0002631E 0427 6627 6927 6C20 0E     SME_7rBR2_4C0:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026327 0413 4D73 4F23 5703 5A     SME_7rBR2_4C9:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00026330 0423 5B23 5EF3 6108 42     SME_7rBR2_4D2:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026339 0928 5338 5678 4303 6408+  SME_7rBR2_4DB:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
0002634C 03B3 7173 7D00 71          SME_7rBR2_4EE:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00026353 03F8 5B18 6B38 6D          SME_7rBR2_4F5:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
0002635A 03F8 0138 113A CE          SME_7rBR2_4FC:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
00026361 00                         SME_7rBR2_503:	dc.b 0	
00026362 0839 E219 EF29 E619 E919+  SME_7rBR2_504:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00026373 0739 E219 EF29 E619 E919+  SME_7rBR2_515:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00026382 0439 E289 E619 EF59 F1     SME_7rBR2_524:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
0002638B 0373 9D03 A533 A6          SME_7rBR2_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026392 0373 8533 8D23 91          SME_7rBR2_534:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00026399 0376 9736 9F06 A3          SME_7rBR2_53B:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000263A0 0183 94                    SME_7rBR2_542:	dc.b 1, $83, $94	
000263A3 0376 9736 9F06 A3          SME_7rBR2_545:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000263AA 0373 8533 8D23 91          SME_7rBR2_54C:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000263B1 0373 9D03 A533 A6          SME_7rBR2_553:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000263B8 0373 AA33 B223 B6          SME_7rBR2_55A:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
000263BF 04B3 B903 C603 C503 C7     SME_7rBR2_561:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
000263C8 0856 1113 C303 C503 C613+  SME_7rBR2_56A:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
000263D9 04B3 DA33 E603 EA03 EB     SME_7rBR2_57B:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
000263E2 04B3 C833 D403 D803 D9     SME_7rBR2_584:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
000263EB 0583 EC13 F553 F713 FD03+  SME_7rBR2_58D:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
000263F6 0584 0014 0953 F713 FD03+  SME_7rBR2_598:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026401 0284 0B74 14               SME_7rBR2_5A3:	dc.b 2, $84, $B, $74, $14	
00026406 0534 9824 9C34 9F34 A304+  SME_7rBR2_5A8:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026411 0384 1C24 2514 28          SME_7rBR2_5B3:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026418 0504 A834 A934 AD34 B124+  SME_7rBR2_5BA:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00026423 0284 2A74 33               SME_7rBR2_5C5:	dc.b 2, $84, $2A, $74, $33	
00026428 03B7 DF17 EB27 ED          SME_7rBR2_5CA:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
0002642F 0384 1C24 3B14 3E          SME_7rBR2_5D1:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00026436 03B7 F017 FC27 FE          SME_7rBR2_5D8:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
0002643D 0254 40B4 46               SME_7rBR2_5DF:	dc.b 2, $54, $40, $B4, $46	
00026442 0374 5214 5AB4 5C          SME_7rBR2_5E4:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026449 0B74 6814 7004 7924 7504+  SME_7rBR2_5EB:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00026460 0674 7A14 7054 8204 7924+  SME_7rBR2_602:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
0002646D 0354 C9B4 CF10 6D          SME_7rBR2_60F:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
00026474 0714 C334 C514 BE04 BD14+  SME_7rBR2_616:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
00026483 02F4 DB24 EB               SME_7rBR2_625:	dc.b 2, $F4, $DB, $24, $EB	
00026488 04B6 A416 B026 B206 B1     SME_7rBR2_62A:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
00026491 03B6 B516 C126 C3          SME_7rBR2_633:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
00026498 03B9 D129 DD19 E0          SME_7rBR2_63A:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
0002649F 0427 6F37 7237 7627 7A     SME_7rBR2_641:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000264A8 01F7 7E                    SME_7rBR2_64A:	dc.b 1, $F7, $7E	
000264AB 01F7 8E                    SME_7rBR2_64D:	dc.b 1, $F7, $8E	
000264AE 01F7 9E                    SME_7rBR2_650:	dc.b 1, $F7, $9E	
000264B1 01F7 AE                    SME_7rBR2_653:	dc.b 1, $F7, $AE	
000264B4 01F7 BE                    SME_7rBR2_656:	dc.b 1, $F7, $BE	
000264B7 01FA 08                    SME_7rBR2_659:	dc.b 1, $FA, 8	
000264BA 01FA BD                    SME_7rBR2_65C:	dc.b 1, $FA, $BD	
000264BD 01BA 18                    SME_7rBR2_65F:	dc.b 1, $BA, $18	
000264C0 03FA 243A 341A 38          SME_7rBR2_662:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
000264C7 035A 46BA 3A0A 4C          SME_7rBR2_669:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
000264CE 03BA 4D5A 590A 5F          SME_7rBR2_670:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
000264D5 03BA 605A 6C0A 72          SME_7rBR2_677:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
000264DC 03BA 735A 7F0A 85          SME_7rBR2_67E:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
000264E3 085A 7F0A 852A 781A 7C0A+  SME_7rBR2_685:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
000264F4 0320 0EFA 8C3A 9C          SME_7rBR2_696:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
000264FB 0320 0EFA A02A B0          SME_7rBR2_69D:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
00026502 0720 0E2A 912A 952A 980A+  SME_7rBR2_6A4:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
00026511 0750 3A50 4010 4600 3530+  SME_7rBR2_6B3:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00026520 05B0 4800 3530 3600 3400+  SME_7rBR2_6C2:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
0002652B 0380 5A57 0400 09          SME_7rBR2_6CD:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00026532                            		even
00026532                            		even
00026532                            
00026532                            ; ---------------------------------------------------------------------------
00026532                            ; Uncompressed graphics	- Sonic
00026532                            ; ---------------------------------------------------------------------------
00026532                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004DCD2                            		even
0004DCD2                            ; ---------------------------------------------------------------------------
0004DCD2                            ; Compressed graphics - various
0004DCD2                            ; ---------------------------------------------------------------------------
0004DCD2                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004E992                            		even
0004E992                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
0004F652                            		even
0004F652                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
00050312                            		even
00050312                            Art_Shield:	incbin	"artunc\Shield.bin"
00050FD2                            		even
00050FD2                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
000513D2                            		even
000513D2                            
000513D2                            Map_SSWalls:	include	"_maps\SS Walls.asm"
000513D2                            ; ---------------------------------------------------------------------------
000513D2                            ; Sprite mappings - walls of the special stage
000513D2                            ; ---------------------------------------------------------------------------
000513D2                            Map_SSWalls_internal:
000513D2 0000                       		dc.w byte_2C584-Map_SSWalls_internal
000513D4 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
000513D6 0000                       		dc.w byte_2C590-Map_SSWalls_internal
000513D8 0000                       		dc.w byte_2C596-Map_SSWalls_internal
000513DA 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
000513DC 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
000513DE 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
000513E0 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
000513E2 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
000513E4 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000513E6 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000513E8 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000513EA 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000513EC 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000513EE 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000513F0 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000513F2 01                         byte_2C584:	dc.b 1
000513F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000513F8 01                         byte_2C58A:	dc.b 1
000513F9 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000513FE 01                         byte_2C590:	dc.b 1
000513FF F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00051404 01                         byte_2C596:	dc.b 1
00051405 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0005140A 01                         byte_2C59C:	dc.b 1
0005140B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00051410 01                         byte_2C5A2:	dc.b 1
00051411 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00051416 01                         byte_2C5A8:	dc.b 1
00051417 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0005141C 01                         byte_2C5AE:	dc.b 1
0005141D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00051422 01                         byte_2C5B4:	dc.b 1
00051423 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00051428 01                         byte_2C5BA:	dc.b 1
00051429 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0005142E 01                         byte_2C5C0:	dc.b 1
0005142F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00051434 01                         byte_2C5C6:	dc.b 1
00051435 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0005143A 01                         byte_2C5CC:	dc.b 1
0005143B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00051440 01                         byte_2C5D2:	dc.b 1
00051441 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00051446 01                         byte_2C5D8:	dc.b 1
00051447 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0005144C 01                         byte_2C5DE:	dc.b 1
0005144D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00051452                            		even
00051452                            		even
00051452                            
00051452                            ; ---------------------------------------------------------------------------
00051452                            ; Compressed graphics - special stage
00051452                            ; ---------------------------------------------------------------------------
00051452                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
00051D8A                            		even
00051D8A                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
00051EBE                            		even
00051EBE                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00052B4E                            		even
00052B4E                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
00052E4E                            		even
00052E4E                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00053342                            		even
00053342                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
00053430                            		even
00053430                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
00053500                            		even
00053500                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
000535F6                            		even
000535F6                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00053654                            		even
00053654                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
000536E6                            		even
000536E6                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
000537A8                            		even
000537A8                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00053876                            		even
00053876                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00053942                            		even
00053942                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00053A0A                            		even
00053A0A                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00053AD4                            		even
00053AD4                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00053BA4                            		even
00053BA4                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00053D98                            		even
00053D98                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
00053F00                            		even
00053F00                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
00053FB0                            		even
00053FB0                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005408A                            		even
0005408A                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0005410E                            		even
0005410E                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0005428C                            		even
0005428C                            ; ---------------------------------------------------------------------------
0005428C                            ; Compressed graphics - GHZ stuff
0005428C                            ; ---------------------------------------------------------------------------
0005428C                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000542EE                            		even
000542EE                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00054408                            		even
00054408                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00054526                            		even
00054526                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
0005456E                            		even
0005456E                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
0005470C                            		even
0005470C                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00054788                            		even
00054788                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
0005499C                            		even
0005499C                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00054AC8                            		even
00054AC8                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00054C1C                            		even
00054C1C                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00054CCC                            		even
00054CCC                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
00054D2C                            		even
00054D2C                            ; ---------------------------------------------------------------------------
00054D2C                            ; Compressed graphics - LZ stuff
00054D2C                            ; ---------------------------------------------------------------------------
00054D2C                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00054E04                            		even
00054E04                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000555F8                            		even
000555F8                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
0005578A 00                         		even
0005578A                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
000558F4                            		even
000558F4                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00055F34 00                         		even
00055F34                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00055FD6 00                         		even
00055FD6                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00056050 00                         		even
00056050                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000561B6 00                         		even
000561B6                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0005623C 00                         		even
0005623C                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000563A8                            		even
000563A8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
0005688A                            		even
0005688A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
000569FA                            		even
000569FA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00056CB2                            		even
00056CB2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00056DF8                            		even
00056DF8                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00056F22                            		even
00056F22                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000570A2 00                         		even
000570A2                            ; ---------------------------------------------------------------------------
000570A2                            ; Compressed graphics - MZ stuff
000570A2                            ; ---------------------------------------------------------------------------
000570A2                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00057330                            		even
00057330                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000573EE                            		even
000573EE                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000574C6                            		even
000574C6                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
0005751A                            		even
0005751A                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00057838 00                         		even
00057838                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
0005814E                            		even
0005814E                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000582A6                            		even
000582A6                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
0005832E                            		even
0005832E                            ; ---------------------------------------------------------------------------
0005832E                            ; Compressed graphics - SLZ stuff
0005832E                            ; ---------------------------------------------------------------------------
0005832E                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
0005856A                            		even
0005856A                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
000586B0                            		even
000586B0                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
000588F4                            		even
000588F4                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00058990 00                         		even
00058990                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00058A72                            		even
00058A72                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00058C54                            		even
00058C54                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00058D60                            		even
00058D60                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00058E04                            		even
00058E04                            ; ---------------------------------------------------------------------------
00058E04                            ; Compressed graphics - SYZ stuff
00058E04                            ; ---------------------------------------------------------------------------
00058E04                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00058F94                            		even
00058F94                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
00058FF6                            		even
00058FF6                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
00059112 00                         		even
00059112                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
000593A0                            		even
000593A0                            ; ---------------------------------------------------------------------------
000593A0                            ; Compressed graphics - SBZ stuff
000593A0                            ; ---------------------------------------------------------------------------
000593A0                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
000593F4                            		even
000593F4                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00059690                            		even
00059690                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00059880                            		even
00059880                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00059A1E                            		even
00059A1E                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00059D4E                            		even
00059D4E                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00059F2C                            		even
00059F2C                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
00059F84                            		even
00059F84                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005A136 00                         		even
0005A136                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005A252                            		even
0005A252                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005A3E0                            		even
0005A3E0                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005A47A                            		even
0005A47A                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005A4D2                            		even
0005A4D2                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005A5CE                            		even
0005A5CE                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005A6E4                            		even
0005A6E4                            ; ---------------------------------------------------------------------------
0005A6E4                            ; Compressed graphics - enemies
0005A6E4                            ; ---------------------------------------------------------------------------
0005A6E4                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005AB2C 00                         		even
0005AB2C                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005B01C 00                         		even
0005B01C                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005B300 00                         		even
0005B300                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005B6C0                            		even
0005B6C0                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005B8A8                            		even
0005B8A8                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005BFD6 00                         		even
0005BFD6                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005C25E 00                         		even
0005C25E                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005C4FA 00                         		even
0005C4FA                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005CACE                            		even
0005CACE                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005CD60                            		even
0005CD60                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005D3AA 00                         		even
0005D3AA                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005D7E6                            		even
0005D7E6                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005DAF4 00                         		even
0005DAF4                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005DD54                            		even
0005DD54                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005E052                            		even
0005E052                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005E27E 00                         		even
0005E27E                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005E40C                            		even
0005E40C                            ; ---------------------------------------------------------------------------
0005E40C                            ; Compressed graphics - various
0005E40C                            ; ---------------------------------------------------------------------------
0005E40C                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005EA5A 00                         		even
0005EA5A                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005EBD2 00                         		even
0005EBD2                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0005ECF4 00                         		even
0005ECF4                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
0005EDFC 00                         		even
0005EDFC                            Nem_Ring:	incbin	"artnem\Rings.bin"
0005EF50 00                         		even
0005EF50                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0005F3DE                            		even
0005F3DE                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0005FA52                            		even
0005FA52                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0005FAEC 00                         		even
0005FAEC                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0005FC7E                            		even
0005FC7E                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0005FD9C 00                         		even
0005FD9C                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0005FE88                            		even
0005FE88                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
00060400                            		even
00060400                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
000604EA                            		even
000604EA                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0006065E                            		even
0006065E                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
000609E6 00                         		even
000609E6                            ; ---------------------------------------------------------------------------
000609E6                            ; Compressed graphics - continue screen
000609E6                            ; ---------------------------------------------------------------------------
000609E6                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00060CBA 00                         		even
00060CBA                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
00060F54 00                         		even
00060F54                            ; ---------------------------------------------------------------------------
00060F54                            ; Compressed graphics - animals
00060F54                            ; ---------------------------------------------------------------------------
00060F54                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
000610AC                            		even
000610AC                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
00061208                            		even
00061208                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
00061384                            		even
00061384                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
000614A0                            		even
000614A0                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0006161A                            		even
0006161A                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
00061754                            		even
00061754                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
000618B0                            		even
000618B0                            ; ---------------------------------------------------------------------------
000618B0                            ; Compressed graphics - primary patterns and block mappings
000618B0                            ; ---------------------------------------------------------------------------
000618B0                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0006228C                            		even
0006228C                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
00063BDC                            		even
00063BDC                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00065162                            		even
00065162                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
0006755C                            		even
0006755C                            Blk16_TS:	incbin	"map16\TS.bin"
000677E0                            		even
000677E0                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
0006891E                            		even
0006891E                            Blk256_TS:	incbin	"map256\TS.bin"
000694CC                            		even
000694CC                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006A66A                            		even
0006A66A                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006DB12                            		even
0006DB12                            Blk256_LZ:	incbin	"map256\LZ.bin"
00071034                            		even
00071034                            Blk16_MZ:	incbin	"map16\MZ.bin"
00071822                            		even
00071822                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000742BA                            		even
000742BA                            		incbin	"map256\MZ (JP1).bin"
00076338                            		even
00076338                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
000769BA                            		even
000769BA                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007A424                            		even
0007A424                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007C82E                            		even
0007C82E                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007D3F2                            		even
0007D3F2                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
00080B3A                            		even
00080B3A                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
000824A2                            		even
000824A2                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0008309C                            		even
0008309C                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000858DE                            		even
000858DE                            		incbin	"map256\SBZ (JP1).bin"
0008646E                            		even
0008646E                            ; ---------------------------------------------------------------------------
0008646E                            ; Compressed graphics - bosses and ending sequence
0008646E                            ; ---------------------------------------------------------------------------
0008646E                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00086CD6                            		even
00086CD6                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00086FC0                            		even
00086FC0                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00087844                            		even
00087844                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00088082 00                         		even
00088082                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00088850 00                         		even
00088850                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00088D78                            		even
00088D78                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00088E98                            		even
00088E98                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
000890A0 00                         		even
000890A0                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
0008A38A 00                         		even
0008A38A                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
0008ACCE                            		even
0008ACCE                            		even
0008ACCE                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
0008B25E                            		even
0008B25E                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
0008B4E6                            		even
0008B4E6                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0008BAE4                            		even
0008BAE4                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
0008BE48                            		even
0008BE48                            
0008BE48 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
0008BE88                            ; ---------------------------------------------------------------------------
0008BE88                            ; Collision data
0008BE88                            ; ---------------------------------------------------------------------------
0008BE88                            AngleMap:	incbin	"collide\Angle Map.bin"
0008BF88                            		even
0008BF88                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008CF88                            		even
0008CF88                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008DF88                            		even
0008DF88                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008E136 00                         		even
0008E136                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008E3DA                            		even
0008E3DA                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008E57E 00                         		even
0008E57E                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008E772                            		even
0008E772                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008E968 00                         		even
0008E968                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008EB38                            		even
0008EB38                            ; ---------------------------------------------------------------------------
0008EB38                            ; Special Stage layouts
0008EB38                            ; ---------------------------------------------------------------------------
0008EB38                            SS_1:		incbin	"sslayout\1.bin"
0008EDB2                            		even
0008EDB2                            SS_2:		incbin	"sslayout\2.bin"
0008F1C4                            		even
0008F1C4                            SS_3:		incbin	"sslayout\3.bin"
0008F520                            		even
0008F520                            SS_4:		incbin	"sslayout\4.bin"
0008F9FA                            		even
0008F9FA                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008FEAA                            			even
0008FEAA                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0009019C                            		even
0009019C                            ; ---------------------------------------------------------------------------
0009019C                            ; Animated uncompressed graphics
0009019C                            ; ---------------------------------------------------------------------------
0009019C                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0009039C                            		even
0009039C                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0009079C                            		even
0009079C                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
00090C1C                            		even
00090C1C                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
00090F1C                            		even
00090F1C                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0009151C                            		even
0009151C                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0009181C                            		even
0009181C                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0009229C                            		even
0009229C                            
0009229C                            ; ---------------------------------------------------------------------------
0009229C                            ; Level	layout index
0009229C                            ; ---------------------------------------------------------------------------
0009229C                            Level_Index:
0009229C                            		; GHZ
0009229C 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000922A2 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000922A8 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000922AE 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000922B4                            		; LZ
000922B4 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000922BA 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000922C0 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000922C6 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000922CC                            		; MZ
000922CC 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000922D2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000922D8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000922DE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
000922E4                            		; SLZ
000922E4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000922EA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000922F0 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000922F6 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000922FC                            		; SYZ
000922FC 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00092302 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00092308 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0009230E 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00092314                            		; SBZ
00092314 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0009231A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00092320 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00092326 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009232C                            		; Ending
0009232C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00092332 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00092338 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009233E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00092344                            
00092344                            Level_GHZ1:	incbin	"levels\ghz1.bin"
00092576                            		even
00092576 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0009257A                            Level_GHZ2:	incbin	"levels\ghz2.bin"
000926B4                            		even
000926B4 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000926B8                            Level_GHZ3:	incbin	"levels\ghz3.bin"
000927DA                            		even
000927DA                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
00092818                            		even
00092818 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0009281C 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00092820                            
00092820                            Level_LZ1:	incbin	"levels\lz1.bin"
000928E2                            		even
000928E2                            Level_LZbg:	incbin	"levels\lzbg.bin"
000929E4                            		even
000929E4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000929E8                            Level_LZ2:	incbin	"levels\lz2.bin"
00092A82                            		even
00092A82 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00092A86                            Level_LZ3:	incbin	"levels\lz3.bin"
00092BA0                            		even
00092BA0 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00092BA4                            Level_SBZ3:	incbin	"levels\sbz3.bin"
00092C5E                            		even
00092C5E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00092C62                            
00092C62                            Level_MZ1:	incbin	"levels\mz1.bin"
00092D54                            		even
00092D54                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
00092E76                            		even
00092E76                            Level_MZ2:	incbin	"levels\mz2.bin"
00092F68                            		even
00092F68                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0009308A                            		even
0009308A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0009308E                            Level_MZ3:	incbin	"levels\mz3.bin"
00093128                            		even
00093128                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0009324A                            		even
0009324A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0009324E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00093252                            
00093252                            Level_SLZ1:	incbin	"levels\slz1.bin"
00093364                            		even
00093364                            Level_SLZbg:	incbin	"levels\slzbg.bin"
000933DE                            		even
000933DE                            Level_SLZ2:	incbin	"levels\slz2.bin"
000934CE                            		even
000934CE                            Level_SLZ3:	incbin	"levels\slz3.bin"
000935E8                            		even
000935E8 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000935EC                            
000935EC                            Level_SYZ1:	incbin	"levels\syz1.bin"
000936F0                            		even
000936F0                            		incbin	"levels\syzbg (JP1).bin"
0009372A                            		even
0009372A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0009372E                            Level_SYZ2:	incbin	"levels\syz2.bin"
00093832                            		even
00093832 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00093836                            Level_SYZ3:	incbin	"levels\syz3.bin"
00093990 00                         		even
00093990 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00093994 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00093998                            
00093998                            Level_SBZ1:	incbin	"levels\sbz1.bin"
00093ABA                            		even
00093ABA                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
00093AF8                            		even
00093AF8                            Level_SBZ2:	incbin	"levels\sbz2.bin"
00093C3A                            		even
00093C3A                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
00093DA4                            		even
00093DA4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00093DA8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00093DAC                            Level_End:	incbin	"levels\ending.bin"
00093DDC 00                         		even
00093DDC 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00093DE0                            
00093DE0                            
00093DE0                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
00094A20                            		even
00094A20                            
00094B00                            
00094B00                            ; ---------------------------------------------------------------------------
00094B00                            ; Sprite locations index
00094B00                            ; ---------------------------------------------------------------------------
00094B00                            ObjPos_Index:
00094B00                            		; GHZ
00094B00 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B04 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B08 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B0C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B10                            		; LZ
00094B10 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B14 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B18 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B1C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B20                            		; MZ
00094B20 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B24 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B28 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B2C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B30                            		; SLZ
00094B30 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B34 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B38 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B3C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B40                            		; SYZ
00094B40 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B44 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B48 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B4C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B50                            		; SBZ
00094B50 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B54 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B58 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B5C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B60                            		; Ending
00094B60 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B64 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B68 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B6C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094B70                            		; --- Put extra object data here. ---
00094B70                            ObjPosLZPlatform_Index:
00094B70 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00094B74 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00094B78 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00094B7C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00094B80                            ObjPosSBZPlatform_Index:
00094B80 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00094B84 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00094B88 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00094B8C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00094B90 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00094B96                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
0009522C                            		even
0009522C                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
0009584A                            		even
0009584A                            		incbin	"objpos\ghz3 (JP1).bin"
00095E5C                            		even
00095E5C                            		incbin	"objpos\lz1 (JP1).bin"
00095E92                            		even
00095E92                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000961D4                            		even
000961D4                            		incbin	"objpos\lz3 (JP1).bin"
00096798                            		even
00096798                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00096D02                            		even
00096D02                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00096D34                            		even
00096D34                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00096D66                            		even
00096D66                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
00096D98                            		even
00096D98                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
00096DCA                            		even
00096DCA                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00096E14                            		even
00096E14                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00096E52                            		even
00096E52                            		incbin	"objpos\mz1 (JP1).bin"
00097440                            		even
00097440                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00097854                            		even
00097854                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00097B36                            		even
00097B36                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
0009806A                            		even
0009806A                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
000984D8                            		even
000984D8                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00098ABA                            		even
00098ABA                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00098D06                            		even
00098D06                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00098DA8                            		even
00098DA8                            		incbin	"objpos\syz3 (JP1).bin"
00098DE4                            		even
00098DE4                            		incbin	"objpos\sbz1 (JP1).bin"
00098E2C                            		even
00098E2C                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00098E56                            		even
00098E56                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00098E92                            		even
00098E92                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00098EC4                            		even
00098EC4                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00098EF6                            		even
00098EF6                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00098F28                            		even
00098F28                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00098F5A                            		even
00098F5A                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00098F8C                            		even
00098F8C                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00098FC4                            		even
00098FC4                            ObjPos_End:	incbin	"objpos\ending.bin"
00099120                            		even
00099120 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00099126                            
00099126                            		dcb.b $63C,$FF
00099762                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00099762                            
00099762                            SoundDriver:	include "s1.sounddriver.asm"
00099762                            ; ---------------------------------------------------------------------------
00099762                            ; Modified (early?) SMPS 68k Type 1b
00099762                            ; ---------------------------------------------------------------------------
00099762                            ; Go_SoundTypes:
00099762 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00099766                            ; Go_SoundD0:
00099766 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
0009976A 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0009976E 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00099772                            ; off_719A0:
00099772 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00099776 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
0009977A                            ; ---------------------------------------------------------------------------
0009977A                            ; PSG instruments used in music
0009977A                            ; ---------------------------------------------------------------------------
0009977A                            PSG_Index:
0009977A 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00099786 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00099792 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0009979E                            PSG1:		incbin	"sound/psg/psg1.bin"
000997B5                            PSG2:		incbin	"sound/psg/psg2.bin"
000997BC                            PSG3:		incbin	"sound/psg/psg3.bin"
000997CD                            PSG4:		incbin	"sound/psg/psg4.bin"
000997D8                            PSG6:		incbin	"sound/psg/psg6.bin"
000997E7                            PSG5:		incbin	"sound/psg/psg5.bin"
00099811                            PSG7:		incbin	"sound/psg/psg7.bin"
0009982D                            PSG8:		incbin	"sound/psg/psg8.bin"
00099855                            PSG9:		incbin	"sound/psg/psg9.bin"
00099866                            ; ---------------------------------------------------------------------------
00099866                            ; New tempos for songs during speed shoes
00099866                            ; ---------------------------------------------------------------------------
00099866                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00099866                            ; tempos while speed shoes are active. If you don't want that, you should add
00099866                            ; their "correct" sped-up main tempos to the list.
00099866                            ; byte_71A94:
00099866                            SpeedUpIndex:
00099866 07                         		dc.b 7		; GHZ
00099867 72                         		dc.b $72	; LZ
00099868 73                         		dc.b $73	; MZ
00099869 26                         		dc.b $26	; SLZ
0009986A 15                         		dc.b $15	; SYZ
0009986B 08                         		dc.b 8		; SBZ
0009986C FF                         		dc.b $FF	; Invincibility
0009986D 05                         		dc.b 5		; Extra Life
0009986E                            		;dc.b ?		; Special Stage
0009986E                            		;dc.b ?		; Title Screen
0009986E                            		;dc.b ?		; Ending
0009986E                            		;dc.b ?		; Boss
0009986E                            		;dc.b ?		; FZ
0009986E                            		;dc.b ?		; Sonic Got Through
0009986E                            		;dc.b ?		; Game Over
0009986E                            		;dc.b ?		; Continue Screen
0009986E                            		;dc.b ?		; Credits
0009986E                            		;dc.b ?		; Drowning
0009986E                            		;dc.b ?		; Get Emerald
0009986E                            
0009986E                            ; ---------------------------------------------------------------------------
0009986E                            ; Music	Pointers
0009986E                            ; ---------------------------------------------------------------------------
0009986E                            MusicIndex:
0009986E 0000 0000                  ptr_mus81:	dc.l Music81
00099872 0000 0000                  ptr_mus82:	dc.l Music82
00099876 0000 0000                  ptr_mus83:	dc.l Music83
0009987A 0000 0000                  ptr_mus84:	dc.l Music84
0009987E 0000 0000                  ptr_mus85:	dc.l Music85
00099882 0000 0000                  ptr_mus86:	dc.l Music86
00099886 0000 0000                  ptr_mus87:	dc.l Music87
0009988A 0000 0000                  ptr_mus88:	dc.l Music88
0009988E 0000 0000                  ptr_mus89:	dc.l Music89
00099892 0000 0000                  ptr_mus8A:	dc.l Music8A
00099896 0000 0000                  ptr_mus8B:	dc.l Music8B
0009989A 0000 0000                  ptr_mus8C:	dc.l Music8C
0009989E 0000 0000                  ptr_mus8D:	dc.l Music8D
000998A2 0000 0000                  ptr_mus8E:	dc.l Music8E
000998A6 0000 0000                  ptr_mus8F:	dc.l Music8F
000998AA 0000 0000                  ptr_mus90:	dc.l Music90
000998AE 0000 0000                  ptr_mus91:	dc.l Music91
000998B2 0000 0000                  ptr_mus92:	dc.l Music92
000998B6 0000 0000                  ptr_mus93:	dc.l Music93
000998BA 0000 0000                  ptr_mus94:	dc.l Music94
000998BE 0000 0000                  ptr_mus95:	dc.l Music95
000998C2 0000 0000                  ptr_mus96:	dc.l Music96
000998C6 0000 0000                  ptr_mus97:	dc.l Music97
000998CA 0000 0000                  ptr_mus98:	dc.l Music98
000998CE 0000 0000                  ptr_mus99:	dc.l Music99
000998D2 0000 0000                  ptr_mus9A:	dc.l Music9A
000998D6 0000 0000                  ptr_mus9B:	dc.l Music9B
000998DA 0000 0000                  ptr_mus9C:	dc.l Music9C
000998DE                            ptr_musend
000998DE                            ; ---------------------------------------------------------------------------
000998DE                            ; Priority of sound. New music or SFX must have a priority higher than or equal
000998DE                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
000998DE                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
000998DE                            ; any music or SFX can override it (as long as it can override whatever was
000998DE                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
000998DE                            ; will only override special SFX and music will only override music.
000998DE                            ; ---------------------------------------------------------------------------
000998DE                            ; SoundTypes:
000998DE                            SoundPriorities:
000998DE 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
000998ED 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000998FD 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
0009990D 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0009991D 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0009992D 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
0009993D 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00099942                            
00099942                            ; ---------------------------------------------------------------------------
00099942                            ; Subroutine to update music more than once per frame
00099942                            ; (Called by horizontal & vert. interrupts)
00099942                            ; ---------------------------------------------------------------------------
00099942                            
00099942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099942                            
00099942                            ; sub_71B4C:
00099942                            UpdateMusic:
00099942 33FC 0100 00A1 1100        		stopZ80
0009994A 4E71                       		nop	
0009994C 4E71                       		nop	
0009994E 4E71                       		nop	
00099950                            ; loc_71B5A:
00099950                            @updateloop:
00099950 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00099958 66F6                       		bne.s	@updateloop			; If so, wait
0009995A                            
0009995A 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00099962 6700                       		beq.s	@driverinput			; Branch if yes
00099964 33FC 0000 00A1 1100        		startZ80
0009996C 4E71                       		nop	
0009996E 4E71                       		nop	
00099970 4E71                       		nop	
00099972 4E71                       		nop	
00099974 4E71                       		nop	
00099976 60CA                       		bra.s	UpdateMusic
00099978                            ; ===========================================================================
00099978                            ; loc_71B82:
00099978                            @driverinput:
00099978 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
0009997E 422E 000E                  		clr.b	f_voice_selector(a6)
00099982 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00099986 6600 0000                  		bne.w	PauseMusic			; if yes, branch
0009998A 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
0009998E 6600                       		bne.s	@skipdelay
00099990 4EBA 0000                  		jsr	TempoWait(pc)
00099994                            ; loc_71B9E:
00099994                            @skipdelay:
00099994 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00099998 6700                       		beq.s	@skipfadeout
0009999A 4EBA 0000                  		jsr	DoFadeOut(pc)
0009999E                            ; loc_71BA8:
0009999E                            @skipfadeout:
0009999E 4A2E 0024                  		tst.b	f_fadein_flag(a6)
000999A2 6700                       		beq.s	@skipfadein
000999A4 4EBA 0000                  		jsr	DoFadeIn(pc)
000999A8                            ; loc_71BB2:
000999A8                            @skipfadein:
000999A8                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
000999A8 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
000999AC 6700                       		beq.s	@nosndinput		; if not, branch
000999AE 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000999B2                            ; loc_71BBC:
000999B2                            @nosndinput:
000999B2 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000999B8 6700                       		beq.s	@nonewsound		; If yes, branch
000999BA 4EBA 0000                  		jsr	PlaySoundID(pc)
000999BE                            ; loc_71BC8:
000999BE                            @nonewsound:
000999BE 4A38 C901                  		tst.b	($FFFFC901).w
000999C2 6700                       		beq.s	@cont
000999C4 5338 C901                  		subq.b	#1,($FFFFC901).w
000999C8                            		
000999C8                            @cont:
000999C8 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000999CC 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000999CE 6A00                       		bpl.s	@dacdone		; Branch if not
000999D0 4EBA 0000                  		jsr	DACUpdateTrack(pc)
000999D4                            ; loc_71BD4:
000999D4                            @dacdone:
000999D4 422E 0008                  		clr.b	f_updating_dac(a6)
000999D8 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000999DA                            ; loc_71BDA:
000999DA                            @bgmfmloop:
000999DA DAFC 0030                  		adda.w	#TrackSz,a5
000999DE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000999E0 6A00                       		bpl.s	@bgmfmnext		; Branch if not
000999E2 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000999E6                            ; loc_71BE6:
000999E6                            @bgmfmnext:
000999E6 51CF FFF2                  		dbf	d7,@bgmfmloop
000999EA                            
000999EA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
000999EC                            ; loc_71BEC:
000999EC                            @bgmpsgloop:
000999EC DAFC 0030                  		adda.w	#TrackSz,a5
000999F0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000999F2 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
000999F4 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000999F8                            ; loc_71BF8:
000999F8                            @bgmpsgnext:
000999F8 51CF FFF2                  		dbf	d7,@bgmpsgloop
000999FC                            
000999FC 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00099A02 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00099A04                            ; loc_71C04:
00099A04                            @sfxfmloop:
00099A04 DAFC 0030                  		adda.w	#TrackSz,a5
00099A08 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099A0A 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00099A0C 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00099A10                            ; loc_71C10:
00099A10                            @sfxfmnext:
00099A10 51CF FFF2                  		dbf	d7,@sfxfmloop
00099A14                            
00099A14 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00099A16                            ; loc_71C16:
00099A16                            @sfxpsgloop:
00099A16 DAFC 0030                  		adda.w	#TrackSz,a5
00099A1A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099A1C 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00099A1E 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00099A22                            ; loc_71C22:
00099A22                            @sfxpsgnext:
00099A22 51CF FFF2                  		dbf	d7,@sfxpsgloop
00099A26                            		
00099A26 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00099A2C DAFC 0030                  		adda.w	#TrackSz,a5
00099A30 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099A32 6A00                       		bpl.s	@specfmdone		; Branch if not
00099A34 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00099A38                            ; loc_71C38:
00099A38                            @specfmdone:
00099A38 DAFC 0030                  		adda.w	#TrackSz,a5
00099A3C 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00099A3E 6A00                       		bpl.s	DoStartZ80		; Branch if not
00099A40 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00099A44                            ; loc_71C44:
00099A44                            DoStartZ80:
00099A44 33FC 0000 00A1 1100        		startZ80
00099A4C 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00099A52 6700                       		beq.s @end ; if not, branch
00099A54 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00099A5A 6600                       		bne.s @end ; if not, branch
00099A5C 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00099A62 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00099A66                            
00099A66                            	@end:
00099A66 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00099A6A 4E75                       		rts
00099A6C                            ; End of function UpdateMusic
00099A6C                            
00099A6C                            
00099A6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099A6C                            
00099A6C                            ; sub_71C4E: UpdateDAC:
00099A6C                            DACUpdateTrack:
00099A6C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00099A70 6600                       		bne.s	@locret				; Return if not
00099A72 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00099A78                            ;DACDoNext:
00099A78 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00099A7C                            ; loc_71C5E:
00099A7C                            @sampleloop:
00099A7C 7A00                       		moveq	#0,d5
00099A7E 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00099A80 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00099A84 6500                       		blo.s	@notcoord	; Branch if not
00099A86 4EBA 0000                  		jsr	CoordFlag(pc)
00099A8A 60F0                       		bra.s	@sampleloop
00099A8C                            ; ===========================================================================
00099A8C                            ; loc_71C6E:
00099A8C                            @notcoord:
00099A8C 4A05                       		tst.b	d5			; Is it a sample?
00099A8E 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00099A90 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00099A94 1A1C                       		move.b	(a4)+,d5		; Get another byte
00099A96 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00099A98 534C                       		subq.w	#1,a4			; Put byte back
00099A9A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00099AA0 6000                       		bra.s	@gotsampleduration
00099AA2                            ; ===========================================================================
00099AA2                            ; loc_71C84:
00099AA2                            @gotduration:
00099AA2 4EBA 0000                  		jsr	SetDuration(pc)
00099AA6                            ; loc_71C88:
00099AA6                            @gotsampleduration:
00099AA6 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00099AAA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00099AAE 6600                       		bne.s	@locret			; Return if yes
00099AB0 7000                       		moveq	#0,d0
00099AB2 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00099AB6 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00099ABA 6700                       		beq.s	@locret			; Return if yes
00099ABC 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00099AC0 6600                       		bne.s	@timpani		; Various timpani
00099AC2 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00099AC8                            ; locret_71CAA:
00099AC8                            @locret:
00099AC8 4E75                       		rts	
00099ACA                            ; ===========================================================================
00099ACA                            ; loc_71CAC:
00099ACA                            @timpani:
00099ACA 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00099ACE 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00099AD2                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00099AD2                            		; use this value from then on.
00099AD2 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00099AD8 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00099AE0 4E75                       		rts	
00099AE2                            ; End of function DACUpdateTrack
00099AE2                            
00099AE2                            ; ===========================================================================
00099AE2                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00099AE2                            ; Also, $8C-$8D are so slow you may want to skip them.
00099AE2                            ; byte_71CC4:
00099AE2 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00099AE8                            
00099AE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099AE8                            
00099AE8                            ; sub_71CCA:
00099AE8                            FMUpdateTrack:
00099AE8 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00099AEC 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00099AEE 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00099AF2 4EBA 0000                  		jsr	FMDoNext(pc)
00099AF6 4EBA 0000                  		jsr	FMPrepareNote(pc)
00099AFA 6000 0000                  		bra.w	FMNoteOn
00099AFE                            ; ===========================================================================
00099AFE                            ; loc_71CE0:
00099AFE                            @notegoing:
00099AFE 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00099B02 4EBA 0000                  		jsr	DoModulation(pc)
00099B06 6000 0000                  		bra.w	FMUpdateFreq
00099B0A                            ; End of function FMUpdateTrack
00099B0A                            
00099B0A                            
00099B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099B0A                            
00099B0A                            ; sub_71CEC:
00099B0A                            FMDoNext:
00099B0A 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00099B0E 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00099B12                            ; loc_71CF4:
00099B12                            @noteloop:
00099B12 7A00                       		moveq	#0,d5
00099B14 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00099B16 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00099B1A 6500                       		blo.s	@gotnote	; Branch if not
00099B1C 4EBA 0000                  		jsr	CoordFlag(pc)
00099B20 60F0                       		bra.s	@noteloop
00099B22                            ; ===========================================================================
00099B22                            ; loc_71D04:
00099B22                            @gotnote:
00099B22 4EBA 0000                  		jsr	FMNoteOff(pc)
00099B26 4A05                       		tst.b	d5		; Is this a note?
00099B28 6A00                       		bpl.s	@gotduration	; Branch if not
00099B2A 4EBA 0000                  		jsr	FMSetFreq(pc)
00099B2E 1A1C                       		move.b	(a4)+,d5	; Get another byte
00099B30 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00099B32 534C                       		subq.w	#1,a4		; Otherwise, put it back
00099B34 6000 0000                  		bra.w	FinishTrackUpdate
00099B38                            ; ===========================================================================
00099B38                            ; loc_71D1A:
00099B38                            @gotduration:
00099B38 4EBA 0000                  		jsr	SetDuration(pc)
00099B3C 6000 0000                  		bra.w	FinishTrackUpdate
00099B40                            ; End of function FMDoNext
00099B40                            
00099B40                            
00099B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099B40                            
00099B40                            ; sub_71D22:
00099B40                            FMSetFreq:
00099B40 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00099B44 6700                       		beq.s	TrackSetRest
00099B46 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00099B4A 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00099B4E E34D                       		lsl.w	#1,d5
00099B50 41FA 0000                  		lea	FMFrequencies(pc),a0
00099B54 3C30 5000                  		move.w	(a0,d5.w),d6
00099B58 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00099B5C 4E75                       		rts	
00099B5E                            ; End of function FMSetFreq
00099B5E                            
00099B5E                            
00099B5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099B5E                            
00099B5E                            ; sub_71D40:
00099B5E                            SetDuration:
00099B5E 1005                       		move.b	d5,d0
00099B60 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00099B64                            ; loc_71D46:
00099B64                            @multloop:
00099B64 5301                       		subq.b	#1,d1
00099B66 6700                       		beq.s	@donemult
00099B68 D005                       		add.b	d5,d0
00099B6A 60F8                       		bra.s	@multloop
00099B6C                            ; ===========================================================================
00099B6C                            ; loc_71D4E:
00099B6C                            @donemult:
00099B6C 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00099B70 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00099B74 4E75                       		rts	
00099B76                            ; End of function SetDuration
00099B76                            
00099B76                            ; ===========================================================================
00099B76                            ; loc_71D58:
00099B76                            TrackSetRest:
00099B76 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00099B7A 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00099B7E                            
00099B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099B7E                            
00099B7E                            ; sub_71D60:
00099B7E                            FinishTrackUpdate:
00099B7E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00099B82 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00099B88 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00099B8C 6600                       		bne.s	@locret				; If so, branch
00099B8E 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00099B94 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00099B98 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00099B9C 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00099B9E 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00099BA2 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00099BA6 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00099BAA 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00099BAE 1018                       		move.b	(a0)+,d0			; Get steps
00099BB0 E208                       		lsr.b	#1,d0				; Halve them
00099BB2 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00099BB6 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00099BBA                            ; locret_71D9C:
00099BBA                            @locret:
00099BBA 4E75                       		rts	
00099BBC                            ; End of function FinishTrackUpdate
00099BBC                            
00099BBC                            
00099BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099BBC                            
00099BBC                            ; sub_71D9E: NoteFillUpdate
00099BBC                            NoteTimeoutUpdate:
00099BBC 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00099BC0 6700                       		beq.s	@locret
00099BC2 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00099BC6 6600                       		bne.s	@locret				; Return if it hasn't expired
00099BC8 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00099BCC 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00099BD0 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00099BD4 4EBA 0000                  		jsr	FMNoteOff(pc)
00099BD8 584F                       		addq.w	#4,sp				; Do not return to caller
00099BDA 4E75                       		rts	
00099BDC                            ; ===========================================================================
00099BDC                            ; loc_71DBE:
00099BDC                            @psgnoteoff:
00099BDC 4EBA 0000                  		jsr	PSGNoteOff(pc)
00099BE0 584F                       		addq.w	#4,sp		; Do not return to caller
00099BE2                            ; locret_71DC4:
00099BE2                            @locret:
00099BE2 4E75                       		rts	
00099BE4                            ; End of function NoteTimeoutUpdate
00099BE4                            
00099BE4                            
00099BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099BE4                            
00099BE4                            ; sub_71DC6:
00099BE4                            DoModulation:
00099BE4 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00099BE6 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00099BEA 6700                       		beq.s	@locret				; Return if not
00099BEC 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00099BF0 6700                       		beq.s	@waitdone			; If yes, branch
00099BF2 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00099BF6 4E75                       		rts	
00099BF8                            ; ===========================================================================
00099BF8                            ; loc_71DDA:
00099BF8                            @waitdone:
00099BF8 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00099BFC 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00099BFE 4E75                       		rts	
00099C00                            ; ===========================================================================
00099C00                            ; loc_71DE2:
00099C00                            @updatemodulation:
00099C00 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00099C04 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00099C0A 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00099C0E 6600                       		bne.s	@calcfreq			; If nonzero, branch
00099C10 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00099C16 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00099C1A 4E75                       		rts	
00099C1C                            ; ===========================================================================
00099C1C                            ; loc_71DFE:
00099C1C                            @calcfreq:
00099C1C 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00099C20 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00099C24 4886                       		ext.w	d6
00099C26 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00099C2A 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00099C2E DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00099C32 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00099C34                            ; locret_71E16:
00099C34                            @locret:
00099C34 4E75                       		rts	
00099C36                            ; End of function DoModulation
00099C36                            
00099C36                            
00099C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099C36                            
00099C36                            ; sub_71E18:
00099C36                            FMPrepareNote:
00099C36 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00099C3A 6600                       		bne.s	locret_71E48		; Return if so
00099C3C 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00099C40 6700                       		beq.s	FMSetRest		; Branch if zero
00099C42                            ; loc_71E24:
00099C42                            FMUpdateFreq:
00099C42 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00099C46 4880                       		ext.w	d0
00099C48 DC40                       		add.w	d0,d6			; Add note frequency
00099C4A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00099C4E 6600                       		bne.s	locret_71E48		; Return if so
00099C50 3206                       		move.w	d6,d1
00099C52 E049                       		lsr.w	#8,d1
00099C54 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00099C58 4EBA 0000                  		jsr	WriteFMIorII(pc)
00099C5C 1206                       		move.b	d6,d1
00099C5E 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00099C62 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00099C66                            ; locret_71E48:
00099C66                            locret_71E48:
00099C66 4E75                       		rts	
00099C68                            ; ===========================================================================
00099C68                            ; loc_71E4A:
00099C68                            FMSetRest:
00099C68 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00099C6C 4E75                       		rts	
00099C6E                            ; End of function FMPrepareNote
00099C6E                            
00099C6E                            ; ===========================================================================
00099C6E                            ; loc_71E50:
00099C6E                            PauseMusic:
00099C6E 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00099C70 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00099C76 6700 0000                  		beq.w	@unpausedallfm
00099C7A 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00099C80 7602                       		moveq	#2,d3
00099C82 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00099C86 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00099C88                            ; loc_71E6A:
00099C88                            @killpanloop:
00099C88 4EBA 0000                  		jsr	WriteFMI(pc)
00099C8C 4EBA 0000                  		jsr	WriteFMII(pc)
00099C90 5200                       		addq.b	#1,d0
00099C92 51CB FFF4                  		dbf	d3,@killpanloop
00099C96                            
00099C96 7602                       		moveq	#2,d3
00099C98 7028                       		moveq	#$28,d0		; Key on/off register
00099C9A                            ; loc_71E7C:
00099C9A                            @noteoffloop:
00099C9A 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00099C9C 4EBA 0000                  		jsr	WriteFMI(pc)
00099CA0 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00099CA2 4EBA 0000                  		jsr	WriteFMI(pc)
00099CA6 51CB FFF2                  		dbf	d3,@noteoffloop
00099CAA                            
00099CAA 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00099CAE 6000 FD94                  		bra.w	DoStartZ80
00099CB2                            ; ===========================================================================
00099CB2                            ; loc_71E94:
00099CB2                            @unpausemusic:
00099CB2 422E 0003                  		clr.b	f_pausemusic(a6)
00099CB6 7630                       		moveq	#TrackSz,d3
00099CB8 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00099CBC 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00099CBE                            ; loc_71EA0:
00099CBE                            @bgmfmloop:
00099CBE 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00099CC2 6700                       		beq.s	@bgmfmnext		; Branch if not
00099CC4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00099CC8 6600                       		bne.s	@bgmfmnext		; Branch if yes
00099CCA 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00099CCE 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00099CD2 4EBA 0000                  		jsr	WriteFMIorII(pc)
00099CD6                            ; loc_71EB8:
00099CD6                            @bgmfmnext:
00099CD6 DAC3                       		adda.w	d3,a5
00099CD8 51CC FFE4                  		dbf	d4,@bgmfmloop
00099CDC                            
00099CDC 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00099CE0 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00099CE2                            ; loc_71EC4:
00099CE2                            @sfxfmloop:
00099CE2 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00099CE6 6700                       		beq.s	@sfxfmnext		; Branch if not
00099CE8 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00099CEC 6600                       		bne.s	@sfxfmnext		; Branch if yes
00099CEE 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00099CF2 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00099CF6 4EBA 0000                  		jsr	WriteFMIorII(pc)
00099CFA                            ; loc_71EDC:
00099CFA                            @sfxfmnext:
00099CFA DAC3                       		adda.w	d3,a5
00099CFC 51CC FFE4                  		dbf	d4,@sfxfmloop
00099D00                            
00099D00 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00099D04 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00099D08 6700                       		beq.s	@unpausedallfm		; Branch if not
00099D0A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00099D0E 6600                       		bne.s	@unpausedallfm		; Branch if yes
00099D10 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00099D14 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00099D18 4EBA 0000                  		jsr	WriteFMIorII(pc)
00099D1C                            ; loc_71EFE:
00099D1C                            @unpausedallfm:
00099D1C 6000 FD26                  		bra.w	DoStartZ80
00099D20                            
00099D20                            ; ---------------------------------------------------------------------------
00099D20                            ; Subroutine to	play a sound or	music track
00099D20                            ; ---------------------------------------------------------------------------
00099D20                            
00099D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099D20                            
00099D20                            ; Sound_Play:
00099D20                            CycleSoundQueue:
00099D20 2079 0009 9762             		movea.l	(Go_SoundPriorities).l,a0
00099D26 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00099D2A 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00099D2C 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00099D2E                            ; loc_71F12:
00099D2E                            @inputloop:
00099D2E 1011                       		move.b	(a1),d0			; move track number to d0
00099D30 1200                       		move.b	d0,d1
00099D32 4219                       		clr.b	(a1)+			; Clear entry
00099D34 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00099D38 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00099D3A 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00099D40 6700                       		beq.s	@havesound		; If yes, branch
00099D42 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00099D46 6000                       		bra.s	@nextinput
00099D48                            ; ===========================================================================
00099D48                            ; loc_71F2C:
00099D48                            @havesound:
00099D48 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00099D4C 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00099D50 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00099D52 6500                       		blo.s	@nextinput		; Branch if yes
00099D54 1602                       		move.b	d2,d3			; Store new priority
00099D56 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00099D5A                            ; loc_71F3E:
00099D5A                            @nextinput:
00099D5A 51CC FFD2                  		dbf	d4,@inputloop
00099D5E                            
00099D5E 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00099D60 6B00                       		bmi.s	@locret
00099D62 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00099D64                            ; locret_71F4A:
00099D64                            @locret:
00099D64 4E75                       		rts	
00099D66                            ; End of function CycleSoundQueue
00099D66                            
00099D66                            
00099D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099D66                            
00099D66                            ; Sound_ChkValue:
00099D66                            PlaySoundID:
00099D66 7E00                       		moveq	#0,d7
00099D68 1E2E 0009                  		move.b	v_sound_id(a6),d7
00099D6C 6700 0000                  		beq.w	StopAllSound
00099D70 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00099D72 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00099D78                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00099D78                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00099D78                            		; See LevSel_NoCheat for more.
00099D78 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00099D7C 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00099D80 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00099D84 6500 0000                  		blo.w	@locret			; Return if yes
00099D88 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00099D8C 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00099D90 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00099D94 6500 0000                  		blo.w	@locret			; Return if yes
00099D98 0C07 00D1                  		cmpi.b	#$D1,d7
00099D9C 6500 0000                  		bcs.w	Sound_PlaySpecial
00099DA0 0C07 00DF                  		cmp.b	#$DF,d7
00099DA4 6F00 0000                  		ble.w	Sound_D1toDF
00099DA8 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00099DAC 6500 0000                  		blo.w	@locret			; Return if yes
00099DB0 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00099DB4 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00099DB6                            ; locret_71F8C:
00099DB6                            @locret:
00099DB6 4E75                       		rts	
00099DB8                            ; ===========================================================================
00099DB8                            
00099DB8                            Sound_E0toE4:
00099DB8 0407 00E0                  		subi.b	#flg__First,d7
00099DBC E54F                       		lsl.w	#2,d7
00099DBE 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00099DC2                            ; ===========================================================================
00099DC2                            
00099DC2                            Sound_ExIndex:
00099DC2 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00099DC6 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00099DCA 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00099DCE 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00099DD2 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00099DD6                            ptr_flgend
00099DD6                            ; ===========================================================================
00099DD6                            ; ---------------------------------------------------------------------------
00099DD6                            ; Play "Say-gaa" PCM sound
00099DD6                            ; ---------------------------------------------------------------------------
00099DD6                            ; Sound_E1: PlaySega:
00099DD6                            PlaySegaSound:
00099DD6 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00099DDE 33FC 0000 00A1 1100        		startZ80
00099DE6 323C 0011                  		move.w	#$11,d1
00099DEA                            ; loc_71FC0:
00099DEA                            @busyloop_outer:
00099DEA 303C FFFF                  		move.w	#-1,d0
00099DEE                            ; loc_71FC4:
00099DEE                            @busyloop:
00099DEE 4E71                       		nop	
00099DF0 51C8 FFFC                  		dbf	d0,@busyloop
00099DF4                            
00099DF4 51C9 FFF4                  		dbf	d1,@busyloop_outer
00099DF8                            
00099DF8 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00099DFA 4E75                       		rts	
00099DFC                            ; ===========================================================================
00099DFC                            ; ---------------------------------------------------------------------------
00099DFC                            ; Play music track $81-$9F
00099DFC                            ; ---------------------------------------------------------------------------
00099DFC                            ; Sound_81to9F:
00099DFC                            Sound_PlayBGM:
00099DFC 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00099E00 6600                       		bne.s	@bgmnot1up		; if not, branch
00099E02 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00099E06 6600 0000                  		bne.w	@locdblret		; if yes, branch
00099E0A 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00099E0E 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00099E10                            ; loc_71FE6:
00099E10                            @clearsfxloop:
00099E10 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00099E14 DAFC 0030                  		adda.w	#TrackSz,a5
00099E18 51C8 FFF6                  		dbf	d0,@clearsfxloop
00099E1C                            
00099E1C 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00099E20 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00099E22                            ; loc_71FF8:
00099E22                            @cleartrackplayloop:
00099E22 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00099E26 DAFC 0030                  		adda.w	#TrackSz,a5
00099E2A 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00099E2E                            
00099E2E 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00099E30 204E                       		movea.l	a6,a0
00099E32 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00099E36 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00099E3A                            ; loc_72012:
00099E3A                            @backupramloop:
00099E3A 22D8                       		move.l	(a0)+,(a1)+
00099E3C 51C8 FFFC                  		dbf	d0,@backupramloop
00099E40                            
00099E40 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00099E46 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00099E48 6000                       		bra.s	@bgm_loadMusic
00099E4A                            ; ===========================================================================
00099E4A                            ; loc_72024:
00099E4A                            @bgmnot1up:
00099E4A 422E 0027                  		clr.b	f_1up_playing(a6)
00099E4E 422E 0026                  		clr.b	v_fadein_counter(a6)
00099E52                            ; loc_7202C:
00099E52                            @bgm_loadMusic:
00099E52 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00099E56 2879 0009 9772             		movea.l	(Go_SpeedUpIndex).l,a4
00099E5C 0407 0081                  		subi.b	#bgm__First,d7
00099E60 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00099E66 2879 0009 976A             		movea.l	(Go_MusicIndex).l,a4
00099E6C E54F                       		lsl.w	#2,d7
00099E6E 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00099E72 7000                       		moveq	#0,d0
00099E74 3014                       		move.w	(a4),d0			; load voice pointer
00099E76 D08C                       		add.l	a4,d0			; It is a relative pointer
00099E78 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00099E7C 102C 0005                  		move.b	5(a4),d0		; load tempo
00099E80 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00099E84                            		;tst.b	f_speedup(a6)
00099E84                            		;beq.s	@nospeedshoes
00099E84                            		;move.b	v_speeduptempo(a6),d0
00099E84                            ; loc_72068:
00099E84                            ;@nospeedshoes:
00099E84 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00099E88 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00099E8C 7200                       		moveq	#0,d1
00099E8E 264C                       		movea.l	a4,a3
00099E90 5C4C                       		addq.w	#6,a4			; Point past header
00099E92 7E00                       		moveq	#0,d7
00099E94 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00099E98 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00099E9C 5307                       		subq.b	#1,d7
00099E9E 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00099EA2 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00099EA6 7C30                       		moveq	#TrackSz,d6
00099EA8 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00099EAC 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00099EB0 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00099EB4                            ; loc_72098:
00099EB4                            @bmg_fmloadloop:
00099EB4 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00099EB8 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00099EBC 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00099EC0 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00099EC4 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00099EC8 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00099ECC 7000                       		moveq	#0,d0
00099ECE 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00099ED0 D08B                       		add.l	a3,d0				; Relative pointer
00099ED2 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00099ED6 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00099EDA D2C6                       		adda.w	d6,a1
00099EDC 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00099EE0                            		
00099EE0 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00099EE6 6600                       		bne.s	@silencefm6
00099EE8 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00099EEA 7200                       		moveq	#0,d1		; Disable DAC
00099EEC 4EBA 0000                  		jsr	WriteFMI(pc)
00099EF0 6000 0000                  		bra.w	@bgm_fmdone
00099EF4                            ; ===========================================================================
00099EF4                            ; loc_720D8:
00099EF4                            @silencefm6:
00099EF4 7028                       		moveq	#$28,d0		; Key on/off register
00099EF6 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00099EF8 4EBA 0000                  		jsr	WriteFMI(pc)
00099EFC 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00099F00 727F                       		moveq	#$7F,d1		; Total silence
00099F02 4EBA 0000                  		jsr	WriteFMII(pc)
00099F06 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00099F0A 727F                       		moveq	#$7F,d1		; Total silence
00099F0C 4EBA 0000                  		jsr	WriteFMII(pc)
00099F10 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00099F14 727F                       		moveq	#$7F,d1		; Total silence
00099F16 4EBA 0000                  		jsr	WriteFMII(pc)
00099F1A 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00099F1E 727F                       		moveq	#$7F,d1		; Total silence
00099F20 4EBA 0000                  		jsr	WriteFMII(pc)
00099F24 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00099F28 123C 00C0                  		move.b	#$C0,d1		; Stereo
00099F2C 4EBA 0000                  		jsr	WriteFMII(pc)
00099F30                            ; loc_72114:
00099F30                            @bgm_fmdone:
00099F30 7E00                       		moveq	#0,d7
00099F32 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00099F36 6700                       		beq.s	@bgm_psgdone	; branch if zero
00099F38 5307                       		subq.b	#1,d7
00099F3A 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00099F3E 45FA 0000                  		lea	PSGInitBytes(pc),a2
00099F42                            ; loc_72126:
00099F42                            @bgm_psgloadloop:
00099F42 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00099F46 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00099F4A 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00099F4E 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00099F52 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00099F56 7000                       		moveq	#0,d0
00099F58 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00099F5A D08B                       		add.l	a3,d0				; Relative pointer
00099F5C 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00099F60 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00099F64 101C                       		move.b	(a4)+,d0			; load redundant byte
00099F66 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00099F6A D2C6                       		adda.w	d6,a1
00099F6C 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00099F70                            ; loc_72154:
00099F70                            @bgm_psgdone:
00099F70 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00099F74 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00099F76                            ; loc_7215A:
00099F76                            @sfxstoploop:
00099F76 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00099F78 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00099F7C 7000                       		moveq	#0,d0
00099F7E 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00099F82 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00099F84 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00099F86 E508                       		lsl.b	#2,d0			; Convert to index
00099F88 6000                       		bra.s	@gotchannelindex
00099F8A                            ; ===========================================================================
00099F8A                            ; loc_7216E:
00099F8A                            @sfxpsgchannel:
00099F8A E608                       		lsr.b	#3,d0		; Convert to index
00099F8C                            ; loc_72170:
00099F8C                            @gotchannelindex:
00099F8C 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00099F90 2070 0000                  		movea.l	(a0,d0.w),a0
00099F94 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00099F98                            ; loc_7217C:
00099F98                            @sfxnext:
00099F98 D2C6                       		adda.w	d6,a1
00099F9A 51CF FFDA                  		dbf	d7,@sfxstoploop
00099F9E                            
00099F9E 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00099FA2 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00099FA4 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099FAA                            ; loc_7218E:
00099FAA                            @checkspecialpsg:
00099FAA 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00099FAE 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00099FB0 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099FB6                            ; loc_7219A:
00099FB6                            @sendfmnoteoff:
00099FB6 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00099FBA 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00099FBC                            ; loc_721A0:
00099FBC                            @fmnoteoffloop:
00099FBC 4EBA 0000                  		jsr	FMNoteOff(pc)
00099FC0 DAC6                       		adda.w	d6,a5
00099FC2 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00099FC6 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00099FC8                            ; loc_721AC:
00099FC8                            @psgnoteoffloop:
00099FC8 4EBA 0000                  		jsr	PSGNoteOff(pc)
00099FCC DAC6                       		adda.w	d6,a5
00099FCE 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00099FD2                            ; loc_721B6:
00099FD2                            @locdblret:
00099FD2 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00099FD4 4E75                       		rts	
00099FD6                            ; ===========================================================================
00099FD6                            ; byte_721BA:
00099FD6 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00099FDE 00                         		even
00099FDE                            ; byte_721C2:
00099FDE 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00099FE2 00                         		even
00099FE2                            ; ===========================================================================
00099FE2                            ; ---------------------------------------------------------------------------
00099FE2                            ; Play Spin Dash sound effect
00099FE2                            ; ---------------------------------------------------------------------------
00099FE2                            Sound_D1toDF:
00099FE2 4A2E 0027                  		tst.b	$27(a6)
00099FE6 6600 0000                  		bne.w	loc_722C6
00099FEA 4A2E 0004                  		tst.b	4(a6)
00099FEE 6600 0000                  		bne.w	loc_722C6
00099FF2 4A2E 0024                  		tst.b	$24(a6)
00099FF6 6600 0000                  		bne.w	loc_722C6
00099FFA 4238 C900                  		clr.b	($FFFFC900).w
00099FFE 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
0009A002 6600                       		bne.s	@cont3	; if not, branch
0009A004 3F00                       		move.w	d0,-(sp)
0009A006 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
0009A00A 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
0009A00E 6600                       		bne.s	@cont1		; if it is, branch
0009A010 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
0009A014                            		
0009A014                            @cont1:
0009A014 5200                       		addq.b	#1,d0
0009A016 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0009A01A 6400                       		bcc.s	@cont2		; if it has, branch
0009A01C 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
0009A020                            		
0009A020                            @cont2:
0009A020 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
0009A026 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
0009A02C 301F                       		move.w	(sp)+,d0
0009A02E                            		
0009A02E                            @cont3:	
0009A02E 2079 0009 976E             		movea.l	(Go_SoundIndex).l,a0
0009A034 0407 00A0                  		sub.b	#$A0,d7
0009A038 6000                       		bra.s	SoundEffects_Common
0009A03A                            ; ---------------------------------------------------------------------------
0009A03A                            ; Play normal sound effect
0009A03A                            ; ---------------------------------------------------------------------------
0009A03A                            ; Sound_A0toCF:
0009A03A                            Sound_PlaySFX:
0009A03A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0009A03E 6600 0000                  		bne.w	loc_722C6		; Exit is it is
0009A042 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0009A046 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0009A04A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0009A04E 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0009A052 4238 C900                  		clr.b	($FFFFC900).w
0009A056 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
0009A05A 6600                       		bne.s	Sound_notB5		; if not, branch
0009A05C 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
0009A060 6600                       		bne.s	loc_721EE		; Branch if not
0009A062 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
0009A066                            
0009A066                            loc_721EE:
0009A066 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
0009A06C                            
0009A06C                            Sound_notB5:
0009A06C 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
0009A070 6600                       		bne.s	Sound_notA7		; if not, branch
0009A072 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
0009A076 6600 0000                  		bne.w	locret_722C4			; Return if not
0009A07A 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
0009A080                            		
0009A080                            Sound_notA7:
0009A080 2079 0009 976E             		movea.l	(Go_SoundIndex).l,a0
0009A086 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
0009A08A                            
0009A08A                            SoundEffects_Common:		
0009A08A E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
0009A08C 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
0009A090 224B                       		movea.l	a3,a1
0009A092 7200                       		moveq	#0,d1
0009A094 3219                       		move.w	(a1)+,d1		; Voice pointer
0009A096 D28B                       		add.l	a3,d1			; Relative pointer
0009A098 1A19                       		move.b	(a1)+,d5		; Dividing timing	
0009A09A                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
0009A09A                            		; index entry is above $3F will cause a crash. This is actually the same way that
0009A09A                            		; this bug is fixed in Ristar's driver.
0009A09A 7E00                       		moveq	#0,d7	
0009A09C 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
0009A09E 5307                       		subq.b	#1,d7
0009A0A0 7C30                       		moveq	#TrackSz,d6
0009A0A2                            
0009A0A2                            loc_72228:
0009A0A2 7600                       		moveq	#0,d3
0009A0A4 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
0009A0A8 1803                       		move.b	d3,d4
0009A0AA 6B00                       		bmi.s	loc_72244	; Branch if PSG
0009A0AC 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
0009A0AE E54B                       		lsl.w	#2,d3
0009A0B0 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0009A0B4 2A75 3000                  		movea.l	(a5,d3.w),a5
0009A0B8 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
0009A0BC 6000                       		bra.s	loc_7226E
0009A0BE                            ; ===========================================================================
0009A0BE                            
0009A0BE                            loc_72244:
0009A0BE E64B                       		lsr.w	#3,d3
0009A0C0 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0009A0C4 2A75 3000                  		movea.l	(a5,d3.w),a5
0009A0C8 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
0009A0CC 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
0009A0D0 6600                       		bne.s	loc_7226E	; Branch if not
0009A0D2 1004                       		move.b	d4,d0
0009A0D4 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
0009A0D8 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009A0DE 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
0009A0E2 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009A0E8                            
0009A0E8                            loc_7226E:
0009A0E8 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
0009A0EC 2A75 3000                  		movea.l	(a5,d3.w),a5
0009A0F0 244D                       		movea.l	a5,a2
0009A0F2 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
0009A0F4                            
0009A0F4                            loc_72276:
0009A0F4 429A                       		clr.l	(a2)+
0009A0F6 51C8 FFFC                  		dbf	d0,loc_72276
0009A0FA                            
0009A0FA 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
0009A0FC 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
0009A100 7000                       		moveq	#0,d0
0009A102 3019                       		move.w	(a1)+,d0			; Track data pointer
0009A104 D08B                       		add.l	a3,d0				; Relative pointer
0009A106 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0009A10A 3B59 0008                  		move.w	(a1)+,8(a5)
0009A10E 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
0009A112 6700                       		beq.s	@cont		; if not, branch
0009A114 3F00                       		move.w	d0,-(sp)
0009A116 1038 C902                  		move.b	($FFFFC902).w,d0
0009A11A D12D 0008                  		add.b	d0,8(a5)
0009A11E 301F                       		move.w	(sp)+,d0
0009A120                            		
0009A120                            @cont:
0009A120 1B7C 0001 000E             		move.b	#1,$E(a5)
0009A126 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0009A12A 4A04                       		tst.b	d4				; Is this a PSG channel?
0009A12C 6B00                       		bmi.s	loc_722A8		; Branch if yes
0009A12E 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
0009A134 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
0009A138                            
0009A138                            loc_722A8:
0009A138 51CF FF68                  		dbf	d7,loc_72228
0009A13C                            
0009A13C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0009A140 6A00                       		bpl.s	loc_722B8				; Branch if not
0009A142 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0009A148                            
0009A148                            loc_722B8:
0009A148 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
0009A14C 6A00                       		bpl.s	locret_722C4						; Branch if not
0009A14E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0009A154                            
0009A154                            locret_722C4:
0009A154 4E75                       		rts	
0009A156                            ; ===========================================================================
0009A156                            
0009A156                            loc_722C6:
0009A156 4216                       		clr.b	v_sndprio(a6)	; Clear priority
0009A158 4E75                       		rts	
0009A15A                            ; ===========================================================================
0009A15A                            ; ---------------------------------------------------------------------------
0009A15A                            ; RAM addresses for FM and PSG channel variables used by the SFX
0009A15A                            ; ---------------------------------------------------------------------------
0009A15A                            ; dword_722CC: BGMChannelRAM:
0009A15A                            SFX_BGMChannelRAM:
0009A15A 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
0009A15E 0000 0000                  		dc.l 0
0009A162 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0009A166 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
0009A16A 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
0009A16E 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
0009A172 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
0009A176 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
0009A17A                            ; dword_722EC: SFXChannelRAM:
0009A17A                            SFX_SFXChannelRAM:
0009A17A 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
0009A17E 0000 0000                  		dc.l 0
0009A182 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0009A186 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
0009A18A 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
0009A18E 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
0009A192 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
0009A196 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
0009A19A                            ; ===========================================================================
0009A19A                            ; ---------------------------------------------------------------------------
0009A19A                            ; Play GHZ waterfall sound
0009A19A                            ; ---------------------------------------------------------------------------
0009A19A                            ; Sound_D0toDF:
0009A19A                            Sound_PlaySpecial:
0009A19A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0009A19E 6600 0000                  		bne.w	@locret			; Return if so
0009A1A2 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0009A1A6 6600 0000                  		bne.w	@locret			; Exit if it is
0009A1AA 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0009A1AE 6600 0000                  		bne.w	@locret			; Exit if it is
0009A1B2 2079 0009 9766             		movea.l	(Go_SpecSoundIndex).l,a0
0009A1B8 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
0009A1BC E54F                       		lsl.w	#2,d7
0009A1BE 2670 7000                  		movea.l	(a0,d7.w),a3
0009A1C2 224B                       		movea.l	a3,a1
0009A1C4 7000                       		moveq	#0,d0
0009A1C6 3019                       		move.w	(a1)+,d0			; Voice pointer
0009A1C8 D08B                       		add.l	a3,d0				; Relative pointer
0009A1CA 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
0009A1CE 1A19                       		move.b	(a1)+,d5			; Dividing timing
0009A1D0                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
0009A1D0                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
0009A1D0 7E00                       		moveq	#0,d7	
0009A1D2 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
0009A1D4 5307                       		subq.b	#1,d7
0009A1D6 7C30                       		moveq	#TrackSz,d6
0009A1D8                            ; loc_72348:
0009A1D8                            @sfxloadloop:
0009A1D8 1829 0001                  		move.b	1(a1),d4					; Voice control bits
0009A1DC 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
0009A1DE 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0009A1E4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0009A1E8 6000                       		bra.s	@sfxinitpsg
0009A1EA                            ; ===========================================================================
0009A1EA                            ; loc_7235A:
0009A1EA                            @sfxoverridepsg:
0009A1EA 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0009A1F0 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
0009A1F4                            ; loc_72364:
0009A1F4                            @sfxinitpsg:
0009A1F4 244D                       		movea.l	a5,a2
0009A1F6 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
0009A1F8                            ; loc_72368:
0009A1F8                            @clearsfxtrackram:
0009A1F8 429A                       		clr.l	(a2)+
0009A1FA 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
0009A1FE                            
0009A1FE 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
0009A200 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
0009A204 7000                       		moveq	#0,d0
0009A206 3019                       		move.w	(a1)+,d0			; Track data pointer
0009A208 D08B                       		add.l	a3,d0				; Relative pointer
0009A20A 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0009A20E 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
0009A212 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
0009A218 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0009A21C 4A04                       		tst.b	d4				; Is this a PSG channel?
0009A21E 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
0009A220 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
0009A226                            ; loc_72396:
0009A226                            @sfxpsginitdone:
0009A226 51CF FFB0                  		dbf	d7,@sfxloadloop
0009A22A                            
0009A22A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
0009A22E 6A00                       		bpl.s	@doneoverride					; Branch if not
0009A230 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0009A236                            ; loc_723A6:
0009A236                            @doneoverride:
0009A236 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
0009A23A 6A00                       		bpl.s	@locret						; Branch if not
0009A23C 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0009A242 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
0009A246 13C4 00C0 0011             		move.b	d4,(psg_input).l
0009A24C 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
0009A250 13C4 00C0 0011             		move.b	d4,(psg_input).l
0009A256                            ; locret_723C6:
0009A256                            @locret:
0009A256 4E75                       		rts	
0009A258                            ; End of function PlaySoundID
0009A258                            
0009A258                            ; ===========================================================================
0009A258                            ; ---------------------------------------------------------------------------
0009A258                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
0009A258                            ; ---------------------------------------------------------------------------
0009A258                            ; The first block would have been used for overriding the music tracks
0009A258                            ; as they have a lower priority, just as they are in Sound_PlaySFX
0009A258                            ; The third block would be used to set up the Special SFX
0009A258                            ; The second block, however, is for the SFX tracks, which have a higher priority
0009A258                            ; and would be checked for if they're currently playing
0009A258                            ; If they are, then the third block would be used again, this time to mark
0009A258                            ; the new tracks as 'currently playing'
0009A258                            
0009A258                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
0009A258                            
0009A258                            ; BGMFM4PSG3RAM:
0009A258                            ;SpecSFX_BGMChannelRAM:
0009A258 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0009A25C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
0009A260                            ; SFXFM4PSG3RAM:
0009A260                            ;SpecSFX_SFXChannelRAM:
0009A260 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0009A264 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
0009A268                            ; SpecialSFXFM4PSG3RAM:
0009A268                            ;SpecSFX_SpecSFXChannelRAM:
0009A268 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
0009A26C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
0009A270                            
0009A270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A270                            
0009A270                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
0009A270                            StopSFX:
0009A270 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0009A272 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0009A276 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
0009A278                            ; loc_723EA:
0009A278                            @trackloop:
0009A278 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
0009A27A 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
0009A27E 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0009A282 7600                       		moveq	#0,d3
0009A284 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
0009A288 6B00                       		bmi.s	@trackpsg			; Branch if PSG
0009A28A 4EBA 0000                  		jsr	FMNoteOff(pc)
0009A28E 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
0009A292 6600                       		bne.s	@getfmpointer					; Branch if not
0009A294 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0009A298 6A00                       		bpl.s	@getfmpointer					; Branch if not
0009A29A                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
0009A29A                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
0009A29A                            		; is playing its sound!
0009A29A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0009A29E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
0009A2A2 6000                       		bra.s	@gotfmpointer
0009A2A4                            ; ===========================================================================
0009A2A4                            ; loc_72416:
0009A2A4                            @getfmpointer:
0009A2A4 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
0009A2A6 E50B                       		lsl.b	#2,d3
0009A2A8 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
0009A2AC 264D                       		movea.l	a5,a3
0009A2AE 2A70 3000                  		movea.l	(a0,d3.w),a5
0009A2B2 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
0009A2B6                            ; loc_72428:
0009A2B6                            @gotfmpointer:
0009A2B6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009A2BA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009A2BE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009A2C2 4EBA 0000                  		jsr	SetVoice(pc)
0009A2C6 2A4B                       		movea.l	a3,a5
0009A2C8 6000                       		bra.s	@nexttrack
0009A2CA                            ; ===========================================================================
0009A2CA                            ; loc_7243C:
0009A2CA                            @trackpsg:
0009A2CA 4EBA 0000                  		jsr	PSGNoteOff(pc)
0009A2CE 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
0009A2D2 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
0009A2D6 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0009A2D8 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
0009A2DC 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0009A2DE E60B                       		lsr.b	#3,d3
0009A2E0 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
0009A2E4 2070 3000                  		movea.l	(a0,d3.w),a0
0009A2E8                            ; loc_7245A:
0009A2E8                            @gotpsgpointer:
0009A2E8 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009A2EC 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
0009A2F0 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
0009A2F6 6600                       		bne.s	@nexttrack			; Branch if not
0009A2F8 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
0009A300                            ; loc_72472:
0009A300                            @nexttrack:
0009A300 DAFC 0030                  		adda.w	#TrackSz,a5
0009A304 51CF FF72                  		dbf	d7,@trackloop
0009A308                            
0009A308 4E75                       		rts	
0009A30A                            ; End of function StopSFX
0009A30A                            
0009A30A                            
0009A30A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A30A                            
0009A30A                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
0009A30A                            StopSpecialSFX:
0009A30A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0009A30E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A310 6A00                       		bpl.s	@fadedfm		; Branch if not
0009A312 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0009A316 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0009A31A 6600                       		bne.s	@fadedfm		; Branch if not
0009A31C 4EBA 0000                  		jsr	SendFMNoteOff(pc)
0009A320 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0009A324 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009A328 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009A32C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A32E 6A00                       		bpl.s	@fadedfm		; Branch if not
0009A330 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009A334 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009A338 4EBA 0000                  		jsr	SetVoice(pc)
0009A33C                            ; loc_724AE:
0009A33C                            @fadedfm:
0009A33C 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
0009A340 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A342 6A00                       		bpl.s	@fadedpsg		; Branch if not
0009A344 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0009A348 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0009A34C 6600                       		bne.s	@fadedpsg		; Return if not
0009A34E 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
0009A352 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
0009A356 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009A35A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009A35E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A360 6A00                       		bpl.s	@fadedpsg		; Return if not
0009A362 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
0009A368 6600                       		bne.s	@fadedpsg			; Return if not
0009A36A 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
0009A372                            ; locret_724E4:
0009A372                            @fadedpsg:
0009A372 4E75                       		rts	
0009A374                            ; End of function StopSpecialSFX
0009A374                            
0009A374                            ; ===========================================================================
0009A374                            ; ---------------------------------------------------------------------------
0009A374                            ; Fade out music
0009A374                            ; ---------------------------------------------------------------------------
0009A374                            ; Sound_E0:
0009A374                            FadeOutMusic:
0009A374 4EBA FEFA                  		jsr	StopSFX(pc)
0009A378 4EBA FF90                  		jsr	StopSpecialSFX(pc)
0009A37C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
0009A382 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
0009A388 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
0009A38C 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
0009A390 4E75                       		rts	
0009A392                            
0009A392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A392                            
0009A392                            ; sub_72504:
0009A392                            DoFadeOut:
0009A392 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
0009A396 6700                       		beq.s	@continuefade		; Branch if yes
0009A398 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
0009A39C 4E75                       		rts	
0009A39E                            ; ===========================================================================
0009A39E                            ; loc_72510:
0009A39E                            @continuefade:
0009A39E 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
0009A3A2 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
0009A3A6 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
0009A3AC 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0009A3B0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009A3B2                            ; loc_72524:
0009A3B2                            @fmloop:
0009A3B2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A3B4 6A00                       		bpl.s	@nextfm			; Branch if not
0009A3B6 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0009A3BA 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
0009A3BC 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0009A3C0 6000                       		bra.s	@nextfm
0009A3C2                            ; ===========================================================================
0009A3C2                            ; loc_72534:
0009A3C2                            @sendfmtl:
0009A3C2 4EBA 0000                  		jsr	SendVoiceTL(pc)
0009A3C6                            ; loc_72538:
0009A3C6                            @nextfm:
0009A3C6 DAFC 0030                  		adda.w	#TrackSz,a5
0009A3CA 51CF FFE6                  		dbf	d7,@fmloop
0009A3CE                            
0009A3CE 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
0009A3D0                            ; loc_72542:
0009A3D0                            @psgloop:
0009A3D0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A3D2 6A00                       		bpl.s	@nextpsg		; branch if not
0009A3D4 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0009A3D8 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
0009A3DE 6500                       		blo.s	@sendpsgvol		; Branch if not
0009A3E0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0009A3E4 6000                       		bra.s	@nextpsg
0009A3E6                            ; ===========================================================================
0009A3E6                            ; loc_72558:
0009A3E6                            @sendpsgvol:
0009A3E6 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
0009A3EA 4EBA 0000                  		jsr	SetPSGVolume(pc)
0009A3EE                            ; loc_72560:
0009A3EE                            @nextpsg:
0009A3EE DAFC 0030                  		adda.w	#TrackSz,a5
0009A3F2 51CF FFDC                  		dbf	d7,@psgloop
0009A3F6                            
0009A3F6 4E75                       		rts	
0009A3F8                            ; End of function DoFadeOut
0009A3F8                            
0009A3F8                            
0009A3F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A3F8                            
0009A3F8                            ; sub_7256A:
0009A3F8                            FMSilenceAll:
0009A3F8 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
0009A3FA 7028                       		moveq	#$28,d0		; FM key on/off register
0009A3FC                            ; loc_7256E:
0009A3FC                            @noteoffloop:
0009A3FC 1203                       		move.b	d3,d1
0009A3FE 4EBA 0000                  		jsr	WriteFMI(pc)
0009A402 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
0009A404 4EBA 0000                  		jsr	WriteFMI(pc)
0009A408 51CB FFF2                  		dbf	d3,@noteoffloop
0009A40C                            
0009A40C 7040                       		moveq	#$40,d0		; Set TL on FM channels...
0009A40E 727F                       		moveq	#$7F,d1		; ... to total attenuation...
0009A410 7802                       		moveq	#2,d4		; ... for all 3 channels...
0009A412                            ; loc_72584:
0009A412                            @channelloop:
0009A412 7603                       		moveq	#3,d3		; ... for all operators on each channel...
0009A414                            ; loc_72586:
0009A414                            @channeltlloop:
0009A414 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
0009A418 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
0009A41C 5840                       		addq.w	#4,d0		; Next TL operator
0009A41E 51CB FFF4                  		dbf	d3,@channeltlloop
0009A422                            
0009A422 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
0009A426 51CC FFEA                  		dbf	d4,@channelloop
0009A42A                            
0009A42A 4E75                       		rts	
0009A42C                            ; End of function FMSilenceAll
0009A42C                            
0009A42C                            ; ===========================================================================
0009A42C                            ; ---------------------------------------------------------------------------
0009A42C                            ; Stop music
0009A42C                            ; ---------------------------------------------------------------------------
0009A42C                            ; Sound_E4: StopSoundAndMusic:
0009A42C                            StopAllSound:
0009A42C 702B                       		moveq	#$2B,d0		; Enable/disable DAC
0009A42E 123C 0080                  		move.b	#$80,d1		; Enable DAC
0009A432 4EBA 0000                  		jsr	WriteFMI(pc)
0009A436 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
0009A438 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
0009A43A 4EBA 0000                  		jsr	WriteFMI(pc)
0009A43E 204E                       		movea.l	a6,a0
0009A440                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
0009A440                            		; Remove the '-$10' to fix this.
0009A440 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
0009A444                            ; loc_725B6:
0009A444                            @clearramloop:
0009A444 4298                       		clr.l	(a0)+
0009A446 51C8 FFFC                  		dbf	d0,@clearramloop
0009A44A                            
0009A44A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
0009A450 4EBA FFA6                  		jsr	FMSilenceAll(pc)
0009A454 6000 0000                  		bra.w	PSGSilenceAll
0009A458                            
0009A458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A458                            
0009A458                            ; sub_725CA:
0009A458                            InitMusicPlayback:
0009A458 204E                       		movea.l	a6,a0
0009A45A                            		; Save several values
0009A45A 1216                       		move.b	v_sndprio(a6),d1
0009A45C 142E 0027                  		move.b	f_1up_playing(a6),d2
0009A460 162E 002A                  		move.b	f_speedup(a6),d3
0009A464 182E 0026                  		move.b	v_fadein_counter(a6),d4
0009A468                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
0009A468 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
0009A46C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
0009A470                            ; loc_725E4:
0009A470                            @clearramloop:
0009A470 4298                       		clr.l	(a0)+
0009A472 51C8 FFFC                  		dbf	d0,@clearramloop
0009A476                            
0009A476                            		; Restore the values saved above
0009A476 1C81                       		move.b	d1,v_sndprio(a6)
0009A478 1D42 0027                  		move.b	d2,f_1up_playing(a6)
0009A47C 1D43 002A                  		move.b	d3,f_speedup(a6)
0009A480 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
0009A484 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
0009A488 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
0009A48E                            		; DANGER! This silences ALL channels, even the ones being used
0009A48E                            		; by SFX, and not music! @sendfmnoteoff does this already, and
0009A48E                            		; doesn't affect SFX channels, either.
0009A48E                            		; This should be replaced with an 'rts'.
0009A48E 4EBA FF68                  		jsr	FMSilenceAll(pc)
0009A492 6000 0000                  		bra.w	PSGSilenceAll
0009A496                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
0009A496                            		; don't do a very good job of setting up the music tracks.
0009A496                            		; Tracks that aren't defined in a music file's header don't have
0009A496                            		; their channels defined, meaning @sendfmnoteoff won't silence
0009A496                            		; hardware properly. In combination with removing the above
0009A496                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
0009A496                            		; notes.
0009A496                            		; To fix this, I suggest using this code, instead of an 'rts':
0009A496                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
0009A496                            		;lea	FMDACInitBytes(pc),a2
0009A496                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
0009A496                            		;bsr.s	@writeloop
0009A496                            		;lea	PSGInitBytes(pc),a2
0009A496                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
0009A496                            
0009A496                            ;@writeloop:
0009A496                            		;move.b	(a2)+,(a1)		; Write track's channel byte
0009A496                            		;lea	TrackSz(a1),a1		; Next track
0009A496                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
0009A496                            
0009A496                            		;rts
0009A496                            	
0009A496                            ; End of function InitMusicPlayback
0009A496                            
0009A496                            
0009A496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A496                            
0009A496                            ; sub_7260C:
0009A496                            TempoWait:
0009A496 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
0009A49C 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
0009A4A0 7030                       		moveq	#TrackSz,d0
0009A4A2 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0009A4A4                            ; loc_7261A:
0009A4A4                            @tempoloop:
0009A4A4 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0009A4A6 D0C0                       		adda.w	d0,a0	; Advance to next track
0009A4A8 51C9 FFFA                  		dbf	d1,@tempoloop
0009A4AC                            
0009A4AC 4E75                       		rts	
0009A4AE                            ; End of function TempoWait
0009A4AE                            
0009A4AE                            ; ===========================================================================
0009A4AE                            ; ---------------------------------------------------------------------------
0009A4AE                            ; Speed	up music
0009A4AE                            ; ---------------------------------------------------------------------------
0009A4AE                            ; Sound_E2:
0009A4AE                            SpeedUpMusic:
0009A4AE 4A2E 0027                  		tst.b	f_1up_playing(a6)
0009A4B2 6600                       		bne.s	@speedup_1up
0009A4B4 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
0009A4BA 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
0009A4C0 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0009A4C6 4E75                       		rts	
0009A4C8                            ; ===========================================================================
0009A4C8                            ; loc_7263E:
0009A4C8                            @speedup_1up:
0009A4C8 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
0009A4CE 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0009A4D4 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
0009A4DA 4E75                       		rts	
0009A4DC                            ; ===========================================================================
0009A4DC                            ; ---------------------------------------------------------------------------
0009A4DC                            ; Change music back to normal speed
0009A4DC                            ; ---------------------------------------------------------------------------
0009A4DC                            ; Sound_E3:
0009A4DC                            SlowDownMusic:
0009A4DC 4A2E 0027                  		tst.b	f_1up_playing(a6)
0009A4E0 6600                       		bne.s	@slowdown_1up
0009A4E2 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
0009A4E8 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
0009A4EE 422E 002A                  		clr.b	f_speedup(a6)
0009A4F2 4E75                       		rts	
0009A4F4                            ; ===========================================================================
0009A4F4                            ; loc_7266A:
0009A4F4                            @slowdown_1up:
0009A4F4 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
0009A4FA 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0009A500 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
0009A504 4E75                       		rts	
0009A506                            
0009A506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A506                            
0009A506                            ; sub_7267C:
0009A506                            DoFadeIn:
0009A506 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
0009A50A 6700                       		beq.s	@continuefade		; Branch if yes
0009A50C 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
0009A510 4E75                       		rts	
0009A512                            ; ===========================================================================
0009A512                            ; loc_72688:
0009A512                            @continuefade:
0009A512 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
0009A516 6700                       		beq.s	@fadedone		; Branch if yes
0009A518 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
0009A51C 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
0009A522 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0009A526 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009A528                            ; loc_7269E:
0009A528                            @fmloop:
0009A528 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A52A 6A00                       		bpl.s	@nextfm			; Branch if not
0009A52C 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0009A530 4EBA 0000                  		jsr	SendVoiceTL(pc)
0009A534                            ; loc_726AA:
0009A534                            @nextfm:
0009A534 DAFC 0030                  		adda.w	#TrackSz,a5
0009A538 51CF FFEE                  		dbf	d7,@fmloop
0009A53C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
0009A53E                            ; loc_726B4:
0009A53E                            @psgloop:
0009A53E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A540 6A00                       		bpl.s	@nextpsg		; Branch if not
0009A542 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0009A546 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
0009A54A 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
0009A54E 6500                       		blo.s	@sendpsgvol		; Branch if yes
0009A550 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
0009A552                            ; loc_726C8:
0009A552                            @sendpsgvol:
0009A552 4EBA 0000                  		jsr	SetPSGVolume(pc)
0009A556                            ; loc_726CC:
0009A556                            @nextpsg:
0009A556 DAFC 0030                  		adda.w	#TrackSz,a5
0009A55A 51CF FFE2                  		dbf	d7,@psgloop
0009A55E 4E75                       		rts	
0009A560                            ; ===========================================================================
0009A560                            ; loc_726D6:
0009A560                            @fadedone:
0009A560 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
0009A566 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
0009A56A 4E75                       		rts	
0009A56C                            ; End of function DoFadeIn
0009A56C                            
0009A56C                            ; ===========================================================================
0009A56C                            ; loc_726E2:
0009A56C                            FMNoteOn:
0009A56C 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
0009A570 6600                       		bne.s	@locret		; Return if so
0009A572 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0009A576 6600                       		bne.s	@locret		; Return if so
0009A578 7028                       		moveq	#$28,d0		; Note on/off register
0009A57A 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
0009A57E 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0009A582 6000 0000                  		bra.w	WriteFMI
0009A586                            ; ===========================================================================
0009A586                            ; locret_726FC:
0009A586                            @locret:
0009A586 4E75                       		rts	
0009A588                            
0009A588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A588                            
0009A588                            ; sub_726FE:
0009A588                            FMNoteOff:
0009A588 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
0009A58C 6600                       		bne.s	locret_72714	; Return if yes
0009A58E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A592 6600                       		bne.s	locret_72714	; Return if yes
0009A594                            ; loc_7270A:
0009A594                            SendFMNoteOff:
0009A594 7028                       		moveq	#$28,d0		; Note on/off register
0009A596 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
0009A59A 6000 0000                  		bra.w	WriteFMI
0009A59E                            ; ===========================================================================
0009A59E                            
0009A59E                            locret_72714:
0009A59E 4E75                       		rts	
0009A5A0                            ; End of function FMNoteOff
0009A5A0                            
0009A5A0                            ; ===========================================================================
0009A5A0                            ; loc_72716:
0009A5A0                            WriteFMIorIIMain:
0009A5A0 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0009A5A4 6600                       		bne.s	@locret		; Return if yes
0009A5A6 6000 0000                  		bra.w	WriteFMIorII
0009A5AA                            ; ===========================================================================
0009A5AA                            ; locret_72720:
0009A5AA                            @locret:
0009A5AA 4E75                       		rts	
0009A5AC                            
0009A5AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A5AC                            
0009A5AC                            ; sub_72722:
0009A5AC                            WriteFMIorII:
0009A5AC 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
0009A5B2 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0009A5B4 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
0009A5B8                            ; End of function WriteFMIorII
0009A5B8                            
0009A5B8                            
0009A5B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A5B8                            
0009A5B8                            ; The reason I think this is an *early* SMPS 68k Type 1b
0009A5B8                            ; is because this subroutine is the one from Type 1a:
0009A5B8                            ; other Type 1b drivers have a newer, optimised version.
0009A5B8                            ; The driver itself is Type 1b, with this odd exception.
0009A5B8                            
0009A5B8                            ; sub_7272E:
0009A5B8                            WriteFMI:
0009A5B8 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009A5BE 0802 0007                  		btst	#7,d2		; Is FM busy?
0009A5C2 66F4                       		bne.s	WriteFMI	; Loop if so
0009A5C4 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
0009A5CA 4E71                       		nop	
0009A5CC 4E71                       		nop	
0009A5CE 4E71                       		nop	
0009A5D0                            ; loc_72746:
0009A5D0                            @waitloop:
0009A5D0 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009A5D6 0802 0007                  		btst	#7,d2		; Is FM busy?
0009A5DA 66F4                       		bne.s	@waitloop	; Loop if so
0009A5DC                            
0009A5DC 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
0009A5E2 4E75                       		rts	
0009A5E4                            ; End of function WriteFMI
0009A5E4                            
0009A5E4                            ; ===========================================================================
0009A5E4                            ; loc_7275A:
0009A5E4                            WriteFMIIPart:
0009A5E4 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
0009A5E8 0882 0002                  		bclr	#2,d2			; Clear chip toggle
0009A5EC D002                       		add.b	d2,d0			; Add in to destination register
0009A5EE                            
0009A5EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A5EE                            
0009A5EE                            ; sub_72764:
0009A5EE                            WriteFMII:
0009A5EE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009A5F4 0802 0007                  		btst	#7,d2		; Is FM busy?
0009A5F8 66F4                       		bne.s	WriteFMII	; Loop if so
0009A5FA 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
0009A600 4E71                       		nop	
0009A602 4E71                       		nop	
0009A604 4E71                       		nop	
0009A606                            ; loc_7277C:
0009A606                            @waitloop:
0009A606 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009A60C 0802 0007                  		btst	#7,d2		; Is FM busy?
0009A610 66F4                       		bne.s	@waitloop	; Loop if so
0009A612                            
0009A612 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
0009A618 4E75                       		rts	
0009A61A                            ; End of function WriteFMII
0009A61A                            
0009A61A                            ; ===========================================================================
0009A61A                            ; ---------------------------------------------------------------------------
0009A61A                            ; FM Note Values: b-0 to a#8
0009A61A                            ; ---------------------------------------------------------------------------
0009A61A                            ; word_72790: FM_Notes:
0009A61A                            FMFrequencies:
0009A61A 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
0009A632 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
0009A64A 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0009A662 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
0009A67A 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
0009A692 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
0009A6AA 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
0009A6C2 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
0009A6DA                            
0009A6DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A6DA                            
0009A6DA                            ; sub_72850:
0009A6DA                            PSGUpdateTrack:
0009A6DA 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
0009A6DE 6600                       		bne.s	@notegoing
0009A6E0 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
0009A6E4 4EBA 0000                  		jsr	PSGDoNext(pc)
0009A6E8 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
0009A6EC 6000 0000                  		bra.w	PSGDoVolFX
0009A6F0                            ; ===========================================================================
0009A6F0                            ; loc_72866:
0009A6F0                            @notegoing:
0009A6F0 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
0009A6F4 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
0009A6F8 4EBA F4EA                  		jsr	DoModulation(pc)
0009A6FC 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
0009A700 4E75                       		rts
0009A702                            ; End of function PSGUpdateTrack
0009A702                            
0009A702                            
0009A702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A702                            
0009A702                            ; sub_72878:
0009A702                            PSGDoNext:
0009A702 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
0009A706 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
0009A70A                            ; loc_72880:
0009A70A                            @noteloop:
0009A70A 7A00                       		moveq	#0,d5
0009A70C 1A1C                       		move.b	(a4)+,d5	; Get byte from track
0009A70E 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0009A712 6500                       		blo.s	@gotnote	; Branch if not
0009A714 4EBA 0000                  		jsr	CoordFlag(pc)
0009A718 60F0                       		bra.s	@noteloop
0009A71A                            ; ===========================================================================
0009A71A                            ; loc_72890:
0009A71A                            @gotnote:
0009A71A 4A05                       		tst.b	d5		; Is it a note?
0009A71C 6A00                       		bpl.s	@gotduration	; Branch if not
0009A71E 4EBA 0000                  		jsr	PSGSetFreq(pc)
0009A722 1A1C                       		move.b	(a4)+,d5	; Get another byte
0009A724 4A05                       		tst.b	d5		; Is it a duration?
0009A726 6A00                       		bpl.s	@gotduration	; Branch if yes
0009A728 534C                       		subq.w	#1,a4		; Put byte back
0009A72A 6000 F452                  		bra.w	FinishTrackUpdate
0009A72E                            ; ===========================================================================
0009A72E                            ; loc_728A4:
0009A72E                            @gotduration:
0009A72E 4EBA F42E                  		jsr	SetDuration(pc)
0009A732 6000 F44A                  		bra.w	FinishTrackUpdate
0009A736                            ; End of function PSGDoNext
0009A736                            
0009A736                            
0009A736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A736                            
0009A736                            ; sub_728AC:
0009A736                            PSGSetFreq:
0009A736 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
0009A73A 6500                       		bcs.s	@restpsg	; If $80, put track at rest
0009A73C DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
0009A740 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
0009A744 E34D                       		lsl.w	#1,d5
0009A746 41FA 0000                  		lea	PSGFrequencies(pc),a0
0009A74A 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
0009A750 6000 F42C                  		bra.w	FinishTrackUpdate
0009A754                            ; ===========================================================================
0009A754                            ; loc_728CA:
0009A754                            @restpsg:
0009A754 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009A758 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
0009A75E 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
0009A762 6000 0000                  		bra.w	PSGNoteOff
0009A766                            ; End of function PSGSetFreq
0009A766                            
0009A766                            
0009A766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A766                            
0009A766                            ; sub_728DC:
0009A766                            PSGDoNoteOn:
0009A766 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
0009A76A 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
0009A76C                            ; End of function PSGDoNoteOn
0009A76C                            
0009A76C                            
0009A76C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A76C                            
0009A76C                            ; sub_728E2:
0009A76C                            PSGUpdateFreq:
0009A76C 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
0009A770 4880                       		ext.w	d0
0009A772 DC40                       		add.w	d0,d6		; Add to frequency
0009A774 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0009A778 6600                       		bne.s	@locret		; Return if yes
0009A77A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0009A77E 6600                       		bne.s	@locret		; Return if yes
0009A780 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
0009A784 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
0009A788 6600                       		bne.s	@notnoise	; Branch if not
0009A78A 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
0009A78E                            ; loc_72904:
0009A78E                            @notnoise:
0009A78E 3206                       		move.w	d6,d1
0009A790 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0009A794 8001                       		or.b	d1,d0		; Latch tone data to channel
0009A796 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
0009A798 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
0009A79C 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009A7A2 13C6 00C0 0011             		move.b	d6,(psg_input).l
0009A7A8                            ; locret_7291E:
0009A7A8                            @locret:
0009A7A8 4E75                       		rts	
0009A7AA                            ; End of function PSGUpdateFreq
0009A7AA                            
0009A7AA                            ; ===========================================================================
0009A7AA                            ; loc_72920:
0009A7AA                            PSGSetRest:
0009A7AA 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
0009A7AE 4E75                       		rts	
0009A7B0                            
0009A7B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A7B0                            
0009A7B0                            ; sub_72926:
0009A7B0                            PSGUpdateVolFX:
0009A7B0 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0009A7B4 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
0009A7B8                            ; loc_7292E:
0009A7B8                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
0009A7B8 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
0009A7BC 7000                       		moveq	#0,d0
0009A7BE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
0009A7C2 6700                       		beq.s	SetPSGVolume
0009A7C4 2079 0009 9776             		movea.l	(Go_PSGIndex).l,a0
0009A7CA 5340                       		subq.w	#1,d0
0009A7CC E548                       		lsl.w	#2,d0
0009A7CE 2070 0000                  		movea.l	(a0,d0.w),a0
0009A7D2 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0009A7D6 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
0009A7DA 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
0009A7DE 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
0009A7E2 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
0009A7E4 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
0009A7E8 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
0009A7EA                            ; loc_72960:
0009A7EA                            @gotflutter:
0009A7EA DC40                       		add.w	d0,d6		; Add volume envelope value to volume
0009A7EC 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
0009A7F0 6500                       		blo.s	SetPSGVolume	; Branch if not
0009A7F2 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
0009A7F4                            ; End of function PSGUpdateVolFX
0009A7F4                            
0009A7F4                            
0009A7F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A7F4                            
0009A7F4                            ; sub_7296A:
0009A7F4                            SetPSGVolume:
0009A7F4 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0009A7F8 6600                       		bne.s	locret_7298A	; Return if so
0009A7FA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A7FE 6600                       		bne.s	locret_7298A	; Return if so
0009A800 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
0009A804 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
0009A806                            ; loc_7297C:
0009A806                            PSGSendVolume:
0009A806 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
0009A80A 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
0009A80E 13C6 00C0 0011             		move.b	d6,(psg_input).l
0009A814                            
0009A814                            locret_7298A:
0009A814 4E75                       		rts	
0009A816                            ; ===========================================================================
0009A816                            ; loc_7298C: PSGCheckNoteFill:
0009A816                            PSGCheckNoteTimeout:
0009A816 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
0009A81A 67EA                       		beq.s	PSGSendVolume			; Branch if not
0009A81C 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
0009A820 66E4                       		bne.s	PSGSendVolume			; Branch if not
0009A822 4E75                       		rts	
0009A824                            ; End of function SetPSGVolume
0009A824                            
0009A824                            ; ===========================================================================
0009A824                            ; loc_7299A: FlutterDone:
0009A824                            VolEnvHold:
0009A824 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
0009A828 4E75                       		rts	
0009A82A                            
0009A82A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A82A                            
0009A82A                            ; sub_729A0:
0009A82A                            PSGNoteOff:
0009A82A 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A82E 6600                       		bne.s	locret_729B4	; Return if so
0009A830                            ; loc_729A6:
0009A830                            SendPSGNoteOff:
0009A830 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
0009A834 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
0009A838 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009A83E                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
0009A83E                            		; risk of music accidentally playing noise because it can't detect if
0009A83E                            		; the PSG4/noise channel needs muting on track initialisation.
0009A83E                            		; S&K's driver fixes it by doing this:
0009A83E 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
0009A842 6600                       		bne.s	locret_729B4
0009A844 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
0009A84C                            
0009A84C                            locret_729B4:
0009A84C 4E75                       		rts	
0009A84E                            ; End of function PSGNoteOff
0009A84E                            
0009A84E                            
0009A84E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A84E                            
0009A84E                            ; sub_729B6:
0009A84E                            PSGSilenceAll:
0009A84E 41F9 00C0 0011             		lea	(psg_input).l,a0
0009A854 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
0009A858 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
0009A85C 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
0009A860 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
0009A864 4E75                       		rts	
0009A866                            ; End of function PSGSilenceAll
0009A866                            
0009A866                            ; ===========================================================================
0009A866                            ; word_729CE:
0009A866                            PSGFrequencies:
0009A866 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
0009A876 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
0009A886 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
0009A896 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
0009A8A6 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
0009A8B6 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
0009A8C6 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
0009A8D6 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
0009A8E6 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
0009A8F2                            
0009A8F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A8F2                            
0009A8F2                            ; sub_72A5A:
0009A8F2                            CoordFlag:
0009A8F2 0445 00E0                  		subi.w	#$E0,d5
0009A8F6 E54D                       		lsl.w	#2,d5
0009A8F8 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
0009A8FC                            ; End of function CoordFlag
0009A8FC                            
0009A8FC                            ; ===========================================================================
0009A8FC                            ; loc_72A64:
0009A8FC                            coordflagLookup:
0009A8FC 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
0009A900                            ; ===========================================================================
0009A900 6000 0000                  		bra.w	cfDetune		; $E1
0009A904                            ; ===========================================================================
0009A904 6000 0000                  		bra.w	cfSetCommunication	; $E2
0009A908                            ; ===========================================================================
0009A908 6000 0000                  		bra.w	cfJumpReturn		; $E3
0009A90C                            ; ===========================================================================
0009A90C 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
0009A910                            ; ===========================================================================
0009A910 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
0009A914                            ; ===========================================================================
0009A914 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
0009A918                            ; ===========================================================================
0009A918 6000 0000                  		bra.w	cfHoldNote		; $E7
0009A91C                            ; ===========================================================================
0009A91C 6000 0000                  		bra.w	cfNoteTimeout		; $E8
0009A920                            ; ===========================================================================
0009A920 6000 0000                  		bra.w	cfChangeTransposition	; $E9
0009A924                            ; ===========================================================================
0009A924 6000 0000                  		bra.w	cfSetTempo		; $EA
0009A928                            ; ===========================================================================
0009A928 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
0009A92C                            ; ===========================================================================
0009A92C 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
0009A930                            ; ===========================================================================
0009A930 6000 0000                  		bra.w	cfClearPush		; $ED
0009A934                            ; ===========================================================================
0009A934 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
0009A938                            ; ===========================================================================
0009A938 6000 0000                  		bra.w	cfSetVoice		; $EF
0009A93C                            ; ===========================================================================
0009A93C 6000 0000                  		bra.w	cfModulation		; $F0
0009A940                            ; ===========================================================================
0009A940 6000 0000                  		bra.w	cfEnableModulation	; $F1
0009A944                            ; ===========================================================================
0009A944 6000 0000                  		bra.w	cfStopTrack		; $F2
0009A948                            ; ===========================================================================
0009A948 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
0009A94C                            ; ===========================================================================
0009A94C 6000 0000                  		bra.w	cfDisableModulation	; $F4
0009A950                            ; ===========================================================================
0009A950 6000 0000                  		bra.w	cfSetPSGTone		; $F5
0009A954                            ; ===========================================================================
0009A954 6000 0000                  		bra.w	cfJumpTo		; $F6
0009A958                            ; ===========================================================================
0009A958 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
0009A95C                            ; ===========================================================================
0009A95C 6000 0000                  		bra.w	cfJumpToGosub		; $F8
0009A960                            ; ===========================================================================
0009A960 6000 0000                  		bra.w	cfOpF9			; $F9
0009A964                            ; ===========================================================================
0009A964                            ; loc_72ACC:
0009A964                            cfPanningAMSFMS:
0009A964 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
0009A966 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009A96A 6B00                       		bmi.s	locret_72AEA		; Return if yes
0009A96C 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
0009A970 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0009A974 8200                       		or.b	d0,d1			; Mask in new value
0009A976 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
0009A97A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009A97E 6000 FC20                  		bra.w	WriteFMIorIIMain
0009A982                            ; ===========================================================================
0009A982                            
0009A982                            locret_72AEA:
0009A982 4E75                       		rts	
0009A984                            ; ===========================================================================
0009A984                            ; loc_72AEC: cfAlterNotes:
0009A984                            cfDetune:
0009A984 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
0009A988 4E75                       		rts	
0009A98A                            ; ===========================================================================
0009A98A                            ; loc_72AF2: cfUnknown1:
0009A98A                            cfSetCommunication:
0009A98A 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
0009A98E 4E75                       		rts	
0009A990                            ; ===========================================================================
0009A990                            ; loc_72AF8:
0009A990                            cfJumpReturn:
0009A990 7000                       		moveq	#0,d0
0009A992 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
0009A996 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0009A99A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
0009A9A2 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
0009A9A4 5800                       		addq.b	#4,d0			; Actually 'pop' value
0009A9A6 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
0009A9AA 4E75                       		rts	
0009A9AC                            ; ===========================================================================
0009A9AC                            ; loc_72B14:
0009A9AC                            cfFadeInToPrevious:
0009A9AC 204E                       		movea.l	a6,a0
0009A9AE 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
0009A9B2 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
0009A9B6                            ; loc_72B1E:
0009A9B6                            @restoreramloop:
0009A9B6 20D9                       		move.l	(a1)+,(a0)+
0009A9B8 51C8 FFFC                  		dbf	d0,@restoreramloop
0009A9BC                            
0009A9BC 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
0009A9C2 264D                       		movea.l	a5,a3
0009A9C4 1C3C 0028                  		move.b	#$28,d6
0009A9C8 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
0009A9CC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009A9CE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0009A9D2                            ; loc_72B3A:
0009A9D2                            @fmloop:
0009A9D2 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0009A9D6 6700                       		beq.s	@nextfm		; Branch if not
0009A9D8 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009A9DC DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
0009A9E0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A9E4 6600                       		bne.s	@nextfm		; Branch if yes
0009A9E6 7000                       		moveq	#0,d0
0009A9E8 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
0009A9EC 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009A9F0 4EBA 0000                  		jsr	SetVoice(pc)
0009A9F4                            ; loc_72B5C:
0009A9F4                            @nextfm:
0009A9F4 DAFC 0030                  		adda.w	#TrackSz,a5
0009A9F8 51CF FFD8                  		dbf	d7,@fmloop
0009A9FC                            
0009A9FC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
0009A9FE                            ; loc_72B66:
0009A9FE                            @psgloop:
0009A9FE 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0009AA02 6700                       		beq.s	@nextpsg	; Branch if not
0009AA04 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009AA08 4EBA FE20                  		jsr	PSGNoteOff(pc)
0009AA0C DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
0009AA10                            ; loc_72B78:
0009AA10                            @nextpsg:
0009AA10 DAFC 0030                  		adda.w	#TrackSz,a5
0009AA14 51CF FFE8                  		dbf	d7,@psgloop
0009AA18                            		
0009AA18 2A4B                       		movea.l	a3,a5
0009AA1A 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
0009AA20 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
0009AA26 422E 0027                  		clr.b	f_1up_playing(a6)
0009AA2A 33FC 0000 00A1 1100        		startZ80
0009AA32 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
0009AA34 4E75                       		rts	
0009AA36                            ; ===========================================================================
0009AA36                            ; loc_72B9E:
0009AA36                            cfSetTempoDivider:
0009AA36 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
0009AA3A 4E75                       		rts	
0009AA3C                            ; ===========================================================================
0009AA3C                            ; loc_72BA4: cfSetVolume:
0009AA3C                            cfChangeFMVolume:
0009AA3C 101C                       		move.b	(a4)+,d0		; Get parameter
0009AA3E D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
0009AA42 6000 0000                  		bra.w	SendVoiceTL
0009AA46                            ; ===========================================================================
0009AA46                            ; loc_72BAE: cfPreventAttack:
0009AA46                            cfHoldNote:
0009AA46 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
0009AA4A 4E75                       		rts	
0009AA4C                            ; ===========================================================================
0009AA4C                            ; loc_72BB4: cfNoteFill
0009AA4C                            cfNoteTimeout:
0009AA4C 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
0009AA50 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
0009AA54 4E75                       		rts	
0009AA56                            ; ===========================================================================
0009AA56                            ; loc_72BBE: cfAddKey:
0009AA56                            cfChangeTransposition:
0009AA56 101C                       		move.b	(a4)+,d0		; Get parameter
0009AA58 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
0009AA5C 4E75                       		rts	
0009AA5E                            ; ===========================================================================
0009AA5E                            ; loc_72BC6:
0009AA5E                            cfSetTempo:
0009AA5E 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
0009AA62 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
0009AA66 4E75                       		rts	
0009AA68                            ; ===========================================================================
0009AA68                            ; loc_72BD0: cfSetTempoMod:
0009AA68                            cfSetTempoDividerAll:
0009AA68 41EE 0040                  		lea	v_music_track_ram(a6),a0
0009AA6C 101C                       		move.b	(a4)+,d0			; Get new tempo divider
0009AA6E 7230                       		moveq	#TrackSz,d1
0009AA70 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
0009AA72                            ; loc_72BDA:
0009AA72                            @trackloop:
0009AA72 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
0009AA76 D0C1                       		adda.w	d1,a0
0009AA78 51CA FFF8                  		dbf	d2,@trackloop
0009AA7C                            
0009AA7C 4E75                       		rts	
0009AA7E                            ; ===========================================================================
0009AA7E                            ; loc_72BE6: cfChangeVolume:
0009AA7E                            cfChangePSGVolume:
0009AA7E 101C                       		move.b	(a4)+,d0		; Get volume change
0009AA80 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
0009AA84 4E75                       		rts	
0009AA86                            ; ===========================================================================
0009AA86                            ; loc_72BEE:
0009AA86                            cfClearPush:
0009AA86 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
0009AA8A 4E75                       		rts	
0009AA8C                            ; ===========================================================================
0009AA8C                            ; loc_72BF4:
0009AA8C                            cfStopSpecialFM4:
0009AA8C 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0009AA90 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
0009AA94 4EBA FAF2                  		jsr	FMNoteOff(pc)
0009AA98 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
0009AA9C 6B00                       		bmi.s	@locexit					; Branch if yes
0009AA9E 264D                       		movea.l	a5,a3
0009AAA0 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0009AAA4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009AAA8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009AAAC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009AAB0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009AAB4 4EBA 0000                  		jsr	SetVoice(pc)
0009AAB8 2A4B                       		movea.l	a3,a5
0009AABA                            ; loc_72C22:
0009AABA                            @locexit:
0009AABA 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
0009AABC 4E75                       		rts	
0009AABE                            ; ===========================================================================
0009AABE                            ; loc_72C26:
0009AABE                            cfSetVoice:
0009AABE 7000                       		moveq	#0,d0
0009AAC0 101C                       		move.b	(a4)+,d0		; Get new voice
0009AAC2 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
0009AAC6 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
0009AACA 6600 0000                  		bne.w	locret_72CAA		; Return if yes
0009AACE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
0009AAD2 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
0009AAD6 6700                       		beq.s	SetVoice		; If yes, branch
0009AAD8 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
0009AADC 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
0009AAE0 6B00                       		bmi.s	SetVoice		; If yes, branch
0009AAE2 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
0009AAE6                            
0009AAE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009AAE6                            
0009AAE6                            ; sub_72C4E:
0009AAE6                            SetVoice:
0009AAE6 5340                       		subq.w	#1,d0
0009AAE8 6B00                       		bmi.s	@havevoiceptr
0009AAEA 323C 0019                  		move.w	#25,d1
0009AAEE                            ; loc_72C56:
0009AAEE                            @voicemultiply:
0009AAEE D2C1                       		adda.w	d1,a1
0009AAF0 51C8 FFFC                  		dbf	d0,@voicemultiply
0009AAF4                            ; loc_72C5C:
0009AAF4                            @havevoiceptr:
0009AAF4 1219                       		move.b	(a1)+,d1		; feedback/algorithm
0009AAF6 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
0009AAFA 1801                       		move.b	d1,d4
0009AAFC 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
0009AB00 4EBA FAAA                  		jsr	WriteFMIorII(pc)
0009AB04 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
0009AB08 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
0009AB0A                            ; loc_72C72:
0009AB0A                            @sendvoiceloop:
0009AB0A 101A                       		move.b	(a2)+,d0
0009AB0C 1219                       		move.b	(a1)+,d1
0009AB0E 4EBA FA9C                  		jsr	WriteFMIorII(pc)
0009AB12 51CB FFF6                  		dbf	d3,@sendvoiceloop
0009AB16                            
0009AB16 7A03                       		moveq	#3,d5
0009AB18 0244 0007                  		andi.w	#7,d4			; Get algorithm
0009AB1C 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
0009AB20 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
0009AB24                            ; loc_72C8C:
0009AB24                            @sendtlloop:
0009AB24 101A                       		move.b	(a2)+,d0
0009AB26 1219                       		move.b	(a1)+,d1
0009AB28 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0009AB2A 6400                       		bcc.s	@sendtl		; Branch if not
0009AB2C D203                       		add.b	d3,d1		; Include additional attenuation
0009AB2E                            ; loc_72C96:
0009AB2E                            @sendtl:
0009AB2E 4EBA FA7C                  		jsr	WriteFMIorII(pc)
0009AB32 51CD FFF0                  		dbf	d5,@sendtlloop
0009AB36                            		
0009AB36 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
0009AB3A 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
0009AB3E 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
0009AB42                            
0009AB42                            locret_72CAA:
0009AB42 4E75                       		rts	
0009AB44                            ; End of function SetVoice
0009AB44                            
0009AB44                            ; ===========================================================================
0009AB44                            ; byte_72CAC:
0009AB44 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0009AB4C                            
0009AB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009AB4C                            
0009AB4C                            ; sub_72CB4:
0009AB4C                            SendVoiceTL:
0009AB4C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009AB50 6600                       		bne.s	@locret		; Return if so
0009AB52 7000                       		moveq	#0,d0
0009AB54 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009AB58 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009AB5C 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009AB60 6700                       		beq.s	@gotvoiceptr
0009AB62                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
0009AB62                            		; of a6!
0009AB62 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
0009AB66 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009AB6A 6B00                       		bmi.s	@gotvoiceptr
0009AB6C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
0009AB70                            ; loc_72CD8:
0009AB70                            @gotvoiceptr:
0009AB70 5340                       		subq.w	#1,d0
0009AB72 6B00                       		bmi.s	@gotvoice
0009AB74 323C 0019                  		move.w	#25,d1
0009AB78                            ; loc_72CE0:
0009AB78                            @voicemultiply:
0009AB78 D2C1                       		adda.w	d1,a1
0009AB7A 51C8 FFFC                  		dbf	d0,@voicemultiply
0009AB7E                            ; loc_72CE6:
0009AB7E                            @gotvoice:
0009AB7E D2FC 0015                  		adda.w	#21,a1				; Want TL
0009AB82 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
0009AB86 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
0009AB8A 0240 0007                  		andi.w	#7,d0				; Want only algorithm
0009AB8E 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
0009AB92 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
0009AB96 6B00                       		bmi.s	@locret				; If negative, stop
0009AB98 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
0009AB9A                            ; loc_72D02:
0009AB9A                            @sendtlloop:
0009AB9A 101A                       		move.b	(a2)+,d0
0009AB9C 1219                       		move.b	(a1)+,d1
0009AB9E E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0009ABA0 6400                       		bcc.s	@senttl		; Branch if not
0009ABA2 D203                       		add.b	d3,d1		; Include additional attenuation
0009ABA4 6500                       		bcs.s	@senttl		; Branch on overflow
0009ABA6 4EBA FA04                  		jsr	WriteFMIorII(pc)
0009ABAA                            ; loc_72D12:
0009ABAA                            @senttl:
0009ABAA 51CD FFEE                  		dbf	d5,@sendtlloop
0009ABAE                            ; locret_72D16:
0009ABAE                            @locret:
0009ABAE 4E75                       		rts	
0009ABB0                            ; End of function SendVoiceTL
0009ABB0                            
0009ABB0                            ; ===========================================================================
0009ABB0                            ; byte_72D18:
0009ABB0                            FMInstrumentOperatorTable:
0009ABB0 30                         		dc.b  $30		; Detune/multiple operator 1
0009ABB1 38                         		dc.b  $38		; Detune/multiple operator 3
0009ABB2 34                         		dc.b  $34		; Detune/multiple operator 2
0009ABB3 3C                         		dc.b  $3C		; Detune/multiple operator 4
0009ABB4 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
0009ABB5 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
0009ABB6 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
0009ABB7 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
0009ABB8 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
0009ABB9 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
0009ABBA 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
0009ABBB 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
0009ABBC 70                         		dc.b  $70		; Secondary decay rate operator 1
0009ABBD 78                         		dc.b  $78		; Secondary decay rate operator 3
0009ABBE 74                         		dc.b  $74		; Secondary decay rate operator 2
0009ABBF 7C                         		dc.b  $7C		; Secondary decay rate operator 4
0009ABC0 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
0009ABC1 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
0009ABC2 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
0009ABC3 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
0009ABC4                            FMInstrumentOperatorTable_End
0009ABC4                            ; byte_72D2C:
0009ABC4                            FMInstrumentTLTable:
0009ABC4 40                         		dc.b  $40		; Total level operator 1
0009ABC5 48                         		dc.b  $48		; Total level operator 3
0009ABC6 44                         		dc.b  $44		; Total level operator 2
0009ABC7 4C                         		dc.b  $4C		; Total level operator 4
0009ABC8                            FMInstrumentTLTable_End
0009ABC8                            ; ===========================================================================
0009ABC8                            ; loc_72D30:
0009ABC8                            cfModulation:
0009ABC8 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
0009ABCC 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
0009ABD0 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
0009ABD4 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
0009ABD8 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
0009ABDC 101C                       		move.b	(a4)+,d0			; Modulation steps...
0009ABDE E208                       		lsr.b	#1,d0				; ... divided by 2...
0009ABE0 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
0009ABE4 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
0009ABE8 4E75                       		rts	
0009ABEA                            ; ===========================================================================
0009ABEA                            ; loc_72D52:
0009ABEA                            cfEnableModulation:
0009ABEA 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
0009ABEE 4E75                       		rts	
0009ABF0                            ; ===========================================================================
0009ABF0                            ; loc_72D58:
0009ABF0                            cfStopTrack:
0009ABF0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0009ABF4 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
0009ABF8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009ABFC 6B00                       		bmi.s	@stoppsg		; Branch if yes
0009ABFE 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
0009AC02 6B00 0000                  		bmi.w	@locexit		; Exit if yes
0009AC06 4EBA F980                  		jsr	FMNoteOff(pc)
0009AC0A 6000                       		bra.s	@stoppedchannel
0009AC0C                            ; ===========================================================================
0009AC0C                            ; loc_72D74:
0009AC0C                            @stoppsg:
0009AC0C 4EBA FC1C                  		jsr	PSGNoteOff(pc)
0009AC10                            ; loc_72D78:
0009AC10                            @stoppedchannel:
0009AC10 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
0009AC14 6A00 0000                  		bpl.w	@locexit		; Exit if not
0009AC18 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0009AC1A 7000                       		moveq	#0,d0
0009AC1C 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
0009AC20 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
0009AC22 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
0009AC26 264D                       		movea.l	a5,a3
0009AC28 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
0009AC2C 6600                       		bne.s	@getpointer		; Branch if not
0009AC2E 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0009AC32 6A00                       		bpl.s	@getpointer		; Branch if not
0009AC34 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0009AC38 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
0009AC3C 6000                       		bra.s	@gotpointer
0009AC3E                            ; ===========================================================================
0009AC3E                            ; loc_72DA8:
0009AC3E                            @getpointer:
0009AC3E 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
0009AC40 E508                       		lsl.b	#2,d0
0009AC42 2A70 0000                  		movea.l	(a0,d0.w),a5
0009AC46 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009AC48 6A00                       		bpl.s	@novoiceupd		; Branch if not
0009AC4A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
0009AC4E                            ; loc_72DB8:
0009AC4E                            @gotpointer:
0009AC4E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
0009AC52 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009AC56 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009AC5A 4EBA FE8A                  		jsr	SetVoice(pc)
0009AC5E                            ; loc_72DC8:
0009AC5E                            @novoiceupd:
0009AC5E 2A4B                       		movea.l	a3,a5
0009AC60 6000                       		bra.s	@locexit
0009AC62                            ; ===========================================================================
0009AC62                            ; loc_72DCC:
0009AC62                            @getpsgptr:
0009AC62 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
0009AC66 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
0009AC68 6A00                       		bpl.s	@getchannelptr	; Branch if not
0009AC6A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
0009AC6E 6700                       		beq.s	@gotchannelptr	; Branch if yes
0009AC70 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
0009AC74 6700                       		beq.s	@gotchannelptr	; Branch if yes
0009AC76                            ; loc_72DE0:
0009AC76                            @getchannelptr:
0009AC76 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
0009AC7A E608                       		lsr.b	#3,d0
0009AC7C 2070 0000                  		movea.l	(a0,d0.w),a0
0009AC80                            ; loc_72DEA:
0009AC80                            @gotchannelptr:
0009AC80 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
0009AC84 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
0009AC88 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
0009AC8E 6600                       		bne.s	@locexit			; Branch if not
0009AC90 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
0009AC98                            ; loc_72E02:
0009AC98                            @locexit:
0009AC98 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
0009AC9A 4E75                       		rts	
0009AC9C                            ; ===========================================================================
0009AC9C                            ; loc_72E06:
0009AC9C                            cfSetPSGNoise:
0009AC9C 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
0009ACA2 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
0009ACA6 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
0009ACAA 6600                       		bne.s	@locret				; Return if yes
0009ACAC 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
0009ACB4                            ; locret_72E1E:
0009ACB4                            @locret:
0009ACB4 4E75                       		rts	
0009ACB6                            ; ===========================================================================
0009ACB6                            ; loc_72E20:
0009ACB6                            cfDisableModulation:
0009ACB6 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
0009ACBA 4E75                       		rts	
0009ACBC                            ; ===========================================================================
0009ACBC                            ; loc_72E26:
0009ACBC                            cfSetPSGTone:
0009ACBC 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
0009ACC0 4E75                       		rts	
0009ACC2                            ; ===========================================================================
0009ACC2                            ; loc_72E2C:
0009ACC2                            cfJumpTo:
0009ACC2 101C                       		move.b	(a4)+,d0	; High byte of offset
0009ACC4 E148                       		lsl.w	#8,d0		; Shift it into place
0009ACC6 101C                       		move.b	(a4)+,d0	; Low byte of offset
0009ACC8 D8C0                       		adda.w	d0,a4		; Add to current position
0009ACCA 534C                       		subq.w	#1,a4		; Put back one byte
0009ACCC 4E75                       		rts	
0009ACCE                            ; ===========================================================================
0009ACCE                            ; loc_72E38:
0009ACCE                            cfRepeatAtPos:
0009ACCE 7000                       		moveq	#0,d0
0009ACD0 101C                       		move.b	(a4)+,d0			; Loop index
0009ACD2 121C                       		move.b	(a4)+,d1			; Repeat count
0009ACD4 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
0009ACD8 6600                       		bne.s	@loopexists			; Branch if yes
0009ACDA 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
0009ACDE                            ; loc_72E48:
0009ACDE                            @loopexists:
0009ACDE 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
0009ACE2 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
0009ACE4 544C                       		addq.w	#2,a4				; Skip target address
0009ACE6 4E75                       		rts	
0009ACE8                            ; ===========================================================================
0009ACE8                            ; loc_72E52:
0009ACE8                            cfJumpToGosub:
0009ACE8 7000                       		moveq	#0,d0
0009ACEA 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
0009ACEE 5900                       		subq.b	#4,d0				; Add space for another target
0009ACF0 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
0009ACF4 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
0009ACF8 60C8                       		bra.s	cfJumpTo
0009ACFA                            ; ===========================================================================
0009ACFA                            ; loc_72E64:
0009ACFA                            cfOpF9:
0009ACFA 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
0009ACFE 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0009AD02 4EBA F8B4                  		jsr	WriteFMI(pc)
0009AD06 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
0009AD0A 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0009AD0E 6000 F8A8                  		bra.w	WriteFMI
0009AD12                            ; ===========================================================================
0009AD12                            
0009AD12                            Kos_Z80:
0009AD12                            		incbin	"sound\z80.bin", 0, $15
0009AD27 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
0009AD28                            		incbin	"sound\z80.bin", $16, 6
0009AD2E 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
0009AD2F                            		incbin	"sound\z80.bin", $1D, $93
0009ADC2 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
0009ADC4                            		incbin	"sound\z80.bin", $B2, 1
0009ADC5 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
0009ADC7                            		incbin	"sound\z80.bin", $B5, $16AB
0009C468                            		even
0009C468                            
0009C468                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009D78C 00                         		even
0009D78C                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009F014                            		even
0009F014                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A6994 00                         		even
000A6994                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A81A8 00                         		even
000A81A8                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A8F4E                            		even
000A8F4E                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000AA306                            		even
000AA306                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000AABFE 00                         		even
000AABFE                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000AABFE                            extralifejingle_Header:
000AABFE                            	smpsHeaderStartSong 1
000AAC00 0703                       	smpsHeaderChan      $07, $03
000AAC02 0100                       	smpsHeaderTempo     $01, $00
000AAC04                            
000AAC08 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000AAC0C 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000AAC10 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000AAC14 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000AAC18 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000AAC1C 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000AAC32                            
000AAC32                            ; DAC Data
000AAC32                            extralifejingle_DAC:
000AAC32 807F 55                    	dc.b	nRst, $7F, $55
000AAC35 E4                         	smpsFade
000AAC36                            ; PSG1 Data
000AAC36                            extralifejingle_PSG1:
000AAC36                            ; PSG2 Data
000AAC36                            extralifejingle_PSG2:
000AAC36                            ; PSG3 Data
000AAC36                            extralifejingle_PSG3:
000AAC36 F2                         	smpsStop
000AAC37                            
000AAC37                            ; FM1 Data
000AAC37                            extralifejingle_FM1:
000AAC37 EF00                       	smpsSetvoice        $00
000AAC39 E616                       	smpsAlterVol        $16
000AAC3B E0C0                       	smpsPan             panCenter, $00
000AAC3D A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000AAC49 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000AAC4D F2                         	smpsStop
000AAC4E                            
000AAC4E                            ; FM2 Data
000AAC4E                            extralifejingle_FM2:
000AAC4E EF01                       	smpsSetvoice        $01
000AAC50 E616                       	smpsAlterVol        $16
000AAC52 E0C0                       	smpsPan             panCenter, $00
000AAC54 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000AAC60 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000AAC64 F2                         	smpsStop
000AAC65                            
000AAC65                            ; FM3 Data
000AAC65                            extralifejingle_FM3:
000AAC65 EF01                       	smpsSetvoice        $01
000AAC67 E616                       	smpsAlterVol        $16
000AAC69 E0C0                       	smpsPan             panCenter, $00
000AAC6B AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000AAC77 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000AAC7B F2                         	smpsStop
000AAC7C                            
000AAC7C                            ; FM4 Data
000AAC7C                            extralifejingle_FM4:
000AAC7C EF02                       	smpsSetvoice        $02
000AAC7E E0C0                       	smpsPan             panCenter, $00
000AAC80 8001                       	dc.b	nRst, $01
000AAC82 E616                       	smpsAlterVol        $16
000AAC84 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000AAC90 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000AAC94 F2                         	smpsStop
000AAC95                            
000AAC95                            ; FM5 Data
000AAC95                            extralifejingle_FM5:
000AAC95 EF03                       	smpsSetvoice        $03
000AAC97 E602                       	smpsAlterVol        $02
000AAC99 E0C0                       	smpsPan             panCenter, $00
000AAC9B 8001                       	dc.b	nRst, $01
000AAC9D EF05                       	smpsSetvoice        $05
000AAC9F E60A                       	smpsAlterVol        $0A
000AACA1 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000AACAD B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000AACB9 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000AACC5 C1C4 80                    	dc.b	nE5, nG5, nRst
000AACC8 F2                         	smpsStop
000AACC9                            
000AACC9                            ; FM6 Data
000AACC9                            extralifejingle_FM6:
000AACC9 EF04                       	smpsSetvoice        $04
000AACCB E607                       	smpsAlterVol        $07
000AACCD E0C0                       	smpsPan             panCenter, $00
000AACCF 8001                       	dc.b	nRst, $01
000AACD1 EF06                       	smpsSetvoice        $06
000AACD3 E6F9                       	smpsAlterVol        $F9
000AACD5 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000AACDC F2                         	smpsStop
000AACDD                            
000AACDD                            extralifejingle_Voices:
000AACDD                            ;	Voice $00
000AACDD                            ;	$3A
000AACDD                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000AACDD                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000AACDD                            	smpsVcAlgorithm     $02
000AACDD                            	smpsVcFeedback      $07
000AACDD                            	smpsVcUnusedBits    $00
000AACDD                            	smpsVcDetune        $03, $07, $07, $03
000AACDD                            	smpsVcCoarseFreq    $01, $04, $03, $04
000AACDD                            	smpsVcRateScale     $00, $00, $00, $00
000AACDD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AACDD                            	smpsVcAmpMod        $00, $00, $00, $00
000AACDD                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000AACDD                            	smpsVcDecayRate2    $00, $00, $00, $00
000AACDD                            	smpsVcDecayLevel    $00, $00, $00, $00
000AACDD                            	smpsVcReleaseRate   $05, $03, $03, $03
000AACF6                            
000AACF6                            ;	Voice $01
000AACF6                            ;	$3A
000AACF6                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000AACF6                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000AACF6                            	smpsVcAlgorithm     $02
000AACF6                            	smpsVcFeedback      $07
000AACF6                            	smpsVcUnusedBits    $00
000AACF6                            	smpsVcDetune        $03, $07, $07, $03
000AACF6                            	smpsVcCoarseFreq    $01, $04, $03, $04
000AACF6                            	smpsVcRateScale     $00, $00, $00, $00
000AACF6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AACF6                            	smpsVcAmpMod        $00, $00, $00, $00
000AACF6                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000AACF6                            	smpsVcDecayRate2    $00, $00, $00, $00
000AACF6                            	smpsVcDecayLevel    $00, $00, $00, $00
000AACF6                            	smpsVcReleaseRate   $05, $03, $03, $03
000AAD0F                            
000AAD0F                            ;	Voice $02
000AAD0F                            ;	$3A
000AAD0F                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000AAD0F                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000AAD0F                            	smpsVcAlgorithm     $02
000AAD0F                            	smpsVcFeedback      $07
000AAD0F                            	smpsVcUnusedBits    $00
000AAD0F                            	smpsVcDetune        $03, $07, $07, $03
000AAD0F                            	smpsVcCoarseFreq    $01, $04, $03, $04
000AAD0F                            	smpsVcRateScale     $00, $00, $00, $00
000AAD0F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AAD0F                            	smpsVcAmpMod        $00, $00, $00, $00
000AAD0F                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000AAD0F                            	smpsVcDecayRate2    $00, $00, $00, $00
000AAD0F                            	smpsVcDecayLevel    $00, $00, $00, $00
000AAD0F                            	smpsVcReleaseRate   $05, $03, $03, $03
000AAD28                            
000AAD28                            ;	Voice $03
000AAD28                            ;	$00
000AAD28                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000AAD28                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000AAD28                            	smpsVcAlgorithm     $00
000AAD28                            	smpsVcFeedback      $00
000AAD28                            	smpsVcUnusedBits    $00
000AAD28                            	smpsVcDetune        $00, $00, $00, $00
000AAD28                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000AAD28                            	smpsVcRateScale     $00, $00, $00, $00
000AAD28                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000AAD28                            	smpsVcAmpMod        $00, $00, $00, $00
000AAD28                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000AAD28                            	smpsVcDecayRate2    $00, $00, $00, $00
000AAD28                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AAD28                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000AAD41                            
000AAD41                            ;	Voice $04
000AAD41                            ;	$03
000AAD41                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000AAD41                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000AAD41                            	smpsVcAlgorithm     $03
000AAD41                            	smpsVcFeedback      $00
000AAD41                            	smpsVcUnusedBits    $00
000AAD41                            	smpsVcDetune        $03, $04, $04, $06
000AAD41                            	smpsVcCoarseFreq    $01, $00, $00, $06
000AAD41                            	smpsVcRateScale     $00, $00, $00, $00
000AAD41                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000AAD41                            	smpsVcAmpMod        $00, $00, $00, $00
000AAD41                            	smpsVcDecayRate1    $01, $02, $05, $0E
000AAD41                            	smpsVcDecayRate2    $06, $04, $00, $01
000AAD41                            	smpsVcDecayLevel    $01, $01, $06, $0A
000AAD41                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000AAD5A                            
000AAD5A                            ;	Voice $05
000AAD5A                            ;	$34
000AAD5A                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000AAD5A                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000AAD5A                            	smpsVcAlgorithm     $04
000AAD5A                            	smpsVcFeedback      $06
000AAD5A                            	smpsVcUnusedBits    $00
000AAD5A                            	smpsVcDetune        $07, $00, $07, $03
000AAD5A                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000AAD5A                            	smpsVcRateScale     $00, $01, $00, $02
000AAD5A                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000AAD5A                            	smpsVcAmpMod        $00, $00, $00, $00
000AAD5A                            	smpsVcDecayRate1    $08, $07, $07, $14
000AAD5A                            	smpsVcDecayRate2    $00, $00, $00, $00
000AAD5A                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000AAD5A                            	smpsVcReleaseRate   $07, $07, $04, $06
000AAD73                            
000AAD73                            ;	Voice $06
000AAD73                            ;	$30
000AAD73                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000AAD73                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000AAD73                            	smpsVcAlgorithm     $00
000AAD73                            	smpsVcFeedback      $06
000AAD73                            	smpsVcUnusedBits    $00
000AAD73                            	smpsVcDetune        $00, $00, $00, $00
000AAD73                            	smpsVcCoarseFreq    $01, $00, $00, $01
000AAD73                            	smpsVcRateScale     $01, $00, $00, $02
000AAD73                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000AAD73                            	smpsVcAmpMod        $00, $00, $00, $00
000AAD73                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000AAD73                            	smpsVcDecayRate2    $08, $05, $18, $08
000AAD73                            	smpsVcDecayLevel    $01, $00, $00, $06
000AAD73                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000AAD8C                            
000AAD8C                            
000AAD8C                            		even
000AAD8C                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000AB5E4 00                         		even
000AB5E4                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000ABB04                            		even
000ABB04                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000ABDC6 00                         		even
000ABDC6                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000ACC1E                            		even
000ACC1E                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000ACE6A 00                         		even
000ACE6A                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000AD1A0 00                         		even
000AD1A0                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000AD34C 00                         		even
000AD34C                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000AD55A 00                         		even
000AD55A                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AD83E 00                         		even
000AD83E                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000ADF6E 00                         		even
000ADF6E                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000AE03C                            		even
000AE03C                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000AE4AA 00                         		even
000AE4AA                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000AEFA0                            		even
000AEFA0                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AFAF6                            		even
000AFAF6                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000B0DFC 00                         		even
000B0DFC                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000B0DFC                            PasswordEntry_Header:
000B0DFC                            	smpsHeaderStartSong 3
000B0DFE 0603                       	smpsHeaderChan      $06, $03
000B0E00 0105                       	smpsHeaderTempo     $01, $05
000B0E02                            
000B0E06 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000B0E0A 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000B0E0E 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000B0E12 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000B0E16 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000B0E2C                            
000B0E2C                            ; FM1 Data
000B0E2C                            PasswordEntry_FM1:
000B0E2C EF00                       	smpsSetvoice        $00
000B0E33                            
000B0E33                            PasswordEntry_Jump00:
000B0E33 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000B0E3F C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000B0E4B C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000B0E57 C918 CB                    	dc.b	nC6, $18, nD6
000B0E5A F6FF D7                    	smpsJump            PasswordEntry_Jump00
000B0E5D                            
000B0E5D                            ; FM2 Data
000B0E5D                            PasswordEntry_FM2:
000B0E5D EF01                       	smpsSetvoice        $01
000B0E5F                            
000B0E5F                            PasswordEntry_Jump03:
000B0E5F B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000B0E6B AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000B0E77 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000B0E83 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000B0E8D F6FF D0                    	smpsJump            PasswordEntry_Jump03
000B0E90                            
000B0E90                            ; FM3 Data
000B0E90                            PasswordEntry_FM3:
000B0E90 E080                       	smpsPan             panLeft, $00
000B0E92 EF02                       	smpsSetvoice        $02
000B0E94                            
000B0E94                            PasswordEntry_Jump02:
000B0E94 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000B0EA0 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000B0EAC C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000B0EB8 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000B0EC4 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000B0ED0 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000B0EDC BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000B0EE8 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000B0EF4 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000B0F00 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000B0F0C BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000B0F14 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000B0F17                            
000B0F17                            ; FM4 Data
000B0F17                            PasswordEntry_FM4:
000B0F17 E040                       	smpsPan             panRight, $00
000B0F19 EF02                       	smpsSetvoice        $02
000B0F1B                            
000B0F1B                            PasswordEntry_Jump01:
000B0F1B C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000B0F27 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000B0F33 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000B0F3F C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000B0F4B BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000B0F57 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000B0F63 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000B0F6F BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000B0F7B BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000B0F87 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000B0F93 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000B0F9B F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000B0F9E                            
000B0F9E                            ; FM5 Data
000B0F9E                            PasswordEntry_FM5:
000B0F9E EF00                       	smpsSetvoice        $00
000B0FA0 E1FB                       	smpsAlterNote       $FB
000B0FA2 800C                       	dc.b	nRst, $0C
000B0FA4 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000B0FA7                            
000B0FA7                            ; PSG1 Data
000B0FA7                            PasswordEntry_PSG1:
000B0FA7 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000B0FB3 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000B0FBF C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000B0FCB CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000B0FD7 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000B0FE3 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000B0FEF C810 C408                  	dc.b	nB5, $10, nG5, $08
000B0FF3 F6FF B2                    	smpsJump            PasswordEntry_PSG1
000B0FF6                            
000B0FF6                            ; PSG2 Data
000B0FF6                            PasswordEntry_PSG2:
000B0FF6 E1FF                       	smpsAlterNote       $FF
000B0FF8 800C                       	dc.b	nRst, $0C
000B0FFA F6FF AB                    	smpsJump            PasswordEntry_PSG1
000B0FFD                            
000B0FFD                            ; PSG3 Data
000B0FFD                            PasswordEntry_PSG3:
000B0FFD F502                       	smpsPSGvoice        fTone_02
000B0FFF F3E7                       	smpsPSGform         $E7
000B1001 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000B100D C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000B1019 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000B1020 F503                       	smpsPSGvoice        fTone_03
000B1022 C5                         	dc.b	nAb5
000B1023 F6FF D8                    	smpsJump            PasswordEntry_PSG3
000B1026                            
000B1026                            ; DAC Data
000B1026                            PasswordEntry_DAC:
000B1026 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000B1032 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000B103A F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000B103F 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000B104B 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000B1053                            
000B1053                            PasswordEntry_Loop00:
000B1053 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000B105F 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000B1067 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000B106C 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000B1078 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000B1082 F6FF A2                    	smpsJump            PasswordEntry_DAC
000B1085                            
000B1085                            PasswordEntry_Voices:
000B1085                            ;	Voice $00
000B1085                            ;	$04
000B1085                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000B1085                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000B1085                            	smpsVcAlgorithm     $04
000B1085                            	smpsVcFeedback      $00
000B1085                            	smpsVcUnusedBits    $00
000B1085                            	smpsVcDetune        $00, $00, $00, $00
000B1085                            	smpsVcCoarseFreq    $00, $01, $01, $02
000B1085                            	smpsVcRateScale     $00, $00, $00, $00
000B1085                            	smpsVcAttackRate    $12, $1F, $10, $1F
000B1085                            	smpsVcAmpMod        $00, $00, $00, $00
000B1085                            	smpsVcDecayRate1    $04, $0B, $03, $09
000B1085                            	smpsVcDecayRate2    $05, $00, $00, $03
000B1085                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000B1085                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B109E                            
000B109E                            ;	Voice $01
000B109E                            ;	$39
000B109E                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000B109E                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000B109E                            	smpsVcAlgorithm     $01
000B109E                            	smpsVcFeedback      $07
000B109E                            	smpsVcUnusedBits    $00
000B109E                            	smpsVcDetune        $00, $04, $06, $00
000B109E                            	smpsVcCoarseFreq    $00, $00, $01, $03
000B109E                            	smpsVcRateScale     $01, $01, $01, $00
000B109E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B109E                            	smpsVcAmpMod        $00, $00, $00, $00
000B109E                            	smpsVcDecayRate1    $09, $09, $11, $10
000B109E                            	smpsVcDecayRate2    $00, $00, $00, $06
000B109E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000B109E                            	smpsVcReleaseRate   $08, $08, $08, $08
000B10B7                            
000B10B7                            ;	Voice $02
000B10B7                            ;	$2C
000B10B7                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000B10B7                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000B10B7                            	smpsVcAlgorithm     $04
000B10B7                            	smpsVcFeedback      $05
000B10B7                            	smpsVcUnusedBits    $00
000B10B7                            	smpsVcDetune        $00, $02, $00, $04
000B10B7                            	smpsVcCoarseFreq    $00, $03, $00, $01
000B10B7                            	smpsVcRateScale     $00, $00, $00, $00
000B10B7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B10B7                            	smpsVcAmpMod        $00, $00, $00, $00
000B10B7                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000B10B7                            	smpsVcDecayRate2    $05, $00, $05, $04
000B10B7                            	smpsVcDecayLevel    $08, $08, $05, $04
000B10B7                            	smpsVcReleaseRate   $06, $05, $06, $05
000B10D0                            
000B10D0                            
000B10D0                            		even	
000B10D0                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000B10D0                            ToxicLandfill_Header:
000B10D0                            	smpsHeaderStartSong 1
000B10D2 0603                       	smpsHeaderChan      $06, $03
000B10D4 0208                       	smpsHeaderTempo     $02, $08
000B10D6                            
000B10DA 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000B10DE 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000B10E2 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000B10E6 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000B10EA 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000B1100                            
000B1100                            ; DAC Data
000B1100                            ToxicLandfill_DAC:
000B1100 E0C0                       	smpsPan             panCenter, $00
000B1102 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000B110E 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000B1119                            
000B1119                            ToxicLandfill_Loop00:
000B1119 82                         	dc.b	dSnare
000B111A                            
000B111A                            ToxicLandfill_Loop01:
000B111A 82                         	dc.b	dSnare
000B111B                            
000B111B                            ToxicLandfill_Jump00:
000B111B 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000B1127 0381 0603                  	dc.b	$03, dKick, $06, $03
000B112B F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000B1130 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000B113C 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000B1144 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000B1149                            
000B1149                            ToxicLandfill_Loop06:
000B1149 82                         	dc.b	dSnare
000B114A                            
000B114A                            ToxicLandfill_Loop02:
000B114A 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000B114E F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000B1153                            
000B1153                            ToxicLandfill_Loop03:
000B1153 8281 81                    	dc.b	dSnare, dKick, dKick
000B1156 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000B115B                            
000B115B                            ToxicLandfill_Loop04:
000B115B 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000B115F F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000B1164 8182 81                    	dc.b	dKick, dSnare, dKick
000B1167                            
000B1167                            ToxicLandfill_Loop05:
000B1167 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000B116C F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000B1171 0303 03                    	dc.b	$03, $03, $03
000B1174 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000B1179                            
000B1179                            ToxicLandfill_Loop08:
000B1179 03                         	dc.b	$03
000B117A                            
000B117A                            ToxicLandfill_Loop07:
000B117A 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000B1183 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000B1188 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000B118F F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000B1194                            
000B1194                            ToxicLandfill_Loop0D:
000B1194 82                         	dc.b	dSnare
000B1195                            
000B1195                            ToxicLandfill_Loop09:
000B1195 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000B1199 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000B119E                            
000B119E                            ToxicLandfill_Loop0A:
000B119E 8281 81                    	dc.b	dSnare, dKick, dKick
000B11A1 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000B11A6                            
000B11A6                            ToxicLandfill_Loop0B:
000B11A6 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000B11AA F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000B11AF 8182 81                    	dc.b	dKick, dSnare, dKick
000B11B2                            
000B11B2                            ToxicLandfill_Loop0C:
000B11B2 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000B11B7 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000B11BC 0303 03                    	dc.b	$03, $03, $03
000B11BF F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000B11C4                            
000B11C4                            ToxicLandfill_Loop0E:
000B11C4 03                         	dc.b	$03
000B11C5                            
000B11C5                            ToxicLandfill_Loop0F:
000B11C5 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000B11D1 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000B11D6 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000B11DB 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000B11E7 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000B11EF F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000B11F4                            
000B11F4                            ToxicLandfill_Loop10:
000B11F4 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000B11FD F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000B1202 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000B120A F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000B120F F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000B1212                            
000B1212                            ; FM1 Data
000B1212                            ToxicLandfill_FM1:
000B1212 E0C0                       	smpsPan             panCenter, $00
000B1214 EF00                       	smpsSetvoice        $00
000B1216 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B1222 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000B122A                            
000B122A                            ToxicLandfill_Loop44:
000B122A AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000B1236 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000B1242 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000B124E A706 06AA                  	dc.b	nD3, $06, $06, nF3
000B1252 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000B1257                            
000B1257                            ToxicLandfill_Loop46:
000B1257 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B1263 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000B126F 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000B127B AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000B1283                            
000B1283                            ToxicLandfill_Loop45:
000B1283 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000B1287 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000B128C AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000B1293 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000B1298                            
000B1298                            ToxicLandfill_Loop47:
000B1298 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000B12A4 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000B12A9                            
000B12A9                            ToxicLandfill_Loop48:
000B12A9 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B12B4 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000B12B9 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000B12BE                            
000B12BE                            ToxicLandfill_Loop4A:
000B12BE B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000B12CA B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000B12D6 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B12E2 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000B12EA                            
000B12EA                            ToxicLandfill_Loop49:
000B12EA B602 B501                  	dc.b	nF4, $02, nE4, $01
000B12EE F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000B12F3 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000B12FA F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000B12FF                            
000B12FF                            ToxicLandfill_Loop4B:
000B12FF B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000B130B 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000B1317 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000B1323 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000B1327 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000B132C                            
000B132C                            ToxicLandfill_Loop4C:
000B132C BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B1337 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000B133C                            
000B133C                            ToxicLandfill_Loop4D:
000B133C BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B1347 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000B134C F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000B1351 F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000B1354                            
000B1354                            ; FM2 Data
000B1354                            ToxicLandfill_FM2:
000B1354 E0C0                       	smpsPan             panCenter, $00
000B1356 EF00                       	smpsSetvoice        $00
000B1358 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B1364 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000B136C                            
000B136C                            ToxicLandfill_Loop3A:
000B136C B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000B1378 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000B1384 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000B1390 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000B1394 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000B1399                            
000B1399                            ToxicLandfill_Loop3C:
000B1399 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000B13A5 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000B13B1 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000B13BD B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000B13C5                            
000B13C5                            ToxicLandfill_Loop3B:
000B13C5 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000B13C9 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000B13CE AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000B13D5 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000B13DA                            
000B13DA                            ToxicLandfill_Loop3D:
000B13DA AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000B13E6 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000B13EB                            
000B13EB                            ToxicLandfill_Loop3E:
000B13EB ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000B13F6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000B13FB F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000B1400                            
000B1400                            ToxicLandfill_Loop40:
000B1400 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000B140C B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000B1418 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000B1424 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000B142C                            
000B142C                            ToxicLandfill_Loop3F:
000B142C BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000B1430 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000B1435 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000B143C F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000B1441                            
000B1441                            ToxicLandfill_Loop41:
000B1441 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000B144D 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000B1459 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000B1465 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000B1469 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000B146E B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000B147A B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000B1486 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000B1492 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000B149E 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000B14AA 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000B14B0                            
000B14B0                            ToxicLandfill_Loop42:
000B14B0 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000B14BB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000B14C0                            
000B14C0                            ToxicLandfill_Loop43:
000B14C0 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000B14CB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000B14D0 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000B14D5 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000B14E1 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000B14EB F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000B14EE                            
000B14EE                            ; FM3 Data
000B14EE                            ToxicLandfill_FM3:
000B14EE E0C0                       	smpsPan             panCenter, $00
000B14F0 EF01                       	smpsSetvoice        $01
000B14F2                            
000B14F2                            ToxicLandfill_Loop2D:
000B14F2 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000B14FE 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000B150A 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000B1513 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000B1518 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000B1524 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000B1530 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000B153C A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000B1544                            
000B1544                            ToxicLandfill_Loop2E:
000B1544 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B1550 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000B1555 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B1561 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B1567 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000B156C                            
000B156C                            ToxicLandfill_Loop31:
000B156C A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B1571                            
000B1571                            ToxicLandfill_Loop2F:
000B1571 9999 A3                    	dc.b	nC2, nC2, nBb2
000B1574 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000B1579 99A3                       	dc.b	nC2, nBb2
000B157B                            
000B157B                            ToxicLandfill_Loop30:
000B157B 99A3 99                    	dc.b	nC2, nBb2, nC2
000B157E F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000B1583 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B1588 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000B158D                            
000B158D                            ToxicLandfill_Loop32:
000B158D A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B1599 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000B159E                            
000B159E                            ToxicLandfill_Loop33:
000B159E A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B15A8 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000B15AD F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000B15B2                            
000B15B2                            ToxicLandfill_Loop36:
000B15B2 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B15B7                            
000B15B7                            ToxicLandfill_Loop34:
000B15B7 9999 A3                    	dc.b	nC2, nC2, nBb2
000B15BA F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000B15BF 99A3                       	dc.b	nC2, nBb2
000B15C1                            
000B15C1                            ToxicLandfill_Loop35:
000B15C1 99A3 99                    	dc.b	nC2, nBb2, nC2
000B15C4 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000B15C9 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B15CE F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000B15D3                            
000B15D3                            ToxicLandfill_Loop37:
000B15D3 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B15DF F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000B15E4 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B15F0 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B15F6 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000B15FB                            
000B15FB                            ToxicLandfill_Loop38:
000B15FB A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B1606 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000B160B                            
000B160B                            ToxicLandfill_Loop39:
000B160B A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B1615 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000B161A F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000B161F F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000B1622                            
000B1622                            ; FM4 Data
000B1622                            ToxicLandfill_FM4:
000B1622 E0C0                       	smpsPan             panCenter, $00
000B1624 EF01                       	smpsSetvoice        $01
000B1626                            
000B1626                            ToxicLandfill_Loop20:
000B1626 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000B1632 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000B163E 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000B1647 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000B164C 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000B1658 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000B1664 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000B1670 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000B1675                            
000B1675                            ToxicLandfill_Loop21:
000B1675 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B1681 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000B1686 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B1692 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B1698 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000B169D                            
000B169D                            ToxicLandfill_Loop24:
000B169D 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B16A2                            
000B16A2                            ToxicLandfill_Loop22:
000B16A2 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B16A5 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000B16AA 8D97                       	dc.b	nC1, nBb1
000B16AC                            
000B16AC                            ToxicLandfill_Loop23:
000B16AC 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B16AF F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000B16B4 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B16B9 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000B16BE                            
000B16BE                            ToxicLandfill_Loop25:
000B16BE 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B16CA F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000B16CF                            
000B16CF                            ToxicLandfill_Loop26:
000B16CF 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B16D9 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000B16DE F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000B16E3                            
000B16E3                            ToxicLandfill_Loop29:
000B16E3 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B16E8                            
000B16E8                            ToxicLandfill_Loop27:
000B16E8 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B16EB F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000B16F0 8D97                       	dc.b	nC1, nBb1
000B16F2                            
000B16F2                            ToxicLandfill_Loop28:
000B16F2 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B16F5 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000B16FA 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B16FF F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000B1704                            
000B1704                            ToxicLandfill_Loop2A:
000B1704 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B1710 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000B1715 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B1721 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B1727 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000B172C                            
000B172C                            ToxicLandfill_Loop2B:
000B172C 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B1737 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000B173C                            
000B173C                            ToxicLandfill_Loop2C:
000B173C 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B1746 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000B174B F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000B1750 F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000B1753                            
000B1753                            ; FM5 Data
000B1753                            ToxicLandfill_FM5:
000B1753 E0C0                       	smpsPan             panCenter, $00
000B1755 E6FA                       	smpsAlterVol			-$06		
000B1757 E102                       	smpsDetune			$02	
000B1759 EF00                       	smpsSetvoice        $00
000B175B 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B1767 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000B176C                            
000B176C                            ToxicLandfill_Jump01:
000B176C E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000B176F                            
000B176F                            ToxicLandfill_Loop11:
000B176F AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000B177B 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000B1787 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000B1793 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000B1797 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000B179C                            
000B179C                            ToxicLandfill_Loop13:
000B179C AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B17A8 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000B17B4 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000B17C0 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000B17C8                            
000B17C8                            ToxicLandfill_Loop12:
000B17C8 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000B17CC F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000B17D1 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000B17D8 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000B17DD                            
000B17DD                            ToxicLandfill_Loop14:
000B17DD B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000B17E9 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000B17EE                            
000B17EE                            ToxicLandfill_Loop15:
000B17EE B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B17F9 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000B17FE F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000B1803                            
000B1803                            ToxicLandfill_Loop17:
000B1803 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000B180F B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000B181B AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B1827 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000B182F                            
000B182F                            ToxicLandfill_Loop16:
000B182F B602 B501                  	dc.b	nF4, $02, nE4, $01
000B1833 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000B1838 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000B183F F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000B1844                            
000B1844                            ToxicLandfill_Loop18:
000B1844 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000B1850 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000B185C B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000B1868 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000B186C F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000B1871                            
000B1871                            ToxicLandfill_Loop19:
000B1871 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B187C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000B1881                            
000B1881                            ToxicLandfill_Loop1A:
000B1881 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B188C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000B1891                            
000B1891                            ToxicLandfill_Loop1B:
000B1891 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B189C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000B18A1 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000B18AD B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000B18B9 EF02                       	smpsSetvoice        $02
000B18BB E1FE                       	smpsDetune			-$02
000B18BD E606                       	smpsAlterVol		$06
000B18BF                            	
000B18BF                            ToxicLandfill_Loop1C:
000B18BF B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000B18CB F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000B18D0                            
000B18D0                            ToxicLandfill_Loop1D:
000B18D0 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B18DB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000B18E0                            
000B18E0                            ToxicLandfill_Loop1E:
000B18E0 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B18EB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000B18F0                            
000B18F0                            ToxicLandfill_Loop1F:
000B18F0 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B18FB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000B1900 EF00                       	smpsSetvoice        $00
000B1902 E102                       	smpsDetune			$02
000B1904 E6FA                       	smpsAlterVol		-$06	
000B1906 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000B1909                            
000B1909                            ; PSG1 Data
000B1909                            ToxicLandfill_PSG1:
000B1909 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B190E                            
000B190E                            ToxicLandfill_Jump04:
000B190E 80                         	dc.b	nRst
000B190F                            
000B190F                            ToxicLandfill_Loop57:
000B190F 60                         	dc.b	$60
000B1910 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000B1915                            
000B1915                            ToxicLandfill_Loop58:
000B1915 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B1921 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000B1926                            
000B1926                            ToxicLandfill_Loop59:
000B1926 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B1931 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000B1936                            
000B1936                            ToxicLandfill_Loop5A:
000B1936 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B1941 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000B1946 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B1952 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000B195E                            
000B195E                            ToxicLandfill_Loop5B:
000B195E 6E                         	dc.b	$6E
000B195F F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000B1964                            
000B1964                            ToxicLandfill_Loop5C:
000B1964 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B1970 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000B1975                            
000B1975                            ToxicLandfill_Loop5D:
000B1975 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B1980 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000B1985 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000B198A                            
000B198A                            ToxicLandfill_Loop5E:
000B198A A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B1995 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000B199A A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B19A6 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000B19B2 01                         	dc.b	$01
000B19B3 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000B19B6                            
000B19B6                            ; PSG2 Data
000B19B6                            ToxicLandfill_PSG2:
000B19B6 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B19BB                            
000B19BB                            ToxicLandfill_Jump03:
000B19BB 80                         	dc.b	nRst
000B19BC                            
000B19BC                            ToxicLandfill_Loop50:
000B19BC 60                         	dc.b	$60
000B19BD F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000B19C2 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B19CE A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B19DA 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B19E6 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B19F2 9E                         	dc.b	nF2
000B19F3                            
000B19F3                            ToxicLandfill_Loop51:
000B19F3 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B19FE F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000B1A03 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B1A0F 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000B1A1B 0580                       	dc.b	$05, nRst
000B1A1D                            
000B1A1D                            ToxicLandfill_Loop52:
000B1A1D 60                         	dc.b	$60
000B1A1E F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000B1A23 01                         	dc.b	$01
000B1A24                            
000B1A24                            ToxicLandfill_Loop53:
000B1A24 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B1A30 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B1A3C 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B1A48 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B1A54 9E                         	dc.b	nF2
000B1A55 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000B1A5A                            
000B1A5A                            ToxicLandfill_Loop54:
000B1A5A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B1A65 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000B1A6A                            
000B1A6A                            ToxicLandfill_Loop55:
000B1A6A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B1A75 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000B1A7A                            
000B1A7A                            ToxicLandfill_Loop56:
000B1A7A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B1A85 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000B1A8A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B1A96 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000B1AA2 01                         	dc.b	$01
000B1AA3 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000B1AA6                            
000B1AA6                            ; PSG3 Data
000B1AA6                            ToxicLandfill_PSG3:
000B1AA6 F3E7                       	smpsPSGform         $E7
000B1AA8 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000B1AB0                            
000B1AB0                            ToxicLandfill_Loop4E:
000B1AB0 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000B1AB5 F501                       	smpsPSGvoice        fTone_01
000B1AB7 0C                         	dc.b	$0C
000B1AB8 F502                       	smpsPSGvoice        fTone_02
000B1ABA F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000B1ABF 0603 03                    	dc.b	$06, $03, $03
000B1AC2 F501                       	smpsPSGvoice        fTone_01
000B1AC4 06                         	dc.b	$06
000B1AC5 F502                       	smpsPSGvoice        fTone_02
000B1AC7 03                         	dc.b	$03
000B1AC8 F501                       	smpsPSGvoice        fTone_01
000B1ACA 0906 0606                  	dc.b	$09, $06, $06, $06
000B1ACE                            
000B1ACE                            ToxicLandfill_Jump02:
000B1ACE E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000B1AD6 F502                       	smpsPSGvoice        fTone_02
000B1AD8 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000B1ADC F501                       	smpsPSGvoice        fTone_01
000B1ADE 18                         	dc.b	$18
000B1ADF F502                       	smpsPSGvoice        fTone_02
000B1AE1 1806                       	dc.b	$18, $06
000B1AE3 F501                       	smpsPSGvoice        fTone_01
000B1AE5 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B1AEB F502                       	smpsPSGvoice        fTone_02
000B1AED 1818 18                    	dc.b	$18, $18, $18
000B1AF0 F501                       	smpsPSGvoice        fTone_01
000B1AF2 18                         	dc.b	$18
000B1AF3 F502                       	smpsPSGvoice        fTone_02
000B1AF5 1806                       	dc.b	$18, $06
000B1AF7 F501                       	smpsPSGvoice        fTone_01
000B1AF9 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000B1B05 F502                       	smpsPSGvoice        fTone_02
000B1B07 1818 18                    	dc.b	$18, $18, $18
000B1B0A F501                       	smpsPSGvoice        fTone_01
000B1B0C 18                         	dc.b	$18
000B1B0D F502                       	smpsPSGvoice        fTone_02
000B1B0F 1806                       	dc.b	$18, $06
000B1B11 F501                       	smpsPSGvoice        fTone_01
000B1B13 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B1B19 F502                       	smpsPSGvoice        fTone_02
000B1B1B 1818 18                    	dc.b	$18, $18, $18
000B1B1E F501                       	smpsPSGvoice        fTone_01
000B1B20 18                         	dc.b	$18
000B1B21 F502                       	smpsPSGvoice        fTone_02
000B1B23 1806                       	dc.b	$18, $06
000B1B25 F501                       	smpsPSGvoice        fTone_01
000B1B27 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000B1B2C                            
000B1B2C                            ToxicLandfill_Loop4F:
000B1B2C 59E7                       	dc.b	$59, smpsNoAttack
000B1B2E F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000B1B33 5A                         	dc.b	$5A
000B1B34 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000B1B37                            
000B1B37                            
000B1B37                            ToxicLandfill_Voices:
000B1B37                            ;	Voice $00
000B1B37                            ;	$29
000B1B37                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000B1B37                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000B1B37                            	smpsVcAlgorithm     $01
000B1B37                            	smpsVcFeedback      $05
000B1B37                            	smpsVcUnusedBits    $00
000B1B37                            	smpsVcDetune        $00, $00, $00, $03
000B1B37                            	smpsVcCoarseFreq    $01, $02, $02, $03
000B1B37                            	smpsVcRateScale     $00, $00, $00, $00
000B1B37                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000B1B37                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B37                            	smpsVcDecayRate1    $0B, $00, $02, $00
000B1B37                            	smpsVcDecayRate2    $03, $00, $02, $03
000B1B37                            	smpsVcDecayLevel    $01, $00, $01, $00
000B1B37                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000B1B50                            	
000B1B50                            ;	Voice $01
000B1B50                            ;	$18
000B1B50                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B1B50                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000B1B50                            	smpsVcAlgorithm     $00
000B1B50                            	smpsVcFeedback      $03
000B1B50                            	smpsVcUnusedBits    $00
000B1B50                            	smpsVcDetune        $03, $03, $03, $03
000B1B50                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B1B50                            	smpsVcRateScale     $02, $00, $03, $02
000B1B50                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B1B50                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B50                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B1B50                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B1B50                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B1B50                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1B69                            
000B1B69                            ;	Voice $02
000B1B69                            ;	$2C
000B1B69                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000B1B69                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000B1B69                            	smpsVcAlgorithm     $04
000B1B69                            	smpsVcFeedback      $05
000B1B69                            	smpsVcUnusedBits    $00
000B1B69                            	smpsVcDetune        $03, $03, $07, $07
000B1B69                            	smpsVcCoarseFreq    $04, $04, $08, $02
000B1B69                            	smpsVcRateScale     $00, $00, $00, $00
000B1B69                            	smpsVcAttackRate    $12, $1F, $12, $1F
000B1B69                            	smpsVcAmpMod        $00, $00, $00, $00
000B1B69                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000B1B69                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1B69                            	smpsVcDecayLevel    $01, $00, $01, $00
000B1B69                            	smpsVcReleaseRate   $06, $00, $06, $00
000B1B82                            		even			
000B1B82                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000B1B82                            RRZ2_Header:
000B1B82                            	smpsHeaderStartSong 1
000B1B84 0603                       	smpsHeaderChan      $06, $03
000B1B86 0104                       	smpsHeaderTempo     $01, $04
000B1B88                            
000B1B8C 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000B1B90 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000B1B94 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000B1B98 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000B1B9C 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000B1BB2                            
000B1BB2                            ; FM1 Data
000B1BB2                            RRZ2_FM1:
000B1BB2 E0C0                       	smpsPan             panCenter, $00
000B1BB9 EF03                       	smpsSetvoice        $03
000B1BBB B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000B1BC7 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000B1BD3 BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000B1BDF B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000B1BEB 8080                       	dc.b	nRst, nRst
000B1BED EF00                       	smpsSetvoice        $00
000B1BEF B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000B1BFB B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000B1C07 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000B1C13 B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000B1C1F 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000B1C2B B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000B1C37 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000B1C43 3280 60                    	dc.b	$32, nRst, $60
000B1C46 EF05                       	smpsSetvoice        $05
000B1C48 E9F4                       	smpsAlterPitch      $F4
000B1C4A B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000B1C56 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000B1C5E E90C                       	smpsAlterPitch      $0C
000B1C60 B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000B1C6C 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000B1C78 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000B1C7E F6FF 32                    	smpsJump            RRZ2_FM1
000B1C81                            
000B1C81                            ; FM2 Data
000B1C81                            RRZ2_FM2:
000B1C81 E0C0                       	smpsPan             panCenter, $00
000B1C88 EF01                       	smpsSetvoice        $01
000B1C8A                            
000B1C8A                            RRZ2_Jump02:
000B1C8A 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000B1C96 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000B1CA2 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000B1CAE 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000B1CBA 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000B1CC6 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000B1CD2 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000B1CDE 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000B1CE6                            
000B1CE6                            RRZ2_Loop07:
000B1CE6 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B1CF2 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B1CFE 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B1D06 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000B1D0B                            
000B1D0B                            RRZ2_Loop08:
000B1D0B 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B1D17 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B1D23 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B1D2B F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000B1D30 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000B1D3C 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000B1D48 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000B1D54 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000B1D60 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000B1D6C 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000B1D78 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000B1D84 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000B1D90 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000B1D9C A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000B1DA8 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000B1DB4 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000B1DC0 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000B1DCC 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000B1DD8 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B1DE4 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B1DF0 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B1DFC 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B1E08 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B1E14 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B1E20 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B1E2C 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B1E38 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B1E44 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B1E50 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000B1E5C 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B1E68 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B1E74 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B1E80 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B1E8C 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B1E98 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B1EA4 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B1EB0 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B1EBC 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B1EC8 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B1ED4 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000B1EDB F6FD AD                    	smpsJump            RRZ2_Jump02
000B1EDE                            
000B1EDE                            ; FM3 Data
000B1EDE                            RRZ2_FM3:
000B1EDE E080                       	smpsPan             panLeft, $00
000B1EE5                            
000B1EE5                            RRZ2_Jump01:
000B1EE5 EF02                       	smpsSetvoice        $02
000B1EE7                            
000B1EE7                            RRZ2_Loop05:
000B1EE7 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B1EF3 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B1EFF 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B1F0B 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B1F17 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B1F1D F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000B1F22 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B1F2E 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B1F3A 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B1F46 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B1F52 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B1F5A                            
000B1F5A                            RRZ2_Loop06:
000B1F5A AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B1F66 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B1F72 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B1F7E 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B1F8A 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B1F96 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B1FA2 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B1FAE B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B1FB9 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000B1FBE AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B1FCA 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B1FD6 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B1FE2 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B1FEE 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B1FFA B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B2006 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B2012 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B201D EF05                       	smpsSetvoice        $05
000B201F 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000B202B B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000B2037 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000B2043 A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000B204F B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000B205B B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000B2067 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000B206D E6FA                       	smpsAlterVol        $FA
000B206F A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000B207B 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000B2087 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B2093 AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000B209F 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000B20AB 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000B20B7 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000B20C3 BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000B20CD E606                       	smpsAlterVol        $06
000B20CF F6FE 14                    	smpsJump            RRZ2_Jump01
000B20D2                            
000B20D2                            ; FM4 Data
000B20D2                            RRZ2_FM4:
000B20D2 E040                       	smpsPan             panRight, $00
000B20D9                            
000B20D9                            RRZ2_Jump00:
000B20D9 EF02                       	smpsSetvoice        $02
000B20DB                            
000B20DB                            RRZ2_Loop03:
000B20DB AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B20E7 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B20F3 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B20FF AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B210B ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B2110 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000B2115 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B2121 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B212D 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B2139 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B2145 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B214B                            
000B214B                            RRZ2_Loop04:
000B214B A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B2157 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B2163 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B216F 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B217B 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B2187 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B2193 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B219F A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000B21AA F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000B21AF A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B21BB 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B21C7 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B21D3 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B21DF 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B21EB A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B21F7 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B2203 A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000B220F EF05                       	smpsSetvoice        $05
000B2211 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000B221D B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000B2229 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000B2235 ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000B2241 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000B224D ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000B2259 B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000B2265 A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000B2269 E6FA                       	smpsAlterVol        $FA
000B226B A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000B2277 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000B2283 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B228F A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000B229B 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000B22A7 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000B22B3 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000B22BF B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000B22C7 E606                       	smpsAlterVol        $06
000B22C9 F6FE 0E                    	smpsJump            RRZ2_Jump00
000B22CC                            
000B22CC                            ; FM5 Data
000B22CC                            RRZ2_FM5:
000B22D1 8010                       	dc.b	nRst, $10
000B22D3 E101                       	smpsAlterNote       $01
000B22D5 F6F8 DB                    	smpsJump            RRZ2_FM1
000B22D8                            
000B22D8                            ; PSG1 Data
000B22D8                            RRZ2_PSG1:
000B22DD F507                       	smpsPSGvoice        stone_1D
000B22DF B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B22EB 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B22F7 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B2303 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B230F ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B2315 F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000B231A B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B2326 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B2332 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B233E 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B234A B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B2352 F507                       	smpsPSGvoice        stone_26
000B2354 B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B2360 804A                       	dc.b	nRst, $4A
000B2362                            
000B2362                            RRZ2_Loop0D:
000B2362 B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000B236E 804A                       	dc.b	nRst, $4A
000B2370 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000B2375 BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B2381 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000B238D BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000B2391                            
000B2391                            RRZ2_Loop0E:
000B2391 F507                       	smpsPSGvoice        stone_23
000B2393 B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000B239F 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000B23AB 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000B23B7 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000B23BE F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000B23C3                            
000B23C3                            RRZ2_Loop0F:
000B23C3 F507                       	smpsPSGvoice        stone_1D
000B23C5 B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000B23D1 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000B23DD 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000B23E9 F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000B23EE 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B23FA B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B2406 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B2412 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B241E B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B242A B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B2436 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000B243D F6FE 99                    	smpsJump            RRZ2_PSG1
000B2440                            
000B2440                            ; PSG2 Data
000B2440                            RRZ2_PSG2:
000B2445 F507                       	smpsPSGvoice        stone_1D
000B2447                            
000B2447                            RRZ2_Loop09:
000B2447 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B2453 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B245F 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B246B AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B2477 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B247C F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000B2481 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B248D 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B2499 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B24A5 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B24B1 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B24B7 F507                       	smpsPSGvoice        stone_26
000B24B9 B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000B24C5 804A                       	dc.b	nRst, $4A
000B24C7                            
000B24C7                            RRZ2_Loop0A:
000B24C7 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B24D3 804A                       	dc.b	nRst, $4A
000B24D5 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000B24DA B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B24E6 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000B24F2 B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000B24F6                            
000B24F6                            RRZ2_Loop0B:
000B24F6 F507                       	smpsPSGvoice        stone_23
000B24F8 B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000B2504 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000B2510 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000B251C 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000B2523 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000B2528                            
000B2528                            RRZ2_Loop0C:
000B2528 F507                       	smpsPSGvoice        stone_1D
000B252A B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000B2536 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000B2542 B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000B254E E760                       	dc.b	smpsNoAttack, $60
000B2550 F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000B2555 800D                       	dc.b	nRst, $0D
000B2557 EC02                       	smpsPSGAlterVol     $02
000B2559 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B2565 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B2571 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B257D 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B2589 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B2595 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B25A1 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000B25A9 ECFE                       	smpsPSGAlterVol     $FE
000B25AB F6FE 93                    	smpsJump            RRZ2_PSG2
000B25AE                            
000B25AE                            ; PSG3 Data
000B25AE                            RRZ2_PSG3:
000B25AE F3E7                       	smpsPSGform         $E7
000B25B0 8060 80                    	dc.b	nRst, $60, nRst
000B25B3 F800 00                    	smpsCall            RRZ2_Call00
000B25B6 F800 00                    	smpsCall            RRZ2_Call00
000B25B9 F800 00                    	smpsCall            RRZ2_Call01
000B25BC                            
000B25BC                            RRZ2_Jump03:
000B25BC F800 00                    	smpsCall            RRZ2_Call00
000B25BF F6FF FB                    	smpsJump            RRZ2_Jump03
000B25C2                            
000B25C2                            RRZ2_Call00:
000B25C2 F502                       	smpsPSGvoice        stone_0F
000B25C4 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B25CB F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000B25D0 E3                         	smpsReturn
000B25D1                            
000B25D1                            RRZ2_Call01:
000B25D1 F502                       	smpsPSGvoice        stone_0F
000B25D3 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B25DA F502                       	smpsPSGvoice        stone_0F
000B25DC B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B25E3 F502                       	smpsPSGvoice        stone_0F
000B25E5 B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000B25EC F503                       	smpsPSGvoice        stone_04
000B25EE B10C                       	dc.b	nC4, $0C
000B25F0 F502                       	smpsPSGvoice        stone_0F
000B25F2 B104 8080                  	dc.b	nC4, $04, nRst, nRst
000B25F6 E3                         	smpsReturn
000B25F7                            
000B25F7                            ; DAC Data
000B25F7                            RRZ2_DAC:
000B25F7 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000B2603 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000B260F 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000B261B 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000B2627 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000B2633 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B263F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000B264B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B2657 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B2663 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B266F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B267B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B2687 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000B268D                            
000B268D                            RRZ2_Loop00:
000B268D 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B2699 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B26A5 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B26B1 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B26BD 80                         	dc.b	nRst
000B26BE F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000B26C3 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B26CF 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B26DB 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B26E7 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000B26F3 82                         	dc.b	dSnare
000B26F4                            
000B26F4                            RRZ2_Loop01:
000B26F4 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B2700 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B270C 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B2718 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B2724 80                         	dc.b	nRst
000B2725 F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000B272A 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000B2736 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000B2742 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000B274E 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000B275A 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000B2766 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000B2772 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000B277E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B278A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B2796 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B27A2 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B27AE 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B27BA 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B27C6 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B27D2 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000B27DE 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B27EA 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000B27F6 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000B2802 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000B280E 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000B281A 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000B2826                            
000B2826                            RRZ2_Loop02:
000B2826 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B2832 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B283E 80                         	dc.b	nRst
000B283F F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000B2844 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B2850 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B285C 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000B2868 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000B286D F6FD 88                    	smpsJump            RRZ2_DAC
000B2870                            
000B2870                            RRZ2_Voices:
000B2870                            ;	Voice $00
000B2870                            ;	$3A
000B2870                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000B2870                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000B2870                            	smpsVcAlgorithm     $02
000B2870                            	smpsVcFeedback      $07
000B2870                            	smpsVcUnusedBits    $00
000B2870                            	smpsVcDetune        $03, $07, $07, $03
000B2870                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000B2870                            	smpsVcRateScale     $00, $01, $01, $02
000B2870                            	smpsVcAttackRate    $17, $14, $1F, $1F
000B2870                            	smpsVcAmpMod        $00, $00, $00, $00
000B2870                            	smpsVcDecayRate1    $05, $0A, $14, $03
000B2870                            	smpsVcDecayRate2    $01, $01, $05, $01
000B2870                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000B2870                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2889                            
000B2889                            ;	Voice $01
000B2889                            ;	$3C
000B2889                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000B2889                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000B2889                            	smpsVcAlgorithm     $04
000B2889                            	smpsVcFeedback      $07
000B2889                            	smpsVcUnusedBits    $00
000B2889                            	smpsVcDetune        $00, $00, $00, $00
000B2889                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B2889                            	smpsVcRateScale     $00, $00, $00, $00
000B2889                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000B2889                            	smpsVcAmpMod        $00, $00, $00, $00
000B2889                            	smpsVcDecayRate1    $05, $12, $03, $11
000B2889                            	smpsVcDecayRate2    $02, $09, $04, $07
000B2889                            	smpsVcDecayLevel    $01, $02, $03, $05
000B2889                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B28A2                            
000B28A2                            ;	Voice $02
000B28A2                            ;	$3A
000B28A2                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000B28A2                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000B28A2                            	smpsVcAlgorithm     $02
000B28A2                            	smpsVcFeedback      $07
000B28A2                            	smpsVcUnusedBits    $00
000B28A2                            	smpsVcDetune        $03, $01, $00, $07
000B28A2                            	smpsVcCoarseFreq    $01, $01, $04, $03
000B28A2                            	smpsVcRateScale     $02, $02, $03, $02
000B28A2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B28A2                            	smpsVcAmpMod        $00, $00, $00, $00
000B28A2                            	smpsVcDecayRate1    $0A, $03, $05, $05
000B28A2                            	smpsVcDecayRate2    $02, $03, $02, $03
000B28A2                            	smpsVcDecayLevel    $07, $05, $06, $06
000B28A2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B28BB                            
000B28BB                            ;	Voice $03
000B28BB                            ;	$3E
000B28BB                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000B28BB                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000B28BB                            	smpsVcAlgorithm     $06
000B28BB                            	smpsVcFeedback      $07
000B28BB                            	smpsVcUnusedBits    $00
000B28BB                            	smpsVcDetune        $00, $00, $00, $00
000B28BB                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000B28BB                            	smpsVcRateScale     $00, $00, $00, $00
000B28BB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B28BB                            	smpsVcAmpMod        $00, $00, $00, $00
000B28BB                            	smpsVcDecayRate1    $00, $00, $06, $03
000B28BB                            	smpsVcDecayRate2    $0C, $07, $06, $08
000B28BB                            	smpsVcDecayLevel    $00, $00, $00, $01
000B28BB                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B28D4                            
000B28D4                            ;	Voice $04
000B28D4                            ;	$3C
000B28D4                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000B28D4                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000B28D4                            	smpsVcAlgorithm     $04
000B28D4                            	smpsVcFeedback      $07
000B28D4                            	smpsVcUnusedBits    $00
000B28D4                            	smpsVcDetune        $01, $01, $07, $07
000B28D4                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B28D4                            	smpsVcRateScale     $00, $00, $00, $00
000B28D4                            	smpsVcAttackRate    $1E, $19, $1E, $17
000B28D4                            	smpsVcAmpMod        $00, $00, $00, $00
000B28D4                            	smpsVcDecayRate1    $01, $07, $01, $04
000B28D4                            	smpsVcDecayRate2    $00, $00, $00, $00
000B28D4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B28D4                            	smpsVcReleaseRate   $08, $07, $08, $07
000B28ED                            
000B28ED                            ;	Voice $05
000B28ED                            ;	$16
000B28ED                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000B28ED                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000B28ED                            	smpsVcAlgorithm     $06
000B28ED                            	smpsVcFeedback      $02
000B28ED                            	smpsVcUnusedBits    $00
000B28ED                            	smpsVcDetune        $03, $03, $07, $07
000B28ED                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000B28ED                            	smpsVcRateScale     $00, $00, $00, $00
000B28ED                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B28ED                            	smpsVcAmpMod        $00, $00, $00, $00
000B28ED                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000B28ED                            	smpsVcDecayRate2    $05, $07, $0A, $07
000B28ED                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000B28ED                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2906                            
000B2906                            
000B2906                            		even				
000B2906                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B34E8                            		even
000B34E8                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B34E8                            Tribute_Header:
000B34E8                            	smpsHeaderStartSong 3
000B34EA 0603                       	smpsHeaderChan      $06, $03
000B34EC 0106                       	smpsHeaderTempo     $01, $06
000B34EE                            
000B34F2 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B34F6 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B34FA 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B34FE 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B3502 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B3506                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B3518                            
000B3518                            ; FM1 Data
000B3518                            Tribute_FM1:
000B3518 EF00                       	smpsSetvoice        $00
000B351A F800 00                    	smpsCall            Tribute_Call05
000B351D E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B3529 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B3535 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B353C F800 00                    	smpsCall            Tribute_Call05
000B353F E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B354B 94                         	dc.b	nG1
000B354C EA09                       	smpsSetTempoMod     $09
000B354E E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B3554                            
000B3554                            Tribute_Loop05:
000B3554 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B3560 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B356C 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B3578 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B3584 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B3590 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B359C 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B35A3 F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B35A8 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B35B4 E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B35BC F800 00                    	smpsCall            Tribute_Call00
000B35BF F2                         	smpsStop
000B35C0                            
000B35C0                            Tribute_Call05:
000B35C0 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B35CC E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B35D8 809B                       	dc.b	nRst, nD2
000B35DA E3                         	smpsReturn
000B35DB                            
000B35DB                            Tribute_Call00:
000B35DB 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B35E7 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B35F3 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B35F8 E3                         	smpsReturn
000B35F9                            
000B35F9                            ; FM2 Data
000B35F9                            Tribute_FM2:
000B35F9 EF01                       	smpsSetvoice        $01
000B35FB B512 B306                  	dc.b	nE4, $12, nD4, $06
000B35FF E60A                       	smpsFMAlterVol      $0A
000B3601 0680                       	dc.b	$06, nRst
000B3603 E6F6                       	smpsFMAlterVol      $F6
000B3605 B8                         	dc.b	nG4
000B3606 E60A                       	smpsFMAlterVol      $0A
000B3608 0680                       	dc.b	$06, nRst
000B360A E6F6                       	smpsFMAlterVol      $F6
000B360C B6B5                       	dc.b	nF4, nE4
000B360E E60A                       	smpsFMAlterVol      $0A
000B3610 06                         	dc.b	$06
000B3611 E6F6                       	smpsFMAlterVol      $F6
000B3613 B1                         	dc.b	nC4
000B3614 E60A                       	smpsFMAlterVol      $0A
000B3616 06                         	dc.b	$06
000B3617 E6F6                       	smpsFMAlterVol      $F6
000B3619 B3                         	dc.b	nD4
000B361A EF02                       	smpsSetvoice        $02
000B361C E918                       	smpsAlterPitch      $18
000B361E F800 00                    	smpsCall            Tribute_Call04
000B3621 EF01                       	smpsSetvoice        $01
000B3623 E9E8                       	smpsAlterPitch      $E8
000B3625 F800 00                    	smpsCall            Tribute_Call04
000B3628 B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B3630 E60A                       	smpsFMAlterVol      $0A
000B3632 06                         	dc.b	$06
000B3633 E6F6                       	smpsFMAlterVol      $F6
000B3635 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B3639 E60A                       	smpsFMAlterVol      $0A
000B363B 0680                       	dc.b	$06, nRst
000B363D E6F6                       	smpsFMAlterVol      $F6
000B363F B8                         	dc.b	nG4
000B3640 E60A                       	smpsFMAlterVol      $0A
000B3642 0680                       	dc.b	$06, nRst
000B3644 E6F6                       	smpsFMAlterVol      $F6
000B3646 B6B5                       	dc.b	nF4, nE4
000B3648 E60A                       	smpsFMAlterVol      $0A
000B364A 06                         	dc.b	$06
000B364B E6F6                       	smpsFMAlterVol      $F6
000B364D B1                         	dc.b	nC4
000B364E E60A                       	smpsFMAlterVol      $0A
000B3650 06                         	dc.b	$06
000B3651 E6F6                       	smpsFMAlterVol      $F6
000B3653 B3                         	dc.b	nD4
000B3654 EF02                       	smpsSetvoice        $02
000B3656 E918                       	smpsAlterPitch      $18
000B3658 F800 00                    	smpsCall            Tribute_Call04
000B365B EF01                       	smpsSetvoice        $01
000B365D E9E8                       	smpsAlterPitch      $E8
000B365F F800 00                    	smpsCall            Tribute_Call04
000B3662 B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B366A                            
000B366A                            Tribute_Loop04:
000B366A 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B366E E60A                       	smpsFMAlterVol      $0A
000B3670 06                         	dc.b	$06
000B3671 E6F6                       	smpsFMAlterVol      $F6
000B3673 B50C                       	dc.b	nE4, $0C
000B3675 E60A                       	smpsFMAlterVol      $0A
000B3677 06                         	dc.b	$06
000B3678 E6F6                       	smpsFMAlterVol      $F6
000B367A 06                         	dc.b	$06
000B367B E60A                       	smpsFMAlterVol      $0A
000B367D 06                         	dc.b	$06
000B367E E6F6                       	smpsFMAlterVol      $F6
000B3680 06                         	dc.b	$06
000B3681 E60A                       	smpsFMAlterVol      $0A
000B3683 06                         	dc.b	$06
000B3684 E6F6                       	smpsFMAlterVol      $F6
000B3686 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B3689 F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B368E 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B3692 E60A                       	smpsFMAlterVol      $0A
000B3694 06                         	dc.b	$06
000B3695 E6F6                       	smpsFMAlterVol      $F6
000B3697 B50C                       	dc.b	nE4, $0C
000B3699 E60A                       	smpsFMAlterVol      $0A
000B369B 06                         	dc.b	$06
000B369C E6F6                       	smpsFMAlterVol      $F6
000B369E 06                         	dc.b	$06
000B369F E60A                       	smpsFMAlterVol      $0A
000B36A1 06                         	dc.b	$06
000B36A2 E6F6                       	smpsFMAlterVol      $F6
000B36A4 06                         	dc.b	$06
000B36A5 E60A                       	smpsFMAlterVol      $0A
000B36A7 06                         	dc.b	$06
000B36A8 E6F6                       	smpsFMAlterVol      $F6
000B36AA B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B36B0 F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B36B5 B51E                       	dc.b	nE4, $1E
000B36B7 E60A                       	smpsFMAlterVol      $0A
000B36B9 06                         	dc.b	$06
000B36BA E6F6                       	smpsFMAlterVol      $F6
000B36BC B62A                       	dc.b	nF4, $2A
000B36BE E60A                       	smpsFMAlterVol      $0A
000B36C0 06                         	dc.b	$06
000B36C1 E6F6                       	smpsFMAlterVol      $F6
000B36C3 B52A                       	dc.b	nE4, $2A
000B36C5 E60A                       	smpsFMAlterVol      $0A
000B36C7 06                         	dc.b	$06
000B36C8 E6F6                       	smpsFMAlterVol      $F6
000B36CA B52A                       	dc.b	nE4, $2A
000B36CC E60A                       	smpsFMAlterVol      $0A
000B36CE 06                         	dc.b	$06
000B36CF E6F6                       	smpsFMAlterVol      $F6
000B36D1 B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B36D5 E60A                       	smpsFMAlterVol      $0A
000B36D7 06                         	dc.b	$06
000B36D8 E6F6                       	smpsFMAlterVol      $F6
000B36DA B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B36DE F800 00                    	smpsCall            Tribute_Call03
000B36E1 F2                         	smpsStop
000B36E2                            
000B36E2                            Tribute_Call04:
000B36E2 B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B36E8 E60A                       	smpsFMAlterVol      $0A
000B36EA 0680                       	dc.b	$06, nRst
000B36EC E6F6                       	smpsFMAlterVol      $F6
000B36EE B8                         	dc.b	nG4
000B36EF E60A                       	smpsFMAlterVol      $0A
000B36F1 0680                       	dc.b	$06, nRst
000B36F3 E6F6                       	smpsFMAlterVol      $F6
000B36F5 B6B5                       	dc.b	nF4, nE4
000B36F7 E60A                       	smpsFMAlterVol      $0A
000B36F9 06                         	dc.b	$06
000B36FA E6F6                       	smpsFMAlterVol      $F6
000B36FC B1                         	dc.b	nC4
000B36FD E60A                       	smpsFMAlterVol      $0A
000B36FF 06                         	dc.b	$06
000B3700 E6F6                       	smpsFMAlterVol      $F6
000B3702 B3                         	dc.b	nD4
000B3703 E3                         	smpsReturn
000B3704                            
000B3704                            Tribute_Call03:
000B3704 E918                       	smpsAlterPitch      $18
000B3706 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B370F E60A                       	smpsFMAlterVol      $0A
000B3711 06                         	dc.b	$06
000B3712 E6F6                       	smpsFMAlterVol      $F6
000B3714 A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B371B E60A                       	smpsFMAlterVol      $0A
000B371D 06                         	dc.b	$06
000B371E E6F6                       	smpsFMAlterVol      $F6
000B3720 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B3727 E60A                       	smpsFMAlterVol      $0A
000B3729 06                         	dc.b	$06
000B372A E6F6                       	smpsFMAlterVol      $F6
000B372C E9E8                       	smpsAlterPitch      $E8
000B372E E3                         	smpsReturn
000B372F                            
000B372F                            ; FM3 Data
000B372F                            Tribute_FM3:
000B372F EF01                       	smpsSetvoice        $01
000B3731 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B3735 E60A                       	smpsFMAlterVol      $0A
000B3737 0680                       	dc.b	$06, nRst
000B3739 E6F6                       	smpsFMAlterVol      $F6
000B373B B3                         	dc.b	nD4
000B373C E60A                       	smpsFMAlterVol      $0A
000B373E 0680                       	dc.b	$06, nRst
000B3740 E6F6                       	smpsFMAlterVol      $F6
000B3742 B1B1                       	dc.b	nC4, nC4
000B3744 E60A                       	smpsFMAlterVol      $0A
000B3746 06                         	dc.b	$06
000B3747 E6F6                       	smpsFMAlterVol      $F6
000B3749 AE                         	dc.b	nA3
000B374A E60A                       	smpsFMAlterVol      $0A
000B374C 06                         	dc.b	$06
000B374D E6F6                       	smpsFMAlterVol      $F6
000B374F B0                         	dc.b	nB3
000B3750 EF02                       	smpsSetvoice        $02
000B3752 E918                       	smpsAlterPitch      $18
000B3754 E080                       	smpsPan             panLeft, $00
000B3756 F800 00                    	smpsCall            Tribute_Call02
000B3759 EF01                       	smpsSetvoice        $01
000B375B E9E8                       	smpsAlterPitch      $E8
000B375D E0C0                       	smpsPan             panCenter, $00
000B375F F800 00                    	smpsCall            Tribute_Call02
000B3762 AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B376A E60A                       	smpsFMAlterVol      $0A
000B376C 06                         	dc.b	$06
000B376D E6F6                       	smpsFMAlterVol      $F6
000B376F B112 B006                  	dc.b	nC4, $12, nB3, $06
000B3773 E60A                       	smpsFMAlterVol      $0A
000B3775 0680                       	dc.b	$06, nRst
000B3777 E6F6                       	smpsFMAlterVol      $F6
000B3779 B3                         	dc.b	nD4
000B377A E60A                       	smpsFMAlterVol      $0A
000B377C 0680                       	dc.b	$06, nRst
000B377E E6F6                       	smpsFMAlterVol      $F6
000B3780 B1B1                       	dc.b	nC4, nC4
000B3782 E60A                       	smpsFMAlterVol      $0A
000B3784 06                         	dc.b	$06
000B3785 E6F6                       	smpsFMAlterVol      $F6
000B3787 AE                         	dc.b	nA3
000B3788 E60A                       	smpsFMAlterVol      $0A
000B378A 06                         	dc.b	$06
000B378B E6F6                       	smpsFMAlterVol      $F6
000B378D B0                         	dc.b	nB3
000B378E EF02                       	smpsSetvoice        $02
000B3790 E918                       	smpsAlterPitch      $18
000B3792 E080                       	smpsPan             panLeft, $00
000B3794 F800 00                    	smpsCall            Tribute_Call02
000B3797 EF01                       	smpsSetvoice        $01
000B3799 E9E8                       	smpsAlterPitch      $E8
000B379B E0C0                       	smpsPan             panCenter, $00
000B379D F800 00                    	smpsCall            Tribute_Call02
000B37A0 AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B37A8                            
000B37A8                            Tribute_Loop03:
000B37A8 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B37AC E60A                       	smpsFMAlterVol      $0A
000B37AE 06                         	dc.b	$06
000B37AF E6F6                       	smpsFMAlterVol      $F6
000B37B1 0C                         	dc.b	$0C
000B37B2 E60A                       	smpsFMAlterVol      $0A
000B37B4 06                         	dc.b	$06
000B37B5 E6F6                       	smpsFMAlterVol      $F6
000B37B7 06                         	dc.b	$06
000B37B8 E60A                       	smpsFMAlterVol      $0A
000B37BA 06                         	dc.b	$06
000B37BB E6F6                       	smpsFMAlterVol      $F6
000B37BD 06                         	dc.b	$06
000B37BE E60A                       	smpsFMAlterVol      $0A
000B37C0 06                         	dc.b	$06
000B37C1 E6F6                       	smpsFMAlterVol      $F6
000B37C3 B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B37C6 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B37CB 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B37CF E60A                       	smpsFMAlterVol      $0A
000B37D1 06                         	dc.b	$06
000B37D2 E6F6                       	smpsFMAlterVol      $F6
000B37D4 0C                         	dc.b	$0C
000B37D5 E60A                       	smpsFMAlterVol      $0A
000B37D7 06                         	dc.b	$06
000B37D8 E6F6                       	smpsFMAlterVol      $F6
000B37DA 06                         	dc.b	$06
000B37DB E60A                       	smpsFMAlterVol      $0A
000B37DD 06                         	dc.b	$06
000B37DE E6F6                       	smpsFMAlterVol      $F6
000B37E0 06                         	dc.b	$06
000B37E1 E60A                       	smpsFMAlterVol      $0A
000B37E3 06                         	dc.b	$06
000B37E4 E6F6                       	smpsFMAlterVol      $F6
000B37E6 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B37ED E60A                       	smpsFMAlterVol      $0A
000B37EF 06                         	dc.b	$06
000B37F0 E6F6                       	smpsFMAlterVol      $F6
000B37F2 0C                         	dc.b	$0C
000B37F3 E60A                       	smpsFMAlterVol      $0A
000B37F5 06                         	dc.b	$06
000B37F6 E6F6                       	smpsFMAlterVol      $F6
000B37F8 06                         	dc.b	$06
000B37F9 E60A                       	smpsFMAlterVol      $0A
000B37FB 06                         	dc.b	$06
000B37FC E6F6                       	smpsFMAlterVol      $F6
000B37FE 06                         	dc.b	$06
000B37FF E60A                       	smpsFMAlterVol      $0A
000B3801 06                         	dc.b	$06
000B3802 E6F6                       	smpsFMAlterVol      $F6
000B3804 B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B380A F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B380F B11E                       	dc.b	nC4, $1E
000B3811 E60A                       	smpsFMAlterVol      $0A
000B3813 06                         	dc.b	$06
000B3814 E6F6                       	smpsFMAlterVol      $F6
000B3816 B12A                       	dc.b	nC4, $2A
000B3818 E60A                       	smpsFMAlterVol      $0A
000B381A 06                         	dc.b	$06
000B381B E6F6                       	smpsFMAlterVol      $F6
000B381D B12A                       	dc.b	nC4, $2A
000B381F E60A                       	smpsFMAlterVol      $0A
000B3821 06                         	dc.b	$06
000B3822 E6F6                       	smpsFMAlterVol      $F6
000B3824 B12A                       	dc.b	nC4, $2A
000B3826 E60A                       	smpsFMAlterVol      $0A
000B3828 06                         	dc.b	$06
000B3829 E6F6                       	smpsFMAlterVol      $F6
000B382B B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B382F E60A                       	smpsFMAlterVol      $0A
000B3831 06                         	dc.b	$06
000B3832 E6F6                       	smpsFMAlterVol      $F6
000B3834 B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B3838 E9F4                       	smpsAlterPitch      $F4
000B383A F8FE C8                    	smpsCall            Tribute_Call03
000B383D E90C                       	smpsAlterPitch      $0C
000B383F F2                         	smpsStop
000B3840                            
000B3840                            Tribute_Call02:
000B3840 B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B3846 E60A                       	smpsFMAlterVol      $0A
000B3848 0680                       	dc.b	$06, nRst
000B384A E6F6                       	smpsFMAlterVol      $F6
000B384C B3                         	dc.b	nD4
000B384D E60A                       	smpsFMAlterVol      $0A
000B384F 0680                       	dc.b	$06, nRst
000B3851 E6F6                       	smpsFMAlterVol      $F6
000B3853 B1B1                       	dc.b	nC4, nC4
000B3855 E60A                       	smpsFMAlterVol      $0A
000B3857 06                         	dc.b	$06
000B3858 E6F6                       	smpsFMAlterVol      $F6
000B385A AE                         	dc.b	nA3
000B385B E60A                       	smpsFMAlterVol      $0A
000B385D 06                         	dc.b	$06
000B385E E6F6                       	smpsFMAlterVol      $F6
000B3860 B0                         	dc.b	nB3
000B3861 E3                         	smpsReturn
000B3862                            
000B3862                            ; FM4 Data
000B3862                            Tribute_FM4:
000B3862 EF01                       	smpsSetvoice        $01
000B3864 AC12 06                    	dc.b	nG3, $12, $06
000B3867 E60A                       	smpsFMAlterVol      $0A
000B3869 0680                       	dc.b	$06, nRst
000B386B E6F6                       	smpsFMAlterVol      $F6
000B386D AF                         	dc.b	nBb3
000B386E E60A                       	smpsFMAlterVol      $0A
000B3870 0680                       	dc.b	$06, nRst
000B3872 E6F6                       	smpsFMAlterVol      $F6
000B3874 ACAC                       	dc.b	nG3, nG3
000B3876 E60A                       	smpsFMAlterVol      $0A
000B3878 06                         	dc.b	$06
000B3879 E6F6                       	smpsFMAlterVol      $F6
000B387B AA                         	dc.b	nF3
000B387C E60A                       	smpsFMAlterVol      $0A
000B387E 06                         	dc.b	$06
000B387F E6F6                       	smpsFMAlterVol      $F6
000B3881 AC                         	dc.b	nG3
000B3882 EF02                       	smpsSetvoice        $02
000B3884 E918                       	smpsAlterPitch      $18
000B3886 E040                       	smpsPan             panRight, $00
000B3888 F800 00                    	smpsCall            Tribute_Call01
000B388B EF01                       	smpsSetvoice        $01
000B388D E9E8                       	smpsAlterPitch      $E8
000B388F E0C0                       	smpsPan             panCenter, $00
000B3891 F800 00                    	smpsCall            Tribute_Call01
000B3894 AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B389C E60A                       	smpsFMAlterVol      $0A
000B389E 06                         	dc.b	$06
000B389F E6F6                       	smpsFMAlterVol      $F6
000B38A1 AC12 06                    	dc.b	nG3, $12, $06
000B38A4 E60A                       	smpsFMAlterVol      $0A
000B38A6 0680                       	dc.b	$06, nRst
000B38A8 E6F6                       	smpsFMAlterVol      $F6
000B38AA AF                         	dc.b	nBb3
000B38AB E60A                       	smpsFMAlterVol      $0A
000B38AD 0680                       	dc.b	$06, nRst
000B38AF E6F6                       	smpsFMAlterVol      $F6
000B38B1 ACAC                       	dc.b	nG3, nG3
000B38B3 E60A                       	smpsFMAlterVol      $0A
000B38B5 06                         	dc.b	$06
000B38B6 E6F6                       	smpsFMAlterVol      $F6
000B38B8 AA                         	dc.b	nF3
000B38B9 E60A                       	smpsFMAlterVol      $0A
000B38BB 06                         	dc.b	$06
000B38BC E6F6                       	smpsFMAlterVol      $F6
000B38BE AC                         	dc.b	nG3
000B38BF EF02                       	smpsSetvoice        $02
000B38C1 E918                       	smpsAlterPitch      $18
000B38C3 E040                       	smpsPan             panRight, $00
000B38C5 F800 00                    	smpsCall            Tribute_Call01
000B38C8 EF01                       	smpsSetvoice        $01
000B38CA E9E8                       	smpsAlterPitch      $E8
000B38CC E0C0                       	smpsPan             panCenter, $00
000B38CE F800 00                    	smpsCall            Tribute_Call01
000B38D1 AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B38D9                            
000B38D9                            Tribute_Loop02:
000B38D9 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B38DD E60A                       	smpsFMAlterVol      $0A
000B38DF 06                         	dc.b	$06
000B38E0 E6F6                       	smpsFMAlterVol      $F6
000B38E2 0C                         	dc.b	$0C
000B38E3 E60A                       	smpsFMAlterVol      $0A
000B38E5 06                         	dc.b	$06
000B38E6 E6F6                       	smpsFMAlterVol      $F6
000B38E8 06                         	dc.b	$06
000B38E9 E60A                       	smpsFMAlterVol      $0A
000B38EB 06                         	dc.b	$06
000B38EC E6F6                       	smpsFMAlterVol      $F6
000B38EE 06                         	dc.b	$06
000B38EF E60A                       	smpsFMAlterVol      $0A
000B38F1 06                         	dc.b	$06
000B38F2 E6F6                       	smpsFMAlterVol      $F6
000B38F4 ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B38F7 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B38FC 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B3900 E60A                       	smpsFMAlterVol      $0A
000B3902 06                         	dc.b	$06
000B3903 E6F6                       	smpsFMAlterVol      $F6
000B3905 0C                         	dc.b	$0C
000B3906 E60A                       	smpsFMAlterVol      $0A
000B3908 06                         	dc.b	$06
000B3909 E6F6                       	smpsFMAlterVol      $F6
000B390B 06                         	dc.b	$06
000B390C E60A                       	smpsFMAlterVol      $0A
000B390E 06                         	dc.b	$06
000B390F E6F6                       	smpsFMAlterVol      $F6
000B3911 06                         	dc.b	$06
000B3912 E60A                       	smpsFMAlterVol      $0A
000B3914 06                         	dc.b	$06
000B3915 E6F6                       	smpsFMAlterVol      $F6
000B3917 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B391E E60A                       	smpsFMAlterVol      $0A
000B3920 06                         	dc.b	$06
000B3921 E6F6                       	smpsFMAlterVol      $F6
000B3923 0C                         	dc.b	$0C
000B3924 E60A                       	smpsFMAlterVol      $0A
000B3926 06                         	dc.b	$06
000B3927 E6F6                       	smpsFMAlterVol      $F6
000B3929 06                         	dc.b	$06
000B392A E60A                       	smpsFMAlterVol      $0A
000B392C 06                         	dc.b	$06
000B392D E6F6                       	smpsFMAlterVol      $F6
000B392F 06                         	dc.b	$06
000B3930 E60A                       	smpsFMAlterVol      $0A
000B3932 06                         	dc.b	$06
000B3933 E6F6                       	smpsFMAlterVol      $F6
000B3935 AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B393B F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B3940 AC1E                       	dc.b	nG3, $1E
000B3942 E60A                       	smpsFMAlterVol      $0A
000B3944 06                         	dc.b	$06
000B3945 E6F6                       	smpsFMAlterVol      $F6
000B3947 AD2A                       	dc.b	nAb3, $2A
000B3949 E60A                       	smpsFMAlterVol      $0A
000B394B 06                         	dc.b	$06
000B394C E6F6                       	smpsFMAlterVol      $F6
000B394E AC2A                       	dc.b	nG3, $2A
000B3950 E60A                       	smpsFMAlterVol      $0A
000B3952 06                         	dc.b	$06
000B3953 E6F6                       	smpsFMAlterVol      $F6
000B3955 AE2A                       	dc.b	nA3, $2A
000B3957 E60A                       	smpsFMAlterVol      $0A
000B3959 06                         	dc.b	$06
000B395A E6F6                       	smpsFMAlterVol      $F6
000B395C AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B3960 E60A                       	smpsFMAlterVol      $0A
000B3962 06                         	dc.b	$06
000B3963 E6F6                       	smpsFMAlterVol      $F6
000B3965 AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B396B F2                         	smpsStop
000B396C                            
000B396C                            Tribute_Call01:
000B396C AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B3972 E60A                       	smpsFMAlterVol      $0A
000B3974 0680                       	dc.b	$06, nRst
000B3976 E6F6                       	smpsFMAlterVol      $F6
000B3978 AF                         	dc.b	nBb3
000B3979 E60A                       	smpsFMAlterVol      $0A
000B397B 0680                       	dc.b	$06, nRst
000B397D E6F6                       	smpsFMAlterVol      $F6
000B397F ACAC                       	dc.b	nG3, nG3
000B3981 E60A                       	smpsFMAlterVol      $0A
000B3983 06                         	dc.b	$06
000B3984 E6F6                       	smpsFMAlterVol      $F6
000B3986 AA                         	dc.b	nF3
000B3987 E60A                       	smpsFMAlterVol      $0A
000B3989 06                         	dc.b	$06
000B398A E6F6                       	smpsFMAlterVol      $F6
000B398C AC                         	dc.b	nG3
000B398D E3                         	smpsReturn
000B398E                            
000B398E                            ; FM5 Data
000B398E                            Tribute_FM5:
000B398E EF02                       	smpsSetvoice        $02
000B3990                            
000B3990                            Tribute_Jump00:
000B3990 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B399C 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B39A8 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B39B4 C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B39C0                            
000B39C0                            Tribute_Loop01:
000B39C0 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B39CC BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B39D8 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B39E4 BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B39F0 BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B39FC 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B3A08 B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B3A0C F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B3A11 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B3A1D 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B3A29 C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B3A35 BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B3A3F E918                       	smpsAlterPitch      $18
000B3A41 F8FB 98                    	smpsCall            Tribute_Call00
000B3A44 E9E8                       	smpsAlterPitch      $E8
000B3A46 F2                         	smpsStop
000B3A47                            
000B3A47                            ; FM6 Data
000B3A47                            Tribute_FM6:
000B3A47 EF02                       	smpsSetvoice        $02
000B3A49 E040                       	smpsPan             panRight, $00
000B3A50 E104                       	smpsAlterNote       $04
000B3A52 8006                       	dc.b	nRst, $06
000B3A54 F6FF 3A                    	smpsJump            Tribute_Jump00
000B3A57                            
000B3A57                            ; PSG1 Data
000B3A57                            Tribute_PSG1:
000B3A57 F505                       	smpsPSGvoice        sTone_09
000B3A5E A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B3A6A E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B3A79 ECFD                       	smpsPSGAlterVol     $FD
000B3A7B                            
000B3A7B                            Tribute_Jump01:
000B3A7B F505                       	smpsPSGvoice        sTone_09
000B3A7D F800 00                    	smpsCall            Tribute_Call07
000B3A80 E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B3A8C B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B3A95 F800 00                    	smpsCall            Tribute_Call07
000B3A98 E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B3AA4 B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B3AB0 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B3ABC B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B3AC8 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B3AD4 E918                       	smpsAlterPitch      $18
000B3AD6 F8FB 03                    	smpsCall            Tribute_Call00
000B3AD9 E9E8                       	smpsAlterPitch      $E8
000B3ADB F2                         	smpsStop
000B3ADC                            
000B3ADC                            Tribute_Call07:
000B3ADC B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B3AE8 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B3AF4 B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B3B00 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B3B0C 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B3B18 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B3B24 BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B3B2D E3                         	smpsReturn
000B3B2E                            
000B3B2E                            ; PSG2 Data
000B3B2E                            Tribute_PSG2:
000B3B2E F505                       	smpsPSGvoice        sTone_09
000B3B35 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B3B41 E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B3B4B ECFF                       	smpsPSGAlterVol     $FF
000B3B52 8006                       	dc.b	nRst, $06
000B3B54 F6FF 25                    	smpsJump            Tribute_Jump01
000B3B57                            
000B3B57                            ; PSG3 Data
000B3B57                            Tribute_PSG3:
000B3B57 F3E7                       	smpsPSGform         $E7
000B3B59 F502                       	smpsPSGvoice        sTone_02
000B3B5B AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B3B62 F501                       	smpsPSGvoice        sTone_05
000B3B64 0680 18                    	dc.b	$06, nRst, $18
000B3B67 F502                       	smpsPSGvoice        sTone_02
000B3B69 AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B3B6D F501                       	smpsPSGvoice        sTone_05
000B3B6F 06                         	dc.b	$06
000B3B70 F502                       	smpsPSGvoice        sTone_02
000B3B72 06                         	dc.b	$06
000B3B73 F501                       	smpsPSGvoice        sTone_05
000B3B75 06                         	dc.b	$06
000B3B76 F502                       	smpsPSGvoice        sTone_02
000B3B78 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B3B80 F501                       	smpsPSGvoice        sTone_05
000B3B82 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B3B87 F502                       	smpsPSGvoice        sTone_02
000B3B89 06                         	dc.b	$06
000B3B8A F501                       	smpsPSGvoice        sTone_05
000B3B8C 06                         	dc.b	$06
000B3B8D F502                       	smpsPSGvoice        sTone_02
000B3B8F 06                         	dc.b	$06
000B3B90 F501                       	smpsPSGvoice        sTone_05
000B3B92 06                         	dc.b	$06
000B3B93 F502                       	smpsPSGvoice        sTone_02
000B3B95 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B3B99 F501                       	smpsPSGvoice        sTone_05
000B3B9B 06                         	dc.b	$06
000B3B9C F502                       	smpsPSGvoice        sTone_02
000B3B9E 06                         	dc.b	$06
000B3B9F F501                       	smpsPSGvoice        sTone_05
000B3BA1 06                         	dc.b	$06
000B3BA2 F502                       	smpsPSGvoice        sTone_02
000B3BA4 0C                         	dc.b	$0C
000B3BA5 F502                       	smpsPSGvoice        sTone_02
000B3BA7 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B3BAE F501                       	smpsPSGvoice        sTone_05
000B3BB0 06                         	dc.b	$06
000B3BB1 F502                       	smpsPSGvoice        sTone_02
000B3BB3 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B3BB9 F501                       	smpsPSGvoice        sTone_05
000B3BBB 06                         	dc.b	$06
000B3BBC F502                       	smpsPSGvoice        sTone_02
000B3BBE 06                         	dc.b	$06
000B3BBF F501                       	smpsPSGvoice        sTone_05
000B3BC1 06                         	dc.b	$06
000B3BC2 F502                       	smpsPSGvoice        sTone_02
000B3BC4 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B3BCC F501                       	smpsPSGvoice        sTone_05
000B3BCE 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B3BD2                            
000B3BD2                            Tribute_Loop06:
000B3BD2 F800 00                    	smpsCall            Tribute_Call06
000B3BD5 800C                       	dc.b	nRst, $0C
000B3BD7 F502                       	smpsPSGvoice        sTone_02
000B3BD9 AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B3BE1 F800 00                    	smpsCall            Tribute_Call06
000B3BE4 800C                       	dc.b	nRst, $0C
000B3BE6 F502                       	smpsPSGvoice        sTone_02
000B3BE8 AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B3BEE F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B3BF3 E718                       	dc.b	smpsNoAttack, $18
000B3BF5 F502                       	smpsPSGvoice        sTone_02
000B3BF7 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B3C03 AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B3C04 F2                         	smpsStop
000B3C05                            
000B3C05                            Tribute_Call06:
000B3C05 F502                       	smpsPSGvoice        sTone_02
000B3C07 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B3C0F F501                       	smpsPSGvoice        sTone_05
000B3C11 06                         	dc.b	$06
000B3C12 F502                       	smpsPSGvoice        sTone_02
000B3C14 06                         	dc.b	$06
000B3C15 F501                       	smpsPSGvoice        sTone_05
000B3C17 0680 0C                    	dc.b	$06, nRst, $0C
000B3C1A F502                       	smpsPSGvoice        sTone_02
000B3C1C AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B3C25 F502                       	smpsPSGvoice        sTone_02
000B3C27 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B3C2F F501                       	smpsPSGvoice        sTone_05
000B3C31 06                         	dc.b	$06
000B3C32 F502                       	smpsPSGvoice        sTone_02
000B3C34 06                         	dc.b	$06
000B3C35 F501                       	smpsPSGvoice        sTone_05
000B3C37 06                         	dc.b	$06
000B3C38 E3                         	smpsReturn
000B3C39                            
000B3C39                            ; DAC Data
000B3C39                            Tribute_DAC:
000B3C39 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B3C43 E690                       	smpsFMAlterVol      $90
000B3C45 8A0C                       	dc.b	dLowTimpani, $0C
000B3C47 E670                       	smpsFMAlterVol      $70
000B3C49 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B3C51 E6F9                       	smpsFMAlterVol      $F9
000B3C53 88                         	dc.b	dHiTimpani
000B3C54 E607                       	smpsFMAlterVol      $07
000B3C56 8982                       	dc.b	dMidTimpani, dSnare
000B3C58 E690                       	smpsFMAlterVol      $90
000B3C5A 8A                         	dc.b	dLowTimpani
000B3C5B E670                       	smpsFMAlterVol      $70
000B3C5D 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B3C69 06                         	dc.b	$06
000B3C6A E690                       	smpsFMAlterVol      $90
000B3C6C 8A0C                       	dc.b	dLowTimpani, $0C
000B3C6E E670                       	smpsFMAlterVol      $70
000B3C70 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B3C7A                            
000B3C7A                            Tribute_Loop00:
000B3C7A 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B3C86 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B3C8C E6F9                       	smpsFMAlterVol      $F9
000B3C8E 88                         	dc.b	dHiTimpani
000B3C8F E607                       	smpsFMAlterVol      $07
000B3C91 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B3C9D 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B3CA4 E607                       	smpsFMAlterVol      $07
000B3CA6 88                         	dc.b	dHiTimpani
000B3CA7 E6F9                       	smpsFMAlterVol      $F9
000B3CA9 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B3CAF F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B3CB4 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B3CB8 E6F9                       	smpsFMAlterVol      $F9
000B3CBA 8804                       	dc.b	dHiTimpani, $04
000B3CBC E607                       	smpsFMAlterVol      $07
000B3CBE 89                         	dc.b	dMidTimpani
000B3CBF E690                       	smpsFMAlterVol      $90
000B3CC1 8A                         	dc.b	dLowTimpani
000B3CC2 E670                       	smpsFMAlterVol      $70
000B3CC4 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B3CD0 6081 36                    	dc.b	$60, dKick, $36
000B3CD3 E6F9                       	smpsFMAlterVol      $F9
000B3CD5 8806                       	dc.b	dHiTimpani, $06
000B3CD7 E607                       	smpsFMAlterVol      $07
000B3CD9 89                         	dc.b	dMidTimpani
000B3CDA E690                       	smpsFMAlterVol      $90
000B3CDC 8A                         	dc.b	dLowTimpani
000B3CDD E670                       	smpsFMAlterVol      $70
000B3CDF 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B3CEB 8182                       	dc.b	dKick, dSnare
000B3CED E6F9                       	smpsFMAlterVol      $F9
000B3CEF 88                         	dc.b	dHiTimpani
000B3CF0 E607                       	smpsFMAlterVol      $07
000B3CF2 8982                       	dc.b	dMidTimpani, dSnare
000B3CF4 E690                       	smpsFMAlterVol      $90
000B3CF6 8A                         	dc.b	dLowTimpani
000B3CF7 E670                       	smpsFMAlterVol      $70
000B3CF9 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B3D00 E690                       	smpsFMAlterVol      $90
000B3D02 8A                         	dc.b	dLowTimpani
000B3D03 E670                       	smpsFMAlterVol      $70
000B3D05 8281                       	dc.b	dSnare, dKick
000B3D07 F2                         	smpsStop
000B3D08                            
000B3D08                            Tribute_Voices:
000B3D08                            ;	Voice $00
000B3D08                            ;	$3B
000B3D08                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B3D08                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B3D08                            	smpsVcAlgorithm     $03
000B3D08                            	smpsVcFeedback      $07
000B3D08                            	smpsVcUnusedBits    $00
000B3D08                            	smpsVcDetune        $00, $00, $03, $05
000B3D08                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B3D08                            	smpsVcRateScale     $02, $01, $02, $03
000B3D08                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3D08                            	smpsVcAmpMod        $00, $00, $00, $00
000B3D08                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B3D08                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B3D08                            	smpsVcDecayLevel    $05, $03, $07, $05
000B3D08                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3D21                            
000B3D21                            ;	Voice $01
000B3D21                            ;	$3D
000B3D21                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B3D21                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B3D21                            	smpsVcAlgorithm     $05
000B3D21                            	smpsVcFeedback      $07
000B3D21                            	smpsVcUnusedBits    $00
000B3D21                            	smpsVcDetune        $00, $00, $00, $05
000B3D21                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B3D21                            	smpsVcRateScale     $00, $00, $00, $02
000B3D21                            	smpsVcAttackRate    $19, $19, $19, $14
000B3D21                            	smpsVcAmpMod        $00, $00, $00, $00
000B3D21                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B3D21                            	smpsVcDecayRate2    $04, $04, $04, $07
000B3D21                            	smpsVcDecayLevel    $01, $01, $01, $03
000B3D21                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B3D3A                            
000B3D3A                            ;	Voice $02
000B3D3A                            ;	$1F
000B3D3A                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B3D3A                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B3D3A                            	smpsVcAlgorithm     $07
000B3D3A                            	smpsVcFeedback      $03
000B3D3A                            	smpsVcUnusedBits    $00
000B3D3A                            	smpsVcDetune        $01, $00, $03, $02
000B3D3A                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B3D3A                            	smpsVcRateScale     $02, $02, $02, $02
000B3D3A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3D3A                            	smpsVcAmpMod        $00, $00, $00, $00
000B3D3A                            	smpsVcDecayRate1    $07, $09, $07, $06
000B3D3A                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B3D3A                            	smpsVcDecayLevel    $09, $09, $09, $09
000B3D3A                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B3D53                            
000B3D53                            
000B3D54 00                         		even		
000B3D54                            ; ---------------------------------------------------------------------------
000B3D54                            ; Sound	effect pointers
000B3D54                            ; ---------------------------------------------------------------------------
000B3D54                            SoundIndex:
000B3D54 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B3D58 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B3D5C 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B3D60 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B3D64 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B3D68 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B3D6C 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B3D70 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B3D74 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B3D78 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B3D7C 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B3D80 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B3D84 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B3D88 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B3D8C 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B3D90 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B3D94 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B3D98 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B3D9C 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B3DA0 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B3DA4 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B3DA8 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B3DAC 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B3DB0 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B3DB4 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B3DB8 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B3DBC 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B3DC0 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B3DC4 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B3DC8 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B3DCC 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B3DD0 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B3DD4 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B3DD8 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B3DDC 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B3DE0 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B3DE4 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B3DE8 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B3DEC 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B3DF0 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B3DF4 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B3DF8 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B3DFC 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B3E00 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B3E04 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B3E08 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B3E0C 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B3E10 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B3E14                            ptr_sndend
000B3E14                            ; ---------------------------------------------------------------------------
000B3E14                            ; Special sound effect pointers
000B3E14                            ; ---------------------------------------------------------------------------
000B3E14                            SpecSoundIndex:
000B3E14 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B3E18 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B3E1C 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B3E20 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B3E24 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B3E28 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B3E2C                            ptr_specend
000B3E2C                            SoundA0:	include	"sound/sfx/Jump.asm"
000B3E2C                            SndA0_Jump_Header:
000B3E2C                            	smpsHeaderStartSong 1
000B3E2E 01                         	smpsHeaderTempoSFX  $01
000B3E2F 01                         	smpsHeaderChanSFX   $01
000B3E30                            
000B3E36                            
000B3E36                            ; PSG2 Data
000B3E36                            SndA0_Jump_PSG2:
000B3E36 F500                       	smpsPSGvoice        $00
000B3E38 9E05                       	dc.b	nF2, $05
000B3E3F A315                       	dc.b	nBb2, $15
000B3E41 F2                         	smpsStop
000B3E42                            
000B3E42                            ; Song seems to not use any FM voices
000B3E42                            SndA0_Jump_Voices:
000B3E42                            SndA0_Jump_Voices:
000B3E42                            		even
000B3E42                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B3E6C                            		even
000B3E6C                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B3E6C                            SndDF_Header:
000B3E6C                            	smpsHeaderStartSong 3
000B3E6E 01                         	smpsHeaderTempoSFX  $01
000B3E6F 01                         	smpsHeaderChanSFX   $01
000B3E70                            
000B3E76                            
000B3E76                            ; FM5 Data
000B3E76                            SndDF_FM5:
000B3E76 EF00                       	smpsSetvoice        $00
000B3E78                            
000B3E78                            SndDF_Loop00:
000B3E78 F800 00                    	smpsCall            SndDF_Call00
000B3E7B E905                       	smpsAlterPitch $05
000B3E7D E608                       	smpsFMAlterVol      $08
000B3E7F F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B3E84 E9EC                       	smpsAlterPitch $EC
000B3E86 E6E0                       	smpsFMAlterVol      $E0
000B3E88 F2                         	smpsStop
000B3E89                            
000B3E89                            SndDF_Call00:
000B3E89 9902                       	dc.b	nC2, $02
000B3E8B E901                       	smpsAlterPitch $01
000B3E8D F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B3E92 E9F6                       	smpsAlterPitch $F6
000B3E94 E3                         	smpsReturn
000B3E95                            
000B3E95                            SndDF_Voices:
000B3E95                            ;	Voice $00
000B3E95                            ;	$07
000B3E95                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B3E95                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B3E95                            	smpsVcAlgorithm     $07
000B3E95                            	smpsVcFeedback      $00
000B3E95                            	smpsVcUnusedBits    $00
000B3E95                            	smpsVcDetune        $00, $00, $00, $00
000B3E95                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B3E95                            	smpsVcRateScale     $00, $00, $00, $00
000B3E95                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B3E95                            	smpsVcAmpMod        $00, $00, $00, $00
000B3E95                            	smpsVcDecayRate1    $00, $00, $00, $00
000B3E95                            	smpsVcDecayRate2    $00, $00, $00, $00
000B3E95                            	smpsVcDecayLevel    $01, $01, $01, $01
000B3E95                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3EAE                            		even
000B3EAE                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B3EE0                            		even
000B3EE0                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B3F24 00                         		even
000B3F24                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B3F24                            SndD2_Header:
000B3F24                            	smpsHeaderStartSong 3
000B3F26 01                         	smpsHeaderTempoSFX  $01
000B3F27 01                         	smpsHeaderChanSFX   $01
000B3F28                            
000B3F2E                            
000B3F2E                            ; FM4 Data
000B3F2E                            SndD2_FM4:
000B3F2E EF00                       	smpsSetvoice        $00
000B3F35 C645                       	dc.b	nA5, $45
000B3F37 F2                         	smpsStop
000B3F38                            
000B3F38                            SndD2_Voices:
000B3F38                            ;	Voice $00
000B3F38                            ;	$04
000B3F38                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B3F38                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B3F38                            	smpsVcAlgorithm     $04
000B3F38                            	smpsVcFeedback      $00
000B3F38                            	smpsVcUnusedBits    $00
000B3F38                            	smpsVcDetune        $04, $00, $00, $02
000B3F38                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B3F38                            	smpsVcRateScale     $00, $00, $00, $00
000B3F38                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3F38                            	smpsVcAmpMod        $00, $00, $00, $00
000B3F38                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B3F38                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B3F38                            	smpsVcDecayLevel    $00, $01, $00, $01
000B3F38                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3F52 00                         		even
000B3F52                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B3F82                            		even
000B3F82                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B3FB2                            		even
000B3FB2                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B3FE6                            		even
000B3FE6                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B3FF8                            		even
000B3FF8                            SoundAA:	include	"sound/sfx/Splash.asm"
000B3FF8                            SndA2_Header:
000B3FF8                            	smpsHeaderStartSong 3
000B3FFA 01                         	smpsHeaderTempoSFX  $01
000B3FFB 02                         	smpsHeaderChanSFX   $02
000B3FFC                            
000B4008                            
000B4008                            ; FM3 Data
000B4008                            SndA2_FM3:
000B4008 EF00                       	smpsSetvoice        $00
000B400F 8106                       	dc.b	nC0, $06
000B4011                            
000B4011                            SndA2_Loop00:
000B4011 810E                       	dc.b	nC0, $0E
000B4013 E60E                       	smpsAlterVol      $0E
000B4015 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B401A F2                         	smpsStop
000B401B                            
000B401B                            ; FM4 Data
000B401B                            SndA2_FM4:
000B401B EF01                       	smpsSetvoice        $01
000B401D A606 14                    	dc.b	nCs3, $06, $14
000B4020 F2                         	smpsStop
000B4021                            
000B4021                            SndA2_Voices:
000B4021                            ;	Voice $00
000B4021                            ;	$F9
000B4021                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B4021                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B4021                            	smpsVcAlgorithm     $01
000B4021                            	smpsVcFeedback      $07
000B4021                            	smpsVcUnusedBits    $03
000B4021                            	smpsVcDetune        $03, $01, $03, $02
000B4021                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B4021                            	smpsVcRateScale     $00, $00, $00, $00
000B4021                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B4021                            	smpsVcAmpMod        $00, $00, $00, $00
000B4021                            	smpsVcDecayRate1    $02, $09, $18, $05
000B4021                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B4021                            	smpsVcDecayLevel    $02, $04, $02, $01
000B4021                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B403A                            
000B403A                            ;	Voice $01
000B403A                            ;	$00
000B403A                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B403A                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B403A                            	smpsVcAlgorithm     $00
000B403A                            	smpsVcFeedback      $00
000B403A                            	smpsVcUnusedBits    $00
000B403A                            	smpsVcDetune        $00, $00, $00, $00
000B403A                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B403A                            	smpsVcRateScale     $00, $00, $03, $03
000B403A                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B403A                            	smpsVcAmpMod        $00, $00, $00, $00
000B403A                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B403A                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B403A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B403A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B4054 00                         		even
000B4054                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B4054                            Sound_3E_Header:
000B4054                            	smpsHeaderStartSong 3
000B4056 01                         	smpsHeaderTempoSFX  $01
000B4057 01                         	smpsHeaderChanSFX   $01
000B4058                            
000B405E                            
000B405E                            ; FM5 Data
000B405E                            Sound_3E_3F_40_41_FM5:
000B405E EF00                       	smpsSetvoice        $00
000B4060 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B4065 F2                         	smpsStop
000B4066                            
000B4066                            Sound_3E_Voices:
000B4066                            ;	Voice $00
000B4066                            ;	$0C
000B4066                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B4066                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B4066                            	smpsVcAlgorithm     $04
000B4066                            	smpsVcFeedback      $01
000B4066                            	smpsVcUnusedBits    $00
000B4066                            	smpsVcDetune        $03, $03, $02, $00
000B4066                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B4066                            	smpsVcRateScale     $00, $00, $00, $00
000B4066                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B4066                            	smpsVcAmpMod        $00, $00, $00, $00
000B4066                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B4066                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B4066                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B4066                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B407F                            
000B407F                            
000B4080 00                         		even
000B4080                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B40B4                            		even
000B40B4                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B40EA                            		even
000B40EA                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B40EA                            Sound_70_Header:
000B40EA                            	smpsHeaderStartSong 3
000B40EC 01                         	smpsHeaderTempoSFX  $01
000B40ED 02                         	smpsHeaderChanSFX   $02
000B40EE                            
000B40FA                            
000B40FA                            ; FM5 Data
000B40FA                            Sound_70_FM5:
000B40FA EF00                       	smpsSetvoice        $00
000B40FC 8001                       	dc.b	nRst, $01
000B4103 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B4107 F2                         	smpsStop
000B4108                            
000B4108                            ; PSG3 Data
000B4108                            Sound_70_PSG3:
000B4108 F500                       	smpsPSGvoice        sTone_0D
000B410A 800B                       	dc.b	nRst, $0B
000B410C F3E7                       	smpsPSGform         $E7
000B410E C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B4111                            
000B4111                            Sound_70_Loop00:
000B4111 02                         	dc.b	$02
000B4112 EC01                       	smpsPSGAlterVol     $01
000B4114 E7                         	dc.b	smpsNoAttack
000B4115 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B411A F2                         	smpsStop
000B411B                            
000B411B                            Sound_70_Voices:
000B411B                            ;	Voice $00
000B411B                            ;	$FA
000B411B                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B411B                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B411B                            	smpsVcAlgorithm     $02
000B411B                            	smpsVcFeedback      $07
000B411B                            	smpsVcUnusedBits    $03
000B411B                            	smpsVcDetune        $00, $00, $00, $00
000B411B                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B411B                            	smpsVcRateScale     $00, $00, $00, $00
000B411B                            	smpsVcAttackRate    $13, $0F, $11, $12
000B411B                            	smpsVcAmpMod        $00, $00, $00, $00
000B411B                            	smpsVcDecayRate1    $02, $09, $18, $05
000B411B                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B411B                            	smpsVcDecayLevel    $02, $04, $02, $01
000B411B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B4134                            
000B4134                            
000B4134                            		even
000B4134                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B4162                            		even
000B4162                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B4194                            		even
000B4194                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B41C0                            		even
000B41C0                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B4210                            		even
000B4210                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B425A                            		even
000B425A                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B42B6                            		even
000B42B6                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B42E4                            		even
000B42E4                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B42E4                            SpikesSFX_Header:
000B42E4                            	smpsHeaderStartSong 3
000B42E6 01                         	smpsHeaderTempoSFX  $01
000B42E7 02                         	smpsHeaderChanSFX   $02
000B42E8                            
000B42F4                            
000B42F4                            ; FM6 Data
000B42F4                            SndB7_FM3:
000B42F4 EF01                       	smpsSetvoice        $01
000B42FB B105                       	dc.b	nC4, $05
000B42FD F1                         	smpsModOn
000B42FE E10A                       	smpsAlterNote       $0A
000B4300 E601                       	smpsAlterVol        $01
000B4302 F2                         	smpsStop
000B4303                            
000B4303                            ; FM5 Data
000B4303                            SndB7_FM5:
000B4303 8005                       	dc.b	nRst, $05			 
000B4305 EF00                       	smpsSetvoice        $00
000B4307 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B430D F2                         	smpsStop
000B430E                            
000B430E                            SndB7_Voices:
000B430E                            ;	Voice $00
000B430E                            ;	$34
000B430E                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B430E                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B430E                            	smpsVcAlgorithm     $04
000B430E                            	smpsVcFeedback      $06
000B430E                            	smpsVcUnusedBits    $00
000B430E                            	smpsVcDetune        $0D, $00, $00, $00
000B430E                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B430E                            	smpsVcRateScale     $00, $00, $00, $00
000B430E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B430E                            	smpsVcAmpMod        $00, $00, $00, $00
000B430E                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B430E                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B430E                            	smpsVcDecayLevel    $03, $05, $01, $03
000B430E                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B4327                            
000B4327                            ;	Voice $01
000B4327                            ;	$FA
000B4327                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B4327                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B4327                            	smpsVcAlgorithm     $02
000B4327                            	smpsVcFeedback      $07
000B4327                            	smpsVcUnusedBits    $03
000B4327                            	smpsVcDetune        $03, $01, $03, $02
000B4327                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B4327                            	smpsVcRateScale     $00, $00, $00, $00
000B4327                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4327                            	smpsVcAmpMod        $00, $00, $00, $00
000B4327                            	smpsVcDecayRate1    $02, $09, $18, $05
000B4327                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B4327                            	smpsVcDecayLevel    $02, $04, $02, $01
000B4327                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B4340                            		even
000B4340                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B437C                            		even
000B437C                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B437C                            SndBD_Header:
000B437C                            	smpsHeaderStartSong 3
000B437E 01                         	smpsHeaderTempoSFX  $01
000B437F 01                         	smpsHeaderChanSFX   $01
000B4380                            
000B4386                            
000B4386                            ; FM6 Data
000B4386                            SndBD_FM3:
000B4386 EF00                       	smpsSetvoice        $00
000B4388                            
000B4388                            SndBD_Loop00:
000B4388 C009                       	dc.b	nEb5, $09
000B438A F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B438F F2                         	smpsStop
000B4390                            
000B4390                            SndBD_Voices:
000B4390                            ;	Voice $00
000B4390                            ;	$02
000B4390                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B4390                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B4390                            	smpsVcAlgorithm     $02
000B4390                            	smpsVcFeedback      $00
000B4390                            	smpsVcUnusedBits    $00
000B4390                            	smpsVcDetune        $00, $02, $05, $00
000B4390                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B4390                            	smpsVcRateScale     $00, $00, $00, $00
000B4390                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B4390                            	smpsVcAmpMod        $00, $00, $00, $00
000B4390                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B4390                            	smpsVcDecayRate2    $00, $00, $00, $01
000B4390                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B4390                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B43AA 00                         		even
000B43AA                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B43AA                            Sound_59_Header:
000B43AA                            	smpsHeaderStartSong 3
000B43AC 01                         	smpsHeaderTempoSFX  $01
000B43AD 04                         	smpsHeaderChanSFX   $04
000B43AE                            
000B43C6                            
000B43C6                            ; FM3 Data
000B43C6                            Sound_59_FM3:
000B43C6 E040                       	smpsPan             panRight, $00
000B43C8 8002                       	dc.b	nRst, $02
000B43CA F600 00                    	smpsJump            Sound_59_FM4
000B43CD                            
000B43CD                            ; FM5 Data
000B43CD                            Sound_59_FM5:
000B43CD E080                       	smpsPan             panLeft, $00
000B43CF 8001                       	dc.b	nRst, $01
000B43D1                            
000B43D1                            ; FM4 Data
000B43D1                            Sound_59_FM4:
000B43D1 EF00                       	smpsSetvoice        $00
000B43D8 8110                       	dc.b	nC0, $10
000B43DA F2                         	smpsStop
000B43DB                            
000B43DB                            ; PSG3 Data
000B43DB                            Sound_59_PSG3:
000B43E0 F3E7                       	smpsPSGform         $E7
000B43E2                            
000B43E2                            Sound_59_Loop00:
000B43E2 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B43E5 EC03                       	smpsPSGAlterVol     $03
000B43E7 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B43EC F2                         	smpsStop
000B43ED                            
000B43ED                            Sound_59_Voices:
000B43ED                            ;	Voice $00
000B43ED                            ;	$F9
000B43ED                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B43ED                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B43ED                            	smpsVcAlgorithm     $01
000B43ED                            	smpsVcFeedback      $07
000B43ED                            	smpsVcUnusedBits    $03
000B43ED                            	smpsVcDetune        $03, $01, $03, $02
000B43ED                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B43ED                            	smpsVcRateScale     $00, $00, $00, $00
000B43ED                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B43ED                            	smpsVcAmpMod        $00, $00, $00, $00
000B43ED                            	smpsVcDecayRate1    $02, $09, $18, $05
000B43ED                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B43ED                            	smpsVcDecayLevel    $02, $04, $02, $01
000B43ED                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B4406                            
000B4406                            
000B4406                            		even
000B4406                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B442E                            		even
000B442E                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B445A                            		even
000B445A                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B445A                            Sound_B6_Header:
000B445A                            	smpsHeaderStartSong 3
000B445C 01                         	smpsHeaderTempoSFX  $01
000B445D 02                         	smpsHeaderChanSFX   $02
000B445E                            
000B446A                            
000B446A                            ; FM5 Data
000B446A                            Sound_B6_FM5:
000B446A EF00                       	smpsSetvoice        $00
000B4471 CD0F                       	dc.b	nE6, $0F
000B4473 F2                         	smpsStop
000B4474                            
000B4474                            ; PSG3 Data
000B4474                            Sound_B6_PSG3:
000B4474 F507                       	smpsPSGvoice        sTone_1D
000B4476 8006                       	dc.b	nRst, $06
000B447D F3E7                       	smpsPSGform         $E7
000B447F CD4F                       	dc.b	nE6, $4F
000B4481 F2                         	smpsStop
000B4482                            
000B4482                            Sound_B6_Voices:
000B4482                            ;	Voice $00
000B4482                            ;	$3D
000B4482                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B4482                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B4482                            	smpsVcAlgorithm     $05
000B4482                            	smpsVcFeedback      $07
000B4482                            	smpsVcUnusedBits    $00
000B4482                            	smpsVcDetune        $00, $00, $00, $00
000B4482                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B4482                            	smpsVcRateScale     $00, $00, $00, $00
000B4482                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4482                            	smpsVcAmpMod        $00, $00, $00, $00
000B4482                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B4482                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B4482                            	smpsVcDecayLevel    $02, $04, $02, $01
000B4482                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B449B                            
000B449B                            
000B449C 00                         		even
000B449C                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B44F0                            		even
000B44F0                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B452A                            		even
000B452A                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B459C                            		even
000B459C                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B45CA                            		even
000B45CA                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B4604                            		even
000B4604                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B4604                            SndC1_Header:
000B4604                            	smpsHeaderStartSong 3
000B4606 01                         	smpsHeaderTempoSFX  $01
000B4607 01                         	smpsHeaderChanSFX   $01
000B4608                            
000B460E                            
000B460E                            ; FM4 Data
000B460E                            SndC1_FM4:
000B460E EF00                       	smpsSetvoice        $00
000B4610 D506 40                    	dc.b	nC7, $06, $40
000B4613 F2                         	smpsStop
000B4614                            
000B4614                            SndC1_Voices:
000B4614                            ;	Voice $00
000B4614                            ;	$38
000B4614                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B4614                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B4614                            	smpsVcAlgorithm     $00
000B4614                            	smpsVcFeedback      $07
000B4614                            	smpsVcUnusedBits    $00
000B4614                            	smpsVcDetune        $00, $00, $00, $00
000B4614                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B4614                            	smpsVcRateScale     $00, $00, $00, $00
000B4614                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4614                            	smpsVcAmpMod        $00, $00, $00, $00
000B4614                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B4614                            	smpsVcDecayRate2    $00, $00, $00, $00
000B4614                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B4614                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B462E 00                         		even
000B462E                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B46A8                            		even
000B46A8                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B46D0                            		even
000B46D0                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B46D0                            Sound_B0_Header:
000B46D0                            	smpsHeaderStartSong 3
000B46D2 01                         	smpsHeaderTempoSFX  $01
000B46D3 03                         	smpsHeaderChanSFX   $03
000B46D4                            
000B46E6                            
000B46E6                            ; FM5 Data
000B46E6                            Sound_B0_FM5:
000B46E6 EF00                       	smpsSetvoice        $00
000B46E8 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B46EE F2                         	smpsStop
000B46EF                            
000B46EF                            ; FM4 Data
000B46EF                            Sound_B0_FM4:
000B46EF EF01                       	smpsSetvoice        $01
000B46F1 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B46F5 F2                         	smpsStop
000B46F6                            
000B46F6                            ; FM3 Data
000B46F6                            Sound_B0_FM3:
000B46F6 EF02                       	smpsSetvoice        $02
000B46F8 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B46FF F2                         	smpsStop
000B4700                            
000B4700                            Sound_B0_Voices:
000B4700                            ;	Voice $00
000B4700                            ;	$3B
000B4700                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B4700                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B4700                            	smpsVcAlgorithm     $03
000B4700                            	smpsVcFeedback      $07
000B4700                            	smpsVcUnusedBits    $00
000B4700                            	smpsVcDetune        $00, $00, $00, $00
000B4700                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B4700                            	smpsVcRateScale     $02, $00, $00, $00
000B4700                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B4700                            	smpsVcAmpMod        $00, $00, $00, $00
000B4700                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B4700                            	smpsVcDecayRate2    $00, $00, $00, $00
000B4700                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B4700                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B4719                            
000B4719                            ;	Voice $01
000B4719                            ;	$04
000B4719                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B4719                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B4719                            	smpsVcAlgorithm     $04
000B4719                            	smpsVcFeedback      $00
000B4719                            	smpsVcUnusedBits    $00
000B4719                            	smpsVcDetune        $04, $07, $07, $03
000B4719                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B4719                            	smpsVcRateScale     $00, $00, $00, $00
000B4719                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4719                            	smpsVcAmpMod        $00, $00, $00, $00
000B4719                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B4719                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B4719                            	smpsVcDecayLevel    $00, $01, $00, $01
000B4719                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B4732                            
000B4732                            ;	Voice $02
000B4732                            ;	$3C
000B4732                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B4732                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B4732                            	smpsVcAlgorithm     $04
000B4732                            	smpsVcFeedback      $07
000B4732                            	smpsVcUnusedBits    $00
000B4732                            	smpsVcDetune        $00, $00, $00, $00
000B4732                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B4732                            	smpsVcRateScale     $00, $00, $00, $00
000B4732                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B4732                            	smpsVcAmpMod        $00, $00, $00, $00
000B4732                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B4732                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B4732                            	smpsVcDecayLevel    $02, $09, $09, $01
000B4732                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B474B                            
000B474B                            
000B474C 00                         		even
000B474C                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B478E                            		even
000B478E                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B47BC                            		even
000B47BC                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B47CE                            		even
000B47CE                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B47FC                            		even
000B47FC                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B482A                            		even
000B482A                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B4876                            		even
000B4876                            SoundCC:	include	"sound/sfx/Spring.asm"
000B4876                            Spring_Header:
000B4876                            	smpsHeaderStartSong 1
000B4878 01                         	smpsHeaderTempoSFX  $01
000B4879 01                         	smpsHeaderChanSFX   $01
000B487A                            
000B4880                            
000B4880                            ; FM6 Data
000B4880                            Spring_FM6:
000B4880 EF00                       	smpsSetvoice        $00
000B4882 8001                       	dc.b	nRst, $01
000B4889 B006                       	dc.b	nB3, $06
000B488B F4                         	smpsModOff
000B488C EF01                       	smpsSetvoice        $01
000B488E                            
000B488E                            Spring_Loop00:
000B488E BD02                       	dc.b	nC5, $02
000B4890 E601                       	smpsAlterVol      $01
000B4892 E7                         	dc.b	smpsNoAttack
000B4893 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B4898 F2                         	smpsStop
000B4899                            
000B4899                            Spring_Voices:
000B4899                            ;	Voice $00
000B4899                            ;	$20
000B4899                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B4899                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B4899                            	smpsVcAlgorithm     $00
000B4899                            	smpsVcFeedback      $04
000B4899                            	smpsVcUnusedBits    $00
000B4899                            	smpsVcDetune        $03, $03, $03, $03
000B4899                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B4899                            	smpsVcRateScale     $02, $02, $03, $03
000B4899                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4899                            	smpsVcAmpMod        $00, $00, $00, $00
000B4899                            	smpsVcDecayRate1    $06, $09, $06, $07
000B4899                            	smpsVcDecayRate2    $08, $06, $06, $07
000B4899                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B4899                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B48B2                            
000B48B2                            ;	Voice $01
000B48B2                            ;	$20
000B48B2                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B48B2                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B48B2                            	smpsVcAlgorithm     $00
000B48B2                            	smpsVcFeedback      $04
000B48B2                            	smpsVcUnusedBits    $00
000B48B2                            	smpsVcDetune        $03, $03, $03, $03
000B48B2                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B48B2                            	smpsVcRateScale     $02, $02, $02, $02
000B48B2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B48B2                            	smpsVcAmpMod        $00, $00, $00, $00
000B48B2                            	smpsVcDecayRate1    $06, $09, $06, $07
000B48B2                            	smpsVcDecayRate2    $08, $06, $06, $07
000B48B2                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B48B2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B48CC 00                         		even
000B48CC                            SoundCD:	include	"sound/sfx/Beep.asm"
000B48CC                            Snd99_Header:
000B48CC                            	smpsHeaderStartSong 3
000B48CE 01                         	smpsHeaderTempoSFX  $01
000B48CF 01                         	smpsHeaderChanSFX   $01
000B48D0                            
000B48D6                            
000B48D6                            ; FM4 Data
000B48D6                            Snd99_FM4:
000B48D6 EF00                       	smpsSetvoice        $00
000B48D8 B502                       	dc.b	nE4, $02
000B48DA F2                         	smpsStop
000B48DB                            
000B48DB                            Snd99_Voices:
000B48DB                            ;	Voice $00
000B48DB                            ;	$07
000B48DB                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B48DB                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B48DB                            	smpsVcAlgorithm     $07
000B48DB                            	smpsVcFeedback      $00
000B48DB                            	smpsVcUnusedBits    $00
000B48DB                            	smpsVcDetune        $00, $00, $00, $00
000B48DB                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B48DB                            	smpsVcRateScale     $00, $00, $00, $00
000B48DB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B48DB                            	smpsVcAmpMod        $00, $00, $00, $00
000B48DB                            	smpsVcDecayRate1    $00, $00, $00, $00
000B48DB                            	smpsVcDecayRate2    $00, $00, $00, $00
000B48DB                            	smpsVcDecayLevel    $00, $00, $00, $00
000B48DB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B48F4                            		even
000B48F4                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B4922                            		even
000B4922                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B4922                            SignpostCD_Header:
000B4922                            	smpsHeaderStartSong 3
000B4924 01                         	smpsHeaderTempoSFX  $01
000B4925 02                         	smpsHeaderChanSFX   $02
000B4926                            
000B4932                            
000B4932                            ; FM5 Data
000B4932                            Snd9D_FM5:
000B4932 8004                       	dc.b	nRst, $04
000B4934                            
000B4934                            ; FM4 Data
000B4934                            Snd9D_FM4:
000B4934 EF00                       	smpsSetvoice        $00
000B4936                            
000B4936                            Snd9D_Loop00:
000B4936 B405                       	dc.b	nEb4, $05
000B4938 E604                       	smpsFMAlterVol      $04
000B493A F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B493F F2                         	smpsStop
000B4940                            
000B4940                            Snd9D_Voices:
000B4940                            ;	Voice $00
000B4940                            ;	$F4
000B4940                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B4940                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B4940                            	smpsVcAlgorithm     $04
000B4940                            	smpsVcFeedback      $06
000B4940                            	smpsVcUnusedBits    $03
000B4940                            	smpsVcDetune        $00, $00, $00, $00
000B4940                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B4940                            	smpsVcRateScale     $00, $00, $00, $00
000B4940                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4940                            	smpsVcAmpMod        $00, $00, $00, $00
000B4940                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B4940                            	smpsVcDecayRate2    $08, $05, $00, $00
000B4940                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B4940                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B495A 00                         		even
000B495A                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B4994                            		even
000B4994                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B4994                            Sound_41_Header:
000B4994                            	smpsHeaderStartSong 3
000B4996 01                         	smpsHeaderTempoSFX  $01
000B4997 01                         	smpsHeaderChanSFX   $01
000B4998                            
000B499E                            	
000B499E                            Sound41_FM5:
000B499E EF00                       	smpsSetvoice        $00
000B49A0 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B49A5 F2                         	smpsStop
000B49A6                            
000B49A6                            Sound_41_Voices:
000B49A6                            ;	Voice $00
000B49A6                            ;	$36
000B49A6                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B49A6                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B49A6                            	smpsVcAlgorithm     $06
000B49A6                            	smpsVcFeedback      $06
000B49A6                            	smpsVcUnusedBits    $00
000B49A6                            	smpsVcDetune        $00, $00, $01, $00
000B49A6                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B49A6                            	smpsVcRateScale     $00, $00, $00, $00
000B49A6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B49A6                            	smpsVcAmpMod        $00, $00, $00, $00
000B49A6                            	smpsVcDecayRate1    $00, $00, $00, $00
000B49A6                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B49A6                            	smpsVcDecayLevel    $00, $00, $00, $00
000B49A6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B49BF                            
000B49BF                            
000B49C0 00                         		even
000B49C0                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B49C0                            Snd9B_Header:
000B49C0                            	smpsHeaderStartSong 3
000B49C2 01                         	smpsHeaderTempoSFX  $01
000B49C3 01                         	smpsHeaderChanSFX   $01
000B49C4                            
000B49CA                            
000B49CA                            ; FM5 Data
000B49CA                            Snd9B_FM5:
000B49CA EF00                       	smpsSetvoice        $00
000B49CC 8001                       	dc.b	nRst, $01
000B49D3 CA25                       	dc.b	nCs6, $25
000B49D5 F4                         	smpsModOff
000B49D6                            
000B49D6                            Snd9B_Loop00:
000B49D6 E7                         	dc.b	smpsNoAttack
000B49D7 E601                       	smpsFMAlterVol      $01
000B49D9 D102                       	dc.b	nAb6, $02
000B49DB F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B49E0 F2                         	smpsStop
000B49E1                            
000B49E1                            Snd9B_Voices:
000B49E1                            ;	Voice $00
000B49E1                            ;	$3C
000B49E1                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B49E1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B49E1                            	smpsVcAlgorithm     $04
000B49E1                            	smpsVcFeedback      $07
000B49E1                            	smpsVcUnusedBits    $00
000B49E1                            	smpsVcDetune        $00, $00, $04, $00
000B49E1                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B49E1                            	smpsVcRateScale     $00, $00, $00, $00
000B49E1                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B49E1                            	smpsVcAmpMod        $00, $00, $00, $00
000B49E1                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B49E1                            	smpsVcDecayRate2    $00, $00, $00, $00
000B49E1                            	smpsVcDecayLevel    $00, $00, $00, $00
000B49E1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B49FA                            
000B49FA                            
000B49FA                            		even		
000B49FA                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B4A92                            		even
000B4A92                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B4A9E                            		even				
000B4A9E                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B4ADA                            		even			
000B4ADA                            		; Don't let Sega sample cross $8000-byte boundary
000B4ADA                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 21D2                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 11D0                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 134E                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 134E                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 18D8                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA26                            
000BEA26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA26                            
000BEA26                            ; sub_8FBE:
000BEA26                            MenuScreenTextToRAM:
000BEA26 7200                       		moveq	#0,d1
000BEA28 1219                       		move.b	(a1)+,d1
000BEA2A                            
000BEA2A                            MenuScreenTextToRAM_Cont:
000BEA2A 1019                       		move.b	(a1)+,d0
000BEA2C 34C0                       		move.w	d0,(a2)+
000BEA2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA32 4E75                       		rts
000BEA34                            ; End of function MenuScreenTextToRAM
000BEA34                            
000BEA34                            ; ===========================================================================
000BEA34                            ; loc_8FCC:
000BEA34                            MenuScreen_Options:
000BEA34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA40 303C 0070                  		move.w	#$70,d0
000BEA44 4EB8 18D8                  		jsr	EniDec
000BEA48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA54 303C 2070                  		move.w	#$2070,d0
000BEA58 4EB8 18D8                  		jsr	EniDec
000BEA5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA74 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA78 4238 F711                  		clr.b	($FFFFF711).w		
000BEA7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA80                            ;-------------------------------------------------------------------------------
000BEA80 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA8A 6100 0000                  		bsr.w	Dynamic_Menu
000BEA8E                            ;-------------------------------------------------------------------------------
000BEA8E 7013                       		moveq	#palid_Options,d0
000BEA90 4EB8 247C                  		jsr		PalLoad1
000BEA94 103C 0091                  		move.b	#$91,d0
000BEA98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000BEA9C 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA0 42B8 F704                  		clr.l	(v_screenposy).w
000BEAA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAAA 4EB8 3B10                  		jsr	WaitForVBla
000BEAAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB2 0000 0040                  		ori.b	#$40,d0
000BEAB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEABC 4EB8 212C                  		jsr	PaletteFadeIn
000BEAC0                            ; loc_9060:
000BEAC0                            OptionScreen_Main:
000BEAC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAC6 4EB8 3B10                  		jsr	WaitForVBla				
000BEACA 46FC 2700                  		move	#$2700,sr
000BEACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEAD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEADA 46FC 2300                  		move	#$2300,sr
000BEADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAE4 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAEE                            
000BEAEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF0 60CE                       		bra.s	OptionScreen_Main
000BEAF2                            ; ===========================================================================
000BEAF2                            ; loc_909A:
000BEAF2                            OptionScreen_Select:
000BEAF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAF6 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAF8 7000                       		moveq	#0,d0
000BEAFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB00 4E75                       		rts
000BEB02                            ; ===========================================================================
000BEB02                            ; loc_90B6:
000BEB02                            OptionScreen_Select_Not1P:
000BEB02 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB08 4E75                       		rts
000BEB0A                            ; ===========================================================================
000BEB0A                            
000BEB0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB0A                            
000BEB0A                            ;sub_90E0:
000BEB0A                            OptionScreen_Controls:
000BEB0A 7400                       		moveq	#0,d2
000BEB0C 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB10 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB14 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB18 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB1A 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB1C 6400                       		bcc.s	Option_Controls_Down
000BEB1E 143C 0001                  		move.b	#1,d2
000BEB22                            
000BEB22                            Option_Controls_Down:
000BEB22 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB26 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB28 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB2A 0C02 0002                  		cmpi.b	#2,d2
000BEB2E 6500                       		blo.s	Option_Controls_Refresh
000BEB30 7400                       		moveq	#0,d2
000BEB32                            
000BEB32                            Option_Controls_Refresh:
000BEB32 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB36 E54A                       		lsl.w	#2,d2
000BEB38 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB3C 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB40 3411                       		move.w	(a1),d2
000BEB42 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB46 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB48 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB4A 6400                       		bcc.s	Option_Controls_Right
000BEB4C 1403                       		move.b	d3,d2
000BEB4E                            
000BEB4E                            Option_Controls_Right:
000BEB4E 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB52 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB54 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB56 B403                       		cmp.b	d3,d2
000BEB58 6300                       		bls.s	Option_Controls_Button_A
000BEB5A 7400                       		moveq	#0,d2
000BEB5C                            
000BEB5C                            Option_Controls_Button_A:
000BEB5C 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB60 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB62 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB66 B403                       		cmp.b	d3,d2
000BEB68 6300                       		bls.s	Option_Controls_Refresh2
000BEB6A 7400                       		moveq	#0,d2
000BEB6C                            
000BEB6C                            Option_Controls_Refresh2:
000BEB6C 3282                       		move.w	d2,(a1)
000BEB6E                            
000BEB6E                            Option_Controls_NoMove:
000BEB6E 4E75                       		rts
000BEB70                            ; End of function OptionScreen_Controls
000BEB70                            
000BEB70                            ; ===========================================================================
000BEB70                            ; word_917A:
000BEB70                            OptionScreen_Choices:
000BEB70 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB74 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEB78                            		even
000BEB78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB78                            
000BEB78                            
000BEB78                            OptionScreen_DrawSelected:
000BEB78 6100 0000                  		bsr.w	loc_9268
000BEB7C 7200                       		moveq	#0,d1
000BEB7E 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEB82 E749                       		lsl.w	#3,d1
000BEB84 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEB8A 47F3 1000                  		lea	(a3,d1.w),a3
000BEB8E 303C 6000                  		move.w	#$6000,d0
000BEB92 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEB98 225B                       		movea.l	(a3)+,a1
000BEB9A 6100 FE8A                  		bsr.w	MenuScreenTextToRAM
000BEB9E 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E549                       		lsl.w	#2,d1
000BEBAC 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBB0 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBB4 3211                       		move.w	(a1),d1
000BEBB6 E549                       		lsl.w	#2,d1
000BEBB8                            
000BEBB8                            loc_9186:		
000BEBB8 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBBC 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC0                            		;cmpi.b	#2,(Options_menu_box).w
000BEBC0                            		;bne.s	loc2_9186
000BEBC0                            		;lea	($FFFF00C2).l,a2
000BEBC0                            		;bsr.w	loc_9296
000BEBC0                            
000BEBC0                            loc2_9186:		
000BEBC0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBC6 201B                       		move.l	(a3)+,d0
000BEBC8 7215                       		moveq	#$15,d1
000BEBCA 7407                       		moveq	#7,d2
000BEBCC 4EF8 1324                  		jmp	TilemapToVRAM
000BEBD0                            ; ===========================================================================
000BEBD0                            
000BEBD0                            OptionScreen_DrawUnselected:
000BEBD0 6100 0000                  		bsr.w	loc_9268
000BEBD4 7200                       		moveq	#0,d1
000BEBD6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBDA E749                       		lsl.w	#3,d1
000BEBDC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBE2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBE6 7000                       		moveq	#0,d0
000BEBE8 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEBEE 225B                       		movea.l	(a3)+,a1
000BEBF0 6100 FE34                  		bsr.w	MenuScreenTextToRAM
000BEBF4 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEBFA 7200                       		moveq	#0,d1
000BEBFC                            		;cmpi.b	#2,(Options_menu_box).w
000BEBFC                            		;beq.s	loc2_91F8
000BEBFC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC00 E549                       		lsl.w	#2,d1
000BEC02 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC06 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC0A 3211                       		move.w	(a1),d1
000BEC0C E549                       		lsl.w	#2,d1
000BEC0E                            
000BEC0E                            loc2_91F8		
000BEC0E 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC12 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC16                            		;cmpi.b	#2,(Options_menu_box).w
000BEC16                            		;bne.s	loc3_91F8
000BEC16                            		;lea	($FFFF0222).l,a2
000BEC16                            		;bsr.w	loc_9296
000BEC16                            
000BEC16                            loc3_91F8		
000BEC16 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC1C 201B                       		move.l	(a3)+,d0
000BEC1E 7215                       		moveq	#$15,d1
000BEC20 7407                       		moveq	#7,d2
000BEC22 4EF8 1324                  		jmp	TilemapToVRAM
000BEC26                            ; ===========================================================================
000BEC26                            
000BEC26                            loc_9268:
000BEC26 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC2C 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC30 6A00                       		bpl.s	loc2_9268
000BEC32 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC38                            
000BEC38                            loc2_9268:
000BEC38 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC3C 6700                       		beq.s	loc4_9268
000BEC3E 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC44                            
000BEC44                            loc4_9268:
000BEC44 4E75                       		rts
000BEC46                            ; ===========================================================================
000BEC46                            
000BEC46                            loc_9296:
000BEC46 4E75                       		rts
000BEC48                            
000BEC48                            Dynamic_Menu:
000BEC48 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC4C 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC4E 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC54 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC58 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC5C 0240 001F                                  andi.w  #$001F, D0
000BEC60 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC64                                          ; muls.w  #$0140, D0                   ; as above
000BEC64 ED48                                       lsl.w   #$06, D0
000BEC66 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC6C 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC74 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BEC7A 43F1 0000                                  lea     $00(A1, D0), A1
000BEC7E 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BEC82                                            
000BEC82                            Menu_Loop_Load_Tiles:
000BEC82 2C99                                       move.l  (A1)+, (A6)
000BEC84 2C99                                       move.l  (A1)+, (A6)     
000BEC86 2C99                                       move.l  (A1)+, (A6)     
000BEC88 2C99                                       move.l  (A1)+, (A6)     
000BEC8A 2C99                                       move.l  (A1)+, (A6)     
000BEC8C 2C99                                       move.l  (A1)+, (A6)
000BEC8E 2C99                                       move.l  (A1)+, (A6)
000BEC90 2C99                                       move.l  (A1)+, (A6)
000BEC92 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BEC96                            Exit_Dinamic_Menu:                
000BEC96                                           
000BEC96 4E75                                       rts      
000BEC98                                                    
000BEC98                            Sonic_Miles_Frame_Select:     
000BEC98 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECA6 050A                                       dc.b    $05, $0A
000BECA8 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECB6 0A05                                       dc.b    $0A, $05   
000BECB8                            ; ===========================================================================
000BECB8                            ; off_92BA:
000BECB8                            OptScrBoxData:
000BECB8                            
000BECB8 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECBC 4192                       		dc.w $4192
000BECBE 0003                       		dc.w 3
000BECC0 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECC4 4592                       		dc.w $4592
000BECC6 0003                       		dc.w 3
000BECC8                            
000BECC8                            off_92D2:
000BECC8 0000 0000                  		dc.l TextOptScr_Default
000BECCC 0000 0000                  		dc.l TextOptScr_Original
000BECD0 0000 0000                  		dc.l TextOptScr_Beta
000BECD4 0000 0000                  		dc.l TextOptScr_Midnight
000BECD8 0000 0000                  		dc.l TextOptScr_C2
000BECDC 0000 0000                  		dc.l TextOptScr_Clackers
000BECE0 0000 0000                  		dc.l TextOptScr_RHS
000BECE4 0000 0000                  		dc.l TextOptScr_Socket
000BECE8 0000 0000                  		dc.l TextOptScr_Cringe
000BECEC 0000 0000                  		dc.l TextOptScr_Dark	
000BECF0 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BECF4                            off_92DE:
000BECF4 0000 0000                  		dc.l TextOptScr_Default
000BECF8 0000 0000                  		dc.l TextOptScr_Original
000BECFC 0000 0000                  		dc.l TextOptScr_Beta
000BED00 0000 0000                  		dc.l TextOptScr_Midnight
000BED04 0000 0000                  		dc.l TextOptScr_C2
000BED08 0000 0000                  		dc.l TextOptScr_Clackers
000BED0C 0000 0000                  		dc.l TextOptScr_RHS
000BED10 0000 0000                  		dc.l TextOptScr_Socket
000BED14 0000 0000                  		dc.l TextOptScr_Cringe
000BED18 0000 0000                  		dc.l TextOptScr_Dark
000BED1C 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED20                            off_92EA:
000BED20 0000 0000                  		dc.l TextOptScr_On
000BED24 0000 0000                  		dc.l TextOptScr_Off
000BED28                            ; ===========================================================================
000BED28                            
000BEE21                            ; ============================================================================
000BEE22 00                         		even
000BEE22                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF322                            		even
000BF322                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4CE                            		even
000BF4CE                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA38                            		even
000BFA38                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFAB8                            		even
000BFAB8                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFAE4                            		even
000BFAE4                            		even
000BFAE4                            
000BFAE4                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D368                                        even
0013D368                            
0013D368                            Art_Dust:	incbin	artunc\spindust.bin
0013ECA8                            
0013ECA8                            ; ===============================================================
0013ECA8                            ; ==============================================================
0013ECA8                            ; --------------------------------------------------------------
0013ECA8                            ; Debugging modules
0013ECA8                            ; --------------------------------------------------------------
0013ECA8                            
0013ECA8                               include   "ErrorHandler.asm"
0013ECA8                            
0013ECA8                            ; ===============================================================
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            ; Error handling and debugging modules
0013ECA8                            ; 2016-2017, Vladikcomper
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            ; Error handler functions and calls
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            ; Error handler control flags
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            
0013ECA8                            ; Screen appearence flags
0013ECA8 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECA8 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECA8 =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECA8                            
0013ECA8                            ; Advanced execution flags
0013ECA8                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECA8 =00000020                  _eh_return		equ	$20
0013ECA8 =00000040                  _eh_enter_console	equ	$40
0013ECA8 =00000080                  _eh_align_offset	equ	$80
0013ECA8                            
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            ; Errors vector table
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            
0013ECA8                            ; Default screen configuration
0013ECA8 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECA8                            
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            
0013ECA8                            BusError:
0013ECA8 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECBA                            
0013ECBA                            AddressError:
0013ECBA 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECD0                            
0013ECD0                            IllegalInstr:
0013ECD0 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ECEC                            
0013ECEC                            ZeroDivide:
0013ECEC 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED00                            
0013ED00                            ChkInstr:
0013ED00 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED18                            
0013ED18                            TrapvInstr:
0013ED18 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED32                            
0013ED32                            PrivilegeViol:
0013ED32 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED4E                            
0013ED4E                            Trace:
0013ED4E 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED5C                            
0013ED5C                            Line1010Emu:
0013ED5C 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED74                            
0013ED74                            Line1111Emu:
0013ED74 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013ED8C                            
0013ED8C                            ErrorExcept:
0013ED8C 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDA4                            
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            ; Import error handler global functions
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            
0013EDA4                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDA4                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDA4                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDA4                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDA4                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDA4                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDA4                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDA4                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDA4                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDA4                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDA4                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDA4                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDA4                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDA4                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDA4                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDA4                            
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            ; Error handler external functions (compiled only when used)
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            
0013EDA4                            
0013EDA4                            
0013EDA4                            
0013EDA4                            
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            ; Include error handler binary module
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            
0013EDA4                            ErrorHandler:
0013EDA4                            	incbin	ErrorHandler.bin
001407B8                            
001407B8                            ; ---------------------------------------------------------------
001407B8                            ; WARNING!
001407B8                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407B8                            ;	Symbol data should be appended here after ROM is compiled
001407B8                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407B8                            ;	to resolve symbol names.
001407B8                            ; ---------------------------------------------------------------
001407B8                            ; ---------------------------------------------------------------
001407B8                            
001407B8                            ; end of 'ROM'
001407B8                            		even
001407B8                            EndOfRom:
001407B8                            
001407B8                            
